// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contenthubs.proto

#include "contenthubs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CStorePageFilter_SalePageFilter::CStorePageFilter_SalePageFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sale_tagid_(0u){}
struct CStorePageFilter_SalePageFilterDefaultTypeInternal {
  constexpr CStorePageFilter_SalePageFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorePageFilter_SalePageFilterDefaultTypeInternal() {}
  union {
    CStorePageFilter_SalePageFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorePageFilter_SalePageFilterDefaultTypeInternal _CStorePageFilter_SalePageFilter_default_instance_;
constexpr CStorePageFilter_ContentHubFilter_OptInInfo::CStorePageFilter_ContentHubFilter_OptInInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optin_tagid_(0u)
  , prune_tagid_(0u)
  , optin_only_(false){}
struct CStorePageFilter_ContentHubFilter_OptInInfoDefaultTypeInternal {
  constexpr CStorePageFilter_ContentHubFilter_OptInInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorePageFilter_ContentHubFilter_OptInInfoDefaultTypeInternal() {}
  union {
    CStorePageFilter_ContentHubFilter_OptInInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorePageFilter_ContentHubFilter_OptInInfoDefaultTypeInternal _CStorePageFilter_ContentHubFilter_OptInInfo_default_instance_;
constexpr CStorePageFilter_ContentHubFilter::CStorePageFilter_ContentHubFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hub_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hub_category_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optin_(nullptr)
  , hub_tagid_(0u)
  , discount_filter_(0)
{}
struct CStorePageFilter_ContentHubFilterDefaultTypeInternal {
  constexpr CStorePageFilter_ContentHubFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorePageFilter_ContentHubFilterDefaultTypeInternal() {}
  union {
    CStorePageFilter_ContentHubFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorePageFilter_ContentHubFilterDefaultTypeInternal _CStorePageFilter_ContentHubFilter_default_instance_;
constexpr CStorePageFilter_StoreFilter::CStorePageFilter_StoreFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cache_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CStorePageFilter_StoreFilterDefaultTypeInternal {
  constexpr CStorePageFilter_StoreFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorePageFilter_StoreFilterDefaultTypeInternal() {}
  union {
    CStorePageFilter_StoreFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorePageFilter_StoreFilterDefaultTypeInternal _CStorePageFilter_StoreFilter_default_instance_;
constexpr CStorePageFilter::CStorePageFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_filters_()
  , sale_filter_(nullptr)
  , content_hub_filter_(nullptr){}
struct CStorePageFilterDefaultTypeInternal {
  constexpr CStorePageFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CStorePageFilterDefaultTypeInternal() {}
  union {
    CStorePageFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CStorePageFilterDefaultTypeInternal _CStorePageFilter_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contenthubs_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contenthubs_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contenthubs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contenthubs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_SalePageFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_SalePageFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_SalePageFilter, sale_tagid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter_OptInInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter_OptInInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter_OptInInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter_OptInInfo, optin_tagid_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter_OptInInfo, prune_tagid_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter_OptInInfo, optin_only_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, hub_type_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, hub_category_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, hub_tagid_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, discount_filter_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_ContentHubFilter, optin_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_StoreFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_StoreFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_StoreFilter, filter_json_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter_StoreFilter, cache_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter, sale_filter_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter, content_hub_filter_),
  PROTOBUF_FIELD_OFFSET(::CStorePageFilter, store_filters_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CStorePageFilter_SalePageFilter)},
  { 7, 16, sizeof(::CStorePageFilter_ContentHubFilter_OptInInfo)},
  { 20, 30, sizeof(::CStorePageFilter_ContentHubFilter)},
  { 35, 42, sizeof(::CStorePageFilter_StoreFilter)},
  { 44, 52, sizeof(::CStorePageFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorePageFilter_SalePageFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorePageFilter_ContentHubFilter_OptInInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorePageFilter_ContentHubFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorePageFilter_StoreFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CStorePageFilter_default_instance_),
};

const char descriptor_table_protodef_contenthubs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021contenthubs.proto\032 google/protobuf/des"
  "criptor.proto\032\030steammessages_base.proto\""
  "\337\004\n\020CStorePageFilter\0225\n\013sale_filter\030\001 \001("
  "\0132 .CStorePageFilter.SalePageFilter\022>\n\022c"
  "ontent_hub_filter\030\002 \001(\0132\".CStorePageFilt"
  "er.ContentHubFilter\0224\n\rstore_filters\030\003 \003"
  "(\0132\035.CStorePageFilter.StoreFilter\032$\n\016Sal"
  "ePageFilter\022\022\n\nsale_tagid\030\001 \001(\r\032\300\002\n\020Cont"
  "entHubFilter\022\020\n\010hub_type\030\001 \001(\t\022\024\n\014hub_ca"
  "tegory\030\002 \001(\t\022\021\n\thub_tagid\030\003 \001(\r\022[\n\017disco"
  "unt_filter\030\004 \001(\0162\036.EContentHubDiscountFi"
  "lterType:\"EContentHubDiscountFilterType_"
  "None\022;\n\005optin\030\005 \001(\0132,.CStorePageFilter.C"
  "ontentHubFilter.OptInInfo\032W\n\tOptInInfo\022\014"
  "\n\004name\030\001 \001(\t\022\023\n\013optin_tagid\030\002 \001(\r\022\023\n\013pru"
  "ne_tagid\030\003 \001(\r\022\022\n\noptin_only\030\004 \001(\010\0325\n\013St"
  "oreFilter\022\023\n\013filter_json\030\001 \001(\t\022\021\n\tcache_"
  "key\030\002 \001(\t*\257\001\n\035EContentHubDiscountFilterT"
  "ype\022&\n\"EContentHubDiscountFilterType_Non"
  "e\020\000\022/\n+EContentHubDiscountFilterType_Dis"
  "countsOnly\020\001\0225\n1EContentHubDiscountFilte"
  "rType_PrioritizeDiscounts\020\002B#H\001\200\001\001\252\002\027Ope"
  "nSteamworks.Protobuf\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contenthubs_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contenthubs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contenthubs_2eproto = {
  false, false, 904, descriptor_table_protodef_contenthubs_2eproto, "contenthubs.proto", 
  &descriptor_table_contenthubs_2eproto_once, descriptor_table_contenthubs_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_contenthubs_2eproto::offsets,
  file_level_metadata_contenthubs_2eproto, file_level_enum_descriptors_contenthubs_2eproto, file_level_service_descriptors_contenthubs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_contenthubs_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contenthubs_2eproto);
  return descriptor_table_contenthubs_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_contenthubs_2eproto(&descriptor_table_contenthubs_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentHubDiscountFilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contenthubs_2eproto);
  return file_level_enum_descriptors_contenthubs_2eproto[0];
}
bool EContentHubDiscountFilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CStorePageFilter_SalePageFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorePageFilter_SalePageFilter>()._has_bits_);
  static void set_has_sale_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CStorePageFilter_SalePageFilter::CStorePageFilter_SalePageFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorePageFilter.SalePageFilter)
}
CStorePageFilter_SalePageFilter::CStorePageFilter_SalePageFilter(const CStorePageFilter_SalePageFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sale_tagid_ = from.sale_tagid_;
  // @@protoc_insertion_point(copy_constructor:CStorePageFilter.SalePageFilter)
}

void CStorePageFilter_SalePageFilter::SharedCtor() {
sale_tagid_ = 0u;
}

CStorePageFilter_SalePageFilter::~CStorePageFilter_SalePageFilter() {
  // @@protoc_insertion_point(destructor:CStorePageFilter.SalePageFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorePageFilter_SalePageFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CStorePageFilter_SalePageFilter::ArenaDtor(void* object) {
  CStorePageFilter_SalePageFilter* _this = reinterpret_cast< CStorePageFilter_SalePageFilter* >(object);
  (void)_this;
}
void CStorePageFilter_SalePageFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorePageFilter_SalePageFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorePageFilter_SalePageFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorePageFilter.SalePageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sale_tagid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorePageFilter_SalePageFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sale_tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sale_tagid(&has_bits);
          sale_tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorePageFilter_SalePageFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorePageFilter.SalePageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sale_tagid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sale_tagid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorePageFilter.SalePageFilter)
  return target;
}

size_t CStorePageFilter_SalePageFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorePageFilter.SalePageFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sale_tagid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sale_tagid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorePageFilter_SalePageFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorePageFilter.SalePageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorePageFilter_SalePageFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorePageFilter_SalePageFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorePageFilter.SalePageFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorePageFilter.SalePageFilter)
    MergeFrom(*source);
  }
}

void CStorePageFilter_SalePageFilter::MergeFrom(const CStorePageFilter_SalePageFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorePageFilter.SalePageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sale_tagid()) {
    _internal_set_sale_tagid(from._internal_sale_tagid());
  }
}

void CStorePageFilter_SalePageFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorePageFilter.SalePageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorePageFilter_SalePageFilter::CopyFrom(const CStorePageFilter_SalePageFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorePageFilter.SalePageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorePageFilter_SalePageFilter::IsInitialized() const {
  return true;
}

void CStorePageFilter_SalePageFilter::InternalSwap(CStorePageFilter_SalePageFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sale_tagid_, other->sale_tagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorePageFilter_SalePageFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorePageFilter_ContentHubFilter_OptInInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorePageFilter_ContentHubFilter_OptInInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optin_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prune_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optin_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CStorePageFilter_ContentHubFilter_OptInInfo::CStorePageFilter_ContentHubFilter_OptInInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorePageFilter.ContentHubFilter.OptInInfo)
}
CStorePageFilter_ContentHubFilter_OptInInfo::CStorePageFilter_ContentHubFilter_OptInInfo(const CStorePageFilter_ContentHubFilter_OptInInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&optin_tagid_, &from.optin_tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optin_only_) -
    reinterpret_cast<char*>(&optin_tagid_)) + sizeof(optin_only_));
  // @@protoc_insertion_point(copy_constructor:CStorePageFilter.ContentHubFilter.OptInInfo)
}

void CStorePageFilter_ContentHubFilter_OptInInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optin_tagid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optin_only_) -
    reinterpret_cast<char*>(&optin_tagid_)) + sizeof(optin_only_));
}

CStorePageFilter_ContentHubFilter_OptInInfo::~CStorePageFilter_ContentHubFilter_OptInInfo() {
  // @@protoc_insertion_point(destructor:CStorePageFilter.ContentHubFilter.OptInInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorePageFilter_ContentHubFilter_OptInInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStorePageFilter_ContentHubFilter_OptInInfo::ArenaDtor(void* object) {
  CStorePageFilter_ContentHubFilter_OptInInfo* _this = reinterpret_cast< CStorePageFilter_ContentHubFilter_OptInInfo* >(object);
  (void)_this;
}
void CStorePageFilter_ContentHubFilter_OptInInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorePageFilter_ContentHubFilter_OptInInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorePageFilter_ContentHubFilter_OptInInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&optin_tagid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optin_only_) -
        reinterpret_cast<char*>(&optin_tagid_)) + sizeof(optin_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorePageFilter_ContentHubFilter_OptInInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorePageFilter.ContentHubFilter.OptInInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 optin_tagid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optin_tagid(&has_bits);
          optin_tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prune_tagid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prune_tagid(&has_bits);
          prune_tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optin_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_optin_only(&has_bits);
          optin_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorePageFilter_ContentHubFilter_OptInInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorePageFilter.ContentHubFilter.OptInInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 optin_tagid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_optin_tagid(), target);
  }

  // optional uint32 prune_tagid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prune_tagid(), target);
  }

  // optional bool optin_only = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_optin_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorePageFilter.ContentHubFilter.OptInInfo)
  return target;
}

size_t CStorePageFilter_ContentHubFilter_OptInInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 optin_tagid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_optin_tagid());
    }

    // optional uint32 prune_tagid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prune_tagid());
    }

    // optional bool optin_only = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorePageFilter_ContentHubFilter_OptInInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorePageFilter_ContentHubFilter_OptInInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorePageFilter_ContentHubFilter_OptInInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorePageFilter.ContentHubFilter.OptInInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorePageFilter.ContentHubFilter.OptInInfo)
    MergeFrom(*source);
  }
}

void CStorePageFilter_ContentHubFilter_OptInInfo::MergeFrom(const CStorePageFilter_ContentHubFilter_OptInInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      optin_tagid_ = from.optin_tagid_;
    }
    if (cached_has_bits & 0x00000004u) {
      prune_tagid_ = from.prune_tagid_;
    }
    if (cached_has_bits & 0x00000008u) {
      optin_only_ = from.optin_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStorePageFilter_ContentHubFilter_OptInInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorePageFilter_ContentHubFilter_OptInInfo::CopyFrom(const CStorePageFilter_ContentHubFilter_OptInInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorePageFilter.ContentHubFilter.OptInInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorePageFilter_ContentHubFilter_OptInInfo::IsInitialized() const {
  return true;
}

void CStorePageFilter_ContentHubFilter_OptInInfo::InternalSwap(CStorePageFilter_ContentHubFilter_OptInInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStorePageFilter_ContentHubFilter_OptInInfo, optin_only_)
      + sizeof(CStorePageFilter_ContentHubFilter_OptInInfo::optin_only_)
      - PROTOBUF_FIELD_OFFSET(CStorePageFilter_ContentHubFilter_OptInInfo, optin_tagid_)>(
          reinterpret_cast<char*>(&optin_tagid_),
          reinterpret_cast<char*>(&other->optin_tagid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorePageFilter_ContentHubFilter_OptInInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorePageFilter_ContentHubFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorePageFilter_ContentHubFilter>()._has_bits_);
  static void set_has_hub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hub_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hub_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discount_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CStorePageFilter_ContentHubFilter_OptInInfo& optin(const CStorePageFilter_ContentHubFilter* msg);
  static void set_has_optin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CStorePageFilter_ContentHubFilter_OptInInfo&
CStorePageFilter_ContentHubFilter::_Internal::optin(const CStorePageFilter_ContentHubFilter* msg) {
  return *msg->optin_;
}
CStorePageFilter_ContentHubFilter::CStorePageFilter_ContentHubFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorePageFilter.ContentHubFilter)
}
CStorePageFilter_ContentHubFilter::CStorePageFilter_ContentHubFilter(const CStorePageFilter_ContentHubFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hub_type()) {
    hub_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hub_type(), 
      GetArena());
  }
  hub_category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hub_category()) {
    hub_category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hub_category(), 
      GetArena());
  }
  if (from._internal_has_optin()) {
    optin_ = new ::CStorePageFilter_ContentHubFilter_OptInInfo(*from.optin_);
  } else {
    optin_ = nullptr;
  }
  ::memcpy(&hub_tagid_, &from.hub_tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&discount_filter_) -
    reinterpret_cast<char*>(&hub_tagid_)) + sizeof(discount_filter_));
  // @@protoc_insertion_point(copy_constructor:CStorePageFilter.ContentHubFilter)
}

void CStorePageFilter_ContentHubFilter::SharedCtor() {
hub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hub_category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&discount_filter_) -
    reinterpret_cast<char*>(&optin_)) + sizeof(discount_filter_));
}

CStorePageFilter_ContentHubFilter::~CStorePageFilter_ContentHubFilter() {
  // @@protoc_insertion_point(destructor:CStorePageFilter.ContentHubFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorePageFilter_ContentHubFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hub_category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optin_;
}

void CStorePageFilter_ContentHubFilter::ArenaDtor(void* object) {
  CStorePageFilter_ContentHubFilter* _this = reinterpret_cast< CStorePageFilter_ContentHubFilter* >(object);
  (void)_this;
}
void CStorePageFilter_ContentHubFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorePageFilter_ContentHubFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorePageFilter_ContentHubFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorePageFilter.ContentHubFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hub_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hub_category_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optin_ != nullptr);
      optin_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&hub_tagid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&discount_filter_) -
        reinterpret_cast<char*>(&hub_tagid_)) + sizeof(discount_filter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorePageFilter_ContentHubFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hub_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorePageFilter.ContentHubFilter.hub_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hub_category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hub_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorePageFilter.ContentHubFilter.hub_category");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hub_tagid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hub_tagid(&has_bits);
          hub_tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EContentHubDiscountFilterType discount_filter = 4 [default = EContentHubDiscountFilterType_None];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EContentHubDiscountFilterType_IsValid(val))) {
            _internal_set_discount_filter(static_cast<::EContentHubDiscountFilterType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CStorePageFilter.ContentHubFilter.OptInInfo optin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_optin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorePageFilter_ContentHubFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorePageFilter.ContentHubFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hub_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hub_type().data(), static_cast<int>(this->_internal_hub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorePageFilter.ContentHubFilter.hub_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hub_type(), target);
  }

  // optional string hub_category = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hub_category().data(), static_cast<int>(this->_internal_hub_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorePageFilter.ContentHubFilter.hub_category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hub_category(), target);
  }

  // optional uint32 hub_tagid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hub_tagid(), target);
  }

  // optional .EContentHubDiscountFilterType discount_filter = 4 [default = EContentHubDiscountFilterType_None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_discount_filter(), target);
  }

  // optional .CStorePageFilter.ContentHubFilter.OptInInfo optin = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::optin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorePageFilter.ContentHubFilter)
  return target;
}

size_t CStorePageFilter_ContentHubFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorePageFilter.ContentHubFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hub_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hub_type());
    }

    // optional string hub_category = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hub_category());
    }

    // optional .CStorePageFilter.ContentHubFilter.OptInInfo optin = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optin_);
    }

    // optional uint32 hub_tagid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hub_tagid());
    }

    // optional .EContentHubDiscountFilterType discount_filter = 4 [default = EContentHubDiscountFilterType_None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_discount_filter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorePageFilter_ContentHubFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorePageFilter.ContentHubFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorePageFilter_ContentHubFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorePageFilter_ContentHubFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorePageFilter.ContentHubFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorePageFilter.ContentHubFilter)
    MergeFrom(*source);
  }
}

void CStorePageFilter_ContentHubFilter::MergeFrom(const CStorePageFilter_ContentHubFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorePageFilter.ContentHubFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hub_type(from._internal_hub_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hub_category(from._internal_hub_category());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optin()->::CStorePageFilter_ContentHubFilter_OptInInfo::MergeFrom(from._internal_optin());
    }
    if (cached_has_bits & 0x00000008u) {
      hub_tagid_ = from.hub_tagid_;
    }
    if (cached_has_bits & 0x00000010u) {
      discount_filter_ = from.discount_filter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStorePageFilter_ContentHubFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorePageFilter.ContentHubFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorePageFilter_ContentHubFilter::CopyFrom(const CStorePageFilter_ContentHubFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorePageFilter.ContentHubFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorePageFilter_ContentHubFilter::IsInitialized() const {
  return true;
}

void CStorePageFilter_ContentHubFilter::InternalSwap(CStorePageFilter_ContentHubFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hub_type_.Swap(&other->hub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hub_category_.Swap(&other->hub_category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStorePageFilter_ContentHubFilter, discount_filter_)
      + sizeof(CStorePageFilter_ContentHubFilter::discount_filter_)
      - PROTOBUF_FIELD_OFFSET(CStorePageFilter_ContentHubFilter, optin_)>(
          reinterpret_cast<char*>(&optin_),
          reinterpret_cast<char*>(&other->optin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorePageFilter_ContentHubFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorePageFilter_StoreFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorePageFilter_StoreFilter>()._has_bits_);
  static void set_has_filter_json(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cache_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CStorePageFilter_StoreFilter::CStorePageFilter_StoreFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorePageFilter.StoreFilter)
}
CStorePageFilter_StoreFilter::CStorePageFilter_StoreFilter(const CStorePageFilter_StoreFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filter_json()) {
    filter_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter_json(), 
      GetArena());
  }
  cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cache_key()) {
    cache_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CStorePageFilter.StoreFilter)
}

void CStorePageFilter_StoreFilter::SharedCtor() {
filter_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cache_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CStorePageFilter_StoreFilter::~CStorePageFilter_StoreFilter() {
  // @@protoc_insertion_point(destructor:CStorePageFilter.StoreFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorePageFilter_StoreFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filter_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CStorePageFilter_StoreFilter::ArenaDtor(void* object) {
  CStorePageFilter_StoreFilter* _this = reinterpret_cast< CStorePageFilter_StoreFilter* >(object);
  (void)_this;
}
void CStorePageFilter_StoreFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorePageFilter_StoreFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorePageFilter_StoreFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorePageFilter.StoreFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filter_json_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorePageFilter_StoreFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string filter_json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorePageFilter.StoreFilter.filter_json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cache_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cache_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CStorePageFilter.StoreFilter.cache_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorePageFilter_StoreFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorePageFilter.StoreFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter_json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_json().data(), static_cast<int>(this->_internal_filter_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorePageFilter.StoreFilter.filter_json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_json(), target);
  }

  // optional string cache_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cache_key().data(), static_cast<int>(this->_internal_cache_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CStorePageFilter.StoreFilter.cache_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorePageFilter.StoreFilter)
  return target;
}

size_t CStorePageFilter_StoreFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorePageFilter.StoreFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filter_json = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_json());
    }

    // optional string cache_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorePageFilter_StoreFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorePageFilter.StoreFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorePageFilter_StoreFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorePageFilter_StoreFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorePageFilter.StoreFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorePageFilter.StoreFilter)
    MergeFrom(*source);
  }
}

void CStorePageFilter_StoreFilter::MergeFrom(const CStorePageFilter_StoreFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorePageFilter.StoreFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filter_json(from._internal_filter_json());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cache_key(from._internal_cache_key());
    }
  }
}

void CStorePageFilter_StoreFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorePageFilter.StoreFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorePageFilter_StoreFilter::CopyFrom(const CStorePageFilter_StoreFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorePageFilter.StoreFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorePageFilter_StoreFilter::IsInitialized() const {
  return true;
}

void CStorePageFilter_StoreFilter::InternalSwap(CStorePageFilter_StoreFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_json_.Swap(&other->filter_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cache_key_.Swap(&other->cache_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorePageFilter_StoreFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CStorePageFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<CStorePageFilter>()._has_bits_);
  static const ::CStorePageFilter_SalePageFilter& sale_filter(const CStorePageFilter* msg);
  static void set_has_sale_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CStorePageFilter_ContentHubFilter& content_hub_filter(const CStorePageFilter* msg);
  static void set_has_content_hub_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CStorePageFilter_SalePageFilter&
CStorePageFilter::_Internal::sale_filter(const CStorePageFilter* msg) {
  return *msg->sale_filter_;
}
const ::CStorePageFilter_ContentHubFilter&
CStorePageFilter::_Internal::content_hub_filter(const CStorePageFilter* msg) {
  return *msg->content_hub_filter_;
}
CStorePageFilter::CStorePageFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  store_filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CStorePageFilter)
}
CStorePageFilter::CStorePageFilter(const CStorePageFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      store_filters_(from.store_filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sale_filter()) {
    sale_filter_ = new ::CStorePageFilter_SalePageFilter(*from.sale_filter_);
  } else {
    sale_filter_ = nullptr;
  }
  if (from._internal_has_content_hub_filter()) {
    content_hub_filter_ = new ::CStorePageFilter_ContentHubFilter(*from.content_hub_filter_);
  } else {
    content_hub_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CStorePageFilter)
}

void CStorePageFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sale_filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_hub_filter_) -
    reinterpret_cast<char*>(&sale_filter_)) + sizeof(content_hub_filter_));
}

CStorePageFilter::~CStorePageFilter() {
  // @@protoc_insertion_point(destructor:CStorePageFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CStorePageFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sale_filter_;
  if (this != internal_default_instance()) delete content_hub_filter_;
}

void CStorePageFilter::ArenaDtor(void* object) {
  CStorePageFilter* _this = reinterpret_cast< CStorePageFilter* >(object);
  (void)_this;
}
void CStorePageFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CStorePageFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStorePageFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:CStorePageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sale_filter_ != nullptr);
      sale_filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(content_hub_filter_ != nullptr);
      content_hub_filter_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStorePageFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CStorePageFilter.SalePageFilter sale_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sale_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CStorePageFilter.ContentHubFilter content_hub_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_hub_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CStorePageFilter.StoreFilter store_filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_store_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CStorePageFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CStorePageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CStorePageFilter.SalePageFilter sale_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sale_filter(this), target, stream);
  }

  // optional .CStorePageFilter.ContentHubFilter content_hub_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content_hub_filter(this), target, stream);
  }

  // repeated .CStorePageFilter.StoreFilter store_filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_store_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_store_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CStorePageFilter)
  return target;
}

size_t CStorePageFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CStorePageFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CStorePageFilter.StoreFilter store_filters = 3;
  total_size += 1UL * this->_internal_store_filters_size();
  for (const auto& msg : this->store_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CStorePageFilter.SalePageFilter sale_filter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sale_filter_);
    }

    // optional .CStorePageFilter.ContentHubFilter content_hub_filter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_hub_filter_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStorePageFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CStorePageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const CStorePageFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CStorePageFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CStorePageFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CStorePageFilter)
    MergeFrom(*source);
  }
}

void CStorePageFilter::MergeFrom(const CStorePageFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CStorePageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_filters_.MergeFrom(from.store_filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sale_filter()->::CStorePageFilter_SalePageFilter::MergeFrom(from._internal_sale_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_content_hub_filter()->::CStorePageFilter_ContentHubFilter::MergeFrom(from._internal_content_hub_filter());
    }
  }
}

void CStorePageFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CStorePageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStorePageFilter::CopyFrom(const CStorePageFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CStorePageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStorePageFilter::IsInitialized() const {
  return true;
}

void CStorePageFilter::InternalSwap(CStorePageFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  store_filters_.InternalSwap(&other->store_filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CStorePageFilter, content_hub_filter_)
      + sizeof(CStorePageFilter::content_hub_filter_)
      - PROTOBUF_FIELD_OFFSET(CStorePageFilter, sale_filter_)>(
          reinterpret_cast<char*>(&sale_filter_),
          reinterpret_cast<char*>(&other->sale_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CStorePageFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CStorePageFilter_SalePageFilter* Arena::CreateMaybeMessage< ::CStorePageFilter_SalePageFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorePageFilter_SalePageFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorePageFilter_ContentHubFilter_OptInInfo* Arena::CreateMaybeMessage< ::CStorePageFilter_ContentHubFilter_OptInInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorePageFilter_ContentHubFilter_OptInInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorePageFilter_ContentHubFilter* Arena::CreateMaybeMessage< ::CStorePageFilter_ContentHubFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorePageFilter_ContentHubFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorePageFilter_StoreFilter* Arena::CreateMaybeMessage< ::CStorePageFilter_StoreFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorePageFilter_StoreFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::CStorePageFilter* Arena::CreateMaybeMessage< ::CStorePageFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CStorePageFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
