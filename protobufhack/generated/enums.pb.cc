// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_enums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[50];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\032 google/protobuf/descripto"
  "r.proto\032\030steammessages_base.proto*\324\t\n\027EP"
  "ublishedFileQueryType\022\'\n#PublishedFileQu"
  "eryType_RankedByVote\020\000\0222\n.PublishedFileQ"
  "ueryType_RankedByPublicationDate\020\001\022@\n<Pu"
  "blishedFileQueryType_AcceptedForGameRank"
  "edByAcceptanceDate\020\002\022(\n$PublishedFileQue"
  "ryType_RankedByTrend\020\003\022D\n@PublishedFileQ"
  "ueryType_FavoritedByFriendsRankedByPubli"
  "cationDate\020\004\022B\n>PublishedFileQueryType_C"
  "reatedByFriendsRankedByPublicationDate\020\005"
  "\0223\n/PublishedFileQueryType_RankedByNumTi"
  "mesReported\020\006\022H\nDPublishedFileQueryType_"
  "CreatedByFollowedUsersRankedByPublicatio"
  "nDate\020\007\022&\n\"PublishedFileQueryType_NotYet"
  "Rated\020\010\022;\n7PublishedFileQueryType_Ranked"
  "ByTotalUniqueSubscriptions\020\t\0220\n,Publishe"
  "dFileQueryType_RankedByTotalVotesAsc\020\n\022*"
  "\n&PublishedFileQueryType_RankedByVotesUp"
  "\020\013\022-\n)PublishedFileQueryType_RankedByTex"
  "tSearch\020\014\0220\n,PublishedFileQueryType_Rank"
  "edByPlaytimeTrend\020\r\0220\n,PublishedFileQuer"
  "yType_RankedByTotalPlaytime\020\016\0227\n3Publish"
  "edFileQueryType_RankedByAveragePlaytimeT"
  "rend\020\017\022:\n6PublishedFileQueryType_RankedB"
  "yLifetimeAveragePlaytime\020\020\0228\n4PublishedF"
  "ileQueryType_RankedByPlaytimeSessionsTre"
  "nd\020\021\022;\n7PublishedFileQueryType_RankedByL"
  "ifetimePlaytimeSessions\020\022\022=\n9PublishedFi"
  "leQueryType_RankedByInappropriateContent"
  "Rating\020\023\0222\n.PublishedFileQueryType_Ranke"
  "dByBanContentCheck\020\024\0222\n.PublishedFileQue"
  "ryType_RankedByLastUpdatedDate\020\025*\266\001\n#EPu"
  "blishedFileInappropriateProvider\022/\n+EPub"
  "lishedFileInappropriateProvider_Invalid\020"
  "\000\022.\n*EPublishedFileInappropriateProvider"
  "_Google\020\001\022.\n*EPublishedFileInappropriate"
  "Provider_Amazon\020\002*\311\002\n!EPublishedFileInap"
  "propriateResult\0220\n,EPublishedFileInappro"
  "priateResult_NotScanned\020\000\0222\n.EPublishedF"
  "ileInappropriateResult_VeryUnlikely\020\001\022.\n"
  "*EPublishedFileInappropriateResult_Unlik"
  "ely\020\036\022.\n*EPublishedFileInappropriateResu"
  "lt_Possible\0202\022,\n(EPublishedFileInappropr"
  "iateResult_Likely\020K\0220\n,EPublishedFileIna"
  "ppropriateResult_VeryLikely\020d*\235\003\n\021EPerso"
  "naStateFlag\022%\n!EPersonaStateFlag_HasRich"
  "Presence\020\001\022$\n EPersonaStateFlag_InJoinab"
  "leGame\020\002\022\034\n\030EPersonaStateFlag_Golden\020\004\022("
  "\n$EPersonaStateFlag_RemotePlayTogether\020\010"
  "\022$\n\037EPersonaStateFlag_ClientTypeWeb\020\200\002\022\'"
  "\n\"EPersonaStateFlag_ClientTypeMobile\020\200\004\022"
  "(\n#EPersonaStateFlag_ClientTypeTenfoot\020\200"
  "\010\022#\n\036EPersonaStateFlag_ClientTypeVR\020\200\020\022("
  "\n#EPersonaStateFlag_LaunchTypeGamepad\020\200 "
  "\022+\n&EPersonaStateFlag_LaunchTypeCompatTo"
  "ol\020\200@*\324\001\n\025EContentCheckProvider\022!\n\035ECont"
  "entCheckProvider_Invalid\020\000\022+\n\'EContentCh"
  "eckProvider_Google_DEPRECATED\020\001\022 \n\034ECont"
  "entCheckProvider_Amazon\020\002\022\037\n\033EContentChe"
  "ckProvider_Local\020\003\022(\n$EContentCheckProvi"
  "der_GoogleVertexAI\020\004*\341\010\n\031EProfileCustomi"
  "zationType\022$\n EProfileCustomizationTypeI"
  "nvalid\020\000\0224\n0EProfileCustomizationTypeRar"
  "eAchievementShowcase\020\001\022*\n&EProfileCustom"
  "izationTypeGameCollector\020\002\022)\n%EProfileCu"
  "stomizationTypeItemShowcase\020\003\022*\n&EProfil"
  "eCustomizationTypeTradeShowcase\020\004\022#\n\037EPr"
  "ofileCustomizationTypeBadges\020\005\022)\n%EProfi"
  "leCustomizationTypeFavoriteGame\020\006\022/\n+EPr"
  "ofileCustomizationTypeScreenshotShowcase"
  "\020\007\022\'\n#EProfileCustomizationTypeCustomTex"
  "t\020\010\022*\n&EProfileCustomizationTypeFavorite"
  "Group\020\t\022+\n\'EProfileCustomizationTypeReco"
  "mmendation\020\n\022)\n%EProfileCustomizationTyp"
  "eWorkshopItem\020\013\022\'\n#EProfileCustomization"
  "TypeMyWorkshop\020\014\022,\n(EProfileCustomizatio"
  "nTypeArtworkShowcase\020\r\022*\n&EProfileCustom"
  "izationTypeVideoShowcase\020\016\022#\n\037EProfileCu"
  "stomizationTypeGuides\020\017\022%\n!EProfileCusto"
  "mizationTypeMyGuides\020\020\022)\n%EProfileCustom"
  "izationTypeAchievements\020\021\022\'\n#EProfileCus"
  "tomizationTypeGreenlight\020\022\022)\n%EProfileCu"
  "stomizationTypeMyGreenlight\020\023\022#\n\037EProfil"
  "eCustomizationTypeSalien\020\024\0223\n/EProfileCu"
  "stomizationTypeLoyaltyRewardReactions\020\025\022"
  "2\n.EProfileCustomizationTypeSingleArtwor"
  "kShowcase\020\026\0226\n2EProfileCustomizationType"
  "AchievementsCompletionist\020\027\022#\n\037EProfileC"
  "ustomizationTypeReplay\020\030*\300\001\n\033EPublishedF"
  "ileStorageSystem\022&\n\"EPublishedFileStorag"
  "eSystemInvalid\020\000\022*\n&EPublishedFileStorag"
  "eSystemLegacyCloud\020\001\022$\n EPublishedFileSt"
  "orageSystemDepot\020\002\022\'\n#EPublishedFileStor"
  "ageSystemUGCCloud\020\003*\221\001\n\031ECloudStoragePer"
  "sistState\022&\n\"ECloudStoragePersistStatePe"
  "rsisted\020\000\022&\n\"ECloudStoragePersistStateFo"
  "rgotten\020\001\022$\n ECloudStoragePersistStateDe"
  "leted\020\002*\334\001\n\022ESDCardFormatStage\022\036\n\032ESDCar"
  "dFormatStage_Invalid\020\000\022\037\n\033ESDCardFormatS"
  "tage_Starting\020\001\022\036\n\032ESDCardFormatStage_Te"
  "sting\020\002\022\037\n\033ESDCardFormatStage_Rescuing\020\003"
  "\022!\n\035ESDCardFormatStage_Formatting\020\004\022!\n\035E"
  "SDCardFormatStage_Finalizing\020\005*\207\002\n\023EStor"
  "ageFormatStage\022\037\n\033EStorageFormatStage_In"
  "valid\020\000\022\"\n\036EStorageFormatStage_NotRunnin"
  "g\020\001\022 \n\034EStorageFormatStage_Starting\020\002\022\037\n"
  "\033EStorageFormatStage_Testing\020\003\022 \n\034EStora"
  "geFormatStage_Rescuing\020\004\022\"\n\036EStorageForm"
  "atStage_Formatting\020\005\022\"\n\036EStorageFormatSt"
  "age_Finalizing\020\006*~\n\025ESystemFanControlMod"
  "e\022 \n\034SystemFanControlMode_Invalid\020\000\022!\n\035S"
  "ystemFanControlMode_Disabled\020\001\022 \n\034System"
  "FanControlMode_Default\020\002*{\n\024EStartupMovi"
  "eVariant\022 \n\034EStartupMovieVariant_Invalid"
  "\020\000\022 \n\034EStartupMovieVariant_Default\020\001\022\037\n\033"
  "EStartupMovieVariant_Orange\020\002*\205\001\n\023EColor"
  "GamutLabelSet\022\036\n\032ColorGamutLabelSet_Defa"
  "ult\020\000\022\"\n\036ColorGamutLabelSet_sRGB_Native\020"
  "\001\022*\n&ColorGamutLabelSet_Native_sRGB_Boos"
  "ted\020\002*\250\003\n\024EBluetoothDeviceType\022\037\n\033Blueto"
  "othDeviceType_Invalid\020\000\022\037\n\033BluetoothDevi"
  "ceType_Unknown\020\001\022\035\n\031BluetoothDeviceType_"
  "Phone\020\002\022 \n\034BluetoothDeviceType_Computer\020"
  "\003\022\037\n\033BluetoothDeviceType_Headset\020\004\022\"\n\036Bl"
  "uetoothDeviceType_Headphones\020\005\022 \n\034Blueto"
  "othDeviceType_Speakers\020\006\022\"\n\036BluetoothDev"
  "iceType_OtherAudio\020\007\022\035\n\031BluetoothDeviceT"
  "ype_Mouse\020\010\022 \n\034BluetoothDeviceType_Joyst"
  "ick\020\t\022\037\n\033BluetoothDeviceType_Gamepad\020\n\022 "
  "\n\034BluetoothDeviceType_Keyboard\020\013*z\n\025ESys"
  "temAudioDirection\022 \n\034SystemAudioDirectio"
  "n_Invalid\020\000\022\036\n\032SystemAudioDirection_Inpu"
  "t\020\001\022\037\n\033SystemAudioDirection_Output\020\002*\335\002\n"
  "\023ESystemAudioChannel\022\036\n\032SystemAudioChann"
  "el_Invalid\020\000\022!\n\035SystemAudioChannel_Aggre"
  "gated\020\001\022 \n\034SystemAudioChannel_FrontLeft\020"
  "\002\022!\n\035SystemAudioChannel_FrontRight\020\003\022\032\n\026"
  "SystemAudioChannel_LFE\020\004\022\037\n\033SystemAudioC"
  "hannel_BackLeft\020\005\022 \n\034SystemAudioChannel_"
  "BackRight\020\006\022\"\n\036SystemAudioChannel_FrontC"
  "enter\020\007\022\036\n\032SystemAudioChannel_Unknown\020\010\022"
  "\033\n\027SystemAudioChannel_Mono\020\t*\277\001\n\024ESystem"
  "AudioPortType\022\037\n\033SystemAudioPortType_Inv"
  "alid\020\000\022\037\n\033SystemAudioPortType_Unknown\020\001\022"
  " \n\034SystemAudioPortType_Audio32f\020\002\022\036\n\032Sys"
  "temAudioPortType_Midi8b\020\003\022#\n\037SystemAudio"
  "PortType_Video32RGBA\020\004*\212\001\n\031ESystemAudioP"
  "ortDirection\022$\n SystemAudioPortDirection"
  "_Invalid\020\000\022\"\n\036SystemAudioPortDirection_I"
  "nput\020\001\022#\n\037SystemAudioPortDirection_Outpu"
  "t\020\002*}\n\023ESystemServiceState\022#\n\037ESystemSer"
  "viceState_Unavailable\020\000\022 \n\034ESystemServic"
  "eState_Disabled\020\001\022\037\n\033ESystemServiceState"
  "_Enabled\020\002*\327\001\n\031EGraphicsPerfOverlayLevel"
  "\022$\n EGraphicsPerfOverlayLevel_Hidden\020\000\022#"
  "\n\037EGraphicsPerfOverlayLevel_Basic\020\001\022$\n E"
  "GraphicsPerfOverlayLevel_Medium\020\002\022\"\n\036EGr"
  "aphicsPerfOverlayLevel_Full\020\003\022%\n!EGraphi"
  "csPerfOverlayLevel_Minimal\020\004*\331\001\n\024EGPUPer"
  "formanceLevel\022 \n\034EGPUPerformanceLevel_In"
  "valid\020\000\022\035\n\031EGPUPerformanceLevel_Auto\020\001\022\037"
  "\n\033EGPUPerformanceLevel_Manual\020\002\022\034\n\030EGPUP"
  "erformanceLevel_Low\020\003\022\035\n\031EGPUPerformance"
  "Level_High\020\004\022\"\n\036EGPUPerformanceLevel_Pro"
  "filing\020\005*\257\001\n\016EScalingFilter\022\032\n\026EScalingF"
  "ilter_Invalid\020\000\022\026\n\022EScalingFilter_FSR\020\001\022"
  "\032\n\026EScalingFilter_Nearest\020\002\022\032\n\026EScalingF"
  "ilter_Integer\020\003\022\031\n\025EScalingFilter_Linear"
  "\020\004\022\026\n\022EScalingFilter_NIS\020\005*\261\001\n\023ESplitSca"
  "lingFilter\022\037\n\033ESplitScalingFilter_Invali"
  "d\020\000\022\036\n\032ESplitScalingFilter_Linear\020\001\022\037\n\033E"
  "SplitScalingFilter_Nearest\020\002\022\033\n\027ESplitSc"
  "alingFilter_FSR\020\003\022\033\n\027ESplitScalingFilter"
  "_NIS\020\004*\321\001\n\023ESplitScalingScaler\022\037\n\033ESplit"
  "ScalingScaler_Invalid\020\000\022\034\n\030ESplitScaling"
  "Scaler_Auto\020\001\022\037\n\033ESplitScalingScaler_Int"
  "eger\020\002\022\033\n\027ESplitScalingScaler_Fit\020\003\022\034\n\030E"
  "SplitScalingScaler_Fill\020\004\022\037\n\033ESplitScali"
  "ngScaler_Stretch\020\005*w\n\022EGamescopeBlurMode"
  "\022\037\n\033EGamescopeBlurMode_Disabled\020\000\022!\n\035EGa"
  "mescopeBlurMode_IfOccluded\020\001\022\035\n\031EGamesco"
  "peBlurMode_Always\020\002*\232\001\n\nESLSHelper\022\026\n\022ES"
  "LSHelper_Invalid\020\000\022\027\n\023ESLSHelper_Minidum"
  "p\020\001\022\024\n\020ESLSHelper_Kdump\020\002\022\026\n\022ESLSHelper_"
  "Journal\020\003\022\022\n\016ESLSHelper_Gpu\020\004\022\031\n\025ESLSHel"
  "per_SystemInfo\020\005*\273\001\n\021EHDRVisualization\022\032"
  "\n\026EHDRVisualization_None\020\000\022\035\n\031EHDRVisual"
  "ization_Heatmap\020\001\022\036\n\032EHDRVisualization_A"
  "nalysis\020\002\022%\n!EHDRVisualization_HeatmapEx"
  "tended\020\003\022$\n EHDRVisualization_HeatmapCla"
  "ssic\020\004*{\n\023EHDRToneMapOperator\022\037\n\033EHDRTon"
  "eMapOperator_Invalid\020\000\022!\n\035EHDRToneMapOpe"
  "rator_Uncharted\020\001\022 \n\034EHDRToneMapOperator"
  "_Reinhard\020\002*t\n\014ECPUGovernor\022\030\n\024ECPUGover"
  "nor_Invalid\020\000\022\025\n\021ECPUGovernor_Perf\020\001\022\032\n\026"
  "ECPUGovernor_Powersave\020\002\022\027\n\023ECPUGovernor"
  "_Manual\020\003*\322\001\n\014EUpdaterType\022\030\n\024EUpdaterTy"
  "pe_Invalid\020\000\022\027\n\023EUpdaterType_Client\020\001\022\023\n"
  "\017EUpdaterType_OS\020\002\022\025\n\021EUpdaterType_BIOS\020"
  "\003\022\033\n\027EUpdaterType_Aggregated\020\004\022\026\n\022EUpdat"
  "erType_Test1\020\005\022\026\n\022EUpdaterType_Test2\020\006\022\026"
  "\n\022EUpdaterType_Dummy\020\007*\353\001\n\rEUpdaterState"
  "\022\031\n\025EUpdaterState_Invalid\020\000\022\032\n\026EUpdaterS"
  "tate_UpToDate\020\002\022\032\n\026EUpdaterState_Checkin"
  "g\020\003\022\033\n\027EUpdaterState_Available\020\004\022\032\n\026EUpd"
  "aterState_Applying\020\005\022&\n\"EUpdaterState_Cl"
  "ientRestartPending\020\006\022&\n\"EUpdaterState_Sy"
  "stemRestartPending\020\007*\327\001\n\030EStorageBlockCo"
  "ntentType\022$\n EStorageBlockContentType_In"
  "valid\020\000\022$\n EStorageBlockContentType_Unkn"
  "own\020\001\022\'\n#EStorageBlockContentType_FileSy"
  "stem\020\002\022#\n\037EStorageBlockContentType_Crypt"
  "o\020\003\022!\n\035EStorageBlockContentType_Raid\020\004*\273"
  "\001\n\033EStorageBlockFileSystemType\022\'\n#EStora"
  "geBlockFileSystemType_Invalid\020\000\022\'\n#EStor"
  "ageBlockFileSystemType_Unknown\020\001\022$\n ESto"
  "rageBlockFileSystemType_VFat\020\002\022$\n EStora"
  "geBlockFileSystemType_Ext4\020\003*\306\001\n\026EStorag"
  "eDriveMediaType\022\"\n\036EStorageDriveMediaTyp"
  "e_Invalid\020\000\022\"\n\036EStorageDriveMediaType_Un"
  "known\020\001\022\036\n\032EStorageDriveMediaType_HDD\020\002\022"
  "\036\n\032EStorageDriveMediaType_SSD\020\003\022$\n EStor"
  "ageDriveMediaType_Removable\020\004*\255\001\n\037ESyste"
  "mDisplayCompatibilityMode\022+\n\'ESystemDisp"
  "layCompatibilityMode_Invalid\020\000\022(\n$ESyste"
  "mDisplayCompatibilityMode_None\020\001\0223\n/ESys"
  "temDisplayCompatibilityMode_MinimalBandw"
  "ith\020\002*\333\001\n\037ESteamDeckCompatibilityCategor"
  "y\022+\n\'ESteamDeckCompatibilityCategory_Unk"
  "nown\020\000\022/\n+ESteamDeckCompatibilityCategor"
  "y_Unsupported\020\001\022,\n(ESteamDeckCompatibili"
  "tyCategory_Playable\020\002\022,\n(ESteamDeckCompa"
  "tibilityCategory_Verified\020\003*\306\002\n(ESteamDe"
  "ckCompatibilityResultDisplayType\0226\n2ESte"
  "amDeckCompatibilityResultDisplayType_Inv"
  "isible\020\000\022:\n6ESteamDeckCompatibilityResul"
  "tDisplayType_Informational\020\001\0228\n4ESteamDe"
  "ckCompatibilityResultDisplayType_Unsuppo"
  "rted\020\002\0225\n1ESteamDeckCompatibilityResultD"
  "isplayType_Playable\020\003\0225\n1ESteamDeckCompa"
  "tibilityResultDisplayType_Verified\020\004*o\n\010"
  "EACState\022\024\n\020EACState_Unknown\020\000\022\031\n\025EACSta"
  "te_Disconnected\020\001\022\026\n\022EACState_Connected\020"
  "\002\022\032\n\026EACState_ConnectedSlow\020\003*}\n\rEBatter"
  "yState\022\031\n\025EBatteryState_Unknown\020\000\022\035\n\031EBa"
  "tteryState_Discharging\020\001\022\032\n\026EBatteryStat"
  "e_Charging\020\002\022\026\n\022EBatteryState_Full\020\003*\265\001\n"
  "\tEOSBranch\022\025\n\021EOSBranch_Unknown\020\000\022\025\n\021EOS"
  "Branch_Release\020\001\022\036\n\032EOSBranch_ReleaseCan"
  "didate\020\002\022\022\n\016EOSBranch_Beta\020\003\022\033\n\027EOSBranc"
  "h_BetaCandidate\020\004\022\022\n\016EOSBranch_Main\020\005\022\025\n"
  "\021EOSBranch_Staging\020\006*\271\005\n\023ECommunityItemC"
  "lass\022\037\n\033ECommunityItemClass_Invalid\020\000\022\035\n"
  "\031ECommunityItemClass_Badge\020\001\022 \n\034ECommuni"
  "tyItemClass_GameCard\020\002\022)\n%ECommunityItem"
  "Class_ProfileBackground\020\003\022 \n\034ECommunityI"
  "temClass_Emoticon\020\004\022#\n\037ECommunityItemCla"
  "ss_BoosterPack\020\005\022\"\n\036ECommunityItemClass_"
  "Consumable\020\006\022\037\n\033ECommunityItemClass_Game"
  "Goo\020\007\022\'\n#ECommunityItemClass_ProfileModi"
  "fier\020\010\022\035\n\031ECommunityItemClass_Scene\020\t\022\"\n"
  "\036ECommunityItemClass_SalienItem\020\n\022\037\n\033ECo"
  "mmunityItemClass_Sticker\020\013\022\"\n\036ECommunity"
  "ItemClass_ChatEffect\020\014\022-\n)ECommunityItem"
  "Class_MiniProfileBackground\020\r\022#\n\037ECommun"
  "ityItemClass_AvatarFrame\020\016\022&\n\"ECommunity"
  "ItemClass_AnimatedAvatar\020\017\022-\n)ECommunity"
  "ItemClass_SteamDeckKeyboardSkin\020\020\022-\n)ECo"
  "mmunityItemClass_SteamDeckStartupMovie\020\021"
  "*\311\001\n\037ESteamDeckCompatibilityFeedback\022\'\n#"
  "ESteamDeckCompatibilityFeedbacUnset\020\000\022\'\n"
  "#ESteamDeckCompatibilityFeedbacAgree\020\001\022*"
  "\n&ESteamDeckCompatibilityFeedbacDisagree"
  "\020\002\022(\n$ESteamDeckCompatibilityFeedbacIgno"
  "re\020\003*\231\001\n\036EProvideDeckFeedbackPreference\022"
  "(\n$EProvideDeckFeedbackPreference_Unset\020"
  "\000\022&\n\"EProvideDeckFeedbackPreference_Yes\020"
  "\001\022%\n!EProvideDeckFeedbackPreference_No\020\002"
  "*\225\003\n\rETouchGesture\022\025\n\021ETouchGestureNone\020"
  "\000\022\026\n\022ETouchGestureTouch\020\001\022\024\n\020ETouchGestu"
  "reTap\020\002\022\032\n\026ETouchGestureDoubleTap\020\003\022\033\n\027E"
  "TouchGestureShortPress\020\004\022\032\n\026ETouchGestur"
  "eLongPress\020\005\022\030\n\024ETouchGestureLongTap\020\006\022\035"
  "\n\031ETouchGestureTwoFingerTap\020\007\022\035\n\031ETouchG"
  "estureTapCancelled\020\010\022\033\n\027ETouchGesturePin"
  "chBegin\020\t\022\034\n\030ETouchGesturePinchUpdate\020\n\022"
  "\031\n\025ETouchGesturePinchEnd\020\013\022\033\n\027ETouchGest"
  "ureFlingStart\020\014\022\037\n\033ETouchGestureFlingCan"
  "celled\020\r*\206\001\n\023ESessionPersistence\022(\n\033ESes"
  "sionPersistence_Invalid\020\377\377\377\377\377\377\377\377\377\001\022!\n\035ES"
  "essionPersistence_Ephemeral\020\000\022\"\n\036ESessio"
  "nPersistence_Persistent\020\001*\321\001\n\032ENewSteamA"
  "nnouncementState\022&\n\"ENewSteamAnnouncemen"
  "tState_Invalid\020\000\022&\n\"ENewSteamAnnouncemen"
  "tState_AllRead\020\001\022.\n*ENewSteamAnnouncemen"
  "tState_NewAnnouncement\020\002\0223\n/ENewSteamAnn"
  "ouncementState_FeaturedAnnouncement\020\003*\337\006"
  "\n\022ECommentThreadType\022\035\n\031ECommentThreadTy"
  "peInvalid\020\000\022+\n\'ECommentThreadTypeScreens"
  "hot_Deprecated\020\001\022/\n+ECommentThreadTypeWo"
  "rkshopAccount_Developer\020\002\022,\n(ECommentThr"
  "eadTypeWorkshopAccount_Public\020\003\022-\n)EComm"
  "entThreadTypePublishedFile_Developer\020\004\022*"
  "\n&ECommentThreadTypePublishedFile_Public"
  "\020\005\022\032\n\026ECommentThreadTypeTest\020\006\022 \n\034EComme"
  "ntThreadTypeForumTopic\020\007\022$\n ECommentThre"
  "adTypeRecommendation\020\010\022&\n\"ECommentThread"
  "TypeVideo_Deprecated\020\t\022\035\n\031ECommentThread"
  "TypeProfile\020\n\022\036\n\032ECommentThreadTypeNewsP"
  "ost\020\013\022\032\n\026ECommentThreadTypeClan\020\014\022&\n\"ECo"
  "mmentThreadTypeClanAnnouncement\020\r\022\037\n\033ECo"
  "mmentThreadTypeClanEvent\020\016\022)\n%ECommentTh"
  "readTypeUserStatusPublished\020\017\022)\n%ECommen"
  "tThreadTypeUserReceivedNewGame\020\020\0220\n,ECom"
  "mentThreadTypePublishedFile_Announcement"
  "\020\021\022&\n\"ECommentThreadTypeModeratorMessage"
  "\020\022\022$\n ECommentThreadTypeClanCuratedApp\020\023"
  "\022\"\n\036ECommentThreadTypeQAndASession\020\024\022\031\n\025"
  "ECommentThreadTypeMax\020\025*\315\001\n\024EBroadcastPe"
  "rmission\022 \n\034EBroadcastPermissionDisabled"
  "\020\000\022&\n\"EBroadcastPermissionFriendsApprove"
  "\020\001\022&\n\"EBroadcastPermissionFriendsAllowed"
  "\020\002\022\036\n\032EBroadcastPermissionPublic\020\003\022#\n\037EB"
  "roadcastPermissionSubscribers\020\004*b\n\030EBroa"
  "dcastEncoderSetting\022 \n\034EBroadcastEncoder"
  "BestQuality\020\000\022$\n EBroadcastEncoderBestPe"
  "rformance\020\001*s\n\024ECloudGamingPlatform\022\034\n\030E"
  "CloudGamingPlatformNone\020\000\022\035\n\031ECloudGamin"
  "gPlatformValve\020\001\022\036\n\032ECloudGamingPlatform"
  "NVIDIA\020\002B#H\001\200\001\001\252\002\027OpenSteamworks.Protobu"
  "f\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, 13245, descriptor_table_protodef_enums_2eproto, "enums.proto", 
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  file_level_metadata_enums_2eproto, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_enums_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return descriptor_table_enums_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_enums_2eproto(&descriptor_table_enums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool EPublishedFileQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool EPublishedFileInappropriateProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[2];
}
bool EPublishedFileInappropriateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPersonaStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[3];
}
bool EPersonaStateFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentCheckProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[4];
}
bool EContentCheckProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[5];
}
bool EProfileCustomizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileStorageSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[6];
}
bool EPublishedFileStorageSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudStoragePersistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[7];
}
bool ECloudStoragePersistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESDCardFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[8];
}
bool ESDCardFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[9];
}
bool EStorageFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemFanControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[10];
}
bool ESystemFanControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartupMovieVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[11];
}
bool EStartupMovieVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColorGamutLabelSet_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[12];
}
bool EColorGamutLabelSet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBluetoothDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[13];
}
bool EBluetoothDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[14];
}
bool ESystemAudioDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[15];
}
bool ESystemAudioChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[16];
}
bool ESystemAudioPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[17];
}
bool ESystemAudioPortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[18];
}
bool ESystemServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGraphicsPerfOverlayLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[19];
}
bool EGraphicsPerfOverlayLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGPUPerformanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[20];
}
bool EGPUPerformanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[21];
}
bool EScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[22];
}
bool ESplitScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingScaler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[23];
}
bool ESplitScalingScaler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGamescopeBlurMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[24];
}
bool EGamescopeBlurMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESLSHelper_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[25];
}
bool ESLSHelper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRVisualization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[26];
}
bool EHDRVisualization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRToneMapOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[27];
}
bool EHDRToneMapOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPUGovernor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[28];
}
bool ECPUGovernor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[29];
}
bool EUpdaterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[30];
}
bool EUpdaterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[31];
}
bool EStorageBlockContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockFileSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[32];
}
bool EStorageBlockFileSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageDriveMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[33];
}
bool EStorageDriveMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemDisplayCompatibilityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[34];
}
bool ESystemDisplayCompatibilityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[35];
}
bool ESteamDeckCompatibilityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityResultDisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[36];
}
bool ESteamDeckCompatibilityResultDisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EACState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[37];
}
bool EACState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBatteryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[38];
}
bool EBatteryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOSBranch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[39];
}
bool EOSBranch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[40];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityFeedback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[41];
}
bool ESteamDeckCompatibilityFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProvideDeckFeedbackPreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[42];
}
bool EProvideDeckFeedbackPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[43];
}
bool ETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESessionPersistence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[44];
}
bool ESessionPersistence_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENewSteamAnnouncementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[45];
}
bool ENewSteamAnnouncementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommentThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[46];
}
bool ECommentThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[47];
}
bool EBroadcastPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastEncoderSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[48];
}
bool EBroadcastEncoderSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudGamingPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[49];
}
bool ECloudGamingPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
