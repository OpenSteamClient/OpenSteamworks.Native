// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_enums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[67];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\032 google/protobuf/descripto"
  "r.proto\032\030steammessages_base.proto*\324\t\n\027EP"
  "ublishedFileQueryType\022\'\n#PublishedFileQu"
  "eryType_RankedByVote\020\000\0222\n.PublishedFileQ"
  "ueryType_RankedByPublicationDate\020\001\022@\n<Pu"
  "blishedFileQueryType_AcceptedForGameRank"
  "edByAcceptanceDate\020\002\022(\n$PublishedFileQue"
  "ryType_RankedByTrend\020\003\022D\n@PublishedFileQ"
  "ueryType_FavoritedByFriendsRankedByPubli"
  "cationDate\020\004\022B\n>PublishedFileQueryType_C"
  "reatedByFriendsRankedByPublicationDate\020\005"
  "\0223\n/PublishedFileQueryType_RankedByNumTi"
  "mesReported\020\006\022H\nDPublishedFileQueryType_"
  "CreatedByFollowedUsersRankedByPublicatio"
  "nDate\020\007\022&\n\"PublishedFileQueryType_NotYet"
  "Rated\020\010\022;\n7PublishedFileQueryType_Ranked"
  "ByTotalUniqueSubscriptions\020\t\0220\n,Publishe"
  "dFileQueryType_RankedByTotalVotesAsc\020\n\022*"
  "\n&PublishedFileQueryType_RankedByVotesUp"
  "\020\013\022-\n)PublishedFileQueryType_RankedByTex"
  "tSearch\020\014\0220\n,PublishedFileQueryType_Rank"
  "edByPlaytimeTrend\020\r\0220\n,PublishedFileQuer"
  "yType_RankedByTotalPlaytime\020\016\0227\n3Publish"
  "edFileQueryType_RankedByAveragePlaytimeT"
  "rend\020\017\022:\n6PublishedFileQueryType_RankedB"
  "yLifetimeAveragePlaytime\020\020\0228\n4PublishedF"
  "ileQueryType_RankedByPlaytimeSessionsTre"
  "nd\020\021\022;\n7PublishedFileQueryType_RankedByL"
  "ifetimePlaytimeSessions\020\022\022=\n9PublishedFi"
  "leQueryType_RankedByInappropriateContent"
  "Rating\020\023\0222\n.PublishedFileQueryType_Ranke"
  "dByBanContentCheck\020\024\0222\n.PublishedFileQue"
  "ryType_RankedByLastUpdatedDate\020\025*\266\001\n#EPu"
  "blishedFileInappropriateProvider\022/\n+EPub"
  "lishedFileInappropriateProvider_Invalid\020"
  "\000\022.\n*EPublishedFileInappropriateProvider"
  "_Google\020\001\022.\n*EPublishedFileInappropriate"
  "Provider_Amazon\020\002*\311\002\n!EPublishedFileInap"
  "propriateResult\0220\n,EPublishedFileInappro"
  "priateResult_NotScanned\020\000\0222\n.EPublishedF"
  "ileInappropriateResult_VeryUnlikely\020\001\022.\n"
  "*EPublishedFileInappropriateResult_Unlik"
  "ely\020\036\022.\n*EPublishedFileInappropriateResu"
  "lt_Possible\0202\022,\n(EPublishedFileInappropr"
  "iateResult_Likely\020K\0220\n,EPublishedFileIna"
  "ppropriateResult_VeryLikely\020d*\235\003\n\021EPerso"
  "naStateFlag\022%\n!EPersonaStateFlag_HasRich"
  "Presence\020\001\022$\n EPersonaStateFlag_InJoinab"
  "leGame\020\002\022\034\n\030EPersonaStateFlag_Golden\020\004\022("
  "\n$EPersonaStateFlag_RemotePlayTogether\020\010"
  "\022$\n\037EPersonaStateFlag_ClientTypeWeb\020\200\002\022\'"
  "\n\"EPersonaStateFlag_ClientTypeMobile\020\200\004\022"
  "(\n#EPersonaStateFlag_ClientTypeTenfoot\020\200"
  "\010\022#\n\036EPersonaStateFlag_ClientTypeVR\020\200\020\022("
  "\n#EPersonaStateFlag_LaunchTypeGamepad\020\200 "
  "\022+\n&EPersonaStateFlag_LaunchTypeCompatTo"
  "ol\020\200@*\242\002\n\025EContentCheckProvider\022!\n\035ECont"
  "entCheckProvider_Invalid\020\000\022+\n\'EContentCh"
  "eckProvider_Google_DEPRECATED\020\001\022 \n\034ECont"
  "entCheckProvider_Amazon\020\002\022\037\n\033EContentChe"
  "ckProvider_Local\020\003\022(\n$EContentCheckProvi"
  "der_GoogleVertexAI\020\004\022&\n\"EContentCheckPro"
  "vider_GoogleGemini\020\005\022$\n EContentCheckPro"
  "vider_SteamLearn\020\006*\341\010\n\031EProfileCustomiza"
  "tionType\022$\n EProfileCustomizationTypeInv"
  "alid\020\000\0224\n0EProfileCustomizationTypeRareA"
  "chievementShowcase\020\001\022*\n&EProfileCustomiz"
  "ationTypeGameCollector\020\002\022)\n%EProfileCust"
  "omizationTypeItemShowcase\020\003\022*\n&EProfileC"
  "ustomizationTypeTradeShowcase\020\004\022#\n\037EProf"
  "ileCustomizationTypeBadges\020\005\022)\n%EProfile"
  "CustomizationTypeFavoriteGame\020\006\022/\n+EProf"
  "ileCustomizationTypeScreenshotShowcase\020\007"
  "\022\'\n#EProfileCustomizationTypeCustomText\020"
  "\010\022*\n&EProfileCustomizationTypeFavoriteGr"
  "oup\020\t\022+\n\'EProfileCustomizationTypeRecomm"
  "endation\020\n\022)\n%EProfileCustomizationTypeW"
  "orkshopItem\020\013\022\'\n#EProfileCustomizationTy"
  "peMyWorkshop\020\014\022,\n(EProfileCustomizationT"
  "ypeArtworkShowcase\020\r\022*\n&EProfileCustomiz"
  "ationTypeVideoShowcase\020\016\022#\n\037EProfileCust"
  "omizationTypeGuides\020\017\022%\n!EProfileCustomi"
  "zationTypeMyGuides\020\020\022)\n%EProfileCustomiz"
  "ationTypeAchievements\020\021\022\'\n#EProfileCusto"
  "mizationTypeGreenlight\020\022\022)\n%EProfileCust"
  "omizationTypeMyGreenlight\020\023\022#\n\037EProfileC"
  "ustomizationTypeSalien\020\024\0223\n/EProfileCust"
  "omizationTypeLoyaltyRewardReactions\020\025\0222\n"
  ".EProfileCustomizationTypeSingleArtworkS"
  "howcase\020\026\0226\n2EProfileCustomizationTypeAc"
  "hievementsCompletionist\020\027\022#\n\037EProfileCus"
  "tomizationTypeReplay\020\030*\300\001\n\033EPublishedFil"
  "eStorageSystem\022&\n\"EPublishedFileStorageS"
  "ystemInvalid\020\000\022*\n&EPublishedFileStorageS"
  "ystemLegacyCloud\020\001\022$\n EPublishedFileStor"
  "ageSystemDepot\020\002\022\'\n#EPublishedFileStorag"
  "eSystemUGCCloud\020\003*\221\001\n\031ECloudStoragePersi"
  "stState\022&\n\"ECloudStoragePersistStatePers"
  "isted\020\000\022&\n\"ECloudStoragePersistStateForg"
  "otten\020\001\022$\n ECloudStoragePersistStateDele"
  "ted\020\002*\334\001\n\022ESDCardFormatStage\022\036\n\032ESDCardF"
  "ormatStage_Invalid\020\000\022\037\n\033ESDCardFormatSta"
  "ge_Starting\020\001\022\036\n\032ESDCardFormatStage_Test"
  "ing\020\002\022\037\n\033ESDCardFormatStage_Rescuing\020\003\022!"
  "\n\035ESDCardFormatStage_Formatting\020\004\022!\n\035ESD"
  "CardFormatStage_Finalizing\020\005*\207\002\n\023EStorag"
  "eFormatStage\022\037\n\033EStorageFormatStage_Inva"
  "lid\020\000\022\"\n\036EStorageFormatStage_NotRunning\020"
  "\001\022 \n\034EStorageFormatStage_Starting\020\002\022\037\n\033E"
  "StorageFormatStage_Testing\020\003\022 \n\034EStorage"
  "FormatStage_Rescuing\020\004\022\"\n\036EStorageFormat"
  "Stage_Formatting\020\005\022\"\n\036EStorageFormatStag"
  "e_Finalizing\020\006*~\n\025ESystemFanControlMode\022"
  " \n\034SystemFanControlMode_Invalid\020\000\022!\n\035Sys"
  "temFanControlMode_Disabled\020\001\022 \n\034SystemFa"
  "nControlMode_Default\020\002*\242\001\n\024EStartupMovie"
  "Variant\022 \n\034EStartupMovieVariant_Invalid\020"
  "\000\022 \n\034EStartupMovieVariant_Generic\020\001\022!\n\035E"
  "StartupMovieVariant_DeckBlue\020\002\022#\n\037EStart"
  "upMovieVariant_DeckOrange\020\003*\205\001\n\023EColorGa"
  "mutLabelSet\022\036\n\032ColorGamutLabelSet_Defaul"
  "t\020\000\022\"\n\036ColorGamutLabelSet_sRGB_Native\020\001\022"
  "*\n&ColorGamutLabelSet_Native_sRGB_Booste"
  "d\020\002*w\n\024EWindowStackingOrder\022 \n\034EWindowSt"
  "ackingOrder_Invalid\020\000\022\034\n\030EWindowStacking"
  "Order_Top\020\001\022\037\n\033EWindowStackingOrder_Bott"
  "om\020\002*\250\003\n\024EBluetoothDeviceType\022\037\n\033Bluetoo"
  "thDeviceType_Invalid\020\000\022\037\n\033BluetoothDevic"
  "eType_Unknown\020\001\022\035\n\031BluetoothDeviceType_P"
  "hone\020\002\022 \n\034BluetoothDeviceType_Computer\020\003"
  "\022\037\n\033BluetoothDeviceType_Headset\020\004\022\"\n\036Blu"
  "etoothDeviceType_Headphones\020\005\022 \n\034Bluetoo"
  "thDeviceType_Speakers\020\006\022\"\n\036BluetoothDevi"
  "ceType_OtherAudio\020\007\022\035\n\031BluetoothDeviceTy"
  "pe_Mouse\020\010\022 \n\034BluetoothDeviceType_Joysti"
  "ck\020\t\022\037\n\033BluetoothDeviceType_Gamepad\020\n\022 \n"
  "\034BluetoothDeviceType_Keyboard\020\013*z\n\025ESyst"
  "emAudioDirection\022 \n\034SystemAudioDirection"
  "_Invalid\020\000\022\036\n\032SystemAudioDirection_Input"
  "\020\001\022\037\n\033SystemAudioDirection_Output\020\002*\335\002\n\023"
  "ESystemAudioChannel\022\036\n\032SystemAudioChanne"
  "l_Invalid\020\000\022!\n\035SystemAudioChannel_Aggreg"
  "ated\020\001\022 \n\034SystemAudioChannel_FrontLeft\020\002"
  "\022!\n\035SystemAudioChannel_FrontRight\020\003\022\032\n\026S"
  "ystemAudioChannel_LFE\020\004\022\037\n\033SystemAudioCh"
  "annel_BackLeft\020\005\022 \n\034SystemAudioChannel_B"
  "ackRight\020\006\022\"\n\036SystemAudioChannel_FrontCe"
  "nter\020\007\022\036\n\032SystemAudioChannel_Unknown\020\010\022\033"
  "\n\027SystemAudioChannel_Mono\020\t*\277\001\n\024ESystemA"
  "udioPortType\022\037\n\033SystemAudioPortType_Inva"
  "lid\020\000\022\037\n\033SystemAudioPortType_Unknown\020\001\022 "
  "\n\034SystemAudioPortType_Audio32f\020\002\022\036\n\032Syst"
  "emAudioPortType_Midi8b\020\003\022#\n\037SystemAudioP"
  "ortType_Video32RGBA\020\004*\212\001\n\031ESystemAudioPo"
  "rtDirection\022$\n SystemAudioPortDirection_"
  "Invalid\020\000\022\"\n\036SystemAudioPortDirection_In"
  "put\020\001\022#\n\037SystemAudioPortDirection_Output"
  "\020\002*}\n\023ESystemServiceState\022#\n\037ESystemServ"
  "iceState_Unavailable\020\000\022 \n\034ESystemService"
  "State_Disabled\020\001\022\037\n\033ESystemServiceState_"
  "Enabled\020\002*\327\001\n\031EGraphicsPerfOverlayLevel\022"
  "$\n EGraphicsPerfOverlayLevel_Hidden\020\000\022#\n"
  "\037EGraphicsPerfOverlayLevel_Basic\020\001\022$\n EG"
  "raphicsPerfOverlayLevel_Medium\020\002\022\"\n\036EGra"
  "phicsPerfOverlayLevel_Full\020\003\022%\n!EGraphic"
  "sPerfOverlayLevel_Minimal\020\004*\331\001\n\024EGPUPerf"
  "ormanceLevel\022 \n\034EGPUPerformanceLevel_Inv"
  "alid\020\000\022\035\n\031EGPUPerformanceLevel_Auto\020\001\022\037\n"
  "\033EGPUPerformanceLevel_Manual\020\002\022\034\n\030EGPUPe"
  "rformanceLevel_Low\020\003\022\035\n\031EGPUPerformanceL"
  "evel_High\020\004\022\"\n\036EGPUPerformanceLevel_Prof"
  "iling\020\005*\257\001\n\016EScalingFilter\022\032\n\026EScalingFi"
  "lter_Invalid\020\000\022\026\n\022EScalingFilter_FSR\020\001\022\032"
  "\n\026EScalingFilter_Nearest\020\002\022\032\n\026EScalingFi"
  "lter_Integer\020\003\022\031\n\025EScalingFilter_Linear\020"
  "\004\022\026\n\022EScalingFilter_NIS\020\005*\261\001\n\023ESplitScal"
  "ingFilter\022\037\n\033ESplitScalingFilter_Invalid"
  "\020\000\022\036\n\032ESplitScalingFilter_Linear\020\001\022\037\n\033ES"
  "plitScalingFilter_Nearest\020\002\022\033\n\027ESplitSca"
  "lingFilter_FSR\020\003\022\033\n\027ESplitScalingFilter_"
  "NIS\020\004*\321\001\n\023ESplitScalingScaler\022\037\n\033ESplitS"
  "calingScaler_Invalid\020\000\022\034\n\030ESplitScalingS"
  "caler_Auto\020\001\022\037\n\033ESplitScalingScaler_Inte"
  "ger\020\002\022\033\n\027ESplitScalingScaler_Fit\020\003\022\034\n\030ES"
  "plitScalingScaler_Fill\020\004\022\037\n\033ESplitScalin"
  "gScaler_Stretch\020\005*w\n\022EGamescopeBlurMode\022"
  "\037\n\033EGamescopeBlurMode_Disabled\020\000\022!\n\035EGam"
  "escopeBlurMode_IfOccluded\020\001\022\035\n\031EGamescop"
  "eBlurMode_Always\020\002*\232\001\n\nESLSHelper\022\026\n\022ESL"
  "SHelper_Invalid\020\000\022\027\n\023ESLSHelper_Minidump"
  "\020\001\022\024\n\020ESLSHelper_Kdump\020\002\022\026\n\022ESLSHelper_J"
  "ournal\020\003\022\022\n\016ESLSHelper_Gpu\020\004\022\031\n\025ESLSHelp"
  "er_SystemInfo\020\005*\273\001\n\021EHDRVisualization\022\032\n"
  "\026EHDRVisualization_None\020\000\022\035\n\031EHDRVisuali"
  "zation_Heatmap\020\001\022\036\n\032EHDRVisualization_An"
  "alysis\020\002\022%\n!EHDRVisualization_HeatmapExt"
  "ended\020\003\022$\n EHDRVisualization_HeatmapClas"
  "sic\020\004*{\n\023EHDRToneMapOperator\022\037\n\033EHDRTone"
  "MapOperator_Invalid\020\000\022!\n\035EHDRToneMapOper"
  "ator_Uncharted\020\001\022 \n\034EHDRToneMapOperator_"
  "Reinhard\020\002*t\n\014ECPUGovernor\022\030\n\024ECPUGovern"
  "or_Invalid\020\000\022\025\n\021ECPUGovernor_Perf\020\001\022\032\n\026E"
  "CPUGovernor_Powersave\020\002\022\027\n\023ECPUGovernor_"
  "Manual\020\003*\322\001\n\014EUpdaterType\022\030\n\024EUpdaterTyp"
  "e_Invalid\020\000\022\027\n\023EUpdaterType_Client\020\001\022\023\n\017"
  "EUpdaterType_OS\020\002\022\025\n\021EUpdaterType_BIOS\020\003"
  "\022\033\n\027EUpdaterType_Aggregated\020\004\022\026\n\022EUpdate"
  "rType_Test1\020\005\022\026\n\022EUpdaterType_Test2\020\006\022\026\n"
  "\022EUpdaterType_Dummy\020\007*\207\002\n\rEUpdaterState\022"
  "\031\n\025EUpdaterState_Invalid\020\000\022\032\n\026EUpdaterSt"
  "ate_UpToDate\020\002\022\032\n\026EUpdaterState_Checking"
  "\020\003\022\033\n\027EUpdaterState_Available\020\004\022\032\n\026EUpda"
  "terState_Applying\020\005\022&\n\"EUpdaterState_Cli"
  "entRestartPending\020\006\022&\n\"EUpdaterState_Sys"
  "temRestartPending\020\007\022\032\n\026EUpdaterState_Rol"
  "lBack\020\010*\327\001\n\030EStorageBlockContentType\022$\n "
  "EStorageBlockContentType_Invalid\020\000\022$\n ES"
  "torageBlockContentType_Unknown\020\001\022\'\n#ESto"
  "rageBlockContentType_FileSystem\020\002\022#\n\037ESt"
  "orageBlockContentType_Crypto\020\003\022!\n\035EStora"
  "geBlockContentType_Raid\020\004*\273\001\n\033EStorageBl"
  "ockFileSystemType\022\'\n#EStorageBlockFileSy"
  "stemType_Invalid\020\000\022\'\n#EStorageBlockFileS"
  "ystemType_Unknown\020\001\022$\n EStorageBlockFile"
  "SystemType_VFat\020\002\022$\n EStorageBlockFileSy"
  "stemType_Ext4\020\003*\306\001\n\026EStorageDriveMediaTy"
  "pe\022\"\n\036EStorageDriveMediaType_Invalid\020\000\022\""
  "\n\036EStorageDriveMediaType_Unknown\020\001\022\036\n\032ES"
  "torageDriveMediaType_HDD\020\002\022\036\n\032EStorageDr"
  "iveMediaType_SSD\020\003\022$\n EStorageDriveMedia"
  "Type_Removable\020\004*\255\001\n\037ESystemDisplayCompa"
  "tibilityMode\022+\n\'ESystemDisplayCompatibil"
  "ityMode_Invalid\020\000\022(\n$ESystemDisplayCompa"
  "tibilityMode_None\020\001\0223\n/ESystemDisplayCom"
  "patibilityMode_MinimalBandwith\020\002*\333\001\n\037ESt"
  "eamDeckCompatibilityCategory\022+\n\'ESteamDe"
  "ckCompatibilityCategory_Unknown\020\000\022/\n+ESt"
  "eamDeckCompatibilityCategory_Unsupported"
  "\020\001\022,\n(ESteamDeckCompatibilityCategory_Pl"
  "ayable\020\002\022,\n(ESteamDeckCompatibilityCateg"
  "ory_Verified\020\003*\306\002\n(ESteamDeckCompatibili"
  "tyResultDisplayType\0226\n2ESteamDeckCompati"
  "bilityResultDisplayType_Invisible\020\000\022:\n6E"
  "SteamDeckCompatibilityResultDisplayType_"
  "Informational\020\001\0228\n4ESteamDeckCompatibili"
  "tyResultDisplayType_Unsupported\020\002\0225\n1ESt"
  "eamDeckCompatibilityResultDisplayType_Pl"
  "ayable\020\003\0225\n1ESteamDeckCompatibilityResul"
  "tDisplayType_Verified\020\004*\220\002\n!ESteamDeckCo"
  "mpatibilityTestResult\022-\n)ESteamDeckCompa"
  "tibilityTestResult_Invalid\020\000\0223\n/ESteamDe"
  "ckCompatibilityTestResult_NotApplicable\020"
  "\001\022*\n&ESteamDeckCompatibilityTestResult_P"
  "ass\020\002\022*\n&ESteamDeckCompatibilityTestResu"
  "lt_Fail\020\003\022/\n+ESteamDeckCompatibilityTest"
  "Result_FailMinor\020\004*o\n\010EACState\022\024\n\020EACSta"
  "te_Unknown\020\000\022\031\n\025EACState_Disconnected\020\001\022"
  "\026\n\022EACState_Connected\020\002\022\032\n\026EACState_Conn"
  "ectedSlow\020\003*}\n\rEBatteryState\022\031\n\025EBattery"
  "State_Unknown\020\000\022\035\n\031EBatteryState_Dischar"
  "ging\020\001\022\032\n\026EBatteryState_Charging\020\002\022\026\n\022EB"
  "atteryState_Full\020\003*\354\001\n\tEOSBranch\022\025\n\021EOSB"
  "ranch_Unknown\020\000\022\025\n\021EOSBranch_Release\020\001\022\036"
  "\n\032EOSBranch_ReleaseCandidate\020\002\022\022\n\016EOSBra"
  "nch_Beta\020\003\022\033\n\027EOSBranch_BetaCandidate\020\004\022"
  "\025\n\021EOSBranch_Preview\020\005\022\036\n\032EOSBranch_Prev"
  "iewCandidate\020\006\022\022\n\016EOSBranch_Main\020\007\022\025\n\021EO"
  "SBranch_Staging\020\010*\262\003\n\021EBrowserGPUStatus\022"
  "\035\n\031EBrowserGPUStatus_Invalid\020\000\022\035\n\031EBrows"
  "erGPUStatus_Enabled\020\001\022%\n!EBrowserGPUStat"
  "us_DisabledUnknown\020\002\022(\n$EBrowserGPUStatu"
  "s_DisabledCrashCount\020\004\022\'\n#EBrowserGPUSta"
  "tus_DisabledBlocklist\020\005\022\'\n#EBrowserGPUSt"
  "atus_DisabledJSRequest\020\006\022)\n%EBrowserGPUS"
  "tatus_DisabledCommandLine\020\007\022+\n\'EBrowserG"
  "PUStatus_DisabledRuntimeDetect\020\010\022.\n*EBro"
  "wserGPUStatus_DisabledChildCommandLine\020\t"
  "\0224\n0EBrowserGPUStatus_DisabledCompositin"
  "gCommandLine\020\n*\307\004\n\025EBrowserFeatureStatus"
  "\022!\n\035EBrowserFeatureStatus_Invalid\020\000\022\"\n\036E"
  "BrowserFeatureStatus_NotFound\020\001\022!\n\035EBrow"
  "serFeatureStatus_Unknown\020\002\022*\n&EBrowserFe"
  "atureStatus_DisabledSoftware\020\003\022%\n!EBrows"
  "erFeatureStatus_DisabledOff\020\004\022\'\n#EBrowse"
  "rFeatureStatus_DisabledOffOk\020\005\022-\n)EBrows"
  "erFeatureStatus_UnavailableSoftware\020\006\022(\n"
  "$EBrowserFeatureStatus_UnavailableOff\020\007\022"
  "*\n&EBrowserFeatureStatus_UnavailableOffO"
  "k\020\010\022)\n%EBrowserFeatureStatus_EnabledRead"
  "back\020\t\022&\n\"EBrowserFeatureStatus_EnabledF"
  "orce\020\n\022!\n\035EBrowserFeatureStatus_Enabled\020"
  "\013\022#\n\037EBrowserFeatureStatus_EnabledOn\020\014\022("
  "\n$EBrowserFeatureStatus_EnabledForceOn\020\r"
  "*\367\004\n\014EGpuDriverId\022\030\n\024EGpuDriverId_Invali"
  "d\020\000\022\030\n\024EGpuDriverId_Unknown\020\001\022\037\n\033EGpuDri"
  "verId_AmdProprietary\020\002\022\036\n\032EGpuDriverId_A"
  "mdOpenSource\020\003\022\031\n\025EGpuDriverId_MesaRadv\020"
  "\004\022\"\n\036EGpuDriverId_NvidiaProprietary\020\005\022 \n"
  "\034EGpuDriverId_IntelPropietary\020\006\022\032\n\026EGpuD"
  "riverId_MesaIntel\020\007\022$\n EGpuDriverId_Qual"
  "commProprietary\020\010\022\037\n\033EGpuDriverId_ArmPro"
  "prietary\020\t\022\"\n\036EGpuDriverId_GoogleSwiftsh"
  "ader\020\n\022$\n EGpuDriverId_BroadcomProprieta"
  "ry\020\013\022\035\n\031EGpuDriverId_MesaLLVMPipe\020\014\022\031\n\025E"
  "GpuDriverId_MoltenVK\020\r\022\033\n\027EGpuDriverId_M"
  "esaTurnip\020\016\022\032\n\026EGpuDriverId_MesaPanVK\020\017\022"
  "\032\n\026EGpuDriverId_MesaVenus\020\020\022\032\n\026EGpuDrive"
  "rId_MesaDozen\020\021\022\030\n\024EGpuDriverId_MesaNVK\020"
  "\022\022\037\n\033EGpuDriverId_MesaHoneyKrisp\020\023*\271\005\n\023E"
  "CommunityItemClass\022\037\n\033ECommunityItemClas"
  "s_Invalid\020\000\022\035\n\031ECommunityItemClass_Badge"
  "\020\001\022 \n\034ECommunityItemClass_GameCard\020\002\022)\n%"
  "ECommunityItemClass_ProfileBackground\020\003\022"
  " \n\034ECommunityItemClass_Emoticon\020\004\022#\n\037ECo"
  "mmunityItemClass_BoosterPack\020\005\022\"\n\036ECommu"
  "nityItemClass_Consumable\020\006\022\037\n\033ECommunity"
  "ItemClass_GameGoo\020\007\022\'\n#ECommunityItemCla"
  "ss_ProfileModifier\020\010\022\035\n\031ECommunityItemCl"
  "ass_Scene\020\t\022\"\n\036ECommunityItemClass_Salie"
  "nItem\020\n\022\037\n\033ECommunityItemClass_Sticker\020\013"
  "\022\"\n\036ECommunityItemClass_ChatEffect\020\014\022-\n)"
  "ECommunityItemClass_MiniProfileBackgroun"
  "d\020\r\022#\n\037ECommunityItemClass_AvatarFrame\020\016"
  "\022&\n\"ECommunityItemClass_AnimatedAvatar\020\017"
  "\022-\n)ECommunityItemClass_SteamDeckKeyboar"
  "dSkin\020\020\022-\n)ECommunityItemClass_SteamDeck"
  "StartupMovie\020\021*\311\001\n\037ESteamDeckCompatibili"
  "tyFeedback\022\'\n#ESteamDeckCompatibilityFee"
  "dbacUnset\020\000\022\'\n#ESteamDeckCompatibilityFe"
  "edbacAgree\020\001\022*\n&ESteamDeckCompatibilityF"
  "eedbacDisagree\020\002\022(\n$ESteamDeckCompatibil"
  "ityFeedbacIgnore\020\003*\231\001\n\036EProvideDeckFeedb"
  "ackPreference\022(\n$EProvideDeckFeedbackPre"
  "ference_Unset\020\000\022&\n\"EProvideDeckFeedbackP"
  "reference_Yes\020\001\022%\n!EProvideDeckFeedbackP"
  "reference_No\020\002*\225\003\n\rETouchGesture\022\025\n\021ETou"
  "chGestureNone\020\000\022\026\n\022ETouchGestureTouch\020\001\022"
  "\024\n\020ETouchGestureTap\020\002\022\032\n\026ETouchGestureDo"
  "ubleTap\020\003\022\033\n\027ETouchGestureShortPress\020\004\022\032"
  "\n\026ETouchGestureLongPress\020\005\022\030\n\024ETouchGest"
  "ureLongTap\020\006\022\035\n\031ETouchGestureTwoFingerTa"
  "p\020\007\022\035\n\031ETouchGestureTapCancelled\020\010\022\033\n\027ET"
  "ouchGesturePinchBegin\020\t\022\034\n\030ETouchGesture"
  "PinchUpdate\020\n\022\031\n\025ETouchGesturePinchEnd\020\013"
  "\022\033\n\027ETouchGestureFlingStart\020\014\022\037\n\033ETouchG"
  "estureFlingCancelled\020\r*\206\001\n\023ESessionPersi"
  "stence\022(\n\033ESessionPersistence_Invalid\020\377\377"
  "\377\377\377\377\377\377\377\001\022!\n\035ESessionPersistence_Ephemera"
  "l\020\000\022\"\n\036ESessionPersistence_Persistent\020\001*"
  "\321\001\n\032ENewSteamAnnouncementState\022&\n\"ENewSt"
  "eamAnnouncementState_Invalid\020\000\022&\n\"ENewSt"
  "eamAnnouncementState_AllRead\020\001\022.\n*ENewSt"
  "eamAnnouncementState_NewAnnouncement\020\002\0223"
  "\n/ENewSteamAnnouncementState_FeaturedAnn"
  "ouncement\020\003*\354\001\n\nEForumType\022\026\n\022EForumType"
  "_Invalid\020\000\022\026\n\022EForumType_General\020\001\022\034\n\030EF"
  "orumType_ReportedPosts\020\002\022\027\n\023EForumType_W"
  "orkshop\020\003\022\034\n\030EForumType_PublishedFile\020\004\022"
  "\026\n\022EForumType_Trading\020\005\022\027\n\023EForumType_Pl"
  "ayTest\020\006\022\024\n\020EForumType_Event\020\007\022\022\n\016EForum"
  "Type_Max\020\010*\337\006\n\022ECommentThreadType\022\035\n\031ECo"
  "mmentThreadTypeInvalid\020\000\022+\n\'ECommentThre"
  "adTypeScreenshot_Deprecated\020\001\022/\n+ECommen"
  "tThreadTypeWorkshopAccount_Developer\020\002\022,"
  "\n(ECommentThreadTypeWorkshopAccount_Publ"
  "ic\020\003\022-\n)ECommentThreadTypePublishedFile_"
  "Developer\020\004\022*\n&ECommentThreadTypePublish"
  "edFile_Public\020\005\022\032\n\026ECommentThreadTypeTes"
  "t\020\006\022 \n\034ECommentThreadTypeForumTopic\020\007\022$\n"
  " ECommentThreadTypeRecommendation\020\010\022&\n\"E"
  "CommentThreadTypeVideo_Deprecated\020\t\022\035\n\031E"
  "CommentThreadTypeProfile\020\n\022\036\n\032ECommentTh"
  "readTypeNewsPost\020\013\022\032\n\026ECommentThreadType"
  "Clan\020\014\022&\n\"ECommentThreadTypeClanAnnounce"
  "ment\020\r\022\037\n\033ECommentThreadTypeClanEvent\020\016\022"
  ")\n%ECommentThreadTypeUserStatusPublished"
  "\020\017\022)\n%ECommentThreadTypeUserReceivedNewG"
  "ame\020\020\0220\n,ECommentThreadTypePublishedFile"
  "_Announcement\020\021\022&\n\"ECommentThreadTypeMod"
  "eratorMessage\020\022\022$\n ECommentThreadTypeCla"
  "nCuratedApp\020\023\022\"\n\036ECommentThreadTypeQAndA"
  "Session\020\024\022\031\n\025ECommentThreadTypeMax\020\025*\315\001\n"
  "\024EBroadcastPermission\022 \n\034EBroadcastPermi"
  "ssionDisabled\020\000\022&\n\"EBroadcastPermissionF"
  "riendsApprove\020\001\022&\n\"EBroadcastPermissionF"
  "riendsAllowed\020\002\022\036\n\032EBroadcastPermissionP"
  "ublic\020\003\022#\n\037EBroadcastPermissionSubscribe"
  "rs\020\004*b\n\030EBroadcastEncoderSetting\022 \n\034EBro"
  "adcastEncoderBestQuality\020\000\022$\n EBroadcast"
  "EncoderBestPerformance\020\001*s\n\024ECloudGaming"
  "Platform\022\034\n\030ECloudGamingPlatformNone\020\000\022\035"
  "\n\031ECloudGamingPlatformValve\020\001\022\036\n\032ECloudG"
  "amingPlatformNVIDIA\020\002*\216\002\n\030ECompromiseDet"
  "ectionType\022!\n\035ECompromiseDetectionType_N"
  "one\020\000\022\'\n#ECompromiseDetectionType_TradeE"
  "vent\020\001\022(\n$ECompromiseDetectionType_ApiCa"
  "llRate\020\002\022#\n\037ECompromiseDetectionType_Man"
  "ual\020\003\022)\n%ECompromiseDetectionType_Ticket"
  "Action\020\004\022,\n(ECompromiseDetectionType_Mal"
  "iciousRefund\020\005*\316\001\n\032EAsyncGameSessionUser"
  "State\022.\n!EAsyncGameSessionUserStateUnkno"
  "wn\020\377\377\377\377\377\377\377\377\377\001\022.\n*EAsyncGameSessionUserSt"
  "ateWaitingForOthers\020\000\022,\n(EAsyncGameSessi"
  "onUserStateReadyForAction\020\001\022\"\n\036EAsyncGam"
  "eSessionUserStateDone\020\002*\276\001\n\037EAsyncGameSe"
  "ssionUserVisibility\0229\n5EAsyncGameSession"
  "UserVisibilityEnvelopeAndSessionList\020\000\0222"
  "\n.EAsyncGameSessionUserVisibilitySession"
  "ListOnly\020\001\022,\n(EAsyncGameSessionUserVisib"
  "ilityDismissed\020\002*\312\001\n\022EGameRecordingType\022"
  "\036\n\032EGameRecordingType_Unknown\020\000\022#\n\037EGame"
  "RecordingType_NotRecording\020\001\022&\n\"EGameRec"
  "ordingType_ManualRecording\020\002\022*\n&EGameRec"
  "ordingType_BackgroundRecording\020\003\022\033\n\027EGam"
  "eRecordingType_Clip\020\004*V\n\014EExportCodec\022\030\n"
  "\024EExportCodec_Default\020\000\022\025\n\021EExportCodec_"
  "H264\020\001\022\025\n\021EExportCodec_H265\020\002*\302\003\n\rEProto"
  "AppType\022\023\n\017EAppTypeInvalid\020\000\022\020\n\014EAppType"
  "Game\020\001\022\027\n\023EAppTypeApplication\020\002\022\020\n\014EAppT"
  "ypeTool\020\004\022\020\n\014EAppTypeDemo\020\010\022\025\n\021EAppTypeD"
  "eprected\020\020\022\017\n\013EAppTypeDLC\020 \022\021\n\rEAppTypeG"
  "uide\020@\022\023\n\016EAppTypeDriver\020\200\001\022\023\n\016EAppTypeC"
  "onfig\020\200\002\022\025\n\020EAppTypeHardware\020\200\004\022\026\n\021EAppT"
  "ypeFranchise\020\200\010\022\022\n\rEAppTypeVideo\020\200\020\022\023\n\016E"
  "AppTypePlugin\020\200 \022\027\n\022EAppTypeMusicAlbum\020\200"
  "@\022\024\n\016EAppTypeSeries\020\200\200\001\022\023\n\rEAppTypeComic"
  "\020\200\200\002\022\022\n\014EAppTypeBeta\020\200\200\004\022\030\n\020EAppTypeShor"
  "tcut\020\200\200\200\200\004\022\036\n\021EAppTypeDepotOnly\020\200\200\200\200\370\377\377\377"
  "\377\001*\220\001\n\031EChildProcessQueryCommand\022%\n!EChi"
  "ldProcessQueryCommand_Invalid\020\000\022)\n%EChil"
  "dProcessQueryCommand_GpuTopology\020\001\022!\n\035EC"
  "hildProcessQueryCommand_Max\020\002*\352\002\n\032EChild"
  "ProcessQueryExitCode\022&\n\"EChildProcessQue"
  "ryExitCode_Success\020\000\0228\n+EChildProcessQue"
  "ryExitCode_ErrorCommandline\020\377\377\377\377\377\377\377\377\377\001\0222"
  "\n%EChildProcessQueryExitCode_ErrorOther\020"
  "\376\377\377\377\377\377\377\377\377\001\022:\n-EChildProcessQueryExitCode"
  "_ErrorUnimplemented\020\375\377\377\377\377\377\377\377\377\001\0225\n(EChild"
  "ProcessQueryExitCode_ErrorFileSave\020\374\377\377\377\377"
  "\377\377\377\377\001\022C\n6EChildProcessQueryExitCode_Erro"
  "rNotSupportedByPlatform\020\373\377\377\377\377\377\377\377\377\001*\352\001\n E"
  "WindowsUpdateInstallationImpact\0225\n(EWind"
  "owsUpdateInstallationImpact_Unknown\020\377\377\377\377"
  "\377\377\377\377\377\001\022+\n\'EWindowsUpdateInstallationImpa"
  "ct_Normal\020\000\022*\n&EWindowsUpdateInstallatio"
  "nImpact_Minor\020\001\0226\n2EWindowsUpdateInstall"
  "ationImpact_ExclusiveHandling\020\002*\352\001\n\034EWin"
  "dowsUpdateRebootBehavior\0221\n$EWindowsUpda"
  "teRebootBehavior_Unknown\020\377\377\377\377\377\377\377\377\377\001\0221\n-E"
  "WindowsUpdateRebootBehavior_NeverNeedsRe"
  "boot\020\000\0222\n.EWindowsUpdateRebootBehavior_A"
  "lwaysNeedsReboot\020\001\0220\n,EWindowsUpdateRebo"
  "otBehavior_MightNeedReboot\020\002*\362\001\n\026EExtern"
  "alSaleEventType\022\"\n\036EExternalSaleEventTyp"
  "e_Unknown\020\000\022$\n EExternalSaleEventType_Pu"
  "blisher\020\001\022#\n\037EExternalSaleEventType_Show"
  "case\020\002\022!\n\035EExternalSaleEventType_Region\020"
  "\003\022 \n\034EExternalSaleEventType_Theme\020\004\022$\n E"
  "ExternalSaleEventType_Franchise\020\005B#H\001\200\001\001"
  "\252\002\027OpenSteamworks.Protobuf\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, 18390, descriptor_table_protodef_enums_2eproto, "enums.proto", 
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  file_level_metadata_enums_2eproto, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_enums_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return descriptor_table_enums_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_enums_2eproto(&descriptor_table_enums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool EPublishedFileQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool EPublishedFileInappropriateProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[2];
}
bool EPublishedFileInappropriateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPersonaStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[3];
}
bool EPersonaStateFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentCheckProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[4];
}
bool EContentCheckProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[5];
}
bool EProfileCustomizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileStorageSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[6];
}
bool EPublishedFileStorageSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudStoragePersistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[7];
}
bool ECloudStoragePersistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESDCardFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[8];
}
bool ESDCardFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[9];
}
bool EStorageFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemFanControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[10];
}
bool ESystemFanControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartupMovieVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[11];
}
bool EStartupMovieVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColorGamutLabelSet_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[12];
}
bool EColorGamutLabelSet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowStackingOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[13];
}
bool EWindowStackingOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBluetoothDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[14];
}
bool EBluetoothDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[15];
}
bool ESystemAudioDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[16];
}
bool ESystemAudioChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[17];
}
bool ESystemAudioPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[18];
}
bool ESystemAudioPortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[19];
}
bool ESystemServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGraphicsPerfOverlayLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[20];
}
bool EGraphicsPerfOverlayLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGPUPerformanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[21];
}
bool EGPUPerformanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[22];
}
bool EScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[23];
}
bool ESplitScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingScaler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[24];
}
bool ESplitScalingScaler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGamescopeBlurMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[25];
}
bool EGamescopeBlurMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESLSHelper_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[26];
}
bool ESLSHelper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRVisualization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[27];
}
bool EHDRVisualization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRToneMapOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[28];
}
bool EHDRToneMapOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPUGovernor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[29];
}
bool ECPUGovernor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[30];
}
bool EUpdaterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[31];
}
bool EUpdaterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[32];
}
bool EStorageBlockContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockFileSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[33];
}
bool EStorageBlockFileSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageDriveMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[34];
}
bool EStorageDriveMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemDisplayCompatibilityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[35];
}
bool ESystemDisplayCompatibilityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[36];
}
bool ESteamDeckCompatibilityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityResultDisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[37];
}
bool ESteamDeckCompatibilityResultDisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityTestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[38];
}
bool ESteamDeckCompatibilityTestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EACState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[39];
}
bool EACState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBatteryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[40];
}
bool EBatteryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOSBranch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[41];
}
bool EOSBranch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBrowserGPUStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[42];
}
bool EBrowserGPUStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBrowserFeatureStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[43];
}
bool EBrowserFeatureStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGpuDriverId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[44];
}
bool EGpuDriverId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[45];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityFeedback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[46];
}
bool ESteamDeckCompatibilityFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProvideDeckFeedbackPreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[47];
}
bool EProvideDeckFeedbackPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[48];
}
bool ETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESessionPersistence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[49];
}
bool ESessionPersistence_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENewSteamAnnouncementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[50];
}
bool ENewSteamAnnouncementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EForumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[51];
}
bool EForumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommentThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[52];
}
bool ECommentThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[53];
}
bool EBroadcastPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastEncoderSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[54];
}
bool EBroadcastEncoderSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudGamingPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[55];
}
bool ECloudGamingPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECompromiseDetectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[56];
}
bool ECompromiseDetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[57];
}
bool EAsyncGameSessionUserState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[58];
}
bool EAsyncGameSessionUserVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameRecordingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[59];
}
bool EGameRecordingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExportCodec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[60];
}
bool EExportCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoAppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[61];
}
bool EProtoAppType_IsValid(int value) {
  switch (value) {
    case -2147483647 - 1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChildProcessQueryCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[62];
}
bool EChildProcessQueryCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChildProcessQueryExitCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[63];
}
bool EChildProcessQueryExitCode_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateInstallationImpact_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[64];
}
bool EWindowsUpdateInstallationImpact_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateRebootBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[65];
}
bool EWindowsUpdateRebootBehavior_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExternalSaleEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[66];
}
bool EExternalSaleEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
