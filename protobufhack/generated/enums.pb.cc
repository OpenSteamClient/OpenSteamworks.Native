// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_enums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[66];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\032 google/protobuf/descripto"
  "r.proto\032\030steammessages_base.proto*\324\t\n\027EP"
  "ublishedFileQueryType\022\'\n#PublishedFileQu"
  "eryType_RankedByVote\020\000\0222\n.PublishedFileQ"
  "ueryType_RankedByPublicationDate\020\001\022@\n<Pu"
  "blishedFileQueryType_AcceptedForGameRank"
  "edByAcceptanceDate\020\002\022(\n$PublishedFileQue"
  "ryType_RankedByTrend\020\003\022D\n@PublishedFileQ"
  "ueryType_FavoritedByFriendsRankedByPubli"
  "cationDate\020\004\022B\n>PublishedFileQueryType_C"
  "reatedByFriendsRankedByPublicationDate\020\005"
  "\0223\n/PublishedFileQueryType_RankedByNumTi"
  "mesReported\020\006\022H\nDPublishedFileQueryType_"
  "CreatedByFollowedUsersRankedByPublicatio"
  "nDate\020\007\022&\n\"PublishedFileQueryType_NotYet"
  "Rated\020\010\022;\n7PublishedFileQueryType_Ranked"
  "ByTotalUniqueSubscriptions\020\t\0220\n,Publishe"
  "dFileQueryType_RankedByTotalVotesAsc\020\n\022*"
  "\n&PublishedFileQueryType_RankedByVotesUp"
  "\020\013\022-\n)PublishedFileQueryType_RankedByTex"
  "tSearch\020\014\0220\n,PublishedFileQueryType_Rank"
  "edByPlaytimeTrend\020\r\0220\n,PublishedFileQuer"
  "yType_RankedByTotalPlaytime\020\016\0227\n3Publish"
  "edFileQueryType_RankedByAveragePlaytimeT"
  "rend\020\017\022:\n6PublishedFileQueryType_RankedB"
  "yLifetimeAveragePlaytime\020\020\0228\n4PublishedF"
  "ileQueryType_RankedByPlaytimeSessionsTre"
  "nd\020\021\022;\n7PublishedFileQueryType_RankedByL"
  "ifetimePlaytimeSessions\020\022\022=\n9PublishedFi"
  "leQueryType_RankedByInappropriateContent"
  "Rating\020\023\0222\n.PublishedFileQueryType_Ranke"
  "dByBanContentCheck\020\024\0222\n.PublishedFileQue"
  "ryType_RankedByLastUpdatedDate\020\025*\266\001\n#EPu"
  "blishedFileInappropriateProvider\022/\n+EPub"
  "lishedFileInappropriateProvider_Invalid\020"
  "\000\022.\n*EPublishedFileInappropriateProvider"
  "_Google\020\001\022.\n*EPublishedFileInappropriate"
  "Provider_Amazon\020\002*\311\002\n!EPublishedFileInap"
  "propriateResult\0220\n,EPublishedFileInappro"
  "priateResult_NotScanned\020\000\0222\n.EPublishedF"
  "ileInappropriateResult_VeryUnlikely\020\001\022.\n"
  "*EPublishedFileInappropriateResult_Unlik"
  "ely\020\036\022.\n*EPublishedFileInappropriateResu"
  "lt_Possible\0202\022,\n(EPublishedFileInappropr"
  "iateResult_Likely\020K\0220\n,EPublishedFileIna"
  "ppropriateResult_VeryLikely\020d*\235\003\n\021EPerso"
  "naStateFlag\022%\n!EPersonaStateFlag_HasRich"
  "Presence\020\001\022$\n EPersonaStateFlag_InJoinab"
  "leGame\020\002\022\034\n\030EPersonaStateFlag_Golden\020\004\022("
  "\n$EPersonaStateFlag_RemotePlayTogether\020\010"
  "\022$\n\037EPersonaStateFlag_ClientTypeWeb\020\200\002\022\'"
  "\n\"EPersonaStateFlag_ClientTypeMobile\020\200\004\022"
  "(\n#EPersonaStateFlag_ClientTypeTenfoot\020\200"
  "\010\022#\n\036EPersonaStateFlag_ClientTypeVR\020\200\020\022("
  "\n#EPersonaStateFlag_LaunchTypeGamepad\020\200 "
  "\022+\n&EPersonaStateFlag_LaunchTypeCompatTo"
  "ol\020\200@*\242\002\n\025EContentCheckProvider\022!\n\035ECont"
  "entCheckProvider_Invalid\020\000\022+\n\'EContentCh"
  "eckProvider_Google_DEPRECATED\020\001\022 \n\034ECont"
  "entCheckProvider_Amazon\020\002\022\037\n\033EContentChe"
  "ckProvider_Local\020\003\022(\n$EContentCheckProvi"
  "der_GoogleVertexAI\020\004\022&\n\"EContentCheckPro"
  "vider_GoogleGemini\020\005\022$\n EContentCheckPro"
  "vider_SteamLearn\020\006*\341\010\n\031EProfileCustomiza"
  "tionType\022$\n EProfileCustomizationTypeInv"
  "alid\020\000\0224\n0EProfileCustomizationTypeRareA"
  "chievementShowcase\020\001\022*\n&EProfileCustomiz"
  "ationTypeGameCollector\020\002\022)\n%EProfileCust"
  "omizationTypeItemShowcase\020\003\022*\n&EProfileC"
  "ustomizationTypeTradeShowcase\020\004\022#\n\037EProf"
  "ileCustomizationTypeBadges\020\005\022)\n%EProfile"
  "CustomizationTypeFavoriteGame\020\006\022/\n+EProf"
  "ileCustomizationTypeScreenshotShowcase\020\007"
  "\022\'\n#EProfileCustomizationTypeCustomText\020"
  "\010\022*\n&EProfileCustomizationTypeFavoriteGr"
  "oup\020\t\022+\n\'EProfileCustomizationTypeRecomm"
  "endation\020\n\022)\n%EProfileCustomizationTypeW"
  "orkshopItem\020\013\022\'\n#EProfileCustomizationTy"
  "peMyWorkshop\020\014\022,\n(EProfileCustomizationT"
  "ypeArtworkShowcase\020\r\022*\n&EProfileCustomiz"
  "ationTypeVideoShowcase\020\016\022#\n\037EProfileCust"
  "omizationTypeGuides\020\017\022%\n!EProfileCustomi"
  "zationTypeMyGuides\020\020\022)\n%EProfileCustomiz"
  "ationTypeAchievements\020\021\022\'\n#EProfileCusto"
  "mizationTypeGreenlight\020\022\022)\n%EProfileCust"
  "omizationTypeMyGreenlight\020\023\022#\n\037EProfileC"
  "ustomizationTypeSalien\020\024\0223\n/EProfileCust"
  "omizationTypeLoyaltyRewardReactions\020\025\0222\n"
  ".EProfileCustomizationTypeSingleArtworkS"
  "howcase\020\026\0226\n2EProfileCustomizationTypeAc"
  "hievementsCompletionist\020\027\022#\n\037EProfileCus"
  "tomizationTypeReplay\020\030*\300\001\n\033EPublishedFil"
  "eStorageSystem\022&\n\"EPublishedFileStorageS"
  "ystemInvalid\020\000\022*\n&EPublishedFileStorageS"
  "ystemLegacyCloud\020\001\022$\n EPublishedFileStor"
  "ageSystemDepot\020\002\022\'\n#EPublishedFileStorag"
  "eSystemUGCCloud\020\003*\221\001\n\031ECloudStoragePersi"
  "stState\022&\n\"ECloudStoragePersistStatePers"
  "isted\020\000\022&\n\"ECloudStoragePersistStateForg"
  "otten\020\001\022$\n ECloudStoragePersistStateDele"
  "ted\020\002*\334\001\n\022ESDCardFormatStage\022\036\n\032ESDCardF"
  "ormatStage_Invalid\020\000\022\037\n\033ESDCardFormatSta"
  "ge_Starting\020\001\022\036\n\032ESDCardFormatStage_Test"
  "ing\020\002\022\037\n\033ESDCardFormatStage_Rescuing\020\003\022!"
  "\n\035ESDCardFormatStage_Formatting\020\004\022!\n\035ESD"
  "CardFormatStage_Finalizing\020\005*\207\002\n\023EStorag"
  "eFormatStage\022\037\n\033EStorageFormatStage_Inva"
  "lid\020\000\022\"\n\036EStorageFormatStage_NotRunning\020"
  "\001\022 \n\034EStorageFormatStage_Starting\020\002\022\037\n\033E"
  "StorageFormatStage_Testing\020\003\022 \n\034EStorage"
  "FormatStage_Rescuing\020\004\022\"\n\036EStorageFormat"
  "Stage_Formatting\020\005\022\"\n\036EStorageFormatStag"
  "e_Finalizing\020\006*~\n\025ESystemFanControlMode\022"
  " \n\034SystemFanControlMode_Invalid\020\000\022!\n\035Sys"
  "temFanControlMode_Disabled\020\001\022 \n\034SystemFa"
  "nControlMode_Default\020\002*\242\001\n\024EStartupMovie"
  "Variant\022 \n\034EStartupMovieVariant_Invalid\020"
  "\000\022 \n\034EStartupMovieVariant_Generic\020\001\022!\n\035E"
  "StartupMovieVariant_DeckBlue\020\002\022#\n\037EStart"
  "upMovieVariant_DeckOrange\020\003*\205\001\n\023EColorGa"
  "mutLabelSet\022\036\n\032ColorGamutLabelSet_Defaul"
  "t\020\000\022\"\n\036ColorGamutLabelSet_sRGB_Native\020\001\022"
  "*\n&ColorGamutLabelSet_Native_sRGB_Booste"
  "d\020\002*w\n\024EWindowStackingOrder\022 \n\034EWindowSt"
  "ackingOrder_Invalid\020\000\022\034\n\030EWindowStacking"
  "Order_Top\020\001\022\037\n\033EWindowStackingOrder_Bott"
  "om\020\002*\250\003\n\024EBluetoothDeviceType\022\037\n\033Bluetoo"
  "thDeviceType_Invalid\020\000\022\037\n\033BluetoothDevic"
  "eType_Unknown\020\001\022\035\n\031BluetoothDeviceType_P"
  "hone\020\002\022 \n\034BluetoothDeviceType_Computer\020\003"
  "\022\037\n\033BluetoothDeviceType_Headset\020\004\022\"\n\036Blu"
  "etoothDeviceType_Headphones\020\005\022 \n\034Bluetoo"
  "thDeviceType_Speakers\020\006\022\"\n\036BluetoothDevi"
  "ceType_OtherAudio\020\007\022\035\n\031BluetoothDeviceTy"
  "pe_Mouse\020\010\022 \n\034BluetoothDeviceType_Joysti"
  "ck\020\t\022\037\n\033BluetoothDeviceType_Gamepad\020\n\022 \n"
  "\034BluetoothDeviceType_Keyboard\020\013*z\n\025ESyst"
  "emAudioDirection\022 \n\034SystemAudioDirection"
  "_Invalid\020\000\022\036\n\032SystemAudioDirection_Input"
  "\020\001\022\037\n\033SystemAudioDirection_Output\020\002*\335\002\n\023"
  "ESystemAudioChannel\022\036\n\032SystemAudioChanne"
  "l_Invalid\020\000\022!\n\035SystemAudioChannel_Aggreg"
  "ated\020\001\022 \n\034SystemAudioChannel_FrontLeft\020\002"
  "\022!\n\035SystemAudioChannel_FrontRight\020\003\022\032\n\026S"
  "ystemAudioChannel_LFE\020\004\022\037\n\033SystemAudioCh"
  "annel_BackLeft\020\005\022 \n\034SystemAudioChannel_B"
  "ackRight\020\006\022\"\n\036SystemAudioChannel_FrontCe"
  "nter\020\007\022\036\n\032SystemAudioChannel_Unknown\020\010\022\033"
  "\n\027SystemAudioChannel_Mono\020\t*\277\001\n\024ESystemA"
  "udioPortType\022\037\n\033SystemAudioPortType_Inva"
  "lid\020\000\022\037\n\033SystemAudioPortType_Unknown\020\001\022 "
  "\n\034SystemAudioPortType_Audio32f\020\002\022\036\n\032Syst"
  "emAudioPortType_Midi8b\020\003\022#\n\037SystemAudioP"
  "ortType_Video32RGBA\020\004*\212\001\n\031ESystemAudioPo"
  "rtDirection\022$\n SystemAudioPortDirection_"
  "Invalid\020\000\022\"\n\036SystemAudioPortDirection_In"
  "put\020\001\022#\n\037SystemAudioPortDirection_Output"
  "\020\002*}\n\023ESystemServiceState\022#\n\037ESystemServ"
  "iceState_Unavailable\020\000\022 \n\034ESystemService"
  "State_Disabled\020\001\022\037\n\033ESystemServiceState_"
  "Enabled\020\002*\327\001\n\031EGraphicsPerfOverlayLevel\022"
  "$\n EGraphicsPerfOverlayLevel_Hidden\020\000\022#\n"
  "\037EGraphicsPerfOverlayLevel_Basic\020\001\022$\n EG"
  "raphicsPerfOverlayLevel_Medium\020\002\022\"\n\036EGra"
  "phicsPerfOverlayLevel_Full\020\003\022%\n!EGraphic"
  "sPerfOverlayLevel_Minimal\020\004*\331\001\n\024EGPUPerf"
  "ormanceLevel\022 \n\034EGPUPerformanceLevel_Inv"
  "alid\020\000\022\035\n\031EGPUPerformanceLevel_Auto\020\001\022\037\n"
  "\033EGPUPerformanceLevel_Manual\020\002\022\034\n\030EGPUPe"
  "rformanceLevel_Low\020\003\022\035\n\031EGPUPerformanceL"
  "evel_High\020\004\022\"\n\036EGPUPerformanceLevel_Prof"
  "iling\020\005*\276\001\n\023ESplitScalingFilter\022\037\n\033ESpli"
  "tScalingFilter_Invalid\020\000\022\036\n\032ESplitScalin"
  "gFilter_Linear\020\001\022\037\n\033ESplitScalingFilter_"
  "Nearest\020\002\022\035\n\031ESplitScalingFilter_Sharp\020\003"
  "\022&\n\"ESplitScalingFilter_NIS_Deprecated\020\004"
  "*\321\001\n\023ESplitScalingScaler\022\037\n\033ESplitScalin"
  "gScaler_Invalid\020\000\022\034\n\030ESplitScalingScaler"
  "_Auto\020\001\022\037\n\033ESplitScalingScaler_Integer\020\002"
  "\022\033\n\027ESplitScalingScaler_Fit\020\003\022\034\n\030ESplitS"
  "calingScaler_Fill\020\004\022\037\n\033ESplitScalingScal"
  "er_Stretch\020\005*w\n\022EGamescopeBlurMode\022\037\n\033EG"
  "amescopeBlurMode_Disabled\020\000\022!\n\035EGamescop"
  "eBlurMode_IfOccluded\020\001\022\035\n\031EGamescopeBlur"
  "Mode_Always\020\002*\232\001\n\nESLSHelper\022\026\n\022ESLSHelp"
  "er_Invalid\020\000\022\027\n\023ESLSHelper_Minidump\020\001\022\024\n"
  "\020ESLSHelper_Kdump\020\002\022\026\n\022ESLSHelper_Journa"
  "l\020\003\022\022\n\016ESLSHelper_Gpu\020\004\022\031\n\025ESLSHelper_Sy"
  "stemInfo\020\005*\273\001\n\021EHDRVisualization\022\032\n\026EHDR"
  "Visualization_None\020\000\022\035\n\031EHDRVisualizatio"
  "n_Heatmap\020\001\022\036\n\032EHDRVisualization_Analysi"
  "s\020\002\022%\n!EHDRVisualization_HeatmapExtended"
  "\020\003\022$\n EHDRVisualization_HeatmapClassic\020\004"
  "*{\n\023EHDRToneMapOperator\022\037\n\033EHDRToneMapOp"
  "erator_Invalid\020\000\022!\n\035EHDRToneMapOperator_"
  "Uncharted\020\001\022 \n\034EHDRToneMapOperator_Reinh"
  "ard\020\002*t\n\014ECPUGovernor\022\030\n\024ECPUGovernor_In"
  "valid\020\000\022\025\n\021ECPUGovernor_Perf\020\001\022\032\n\026ECPUGo"
  "vernor_Powersave\020\002\022\027\n\023ECPUGovernor_Manua"
  "l\020\003*\322\001\n\014EUpdaterType\022\030\n\024EUpdaterType_Inv"
  "alid\020\000\022\027\n\023EUpdaterType_Client\020\001\022\023\n\017EUpda"
  "terType_OS\020\002\022\025\n\021EUpdaterType_BIOS\020\003\022\033\n\027E"
  "UpdaterType_Aggregated\020\004\022\026\n\022EUpdaterType"
  "_Test1\020\005\022\026\n\022EUpdaterType_Test2\020\006\022\026\n\022EUpd"
  "aterType_Dummy\020\007*\207\002\n\rEUpdaterState\022\031\n\025EU"
  "pdaterState_Invalid\020\000\022\032\n\026EUpdaterState_U"
  "pToDate\020\002\022\032\n\026EUpdaterState_Checking\020\003\022\033\n"
  "\027EUpdaterState_Available\020\004\022\032\n\026EUpdaterSt"
  "ate_Applying\020\005\022&\n\"EUpdaterState_ClientRe"
  "startPending\020\006\022&\n\"EUpdaterState_SystemRe"
  "startPending\020\007\022\032\n\026EUpdaterState_RollBack"
  "\020\010*\327\001\n\030EStorageBlockContentType\022$\n EStor"
  "ageBlockContentType_Invalid\020\000\022$\n EStorag"
  "eBlockContentType_Unknown\020\001\022\'\n#EStorageB"
  "lockContentType_FileSystem\020\002\022#\n\037EStorage"
  "BlockContentType_Crypto\020\003\022!\n\035EStorageBlo"
  "ckContentType_Raid\020\004*\273\001\n\033EStorageBlockFi"
  "leSystemType\022\'\n#EStorageBlockFileSystemT"
  "ype_Invalid\020\000\022\'\n#EStorageBlockFileSystem"
  "Type_Unknown\020\001\022$\n EStorageBlockFileSyste"
  "mType_VFat\020\002\022$\n EStorageBlockFileSystemT"
  "ype_Ext4\020\003*\306\001\n\026EStorageDriveMediaType\022\"\n"
  "\036EStorageDriveMediaType_Invalid\020\000\022\"\n\036ESt"
  "orageDriveMediaType_Unknown\020\001\022\036\n\032EStorag"
  "eDriveMediaType_HDD\020\002\022\036\n\032EStorageDriveMe"
  "diaType_SSD\020\003\022$\n EStorageDriveMediaType_"
  "Removable\020\004*\255\001\n\037ESystemDisplayCompatibil"
  "ityMode\022+\n\'ESystemDisplayCompatibilityMo"
  "de_Invalid\020\000\022(\n$ESystemDisplayCompatibil"
  "ityMode_None\020\001\0223\n/ESystemDisplayCompatib"
  "ilityMode_MinimalBandwith\020\002*\333\001\n\037ESteamDe"
  "ckCompatibilityCategory\022+\n\'ESteamDeckCom"
  "patibilityCategory_Unknown\020\000\022/\n+ESteamDe"
  "ckCompatibilityCategory_Unsupported\020\001\022,\n"
  "(ESteamDeckCompatibilityCategory_Playabl"
  "e\020\002\022,\n(ESteamDeckCompatibilityCategory_V"
  "erified\020\003*\306\002\n(ESteamDeckCompatibilityRes"
  "ultDisplayType\0226\n2ESteamDeckCompatibilit"
  "yResultDisplayType_Invisible\020\000\022:\n6ESteam"
  "DeckCompatibilityResultDisplayType_Infor"
  "mational\020\001\0228\n4ESteamDeckCompatibilityRes"
  "ultDisplayType_Unsupported\020\002\0225\n1ESteamDe"
  "ckCompatibilityResultDisplayType_Playabl"
  "e\020\003\0225\n1ESteamDeckCompatibilityResultDisp"
  "layType_Verified\020\004*\220\002\n!ESteamDeckCompati"
  "bilityTestResult\022-\n)ESteamDeckCompatibil"
  "ityTestResult_Invalid\020\000\0223\n/ESteamDeckCom"
  "patibilityTestResult_NotApplicable\020\001\022*\n&"
  "ESteamDeckCompatibilityTestResult_Pass\020\002"
  "\022*\n&ESteamDeckCompatibilityTestResult_Fa"
  "il\020\003\022/\n+ESteamDeckCompatibilityTestResul"
  "t_FailMinor\020\004*o\n\010EACState\022\024\n\020EACState_Un"
  "known\020\000\022\031\n\025EACState_Disconnected\020\001\022\026\n\022EA"
  "CState_Connected\020\002\022\032\n\026EACState_Connected"
  "Slow\020\003*}\n\rEBatteryState\022\031\n\025EBatteryState"
  "_Unknown\020\000\022\035\n\031EBatteryState_Discharging\020"
  "\001\022\032\n\026EBatteryState_Charging\020\002\022\026\n\022EBatter"
  "yState_Full\020\003*\354\001\n\tEOSBranch\022\025\n\021EOSBranch"
  "_Unknown\020\000\022\025\n\021EOSBranch_Release\020\001\022\036\n\032EOS"
  "Branch_ReleaseCandidate\020\002\022\022\n\016EOSBranch_B"
  "eta\020\003\022\033\n\027EOSBranch_BetaCandidate\020\004\022\025\n\021EO"
  "SBranch_Preview\020\005\022\036\n\032EOSBranch_PreviewCa"
  "ndidate\020\006\022\022\n\016EOSBranch_Main\020\007\022\025\n\021EOSBran"
  "ch_Staging\020\010*\262\003\n\021EBrowserGPUStatus\022\035\n\031EB"
  "rowserGPUStatus_Invalid\020\000\022\035\n\031EBrowserGPU"
  "Status_Enabled\020\001\022%\n!EBrowserGPUStatus_Di"
  "sabledUnknown\020\002\022(\n$EBrowserGPUStatus_Dis"
  "abledCrashCount\020\004\022\'\n#EBrowserGPUStatus_D"
  "isabledBlocklist\020\005\022\'\n#EBrowserGPUStatus_"
  "DisabledJSRequest\020\006\022)\n%EBrowserGPUStatus"
  "_DisabledCommandLine\020\007\022+\n\'EBrowserGPUSta"
  "tus_DisabledRuntimeDetect\020\010\022.\n*EBrowserG"
  "PUStatus_DisabledChildCommandLine\020\t\0224\n0E"
  "BrowserGPUStatus_DisabledCompositingComm"
  "andLine\020\n*\307\004\n\025EBrowserFeatureStatus\022!\n\035E"
  "BrowserFeatureStatus_Invalid\020\000\022\"\n\036EBrows"
  "erFeatureStatus_NotFound\020\001\022!\n\035EBrowserFe"
  "atureStatus_Unknown\020\002\022*\n&EBrowserFeature"
  "Status_DisabledSoftware\020\003\022%\n!EBrowserFea"
  "tureStatus_DisabledOff\020\004\022\'\n#EBrowserFeat"
  "ureStatus_DisabledOffOk\020\005\022-\n)EBrowserFea"
  "tureStatus_UnavailableSoftware\020\006\022(\n$EBro"
  "wserFeatureStatus_UnavailableOff\020\007\022*\n&EB"
  "rowserFeatureStatus_UnavailableOffOk\020\010\022)"
  "\n%EBrowserFeatureStatus_EnabledReadback\020"
  "\t\022&\n\"EBrowserFeatureStatus_EnabledForce\020"
  "\n\022!\n\035EBrowserFeatureStatus_Enabled\020\013\022#\n\037"
  "EBrowserFeatureStatus_EnabledOn\020\014\022(\n$EBr"
  "owserFeatureStatus_EnabledForceOn\020\r*\367\004\n\014"
  "EGpuDriverId\022\030\n\024EGpuDriverId_Invalid\020\000\022\030"
  "\n\024EGpuDriverId_Unknown\020\001\022\037\n\033EGpuDriverId"
  "_AmdProprietary\020\002\022\036\n\032EGpuDriverId_AmdOpe"
  "nSource\020\003\022\031\n\025EGpuDriverId_MesaRadv\020\004\022\"\n\036"
  "EGpuDriverId_NvidiaProprietary\020\005\022 \n\034EGpu"
  "DriverId_IntelPropietary\020\006\022\032\n\026EGpuDriver"
  "Id_MesaIntel\020\007\022$\n EGpuDriverId_QualcommP"
  "roprietary\020\010\022\037\n\033EGpuDriverId_ArmPropriet"
  "ary\020\t\022\"\n\036EGpuDriverId_GoogleSwiftshader\020"
  "\n\022$\n EGpuDriverId_BroadcomProprietary\020\013\022"
  "\035\n\031EGpuDriverId_MesaLLVMPipe\020\014\022\031\n\025EGpuDr"
  "iverId_MoltenVK\020\r\022\033\n\027EGpuDriverId_MesaTu"
  "rnip\020\016\022\032\n\026EGpuDriverId_MesaPanVK\020\017\022\032\n\026EG"
  "puDriverId_MesaVenus\020\020\022\032\n\026EGpuDriverId_M"
  "esaDozen\020\021\022\030\n\024EGpuDriverId_MesaNVK\020\022\022\037\n\033"
  "EGpuDriverId_MesaHoneyKrisp\020\023*\271\005\n\023ECommu"
  "nityItemClass\022\037\n\033ECommunityItemClass_Inv"
  "alid\020\000\022\035\n\031ECommunityItemClass_Badge\020\001\022 \n"
  "\034ECommunityItemClass_GameCard\020\002\022)\n%EComm"
  "unityItemClass_ProfileBackground\020\003\022 \n\034EC"
  "ommunityItemClass_Emoticon\020\004\022#\n\037ECommuni"
  "tyItemClass_BoosterPack\020\005\022\"\n\036ECommunityI"
  "temClass_Consumable\020\006\022\037\n\033ECommunityItemC"
  "lass_GameGoo\020\007\022\'\n#ECommunityItemClass_Pr"
  "ofileModifier\020\010\022\035\n\031ECommunityItemClass_S"
  "cene\020\t\022\"\n\036ECommunityItemClass_SalienItem"
  "\020\n\022\037\n\033ECommunityItemClass_Sticker\020\013\022\"\n\036E"
  "CommunityItemClass_ChatEffect\020\014\022-\n)EComm"
  "unityItemClass_MiniProfileBackground\020\r\022#"
  "\n\037ECommunityItemClass_AvatarFrame\020\016\022&\n\"E"
  "CommunityItemClass_AnimatedAvatar\020\017\022-\n)E"
  "CommunityItemClass_SteamDeckKeyboardSkin"
  "\020\020\022-\n)ECommunityItemClass_SteamDeckStart"
  "upMovie\020\021*\311\001\n\037ESteamDeckCompatibilityFee"
  "dback\022\'\n#ESteamDeckCompatibilityFeedbacU"
  "nset\020\000\022\'\n#ESteamDeckCompatibilityFeedbac"
  "Agree\020\001\022*\n&ESteamDeckCompatibilityFeedba"
  "cDisagree\020\002\022(\n$ESteamDeckCompatibilityFe"
  "edbacIgnore\020\003*\231\001\n\036EProvideDeckFeedbackPr"
  "eference\022(\n$EProvideDeckFeedbackPreferen"
  "ce_Unset\020\000\022&\n\"EProvideDeckFeedbackPrefer"
  "ence_Yes\020\001\022%\n!EProvideDeckFeedbackPrefer"
  "ence_No\020\002*\225\003\n\rETouchGesture\022\025\n\021ETouchGes"
  "tureNone\020\000\022\026\n\022ETouchGestureTouch\020\001\022\024\n\020ET"
  "ouchGestureTap\020\002\022\032\n\026ETouchGestureDoubleT"
  "ap\020\003\022\033\n\027ETouchGestureShortPress\020\004\022\032\n\026ETo"
  "uchGestureLongPress\020\005\022\030\n\024ETouchGestureLo"
  "ngTap\020\006\022\035\n\031ETouchGestureTwoFingerTap\020\007\022\035"
  "\n\031ETouchGestureTapCancelled\020\010\022\033\n\027ETouchG"
  "esturePinchBegin\020\t\022\034\n\030ETouchGesturePinch"
  "Update\020\n\022\031\n\025ETouchGesturePinchEnd\020\013\022\033\n\027E"
  "TouchGestureFlingStart\020\014\022\037\n\033ETouchGestur"
  "eFlingCancelled\020\r*\206\001\n\023ESessionPersistenc"
  "e\022(\n\033ESessionPersistence_Invalid\020\377\377\377\377\377\377\377"
  "\377\377\001\022!\n\035ESessionPersistence_Ephemeral\020\000\022\""
  "\n\036ESessionPersistence_Persistent\020\001*\321\001\n\032E"
  "NewSteamAnnouncementState\022&\n\"ENewSteamAn"
  "nouncementState_Invalid\020\000\022&\n\"ENewSteamAn"
  "nouncementState_AllRead\020\001\022.\n*ENewSteamAn"
  "nouncementState_NewAnnouncement\020\002\0223\n/ENe"
  "wSteamAnnouncementState_FeaturedAnnounce"
  "ment\020\003*\354\001\n\nEForumType\022\026\n\022EForumType_Inva"
  "lid\020\000\022\026\n\022EForumType_General\020\001\022\034\n\030EForumT"
  "ype_ReportedPosts\020\002\022\027\n\023EForumType_Worksh"
  "op\020\003\022\034\n\030EForumType_PublishedFile\020\004\022\026\n\022EF"
  "orumType_Trading\020\005\022\027\n\023EForumType_PlayTes"
  "t\020\006\022\024\n\020EForumType_Event\020\007\022\022\n\016EForumType_"
  "Max\020\010*\337\006\n\022ECommentThreadType\022\035\n\031EComment"
  "ThreadTypeInvalid\020\000\022+\n\'ECommentThreadTyp"
  "eScreenshot_Deprecated\020\001\022/\n+ECommentThre"
  "adTypeWorkshopAccount_Developer\020\002\022,\n(ECo"
  "mmentThreadTypeWorkshopAccount_Public\020\003\022"
  "-\n)ECommentThreadTypePublishedFile_Devel"
  "oper\020\004\022*\n&ECommentThreadTypePublishedFil"
  "e_Public\020\005\022\032\n\026ECommentThreadTypeTest\020\006\022 "
  "\n\034ECommentThreadTypeForumTopic\020\007\022$\n ECom"
  "mentThreadTypeRecommendation\020\010\022&\n\"EComme"
  "ntThreadTypeVideo_Deprecated\020\t\022\035\n\031EComme"
  "ntThreadTypeProfile\020\n\022\036\n\032ECommentThreadT"
  "ypeNewsPost\020\013\022\032\n\026ECommentThreadTypeClan\020"
  "\014\022&\n\"ECommentThreadTypeClanAnnouncement\020"
  "\r\022\037\n\033ECommentThreadTypeClanEvent\020\016\022)\n%EC"
  "ommentThreadTypeUserStatusPublished\020\017\022)\n"
  "%ECommentThreadTypeUserReceivedNewGame\020\020"
  "\0220\n,ECommentThreadTypePublishedFile_Anno"
  "uncement\020\021\022&\n\"ECommentThreadTypeModerato"
  "rMessage\020\022\022$\n ECommentThreadTypeClanCura"
  "tedApp\020\023\022\"\n\036ECommentThreadTypeQAndASessi"
  "on\020\024\022\031\n\025ECommentThreadTypeMax\020\025*\315\001\n\024EBro"
  "adcastPermission\022 \n\034EBroadcastPermission"
  "Disabled\020\000\022&\n\"EBroadcastPermissionFriend"
  "sApprove\020\001\022&\n\"EBroadcastPermissionFriend"
  "sAllowed\020\002\022\036\n\032EBroadcastPermissionPublic"
  "\020\003\022#\n\037EBroadcastPermissionSubscribers\020\004*"
  "b\n\030EBroadcastEncoderSetting\022 \n\034EBroadcas"
  "tEncoderBestQuality\020\000\022$\n EBroadcastEncod"
  "erBestPerformance\020\001*s\n\024ECloudGamingPlatf"
  "orm\022\034\n\030ECloudGamingPlatformNone\020\000\022\035\n\031ECl"
  "oudGamingPlatformValve\020\001\022\036\n\032ECloudGaming"
  "PlatformNVIDIA\020\002*\264\002\n\030ECompromiseDetectio"
  "nType\022!\n\035ECompromiseDetectionType_None\020\000"
  "\022\'\n#ECompromiseDetectionType_TradeEvent\020"
  "\001\022(\n$ECompromiseDetectionType_ApiCallRat"
  "e\020\002\022#\n\037ECompromiseDetectionType_Manual\020\003"
  "\022)\n%ECompromiseDetectionType_TicketActio"
  "n\020\004\022,\n(ECompromiseDetectionType_Maliciou"
  "sRefund\020\005\022$\n ECompromiseDetectionType_Mo"
  "ve2FA\020\006*\316\001\n\032EAsyncGameSessionUserState\022."
  "\n!EAsyncGameSessionUserStateUnknown\020\377\377\377\377"
  "\377\377\377\377\377\001\022.\n*EAsyncGameSessionUserStateWait"
  "ingForOthers\020\000\022,\n(EAsyncGameSessionUserS"
  "tateReadyForAction\020\001\022\"\n\036EAsyncGameSessio"
  "nUserStateDone\020\002*\276\001\n\037EAsyncGameSessionUs"
  "erVisibility\0229\n5EAsyncGameSessionUserVis"
  "ibilityEnvelopeAndSessionList\020\000\0222\n.EAsyn"
  "cGameSessionUserVisibilitySessionListOnl"
  "y\020\001\022,\n(EAsyncGameSessionUserVisibilityDi"
  "smissed\020\002*\312\001\n\022EGameRecordingType\022\036\n\032EGam"
  "eRecordingType_Unknown\020\000\022#\n\037EGameRecordi"
  "ngType_NotRecording\020\001\022&\n\"EGameRecordingT"
  "ype_ManualRecording\020\002\022*\n&EGameRecordingT"
  "ype_BackgroundRecording\020\003\022\033\n\027EGameRecord"
  "ingType_Clip\020\004*V\n\014EExportCodec\022\030\n\024EExpor"
  "tCodec_Default\020\000\022\025\n\021EExportCodec_H264\020\001\022"
  "\025\n\021EExportCodec_H265\020\002*\302\003\n\rEProtoAppType"
  "\022\023\n\017EAppTypeInvalid\020\000\022\020\n\014EAppTypeGame\020\001\022"
  "\027\n\023EAppTypeApplication\020\002\022\020\n\014EAppTypeTool"
  "\020\004\022\020\n\014EAppTypeDemo\020\010\022\025\n\021EAppTypeDeprecte"
  "d\020\020\022\017\n\013EAppTypeDLC\020 \022\021\n\rEAppTypeGuide\020@\022"
  "\023\n\016EAppTypeDriver\020\200\001\022\023\n\016EAppTypeConfig\020\200"
  "\002\022\025\n\020EAppTypeHardware\020\200\004\022\026\n\021EAppTypeFran"
  "chise\020\200\010\022\022\n\rEAppTypeVideo\020\200\020\022\023\n\016EAppType"
  "Plugin\020\200 \022\027\n\022EAppTypeMusicAlbum\020\200@\022\024\n\016EA"
  "ppTypeSeries\020\200\200\001\022\023\n\rEAppTypeComic\020\200\200\002\022\022\n"
  "\014EAppTypeBeta\020\200\200\004\022\030\n\020EAppTypeShortcut\020\200\200"
  "\200\200\004\022\036\n\021EAppTypeDepotOnly\020\200\200\200\200\370\377\377\377\377\001*\220\001\n\031"
  "EChildProcessQueryCommand\022%\n!EChildProce"
  "ssQueryCommand_Invalid\020\000\022)\n%EChildProces"
  "sQueryCommand_GpuTopology\020\001\022!\n\035EChildPro"
  "cessQueryCommand_Max\020\002*\352\002\n\032EChildProcess"
  "QueryExitCode\022&\n\"EChildProcessQueryExitC"
  "ode_Success\020\000\0228\n+EChildProcessQueryExitC"
  "ode_ErrorCommandline\020\377\377\377\377\377\377\377\377\377\001\0222\n%EChil"
  "dProcessQueryExitCode_ErrorOther\020\376\377\377\377\377\377\377"
  "\377\377\001\022:\n-EChildProcessQueryExitCode_ErrorU"
  "nimplemented\020\375\377\377\377\377\377\377\377\377\001\0225\n(EChildProcess"
  "QueryExitCode_ErrorFileSave\020\374\377\377\377\377\377\377\377\377\001\022C"
  "\n6EChildProcessQueryExitCode_ErrorNotSup"
  "portedByPlatform\020\373\377\377\377\377\377\377\377\377\001*\352\001\n EWindows"
  "UpdateInstallationImpact\0225\n(EWindowsUpda"
  "teInstallationImpact_Unknown\020\377\377\377\377\377\377\377\377\377\001\022"
  "+\n\'EWindowsUpdateInstallationImpact_Norm"
  "al\020\000\022*\n&EWindowsUpdateInstallationImpact"
  "_Minor\020\001\0226\n2EWindowsUpdateInstallationIm"
  "pact_ExclusiveHandling\020\002*\352\001\n\034EWindowsUpd"
  "ateRebootBehavior\0221\n$EWindowsUpdateReboo"
  "tBehavior_Unknown\020\377\377\377\377\377\377\377\377\377\001\0221\n-EWindows"
  "UpdateRebootBehavior_NeverNeedsReboot\020\000\022"
  "2\n.EWindowsUpdateRebootBehavior_AlwaysNe"
  "edsReboot\020\001\0220\n,EWindowsUpdateRebootBehav"
  "ior_MightNeedReboot\020\002*\362\001\n\026EExternalSaleE"
  "ventType\022\"\n\036EExternalSaleEventType_Unkno"
  "wn\020\000\022$\n EExternalSaleEventType_Publisher"
  "\020\001\022#\n\037EExternalSaleEventType_Showcase\020\002\022"
  "!\n\035EExternalSaleEventType_Region\020\003\022 \n\034EE"
  "xternalSaleEventType_Theme\020\004\022$\n EExterna"
  "lSaleEventType_Franchise\020\005B#H\001\200\001\001\252\002\027Open"
  "Steamworks.Protobuf\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, 18263, descriptor_table_protodef_enums_2eproto, "enums.proto", 
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  file_level_metadata_enums_2eproto, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_enums_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return descriptor_table_enums_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_enums_2eproto(&descriptor_table_enums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool EPublishedFileQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool EPublishedFileInappropriateProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[2];
}
bool EPublishedFileInappropriateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPersonaStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[3];
}
bool EPersonaStateFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentCheckProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[4];
}
bool EContentCheckProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[5];
}
bool EProfileCustomizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileStorageSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[6];
}
bool EPublishedFileStorageSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudStoragePersistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[7];
}
bool ECloudStoragePersistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESDCardFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[8];
}
bool ESDCardFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[9];
}
bool EStorageFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemFanControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[10];
}
bool ESystemFanControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartupMovieVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[11];
}
bool EStartupMovieVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColorGamutLabelSet_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[12];
}
bool EColorGamutLabelSet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowStackingOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[13];
}
bool EWindowStackingOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBluetoothDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[14];
}
bool EBluetoothDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[15];
}
bool ESystemAudioDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[16];
}
bool ESystemAudioChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[17];
}
bool ESystemAudioPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[18];
}
bool ESystemAudioPortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[19];
}
bool ESystemServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGraphicsPerfOverlayLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[20];
}
bool EGraphicsPerfOverlayLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGPUPerformanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[21];
}
bool EGPUPerformanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[22];
}
bool ESplitScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingScaler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[23];
}
bool ESplitScalingScaler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGamescopeBlurMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[24];
}
bool EGamescopeBlurMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESLSHelper_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[25];
}
bool ESLSHelper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRVisualization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[26];
}
bool EHDRVisualization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRToneMapOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[27];
}
bool EHDRToneMapOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPUGovernor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[28];
}
bool ECPUGovernor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[29];
}
bool EUpdaterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[30];
}
bool EUpdaterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[31];
}
bool EStorageBlockContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockFileSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[32];
}
bool EStorageBlockFileSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageDriveMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[33];
}
bool EStorageDriveMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemDisplayCompatibilityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[34];
}
bool ESystemDisplayCompatibilityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[35];
}
bool ESteamDeckCompatibilityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityResultDisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[36];
}
bool ESteamDeckCompatibilityResultDisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityTestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[37];
}
bool ESteamDeckCompatibilityTestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EACState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[38];
}
bool EACState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBatteryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[39];
}
bool EBatteryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOSBranch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[40];
}
bool EOSBranch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBrowserGPUStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[41];
}
bool EBrowserGPUStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBrowserFeatureStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[42];
}
bool EBrowserFeatureStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGpuDriverId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[43];
}
bool EGpuDriverId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[44];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityFeedback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[45];
}
bool ESteamDeckCompatibilityFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProvideDeckFeedbackPreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[46];
}
bool EProvideDeckFeedbackPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[47];
}
bool ETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESessionPersistence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[48];
}
bool ESessionPersistence_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENewSteamAnnouncementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[49];
}
bool ENewSteamAnnouncementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EForumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[50];
}
bool EForumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommentThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[51];
}
bool ECommentThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[52];
}
bool EBroadcastPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastEncoderSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[53];
}
bool EBroadcastEncoderSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudGamingPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[54];
}
bool ECloudGamingPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECompromiseDetectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[55];
}
bool ECompromiseDetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[56];
}
bool EAsyncGameSessionUserState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[57];
}
bool EAsyncGameSessionUserVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameRecordingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[58];
}
bool EGameRecordingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExportCodec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[59];
}
bool EExportCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoAppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[60];
}
bool EProtoAppType_IsValid(int value) {
  switch (value) {
    case -2147483647 - 1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChildProcessQueryCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[61];
}
bool EChildProcessQueryCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChildProcessQueryExitCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[62];
}
bool EChildProcessQueryExitCode_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateInstallationImpact_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[63];
}
bool EWindowsUpdateInstallationImpact_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateRebootBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[64];
}
bool EWindowsUpdateRebootBehavior_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExternalSaleEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[65];
}
bool EExternalSaleEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
