// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_enums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[61];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\032 google/protobuf/descripto"
  "r.proto\032\030steammessages_base.proto*\324\t\n\027EP"
  "ublishedFileQueryType\022\'\n#PublishedFileQu"
  "eryType_RankedByVote\020\000\0222\n.PublishedFileQ"
  "ueryType_RankedByPublicationDate\020\001\022@\n<Pu"
  "blishedFileQueryType_AcceptedForGameRank"
  "edByAcceptanceDate\020\002\022(\n$PublishedFileQue"
  "ryType_RankedByTrend\020\003\022D\n@PublishedFileQ"
  "ueryType_FavoritedByFriendsRankedByPubli"
  "cationDate\020\004\022B\n>PublishedFileQueryType_C"
  "reatedByFriendsRankedByPublicationDate\020\005"
  "\0223\n/PublishedFileQueryType_RankedByNumTi"
  "mesReported\020\006\022H\nDPublishedFileQueryType_"
  "CreatedByFollowedUsersRankedByPublicatio"
  "nDate\020\007\022&\n\"PublishedFileQueryType_NotYet"
  "Rated\020\010\022;\n7PublishedFileQueryType_Ranked"
  "ByTotalUniqueSubscriptions\020\t\0220\n,Publishe"
  "dFileQueryType_RankedByTotalVotesAsc\020\n\022*"
  "\n&PublishedFileQueryType_RankedByVotesUp"
  "\020\013\022-\n)PublishedFileQueryType_RankedByTex"
  "tSearch\020\014\0220\n,PublishedFileQueryType_Rank"
  "edByPlaytimeTrend\020\r\0220\n,PublishedFileQuer"
  "yType_RankedByTotalPlaytime\020\016\0227\n3Publish"
  "edFileQueryType_RankedByAveragePlaytimeT"
  "rend\020\017\022:\n6PublishedFileQueryType_RankedB"
  "yLifetimeAveragePlaytime\020\020\0228\n4PublishedF"
  "ileQueryType_RankedByPlaytimeSessionsTre"
  "nd\020\021\022;\n7PublishedFileQueryType_RankedByL"
  "ifetimePlaytimeSessions\020\022\022=\n9PublishedFi"
  "leQueryType_RankedByInappropriateContent"
  "Rating\020\023\0222\n.PublishedFileQueryType_Ranke"
  "dByBanContentCheck\020\024\0222\n.PublishedFileQue"
  "ryType_RankedByLastUpdatedDate\020\025*\266\001\n#EPu"
  "blishedFileInappropriateProvider\022/\n+EPub"
  "lishedFileInappropriateProvider_Invalid\020"
  "\000\022.\n*EPublishedFileInappropriateProvider"
  "_Google\020\001\022.\n*EPublishedFileInappropriate"
  "Provider_Amazon\020\002*\311\002\n!EPublishedFileInap"
  "propriateResult\0220\n,EPublishedFileInappro"
  "priateResult_NotScanned\020\000\0222\n.EPublishedF"
  "ileInappropriateResult_VeryUnlikely\020\001\022.\n"
  "*EPublishedFileInappropriateResult_Unlik"
  "ely\020\036\022.\n*EPublishedFileInappropriateResu"
  "lt_Possible\0202\022,\n(EPublishedFileInappropr"
  "iateResult_Likely\020K\0220\n,EPublishedFileIna"
  "ppropriateResult_VeryLikely\020d*\235\003\n\021EPerso"
  "naStateFlag\022%\n!EPersonaStateFlag_HasRich"
  "Presence\020\001\022$\n EPersonaStateFlag_InJoinab"
  "leGame\020\002\022\034\n\030EPersonaStateFlag_Golden\020\004\022("
  "\n$EPersonaStateFlag_RemotePlayTogether\020\010"
  "\022$\n\037EPersonaStateFlag_ClientTypeWeb\020\200\002\022\'"
  "\n\"EPersonaStateFlag_ClientTypeMobile\020\200\004\022"
  "(\n#EPersonaStateFlag_ClientTypeTenfoot\020\200"
  "\010\022#\n\036EPersonaStateFlag_ClientTypeVR\020\200\020\022("
  "\n#EPersonaStateFlag_LaunchTypeGamepad\020\200 "
  "\022+\n&EPersonaStateFlag_LaunchTypeCompatTo"
  "ol\020\200@*\324\001\n\025EContentCheckProvider\022!\n\035ECont"
  "entCheckProvider_Invalid\020\000\022+\n\'EContentCh"
  "eckProvider_Google_DEPRECATED\020\001\022 \n\034ECont"
  "entCheckProvider_Amazon\020\002\022\037\n\033EContentChe"
  "ckProvider_Local\020\003\022(\n$EContentCheckProvi"
  "der_GoogleVertexAI\020\004*\341\010\n\031EProfileCustomi"
  "zationType\022$\n EProfileCustomizationTypeI"
  "nvalid\020\000\0224\n0EProfileCustomizationTypeRar"
  "eAchievementShowcase\020\001\022*\n&EProfileCustom"
  "izationTypeGameCollector\020\002\022)\n%EProfileCu"
  "stomizationTypeItemShowcase\020\003\022*\n&EProfil"
  "eCustomizationTypeTradeShowcase\020\004\022#\n\037EPr"
  "ofileCustomizationTypeBadges\020\005\022)\n%EProfi"
  "leCustomizationTypeFavoriteGame\020\006\022/\n+EPr"
  "ofileCustomizationTypeScreenshotShowcase"
  "\020\007\022\'\n#EProfileCustomizationTypeCustomTex"
  "t\020\010\022*\n&EProfileCustomizationTypeFavorite"
  "Group\020\t\022+\n\'EProfileCustomizationTypeReco"
  "mmendation\020\n\022)\n%EProfileCustomizationTyp"
  "eWorkshopItem\020\013\022\'\n#EProfileCustomization"
  "TypeMyWorkshop\020\014\022,\n(EProfileCustomizatio"
  "nTypeArtworkShowcase\020\r\022*\n&EProfileCustom"
  "izationTypeVideoShowcase\020\016\022#\n\037EProfileCu"
  "stomizationTypeGuides\020\017\022%\n!EProfileCusto"
  "mizationTypeMyGuides\020\020\022)\n%EProfileCustom"
  "izationTypeAchievements\020\021\022\'\n#EProfileCus"
  "tomizationTypeGreenlight\020\022\022)\n%EProfileCu"
  "stomizationTypeMyGreenlight\020\023\022#\n\037EProfil"
  "eCustomizationTypeSalien\020\024\0223\n/EProfileCu"
  "stomizationTypeLoyaltyRewardReactions\020\025\022"
  "2\n.EProfileCustomizationTypeSingleArtwor"
  "kShowcase\020\026\0226\n2EProfileCustomizationType"
  "AchievementsCompletionist\020\027\022#\n\037EProfileC"
  "ustomizationTypeReplay\020\030*\300\001\n\033EPublishedF"
  "ileStorageSystem\022&\n\"EPublishedFileStorag"
  "eSystemInvalid\020\000\022*\n&EPublishedFileStorag"
  "eSystemLegacyCloud\020\001\022$\n EPublishedFileSt"
  "orageSystemDepot\020\002\022\'\n#EPublishedFileStor"
  "ageSystemUGCCloud\020\003*\221\001\n\031ECloudStoragePer"
  "sistState\022&\n\"ECloudStoragePersistStatePe"
  "rsisted\020\000\022&\n\"ECloudStoragePersistStateFo"
  "rgotten\020\001\022$\n ECloudStoragePersistStateDe"
  "leted\020\002*\334\001\n\022ESDCardFormatStage\022\036\n\032ESDCar"
  "dFormatStage_Invalid\020\000\022\037\n\033ESDCardFormatS"
  "tage_Starting\020\001\022\036\n\032ESDCardFormatStage_Te"
  "sting\020\002\022\037\n\033ESDCardFormatStage_Rescuing\020\003"
  "\022!\n\035ESDCardFormatStage_Formatting\020\004\022!\n\035E"
  "SDCardFormatStage_Finalizing\020\005*\207\002\n\023EStor"
  "ageFormatStage\022\037\n\033EStorageFormatStage_In"
  "valid\020\000\022\"\n\036EStorageFormatStage_NotRunnin"
  "g\020\001\022 \n\034EStorageFormatStage_Starting\020\002\022\037\n"
  "\033EStorageFormatStage_Testing\020\003\022 \n\034EStora"
  "geFormatStage_Rescuing\020\004\022\"\n\036EStorageForm"
  "atStage_Formatting\020\005\022\"\n\036EStorageFormatSt"
  "age_Finalizing\020\006*~\n\025ESystemFanControlMod"
  "e\022 \n\034SystemFanControlMode_Invalid\020\000\022!\n\035S"
  "ystemFanControlMode_Disabled\020\001\022 \n\034System"
  "FanControlMode_Default\020\002*{\n\024EStartupMovi"
  "eVariant\022 \n\034EStartupMovieVariant_Invalid"
  "\020\000\022 \n\034EStartupMovieVariant_Default\020\001\022\037\n\033"
  "EStartupMovieVariant_Orange\020\002*\205\001\n\023EColor"
  "GamutLabelSet\022\036\n\032ColorGamutLabelSet_Defa"
  "ult\020\000\022\"\n\036ColorGamutLabelSet_sRGB_Native\020"
  "\001\022*\n&ColorGamutLabelSet_Native_sRGB_Boos"
  "ted\020\002*w\n\024EWindowStackingOrder\022 \n\034EWindow"
  "StackingOrder_Invalid\020\000\022\034\n\030EWindowStacki"
  "ngOrder_Top\020\001\022\037\n\033EWindowStackingOrder_Bo"
  "ttom\020\002*\250\003\n\024EBluetoothDeviceType\022\037\n\033Bluet"
  "oothDeviceType_Invalid\020\000\022\037\n\033BluetoothDev"
  "iceType_Unknown\020\001\022\035\n\031BluetoothDeviceType"
  "_Phone\020\002\022 \n\034BluetoothDeviceType_Computer"
  "\020\003\022\037\n\033BluetoothDeviceType_Headset\020\004\022\"\n\036B"
  "luetoothDeviceType_Headphones\020\005\022 \n\034Bluet"
  "oothDeviceType_Speakers\020\006\022\"\n\036BluetoothDe"
  "viceType_OtherAudio\020\007\022\035\n\031BluetoothDevice"
  "Type_Mouse\020\010\022 \n\034BluetoothDeviceType_Joys"
  "tick\020\t\022\037\n\033BluetoothDeviceType_Gamepad\020\n\022"
  " \n\034BluetoothDeviceType_Keyboard\020\013*z\n\025ESy"
  "stemAudioDirection\022 \n\034SystemAudioDirecti"
  "on_Invalid\020\000\022\036\n\032SystemAudioDirection_Inp"
  "ut\020\001\022\037\n\033SystemAudioDirection_Output\020\002*\335\002"
  "\n\023ESystemAudioChannel\022\036\n\032SystemAudioChan"
  "nel_Invalid\020\000\022!\n\035SystemAudioChannel_Aggr"
  "egated\020\001\022 \n\034SystemAudioChannel_FrontLeft"
  "\020\002\022!\n\035SystemAudioChannel_FrontRight\020\003\022\032\n"
  "\026SystemAudioChannel_LFE\020\004\022\037\n\033SystemAudio"
  "Channel_BackLeft\020\005\022 \n\034SystemAudioChannel"
  "_BackRight\020\006\022\"\n\036SystemAudioChannel_Front"
  "Center\020\007\022\036\n\032SystemAudioChannel_Unknown\020\010"
  "\022\033\n\027SystemAudioChannel_Mono\020\t*\277\001\n\024ESyste"
  "mAudioPortType\022\037\n\033SystemAudioPortType_In"
  "valid\020\000\022\037\n\033SystemAudioPortType_Unknown\020\001"
  "\022 \n\034SystemAudioPortType_Audio32f\020\002\022\036\n\032Sy"
  "stemAudioPortType_Midi8b\020\003\022#\n\037SystemAudi"
  "oPortType_Video32RGBA\020\004*\212\001\n\031ESystemAudio"
  "PortDirection\022$\n SystemAudioPortDirectio"
  "n_Invalid\020\000\022\"\n\036SystemAudioPortDirection_"
  "Input\020\001\022#\n\037SystemAudioPortDirection_Outp"
  "ut\020\002*}\n\023ESystemServiceState\022#\n\037ESystemSe"
  "rviceState_Unavailable\020\000\022 \n\034ESystemServi"
  "ceState_Disabled\020\001\022\037\n\033ESystemServiceStat"
  "e_Enabled\020\002*\327\001\n\031EGraphicsPerfOverlayLeve"
  "l\022$\n EGraphicsPerfOverlayLevel_Hidden\020\000\022"
  "#\n\037EGraphicsPerfOverlayLevel_Basic\020\001\022$\n "
  "EGraphicsPerfOverlayLevel_Medium\020\002\022\"\n\036EG"
  "raphicsPerfOverlayLevel_Full\020\003\022%\n!EGraph"
  "icsPerfOverlayLevel_Minimal\020\004*\331\001\n\024EGPUPe"
  "rformanceLevel\022 \n\034EGPUPerformanceLevel_I"
  "nvalid\020\000\022\035\n\031EGPUPerformanceLevel_Auto\020\001\022"
  "\037\n\033EGPUPerformanceLevel_Manual\020\002\022\034\n\030EGPU"
  "PerformanceLevel_Low\020\003\022\035\n\031EGPUPerformanc"
  "eLevel_High\020\004\022\"\n\036EGPUPerformanceLevel_Pr"
  "ofiling\020\005*\257\001\n\016EScalingFilter\022\032\n\026EScaling"
  "Filter_Invalid\020\000\022\026\n\022EScalingFilter_FSR\020\001"
  "\022\032\n\026EScalingFilter_Nearest\020\002\022\032\n\026EScaling"
  "Filter_Integer\020\003\022\031\n\025EScalingFilter_Linea"
  "r\020\004\022\026\n\022EScalingFilter_NIS\020\005*\261\001\n\023ESplitSc"
  "alingFilter\022\037\n\033ESplitScalingFilter_Inval"
  "id\020\000\022\036\n\032ESplitScalingFilter_Linear\020\001\022\037\n\033"
  "ESplitScalingFilter_Nearest\020\002\022\033\n\027ESplitS"
  "calingFilter_FSR\020\003\022\033\n\027ESplitScalingFilte"
  "r_NIS\020\004*\321\001\n\023ESplitScalingScaler\022\037\n\033ESpli"
  "tScalingScaler_Invalid\020\000\022\034\n\030ESplitScalin"
  "gScaler_Auto\020\001\022\037\n\033ESplitScalingScaler_In"
  "teger\020\002\022\033\n\027ESplitScalingScaler_Fit\020\003\022\034\n\030"
  "ESplitScalingScaler_Fill\020\004\022\037\n\033ESplitScal"
  "ingScaler_Stretch\020\005*w\n\022EGamescopeBlurMod"
  "e\022\037\n\033EGamescopeBlurMode_Disabled\020\000\022!\n\035EG"
  "amescopeBlurMode_IfOccluded\020\001\022\035\n\031EGamesc"
  "opeBlurMode_Always\020\002*\232\001\n\nESLSHelper\022\026\n\022E"
  "SLSHelper_Invalid\020\000\022\027\n\023ESLSHelper_Minidu"
  "mp\020\001\022\024\n\020ESLSHelper_Kdump\020\002\022\026\n\022ESLSHelper"
  "_Journal\020\003\022\022\n\016ESLSHelper_Gpu\020\004\022\031\n\025ESLSHe"
  "lper_SystemInfo\020\005*\273\001\n\021EHDRVisualization\022"
  "\032\n\026EHDRVisualization_None\020\000\022\035\n\031EHDRVisua"
  "lization_Heatmap\020\001\022\036\n\032EHDRVisualization_"
  "Analysis\020\002\022%\n!EHDRVisualization_HeatmapE"
  "xtended\020\003\022$\n EHDRVisualization_HeatmapCl"
  "assic\020\004*{\n\023EHDRToneMapOperator\022\037\n\033EHDRTo"
  "neMapOperator_Invalid\020\000\022!\n\035EHDRToneMapOp"
  "erator_Uncharted\020\001\022 \n\034EHDRToneMapOperato"
  "r_Reinhard\020\002*t\n\014ECPUGovernor\022\030\n\024ECPUGove"
  "rnor_Invalid\020\000\022\025\n\021ECPUGovernor_Perf\020\001\022\032\n"
  "\026ECPUGovernor_Powersave\020\002\022\027\n\023ECPUGoverno"
  "r_Manual\020\003*\322\001\n\014EUpdaterType\022\030\n\024EUpdaterT"
  "ype_Invalid\020\000\022\027\n\023EUpdaterType_Client\020\001\022\023"
  "\n\017EUpdaterType_OS\020\002\022\025\n\021EUpdaterType_BIOS"
  "\020\003\022\033\n\027EUpdaterType_Aggregated\020\004\022\026\n\022EUpda"
  "terType_Test1\020\005\022\026\n\022EUpdaterType_Test2\020\006\022"
  "\026\n\022EUpdaterType_Dummy\020\007*\207\002\n\rEUpdaterStat"
  "e\022\031\n\025EUpdaterState_Invalid\020\000\022\032\n\026EUpdater"
  "State_UpToDate\020\002\022\032\n\026EUpdaterState_Checki"
  "ng\020\003\022\033\n\027EUpdaterState_Available\020\004\022\032\n\026EUp"
  "daterState_Applying\020\005\022&\n\"EUpdaterState_C"
  "lientRestartPending\020\006\022&\n\"EUpdaterState_S"
  "ystemRestartPending\020\007\022\032\n\026EUpdaterState_R"
  "ollBack\020\010*\327\001\n\030EStorageBlockContentType\022$"
  "\n EStorageBlockContentType_Invalid\020\000\022$\n "
  "EStorageBlockContentType_Unknown\020\001\022\'\n#ES"
  "torageBlockContentType_FileSystem\020\002\022#\n\037E"
  "StorageBlockContentType_Crypto\020\003\022!\n\035ESto"
  "rageBlockContentType_Raid\020\004*\273\001\n\033EStorage"
  "BlockFileSystemType\022\'\n#EStorageBlockFile"
  "SystemType_Invalid\020\000\022\'\n#EStorageBlockFil"
  "eSystemType_Unknown\020\001\022$\n EStorageBlockFi"
  "leSystemType_VFat\020\002\022$\n EStorageBlockFile"
  "SystemType_Ext4\020\003*\306\001\n\026EStorageDriveMedia"
  "Type\022\"\n\036EStorageDriveMediaType_Invalid\020\000"
  "\022\"\n\036EStorageDriveMediaType_Unknown\020\001\022\036\n\032"
  "EStorageDriveMediaType_HDD\020\002\022\036\n\032EStorage"
  "DriveMediaType_SSD\020\003\022$\n EStorageDriveMed"
  "iaType_Removable\020\004*\255\001\n\037ESystemDisplayCom"
  "patibilityMode\022+\n\'ESystemDisplayCompatib"
  "ilityMode_Invalid\020\000\022(\n$ESystemDisplayCom"
  "patibilityMode_None\020\001\0223\n/ESystemDisplayC"
  "ompatibilityMode_MinimalBandwith\020\002*\333\001\n\037E"
  "SteamDeckCompatibilityCategory\022+\n\'ESteam"
  "DeckCompatibilityCategory_Unknown\020\000\022/\n+E"
  "SteamDeckCompatibilityCategory_Unsupport"
  "ed\020\001\022,\n(ESteamDeckCompatibilityCategory_"
  "Playable\020\002\022,\n(ESteamDeckCompatibilityCat"
  "egory_Verified\020\003*\306\002\n(ESteamDeckCompatibi"
  "lityResultDisplayType\0226\n2ESteamDeckCompa"
  "tibilityResultDisplayType_Invisible\020\000\022:\n"
  "6ESteamDeckCompatibilityResultDisplayTyp"
  "e_Informational\020\001\0228\n4ESteamDeckCompatibi"
  "lityResultDisplayType_Unsupported\020\002\0225\n1E"
  "SteamDeckCompatibilityResultDisplayType_"
  "Playable\020\003\0225\n1ESteamDeckCompatibilityRes"
  "ultDisplayType_Verified\020\004*\220\002\n!ESteamDeck"
  "CompatibilityTestResult\022-\n)ESteamDeckCom"
  "patibilityTestResult_Invalid\020\000\0223\n/ESteam"
  "DeckCompatibilityTestResult_NotApplicabl"
  "e\020\001\022*\n&ESteamDeckCompatibilityTestResult"
  "_Pass\020\002\022*\n&ESteamDeckCompatibilityTestRe"
  "sult_Fail\020\003\022/\n+ESteamDeckCompatibilityTe"
  "stResult_FailMinor\020\004*o\n\010EACState\022\024\n\020EACS"
  "tate_Unknown\020\000\022\031\n\025EACState_Disconnected\020"
  "\001\022\026\n\022EACState_Connected\020\002\022\032\n\026EACState_Co"
  "nnectedSlow\020\003*}\n\rEBatteryState\022\031\n\025EBatte"
  "ryState_Unknown\020\000\022\035\n\031EBatteryState_Disch"
  "arging\020\001\022\032\n\026EBatteryState_Charging\020\002\022\026\n\022"
  "EBatteryState_Full\020\003*\354\001\n\tEOSBranch\022\025\n\021EO"
  "SBranch_Unknown\020\000\022\025\n\021EOSBranch_Release\020\001"
  "\022\036\n\032EOSBranch_ReleaseCandidate\020\002\022\022\n\016EOSB"
  "ranch_Beta\020\003\022\033\n\027EOSBranch_BetaCandidate\020"
  "\004\022\025\n\021EOSBranch_Preview\020\005\022\036\n\032EOSBranch_Pr"
  "eviewCandidate\020\006\022\022\n\016EOSBranch_Main\020\007\022\025\n\021"
  "EOSBranch_Staging\020\010*\271\005\n\023ECommunityItemCl"
  "ass\022\037\n\033ECommunityItemClass_Invalid\020\000\022\035\n\031"
  "ECommunityItemClass_Badge\020\001\022 \n\034ECommunit"
  "yItemClass_GameCard\020\002\022)\n%ECommunityItemC"
  "lass_ProfileBackground\020\003\022 \n\034ECommunityIt"
  "emClass_Emoticon\020\004\022#\n\037ECommunityItemClas"
  "s_BoosterPack\020\005\022\"\n\036ECommunityItemClass_C"
  "onsumable\020\006\022\037\n\033ECommunityItemClass_GameG"
  "oo\020\007\022\'\n#ECommunityItemClass_ProfileModif"
  "ier\020\010\022\035\n\031ECommunityItemClass_Scene\020\t\022\"\n\036"
  "ECommunityItemClass_SalienItem\020\n\022\037\n\033ECom"
  "munityItemClass_Sticker\020\013\022\"\n\036ECommunityI"
  "temClass_ChatEffect\020\014\022-\n)ECommunityItemC"
  "lass_MiniProfileBackground\020\r\022#\n\037ECommuni"
  "tyItemClass_AvatarFrame\020\016\022&\n\"ECommunityI"
  "temClass_AnimatedAvatar\020\017\022-\n)ECommunityI"
  "temClass_SteamDeckKeyboardSkin\020\020\022-\n)ECom"
  "munityItemClass_SteamDeckStartupMovie\020\021*"
  "\311\001\n\037ESteamDeckCompatibilityFeedback\022\'\n#E"
  "SteamDeckCompatibilityFeedbacUnset\020\000\022\'\n#"
  "ESteamDeckCompatibilityFeedbacAgree\020\001\022*\n"
  "&ESteamDeckCompatibilityFeedbacDisagree\020"
  "\002\022(\n$ESteamDeckCompatibilityFeedbacIgnor"
  "e\020\003*\231\001\n\036EProvideDeckFeedbackPreference\022("
  "\n$EProvideDeckFeedbackPreference_Unset\020\000"
  "\022&\n\"EProvideDeckFeedbackPreference_Yes\020\001"
  "\022%\n!EProvideDeckFeedbackPreference_No\020\002*"
  "\225\003\n\rETouchGesture\022\025\n\021ETouchGestureNone\020\000"
  "\022\026\n\022ETouchGestureTouch\020\001\022\024\n\020ETouchGestur"
  "eTap\020\002\022\032\n\026ETouchGestureDoubleTap\020\003\022\033\n\027ET"
  "ouchGestureShortPress\020\004\022\032\n\026ETouchGesture"
  "LongPress\020\005\022\030\n\024ETouchGestureLongTap\020\006\022\035\n"
  "\031ETouchGestureTwoFingerTap\020\007\022\035\n\031ETouchGe"
  "stureTapCancelled\020\010\022\033\n\027ETouchGesturePinc"
  "hBegin\020\t\022\034\n\030ETouchGesturePinchUpdate\020\n\022\031"
  "\n\025ETouchGesturePinchEnd\020\013\022\033\n\027ETouchGestu"
  "reFlingStart\020\014\022\037\n\033ETouchGestureFlingCanc"
  "elled\020\r*\206\001\n\023ESessionPersistence\022(\n\033ESess"
  "ionPersistence_Invalid\020\377\377\377\377\377\377\377\377\377\001\022!\n\035ESe"
  "ssionPersistence_Ephemeral\020\000\022\"\n\036ESession"
  "Persistence_Persistent\020\001*\321\001\n\032ENewSteamAn"
  "nouncementState\022&\n\"ENewSteamAnnouncement"
  "State_Invalid\020\000\022&\n\"ENewSteamAnnouncement"
  "State_AllRead\020\001\022.\n*ENewSteamAnnouncement"
  "State_NewAnnouncement\020\002\0223\n/ENewSteamAnno"
  "uncementState_FeaturedAnnouncement\020\003*\354\001\n"
  "\nEForumType\022\026\n\022EForumType_Invalid\020\000\022\026\n\022E"
  "ForumType_General\020\001\022\034\n\030EForumType_Report"
  "edPosts\020\002\022\027\n\023EForumType_Workshop\020\003\022\034\n\030EF"
  "orumType_PublishedFile\020\004\022\026\n\022EForumType_T"
  "rading\020\005\022\027\n\023EForumType_PlayTest\020\006\022\024\n\020EFo"
  "rumType_Event\020\007\022\022\n\016EForumType_Max\020\010*\337\006\n\022"
  "ECommentThreadType\022\035\n\031ECommentThreadType"
  "Invalid\020\000\022+\n\'ECommentThreadTypeScreensho"
  "t_Deprecated\020\001\022/\n+ECommentThreadTypeWork"
  "shopAccount_Developer\020\002\022,\n(ECommentThrea"
  "dTypeWorkshopAccount_Public\020\003\022-\n)ECommen"
  "tThreadTypePublishedFile_Developer\020\004\022*\n&"
  "ECommentThreadTypePublishedFile_Public\020\005"
  "\022\032\n\026ECommentThreadTypeTest\020\006\022 \n\034EComment"
  "ThreadTypeForumTopic\020\007\022$\n ECommentThread"
  "TypeRecommendation\020\010\022&\n\"ECommentThreadTy"
  "peVideo_Deprecated\020\t\022\035\n\031ECommentThreadTy"
  "peProfile\020\n\022\036\n\032ECommentThreadTypeNewsPos"
  "t\020\013\022\032\n\026ECommentThreadTypeClan\020\014\022&\n\"EComm"
  "entThreadTypeClanAnnouncement\020\r\022\037\n\033EComm"
  "entThreadTypeClanEvent\020\016\022)\n%ECommentThre"
  "adTypeUserStatusPublished\020\017\022)\n%ECommentT"
  "hreadTypeUserReceivedNewGame\020\020\0220\n,EComme"
  "ntThreadTypePublishedFile_Announcement\020\021"
  "\022&\n\"ECommentThreadTypeModeratorMessage\020\022"
  "\022$\n ECommentThreadTypeClanCuratedApp\020\023\022\""
  "\n\036ECommentThreadTypeQAndASession\020\024\022\031\n\025EC"
  "ommentThreadTypeMax\020\025*\315\001\n\024EBroadcastPerm"
  "ission\022 \n\034EBroadcastPermissionDisabled\020\000"
  "\022&\n\"EBroadcastPermissionFriendsApprove\020\001"
  "\022&\n\"EBroadcastPermissionFriendsAllowed\020\002"
  "\022\036\n\032EBroadcastPermissionPublic\020\003\022#\n\037EBro"
  "adcastPermissionSubscribers\020\004*b\n\030EBroadc"
  "astEncoderSetting\022 \n\034EBroadcastEncoderBe"
  "stQuality\020\000\022$\n EBroadcastEncoderBestPerf"
  "ormance\020\001*s\n\024ECloudGamingPlatform\022\034\n\030ECl"
  "oudGamingPlatformNone\020\000\022\035\n\031ECloudGamingP"
  "latformValve\020\001\022\036\n\032ECloudGamingPlatformNV"
  "IDIA\020\002*\265\001\n\030ECompromiseDetectionType\022!\n\035E"
  "CompromiseDetectionType_None\020\000\022\'\n#ECompr"
  "omiseDetectionType_TradeEvent\020\001\022(\n$EComp"
  "romiseDetectionType_ApiCallRate\020\002\022#\n\037ECo"
  "mpromiseDetectionType_Manual\020\003*\316\001\n\032EAsyn"
  "cGameSessionUserState\022.\n!EAsyncGameSessi"
  "onUserStateUnknown\020\377\377\377\377\377\377\377\377\377\001\022.\n*EAsyncG"
  "ameSessionUserStateWaitingForOthers\020\000\022,\n"
  "(EAsyncGameSessionUserStateReadyForActio"
  "n\020\001\022\"\n\036EAsyncGameSessionUserStateDone\020\002*"
  "\276\001\n\037EAsyncGameSessionUserVisibility\0229\n5E"
  "AsyncGameSessionUserVisibilityEnvelopeAn"
  "dSessionList\020\000\0222\n.EAsyncGameSessionUserV"
  "isibilitySessionListOnly\020\001\022,\n(EAsyncGame"
  "SessionUserVisibilityDismissed\020\002*\312\001\n\022EGa"
  "meRecordingType\022\036\n\032EGameRecordingType_Un"
  "known\020\000\022#\n\037EGameRecordingType_NotRecordi"
  "ng\020\001\022&\n\"EGameRecordingType_ManualRecordi"
  "ng\020\002\022*\n&EGameRecordingType_BackgroundRec"
  "ording\020\003\022\033\n\027EGameRecordingType_Clip\020\004*\302\003"
  "\n\rEProtoAppType\022\023\n\017EAppTypeInvalid\020\000\022\020\n\014"
  "EAppTypeGame\020\001\022\027\n\023EAppTypeApplication\020\002\022"
  "\020\n\014EAppTypeTool\020\004\022\020\n\014EAppTypeDemo\020\010\022\025\n\021E"
  "AppTypeDeprected\020\020\022\017\n\013EAppTypeDLC\020 \022\021\n\rE"
  "AppTypeGuide\020@\022\023\n\016EAppTypeDriver\020\200\001\022\023\n\016E"
  "AppTypeConfig\020\200\002\022\025\n\020EAppTypeHardware\020\200\004\022"
  "\026\n\021EAppTypeFranchise\020\200\010\022\022\n\rEAppTypeVideo"
  "\020\200\020\022\023\n\016EAppTypePlugin\020\200 \022\027\n\022EAppTypeMusi"
  "cAlbum\020\200@\022\024\n\016EAppTypeSeries\020\200\200\001\022\023\n\rEAppT"
  "ypeComic\020\200\200\002\022\022\n\014EAppTypeBeta\020\200\200\004\022\030\n\020EApp"
  "TypeShortcut\020\200\200\200\200\004\022\036\n\021EAppTypeDepotOnly\020"
  "\200\200\200\200\370\377\377\377\377\001*\352\001\n EWindowsUpdateInstallatio"
  "nImpact\0225\n(EWindowsUpdateInstallationImp"
  "act_Unknown\020\377\377\377\377\377\377\377\377\377\001\022+\n\'EWindowsUpdate"
  "InstallationImpact_Normal\020\000\022*\n&EWindowsU"
  "pdateInstallationImpact_Minor\020\001\0226\n2EWind"
  "owsUpdateInstallationImpact_ExclusiveHan"
  "dling\020\002*\352\001\n\034EWindowsUpdateRebootBehavior"
  "\0221\n$EWindowsUpdateRebootBehavior_Unknown"
  "\020\377\377\377\377\377\377\377\377\377\001\0221\n-EWindowsUpdateRebootBehav"
  "ior_NeverNeedsReboot\020\000\0222\n.EWindowsUpdate"
  "RebootBehavior_AlwaysNeedsReboot\020\001\0220\n,EW"
  "indowsUpdateRebootBehavior_MightNeedRebo"
  "ot\020\002*\362\001\n\026EExternalSaleEventType\022\"\n\036EExte"
  "rnalSaleEventType_Unknown\020\000\022$\n EExternal"
  "SaleEventType_Publisher\020\001\022#\n\037EExternalSa"
  "leEventType_Showcase\020\002\022!\n\035EExternalSaleE"
  "ventType_Region\020\003\022 \n\034EExternalSaleEventT"
  "ype_Theme\020\004\022$\n EExternalSaleEventType_Fr"
  "anchise\020\005B#H\001\200\001\001\252\002\027OpenSteamworks.Protob"
  "uf\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, 15926, descriptor_table_protodef_enums_2eproto, "enums.proto", 
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  file_level_metadata_enums_2eproto, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_enums_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return descriptor_table_enums_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_enums_2eproto(&descriptor_table_enums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool EPublishedFileQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool EPublishedFileInappropriateProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[2];
}
bool EPublishedFileInappropriateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPersonaStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[3];
}
bool EPersonaStateFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentCheckProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[4];
}
bool EContentCheckProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[5];
}
bool EProfileCustomizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileStorageSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[6];
}
bool EPublishedFileStorageSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudStoragePersistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[7];
}
bool ECloudStoragePersistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESDCardFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[8];
}
bool ESDCardFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[9];
}
bool EStorageFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemFanControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[10];
}
bool ESystemFanControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartupMovieVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[11];
}
bool EStartupMovieVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColorGamutLabelSet_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[12];
}
bool EColorGamutLabelSet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowStackingOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[13];
}
bool EWindowStackingOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBluetoothDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[14];
}
bool EBluetoothDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[15];
}
bool ESystemAudioDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[16];
}
bool ESystemAudioChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[17];
}
bool ESystemAudioPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[18];
}
bool ESystemAudioPortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[19];
}
bool ESystemServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGraphicsPerfOverlayLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[20];
}
bool EGraphicsPerfOverlayLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGPUPerformanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[21];
}
bool EGPUPerformanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[22];
}
bool EScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[23];
}
bool ESplitScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingScaler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[24];
}
bool ESplitScalingScaler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGamescopeBlurMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[25];
}
bool EGamescopeBlurMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESLSHelper_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[26];
}
bool ESLSHelper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRVisualization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[27];
}
bool EHDRVisualization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRToneMapOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[28];
}
bool EHDRToneMapOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPUGovernor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[29];
}
bool ECPUGovernor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[30];
}
bool EUpdaterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[31];
}
bool EUpdaterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[32];
}
bool EStorageBlockContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockFileSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[33];
}
bool EStorageBlockFileSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageDriveMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[34];
}
bool EStorageDriveMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemDisplayCompatibilityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[35];
}
bool ESystemDisplayCompatibilityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[36];
}
bool ESteamDeckCompatibilityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityResultDisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[37];
}
bool ESteamDeckCompatibilityResultDisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityTestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[38];
}
bool ESteamDeckCompatibilityTestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EACState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[39];
}
bool EACState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBatteryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[40];
}
bool EBatteryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOSBranch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[41];
}
bool EOSBranch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[42];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityFeedback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[43];
}
bool ESteamDeckCompatibilityFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProvideDeckFeedbackPreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[44];
}
bool EProvideDeckFeedbackPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[45];
}
bool ETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESessionPersistence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[46];
}
bool ESessionPersistence_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENewSteamAnnouncementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[47];
}
bool ENewSteamAnnouncementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EForumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[48];
}
bool EForumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommentThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[49];
}
bool ECommentThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[50];
}
bool EBroadcastPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastEncoderSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[51];
}
bool EBroadcastEncoderSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudGamingPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[52];
}
bool ECloudGamingPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECompromiseDetectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[53];
}
bool ECompromiseDetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[54];
}
bool EAsyncGameSessionUserState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[55];
}
bool EAsyncGameSessionUserVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameRecordingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[56];
}
bool EGameRecordingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoAppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[57];
}
bool EProtoAppType_IsValid(int value) {
  switch (value) {
    case -2147483647 - 1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateInstallationImpact_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[58];
}
bool EWindowsUpdateInstallationImpact_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateRebootBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[59];
}
bool EWindowsUpdateRebootBehavior_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExternalSaleEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[60];
}
bool EExternalSaleEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
