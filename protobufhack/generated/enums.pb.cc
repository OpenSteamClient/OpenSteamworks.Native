// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_enums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[61];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\032 google/protobuf/descripto"
  "r.proto\032\030steammessages_base.proto*\324\t\n\027EP"
  "ublishedFileQueryType\022\'\n#PublishedFileQu"
  "eryType_RankedByVote\020\000\0222\n.PublishedFileQ"
  "ueryType_RankedByPublicationDate\020\001\022@\n<Pu"
  "blishedFileQueryType_AcceptedForGameRank"
  "edByAcceptanceDate\020\002\022(\n$PublishedFileQue"
  "ryType_RankedByTrend\020\003\022D\n@PublishedFileQ"
  "ueryType_FavoritedByFriendsRankedByPubli"
  "cationDate\020\004\022B\n>PublishedFileQueryType_C"
  "reatedByFriendsRankedByPublicationDate\020\005"
  "\0223\n/PublishedFileQueryType_RankedByNumTi"
  "mesReported\020\006\022H\nDPublishedFileQueryType_"
  "CreatedByFollowedUsersRankedByPublicatio"
  "nDate\020\007\022&\n\"PublishedFileQueryType_NotYet"
  "Rated\020\010\022;\n7PublishedFileQueryType_Ranked"
  "ByTotalUniqueSubscriptions\020\t\0220\n,Publishe"
  "dFileQueryType_RankedByTotalVotesAsc\020\n\022*"
  "\n&PublishedFileQueryType_RankedByVotesUp"
  "\020\013\022-\n)PublishedFileQueryType_RankedByTex"
  "tSearch\020\014\0220\n,PublishedFileQueryType_Rank"
  "edByPlaytimeTrend\020\r\0220\n,PublishedFileQuer"
  "yType_RankedByTotalPlaytime\020\016\0227\n3Publish"
  "edFileQueryType_RankedByAveragePlaytimeT"
  "rend\020\017\022:\n6PublishedFileQueryType_RankedB"
  "yLifetimeAveragePlaytime\020\020\0228\n4PublishedF"
  "ileQueryType_RankedByPlaytimeSessionsTre"
  "nd\020\021\022;\n7PublishedFileQueryType_RankedByL"
  "ifetimePlaytimeSessions\020\022\022=\n9PublishedFi"
  "leQueryType_RankedByInappropriateContent"
  "Rating\020\023\0222\n.PublishedFileQueryType_Ranke"
  "dByBanContentCheck\020\024\0222\n.PublishedFileQue"
  "ryType_RankedByLastUpdatedDate\020\025*\266\001\n#EPu"
  "blishedFileInappropriateProvider\022/\n+EPub"
  "lishedFileInappropriateProvider_Invalid\020"
  "\000\022.\n*EPublishedFileInappropriateProvider"
  "_Google\020\001\022.\n*EPublishedFileInappropriate"
  "Provider_Amazon\020\002*\311\002\n!EPublishedFileInap"
  "propriateResult\0220\n,EPublishedFileInappro"
  "priateResult_NotScanned\020\000\0222\n.EPublishedF"
  "ileInappropriateResult_VeryUnlikely\020\001\022.\n"
  "*EPublishedFileInappropriateResult_Unlik"
  "ely\020\036\022.\n*EPublishedFileInappropriateResu"
  "lt_Possible\0202\022,\n(EPublishedFileInappropr"
  "iateResult_Likely\020K\0220\n,EPublishedFileIna"
  "ppropriateResult_VeryLikely\020d*\235\003\n\021EPerso"
  "naStateFlag\022%\n!EPersonaStateFlag_HasRich"
  "Presence\020\001\022$\n EPersonaStateFlag_InJoinab"
  "leGame\020\002\022\034\n\030EPersonaStateFlag_Golden\020\004\022("
  "\n$EPersonaStateFlag_RemotePlayTogether\020\010"
  "\022$\n\037EPersonaStateFlag_ClientTypeWeb\020\200\002\022\'"
  "\n\"EPersonaStateFlag_ClientTypeMobile\020\200\004\022"
  "(\n#EPersonaStateFlag_ClientTypeTenfoot\020\200"
  "\010\022#\n\036EPersonaStateFlag_ClientTypeVR\020\200\020\022("
  "\n#EPersonaStateFlag_LaunchTypeGamepad\020\200 "
  "\022+\n&EPersonaStateFlag_LaunchTypeCompatTo"
  "ol\020\200@*\324\001\n\025EContentCheckProvider\022!\n\035ECont"
  "entCheckProvider_Invalid\020\000\022+\n\'EContentCh"
  "eckProvider_Google_DEPRECATED\020\001\022 \n\034ECont"
  "entCheckProvider_Amazon\020\002\022\037\n\033EContentChe"
  "ckProvider_Local\020\003\022(\n$EContentCheckProvi"
  "der_GoogleVertexAI\020\004*\341\010\n\031EProfileCustomi"
  "zationType\022$\n EProfileCustomizationTypeI"
  "nvalid\020\000\0224\n0EProfileCustomizationTypeRar"
  "eAchievementShowcase\020\001\022*\n&EProfileCustom"
  "izationTypeGameCollector\020\002\022)\n%EProfileCu"
  "stomizationTypeItemShowcase\020\003\022*\n&EProfil"
  "eCustomizationTypeTradeShowcase\020\004\022#\n\037EPr"
  "ofileCustomizationTypeBadges\020\005\022)\n%EProfi"
  "leCustomizationTypeFavoriteGame\020\006\022/\n+EPr"
  "ofileCustomizationTypeScreenshotShowcase"
  "\020\007\022\'\n#EProfileCustomizationTypeCustomTex"
  "t\020\010\022*\n&EProfileCustomizationTypeFavorite"
  "Group\020\t\022+\n\'EProfileCustomizationTypeReco"
  "mmendation\020\n\022)\n%EProfileCustomizationTyp"
  "eWorkshopItem\020\013\022\'\n#EProfileCustomization"
  "TypeMyWorkshop\020\014\022,\n(EProfileCustomizatio"
  "nTypeArtworkShowcase\020\r\022*\n&EProfileCustom"
  "izationTypeVideoShowcase\020\016\022#\n\037EProfileCu"
  "stomizationTypeGuides\020\017\022%\n!EProfileCusto"
  "mizationTypeMyGuides\020\020\022)\n%EProfileCustom"
  "izationTypeAchievements\020\021\022\'\n#EProfileCus"
  "tomizationTypeGreenlight\020\022\022)\n%EProfileCu"
  "stomizationTypeMyGreenlight\020\023\022#\n\037EProfil"
  "eCustomizationTypeSalien\020\024\0223\n/EProfileCu"
  "stomizationTypeLoyaltyRewardReactions\020\025\022"
  "2\n.EProfileCustomizationTypeSingleArtwor"
  "kShowcase\020\026\0226\n2EProfileCustomizationType"
  "AchievementsCompletionist\020\027\022#\n\037EProfileC"
  "ustomizationTypeReplay\020\030*\300\001\n\033EPublishedF"
  "ileStorageSystem\022&\n\"EPublishedFileStorag"
  "eSystemInvalid\020\000\022*\n&EPublishedFileStorag"
  "eSystemLegacyCloud\020\001\022$\n EPublishedFileSt"
  "orageSystemDepot\020\002\022\'\n#EPublishedFileStor"
  "ageSystemUGCCloud\020\003*\221\001\n\031ECloudStoragePer"
  "sistState\022&\n\"ECloudStoragePersistStatePe"
  "rsisted\020\000\022&\n\"ECloudStoragePersistStateFo"
  "rgotten\020\001\022$\n ECloudStoragePersistStateDe"
  "leted\020\002*\334\001\n\022ESDCardFormatStage\022\036\n\032ESDCar"
  "dFormatStage_Invalid\020\000\022\037\n\033ESDCardFormatS"
  "tage_Starting\020\001\022\036\n\032ESDCardFormatStage_Te"
  "sting\020\002\022\037\n\033ESDCardFormatStage_Rescuing\020\003"
  "\022!\n\035ESDCardFormatStage_Formatting\020\004\022!\n\035E"
  "SDCardFormatStage_Finalizing\020\005*\207\002\n\023EStor"
  "ageFormatStage\022\037\n\033EStorageFormatStage_In"
  "valid\020\000\022\"\n\036EStorageFormatStage_NotRunnin"
  "g\020\001\022 \n\034EStorageFormatStage_Starting\020\002\022\037\n"
  "\033EStorageFormatStage_Testing\020\003\022 \n\034EStora"
  "geFormatStage_Rescuing\020\004\022\"\n\036EStorageForm"
  "atStage_Formatting\020\005\022\"\n\036EStorageFormatSt"
  "age_Finalizing\020\006*~\n\025ESystemFanControlMod"
  "e\022 \n\034SystemFanControlMode_Invalid\020\000\022!\n\035S"
  "ystemFanControlMode_Disabled\020\001\022 \n\034System"
  "FanControlMode_Default\020\002*{\n\024EStartupMovi"
  "eVariant\022 \n\034EStartupMovieVariant_Invalid"
  "\020\000\022 \n\034EStartupMovieVariant_Default\020\001\022\037\n\033"
  "EStartupMovieVariant_Orange\020\002*\205\001\n\023EColor"
  "GamutLabelSet\022\036\n\032ColorGamutLabelSet_Defa"
  "ult\020\000\022\"\n\036ColorGamutLabelSet_sRGB_Native\020"
  "\001\022*\n&ColorGamutLabelSet_Native_sRGB_Boos"
  "ted\020\002*w\n\024EWindowStackingOrder\022 \n\034EWindow"
  "StackingOrder_Invalid\020\000\022\034\n\030EWindowStacki"
  "ngOrder_Top\020\001\022\037\n\033EWindowStackingOrder_Bo"
  "ttom\020\002*\250\003\n\024EBluetoothDeviceType\022\037\n\033Bluet"
  "oothDeviceType_Invalid\020\000\022\037\n\033BluetoothDev"
  "iceType_Unknown\020\001\022\035\n\031BluetoothDeviceType"
  "_Phone\020\002\022 \n\034BluetoothDeviceType_Computer"
  "\020\003\022\037\n\033BluetoothDeviceType_Headset\020\004\022\"\n\036B"
  "luetoothDeviceType_Headphones\020\005\022 \n\034Bluet"
  "oothDeviceType_Speakers\020\006\022\"\n\036BluetoothDe"
  "viceType_OtherAudio\020\007\022\035\n\031BluetoothDevice"
  "Type_Mouse\020\010\022 \n\034BluetoothDeviceType_Joys"
  "tick\020\t\022\037\n\033BluetoothDeviceType_Gamepad\020\n\022"
  " \n\034BluetoothDeviceType_Keyboard\020\013*z\n\025ESy"
  "stemAudioDirection\022 \n\034SystemAudioDirecti"
  "on_Invalid\020\000\022\036\n\032SystemAudioDirection_Inp"
  "ut\020\001\022\037\n\033SystemAudioDirection_Output\020\002*\335\002"
  "\n\023ESystemAudioChannel\022\036\n\032SystemAudioChan"
  "nel_Invalid\020\000\022!\n\035SystemAudioChannel_Aggr"
  "egated\020\001\022 \n\034SystemAudioChannel_FrontLeft"
  "\020\002\022!\n\035SystemAudioChannel_FrontRight\020\003\022\032\n"
  "\026SystemAudioChannel_LFE\020\004\022\037\n\033SystemAudio"
  "Channel_BackLeft\020\005\022 \n\034SystemAudioChannel"
  "_BackRight\020\006\022\"\n\036SystemAudioChannel_Front"
  "Center\020\007\022\036\n\032SystemAudioChannel_Unknown\020\010"
  "\022\033\n\027SystemAudioChannel_Mono\020\t*\277\001\n\024ESyste"
  "mAudioPortType\022\037\n\033SystemAudioPortType_In"
  "valid\020\000\022\037\n\033SystemAudioPortType_Unknown\020\001"
  "\022 \n\034SystemAudioPortType_Audio32f\020\002\022\036\n\032Sy"
  "stemAudioPortType_Midi8b\020\003\022#\n\037SystemAudi"
  "oPortType_Video32RGBA\020\004*\212\001\n\031ESystemAudio"
  "PortDirection\022$\n SystemAudioPortDirectio"
  "n_Invalid\020\000\022\"\n\036SystemAudioPortDirection_"
  "Input\020\001\022#\n\037SystemAudioPortDirection_Outp"
  "ut\020\002*}\n\023ESystemServiceState\022#\n\037ESystemSe"
  "rviceState_Unavailable\020\000\022 \n\034ESystemServi"
  "ceState_Disabled\020\001\022\037\n\033ESystemServiceStat"
  "e_Enabled\020\002*\327\001\n\031EGraphicsPerfOverlayLeve"
  "l\022$\n EGraphicsPerfOverlayLevel_Hidden\020\000\022"
  "#\n\037EGraphicsPerfOverlayLevel_Basic\020\001\022$\n "
  "EGraphicsPerfOverlayLevel_Medium\020\002\022\"\n\036EG"
  "raphicsPerfOverlayLevel_Full\020\003\022%\n!EGraph"
  "icsPerfOverlayLevel_Minimal\020\004*\331\001\n\024EGPUPe"
  "rformanceLevel\022 \n\034EGPUPerformanceLevel_I"
  "nvalid\020\000\022\035\n\031EGPUPerformanceLevel_Auto\020\001\022"
  "\037\n\033EGPUPerformanceLevel_Manual\020\002\022\034\n\030EGPU"
  "PerformanceLevel_Low\020\003\022\035\n\031EGPUPerformanc"
  "eLevel_High\020\004\022\"\n\036EGPUPerformanceLevel_Pr"
  "ofiling\020\005*\257\001\n\016EScalingFilter\022\032\n\026EScaling"
  "Filter_Invalid\020\000\022\026\n\022EScalingFilter_FSR\020\001"
  "\022\032\n\026EScalingFilter_Nearest\020\002\022\032\n\026EScaling"
  "Filter_Integer\020\003\022\031\n\025EScalingFilter_Linea"
  "r\020\004\022\026\n\022EScalingFilter_NIS\020\005*\261\001\n\023ESplitSc"
  "alingFilter\022\037\n\033ESplitScalingFilter_Inval"
  "id\020\000\022\036\n\032ESplitScalingFilter_Linear\020\001\022\037\n\033"
  "ESplitScalingFilter_Nearest\020\002\022\033\n\027ESplitS"
  "calingFilter_FSR\020\003\022\033\n\027ESplitScalingFilte"
  "r_NIS\020\004*\321\001\n\023ESplitScalingScaler\022\037\n\033ESpli"
  "tScalingScaler_Invalid\020\000\022\034\n\030ESplitScalin"
  "gScaler_Auto\020\001\022\037\n\033ESplitScalingScaler_In"
  "teger\020\002\022\033\n\027ESplitScalingScaler_Fit\020\003\022\034\n\030"
  "ESplitScalingScaler_Fill\020\004\022\037\n\033ESplitScal"
  "ingScaler_Stretch\020\005*w\n\022EGamescopeBlurMod"
  "e\022\037\n\033EGamescopeBlurMode_Disabled\020\000\022!\n\035EG"
  "amescopeBlurMode_IfOccluded\020\001\022\035\n\031EGamesc"
  "opeBlurMode_Always\020\002*\232\001\n\nESLSHelper\022\026\n\022E"
  "SLSHelper_Invalid\020\000\022\027\n\023ESLSHelper_Minidu"
  "mp\020\001\022\024\n\020ESLSHelper_Kdump\020\002\022\026\n\022ESLSHelper"
  "_Journal\020\003\022\022\n\016ESLSHelper_Gpu\020\004\022\031\n\025ESLSHe"
  "lper_SystemInfo\020\005*\273\001\n\021EHDRVisualization\022"
  "\032\n\026EHDRVisualization_None\020\000\022\035\n\031EHDRVisua"
  "lization_Heatmap\020\001\022\036\n\032EHDRVisualization_"
  "Analysis\020\002\022%\n!EHDRVisualization_HeatmapE"
  "xtended\020\003\022$\n EHDRVisualization_HeatmapCl"
  "assic\020\004*{\n\023EHDRToneMapOperator\022\037\n\033EHDRTo"
  "neMapOperator_Invalid\020\000\022!\n\035EHDRToneMapOp"
  "erator_Uncharted\020\001\022 \n\034EHDRToneMapOperato"
  "r_Reinhard\020\002*t\n\014ECPUGovernor\022\030\n\024ECPUGove"
  "rnor_Invalid\020\000\022\025\n\021ECPUGovernor_Perf\020\001\022\032\n"
  "\026ECPUGovernor_Powersave\020\002\022\027\n\023ECPUGoverno"
  "r_Manual\020\003*\322\001\n\014EUpdaterType\022\030\n\024EUpdaterT"
  "ype_Invalid\020\000\022\027\n\023EUpdaterType_Client\020\001\022\023"
  "\n\017EUpdaterType_OS\020\002\022\025\n\021EUpdaterType_BIOS"
  "\020\003\022\033\n\027EUpdaterType_Aggregated\020\004\022\026\n\022EUpda"
  "terType_Test1\020\005\022\026\n\022EUpdaterType_Test2\020\006\022"
  "\026\n\022EUpdaterType_Dummy\020\007*\353\001\n\rEUpdaterStat"
  "e\022\031\n\025EUpdaterState_Invalid\020\000\022\032\n\026EUpdater"
  "State_UpToDate\020\002\022\032\n\026EUpdaterState_Checki"
  "ng\020\003\022\033\n\027EUpdaterState_Available\020\004\022\032\n\026EUp"
  "daterState_Applying\020\005\022&\n\"EUpdaterState_C"
  "lientRestartPending\020\006\022&\n\"EUpdaterState_S"
  "ystemRestartPending\020\007*\327\001\n\030EStorageBlockC"
  "ontentType\022$\n EStorageBlockContentType_I"
  "nvalid\020\000\022$\n EStorageBlockContentType_Unk"
  "nown\020\001\022\'\n#EStorageBlockContentType_FileS"
  "ystem\020\002\022#\n\037EStorageBlockContentType_Cryp"
  "to\020\003\022!\n\035EStorageBlockContentType_Raid\020\004*"
  "\273\001\n\033EStorageBlockFileSystemType\022\'\n#EStor"
  "ageBlockFileSystemType_Invalid\020\000\022\'\n#ESto"
  "rageBlockFileSystemType_Unknown\020\001\022$\n ESt"
  "orageBlockFileSystemType_VFat\020\002\022$\n EStor"
  "ageBlockFileSystemType_Ext4\020\003*\306\001\n\026EStora"
  "geDriveMediaType\022\"\n\036EStorageDriveMediaTy"
  "pe_Invalid\020\000\022\"\n\036EStorageDriveMediaType_U"
  "nknown\020\001\022\036\n\032EStorageDriveMediaType_HDD\020\002"
  "\022\036\n\032EStorageDriveMediaType_SSD\020\003\022$\n ESto"
  "rageDriveMediaType_Removable\020\004*\255\001\n\037ESyst"
  "emDisplayCompatibilityMode\022+\n\'ESystemDis"
  "playCompatibilityMode_Invalid\020\000\022(\n$ESyst"
  "emDisplayCompatibilityMode_None\020\001\0223\n/ESy"
  "stemDisplayCompatibilityMode_MinimalBand"
  "with\020\002*\333\001\n\037ESteamDeckCompatibilityCatego"
  "ry\022+\n\'ESteamDeckCompatibilityCategory_Un"
  "known\020\000\022/\n+ESteamDeckCompatibilityCatego"
  "ry_Unsupported\020\001\022,\n(ESteamDeckCompatibil"
  "ityCategory_Playable\020\002\022,\n(ESteamDeckComp"
  "atibilityCategory_Verified\020\003*\306\002\n(ESteamD"
  "eckCompatibilityResultDisplayType\0226\n2ESt"
  "eamDeckCompatibilityResultDisplayType_In"
  "visible\020\000\022:\n6ESteamDeckCompatibilityResu"
  "ltDisplayType_Informational\020\001\0228\n4ESteamD"
  "eckCompatibilityResultDisplayType_Unsupp"
  "orted\020\002\0225\n1ESteamDeckCompatibilityResult"
  "DisplayType_Playable\020\003\0225\n1ESteamDeckComp"
  "atibilityResultDisplayType_Verified\020\004*\220\002"
  "\n!ESteamDeckCompatibilityTestResult\022-\n)E"
  "SteamDeckCompatibilityTestResult_Invalid"
  "\020\000\0223\n/ESteamDeckCompatibilityTestResult_"
  "NotApplicable\020\001\022*\n&ESteamDeckCompatibili"
  "tyTestResult_Pass\020\002\022*\n&ESteamDeckCompati"
  "bilityTestResult_Fail\020\003\022/\n+ESteamDeckCom"
  "patibilityTestResult_FailMinor\020\004*o\n\010EACS"
  "tate\022\024\n\020EACState_Unknown\020\000\022\031\n\025EACState_D"
  "isconnected\020\001\022\026\n\022EACState_Connected\020\002\022\032\n"
  "\026EACState_ConnectedSlow\020\003*}\n\rEBatterySta"
  "te\022\031\n\025EBatteryState_Unknown\020\000\022\035\n\031EBatter"
  "yState_Discharging\020\001\022\032\n\026EBatteryState_Ch"
  "arging\020\002\022\026\n\022EBatteryState_Full\020\003*\354\001\n\tEOS"
  "Branch\022\025\n\021EOSBranch_Unknown\020\000\022\025\n\021EOSBran"
  "ch_Release\020\001\022\036\n\032EOSBranch_ReleaseCandida"
  "te\020\002\022\022\n\016EOSBranch_Beta\020\003\022\033\n\027EOSBranch_Be"
  "taCandidate\020\004\022\025\n\021EOSBranch_Preview\020\005\022\036\n\032"
  "EOSBranch_PreviewCandidate\020\006\022\022\n\016EOSBranc"
  "h_Main\020\007\022\025\n\021EOSBranch_Staging\020\010*\271\005\n\023ECom"
  "munityItemClass\022\037\n\033ECommunityItemClass_I"
  "nvalid\020\000\022\035\n\031ECommunityItemClass_Badge\020\001\022"
  " \n\034ECommunityItemClass_GameCard\020\002\022)\n%ECo"
  "mmunityItemClass_ProfileBackground\020\003\022 \n\034"
  "ECommunityItemClass_Emoticon\020\004\022#\n\037ECommu"
  "nityItemClass_BoosterPack\020\005\022\"\n\036ECommunit"
  "yItemClass_Consumable\020\006\022\037\n\033ECommunityIte"
  "mClass_GameGoo\020\007\022\'\n#ECommunityItemClass_"
  "ProfileModifier\020\010\022\035\n\031ECommunityItemClass"
  "_Scene\020\t\022\"\n\036ECommunityItemClass_SalienIt"
  "em\020\n\022\037\n\033ECommunityItemClass_Sticker\020\013\022\"\n"
  "\036ECommunityItemClass_ChatEffect\020\014\022-\n)ECo"
  "mmunityItemClass_MiniProfileBackground\020\r"
  "\022#\n\037ECommunityItemClass_AvatarFrame\020\016\022&\n"
  "\"ECommunityItemClass_AnimatedAvatar\020\017\022-\n"
  ")ECommunityItemClass_SteamDeckKeyboardSk"
  "in\020\020\022-\n)ECommunityItemClass_SteamDeckSta"
  "rtupMovie\020\021*\311\001\n\037ESteamDeckCompatibilityF"
  "eedback\022\'\n#ESteamDeckCompatibilityFeedba"
  "cUnset\020\000\022\'\n#ESteamDeckCompatibilityFeedb"
  "acAgree\020\001\022*\n&ESteamDeckCompatibilityFeed"
  "bacDisagree\020\002\022(\n$ESteamDeckCompatibility"
  "FeedbacIgnore\020\003*\231\001\n\036EProvideDeckFeedback"
  "Preference\022(\n$EProvideDeckFeedbackPrefer"
  "ence_Unset\020\000\022&\n\"EProvideDeckFeedbackPref"
  "erence_Yes\020\001\022%\n!EProvideDeckFeedbackPref"
  "erence_No\020\002*\225\003\n\rETouchGesture\022\025\n\021ETouchG"
  "estureNone\020\000\022\026\n\022ETouchGestureTouch\020\001\022\024\n\020"
  "ETouchGestureTap\020\002\022\032\n\026ETouchGestureDoubl"
  "eTap\020\003\022\033\n\027ETouchGestureShortPress\020\004\022\032\n\026E"
  "TouchGestureLongPress\020\005\022\030\n\024ETouchGesture"
  "LongTap\020\006\022\035\n\031ETouchGestureTwoFingerTap\020\007"
  "\022\035\n\031ETouchGestureTapCancelled\020\010\022\033\n\027ETouc"
  "hGesturePinchBegin\020\t\022\034\n\030ETouchGesturePin"
  "chUpdate\020\n\022\031\n\025ETouchGesturePinchEnd\020\013\022\033\n"
  "\027ETouchGestureFlingStart\020\014\022\037\n\033ETouchGest"
  "ureFlingCancelled\020\r*\206\001\n\023ESessionPersiste"
  "nce\022(\n\033ESessionPersistence_Invalid\020\377\377\377\377\377"
  "\377\377\377\377\001\022!\n\035ESessionPersistence_Ephemeral\020\000"
  "\022\"\n\036ESessionPersistence_Persistent\020\001*\321\001\n"
  "\032ENewSteamAnnouncementState\022&\n\"ENewSteam"
  "AnnouncementState_Invalid\020\000\022&\n\"ENewSteam"
  "AnnouncementState_AllRead\020\001\022.\n*ENewSteam"
  "AnnouncementState_NewAnnouncement\020\002\0223\n/E"
  "NewSteamAnnouncementState_FeaturedAnnoun"
  "cement\020\003*\354\001\n\nEForumType\022\026\n\022EForumType_In"
  "valid\020\000\022\026\n\022EForumType_General\020\001\022\034\n\030EForu"
  "mType_ReportedPosts\020\002\022\027\n\023EForumType_Work"
  "shop\020\003\022\034\n\030EForumType_PublishedFile\020\004\022\026\n\022"
  "EForumType_Trading\020\005\022\027\n\023EForumType_PlayT"
  "est\020\006\022\024\n\020EForumType_Event\020\007\022\022\n\016EForumTyp"
  "e_Max\020\010*\337\006\n\022ECommentThreadType\022\035\n\031EComme"
  "ntThreadTypeInvalid\020\000\022+\n\'ECommentThreadT"
  "ypeScreenshot_Deprecated\020\001\022/\n+ECommentTh"
  "readTypeWorkshopAccount_Developer\020\002\022,\n(E"
  "CommentThreadTypeWorkshopAccount_Public\020"
  "\003\022-\n)ECommentThreadTypePublishedFile_Dev"
  "eloper\020\004\022*\n&ECommentThreadTypePublishedF"
  "ile_Public\020\005\022\032\n\026ECommentThreadTypeTest\020\006"
  "\022 \n\034ECommentThreadTypeForumTopic\020\007\022$\n EC"
  "ommentThreadTypeRecommendation\020\010\022&\n\"ECom"
  "mentThreadTypeVideo_Deprecated\020\t\022\035\n\031ECom"
  "mentThreadTypeProfile\020\n\022\036\n\032ECommentThrea"
  "dTypeNewsPost\020\013\022\032\n\026ECommentThreadTypeCla"
  "n\020\014\022&\n\"ECommentThreadTypeClanAnnouncemen"
  "t\020\r\022\037\n\033ECommentThreadTypeClanEvent\020\016\022)\n%"
  "ECommentThreadTypeUserStatusPublished\020\017\022"
  ")\n%ECommentThreadTypeUserReceivedNewGame"
  "\020\020\0220\n,ECommentThreadTypePublishedFile_An"
  "nouncement\020\021\022&\n\"ECommentThreadTypeModera"
  "torMessage\020\022\022$\n ECommentThreadTypeClanCu"
  "ratedApp\020\023\022\"\n\036ECommentThreadTypeQAndASes"
  "sion\020\024\022\031\n\025ECommentThreadTypeMax\020\025*\315\001\n\024EB"
  "roadcastPermission\022 \n\034EBroadcastPermissi"
  "onDisabled\020\000\022&\n\"EBroadcastPermissionFrie"
  "ndsApprove\020\001\022&\n\"EBroadcastPermissionFrie"
  "ndsAllowed\020\002\022\036\n\032EBroadcastPermissionPubl"
  "ic\020\003\022#\n\037EBroadcastPermissionSubscribers\020"
  "\004*b\n\030EBroadcastEncoderSetting\022 \n\034EBroadc"
  "astEncoderBestQuality\020\000\022$\n EBroadcastEnc"
  "oderBestPerformance\020\001*s\n\024ECloudGamingPla"
  "tform\022\034\n\030ECloudGamingPlatformNone\020\000\022\035\n\031E"
  "CloudGamingPlatformValve\020\001\022\036\n\032ECloudGami"
  "ngPlatformNVIDIA\020\002*\220\001\n\030ECompromiseDetect"
  "ionType\022!\n\035ECompromiseDetectionType_None"
  "\020\000\022\'\n#ECompromiseDetectionType_TradeEven"
  "t\020\001\022(\n$ECompromiseDetectionType_ApiCallR"
  "ate\020\002*\316\001\n\032EAsyncGameSessionUserState\022.\n!"
  "EAsyncGameSessionUserStateUnknown\020\377\377\377\377\377\377"
  "\377\377\377\001\022.\n*EAsyncGameSessionUserStateWaitin"
  "gForOthers\020\000\022,\n(EAsyncGameSessionUserSta"
  "teReadyForAction\020\001\022\"\n\036EAsyncGameSessionU"
  "serStateDone\020\002*\276\001\n\037EAsyncGameSessionUser"
  "Visibility\0229\n5EAsyncGameSessionUserVisib"
  "ilityEnvelopeAndSessionList\020\000\0222\n.EAsyncG"
  "ameSessionUserVisibilitySessionListOnly\020"
  "\001\022,\n(EAsyncGameSessionUserVisibilityDism"
  "issed\020\002*\312\001\n\022EGameRecordingType\022\036\n\032EGameR"
  "ecordingType_Unknown\020\000\022#\n\037EGameRecording"
  "Type_NotRecording\020\001\022&\n\"EGameRecordingTyp"
  "e_ManualRecording\020\002\022*\n&EGameRecordingTyp"
  "e_BackgroundRecording\020\003\022\033\n\027EGameRecordin"
  "gType_Clip\020\004*\302\003\n\rEProtoAppType\022\023\n\017EAppTy"
  "peInvalid\020\000\022\020\n\014EAppTypeGame\020\001\022\027\n\023EAppTyp"
  "eApplication\020\002\022\020\n\014EAppTypeTool\020\004\022\020\n\014EApp"
  "TypeDemo\020\010\022\025\n\021EAppTypeDeprected\020\020\022\017\n\013EAp"
  "pTypeDLC\020 \022\021\n\rEAppTypeGuide\020@\022\023\n\016EAppTyp"
  "eDriver\020\200\001\022\023\n\016EAppTypeConfig\020\200\002\022\025\n\020EAppT"
  "ypeHardware\020\200\004\022\026\n\021EAppTypeFranchise\020\200\010\022\022"
  "\n\rEAppTypeVideo\020\200\020\022\023\n\016EAppTypePlugin\020\200 \022"
  "\027\n\022EAppTypeMusicAlbum\020\200@\022\024\n\016EAppTypeSeri"
  "es\020\200\200\001\022\023\n\rEAppTypeComic\020\200\200\002\022\022\n\014EAppTypeB"
  "eta\020\200\200\004\022\030\n\020EAppTypeShortcut\020\200\200\200\200\004\022\036\n\021EAp"
  "pTypeDepotOnly\020\200\200\200\200\370\377\377\377\377\001*\352\001\n EWindowsUp"
  "dateInstallationImpact\0225\n(EWindowsUpdate"
  "InstallationImpact_Unknown\020\377\377\377\377\377\377\377\377\377\001\022+\n"
  "\'EWindowsUpdateInstallationImpact_Normal"
  "\020\000\022*\n&EWindowsUpdateInstallationImpact_M"
  "inor\020\001\0226\n2EWindowsUpdateInstallationImpa"
  "ct_ExclusiveHandling\020\002*\352\001\n\034EWindowsUpdat"
  "eRebootBehavior\0221\n$EWindowsUpdateRebootB"
  "ehavior_Unknown\020\377\377\377\377\377\377\377\377\377\001\0221\n-EWindowsUp"
  "dateRebootBehavior_NeverNeedsReboot\020\000\0222\n"
  ".EWindowsUpdateRebootBehavior_AlwaysNeed"
  "sReboot\020\001\0220\n,EWindowsUpdateRebootBehavio"
  "r_MightNeedReboot\020\002*\314\001\n\026EExternalSaleEve"
  "ntType\022\"\n\036EExternalSaleEventType_Unknown"
  "\020\000\022$\n EExternalSaleEventType_Publisher\020\001"
  "\022#\n\037EExternalSaleEventType_Showcase\020\002\022!\n"
  "\035EExternalSaleEventType_Region\020\003\022 \n\034EExt"
  "ernalSaleEventType_Theme\020\004B#H\001\200\001\001\252\002\027Open"
  "Steamworks.Protobuf\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, 15823, descriptor_table_protodef_enums_2eproto, "enums.proto", 
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  file_level_metadata_enums_2eproto, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_enums_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return descriptor_table_enums_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_enums_2eproto(&descriptor_table_enums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool EPublishedFileQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool EPublishedFileInappropriateProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[2];
}
bool EPublishedFileInappropriateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPersonaStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[3];
}
bool EPersonaStateFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentCheckProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[4];
}
bool EContentCheckProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[5];
}
bool EProfileCustomizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileStorageSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[6];
}
bool EPublishedFileStorageSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudStoragePersistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[7];
}
bool ECloudStoragePersistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESDCardFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[8];
}
bool ESDCardFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[9];
}
bool EStorageFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemFanControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[10];
}
bool ESystemFanControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartupMovieVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[11];
}
bool EStartupMovieVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EColorGamutLabelSet_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[12];
}
bool EColorGamutLabelSet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowStackingOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[13];
}
bool EWindowStackingOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBluetoothDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[14];
}
bool EBluetoothDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[15];
}
bool ESystemAudioDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[16];
}
bool ESystemAudioChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[17];
}
bool ESystemAudioPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[18];
}
bool ESystemAudioPortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[19];
}
bool ESystemServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGraphicsPerfOverlayLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[20];
}
bool EGraphicsPerfOverlayLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGPUPerformanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[21];
}
bool EGPUPerformanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[22];
}
bool EScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[23];
}
bool ESplitScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingScaler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[24];
}
bool ESplitScalingScaler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGamescopeBlurMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[25];
}
bool EGamescopeBlurMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESLSHelper_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[26];
}
bool ESLSHelper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRVisualization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[27];
}
bool EHDRVisualization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRToneMapOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[28];
}
bool EHDRToneMapOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPUGovernor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[29];
}
bool ECPUGovernor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[30];
}
bool EUpdaterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[31];
}
bool EUpdaterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[32];
}
bool EStorageBlockContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockFileSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[33];
}
bool EStorageBlockFileSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageDriveMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[34];
}
bool EStorageDriveMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemDisplayCompatibilityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[35];
}
bool ESystemDisplayCompatibilityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[36];
}
bool ESteamDeckCompatibilityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityResultDisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[37];
}
bool ESteamDeckCompatibilityResultDisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityTestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[38];
}
bool ESteamDeckCompatibilityTestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EACState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[39];
}
bool EACState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBatteryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[40];
}
bool EBatteryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOSBranch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[41];
}
bool EOSBranch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[42];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityFeedback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[43];
}
bool ESteamDeckCompatibilityFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProvideDeckFeedbackPreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[44];
}
bool EProvideDeckFeedbackPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[45];
}
bool ETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESessionPersistence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[46];
}
bool ESessionPersistence_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENewSteamAnnouncementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[47];
}
bool ENewSteamAnnouncementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EForumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[48];
}
bool EForumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommentThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[49];
}
bool ECommentThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[50];
}
bool EBroadcastPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastEncoderSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[51];
}
bool EBroadcastEncoderSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudGamingPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[52];
}
bool ECloudGamingPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECompromiseDetectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[53];
}
bool ECompromiseDetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[54];
}
bool EAsyncGameSessionUserState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAsyncGameSessionUserVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[55];
}
bool EAsyncGameSessionUserVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameRecordingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[56];
}
bool EGameRecordingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoAppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[57];
}
bool EProtoAppType_IsValid(int value) {
  switch (value) {
    case -2147483647 - 1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateInstallationImpact_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[58];
}
bool EWindowsUpdateInstallationImpact_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWindowsUpdateRebootBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[59];
}
bool EWindowsUpdateRebootBehavior_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EExternalSaleEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[60];
}
bool EExternalSaleEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
