// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: htmlmessages.proto

#include "htmlmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgKeyUp::CMsgKeyUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , keycode_(0u)
  , modifiers_(0u)
  , nativekeycode_(0u){}
struct CMsgKeyUpDefaultTypeInternal {
  constexpr CMsgKeyUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgKeyUpDefaultTypeInternal() {}
  union {
    CMsgKeyUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgKeyUpDefaultTypeInternal _CMsgKeyUp_default_instance_;
constexpr CMsgKeyDown::CMsgKeyDown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , keycode_(0u)
  , modifiers_(0u)
  , is_system_key_(false)
  , nativekeycode_(0u){}
struct CMsgKeyDownDefaultTypeInternal {
  constexpr CMsgKeyDownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgKeyDownDefaultTypeInternal() {}
  union {
    CMsgKeyDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgKeyDownDefaultTypeInternal _CMsgKeyDown_default_instance_;
constexpr CMsgKeyChar::CMsgKeyChar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , unichar_(0u)
  , modifiers_(0u)
  , keycode_(0u)
  , nativekeycode_(0u){}
struct CMsgKeyCharDefaultTypeInternal {
  constexpr CMsgKeyCharDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgKeyCharDefaultTypeInternal() {}
  union {
    CMsgKeyChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgKeyCharDefaultTypeInternal _CMsgKeyChar_default_instance_;
constexpr CMsgMouseDown::CMsgMouseDown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , mouse_button_(0u)
  , modifiers_(0u){}
struct CMsgMouseDownDefaultTypeInternal {
  constexpr CMsgMouseDownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMouseDownDefaultTypeInternal() {}
  union {
    CMsgMouseDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMouseDownDefaultTypeInternal _CMsgMouseDown_default_instance_;
constexpr CMsgMouseUp::CMsgMouseUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , mouse_button_(0u)
  , modifiers_(0u)
  , is_off_panel_(false)
  , x_(0)
  , y_(0){}
struct CMsgMouseUpDefaultTypeInternal {
  constexpr CMsgMouseUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMouseUpDefaultTypeInternal() {}
  union {
    CMsgMouseUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMouseUpDefaultTypeInternal _CMsgMouseUp_default_instance_;
constexpr CMsgMouseDblClick::CMsgMouseDblClick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , mouse_button_(0u)
  , modifiers_(0u){}
struct CMsgMouseDblClickDefaultTypeInternal {
  constexpr CMsgMouseDblClickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMouseDblClickDefaultTypeInternal() {}
  union {
    CMsgMouseDblClick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMouseDblClickDefaultTypeInternal _CMsgMouseDblClick_default_instance_;
constexpr CMsgMouseWheel::CMsgMouseWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , deltax_(0)
  , deltay_(0)
  , modifiers_(0u){}
struct CMsgMouseWheelDefaultTypeInternal {
  constexpr CMsgMouseWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMouseWheelDefaultTypeInternal() {}
  union {
    CMsgMouseWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMouseWheelDefaultTypeInternal _CMsgMouseWheel_default_instance_;
constexpr CMsgMouseMove::CMsgMouseMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , x_(0)
  , y_(0)
  , modifiers_(0u){}
struct CMsgMouseMoveDefaultTypeInternal {
  constexpr CMsgMouseMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMouseMoveDefaultTypeInternal() {}
  union {
    CMsgMouseMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMouseMoveDefaultTypeInternal _CMsgMouseMove_default_instance_;
constexpr CMsgMouseLeave::CMsgMouseLeave(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgMouseLeaveDefaultTypeInternal {
  constexpr CMsgMouseLeaveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMouseLeaveDefaultTypeInternal() {}
  union {
    CMsgMouseLeave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMouseLeaveDefaultTypeInternal _CMsgMouseLeave_default_instance_;
constexpr CMsgBrowserCreate::CMsgBrowserCreate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : useragent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_css_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vroverlay_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(0u)
  , dpi_scaling_(0)
  , initial_width_(0u)
  , initial_height_(0u)
  , native_dropdowns_(false)
  , borderless_(false)
  , only_allow_trusted_popups_(false)
  , browser_type_(0u)
  , hwnd_parent_(PROTOBUF_ULONGLONG(0))
  , creation_flags_(0u)
  , initial_left_(-2147483647 - 1)
  , offscreen_(true)
  , initial_top_(-2147483647 - 1){}
struct CMsgBrowserCreateDefaultTypeInternal {
  constexpr CMsgBrowserCreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserCreateDefaultTypeInternal() {}
  union {
    CMsgBrowserCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserCreateDefaultTypeInternal _CMsgBrowserCreate_default_instance_;
constexpr CMsgBrowserCreateResponse::CMsgBrowserCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , request_id_(0u){}
struct CMsgBrowserCreateResponseDefaultTypeInternal {
  constexpr CMsgBrowserCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserCreateResponseDefaultTypeInternal() {}
  union {
    CMsgBrowserCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserCreateResponseDefaultTypeInternal _CMsgBrowserCreateResponse_default_instance_;
constexpr CMsgBrowserRemove::CMsgBrowserRemove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgBrowserRemoveDefaultTypeInternal {
  constexpr CMsgBrowserRemoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserRemoveDefaultTypeInternal() {}
  union {
    CMsgBrowserRemove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserRemoveDefaultTypeInternal _CMsgBrowserRemove_default_instance_;
constexpr CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relative_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , local_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allowed_extensions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_rewrite_(false){}
struct CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal {
  constexpr CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal() {}
  union {
    CMsgSetLocalFileRequestMapping_AdditionalRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal _CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_;
constexpr CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_()
  , request_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_local_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgSetLocalFileRequestMappingDefaultTypeInternal {
  constexpr CMsgSetLocalFileRequestMappingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetLocalFileRequestMappingDefaultTypeInternal() {}
  union {
    CMsgSetLocalFileRequestMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetLocalFileRequestMappingDefaultTypeInternal _CMsgSetLocalFileRequestMapping_default_instance_;
constexpr CMsgBrowserErrorStrings::CMsgBrowserErrorStrings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cache_miss_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bad_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_problem_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proxy_problem_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unknown_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgBrowserErrorStringsDefaultTypeInternal {
  constexpr CMsgBrowserErrorStringsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserErrorStringsDefaultTypeInternal() {}
  union {
    CMsgBrowserErrorStrings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserErrorStringsDefaultTypeInternal _CMsgBrowserErrorStrings_default_instance_;
constexpr CMsgBrowserSetName::CMsgBrowserSetName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgBrowserSetNameDefaultTypeInternal {
  constexpr CMsgBrowserSetNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserSetNameDefaultTypeInternal() {}
  union {
    CMsgBrowserSetName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserSetNameDefaultTypeInternal _CMsgBrowserSetName_default_instance_;
constexpr CMsgBrowserSize::CMsgBrowserSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0)
  , browser_handle_(0u){}
struct CMsgBrowserSizeDefaultTypeInternal {
  constexpr CMsgBrowserSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserSizeDefaultTypeInternal() {}
  union {
    CMsgBrowserSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserSizeDefaultTypeInternal _CMsgBrowserSize_default_instance_;
constexpr CMsgBrowserSetMinSize::CMsgBrowserSetMinSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0)
  , browser_handle_(0u){}
struct CMsgBrowserSetMinSizeDefaultTypeInternal {
  constexpr CMsgBrowserSetMinSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserSetMinSizeDefaultTypeInternal() {}
  union {
    CMsgBrowserSetMinSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserSetMinSizeDefaultTypeInternal _CMsgBrowserSetMinSize_default_instance_;
constexpr CMsgBrowserPosition::CMsgBrowserPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , x_local_(0)
  , y_local_(0)
  , browser_handle_(0u){}
struct CMsgBrowserPositionDefaultTypeInternal {
  constexpr CMsgBrowserPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserPositionDefaultTypeInternal() {}
  union {
    CMsgBrowserPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserPositionDefaultTypeInternal _CMsgBrowserPosition_default_instance_;
constexpr CMsgBrowserResized::CMsgBrowserResized(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , width_(0)
  , height_(0)
  , dpi_horizontal_(0)
  , dpi_vertical_(0)
  , browser_handle_(0u){}
struct CMsgBrowserResizedDefaultTypeInternal {
  constexpr CMsgBrowserResizedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserResizedDefaultTypeInternal() {}
  union {
    CMsgBrowserResized _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserResizedDefaultTypeInternal _CMsgBrowserResized_default_instance_;
constexpr CMsgPostURL::CMsgPostURL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , post_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , pageserial_(0u)
  , replace_entry_(false){}
struct CMsgPostURLDefaultTypeInternal {
  constexpr CMsgPostURLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPostURLDefaultTypeInternal() {}
  union {
    CMsgPostURL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPostURLDefaultTypeInternal _CMsgPostURL_default_instance_;
constexpr CMsgAddHeader::CMsgAddHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgAddHeaderDefaultTypeInternal {
  constexpr CMsgAddHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAddHeaderDefaultTypeInternal() {}
  union {
    CMsgAddHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAddHeaderDefaultTypeInternal _CMsgAddHeader_default_instance_;
constexpr CMsgStopLoad::CMsgStopLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgStopLoadDefaultTypeInternal {
  constexpr CMsgStopLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStopLoadDefaultTypeInternal() {}
  union {
    CMsgStopLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStopLoadDefaultTypeInternal _CMsgStopLoad_default_instance_;
constexpr CMsgReload::CMsgReload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgReloadDefaultTypeInternal {
  constexpr CMsgReloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReloadDefaultTypeInternal() {}
  union {
    CMsgReload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReloadDefaultTypeInternal _CMsgReload_default_instance_;
constexpr CMsgGoForward::CMsgGoForward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgGoForwardDefaultTypeInternal {
  constexpr CMsgGoForwardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGoForwardDefaultTypeInternal() {}
  union {
    CMsgGoForward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGoForwardDefaultTypeInternal _CMsgGoForward_default_instance_;
constexpr CMsgGoBack::CMsgGoBack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgGoBackDefaultTypeInternal {
  constexpr CMsgGoBackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGoBackDefaultTypeInternal() {}
  union {
    CMsgGoBack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGoBackDefaultTypeInternal _CMsgGoBack_default_instance_;
constexpr CMsgWasHidden::CMsgWasHidden(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , hidden_(false){}
struct CMsgWasHiddenDefaultTypeInternal {
  constexpr CMsgWasHiddenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWasHiddenDefaultTypeInternal() {}
  union {
    CMsgWasHidden _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWasHiddenDefaultTypeInternal _CMsgWasHidden_default_instance_;
constexpr CMsgSetWindowVisibility::CMsgSetWindowVisibility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , visible_(false){}
struct CMsgSetWindowVisibilityDefaultTypeInternal {
  constexpr CMsgSetWindowVisibilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetWindowVisibilityDefaultTypeInternal() {}
  union {
    CMsgSetWindowVisibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetWindowVisibilityDefaultTypeInternal _CMsgSetWindowVisibility_default_instance_;
constexpr CMsgClearHistory::CMsgClearHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgClearHistoryDefaultTypeInternal {
  constexpr CMsgClearHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearHistoryDefaultTypeInternal() {}
  union {
    CMsgClearHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearHistoryDefaultTypeInternal _CMsgClearHistory_default_instance_;
constexpr CMsgClearAllBrowsingData::CMsgClearAllBrowsingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgClearAllBrowsingDataDefaultTypeInternal {
  constexpr CMsgClearAllBrowsingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearAllBrowsingDataDefaultTypeInternal() {}
  union {
    CMsgClearAllBrowsingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearAllBrowsingDataDefaultTypeInternal _CMsgClearAllBrowsingData_default_instance_;
constexpr CMsgCopy::CMsgCopy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgCopyDefaultTypeInternal {
  constexpr CMsgCopyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCopyDefaultTypeInternal() {}
  union {
    CMsgCopy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCopyDefaultTypeInternal _CMsgCopy_default_instance_;
constexpr CMsgPaste::CMsgPaste(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgPasteDefaultTypeInternal {
  constexpr CMsgPasteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPasteDefaultTypeInternal() {}
  union {
    CMsgPaste _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPasteDefaultTypeInternal _CMsgPaste_default_instance_;
constexpr CMsgExecuteJavaScript::CMsgExecuteJavaScript(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgExecuteJavaScriptDefaultTypeInternal {
  constexpr CMsgExecuteJavaScriptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgExecuteJavaScriptDefaultTypeInternal() {}
  union {
    CMsgExecuteJavaScript _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgExecuteJavaScriptDefaultTypeInternal _CMsgExecuteJavaScript_default_instance_;
constexpr CMsgSetFocus::CMsgSetFocus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , focus_(false){}
struct CMsgSetFocusDefaultTypeInternal {
  constexpr CMsgSetFocusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetFocusDefaultTypeInternal() {}
  union {
    CMsgSetFocus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetFocusDefaultTypeInternal _CMsgSetFocus_default_instance_;
constexpr CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgHorizontalScrollBarSizeDefaultTypeInternal {
  constexpr CMsgHorizontalScrollBarSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHorizontalScrollBarSizeDefaultTypeInternal() {}
  union {
    CMsgHorizontalScrollBarSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHorizontalScrollBarSizeDefaultTypeInternal _CMsgHorizontalScrollBarSize_default_instance_;
constexpr CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scroll_max_(0u)
  , scroll_(0u)
  , zoom_(0)
  , visible_(false)
  , page_size_(0u){}
struct CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal {
  constexpr CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal() {}
  union {
    CMsgHorizontalScrollBarSizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal _CMsgHorizontalScrollBarSizeResponse_default_instance_;
constexpr CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgVerticalScrollBarSizeDefaultTypeInternal {
  constexpr CMsgVerticalScrollBarSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVerticalScrollBarSizeDefaultTypeInternal() {}
  union {
    CMsgVerticalScrollBarSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVerticalScrollBarSizeDefaultTypeInternal _CMsgVerticalScrollBarSize_default_instance_;
constexpr CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scroll_max_(0u)
  , scroll_(0u)
  , zoom_(0)
  , visible_(false)
  , page_size_(0u){}
struct CMsgVerticalScrollBarSizeResponseDefaultTypeInternal {
  constexpr CMsgVerticalScrollBarSizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVerticalScrollBarSizeResponseDefaultTypeInternal() {}
  union {
    CMsgVerticalScrollBarSizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVerticalScrollBarSizeResponseDefaultTypeInternal _CMsgVerticalScrollBarSizeResponse_default_instance_;
constexpr CMsgFind::CMsgFind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : find_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , infind_(false)
  , reverse_(false){}
struct CMsgFindDefaultTypeInternal {
  constexpr CMsgFindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFindDefaultTypeInternal() {}
  union {
    CMsgFind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFindDefaultTypeInternal _CMsgFind_default_instance_;
constexpr CMsgStopFind::CMsgStopFind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgStopFindDefaultTypeInternal {
  constexpr CMsgStopFindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStopFindDefaultTypeInternal() {}
  union {
    CMsgStopFind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStopFindDefaultTypeInternal _CMsgStopFind_default_instance_;
constexpr CMsgSetHorizontalScroll::CMsgSetHorizontalScroll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scroll_(0u){}
struct CMsgSetHorizontalScrollDefaultTypeInternal {
  constexpr CMsgSetHorizontalScrollDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetHorizontalScrollDefaultTypeInternal() {}
  union {
    CMsgSetHorizontalScroll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetHorizontalScrollDefaultTypeInternal _CMsgSetHorizontalScroll_default_instance_;
constexpr CMsgSetVerticalScroll::CMsgSetVerticalScroll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scroll_(0u){}
struct CMsgSetVerticalScrollDefaultTypeInternal {
  constexpr CMsgSetVerticalScrollDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetVerticalScrollDefaultTypeInternal() {}
  union {
    CMsgSetVerticalScroll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetVerticalScrollDefaultTypeInternal _CMsgSetVerticalScroll_default_instance_;
constexpr CMsgSetZoomLevel::CMsgSetZoomLevel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zoom_(0)
  , browser_handle_(0u){}
struct CMsgSetZoomLevelDefaultTypeInternal {
  constexpr CMsgSetZoomLevelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetZoomLevelDefaultTypeInternal() {}
  union {
    CMsgSetZoomLevel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetZoomLevelDefaultTypeInternal _CMsgSetZoomLevel_default_instance_;
constexpr CMsgViewSource::CMsgViewSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgViewSourceDefaultTypeInternal {
  constexpr CMsgViewSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgViewSourceDefaultTypeInternal() {}
  union {
    CMsgViewSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgViewSourceDefaultTypeInternal _CMsgViewSource_default_instance_;
constexpr CMsgBrowserReady::CMsgBrowserReady(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vr_overlay_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hwnd_browser_(PROTOBUF_ULONGLONG(0))
  , browser_handle_(0u){}
struct CMsgBrowserReadyDefaultTypeInternal {
  constexpr CMsgBrowserReadyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserReadyDefaultTypeInternal() {}
  union {
    CMsgBrowserReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserReadyDefaultTypeInternal _CMsgBrowserReady_default_instance_;
constexpr CMsgURLChanged::CMsgURLChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagetitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , bisredirect_(false)
  , bnewnavigation_(false){}
struct CMsgURLChangedDefaultTypeInternal {
  constexpr CMsgURLChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgURLChangedDefaultTypeInternal() {}
  union {
    CMsgURLChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgURLChangedDefaultTypeInternal _CMsgURLChanged_default_instance_;
constexpr CHistoryEntry::CHistoryEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CHistoryEntryDefaultTypeInternal {
  constexpr CHistoryEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHistoryEntryDefaultTypeInternal() {}
  union {
    CHistoryEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHistoryEntryDefaultTypeInternal _CHistoryEntry_default_instance_;
constexpr CMsgHistoryChanged::CMsgHistoryChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , browser_handle_(0u)
  , index_(0u){}
struct CMsgHistoryChangedDefaultTypeInternal {
  constexpr CMsgHistoryChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHistoryChangedDefaultTypeInternal() {}
  union {
    CMsgHistoryChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHistoryChangedDefaultTypeInternal _CMsgHistoryChanged_default_instance_;
constexpr CMsgLoadError::CMsgLoadError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , error_code_(0){}
struct CMsgLoadErrorDefaultTypeInternal {
  constexpr CMsgLoadErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLoadErrorDefaultTypeInternal() {}
  union {
    CMsgLoadError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLoadErrorDefaultTypeInternal _CMsgLoadError_default_instance_;
constexpr CHTMLHeader::CHTMLHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CHTMLHeaderDefaultTypeInternal {
  constexpr CHTMLHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHTMLHeaderDefaultTypeInternal() {}
  union {
    CHTMLHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHTMLHeaderDefaultTypeInternal _CHTMLHeader_default_instance_;
constexpr CHTMLPageSecurityInfo::CHTMLPageSecurityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : issuername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , certname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bissecure_(false)
  , bhascerterror_(false)
  , bisevcert_(false)
  , certexpiry_(0)
  , ncertbits_(0){}
struct CHTMLPageSecurityInfoDefaultTypeInternal {
  constexpr CHTMLPageSecurityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CHTMLPageSecurityInfoDefaultTypeInternal() {}
  union {
    CHTMLPageSecurityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CHTMLPageSecurityInfoDefaultTypeInternal _CHTMLPageSecurityInfo_default_instance_;
constexpr CMsgFinishedRequest::CMsgFinishedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagetitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgFinishedRequestDefaultTypeInternal {
  constexpr CMsgFinishedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFinishedRequestDefaultTypeInternal() {}
  union {
    CMsgFinishedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFinishedRequestDefaultTypeInternal _CMsgFinishedRequest_default_instance_;
constexpr CMsgLoadedRequest::CMsgLoadedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagetitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgLoadedRequestDefaultTypeInternal {
  constexpr CMsgLoadedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLoadedRequestDefaultTypeInternal() {}
  union {
    CMsgLoadedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLoadedRequestDefaultTypeInternal _CMsgLoadedRequest_default_instance_;
constexpr CMsgFavIconURLChanged::CMsgFavIconURLChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : urls_()
  , browser_handle_(0u){}
struct CMsgFavIconURLChangedDefaultTypeInternal {
  constexpr CMsgFavIconURLChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFavIconURLChangedDefaultTypeInternal() {}
  union {
    CMsgFavIconURLChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFavIconURLChangedDefaultTypeInternal _CMsgFavIconURLChanged_default_instance_;
constexpr CMsgPageSecurity::CMsgPageSecurity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , security_info_(nullptr)
  , browser_handle_(0u){}
struct CMsgPageSecurityDefaultTypeInternal {
  constexpr CMsgPageSecurityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPageSecurityDefaultTypeInternal() {}
  union {
    CMsgPageSecurity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPageSecurityDefaultTypeInternal _CMsgPageSecurity_default_instance_;
constexpr CMsgStartRequest::CMsgStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , bisredirect_(false){}
struct CMsgStartRequestDefaultTypeInternal {
  constexpr CMsgStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStartRequestDefaultTypeInternal() {}
  union {
    CMsgStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStartRequestDefaultTypeInternal _CMsgStartRequest_default_instance_;
constexpr CMsgStartRequestResponse::CMsgStartRequestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , ballow_(false){}
struct CMsgStartRequestResponseDefaultTypeInternal {
  constexpr CMsgStartRequestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStartRequestResponseDefaultTypeInternal() {}
  union {
    CMsgStartRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStartRequestResponseDefaultTypeInternal _CMsgStartRequestResponse_default_instance_;
constexpr CMsgShowPopup::CMsgShowPopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgShowPopupDefaultTypeInternal {
  constexpr CMsgShowPopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgShowPopupDefaultTypeInternal() {}
  union {
    CMsgShowPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgShowPopupDefaultTypeInternal _CMsgShowPopup_default_instance_;
constexpr CMsgHidePopup::CMsgHidePopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgHidePopupDefaultTypeInternal {
  constexpr CMsgHidePopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHidePopupDefaultTypeInternal() {}
  union {
    CMsgHidePopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHidePopupDefaultTypeInternal _CMsgHidePopup_default_instance_;
constexpr CMsgSizePopup::CMsgSizePopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , x_(0)
  , y_(0)
  , wide_(0u)
  , tall_(0u){}
struct CMsgSizePopupDefaultTypeInternal {
  constexpr CMsgSizePopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSizePopupDefaultTypeInternal() {}
  union {
    CMsgSizePopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSizePopupDefaultTypeInternal _CMsgSizePopup_default_instance_;
constexpr CMsgOpenNewTab::CMsgOpenNewTab(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , bforeground_(false){}
struct CMsgOpenNewTabDefaultTypeInternal {
  constexpr CMsgOpenNewTabDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgOpenNewTabDefaultTypeInternal() {}
  union {
    CMsgOpenNewTab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgOpenNewTabDefaultTypeInternal _CMsgOpenNewTab_default_instance_;
constexpr CMsgPopupHTMLWindow::CMsgPopupHTMLWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , wide_(0u)
  , tall_(0u)
  , popup_index_(0u)
  , trusted_creator_(false)
  , parent_popup_index_(0u)
  , hwnd_(PROTOBUF_ULONGLONG(0))
  , x_(-2147483647 - 1)
  , y_(-2147483647 - 1){}
struct CMsgPopupHTMLWindowDefaultTypeInternal {
  constexpr CMsgPopupHTMLWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPopupHTMLWindowDefaultTypeInternal() {}
  union {
    CMsgPopupHTMLWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPopupHTMLWindowDefaultTypeInternal _CMsgPopupHTMLWindow_default_instance_;
constexpr CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , ballow_(false){}
struct CMsgPopupHTMLWindowResponseDefaultTypeInternal {
  constexpr CMsgPopupHTMLWindowResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPopupHTMLWindowResponseDefaultTypeInternal() {}
  union {
    CMsgPopupHTMLWindowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPopupHTMLWindowResponseDefaultTypeInternal _CMsgPopupHTMLWindowResponse_default_instance_;
constexpr CMsgSetHTMLTitle::CMsgSetHTMLTitle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgSetHTMLTitleDefaultTypeInternal {
  constexpr CMsgSetHTMLTitleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetHTMLTitleDefaultTypeInternal() {}
  union {
    CMsgSetHTMLTitle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetHTMLTitleDefaultTypeInternal _CMsgSetHTMLTitle_default_instance_;
constexpr CMsgLoadingResource::CMsgLoadingResource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgLoadingResourceDefaultTypeInternal {
  constexpr CMsgLoadingResourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLoadingResourceDefaultTypeInternal() {}
  union {
    CMsgLoadingResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLoadingResourceDefaultTypeInternal _CMsgLoadingResource_default_instance_;
constexpr CMsgStatusText::CMsgStatusText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgStatusTextDefaultTypeInternal {
  constexpr CMsgStatusTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStatusTextDefaultTypeInternal() {}
  union {
    CMsgStatusText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStatusTextDefaultTypeInternal _CMsgStatusText_default_instance_;
constexpr CMsgSetCursor::CMsgSetCursor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , cursor_(0u)
  , wide_(0u)
  , tall_(0u)
  , xhotspot_(0u)
  , yhotspot_(0u){}
struct CMsgSetCursorDefaultTypeInternal {
  constexpr CMsgSetCursorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetCursorDefaultTypeInternal() {}
  union {
    CMsgSetCursor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetCursorDefaultTypeInternal _CMsgSetCursor_default_instance_;
constexpr CMsgFileLoadDialog_Filter::CMsgFileLoadDialog_Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : patterns_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_default_(false){}
struct CMsgFileLoadDialog_FilterDefaultTypeInternal {
  constexpr CMsgFileLoadDialog_FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFileLoadDialog_FilterDefaultTypeInternal() {}
  union {
    CMsgFileLoadDialog_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFileLoadDialog_FilterDefaultTypeInternal _CMsgFileLoadDialog_Filter_default_instance_;
constexpr CMsgFileLoadDialog::CMsgFileLoadDialog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accept_types_()
  , filters_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initialfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , owning_browser_handle_(0u)
  , is_save_(false)
  , choose_directory_(false){}
struct CMsgFileLoadDialogDefaultTypeInternal {
  constexpr CMsgFileLoadDialogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFileLoadDialogDefaultTypeInternal() {}
  union {
    CMsgFileLoadDialog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFileLoadDialogDefaultTypeInternal _CMsgFileLoadDialog_default_instance_;
constexpr CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , browser_handle_(0u)
  , owning_browser_handle_(0u)
  , bsuccess_(false){}
struct CMsgFileLoadDialogResponseDefaultTypeInternal {
  constexpr CMsgFileLoadDialogResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFileLoadDialogResponseDefaultTypeInternal() {}
  union {
    CMsgFileLoadDialogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFileLoadDialogResponseDefaultTypeInternal _CMsgFileLoadDialogResponse_default_instance_;
constexpr CMsgShowToolTip::CMsgShowToolTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgShowToolTipDefaultTypeInternal {
  constexpr CMsgShowToolTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgShowToolTipDefaultTypeInternal() {}
  union {
    CMsgShowToolTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgShowToolTipDefaultTypeInternal _CMsgShowToolTip_default_instance_;
constexpr CMsgUpdateToolTip::CMsgUpdateToolTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgUpdateToolTipDefaultTypeInternal {
  constexpr CMsgUpdateToolTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUpdateToolTipDefaultTypeInternal() {}
  union {
    CMsgUpdateToolTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUpdateToolTipDefaultTypeInternal _CMsgUpdateToolTip_default_instance_;
constexpr CMsgHideToolTip::CMsgHideToolTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgHideToolTipDefaultTypeInternal {
  constexpr CMsgHideToolTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHideToolTipDefaultTypeInternal() {}
  union {
    CMsgHideToolTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHideToolTipDefaultTypeInternal _CMsgHideToolTip_default_instance_;
constexpr CMsgSearchResults::CMsgSearchResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , activematch_(0)
  , results_(0){}
struct CMsgSearchResultsDefaultTypeInternal {
  constexpr CMsgSearchResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSearchResultsDefaultTypeInternal() {}
  union {
    CMsgSearchResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSearchResultsDefaultTypeInternal _CMsgSearchResults_default_instance_;
constexpr CMsgClose::CMsgClose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgCloseDefaultTypeInternal {
  constexpr CMsgCloseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCloseDefaultTypeInternal() {}
  union {
    CMsgClose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCloseDefaultTypeInternal _CMsgClose_default_instance_;
constexpr CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , wide_(0u)
  , source_pid_(PROTOBUF_ULONGLONG(0))
  , source_handle_(PROTOBUF_ULONGLONG(0))
  , handle_(PROTOBUF_ULONGLONG(0))
  , tall_(0u){}
struct CMsgSetSharedPaintBuffersDefaultTypeInternal {
  constexpr CMsgSetSharedPaintBuffersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetSharedPaintBuffersDefaultTypeInternal() {}
  union {
    CMsgSetSharedPaintBuffers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetSharedPaintBuffersDefaultTypeInternal _CMsgSetSharedPaintBuffers_default_instance_;
constexpr CMsgAckSharedPaintBuffers::CMsgAckSharedPaintBuffers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgAckSharedPaintBuffersDefaultTypeInternal {
  constexpr CMsgAckSharedPaintBuffersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAckSharedPaintBuffersDefaultTypeInternal() {}
  union {
    CMsgAckSharedPaintBuffers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAckSharedPaintBuffersDefaultTypeInternal _CMsgAckSharedPaintBuffers_default_instance_;
constexpr CMsgNeedsPaint::CMsgNeedsPaint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scrollx_(0u)
  , scrolly_(0u)
  , pagescale_(0)
  , pageserial_(0u)
  , avg_frame_ms_(0u)
  , stddev_sum_frame_ms_(0)
  , long_frame_ms_(0u){}
struct CMsgNeedsPaintDefaultTypeInternal {
  constexpr CMsgNeedsPaintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNeedsPaintDefaultTypeInternal() {}
  union {
    CMsgNeedsPaint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNeedsPaintDefaultTypeInternal _CMsgNeedsPaint_default_instance_;
constexpr CMsgComboNeedsPaint::CMsgComboNeedsPaint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rgba_(PROTOBUF_ULONGLONG(0))
  , browser_handle_(0u)
  , combobox_wide_(0u)
  , shared_memory_handle_(PROTOBUF_ULONGLONG(0))
  , shared_memory_size_(PROTOBUF_ULONGLONG(0))
  , combobox_tall_(0u){}
struct CMsgComboNeedsPaintDefaultTypeInternal {
  constexpr CMsgComboNeedsPaintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgComboNeedsPaintDefaultTypeInternal() {}
  union {
    CMsgComboNeedsPaint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgComboNeedsPaintDefaultTypeInternal _CMsgComboNeedsPaint_default_instance_;
constexpr CMsgNeedsSharedTexturePaint::CMsgNeedsSharedTexturePaint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , share_handle_(0u)
  , width_(0u)
  , height_(0u)
  , scrollx_(0u)
  , scrolly_(0u)
  , pagescale_(0)
  , pageserial_(0u){}
struct CMsgNeedsSharedTexturePaintDefaultTypeInternal {
  constexpr CMsgNeedsSharedTexturePaintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNeedsSharedTexturePaintDefaultTypeInternal() {}
  union {
    CMsgNeedsSharedTexturePaint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNeedsSharedTexturePaintDefaultTypeInternal _CMsgNeedsSharedTexturePaint_default_instance_;
constexpr CMsgGameOverlayTexturePaint::CMsgGameOverlayTexturePaint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , width_(0u)
  , height_(0u)
  , scrollx_(0u)
  , scrolly_(0u)
  , pagescale_(0)
  , pageserial_(0u){}
struct CMsgGameOverlayTexturePaintDefaultTypeInternal {
  constexpr CMsgGameOverlayTexturePaintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameOverlayTexturePaintDefaultTypeInternal() {}
  union {
    CMsgGameOverlayTexturePaint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameOverlayTexturePaintDefaultTypeInternal _CMsgGameOverlayTexturePaint_default_instance_;
constexpr CMsgGetZoom::CMsgGetZoom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgGetZoomDefaultTypeInternal {
  constexpr CMsgGetZoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGetZoomDefaultTypeInternal() {}
  union {
    CMsgGetZoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGetZoomDefaultTypeInternal _CMsgGetZoom_default_instance_;
constexpr CMsgGetZoomResponse::CMsgGetZoomResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , zoom_(0){}
struct CMsgGetZoomResponseDefaultTypeInternal {
  constexpr CMsgGetZoomResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGetZoomResponseDefaultTypeInternal() {}
  union {
    CMsgGetZoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGetZoomResponseDefaultTypeInternal _CMsgGetZoomResponse_default_instance_;
constexpr CMsgLinkAtPosition::CMsgLinkAtPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , x_(0u)
  , y_(0u){}
struct CMsgLinkAtPositionDefaultTypeInternal {
  constexpr CMsgLinkAtPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLinkAtPositionDefaultTypeInternal() {}
  union {
    CMsgLinkAtPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLinkAtPositionDefaultTypeInternal _CMsgLinkAtPosition_default_instance_;
constexpr CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , x_(0u)
  , y_(0u)
  , blivelink_(false)
  , binput_(false){}
struct CMsgLinkAtPositionResponseDefaultTypeInternal {
  constexpr CMsgLinkAtPositionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLinkAtPositionResponseDefaultTypeInternal() {}
  union {
    CMsgLinkAtPositionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLinkAtPositionResponseDefaultTypeInternal _CMsgLinkAtPositionResponse_default_instance_;
constexpr CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , x_(0u)
  , y_(0u){}
struct CMsgZoomToElementAtPositionDefaultTypeInternal {
  constexpr CMsgZoomToElementAtPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgZoomToElementAtPositionDefaultTypeInternal() {}
  union {
    CMsgZoomToElementAtPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgZoomToElementAtPositionDefaultTypeInternal _CMsgZoomToElementAtPosition_default_instance_;
constexpr CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scale_(0)
  , duration_(0){}
struct CMsgZoomToElementAtPositionResponseDefaultTypeInternal {
  constexpr CMsgZoomToElementAtPositionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgZoomToElementAtPositionResponseDefaultTypeInternal() {}
  union {
    CMsgZoomToElementAtPositionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgZoomToElementAtPositionResponseDefaultTypeInternal _CMsgZoomToElementAtPositionResponse_default_instance_;
constexpr CMsgScalePageToValue::CMsgScalePageToValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , scale_(0)
  , x_(0)
  , y_(0){}
struct CMsgScalePageToValueDefaultTypeInternal {
  constexpr CMsgScalePageToValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgScalePageToValueDefaultTypeInternal() {}
  union {
    CMsgScalePageToValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgScalePageToValueDefaultTypeInternal _CMsgScalePageToValue_default_instance_;
constexpr CMsgForcePopupsToDirectHWND::CMsgForcePopupsToDirectHWND(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , force_direct_hwnd_popups_(false){}
struct CMsgForcePopupsToDirectHWNDDefaultTypeInternal {
  constexpr CMsgForcePopupsToDirectHWNDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgForcePopupsToDirectHWNDDefaultTypeInternal() {}
  union {
    CMsgForcePopupsToDirectHWND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgForcePopupsToDirectHWNDDefaultTypeInternal _CMsgForcePopupsToDirectHWND_default_instance_;
constexpr CMsgScalePageToValueResponse::CMsgScalePageToValueResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , zoom_(0){}
struct CMsgScalePageToValueResponseDefaultTypeInternal {
  constexpr CMsgScalePageToValueResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgScalePageToValueResponseDefaultTypeInternal() {}
  union {
    CMsgScalePageToValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgScalePageToValueResponseDefaultTypeInternal _CMsgScalePageToValueResponse_default_instance_;
constexpr CMsgSavePageToJPEG::CMsgSavePageToJPEG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , width_(0u)
  , height_(0u){}
struct CMsgSavePageToJPEGDefaultTypeInternal {
  constexpr CMsgSavePageToJPEGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSavePageToJPEGDefaultTypeInternal() {}
  union {
    CMsgSavePageToJPEG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSavePageToJPEGDefaultTypeInternal _CMsgSavePageToJPEG_default_instance_;
constexpr CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgSavePageToJPEGResponseDefaultTypeInternal {
  constexpr CMsgSavePageToJPEGResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSavePageToJPEGResponseDefaultTypeInternal() {}
  union {
    CMsgSavePageToJPEGResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSavePageToJPEGResponseDefaultTypeInternal _CMsgSavePageToJPEGResponse_default_instance_;
constexpr CMsgJSAlert::CMsgJSAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgJSAlertDefaultTypeInternal {
  constexpr CMsgJSAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSAlertDefaultTypeInternal() {}
  union {
    CMsgJSAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSAlertDefaultTypeInternal _CMsgJSAlert_default_instance_;
constexpr CMsgJSConfirm::CMsgJSConfirm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgJSConfirmDefaultTypeInternal {
  constexpr CMsgJSConfirmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSConfirmDefaultTypeInternal() {}
  union {
    CMsgJSConfirm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSConfirmDefaultTypeInternal _CMsgJSConfirm_default_instance_;
constexpr CMsgJSDialogResponse::CMsgJSDialogResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , result_(false){}
struct CMsgJSDialogResponseDefaultTypeInternal {
  constexpr CMsgJSDialogResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSDialogResponseDefaultTypeInternal() {}
  union {
    CMsgJSDialogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSDialogResponseDefaultTypeInternal _CMsgJSDialogResponse_default_instance_;
constexpr CMsgCanGoBackAndForward::CMsgCanGoBackAndForward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , bgoback_(false)
  , bgoforward_(false){}
struct CMsgCanGoBackAndForwardDefaultTypeInternal {
  constexpr CMsgCanGoBackAndForwardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCanGoBackAndForwardDefaultTypeInternal() {}
  union {
    CMsgCanGoBackAndForward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCanGoBackAndForwardDefaultTypeInternal _CMsgCanGoBackAndForward_default_instance_;
constexpr CMsgOpenSteamURL::CMsgOpenSteamURL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , referrer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgOpenSteamURLDefaultTypeInternal {
  constexpr CMsgOpenSteamURLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgOpenSteamURLDefaultTypeInternal() {}
  union {
    CMsgOpenSteamURL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgOpenSteamURLDefaultTypeInternal _CMsgOpenSteamURL_default_instance_;
constexpr CMsgSetCookie::CMsgSetCookie(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expires_(0u)
  , secure_(false)
  , httponly_(false){}
struct CMsgSetCookieDefaultTypeInternal {
  constexpr CMsgSetCookieDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetCookieDefaultTypeInternal() {}
  union {
    CMsgSetCookie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetCookieDefaultTypeInternal _CMsgSetCookie_default_instance_;
constexpr CMsgSetTargetFrameRate::CMsgSetTargetFrameRate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , ntargetframerate_(0u){}
struct CMsgSetTargetFrameRateDefaultTypeInternal {
  constexpr CMsgSetTargetFrameRateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetTargetFrameRateDefaultTypeInternal() {}
  union {
    CMsgSetTargetFrameRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetTargetFrameRateDefaultTypeInternal _CMsgSetTargetFrameRate_default_instance_;
constexpr CMsgPauseRepaint::CMsgPauseRepaint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgPauseRepaintDefaultTypeInternal {
  constexpr CMsgPauseRepaintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPauseRepaintDefaultTypeInternal() {}
  union {
    CMsgPauseRepaint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPauseRepaintDefaultTypeInternal _CMsgPauseRepaint_default_instance_;
constexpr CMsgFullRepaint::CMsgFullRepaint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgFullRepaintDefaultTypeInternal {
  constexpr CMsgFullRepaintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFullRepaintDefaultTypeInternal() {}
  union {
    CMsgFullRepaint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFullRepaintDefaultTypeInternal _CMsgFullRepaint_default_instance_;
constexpr CMsgRequestFullScreen::CMsgRequestFullScreen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgRequestFullScreenDefaultTypeInternal {
  constexpr CMsgRequestFullScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestFullScreenDefaultTypeInternal() {}
  union {
    CMsgRequestFullScreen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestFullScreenDefaultTypeInternal _CMsgRequestFullScreen_default_instance_;
constexpr CMsgExitFullScreen::CMsgExitFullScreen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgExitFullScreenDefaultTypeInternal {
  constexpr CMsgExitFullScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgExitFullScreenDefaultTypeInternal() {}
  union {
    CMsgExitFullScreen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgExitFullScreenDefaultTypeInternal _CMsgExitFullScreen_default_instance_;
constexpr CMsgToggleFindInPageDialog::CMsgToggleFindInPageDialog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgToggleFindInPageDialogDefaultTypeInternal {
  constexpr CMsgToggleFindInPageDialogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgToggleFindInPageDialogDefaultTypeInternal() {}
  union {
    CMsgToggleFindInPageDialog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgToggleFindInPageDialogDefaultTypeInternal _CMsgToggleFindInPageDialog_default_instance_;
constexpr CMsgSetPIDShuttingDown::CMsgSetPIDShuttingDown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgSetPIDShuttingDownDefaultTypeInternal {
  constexpr CMsgSetPIDShuttingDownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetPIDShuttingDownDefaultTypeInternal() {}
  union {
    CMsgSetPIDShuttingDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetPIDShuttingDownDefaultTypeInternal _CMsgSetPIDShuttingDown_default_instance_;
constexpr CMsgDisableBackgroundThrottling::CMsgDisableBackgroundThrottling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgDisableBackgroundThrottlingDefaultTypeInternal {
  constexpr CMsgDisableBackgroundThrottlingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDisableBackgroundThrottlingDefaultTypeInternal() {}
  union {
    CMsgDisableBackgroundThrottling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDisableBackgroundThrottlingDefaultTypeInternal _CMsgDisableBackgroundThrottling_default_instance_;
constexpr CMsgAckPIDShuttingDown::CMsgAckPIDShuttingDown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgAckPIDShuttingDownDefaultTypeInternal {
  constexpr CMsgAckPIDShuttingDownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAckPIDShuttingDownDefaultTypeInternal() {}
  union {
    CMsgAckPIDShuttingDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAckPIDShuttingDownDefaultTypeInternal _CMsgAckPIDShuttingDown_default_instance_;
constexpr CMsgGetCookiesForURL::CMsgGetCookiesForURL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgGetCookiesForURLDefaultTypeInternal {
  constexpr CMsgGetCookiesForURLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGetCookiesForURLDefaultTypeInternal() {}
  union {
    CMsgGetCookiesForURL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGetCookiesForURLDefaultTypeInternal _CMsgGetCookiesForURL_default_instance_;
constexpr CCookie::CCookie(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCookieDefaultTypeInternal {
  constexpr CCookieDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCookieDefaultTypeInternal() {}
  union {
    CCookie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCookieDefaultTypeInternal _CCookie_default_instance_;
constexpr CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cookies_()
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgGetCookiesForURLResponseDefaultTypeInternal {
  constexpr CMsgGetCookiesForURLResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGetCookiesForURLResponseDefaultTypeInternal() {}
  union {
    CMsgGetCookiesForURLResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGetCookiesForURLResponseDefaultTypeInternal _CMsgGetCookiesForURLResponse_default_instance_;
constexpr CMsgNodeHasFocus::CMsgNodeHasFocus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , elementtagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , searchbuttontext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , binput_(false)
  , bhasmultipleinputs_(false)
  , bismainframe_(false){}
struct CMsgNodeHasFocusDefaultTypeInternal {
  constexpr CMsgNodeHasFocusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNodeHasFocusDefaultTypeInternal() {}
  union {
    CMsgNodeHasFocus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNodeHasFocusDefaultTypeInternal _CMsgNodeHasFocus_default_instance_;
constexpr CMsgZoomToFocusedElement::CMsgZoomToFocusedElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgZoomToFocusedElementDefaultTypeInternal {
  constexpr CMsgZoomToFocusedElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgZoomToFocusedElementDefaultTypeInternal() {}
  union {
    CMsgZoomToFocusedElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgZoomToFocusedElementDefaultTypeInternal _CMsgZoomToFocusedElement_default_instance_;
constexpr CMsgFocusedNodeText::CMsgFocusedNodeText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgFocusedNodeTextDefaultTypeInternal {
  constexpr CMsgFocusedNodeTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFocusedNodeTextDefaultTypeInternal() {}
  union {
    CMsgFocusedNodeText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFocusedNodeTextDefaultTypeInternal _CMsgFocusedNodeText_default_instance_;
constexpr CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgFocusedNodeTextResponseDefaultTypeInternal {
  constexpr CMsgFocusedNodeTextResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFocusedNodeTextResponseDefaultTypeInternal() {}
  union {
    CMsgFocusedNodeTextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFocusedNodeTextResponseDefaultTypeInternal _CMsgFocusedNodeTextResponse_default_instance_;
constexpr CMsgBuildID::CMsgBuildID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : build_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgBuildIDDefaultTypeInternal {
  constexpr CMsgBuildIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBuildIDDefaultTypeInternal() {}
  union {
    CMsgBuildID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBuildIDDefaultTypeInternal _CMsgBuildID_default_instance_;
constexpr CMsgOpenDevTools::CMsgOpenDevTools(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgOpenDevToolsDefaultTypeInternal {
  constexpr CMsgOpenDevToolsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgOpenDevToolsDefaultTypeInternal() {}
  union {
    CMsgOpenDevTools _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgOpenDevToolsDefaultTypeInternal _CMsgOpenDevTools_default_instance_;
constexpr CMsgCloseDevTools::CMsgCloseDevTools(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgCloseDevToolsDefaultTypeInternal {
  constexpr CMsgCloseDevToolsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCloseDevToolsDefaultTypeInternal() {}
  union {
    CMsgCloseDevTools _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCloseDevToolsDefaultTypeInternal _CMsgCloseDevTools_default_instance_;
constexpr CMsgUnlockH264::CMsgUnlockH264(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unloccode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgUnlockH264DefaultTypeInternal {
  constexpr CMsgUnlockH264DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUnlockH264DefaultTypeInternal() {}
  union {
    CMsgUnlockH264 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUnlockH264DefaultTypeInternal _CMsgUnlockH264_default_instance_;
constexpr CMsgScreenInformationChanged::CMsgScreenInformationChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , override_width_(0u)
  , override_height_(0u)
  , monitor_left_(0u)
  , monitor_top_(0u)
  , monitor_right_(0u)
  , monitor_bottom_(0u)
  , usable_left_(0u)
  , usable_top_(0u)
  , usable_right_(0u)
  , usable_bottom_(0u){}
struct CMsgScreenInformationChangedDefaultTypeInternal {
  constexpr CMsgScreenInformationChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgScreenInformationChangedDefaultTypeInternal() {}
  union {
    CMsgScreenInformationChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgScreenInformationChangedDefaultTypeInternal _CMsgScreenInformationChanged_default_instance_;
constexpr CMsgClearAllCookies::CMsgClearAllCookies(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgClearAllCookiesDefaultTypeInternal {
  constexpr CMsgClearAllCookiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearAllCookiesDefaultTypeInternal() {}
  union {
    CMsgClearAllCookies _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearAllCookiesDefaultTypeInternal _CMsgClearAllCookies_default_instance_;
constexpr CMsgScreenDPI::CMsgScreenDPI(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , dpi_scaling_(0){}
struct CMsgScreenDPIDefaultTypeInternal {
  constexpr CMsgScreenDPIDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgScreenDPIDefaultTypeInternal() {}
  union {
    CMsgScreenDPI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgScreenDPIDefaultTypeInternal _CMsgScreenDPI_default_instance_;
constexpr CMsgAckScreenDPI::CMsgAckScreenDPI(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgAckScreenDPIDefaultTypeInternal {
  constexpr CMsgAckScreenDPIDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAckScreenDPIDefaultTypeInternal() {}
  union {
    CMsgAckScreenDPI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAckScreenDPIDefaultTypeInternal _CMsgAckScreenDPI_default_instance_;
constexpr CMsgAuthedSteamDomains::CMsgAuthedSteamDomains(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domains_(){}
struct CMsgAuthedSteamDomainsDefaultTypeInternal {
  constexpr CMsgAuthedSteamDomainsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAuthedSteamDomainsDefaultTypeInternal() {}
  union {
    CMsgAuthedSteamDomains _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAuthedSteamDomainsDefaultTypeInternal _CMsgAuthedSteamDomains_default_instance_;
constexpr CMsgSteamAuthNeeded::CMsgSteamAuthNeeded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filler_(false){}
struct CMsgSteamAuthNeededDefaultTypeInternal {
  constexpr CMsgSteamAuthNeededDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamAuthNeededDefaultTypeInternal() {}
  union {
    CMsgSteamAuthNeeded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamAuthNeededDefaultTypeInternal _CMsgSteamAuthNeeded_default_instance_;
constexpr CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgSteamAuthCookiesSetDefaultTypeInternal {
  constexpr CMsgSteamAuthCookiesSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSteamAuthCookiesSetDefaultTypeInternal() {}
  union {
    CMsgSteamAuthCookiesSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSteamAuthCookiesSetDefaultTypeInternal _CMsgSteamAuthCookiesSet_default_instance_;
constexpr CMsgJSRegisterMethod::CMsgJSRegisterMethod(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , method_type_(0)
{}
struct CMsgJSRegisterMethodDefaultTypeInternal {
  constexpr CMsgJSRegisterMethodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSRegisterMethodDefaultTypeInternal() {}
  union {
    CMsgJSRegisterMethod _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSRegisterMethodDefaultTypeInternal _CMsgJSRegisterMethod_default_instance_;
constexpr CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct CMsgJSValue_JSObjectPropertyDefaultTypeInternal {
  constexpr CMsgJSValue_JSObjectPropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSValue_JSObjectPropertyDefaultTypeInternal() {}
  union {
    CMsgJSValue_JSObjectProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSValue_JSObjectPropertyDefaultTypeInternal _CMsgJSValue_JSObjectProperty_default_instance_;
constexpr CMsgJSValue::CMsgJSValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_values_()
  , object_properties_()
  , string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , int_value_(0)
  , uint_value_(0u)
  , double_value_(0)
  , function_handle_(PROTOBUF_ULONGLONG(0))
  , bool_value_(false)
  , is_array_(false)
  , is_object_(false){}
struct CMsgJSValueDefaultTypeInternal {
  constexpr CMsgJSValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSValueDefaultTypeInternal() {}
  union {
    CMsgJSValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSValueDefaultTypeInternal _CMsgJSValue_default_instance_;
constexpr CMsgJSMethodCall::CMsgJSMethodCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , owning_browser_handle_(0u){}
struct CMsgJSMethodCallDefaultTypeInternal {
  constexpr CMsgJSMethodCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSMethodCallDefaultTypeInternal() {}
  union {
    CMsgJSMethodCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSMethodCallDefaultTypeInternal _CMsgJSMethodCall_default_instance_;
constexpr CMsgJSExecuteCallback::CMsgJSExecuteCallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , browser_handle_(0u)
  , owning_browser_handle_(0u)
  , function_handle_(PROTOBUF_ULONGLONG(0)){}
struct CMsgJSExecuteCallbackDefaultTypeInternal {
  constexpr CMsgJSExecuteCallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSExecuteCallbackDefaultTypeInternal() {}
  union {
    CMsgJSExecuteCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSExecuteCallbackDefaultTypeInternal _CMsgJSExecuteCallback_default_instance_;
constexpr CMsgJSReleaseCallback::CMsgJSReleaseCallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , owning_browser_handle_(0u)
  , function_handle_(PROTOBUF_ULONGLONG(0)){}
struct CMsgJSReleaseCallbackDefaultTypeInternal {
  constexpr CMsgJSReleaseCallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSReleaseCallbackDefaultTypeInternal() {}
  union {
    CMsgJSReleaseCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSReleaseCallbackDefaultTypeInternal _CMsgJSReleaseCallback_default_instance_;
constexpr CMsgJSRaiseException::CMsgJSRaiseException(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exception_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , owning_browser_handle_(0u){}
struct CMsgJSRaiseExceptionDefaultTypeInternal {
  constexpr CMsgJSRaiseExceptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgJSRaiseExceptionDefaultTypeInternal() {}
  union {
    CMsgJSRaiseException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgJSRaiseExceptionDefaultTypeInternal _CMsgJSRaiseException_default_instance_;
constexpr CMsgLoadLocalization::CMsgLoadLocalization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localization_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgLoadLocalizationDefaultTypeInternal {
  constexpr CMsgLoadLocalizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLoadLocalizationDefaultTypeInternal() {}
  union {
    CMsgLoadLocalization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLoadLocalizationDefaultTypeInternal _CMsgLoadLocalization_default_instance_;
constexpr CMsgNotifyUserActivation::CMsgNotifyUserActivation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgNotifyUserActivationDefaultTypeInternal {
  constexpr CMsgNotifyUserActivationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNotifyUserActivationDefaultTypeInternal() {}
  union {
    CMsgNotifyUserActivation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNotifyUserActivationDefaultTypeInternal _CMsgNotifyUserActivation_default_instance_;
constexpr CMsgSetNetFakeLocalSystemState::CMsgSetNetFakeLocalSystemState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0u){}
struct CMsgSetNetFakeLocalSystemStateDefaultTypeInternal {
  constexpr CMsgSetNetFakeLocalSystemStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetNetFakeLocalSystemStateDefaultTypeInternal() {}
  union {
    CMsgSetNetFakeLocalSystemState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetNetFakeLocalSystemStateDefaultTypeInternal _CMsgSetNetFakeLocalSystemState_default_instance_;
constexpr CMsgSetGameOverlayTargetPIDs::CMsgSetGameOverlayTargetPIDs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_pid_()
  , browser_handle_(0u){}
struct CMsgSetGameOverlayTargetPIDsDefaultTypeInternal {
  constexpr CMsgSetGameOverlayTargetPIDsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetGameOverlayTargetPIDsDefaultTypeInternal() {}
  union {
    CMsgSetGameOverlayTargetPIDs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetGameOverlayTargetPIDsDefaultTypeInternal _CMsgSetGameOverlayTargetPIDs_default_instance_;
constexpr CMsgGameOverlayTargetTextureID::CMsgGameOverlayTargetTextureID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , target_pid_(0u)
  , texture_handle_(0u){}
struct CMsgGameOverlayTargetTextureIDDefaultTypeInternal {
  constexpr CMsgGameOverlayTargetTextureIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameOverlayTargetTextureIDDefaultTypeInternal() {}
  union {
    CMsgGameOverlayTargetTextureID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameOverlayTargetTextureIDDefaultTypeInternal _CMsgGameOverlayTargetTextureID_default_instance_;
constexpr CMsgDraggableRegionsChanged_DraggableRects::CMsgDraggableRegionsChanged_DraggableRects(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , width_(0)
  , height_(0)
  , draggable_(false){}
struct CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal {
  constexpr CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal() {}
  union {
    CMsgDraggableRegionsChanged_DraggableRects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal _CMsgDraggableRegionsChanged_DraggableRects_default_instance_;
constexpr CMsgDraggableRegionsChanged::CMsgDraggableRegionsChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rects_()
  , browser_handle_(0u){}
struct CMsgDraggableRegionsChangedDefaultTypeInternal {
  constexpr CMsgDraggableRegionsChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDraggableRegionsChangedDefaultTypeInternal() {}
  union {
    CMsgDraggableRegionsChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDraggableRegionsChangedDefaultTypeInternal _CMsgDraggableRegionsChanged_default_instance_;
constexpr CMsgResizeGripChanged::CMsgResizeGripChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , width_(0)
  , height_(0){}
struct CMsgResizeGripChangedDefaultTypeInternal {
  constexpr CMsgResizeGripChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgResizeGripChangedDefaultTypeInternal() {}
  union {
    CMsgResizeGripChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgResizeGripChangedDefaultTypeInternal _CMsgResizeGripChanged_default_instance_;
constexpr CMsgSetWindowPosition::CMsgSetWindowPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , width_(0)
  , height_(0)
  , min_width_(0)
  , min_height_(0)
  , max_width_(0)
  , max_height_(0)
  , browser_handle_(0u){}
struct CMsgSetWindowPositionDefaultTypeInternal {
  constexpr CMsgSetWindowPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetWindowPositionDefaultTypeInternal() {}
  union {
    CMsgSetWindowPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetWindowPositionDefaultTypeInternal _CMsgSetWindowPosition_default_instance_;
constexpr CMsgShowWindow::CMsgShowWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgShowWindowDefaultTypeInternal {
  constexpr CMsgShowWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgShowWindowDefaultTypeInternal() {}
  union {
    CMsgShowWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgShowWindowDefaultTypeInternal _CMsgShowWindow_default_instance_;
constexpr CMsgHideWindow::CMsgHideWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgHideWindowDefaultTypeInternal {
  constexpr CMsgHideWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHideWindowDefaultTypeInternal() {}
  union {
    CMsgHideWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHideWindowDefaultTypeInternal _CMsgHideWindow_default_instance_;
constexpr CMsgBringWindowToFront::CMsgBringWindowToFront(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgBringWindowToFrontDefaultTypeInternal {
  constexpr CMsgBringWindowToFrontDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBringWindowToFrontDefaultTypeInternal() {}
  union {
    CMsgBringWindowToFront _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBringWindowToFrontDefaultTypeInternal _CMsgBringWindowToFront_default_instance_;
constexpr CMsgSetForegroundWindow::CMsgSetForegroundWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgSetForegroundWindowDefaultTypeInternal {
  constexpr CMsgSetForegroundWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetForegroundWindowDefaultTypeInternal() {}
  union {
    CMsgSetForegroundWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetForegroundWindowDefaultTypeInternal _CMsgSetForegroundWindow_default_instance_;
constexpr CMsgMaximizeRestoreWindow::CMsgMaximizeRestoreWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgMaximizeRestoreWindowDefaultTypeInternal {
  constexpr CMsgMaximizeRestoreWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMaximizeRestoreWindowDefaultTypeInternal() {}
  union {
    CMsgMaximizeRestoreWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMaximizeRestoreWindowDefaultTypeInternal _CMsgMaximizeRestoreWindow_default_instance_;
constexpr CMsgMinimizeWindow::CMsgMinimizeWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgMinimizeWindowDefaultTypeInternal {
  constexpr CMsgMinimizeWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMinimizeWindowDefaultTypeInternal() {}
  union {
    CMsgMinimizeWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMinimizeWindowDefaultTypeInternal _CMsgMinimizeWindow_default_instance_;
constexpr CMsgShowBrowserContextMenu_ContextCommand::CMsgShowBrowserContextMenu_ContextCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct CMsgShowBrowserContextMenu_ContextCommandDefaultTypeInternal {
  constexpr CMsgShowBrowserContextMenu_ContextCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgShowBrowserContextMenu_ContextCommandDefaultTypeInternal() {}
  union {
    CMsgShowBrowserContextMenu_ContextCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgShowBrowserContextMenu_ContextCommandDefaultTypeInternal _CMsgShowBrowserContextMenu_ContextCommand_default_instance_;
constexpr CMsgShowBrowserContextMenu::CMsgShowBrowserContextMenu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_commands_()
  , page_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unfiltered_linurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selection_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , misspelled_word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u)
  , type_flags_(0u)
  , coord_x_(0)
  , coord_y_(0)
  , edit_state_flags_(0u){}
struct CMsgShowBrowserContextMenuDefaultTypeInternal {
  constexpr CMsgShowBrowserContextMenuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgShowBrowserContextMenuDefaultTypeInternal() {}
  union {
    CMsgShowBrowserContextMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgShowBrowserContextMenuDefaultTypeInternal _CMsgShowBrowserContextMenu_default_instance_;
constexpr CMsgHandleContextMenuCommand::CMsgHandleContextMenuCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , command_id_(0){}
struct CMsgHandleContextMenuCommandDefaultTypeInternal {
  constexpr CMsgHandleContextMenuCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHandleContextMenuCommandDefaultTypeInternal() {}
  union {
    CMsgHandleContextMenuCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHandleContextMenuCommandDefaultTypeInternal _CMsgHandleContextMenuCommand_default_instance_;
constexpr CMsgTouchGesture::CMsgTouchGesture(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , id_(0)
  , x_(0)
  , y_(0)
  , gesture_(0u)
  , tap_count_(0u)
  , width_(0)
  , height_(0)
  , pinch_scale_(0){}
struct CMsgTouchGestureDefaultTypeInternal {
  constexpr CMsgTouchGestureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTouchGestureDefaultTypeInternal() {}
  union {
    CMsgTouchGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTouchGestureDefaultTypeInternal _CMsgTouchGesture_default_instance_;
constexpr CMsgSetTouchGesturesToCancel::CMsgSetTouchGesturesToCancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gestures_()
  , browser_handle_(0u){}
struct CMsgSetTouchGesturesToCancelDefaultTypeInternal {
  constexpr CMsgSetTouchGesturesToCancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetTouchGesturesToCancelDefaultTypeInternal() {}
  union {
    CMsgSetTouchGesturesToCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetTouchGesturesToCancelDefaultTypeInternal _CMsgSetTouchGesturesToCancel_default_instance_;
constexpr CMsgImeSetComposition::CMsgImeSetComposition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgImeSetCompositionDefaultTypeInternal {
  constexpr CMsgImeSetCompositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgImeSetCompositionDefaultTypeInternal() {}
  union {
    CMsgImeSetComposition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgImeSetCompositionDefaultTypeInternal _CMsgImeSetComposition_default_instance_;
constexpr CMsgImeCommitText::CMsgImeCommitText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgImeCommitTextDefaultTypeInternal {
  constexpr CMsgImeCommitTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgImeCommitTextDefaultTypeInternal() {}
  union {
    CMsgImeCommitText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgImeCommitTextDefaultTypeInternal _CMsgImeCommitText_default_instance_;
constexpr CMsgImeCancelComposition::CMsgImeCancelComposition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgImeCancelCompositionDefaultTypeInternal {
  constexpr CMsgImeCancelCompositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgImeCancelCompositionDefaultTypeInternal() {}
  union {
    CMsgImeCancelComposition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgImeCancelCompositionDefaultTypeInternal _CMsgImeCancelComposition_default_instance_;
constexpr CMsgImeCompositionRangeChanged::CMsgImeCompositionRangeChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , x_(0u)
  , y_(0u){}
struct CMsgImeCompositionRangeChangedDefaultTypeInternal {
  constexpr CMsgImeCompositionRangeChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgImeCompositionRangeChangedDefaultTypeInternal() {}
  union {
    CMsgImeCompositionRangeChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgImeCompositionRangeChangedDefaultTypeInternal _CMsgImeCompositionRangeChanged_default_instance_;
constexpr CMsgInspectElement::CMsgInspectElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , x_(0u)
  , y_(0u){}
struct CMsgInspectElementDefaultTypeInternal {
  constexpr CMsgInspectElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInspectElementDefaultTypeInternal() {}
  union {
    CMsgInspectElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInspectElementDefaultTypeInternal _CMsgInspectElement_default_instance_;
constexpr CMsgDisableF5::CMsgDisableF5(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , disable_(false){}
struct CMsgDisableF5DefaultTypeInternal {
  constexpr CMsgDisableF5DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDisableF5DefaultTypeInternal() {}
  union {
    CMsgDisableF5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDisableF5DefaultTypeInternal _CMsgDisableF5_default_instance_;
constexpr CMsgStartDownload::CMsgStartDownload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgStartDownloadDefaultTypeInternal {
  constexpr CMsgStartDownloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStartDownloadDefaultTypeInternal() {}
  union {
    CMsgStartDownload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStartDownloadDefaultTypeInternal _CMsgStartDownload_default_instance_;
constexpr CMsgSetTopWindow::CMsgSetTopWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgSetTopWindowDefaultTypeInternal {
  constexpr CMsgSetTopWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetTopWindowDefaultTypeInternal() {}
  union {
    CMsgSetTopWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetTopWindowDefaultTypeInternal _CMsgSetTopWindow_default_instance_;
constexpr CMsgBrowserViewPostMessageToParentRequest::CMsgBrowserViewPostMessageToParentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requesting_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgBrowserViewPostMessageToParentRequestDefaultTypeInternal {
  constexpr CMsgBrowserViewPostMessageToParentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserViewPostMessageToParentRequestDefaultTypeInternal() {}
  union {
    CMsgBrowserViewPostMessageToParentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserViewPostMessageToParentRequestDefaultTypeInternal _CMsgBrowserViewPostMessageToParentRequest_default_instance_;
constexpr CMsgBlockedRequest::CMsgBlockedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgBlockedRequestDefaultTypeInternal {
  constexpr CMsgBlockedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBlockedRequestDefaultTypeInternal() {}
  union {
    CMsgBlockedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBlockedRequestDefaultTypeInternal _CMsgBlockedRequest_default_instance_;
constexpr CMsgBrowserFocusChanged::CMsgBrowserFocusChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , focused_(false){}
struct CMsgBrowserFocusChangedDefaultTypeInternal {
  constexpr CMsgBrowserFocusChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBrowserFocusChangedDefaultTypeInternal() {}
  union {
    CMsgBrowserFocusChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBrowserFocusChangedDefaultTypeInternal _CMsgBrowserFocusChanged_default_instance_;
constexpr CMsgSetProtocolBlockList::CMsgSetProtocolBlockList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , browser_handle_(0u){}
struct CMsgSetProtocolBlockListDefaultTypeInternal {
  constexpr CMsgSetProtocolBlockListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetProtocolBlockListDefaultTypeInternal() {}
  union {
    CMsgSetProtocolBlockList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetProtocolBlockListDefaultTypeInternal _CMsgSetProtocolBlockList_default_instance_;
constexpr CMsgSetForceDeviceScaleFactors::CMsgSetForceDeviceScaleFactors(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dpi_scale_(0)
  , browser_scale_(0){}
struct CMsgSetForceDeviceScaleFactorsDefaultTypeInternal {
  constexpr CMsgSetForceDeviceScaleFactorsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetForceDeviceScaleFactorsDefaultTypeInternal() {}
  union {
    CMsgSetForceDeviceScaleFactors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetForceDeviceScaleFactorsDefaultTypeInternal _CMsgSetForceDeviceScaleFactors_default_instance_;
constexpr CMsgSetUIMode::CMsgSetUIMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ui_mode_(0){}
struct CMsgSetUIModeDefaultTypeInternal {
  constexpr CMsgSetUIModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetUIModeDefaultTypeInternal() {}
  union {
    CMsgSetUIMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetUIModeDefaultTypeInternal _CMsgSetUIMode_default_instance_;
constexpr CMsgPopupCreated::CMsgPopupCreated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u){}
struct CMsgPopupCreatedDefaultTypeInternal {
  constexpr CMsgPopupCreatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPopupCreatedDefaultTypeInternal() {}
  union {
    CMsgPopupCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPopupCreatedDefaultTypeInternal _CMsgPopupCreated_default_instance_;
constexpr CMsgSetVRKeyboardVisibility::CMsgSetVRKeyboardVisibility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : browser_handle_(0u)
  , visible_(false){}
struct CMsgSetVRKeyboardVisibilityDefaultTypeInternal {
  constexpr CMsgSetVRKeyboardVisibilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetVRKeyboardVisibilityDefaultTypeInternal() {}
  union {
    CMsgSetVRKeyboardVisibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetVRKeyboardVisibilityDefaultTypeInternal _CMsgSetVRKeyboardVisibility_default_instance_;
constexpr CMsgRestartJSContext::CMsgRestartJSContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgRestartJSContextDefaultTypeInternal {
  constexpr CMsgRestartJSContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRestartJSContextDefaultTypeInternal() {}
  union {
    CMsgRestartJSContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRestartJSContextDefaultTypeInternal _CMsgRestartJSContext_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_htmlmessages_2eproto[169];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_htmlmessages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_htmlmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_htmlmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgKeyUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgKeyUp, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyUp, keycode_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyUp, modifiers_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyUp, nativekeycode_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, keycode_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, modifiers_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, is_system_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyDown, nativekeycode_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, unichar_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, modifiers_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, keycode_),
  PROTOBUF_FIELD_OFFSET(::CMsgKeyChar, nativekeycode_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDown, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDown, mouse_button_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDown, modifiers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, mouse_button_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, modifiers_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, is_off_panel_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseUp, y_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDblClick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDblClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDblClick, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDblClick, mouse_button_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseDblClick, modifiers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMouseWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMouseWheel, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseWheel, deltax_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseWheel, deltay_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseWheel, modifiers_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgMouseMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMouseMove, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseMove, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseMove, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseMove, modifiers_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgMouseLeave, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMouseLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMouseLeave, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, useragent_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, user_css_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, native_dropdowns_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, dpi_scaling_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, offscreen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, initial_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, initial_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, window_icon_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, borderless_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, vroverlay_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, browser_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, initial_top_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, initial_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, only_allow_trusted_popups_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, initial_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, hwnd_parent_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreate, creation_flags_),
  5,
  0,
  1,
  9,
  6,
  16,
  7,
  8,
  2,
  10,
  3,
  12,
  17,
  15,
  11,
  4,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreateResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserCreateResponse, request_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserRemove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserRemove, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping_AdditionalRoute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping_AdditionalRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping_AdditionalRoute, relative_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping_AdditionalRoute, local_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping_AdditionalRoute, allowed_extensions_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping_AdditionalRoute, url_rewrite_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping, request_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping, default_local_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetLocalFileRequestMapping, routes_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, title_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, header_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, cache_miss_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, bad_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, connection_problem_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, proxy_problem_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserErrorStrings, unknown_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetName, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetName, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSize, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSize, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSize, height_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetMinSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetMinSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetMinSize, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetMinSize, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserSetMinSize, height_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, x_local_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserPosition, y_local_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, dpi_horizontal_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, dpi_vertical_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserResized, display_name_),
  7,
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, post_),
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, pageserial_),
  PROTOBUF_FIELD_OFFSET(::CMsgPostURL, replace_entry_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgAddHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAddHeader, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddHeader, key_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddHeader, value_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgStopLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStopLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStopLoad, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgReload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReload, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGoForward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGoForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGoForward, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGoBack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGoBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGoBack, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgWasHidden, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWasHidden, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWasHidden, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgWasHidden, hidden_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowVisibility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowVisibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowVisibility, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowVisibility, visible_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClearHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClearHistory, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClearAllBrowsingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearAllBrowsingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClearAllBrowsingData, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgCopy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCopy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCopy, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPaste, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPaste, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPaste, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteJavaScript, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteJavaScript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteJavaScript, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgExecuteJavaScript, script_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetFocus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetFocus, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetFocus, focus_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSize, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, scroll_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, scroll_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, zoom_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, visible_),
  PROTOBUF_FIELD_OFFSET(::CMsgHorizontalScrollBarSizeResponse, page_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSize, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, scroll_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, scroll_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, zoom_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, visible_),
  PROTOBUF_FIELD_OFFSET(::CMsgVerticalScrollBarSizeResponse, page_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgFind, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFind, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFind, find_),
  PROTOBUF_FIELD_OFFSET(::CMsgFind, infind_),
  PROTOBUF_FIELD_OFFSET(::CMsgFind, reverse_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgStopFind, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStopFind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStopFind, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetHorizontalScroll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetHorizontalScroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetHorizontalScroll, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetHorizontalScroll, scroll_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetVerticalScroll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetVerticalScroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetVerticalScroll, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetVerticalScroll, scroll_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetZoomLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetZoomLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetZoomLevel, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetZoomLevel, zoom_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgViewSource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgViewSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgViewSource, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserReady, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserReady, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserReady, vr_overlay_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserReady, hwnd_browser_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, postdata_),
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, bisredirect_),
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, pagetitle_),
  PROTOBUF_FIELD_OFFSET(::CMsgURLChanged, bnewnavigation_),
  3,
  0,
  1,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::CHistoryEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHistoryEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHistoryEntry, url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHistoryChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHistoryChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHistoryChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgHistoryChanged, index_),
  PROTOBUF_FIELD_OFFSET(::CMsgHistoryChanged, entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgLoadError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLoadError, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadError, error_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadError, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadError, error_description_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CHTMLHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHTMLHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHTMLHeader, key_),
  PROTOBUF_FIELD_OFFSET(::CHTMLHeader, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, bissecure_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, bhascerterror_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, issuername_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, certname_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, certexpiry_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, ncertbits_),
  PROTOBUF_FIELD_OFFSET(::CHTMLPageSecurityInfo, bisevcert_),
  2,
  3,
  0,
  1,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgFinishedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFinishedRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFinishedRequest, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgFinishedRequest, pagetitle_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLoadedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLoadedRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadedRequest, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadedRequest, pagetitle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadedRequest, headers_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgFavIconURLChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFavIconURLChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFavIconURLChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFavIconURLChanged, urls_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPageSecurity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPageSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPageSecurity, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPageSecurity, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgPageSecurity, security_info_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, target_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, postdata_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequest, bisredirect_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequestResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequestResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartRequestResponse, ballow_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgShowPopup, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHidePopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHidePopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHidePopup, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, wide_),
  PROTOBUF_FIELD_OFFSET(::CMsgSizePopup, tall_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgOpenNewTab, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenNewTab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgOpenNewTab, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenNewTab, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenNewTab, bforeground_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, wide_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, tall_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, popup_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, trusted_creator_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, hwnd_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindow, parent_popup_index_),
  2,
  0,
  9,
  10,
  3,
  4,
  5,
  6,
  1,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindowResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindowResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupHTMLWindowResponse, ballow_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetHTMLTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetHTMLTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetHTMLTitle, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetHTMLTitle, title_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLoadingResource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadingResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLoadingResource, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadingResource, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgStatusText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStatusText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStatusText, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgStatusText, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, cursor_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, custom_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, wide_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, tall_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, xhotspot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCursor, yhotspot_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog_Filter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog_Filter, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog_Filter, patterns_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog_Filter, is_default_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, owning_browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, title_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, initialfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, accept_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, is_save_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, choose_directory_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialog, filters_),
  2,
  3,
  0,
  1,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialogResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialogResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialogResponse, owning_browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialogResponse, bsuccess_),
  PROTOBUF_FIELD_OFFSET(::CMsgFileLoadDialogResponse, files_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgShowToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgShowToolTip, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowToolTip, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateToolTip, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateToolTip, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHideToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHideToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHideToolTip, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSearchResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSearchResults, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSearchResults, activematch_),
  PROTOBUF_FIELD_OFFSET(::CMsgSearchResults, results_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClose, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, wide_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, tall_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, source_pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, source_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSharedPaintBuffers, handle_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgAckSharedPaintBuffers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAckSharedPaintBuffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAckSharedPaintBuffers, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, scrollx_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, scrolly_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, pagescale_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, pageserial_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, avg_frame_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, stddev_sum_frame_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsPaint, long_frame_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, rgba_),
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, combobox_wide_),
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, combobox_tall_),
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, shared_memory_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgComboNeedsPaint, shared_memory_size_),
  1,
  0,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, share_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, scrollx_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, scrolly_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, pagescale_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeedsSharedTexturePaint, pageserial_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, scrollx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, scrolly_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, pagescale_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTexturePaint, pageserial_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoom, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoomResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetZoomResponse, zoom_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPosition, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPosition, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, blivelink_),
  PROTOBUF_FIELD_OFFSET(::CMsgLinkAtPositionResponse, binput_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPosition, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPosition, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPositionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPositionResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPositionResponse, scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToElementAtPositionResponse, duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValue, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValue, scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValue, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValue, y_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgForcePopupsToDirectHWND, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgForcePopupsToDirectHWND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgForcePopupsToDirectHWND, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgForcePopupsToDirectHWND, force_direct_hwnd_popups_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValueResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValueResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgScalePageToValueResponse, zoom_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEG, height_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEGResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEGResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEGResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEGResponse, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgSavePageToJPEGResponse, filename_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgJSAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSAlert, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSAlert, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJSConfirm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSConfirm, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSConfirm, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJSDialogResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSDialogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSDialogResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSDialogResponse, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgCanGoBackAndForward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCanGoBackAndForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCanGoBackAndForward, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgCanGoBackAndForward, bgoback_),
  PROTOBUF_FIELD_OFFSET(::CMsgCanGoBackAndForward, bgoforward_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgOpenSteamURL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenSteamURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgOpenSteamURL, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenSteamURL, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenSteamURL, referrer_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, value_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, path_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, host_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, expires_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, secure_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetCookie, httponly_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSetTargetFrameRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetTargetFrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetTargetFrameRate, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetTargetFrameRate, ntargetframerate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPauseRepaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPauseRepaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPauseRepaint, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFullRepaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFullRepaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFullRepaint, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestFullScreen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestFullScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestFullScreen, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgExitFullScreen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExitFullScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExitFullScreen, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgToggleFindInPageDialog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgToggleFindInPageDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgToggleFindInPageDialog, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetPIDShuttingDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetPIDShuttingDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetPIDShuttingDown, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDisableBackgroundThrottling, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisableBackgroundThrottling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDisableBackgroundThrottling, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAckPIDShuttingDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAckPIDShuttingDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAckPIDShuttingDown, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURL, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURL, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCookie, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCookie, name_),
  PROTOBUF_FIELD_OFFSET(::CCookie, value_),
  PROTOBUF_FIELD_OFFSET(::CCookie, domain_),
  PROTOBUF_FIELD_OFFSET(::CCookie, path_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURLResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURLResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURLResponse, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgGetCookiesForURLResponse, cookies_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, binput_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, elementtagname_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, searchbuttontext_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, bhasmultipleinputs_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, input_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgNodeHasFocus, bismainframe_),
  4,
  5,
  0,
  1,
  2,
  6,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToFocusedElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToFocusedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgZoomToFocusedElement, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeText, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeTextResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeTextResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgFocusedNodeTextResponse, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBuildID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBuildID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBuildID, build_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgOpenDevTools, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgOpenDevTools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgOpenDevTools, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgCloseDevTools, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCloseDevTools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCloseDevTools, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgUnlockH264, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnlockH264, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUnlockH264, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnlockH264, unloccode_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, override_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, override_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, monitor_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, monitor_top_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, monitor_right_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, monitor_bottom_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, usable_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, usable_top_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, usable_right_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenInformationChanged, usable_bottom_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgClearAllCookies, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearAllCookies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClearAllCookies, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgScreenDPI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenDPI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgScreenDPI, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenDPI, dpi_scaling_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAckScreenDPI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAckScreenDPI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAckScreenDPI, browser_handle_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAuthedSteamDomains, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAuthedSteamDomains, domains_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamAuthNeeded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamAuthNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamAuthNeeded, filler_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamAuthCookiesSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamAuthCookiesSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamAuthCookiesSet, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJSRegisterMethod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSRegisterMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSRegisterMethod, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSRegisterMethod, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSRegisterMethod, method_type_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue_JSObjectProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue_JSObjectProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue_JSObjectProperty, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue_JSObjectProperty, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, bool_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, int_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, uint_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, double_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, string_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, function_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, bytes_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, is_array_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, array_values_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, is_object_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSValue, object_properties_),
  6,
  2,
  3,
  4,
  0,
  5,
  1,
  7,
  ~0u,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgJSMethodCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSMethodCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSMethodCall, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSMethodCall, owning_browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSMethodCall, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSMethodCall, arguments_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgJSExecuteCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSExecuteCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSExecuteCallback, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSExecuteCallback, owning_browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSExecuteCallback, function_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSExecuteCallback, arguments_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgJSReleaseCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSReleaseCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSReleaseCallback, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSReleaseCallback, owning_browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSReleaseCallback, function_handle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgJSRaiseException, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSRaiseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgJSRaiseException, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSRaiseException, owning_browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgJSRaiseException, exception_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLoadLocalization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLoadLocalization, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadLocalization, localization_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgLoadLocalization, language_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyUserActivation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyUserActivation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyUserActivation, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetNetFakeLocalSystemState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetNetFakeLocalSystemState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetNetFakeLocalSystemState, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetGameOverlayTargetPIDs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetGameOverlayTargetPIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetGameOverlayTargetPIDs, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetGameOverlayTargetPIDs, target_pid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTargetTextureID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTargetTextureID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTargetTextureID, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTargetTextureID, target_pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameOverlayTargetTextureID, texture_handle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged_DraggableRects, draggable_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgDraggableRegionsChanged, rects_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgResizeGripChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResizeGripChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgResizeGripChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgResizeGripChanged, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgResizeGripChanged, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, min_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, min_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, max_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetWindowPosition, max_height_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgShowWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgShowWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHideWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHideWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHideWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBringWindowToFront, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBringWindowToFront, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBringWindowToFront, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetForegroundWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetForegroundWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetForegroundWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMaximizeRestoreWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMaximizeRestoreWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMaximizeRestoreWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMinimizeWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMinimizeWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMinimizeWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu_ContextCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu_ContextCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu_ContextCommand, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu_ContextCommand, label_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, custom_commands_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, type_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, page_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, coord_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, coord_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, linurl_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, unfiltered_linurl_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, selection_text_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, misspelled_word_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowBrowserContextMenu, edit_state_flags_),
  5,
  ~0u,
  6,
  0,
  7,
  8,
  1,
  2,
  3,
  4,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgHandleContextMenuCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHandleContextMenuCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHandleContextMenuCommand, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgHandleContextMenuCommand, command_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, gesture_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, tap_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgTouchGesture, pinch_scale_),
  0,
  1,
  4,
  2,
  3,
  6,
  7,
  5,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgSetTouchGesturesToCancel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetTouchGesturesToCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetTouchGesturesToCancel, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetTouchGesturesToCancel, gestures_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgImeSetComposition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeSetComposition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgImeSetComposition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeSetComposition, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgImeCommitText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeCommitText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgImeCommitText, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeCommitText, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgImeCancelComposition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeCancelComposition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgImeCancelComposition, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgImeCompositionRangeChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeCompositionRangeChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgImeCompositionRangeChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeCompositionRangeChanged, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgImeCompositionRangeChanged, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgInspectElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInspectElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgInspectElement, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgInspectElement, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgInspectElement, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDisableF5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisableF5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDisableF5, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgDisableF5, disable_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgStartDownload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartDownload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgStartDownload, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartDownload, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetTopWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetTopWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetTopWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserViewPostMessageToParentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserViewPostMessageToParentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserViewPostMessageToParentRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserViewPostMessageToParentRequest, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserViewPostMessageToParentRequest, args_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserViewPostMessageToParentRequest, requesting_url_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBlockedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBlockedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBlockedRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBlockedRequest, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserFocusChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserFocusChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserFocusChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBrowserFocusChanged, focused_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetProtocolBlockList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetProtocolBlockList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetProtocolBlockList, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetProtocolBlockList, list_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetForceDeviceScaleFactors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetForceDeviceScaleFactors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetForceDeviceScaleFactors, dpi_scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetForceDeviceScaleFactors, browser_scale_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSetUIMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetUIMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetUIMode, ui_mode_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPopupCreated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPopupCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPopupCreated, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSetVRKeyboardVisibility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetVRKeyboardVisibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetVRKeyboardVisibility, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetVRKeyboardVisibility, visible_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRestartJSContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgKeyUp)},
  { 13, 23, sizeof(::CMsgKeyDown)},
  { 28, 38, sizeof(::CMsgKeyChar)},
  { 43, 51, sizeof(::CMsgMouseDown)},
  { 54, 65, sizeof(::CMsgMouseUp)},
  { 71, 79, sizeof(::CMsgMouseDblClick)},
  { 82, 91, sizeof(::CMsgMouseWheel)},
  { 95, 104, sizeof(::CMsgMouseMove)},
  { 108, 114, sizeof(::CMsgMouseLeave)},
  { 115, 138, sizeof(::CMsgBrowserCreate)},
  { 156, 163, sizeof(::CMsgBrowserCreateResponse)},
  { 165, 171, sizeof(::CMsgBrowserRemove)},
  { 172, 181, sizeof(::CMsgSetLocalFileRequestMapping_AdditionalRoute)},
  { 185, 194, sizeof(::CMsgSetLocalFileRequestMapping)},
  { 198, 211, sizeof(::CMsgBrowserErrorStrings)},
  { 219, 226, sizeof(::CMsgBrowserSetName)},
  { 228, 236, sizeof(::CMsgBrowserSize)},
  { 239, 247, sizeof(::CMsgBrowserSetMinSize)},
  { 250, 260, sizeof(::CMsgBrowserPosition)},
  { 265, 278, sizeof(::CMsgBrowserResized)},
  { 286, 296, sizeof(::CMsgPostURL)},
  { 301, 309, sizeof(::CMsgAddHeader)},
  { 312, 318, sizeof(::CMsgStopLoad)},
  { 319, 325, sizeof(::CMsgReload)},
  { 326, 332, sizeof(::CMsgGoForward)},
  { 333, 339, sizeof(::CMsgGoBack)},
  { 340, 347, sizeof(::CMsgWasHidden)},
  { 349, 356, sizeof(::CMsgSetWindowVisibility)},
  { 358, 364, sizeof(::CMsgClearHistory)},
  { 365, 371, sizeof(::CMsgClearAllBrowsingData)},
  { 372, 378, sizeof(::CMsgCopy)},
  { 379, 385, sizeof(::CMsgPaste)},
  { 386, 393, sizeof(::CMsgExecuteJavaScript)},
  { 395, 402, sizeof(::CMsgSetFocus)},
  { 404, 410, sizeof(::CMsgHorizontalScrollBarSize)},
  { 411, 422, sizeof(::CMsgHorizontalScrollBarSizeResponse)},
  { 428, 434, sizeof(::CMsgVerticalScrollBarSize)},
  { 435, 446, sizeof(::CMsgVerticalScrollBarSizeResponse)},
  { 452, 461, sizeof(::CMsgFind)},
  { 465, 471, sizeof(::CMsgStopFind)},
  { 472, 479, sizeof(::CMsgSetHorizontalScroll)},
  { 481, 488, sizeof(::CMsgSetVerticalScroll)},
  { 490, 497, sizeof(::CMsgSetZoomLevel)},
  { 499, 505, sizeof(::CMsgViewSource)},
  { 506, 514, sizeof(::CMsgBrowserReady)},
  { 517, 528, sizeof(::CMsgURLChanged)},
  { 534, 540, sizeof(::CHistoryEntry)},
  { 541, 549, sizeof(::CMsgHistoryChanged)},
  { 552, 561, sizeof(::CMsgLoadError)},
  { 565, 572, sizeof(::CHTMLHeader)},
  { 574, 586, sizeof(::CHTMLPageSecurityInfo)},
  { 593, 601, sizeof(::CMsgFinishedRequest)},
  { 604, 613, sizeof(::CMsgLoadedRequest)},
  { 617, 624, sizeof(::CMsgFavIconURLChanged)},
  { 626, 634, sizeof(::CMsgPageSecurity)},
  { 637, 647, sizeof(::CMsgStartRequest)},
  { 652, 659, sizeof(::CMsgStartRequestResponse)},
  { 661, 667, sizeof(::CMsgShowPopup)},
  { 668, 674, sizeof(::CMsgHidePopup)},
  { 675, 685, sizeof(::CMsgSizePopup)},
  { 690, 698, sizeof(::CMsgOpenNewTab)},
  { 701, 717, sizeof(::CMsgPopupHTMLWindow)},
  { 728, 735, sizeof(::CMsgPopupHTMLWindowResponse)},
  { 737, 744, sizeof(::CMsgSetHTMLTitle)},
  { 746, 753, sizeof(::CMsgLoadingResource)},
  { 755, 762, sizeof(::CMsgStatusText)},
  { 764, 776, sizeof(::CMsgSetCursor)},
  { 783, 791, sizeof(::CMsgFileLoadDialog_Filter)},
  { 794, 807, sizeof(::CMsgFileLoadDialog)},
  { 815, 824, sizeof(::CMsgFileLoadDialogResponse)},
  { 828, 835, sizeof(::CMsgShowToolTip)},
  { 837, 844, sizeof(::CMsgUpdateToolTip)},
  { 846, 852, sizeof(::CMsgHideToolTip)},
  { 853, 861, sizeof(::CMsgSearchResults)},
  { 864, 870, sizeof(::CMsgClose)},
  { 871, 882, sizeof(::CMsgSetSharedPaintBuffers)},
  { 888, 894, sizeof(::CMsgAckSharedPaintBuffers)},
  { 895, 908, sizeof(::CMsgNeedsPaint)},
  { 916, 927, sizeof(::CMsgComboNeedsPaint)},
  { 933, 946, sizeof(::CMsgNeedsSharedTexturePaint)},
  { 954, 966, sizeof(::CMsgGameOverlayTexturePaint)},
  { 973, 979, sizeof(::CMsgGetZoom)},
  { 980, 987, sizeof(::CMsgGetZoomResponse)},
  { 989, 997, sizeof(::CMsgLinkAtPosition)},
  { 1000, 1011, sizeof(::CMsgLinkAtPositionResponse)},
  { 1017, 1025, sizeof(::CMsgZoomToElementAtPosition)},
  { 1028, 1036, sizeof(::CMsgZoomToElementAtPositionResponse)},
  { 1039, 1048, sizeof(::CMsgScalePageToValue)},
  { 1052, 1059, sizeof(::CMsgForcePopupsToDirectHWND)},
  { 1061, 1068, sizeof(::CMsgScalePageToValueResponse)},
  { 1070, 1080, sizeof(::CMsgSavePageToJPEG)},
  { 1085, 1093, sizeof(::CMsgSavePageToJPEGResponse)},
  { 1096, 1103, sizeof(::CMsgJSAlert)},
  { 1105, 1112, sizeof(::CMsgJSConfirm)},
  { 1114, 1121, sizeof(::CMsgJSDialogResponse)},
  { 1123, 1131, sizeof(::CMsgCanGoBackAndForward)},
  { 1134, 1142, sizeof(::CMsgOpenSteamURL)},
  { 1145, 1157, sizeof(::CMsgSetCookie)},
  { 1164, 1171, sizeof(::CMsgSetTargetFrameRate)},
  { 1173, 1179, sizeof(::CMsgPauseRepaint)},
  { 1180, 1186, sizeof(::CMsgFullRepaint)},
  { 1187, 1193, sizeof(::CMsgRequestFullScreen)},
  { 1194, 1200, sizeof(::CMsgExitFullScreen)},
  { 1201, 1207, sizeof(::CMsgToggleFindInPageDialog)},
  { 1208, 1214, sizeof(::CMsgSetPIDShuttingDown)},
  { 1215, 1221, sizeof(::CMsgDisableBackgroundThrottling)},
  { 1222, 1228, sizeof(::CMsgAckPIDShuttingDown)},
  { 1229, 1236, sizeof(::CMsgGetCookiesForURL)},
  { 1238, 1247, sizeof(::CCookie)},
  { 1251, 1259, sizeof(::CMsgGetCookiesForURLResponse)},
  { 1262, 1275, sizeof(::CMsgNodeHasFocus)},
  { 1283, 1289, sizeof(::CMsgZoomToFocusedElement)},
  { 1290, 1296, sizeof(::CMsgFocusedNodeText)},
  { 1297, 1304, sizeof(::CMsgFocusedNodeTextResponse)},
  { 1306, 1312, sizeof(::CMsgBuildID)},
  { 1313, 1319, sizeof(::CMsgOpenDevTools)},
  { 1320, 1326, sizeof(::CMsgCloseDevTools)},
  { 1327, 1334, sizeof(::CMsgUnlockH264)},
  { 1336, 1352, sizeof(::CMsgScreenInformationChanged)},
  { 1363, 1369, sizeof(::CMsgClearAllCookies)},
  { 1370, 1377, sizeof(::CMsgScreenDPI)},
  { 1379, 1385, sizeof(::CMsgAckScreenDPI)},
  { 1386, -1, sizeof(::CMsgAuthedSteamDomains)},
  { 1392, 1398, sizeof(::CMsgSteamAuthNeeded)},
  { 1399, 1405, sizeof(::CMsgSteamAuthCookiesSet)},
  { 1406, 1414, sizeof(::CMsgJSRegisterMethod)},
  { 1417, 1424, sizeof(::CMsgJSValue_JSObjectProperty)},
  { 1426, 1442, sizeof(::CMsgJSValue)},
  { 1453, 1462, sizeof(::CMsgJSMethodCall)},
  { 1466, 1475, sizeof(::CMsgJSExecuteCallback)},
  { 1479, 1487, sizeof(::CMsgJSReleaseCallback)},
  { 1490, 1498, sizeof(::CMsgJSRaiseException)},
  { 1501, 1509, sizeof(::CMsgLoadLocalization)},
  { 1512, 1518, sizeof(::CMsgNotifyUserActivation)},
  { 1519, 1525, sizeof(::CMsgSetNetFakeLocalSystemState)},
  { 1526, 1533, sizeof(::CMsgSetGameOverlayTargetPIDs)},
  { 1535, 1543, sizeof(::CMsgGameOverlayTargetTextureID)},
  { 1546, 1556, sizeof(::CMsgDraggableRegionsChanged_DraggableRects)},
  { 1561, 1568, sizeof(::CMsgDraggableRegionsChanged)},
  { 1570, 1578, sizeof(::CMsgResizeGripChanged)},
  { 1581, 1595, sizeof(::CMsgSetWindowPosition)},
  { 1604, 1610, sizeof(::CMsgShowWindow)},
  { 1611, 1617, sizeof(::CMsgHideWindow)},
  { 1618, 1624, sizeof(::CMsgBringWindowToFront)},
  { 1625, 1631, sizeof(::CMsgSetForegroundWindow)},
  { 1632, 1638, sizeof(::CMsgMaximizeRestoreWindow)},
  { 1639, 1645, sizeof(::CMsgMinimizeWindow)},
  { 1646, 1653, sizeof(::CMsgShowBrowserContextMenu_ContextCommand)},
  { 1655, 1671, sizeof(::CMsgShowBrowserContextMenu)},
  { 1682, 1689, sizeof(::CMsgHandleContextMenuCommand)},
  { 1691, 1705, sizeof(::CMsgTouchGesture)},
  { 1714, 1721, sizeof(::CMsgSetTouchGesturesToCancel)},
  { 1723, 1730, sizeof(::CMsgImeSetComposition)},
  { 1732, 1739, sizeof(::CMsgImeCommitText)},
  { 1741, 1747, sizeof(::CMsgImeCancelComposition)},
  { 1748, 1756, sizeof(::CMsgImeCompositionRangeChanged)},
  { 1759, 1767, sizeof(::CMsgInspectElement)},
  { 1770, 1777, sizeof(::CMsgDisableF5)},
  { 1779, 1786, sizeof(::CMsgStartDownload)},
  { 1788, 1794, sizeof(::CMsgSetTopWindow)},
  { 1795, 1804, sizeof(::CMsgBrowserViewPostMessageToParentRequest)},
  { 1808, 1815, sizeof(::CMsgBlockedRequest)},
  { 1817, 1824, sizeof(::CMsgBrowserFocusChanged)},
  { 1826, 1833, sizeof(::CMsgSetProtocolBlockList)},
  { 1835, 1842, sizeof(::CMsgSetForceDeviceScaleFactors)},
  { 1844, 1850, sizeof(::CMsgSetUIMode)},
  { 1851, 1857, sizeof(::CMsgPopupCreated)},
  { 1858, 1865, sizeof(::CMsgSetVRKeyboardVisibility)},
  { 1867, -1, sizeof(::CMsgRestartJSContext)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgKeyUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgKeyDown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgKeyChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMouseDown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMouseUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMouseDblClick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMouseWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMouseMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMouseLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetLocalFileRequestMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserErrorStrings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserSetName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserSetMinSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserResized_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPostURL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAddHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStopLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGoForward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGoBack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWasHidden_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetWindowVisibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearAllBrowsingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCopy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPaste_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExecuteJavaScript_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetFocus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHorizontalScrollBarSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHorizontalScrollBarSizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVerticalScrollBarSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVerticalScrollBarSizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStopFind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetHorizontalScroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetVerticalScroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetZoomLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgViewSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgURLChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHistoryEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHistoryChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLoadError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHTMLHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHTMLPageSecurityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFinishedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLoadedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFavIconURLChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPageSecurity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStartRequestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgShowPopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHidePopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSizePopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgOpenNewTab_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPopupHTMLWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPopupHTMLWindowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetHTMLTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLoadingResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStatusText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetCursor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFileLoadDialog_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFileLoadDialog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFileLoadDialogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgShowToolTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUpdateToolTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHideToolTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSearchResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetSharedPaintBuffers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAckSharedPaintBuffers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNeedsPaint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgComboNeedsPaint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNeedsSharedTexturePaint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameOverlayTexturePaint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGetZoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGetZoomResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLinkAtPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLinkAtPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgZoomToElementAtPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgZoomToElementAtPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgScalePageToValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgForcePopupsToDirectHWND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgScalePageToValueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSavePageToJPEG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSavePageToJPEGResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSConfirm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSDialogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCanGoBackAndForward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgOpenSteamURL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetCookie_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetTargetFrameRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPauseRepaint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFullRepaint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestFullScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExitFullScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgToggleFindInPageDialog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetPIDShuttingDown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDisableBackgroundThrottling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAckPIDShuttingDown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGetCookiesForURL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCookie_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGetCookiesForURLResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNodeHasFocus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgZoomToFocusedElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFocusedNodeText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFocusedNodeTextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBuildID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgOpenDevTools_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCloseDevTools_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUnlockH264_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgScreenInformationChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearAllCookies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgScreenDPI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAckScreenDPI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAuthedSteamDomains_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamAuthNeeded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamAuthCookiesSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSRegisterMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSValue_JSObjectProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSMethodCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSExecuteCallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSReleaseCallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgJSRaiseException_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLoadLocalization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNotifyUserActivation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetNetFakeLocalSystemState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetGameOverlayTargetPIDs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameOverlayTargetTextureID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDraggableRegionsChanged_DraggableRects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDraggableRegionsChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgResizeGripChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetWindowPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgShowWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHideWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBringWindowToFront_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetForegroundWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMaximizeRestoreWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMinimizeWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgShowBrowserContextMenu_ContextCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgShowBrowserContextMenu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHandleContextMenuCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTouchGesture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetTouchGesturesToCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgImeSetComposition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgImeCommitText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgImeCancelComposition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgImeCompositionRangeChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInspectElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDisableF5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStartDownload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetTopWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserViewPostMessageToParentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBlockedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBrowserFocusChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetProtocolBlockList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetForceDeviceScaleFactors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetUIMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPopupCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetVRKeyboardVisibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRestartJSContext_default_instance_),
};

const char descriptor_table_protodef_htmlmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022htmlmessages.proto\032 google/protobuf/de"
  "scriptor.proto\"^\n\tCMsgKeyUp\022\026\n\016browser_h"
  "andle\030\001 \001(\r\022\017\n\007keyCode\030\002 \001(\r\022\021\n\tmodifier"
  "s\030\003 \001(\r\022\025\n\rnativeKeyCode\030\004 \001(\r\"w\n\013CMsgKe"
  "yDown\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007keyCode"
  "\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\022\025\n\ris_system_k"
  "ey\030\004 \001(\010\022\025\n\rnativeKeyCode\030\005 \001(\r\"q\n\013CMsgK"
  "eyChar\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007unicha"
  "r\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\022\017\n\007keyCode\030\004 "
  "\001(\r\022\025\n\rnativeKeyCode\030\005 \001(\r\"P\n\rCMsgMouseD"
  "own\022\026\n\016browser_handle\030\001 \001(\r\022\024\n\014mouse_but"
  "ton\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\"z\n\013CMsgMous"
  "eUp\022\026\n\016browser_handle\030\001 \001(\r\022\024\n\014mouse_but"
  "ton\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\022\024\n\014is_off_p"
  "anel\030\004 \001(\010\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\"T\n\021CMsg"
  "MouseDblClick\022\026\n\016browser_handle\030\001 \001(\r\022\024\n"
  "\014mouse_button\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\"["
  "\n\016CMsgMouseWheel\022\026\n\016browser_handle\030\001 \001(\r"
  "\022\016\n\006deltax\030\002 \001(\005\022\016\n\006deltay\030\003 \001(\005\022\021\n\tmodi"
  "fiers\030\004 \001(\r\"P\n\rCMsgMouseMove\022\026\n\016browser_"
  "handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\021\n\tmo"
  "difiers\030\004 \001(\r\"(\n\016CMsgMouseLeave\022\026\n\016brows"
  "er_handle\030\001 \001(\r\"\335\003\n\021CMsgBrowserCreate\022\022\n"
  "\nrequest_id\030\001 \001(\r\022\021\n\tuseragent\030\003 \001(\t\022\020\n\010"
  "user_css\030\005 \001(\t\022\030\n\020native_dropdowns\030\006 \001(\010"
  "\022\023\n\013dpi_scaling\030\007 \001(\002\022\027\n\toffscreen\030\010 \001(\010"
  ":\004true\022\030\n\rinitial_width\030\t \001(\r:\0010\022\031\n\016init"
  "ial_height\030\n \001(\r:\0010\022\023\n\013window_icon\030\013 \001(\t"
  "\022\031\n\nborderless\030\014 \001(\010:\005false\022\025\n\rvroverlay"
  "_key\030\r \001(\t\022\027\n\014browser_type\030\016 \001(\r:\0010\022 \n\013i"
  "nitial_top\030\017 \001(\005:\013-2147483648\022!\n\014initial"
  "_left\030\020 \001(\005:\013-2147483648\022(\n\031only_allow_t"
  "rusted_popups\030\021 \001(\010:\005false\022\023\n\013initial_ur"
  "l\030\022 \001(\t\022\023\n\013hwnd_parent\030\023 \001(\006\022\031\n\016creation"
  "_flags\030\024 \001(\r:\0010\"G\n\031CMsgBrowserCreateResp"
  "onse\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\nrequest_"
  "id\030\002 \001(\r\"+\n\021CMsgBrowserRemove\022\026\n\016browser"
  "_handle\030\001 \001(\r\"\230\002\n\036CMsgSetLocalFileReques"
  "tMapping\022\026\n\016browser_handle\030\001 \001(\r\022\023\n\013requ"
  "est_url\030\002 \001(\t\022\032\n\022default_local_path\030\003 \001("
  "\t\022\?\n\006routes\030\004 \003(\0132/.CMsgSetLocalFileRequ"
  "estMapping.AdditionalRoute\032l\n\017Additional"
  "Route\022\024\n\014relative_url\030\001 \001(\t\022\022\n\nlocal_pat"
  "h\030\002 \001(\t\022\032\n\022allowed_extensions\030\003 \001(\t\022\023\n\013u"
  "rl_rewrite\030\004 \001(\010\"\271\001\n\027CMsgBrowserErrorStr"
  "ings\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005title\030\002 "
  "\001(\t\022\016\n\006header\030\003 \001(\t\022\022\n\ncache_miss\030\004 \001(\t\022"
  "\017\n\007bad_url\030\005 \001(\t\022\032\n\022connection_problem\030\006"
  " \001(\t\022\025\n\rproxy_problem\030\007 \001(\t\022\017\n\007unknown\030\010"
  " \001(\t\":\n\022CMsgBrowserSetName\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"H\n\017CMsgBrowserS"
  "ize\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005width\030\002 \001"
  "(\001\022\016\n\006height\030\003 \001(\001\"N\n\025CMsgBrowserSetMinS"
  "ize\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005width\030\002 \001"
  "(\001\022\016\n\006height\030\003 \001(\001\"e\n\023CMsgBrowserPositio"
  "n\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\001\022\t\n\001"
  "y\030\003 \001(\001\022\017\n\007x_local\030\004 \001(\001\022\017\n\007y_local\030\005 \001("
  "\001\"\245\001\n\022CMsgBrowserResized\022\026\n\016browser_hand"
  "le\030\001 \001(\r\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\r\n\005width\030"
  "\004 \001(\001\022\016\n\006height\030\005 \001(\001\022\026\n\016dpi_horizontal\030"
  "\006 \001(\001\022\024\n\014dpi_vertical\030\007 \001(\001\022\024\n\014display_n"
  "ame\030\010 \001(\t\"k\n\013CMsgPostURL\022\026\n\016browser_hand"
  "le\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\014\n\004post\030\003 \001(\t\022\022\n\np"
  "ageserial\030\004 \001(\r\022\025\n\rreplace_entry\030\005 \001(\010\"C"
  "\n\rCMsgAddHeader\022\026\n\016browser_handle\030\001 \001(\r\022"
  "\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"&\n\014CMsgStopL"
  "oad\022\026\n\016browser_handle\030\001 \001(\r\"$\n\nCMsgReloa"
  "d\022\026\n\016browser_handle\030\001 \001(\r\"\'\n\rCMsgGoForwa"
  "rd\022\026\n\016browser_handle\030\001 \001(\r\"$\n\nCMsgGoBack"
  "\022\026\n\016browser_handle\030\001 \001(\r\"7\n\rCMsgWasHidde"
  "n\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006hidden\030\002 \001("
  "\010\"B\n\027CMsgSetWindowVisibility\022\026\n\016browser_"
  "handle\030\001 \001(\r\022\017\n\007visible\030\002 \001(\010\"*\n\020CMsgCle"
  "arHistory\022\026\n\016browser_handle\030\001 \001(\r\"2\n\030CMs"
  "gClearAllBrowsingData\022\026\n\016browser_handle\030"
  "\001 \001(\r\"\"\n\010CMsgCopy\022\026\n\016browser_handle\030\001 \001("
  "\r\"#\n\tCMsgPaste\022\026\n\016browser_handle\030\001 \001(\r\"\?"
  "\n\025CMsgExecuteJavaScript\022\026\n\016browser_handl"
  "e\030\001 \001(\r\022\016\n\006script\030\002 \001(\t\"5\n\014CMsgSetFocus\022"
  "\026\n\016browser_handle\030\001 \001(\r\022\r\n\005focus\030\002 \001(\010\"5"
  "\n\033CMsgHorizontalScrollBarSize\022\026\n\016browser"
  "_handle\030\001 \001(\r\"\223\001\n#CMsgHorizontalScrollBa"
  "rSizeResponse\022\026\n\016browser_handle\030\001 \001(\r\022\022\n"
  "\nscroll_max\030\006 \001(\r\022\016\n\006scroll\030\007 \001(\r\022\014\n\004zoo"
  "m\030\010 \001(\002\022\017\n\007visible\030\t \001(\010\022\021\n\tpage_size\030\n "
  "\001(\r\"3\n\031CMsgVerticalScrollBarSize\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\"\221\001\n!CMsgVerticalScrollB"
  "arSizeResponse\022\026\n\016browser_handle\030\001 \001(\r\022\022"
  "\n\nscroll_max\030\006 \001(\r\022\016\n\006scroll\030\007 \001(\r\022\014\n\004zo"
  "om\030\010 \001(\002\022\017\n\007visible\030\t \001(\010\022\021\n\tpage_size\030\n"
  " \001(\r\"X\n\010CMsgFind\022\026\n\016browser_handle\030\001 \001(\r"
  "\022\014\n\004find\030\002 \001(\t\022\016\n\006infind\030\003 \001(\010\022\026\n\007revers"
  "e\030\004 \001(\010:\005false\"&\n\014CMsgStopFind\022\026\n\016browse"
  "r_handle\030\001 \001(\r\"A\n\027CMsgSetHorizontalScrol"
  "l\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006scroll\030\002 \001("
  "\r\"\?\n\025CMsgSetVerticalScroll\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\016\n\006scroll\030\002 \001(\r\"8\n\020CMsgSetZoo"
  "mLevel\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004zoom\030\002"
  " \001(\001\"(\n\016CMsgViewSource\022\026\n\016browser_handle"
  "\030\001 \001(\r\"X\n\020CMsgBrowserReady\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\026\n\016vr_overlay_key\030\002 \001(\t\022\024\n\014hw"
  "nd_browser\030\003 \001(\006\"\207\001\n\016CMsgURLChanged\022\026\n\016b"
  "rowser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010post"
  "Data\030\003 \001(\t\022\023\n\013bIsRedirect\030\004 \001(\010\022\021\n\tpaget"
  "itle\030\005 \001(\t\022\026\n\016bNewNavigation\030\006 \001(\010\"\034\n\rCH"
  "istoryEntry\022\013\n\003url\030\001 \001(\t\"\\\n\022CMsgHistoryC"
  "hanged\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005index\030"
  "\002 \001(\r\022\037\n\007entries\030\003 \003(\0132\016.CHistoryEntry\"c"
  "\n\rCMsgLoadError\022\026\n\016browser_handle\030\001 \001(\r\022"
  "\022\n\nerror_code\030\002 \001(\005\022\013\n\003url\030\003 \001(\t\022\031\n\021erro"
  "r_description\030\004 \001(\t\")\n\013CHTMLHeader\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\274\001\n\025CHTMLPageSecu"
  "rityInfo\022\030\n\tbIsSecure\030\001 \001(\010:\005false\022\034\n\rbH"
  "asCertError\030\002 \001(\010:\005false\022\022\n\nissuerName\030\003"
  " \001(\t\022\020\n\010certName\030\004 \001(\t\022\025\n\ncertExpiry\030\005 \001"
  "(\005:\0010\022\024\n\tnCertBits\030\006 \001(\005:\0010\022\030\n\tbIsEVCert"
  "\030\007 \001(\010:\005false\"M\n\023CMsgFinishedRequest\022\026\n\016"
  "browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\021\n\tpag"
  "eTitle\030\003 \001(\t\"j\n\021CMsgLoadedRequest\022\026\n\016bro"
  "wser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\021\n\tpageTi"
  "tle\030\003 \001(\t\022\035\n\007headers\030\005 \003(\0132\014.CHTMLHeader"
  "\"=\n\025CMsgFavIconURLChanged\022\026\n\016browser_han"
  "dle\030\001 \001(\r\022\014\n\004urls\030\002 \003(\t\"f\n\020CMsgPageSecur"
  "ity\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t"
  "\022-\n\rsecurity_info\030\003 \001(\0132\026.CHTMLPageSecur"
  "ityInfo\"n\n\020CMsgStartRequest\022\026\n\016browser_h"
  "andle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\016\n\006target\030\003 \001(\t"
  "\022\020\n\010postData\030\004 \001(\t\022\023\n\013bIsRedirect\030\005 \001(\010\""
  "B\n\030CMsgStartRequestResponse\022\026\n\016browser_h"
  "andle\030\001 \001(\r\022\016\n\006bAllow\030\002 \001(\010\"\'\n\rCMsgShowP"
  "opup\022\026\n\016browser_handle\030\001 \001(\r\"\'\n\rCMsgHide"
  "Popup\022\026\n\016browser_handle\030\001 \001(\r\"Y\n\rCMsgSiz"
  "ePopup\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001("
  "\005\022\t\n\001y\030\003 \001(\005\022\014\n\004wide\030\004 \001(\r\022\014\n\004tall\030\005 \001(\r"
  "\"J\n\016CMsgOpenNewTab\022\026\n\016browser_handle\030\001 \001"
  "(\r\022\013\n\003url\030\002 \001(\t\022\023\n\013bForeground\030\003 \001(\010\"\354\001\n"
  "\023CMsgPopupHTMLWindow\022\026\n\016browser_handle\030\001"
  " \001(\r\022\013\n\003url\030\002 \001(\t\022\026\n\001x\030\003 \001(\005:\013-214748364"
  "8\022\026\n\001y\030\004 \001(\005:\013-2147483648\022\014\n\004wide\030\005 \001(\r\022"
  "\014\n\004tall\030\006 \001(\r\022\023\n\013popup_index\030\007 \001(\r\022\027\n\017tr"
  "usted_creator\030\010 \001(\010\022\014\n\004name\030\t \001(\t\022\014\n\004hwn"
  "d\030\n \001(\004\022\032\n\022parent_popup_index\030\013 \001(\r\"E\n\033C"
  "MsgPopupHTMLWindowResponse\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\016\n\006bAllow\030\002 \001(\010\"9\n\020CMsgSetHTM"
  "LTitle\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005title\030"
  "\002 \001(\t\":\n\023CMsgLoadingResource\022\026\n\016browser_"
  "handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\"6\n\016CMsgStatusT"
  "ext\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004text\030\002 \001("
  "\t\"\214\001\n\rCMsgSetCursor\022\026\n\016browser_handle\030\001 "
  "\001(\r\022\016\n\006cursor\030\002 \001(\r\022\023\n\013custom_data\030\003 \001(\014"
  "\022\014\n\004wide\030\004 \001(\r\022\014\n\004tall\030\005 \001(\r\022\020\n\010xhotspot"
  "\030\006 \001(\r\022\020\n\010yhotspot\030\007 \001(\r\"\233\002\n\022CMsgFileLoa"
  "dDialog\022\026\n\016browser_handle\030\001 \001(\r\022\035\n\025ownin"
  "g_browser_handle\030\002 \001(\r\022\r\n\005title\030\003 \001(\t\022\023\n"
  "\013initialFile\030\004 \001(\t\022\024\n\014accept_types\030\005 \003(\t"
  "\022\017\n\007is_save\030\006 \001(\010\022\030\n\020choose_directory\030\007 "
  "\001(\010\022+\n\007filters\030\010 \003(\0132\032.CMsgFileLoadDialo"
  "g.Filter\032<\n\006Filter\022\014\n\004name\030\001 \001(\t\022\020\n\010patt"
  "erns\030\002 \003(\t\022\022\n\nis_default\030\003 \001(\010\"t\n\032CMsgFi"
  "leLoadDialogResponse\022\026\n\016browser_handle\030\001"
  " \001(\r\022\035\n\025owning_browser_handle\030\002 \001(\r\022\020\n\010b"
  "success\030\003 \001(\010\022\r\n\005files\030\004 \003(\t\"7\n\017CMsgShow"
  "ToolTip\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004text\030"
  "\002 \001(\t\"9\n\021CMsgUpdateToolTip\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\")\n\017CMsgHideTool"
  "Tip\022\026\n\016browser_handle\030\001 \001(\r\"Q\n\021CMsgSearc"
  "hResults\022\026\n\016browser_handle\030\001 \001(\r\022\023\n\013acti"
  "veMatch\030\002 \001(\005\022\017\n\007results\030\003 \001(\005\"#\n\tCMsgCl"
  "ose\022\026\n\016browser_handle\030\001 \001(\r\"\212\001\n\031CMsgSetS"
  "haredPaintBuffers\022\026\n\016browser_handle\030\001 \001("
  "\r\022\014\n\004wide\030\002 \001(\r\022\014\n\004tall\030\003 \001(\r\022\022\n\nsource_"
  "pid\030\004 \001(\004\022\025\n\rsource_handle\030\005 \001(\004\022\016\n\006hand"
  "le\030\006 \001(\004\"3\n\031CMsgAckSharedPaintBuffers\022\026\n"
  "\016browser_handle\030\001 \001(\r\"\273\001\n\016CMsgNeedsPaint"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007scrollx\030\n \001("
  "\r\022\017\n\007scrolly\030\013 \001(\r\022\021\n\tpagescale\030\014 \001(\002\022\022\n"
  "\npageserial\030\017 \001(\r\022\024\n\014avg_frame_ms\030\024 \001(\r\022"
  "\033\n\023stddev_sum_frame_ms\030\025 \001(\002\022\025\n\rlong_fra"
  "me_ms\030\026 \001(\r\"\257\001\n\023CMsgComboNeedsPaint\022\026\n\016b"
  "rowser_handle\030\001 \001(\r\022\014\n\004rgba\030\002 \001(\004\022\030\n\rcom"
  "bobox_wide\030\003 \001(\r:\0010\022\030\n\rcombobox_tall\030\004 \001"
  "(\r:\0010\022\037\n\024shared_memory_handle\030\005 \001(\004:\0010\022\035"
  "\n\022shared_memory_size\030\007 \001(\004:\0010\"\263\001\n\033CMsgNe"
  "edsSharedTexturePaint\022\026\n\016browser_handle\030"
  "\001 \001(\r\022\024\n\014share_handle\030\002 \001(\r\022\r\n\005width\030\003 \001"
  "(\r\022\016\n\006height\030\004 \001(\r\022\017\n\007scrollx\030\005 \001(\r\022\017\n\007s"
  "crolly\030\006 \001(\r\022\021\n\tpagescale\030\007 \001(\002\022\022\n\npages"
  "erial\030\010 \001(\r\"\235\001\n\033CMsgGameOverlayTexturePa"
  "int\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005width\030\003 \001"
  "(\r\022\016\n\006height\030\004 \001(\r\022\017\n\007scrollx\030\005 \001(\r\022\017\n\007s"
  "crolly\030\006 \001(\r\022\021\n\tpagescale\030\007 \001(\002\022\022\n\npages"
  "erial\030\010 \001(\r\"%\n\013CMsgGetZoom\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\";\n\023CMsgGetZoomResponse\022\026\n\016bro"
  "wser_handle\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\002\"B\n\022CMsgL"
  "inkAtPosition\022\026\n\016browser_handle\030\001 \001(\r\022\t\n"
  "\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"z\n\032CMsgLinkAtPositio"
  "nResponse\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002"
  " \001(\r\022\t\n\001y\030\003 \001(\r\022\013\n\003url\030\004 \001(\t\022\021\n\tblivelin"
  "k\030\005 \001(\010\022\016\n\006binput\030\006 \001(\010\"K\n\033CMsgZoomToEle"
  "mentAtPosition\022\026\n\016browser_handle\030\001 \001(\r\022\t"
  "\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"^\n#CMsgZoomToElemen"
  "tAtPositionResponse\022\026\n\016browser_handle\030\001 "
  "\001(\r\022\r\n\005scale\030\002 \001(\002\022\020\n\010duration\030\003 \001(\002\"S\n\024"
  "CMsgScalePageToValue\022\026\n\016browser_handle\030\001"
  " \001(\r\022\r\n\005scale\030\002 \001(\002\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001("
  "\002\"W\n\033CMsgForcePopupsToDirectHWND\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022 \n\030force_direct_hwnd_po"
  "pups\030\002 \001(\010\"D\n\034CMsgScalePageToValueRespon"
  "se\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\002"
  "\"j\n\022CMsgSavePageToJPEG\022\026\n\016browser_handle"
  "\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010filename\030\003 \001(\t\022\r\n"
  "\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\"S\n\032CMsgSave"
  "PageToJPEGResponse\022\026\n\016browser_handle\030\001 \001"
  "(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010filename\030\003 \001(\t\"6\n\013CMs"
  "gJSAlert\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007mess"
  "age\030\002 \001(\t\"8\n\rCMsgJSConfirm\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\">\n\024CMsgJSDia"
  "logResponse\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006r"
  "esult\030\002 \001(\010\"V\n\027CMsgCanGoBackAndForward\022\026"
  "\n\016browser_handle\030\001 \001(\r\022\017\n\007bgoback\030\002 \001(\010\022"
  "\022\n\nbgoforward\030\003 \001(\010\"I\n\020CMsgOpenSteamURL\022"
  "\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010"
  "referrer\030\003 \001(\t\"z\n\rCMsgSetCookie\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\014\n\004hos"
  "t\030\004 \001(\t\022\017\n\007expires\030\005 \001(\r\022\016\n\006secure\030\006 \001(\010"
  "\022\020\n\010httponly\030\007 \001(\010\"J\n\026CMsgSetTargetFrame"
  "Rate\022\026\n\016browser_handle\030\001 \001(\r\022\030\n\020nTargetF"
  "rameRate\030\002 \001(\r\"*\n\020CMsgPauseRepaint\022\026\n\016br"
  "owser_handle\030\001 \001(\r\")\n\017CMsgFullRepaint\022\026\n"
  "\016browser_handle\030\001 \001(\r\"/\n\025CMsgRequestFull"
  "Screen\022\026\n\016browser_handle\030\001 \001(\r\",\n\022CMsgEx"
  "itFullScreen\022\026\n\016browser_handle\030\001 \001(\r\"4\n\032"
  "CMsgToggleFindInPageDialog\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\"0\n\026CMsgSetPIDShuttingDown\022\026\n\016"
  "browser_handle\030\001 \001(\r\"9\n\037CMsgDisableBackg"
  "roundThrottling\022\026\n\016browser_handle\030\001 \001(\r\""
  "0\n\026CMsgAckPIDShuttingDown\022\026\n\016browser_han"
  "dle\030\001 \001(\r\";\n\024CMsgGetCookiesForURL\022\026\n\016bro"
  "wser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\"D\n\007CCooki"
  "e\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\016\n\006domain"
  "\030\003 \001(\t\022\014\n\004path\030\004 \001(\t\"^\n\034CMsgGetCookiesFo"
  "rURLResponse\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003"
  "url\030\002 \001(\t\022\031\n\007cookies\030\003 \003(\0132\010.CCookie\"\300\001\n"
  "\020CMsgNodeHasFocus\022\026\n\016browser_handle\030\001 \001("
  "\r\022\016\n\006bInput\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\026\n\016eleme"
  "nttagname\030\004 \001(\t\022\030\n\020searchbuttontext\030\005 \001("
  "\t\022\032\n\022bHasMultipleInputs\030\006 \001(\010\022\022\n\ninput_t"
  "ype\030\007 \001(\t\022\024\n\014bIsMainFrame\030\010 \001(\010\"2\n\030CMsgZ"
  "oomToFocusedElement\022\026\n\016browser_handle\030\001 "
  "\001(\r\"-\n\023CMsgFocusedNodeText\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\"D\n\033CMsgFocusedNodeTextRespons"
  "e\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005value\030\002 \001(\t"
  "\"\037\n\013CMsgBuildID\022\020\n\010build_id\030\001 \001(\004\"*\n\020CMs"
  "gOpenDevTools\022\026\n\016browser_handle\030\001 \001(\r\"+\n"
  "\021CMsgCloseDevTools\022\026\n\016browser_handle\030\001 \001"
  "(\r\";\n\016CMsgUnlockH264\022\026\n\016browser_handle\030\001"
  " \001(\r\022\021\n\tunloccode\030\002 \001(\t\"\227\002\n\034CMsgScreenIn"
  "formationChanged\022\026\n\016browser_handle\030\001 \001(\r"
  "\022\026\n\016override_width\030\002 \001(\r\022\027\n\017override_hei"
  "ght\030\003 \001(\r\022\024\n\014monitor_left\030\004 \001(\r\022\023\n\013monit"
  "or_top\030\005 \001(\r\022\025\n\rmonitor_right\030\006 \001(\r\022\026\n\016m"
  "onitor_bottom\030\007 \001(\r\022\023\n\013usable_left\030\010 \001(\r"
  "\022\022\n\nusable_top\030\t \001(\r\022\024\n\014usable_right\030\n \001"
  "(\r\022\025\n\rusable_bottom\030\013 \001(\r\"-\n\023CMsgClearAl"
  "lCookies\022\026\n\016browser_handle\030\001 \001(\r\"<\n\rCMsg"
  "ScreenDPI\022\026\n\016browser_handle\030\001 \001(\r\022\023\n\013dpi"
  "_scaling\030\002 \001(\002\"*\n\020CMsgAckScreenDPI\022\026\n\016br"
  "owser_handle\030\001 \001(\r\")\n\026CMsgAuthedSteamDom"
  "ains\022\017\n\007domains\030\001 \003(\t\"%\n\023CMsgSteamAuthNe"
  "eded\022\016\n\006filler\030\001 \001(\010\"*\n\027CMsgSteamAuthCoo"
  "kiesSet\022\017\n\007success\030\001 \001(\010\"\210\001\n\024CMsgJSRegis"
  "terMethod\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004nam"
  "e\030\002 \001(\t\022J\n\013method_type\030\003 \001(\0162\026.EJSRegist"
  "erMethodType:\035EJSRegisterMethodType_Inva"
  "lid\"\344\002\n\013CMsgJSValue\022\022\n\nbool_value\030\001 \001(\010\022"
  "\021\n\tint_value\030\002 \001(\005\022\022\n\nuint_value\030\003 \001(\r\022\024"
  "\n\014double_value\030\004 \001(\001\022\024\n\014string_value\030\005 \001"
  "(\t\022\027\n\017function_handle\030\006 \001(\004\022\023\n\013bytes_val"
  "ue\030\014 \001(\014\022\020\n\010is_array\030\010 \001(\010\022\"\n\014array_valu"
  "es\030\t \003(\0132\014.CMsgJSValue\022\021\n\tis_object\030\n \001("
  "\010\0228\n\021object_properties\030\013 \003(\0132\035.CMsgJSVal"
  "ue.JSObjectProperty\032=\n\020JSObjectProperty\022"
  "\014\n\004name\030\001 \001(\t\022\033\n\005value\030\002 \001(\0132\014.CMsgJSVal"
  "ue\"x\n\020CMsgJSMethodCall\022\026\n\016browser_handle"
  "\030\001 \001(\r\022\035\n\025owning_browser_handle\030\002 \001(\r\022\014\n"
  "\004name\030\003 \001(\t\022\037\n\targuments\030\004 \003(\0132\014.CMsgJSV"
  "alue\"\210\001\n\025CMsgJSExecuteCallback\022\026\n\016browse"
  "r_handle\030\001 \001(\r\022\035\n\025owning_browser_handle\030"
  "\002 \001(\r\022\027\n\017function_handle\030\003 \001(\004\022\037\n\targume"
  "nts\030\004 \003(\0132\014.CMsgJSValue\"g\n\025CMsgJSRelease"
  "Callback\022\026\n\016browser_handle\030\001 \001(\r\022\035\n\025owni"
  "ng_browser_handle\030\002 \001(\r\022\027\n\017function_hand"
  "le\030\003 \001(\004\"`\n\024CMsgJSRaiseException\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\035\n\025owning_browser_handl"
  "e\030\002 \001(\r\022\021\n\texception\030\003 \001(\t\"[\n\024CMsgLoadLo"
  "calization\022\026\n\016browser_handle\030\001 \001(\r\022\031\n\021lo"
  "calization_path\030\002 \001(\t\022\020\n\010language\030\003 \001(\t\""
  "2\n\030CMsgNotifyUserActivation\022\026\n\016browser_h"
  "andle\030\001 \001(\r\"/\n\036CMsgSetNetFakeLocalSystem"
  "State\022\r\n\005state\030\001 \001(\r\"J\n\034CMsgSetGameOverl"
  "ayTargetPIDs\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\n"
  "target_pid\030\002 \003(\r\"d\n\036CMsgGameOverlayTarge"
  "tTextureID\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\nta"
  "rget_pid\030\002 \001(\r\022\026\n\016texture_handle\030\003 \001(\r\"\313"
  "\001\n\033CMsgDraggableRegionsChanged\022\026\n\016browse"
  "r_handle\030\001 \001(\r\022:\n\005rects\030\002 \003(\0132+.CMsgDrag"
  "gableRegionsChanged.DraggableRects\032X\n\016Dr"
  "aggableRects\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005wi"
  "dth\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\021\n\tdraggable\030\005"
  " \001(\010\"N\n\025CMsgResizeGripChanged\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003"
  " \001(\005\"\262\001\n\025CMsgSetWindowPosition\022\026\n\016browse"
  "r_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\r\n\005"
  "width\030\004 \001(\001\022\016\n\006height\030\005 \001(\001\022\021\n\tmin_width"
  "\030\006 \001(\001\022\022\n\nmin_height\030\007 \001(\001\022\021\n\tmax_width\030"
  "\010 \001(\001\022\022\n\nmax_height\030\t \001(\001\"(\n\016CMsgShowWin"
  "dow\022\026\n\016browser_handle\030\001 \001(\r\"(\n\016CMsgHideW"
  "indow\022\026\n\016browser_handle\030\001 \001(\r\"0\n\026CMsgBri"
  "ngWindowToFront\022\026\n\016browser_handle\030\001 \001(\r\""
  "1\n\027CMsgSetForegroundWindow\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\"3\n\031CMsgMaximizeRestoreWindow\022"
  "\026\n\016browser_handle\030\001 \001(\r\",\n\022CMsgMinimizeW"
  "indow\022\026\n\016browser_handle\030\001 \001(\r\"\344\002\n\032CMsgSh"
  "owBrowserContextMenu\022\026\n\016browser_handle\030\001"
  " \001(\r\022C\n\017custom_commands\030\002 \003(\0132*.CMsgShow"
  "BrowserContextMenu.ContextCommand\022\022\n\ntyp"
  "e_flags\030\003 \001(\r\022\020\n\010page_url\030\004 \001(\t\022\017\n\007coord"
  "_x\030\005 \001(\005\022\017\n\007coord_y\030\006 \001(\005\022\016\n\006linurl\030\007 \001("
  "\t\022\031\n\021unfiltered_linurl\030\010 \001(\t\022\026\n\016selectio"
  "n_text\030\t \001(\t\022\027\n\017misspelled_word\030\n \001(\t\022\030\n"
  "\020edit_state_flags\030\013 \001(\r\032+\n\016ContextComman"
  "d\022\n\n\002id\030\001 \001(\005\022\r\n\005label\030\002 \001(\t\"J\n\034CMsgHand"
  "leContextMenuCommand\022\026\n\016browser_handle\030\001"
  " \001(\r\022\022\n\ncommand_id\030\002 \001(\005\"\244\001\n\020CMsgTouchGe"
  "sture\022\026\n\016browser_handle\030\001 \001(\r\022\n\n\002id\030\002 \001("
  "\005\022\017\n\007gesture\030\003 \001(\r\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005 \001(\001"
  "\022\r\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022\021\n\ttap_c"
  "ount\030\010 \001(\r\022\023\n\013pinch_scale\030\t \001(\001\"H\n\034CMsgS"
  "etTouchGesturesToCancel\022\026\n\016browser_handl"
  "e\030\001 \001(\r\022\020\n\010gestures\030\002 \003(\r\"=\n\025CMsgImeSetC"
  "omposition\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004te"
  "xt\030\002 \001(\t\"9\n\021CMsgImeCommitText\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"2\n\030CMsgImeCa"
  "ncelComposition\022\026\n\016browser_handle\030\001 \001(\r\""
  "N\n\036CMsgImeCompositionRangeChanged\022\026\n\016bro"
  "wser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\""
  "B\n\022CMsgInspectElement\022\026\n\016browser_handle\030"
  "\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"8\n\rCMsgDisab"
  "leF5\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007disable\030"
  "\002 \001(\010\"8\n\021CMsgStartDownload\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\"*\n\020CMsgSetTopWin"
  "dow\022\026\n\016browser_handle\030\001 \001(\r\"z\n)CMsgBrows"
  "erViewPostMessageToParentRequest\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\014\n\004arg"
  "s\030\003 \001(\t\022\026\n\016requesting_url\030\004 \001(\t\"9\n\022CMsgB"
  "lockedRequest\022\026\n\016browser_handle\030\001 \001(\r\022\013\n"
  "\003url\030\002 \001(\t\"B\n\027CMsgBrowserFocusChanged\022\026\n"
  "\016browser_handle\030\001 \001(\r\022\017\n\007focused\030\002 \001(\010\"@"
  "\n\030CMsgSetProtocolBlockList\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\014\n\004list\030\002 \001(\t\"J\n\036CMsgSetForce"
  "DeviceScaleFactors\022\021\n\tdpi_scale\030\001 \001(\001\022\025\n"
  "\rbrowser_scale\030\002 \001(\001\" \n\rCMsgSetUIMode\022\017\n"
  "\007ui_mode\030\001 \001(\005\"*\n\020CMsgPopupCreated\022\026\n\016br"
  "owser_handle\030\001 \001(\r\"F\n\033CMsgSetVRKeyboardV"
  "isibility\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007vis"
  "ible\030\002 \001(\010\"\026\n\024CMsgRestartJSContext*\245\001\n\025E"
  "JSRegisterMethodType\022!\n\035EJSRegisterMetho"
  "dType_Invalid\020\000\022\"\n\036EJSRegisterMethodType"
  "_Function\020\001\022\"\n\036EJSRegisterMethodType_Cal"
  "lback\020\002\022!\n\035EJSRegisterMethodType_Promise"
  "\020\003B\037H\001\200\001\000\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_htmlmessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_htmlmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_htmlmessages_2eproto = {
  false, false, 14835, descriptor_table_protodef_htmlmessages_2eproto, "htmlmessages.proto", 
  &descriptor_table_htmlmessages_2eproto_once, descriptor_table_htmlmessages_2eproto_deps, 1, 169,
  schemas, file_default_instances, TableStruct_htmlmessages_2eproto::offsets,
  file_level_metadata_htmlmessages_2eproto, file_level_enum_descriptors_htmlmessages_2eproto, file_level_service_descriptors_htmlmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_htmlmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_htmlmessages_2eproto);
  return descriptor_table_htmlmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_htmlmessages_2eproto(&descriptor_table_htmlmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EJSRegisterMethodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_htmlmessages_2eproto);
  return file_level_enum_descriptors_htmlmessages_2eproto[0];
}
bool EJSRegisterMethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgKeyUp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgKeyUp>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keycode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nativekeycode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgKeyUp::CMsgKeyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKeyUp)
}
CMsgKeyUp::CMsgKeyUp(const CMsgKeyUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&nativekeycode_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
  // @@protoc_insertion_point(copy_constructor:CMsgKeyUp)
}

void CMsgKeyUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nativekeycode_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
}

CMsgKeyUp::~CMsgKeyUp() {
  // @@protoc_insertion_point(destructor:CMsgKeyUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgKeyUp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgKeyUp::ArenaDtor(void* object) {
  CMsgKeyUp* _this = reinterpret_cast< CMsgKeyUp* >(object);
  (void)_this;
}
void CMsgKeyUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgKeyUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgKeyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKeyUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nativekeycode_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKeyUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 keyCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_keycode(&has_bits);
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nativeKeyCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nativekeycode(&has_bits);
          nativekeycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgKeyUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKeyUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keycode(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifiers(), target);
  }

  // optional uint32 nativeKeyCode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nativekeycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKeyUp)
  return target;
}

size_t CMsgKeyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKeyUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 keyCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_keycode());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

    // optional uint32 nativeKeyCode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nativekeycode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKeyUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgKeyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgKeyUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgKeyUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgKeyUp)
    MergeFrom(*source);
  }
}

void CMsgKeyUp::MergeFrom(const CMsgKeyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKeyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      nativekeycode_ = from.nativekeycode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgKeyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyUp::CopyFrom(const CMsgKeyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKeyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyUp::IsInitialized() const {
  return true;
}

void CMsgKeyUp::InternalSwap(CMsgKeyUp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgKeyUp, nativekeycode_)
      + sizeof(CMsgKeyUp::nativekeycode_)
      - PROTOBUF_FIELD_OFFSET(CMsgKeyUp, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKeyUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgKeyDown::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgKeyDown>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keycode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_system_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nativekeycode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgKeyDown::CMsgKeyDown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKeyDown)
}
CMsgKeyDown::CMsgKeyDown(const CMsgKeyDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&nativekeycode_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
  // @@protoc_insertion_point(copy_constructor:CMsgKeyDown)
}

void CMsgKeyDown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nativekeycode_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
}

CMsgKeyDown::~CMsgKeyDown() {
  // @@protoc_insertion_point(destructor:CMsgKeyDown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgKeyDown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgKeyDown::ArenaDtor(void* object) {
  CMsgKeyDown* _this = reinterpret_cast< CMsgKeyDown* >(object);
  (void)_this;
}
void CMsgKeyDown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgKeyDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgKeyDown::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKeyDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nativekeycode_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKeyDown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 keyCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_keycode(&has_bits);
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_system_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_system_key(&has_bits);
          is_system_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nativeKeyCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nativekeycode(&has_bits);
          nativekeycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgKeyDown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKeyDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keycode(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifiers(), target);
  }

  // optional bool is_system_key = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_system_key(), target);
  }

  // optional uint32 nativeKeyCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nativekeycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKeyDown)
  return target;
}

size_t CMsgKeyDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKeyDown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 keyCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_keycode());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

    // optional bool is_system_key = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 nativeKeyCode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nativekeycode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKeyDown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgKeyDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyDown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgKeyDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgKeyDown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgKeyDown)
    MergeFrom(*source);
  }
}

void CMsgKeyDown::MergeFrom(const CMsgKeyDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKeyDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_system_key_ = from.is_system_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      nativekeycode_ = from.nativekeycode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyDown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgKeyDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyDown::CopyFrom(const CMsgKeyDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKeyDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyDown::IsInitialized() const {
  return true;
}

void CMsgKeyDown::InternalSwap(CMsgKeyDown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgKeyDown, nativekeycode_)
      + sizeof(CMsgKeyDown::nativekeycode_)
      - PROTOBUF_FIELD_OFFSET(CMsgKeyDown, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKeyDown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgKeyChar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgKeyChar>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unichar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keycode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nativekeycode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgKeyChar::CMsgKeyChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKeyChar)
}
CMsgKeyChar::CMsgKeyChar(const CMsgKeyChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&nativekeycode_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
  // @@protoc_insertion_point(copy_constructor:CMsgKeyChar)
}

void CMsgKeyChar::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nativekeycode_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
}

CMsgKeyChar::~CMsgKeyChar() {
  // @@protoc_insertion_point(destructor:CMsgKeyChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgKeyChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgKeyChar::ArenaDtor(void* object) {
  CMsgKeyChar* _this = reinterpret_cast< CMsgKeyChar* >(object);
  (void)_this;
}
void CMsgKeyChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgKeyChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgKeyChar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKeyChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nativekeycode_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(nativekeycode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKeyChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unichar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unichar(&has_bits);
          unichar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 keyCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_keycode(&has_bits);
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nativeKeyCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nativekeycode(&has_bits);
          nativekeycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgKeyChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKeyChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 unichar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unichar(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifiers(), target);
  }

  // optional uint32 keyCode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keycode(), target);
  }

  // optional uint32 nativeKeyCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nativekeycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKeyChar)
  return target;
}

size_t CMsgKeyChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKeyChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 unichar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unichar());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

    // optional uint32 keyCode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_keycode());
    }

    // optional uint32 nativeKeyCode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nativekeycode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKeyChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgKeyChar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgKeyChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgKeyChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgKeyChar)
    MergeFrom(*source);
  }
}

void CMsgKeyChar::MergeFrom(const CMsgKeyChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKeyChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      unichar_ = from.unichar_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000010u) {
      nativekeycode_ = from.nativekeycode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgKeyChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyChar::CopyFrom(const CMsgKeyChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKeyChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyChar::IsInitialized() const {
  return true;
}

void CMsgKeyChar::InternalSwap(CMsgKeyChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgKeyChar, nativekeycode_)
      + sizeof(CMsgKeyChar::nativekeycode_)
      - PROTOBUF_FIELD_OFFSET(CMsgKeyChar, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKeyChar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMouseDown::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMouseDown>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mouse_button(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMouseDown::CMsgMouseDown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMouseDown)
}
CMsgMouseDown::CMsgMouseDown(const CMsgMouseDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:CMsgMouseDown)
}

void CMsgMouseDown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseDown::~CMsgMouseDown() {
  // @@protoc_insertion_point(destructor:CMsgMouseDown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMouseDown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMouseDown::ArenaDtor(void* object) {
  CMsgMouseDown* _this = reinterpret_cast< CMsgMouseDown* >(object);
  (void)_this;
}
void CMsgMouseDown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMouseDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMouseDown::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMouseDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMouseDown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mouse_button = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mouse_button(&has_bits);
          mouse_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMouseDown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMouseDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifiers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMouseDown)
  return target;
}

size_t CMsgMouseDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMouseDown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseDown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMouseDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseDown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMouseDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMouseDown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMouseDown)
    MergeFrom(*source);
  }
}

void CMsgMouseDown::MergeFrom(const CMsgMouseDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMouseDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseDown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMouseDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDown::CopyFrom(const CMsgMouseDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMouseDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDown::IsInitialized() const {
  return true;
}

void CMsgMouseDown::InternalSwap(CMsgMouseDown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMouseDown, modifiers_)
      + sizeof(CMsgMouseDown::modifiers_)
      - PROTOBUF_FIELD_OFFSET(CMsgMouseDown, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMouseDown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMouseUp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMouseUp>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mouse_button(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_off_panel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgMouseUp::CMsgMouseUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMouseUp)
}
CMsgMouseUp::CMsgMouseUp(const CMsgMouseUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgMouseUp)
}

void CMsgMouseUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgMouseUp::~CMsgMouseUp() {
  // @@protoc_insertion_point(destructor:CMsgMouseUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMouseUp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMouseUp::ArenaDtor(void* object) {
  CMsgMouseUp* _this = reinterpret_cast< CMsgMouseUp* >(object);
  (void)_this;
}
void CMsgMouseUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMouseUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMouseUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMouseUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMouseUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mouse_button = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mouse_button(&has_bits);
          mouse_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_off_panel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_off_panel(&has_bits);
          is_off_panel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMouseUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMouseUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifiers(), target);
  }

  // optional bool is_off_panel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_off_panel(), target);
  }

  // optional int32 x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // optional int32 y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMouseUp)
  return target;
}

size_t CMsgMouseUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMouseUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

    // optional bool is_off_panel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMouseUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMouseUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMouseUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMouseUp)
    MergeFrom(*source);
  }
}

void CMsgMouseUp::MergeFrom(const CMsgMouseUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMouseUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_off_panel_ = from.is_off_panel_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMouseUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseUp::CopyFrom(const CMsgMouseUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMouseUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseUp::IsInitialized() const {
  return true;
}

void CMsgMouseUp::InternalSwap(CMsgMouseUp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMouseUp, y_)
      + sizeof(CMsgMouseUp::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgMouseUp, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMouseUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMouseDblClick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMouseDblClick>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mouse_button(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMouseDblClick::CMsgMouseDblClick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMouseDblClick)
}
CMsgMouseDblClick::CMsgMouseDblClick(const CMsgMouseDblClick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:CMsgMouseDblClick)
}

void CMsgMouseDblClick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseDblClick::~CMsgMouseDblClick() {
  // @@protoc_insertion_point(destructor:CMsgMouseDblClick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMouseDblClick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMouseDblClick::ArenaDtor(void* object) {
  CMsgMouseDblClick* _this = reinterpret_cast< CMsgMouseDblClick* >(object);
  (void)_this;
}
void CMsgMouseDblClick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMouseDblClick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMouseDblClick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMouseDblClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMouseDblClick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mouse_button = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mouse_button(&has_bits);
          mouse_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMouseDblClick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMouseDblClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_modifiers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMouseDblClick)
  return target;
}

size_t CMsgMouseDblClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMouseDblClick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseDblClick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMouseDblClick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseDblClick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMouseDblClick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMouseDblClick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMouseDblClick)
    MergeFrom(*source);
  }
}

void CMsgMouseDblClick::MergeFrom(const CMsgMouseDblClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMouseDblClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseDblClick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMouseDblClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDblClick::CopyFrom(const CMsgMouseDblClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMouseDblClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDblClick::IsInitialized() const {
  return true;
}

void CMsgMouseDblClick::InternalSwap(CMsgMouseDblClick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMouseDblClick, modifiers_)
      + sizeof(CMsgMouseDblClick::modifiers_)
      - PROTOBUF_FIELD_OFFSET(CMsgMouseDblClick, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMouseDblClick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMouseWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMouseWheel>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deltax(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deltay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMouseWheel::CMsgMouseWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMouseWheel)
}
CMsgMouseWheel::CMsgMouseWheel(const CMsgMouseWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:CMsgMouseWheel)
}

void CMsgMouseWheel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseWheel::~CMsgMouseWheel() {
  // @@protoc_insertion_point(destructor:CMsgMouseWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMouseWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMouseWheel::ArenaDtor(void* object) {
  CMsgMouseWheel* _this = reinterpret_cast< CMsgMouseWheel* >(object);
  (void)_this;
}
void CMsgMouseWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMouseWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMouseWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMouseWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMouseWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deltax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deltax(&has_bits);
          deltax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deltay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deltay(&has_bits);
          deltay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMouseWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMouseWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 deltax = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_deltax(), target);
  }

  // optional int32 deltay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_deltay(), target);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_modifiers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMouseWheel)
  return target;
}

size_t CMsgMouseWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMouseWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 deltax = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deltax());
    }

    // optional int32 deltay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deltay());
    }

    // optional uint32 modifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMouseWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMouseWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMouseWheel)
    MergeFrom(*source);
  }
}

void CMsgMouseWheel::MergeFrom(const CMsgMouseWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      deltax_ = from.deltax_;
    }
    if (cached_has_bits & 0x00000004u) {
      deltay_ = from.deltay_;
    }
    if (cached_has_bits & 0x00000008u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseWheel::CopyFrom(const CMsgMouseWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseWheel::IsInitialized() const {
  return true;
}

void CMsgMouseWheel::InternalSwap(CMsgMouseWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMouseWheel, modifiers_)
      + sizeof(CMsgMouseWheel::modifiers_)
      - PROTOBUF_FIELD_OFFSET(CMsgMouseWheel, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMouseWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMouseMove::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMouseMove>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMouseMove::CMsgMouseMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMouseMove)
}
CMsgMouseMove::CMsgMouseMove(const CMsgMouseMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:CMsgMouseMove)
}

void CMsgMouseMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseMove::~CMsgMouseMove() {
  // @@protoc_insertion_point(destructor:CMsgMouseMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMouseMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMouseMove::ArenaDtor(void* object) {
  CMsgMouseMove* _this = reinterpret_cast< CMsgMouseMove* >(object);
  (void)_this;
}
void CMsgMouseMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMouseMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMouseMove::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMouseMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMouseMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMouseMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMouseMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_modifiers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMouseMove)
  return target;
}

size_t CMsgMouseMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMouseMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional uint32 modifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMouseMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMouseMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMouseMove)
    MergeFrom(*source);
  }
}

void CMsgMouseMove::MergeFrom(const CMsgMouseMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseMove::CopyFrom(const CMsgMouseMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseMove::IsInitialized() const {
  return true;
}

void CMsgMouseMove::InternalSwap(CMsgMouseMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMouseMove, modifiers_)
      + sizeof(CMsgMouseMove::modifiers_)
      - PROTOBUF_FIELD_OFFSET(CMsgMouseMove, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMouseMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMouseLeave::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMouseLeave>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMouseLeave::CMsgMouseLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMouseLeave)
}
CMsgMouseLeave::CMsgMouseLeave(const CMsgMouseLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgMouseLeave)
}

void CMsgMouseLeave::SharedCtor() {
browser_handle_ = 0u;
}

CMsgMouseLeave::~CMsgMouseLeave() {
  // @@protoc_insertion_point(destructor:CMsgMouseLeave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMouseLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMouseLeave::ArenaDtor(void* object) {
  CMsgMouseLeave* _this = reinterpret_cast< CMsgMouseLeave* >(object);
  (void)_this;
}
void CMsgMouseLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMouseLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMouseLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMouseLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMouseLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMouseLeave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMouseLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMouseLeave)
  return target;
}

size_t CMsgMouseLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMouseLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMouseLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMouseLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMouseLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMouseLeave)
    MergeFrom(*source);
  }
}

void CMsgMouseLeave::MergeFrom(const CMsgMouseLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMouseLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgMouseLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMouseLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseLeave::CopyFrom(const CMsgMouseLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMouseLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseLeave::IsInitialized() const {
  return true;
}

void CMsgMouseLeave::InternalSwap(CMsgMouseLeave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMouseLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserCreate>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_useragent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_css(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_native_dropdowns(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dpi_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_initial_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_initial_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_window_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_borderless(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vroverlay_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_browser_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_initial_top(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_initial_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_only_allow_trusted_popups(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_initial_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hwnd_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_creation_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgBrowserCreate::CMsgBrowserCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserCreate)
}
CMsgBrowserCreate::CMsgBrowserCreate(const CMsgBrowserCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  useragent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_useragent()) {
    useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_useragent(), 
      GetArena());
  }
  user_css_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_css()) {
    user_css_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_css(), 
      GetArena());
  }
  window_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_window_icon()) {
    window_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_icon(), 
      GetArena());
  }
  vroverlay_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vroverlay_key()) {
    vroverlay_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vroverlay_key(), 
      GetArena());
  }
  initial_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_initial_url()) {
    initial_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_url(), 
      GetArena());
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_top_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(initial_top_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserCreate)
}

void CMsgBrowserCreate::SharedCtor() {
useragent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_css_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
window_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vroverlay_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&creation_flags_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(creation_flags_));
initial_left_ = -2147483647 - 1;
offscreen_ = true;
initial_top_ = -2147483647 - 1;
}

CMsgBrowserCreate::~CMsgBrowserCreate() {
  // @@protoc_insertion_point(destructor:CMsgBrowserCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  useragent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_css_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vroverlay_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserCreate::ArenaDtor(void* object) {
  CMsgBrowserCreate* _this = reinterpret_cast< CMsgBrowserCreate* >(object);
  (void)_this;
}
void CMsgBrowserCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      useragent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_css_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      window_icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      vroverlay_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      initial_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initial_width_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(initial_width_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&initial_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_flags_) -
        reinterpret_cast<char*>(&initial_height_)) + sizeof(creation_flags_));
    initial_left_ = -2147483647 - 1;
  }
  if (cached_has_bits & 0x00030000u) {
    offscreen_ = true;
    initial_top_ = -2147483647 - 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string useragent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_useragent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserCreate.useragent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_css = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_css();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserCreate.user_css");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool native_dropdowns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_native_dropdowns(&has_bits);
          native_dropdowns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dpi_scaling = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_dpi_scaling(&has_bits);
          dpi_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool offscreen = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_offscreen(&has_bits);
          offscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_width = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_initial_width(&has_bits);
          initial_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_height = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_initial_height(&has_bits);
          initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string window_icon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_window_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserCreate.window_icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool borderless = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_borderless(&has_bits);
          borderless_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vroverlay_key = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_vroverlay_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserCreate.vroverlay_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 browser_type = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_browser_type(&has_bits);
          browser_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 initial_top = 15 [default = -2147483648];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_initial_top(&has_bits);
          initial_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 initial_left = 16 [default = -2147483648];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_initial_left(&has_bits);
          initial_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_allow_trusted_popups = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_only_allow_trusted_popups(&has_bits);
          only_allow_trusted_popups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string initial_url = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_initial_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserCreate.initial_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hwnd_parent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_hwnd_parent(&has_bits);
          hwnd_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 creation_flags = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_creation_flags(&has_bits);
          creation_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // optional string useragent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_useragent().data(), static_cast<int>(this->_internal_useragent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserCreate.useragent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_useragent(), target);
  }

  // optional string user_css = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_css().data(), static_cast<int>(this->_internal_user_css().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserCreate.user_css");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_css(), target);
  }

  // optional bool native_dropdowns = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_native_dropdowns(), target);
  }

  // optional float dpi_scaling = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_dpi_scaling(), target);
  }

  // optional bool offscreen = 8 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_offscreen(), target);
  }

  // optional uint32 initial_width = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_initial_width(), target);
  }

  // optional uint32 initial_height = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_initial_height(), target);
  }

  // optional string window_icon = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_icon().data(), static_cast<int>(this->_internal_window_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserCreate.window_icon");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_window_icon(), target);
  }

  // optional bool borderless = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_borderless(), target);
  }

  // optional string vroverlay_key = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vroverlay_key().data(), static_cast<int>(this->_internal_vroverlay_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserCreate.vroverlay_key");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_vroverlay_key(), target);
  }

  // optional uint32 browser_type = 14 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_browser_type(), target);
  }

  // optional int32 initial_top = 15 [default = -2147483648];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_initial_top(), target);
  }

  // optional int32 initial_left = 16 [default = -2147483648];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_initial_left(), target);
  }

  // optional bool only_allow_trusted_popups = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_only_allow_trusted_popups(), target);
  }

  // optional string initial_url = 18;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_initial_url().data(), static_cast<int>(this->_internal_initial_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserCreate.initial_url");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_initial_url(), target);
  }

  // optional fixed64 hwnd_parent = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(19, this->_internal_hwnd_parent(), target);
  }

  // optional uint32 creation_flags = 20 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_creation_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserCreate)
  return target;
}

size_t CMsgBrowserCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string useragent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_useragent());
    }

    // optional string user_css = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_css());
    }

    // optional string window_icon = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_icon());
    }

    // optional string vroverlay_key = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vroverlay_key());
    }

    // optional string initial_url = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initial_url());
    }

    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_request_id());
    }

    // optional float dpi_scaling = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 initial_width = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_width());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 initial_height = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_height());
    }

    // optional bool native_dropdowns = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool borderless = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool only_allow_trusted_popups = 17 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional uint32 browser_type = 14 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_type());
    }

    // optional fixed64 hwnd_parent = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional uint32 creation_flags = 20 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creation_flags());
    }

    // optional int32 initial_left = 16 [default = -2147483648];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_initial_left());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool offscreen = 8 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional int32 initial_top = 15 [default = -2147483648];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_initial_top());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserCreate)
    MergeFrom(*source);
  }
}

void CMsgBrowserCreate::MergeFrom(const CMsgBrowserCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_useragent(from._internal_useragent());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_css(from._internal_user_css());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_window_icon(from._internal_window_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_vroverlay_key(from._internal_vroverlay_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_initial_url(from._internal_initial_url());
    }
    if (cached_has_bits & 0x00000020u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      dpi_scaling_ = from.dpi_scaling_;
    }
    if (cached_has_bits & 0x00000080u) {
      initial_width_ = from.initial_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      initial_height_ = from.initial_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      native_dropdowns_ = from.native_dropdowns_;
    }
    if (cached_has_bits & 0x00000400u) {
      borderless_ = from.borderless_;
    }
    if (cached_has_bits & 0x00000800u) {
      only_allow_trusted_popups_ = from.only_allow_trusted_popups_;
    }
    if (cached_has_bits & 0x00001000u) {
      browser_type_ = from.browser_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      hwnd_parent_ = from.hwnd_parent_;
    }
    if (cached_has_bits & 0x00004000u) {
      creation_flags_ = from.creation_flags_;
    }
    if (cached_has_bits & 0x00008000u) {
      initial_left_ = from.initial_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      offscreen_ = from.offscreen_;
    }
    if (cached_has_bits & 0x00020000u) {
      initial_top_ = from.initial_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreate::CopyFrom(const CMsgBrowserCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreate::IsInitialized() const {
  return true;
}

void CMsgBrowserCreate::InternalSwap(CMsgBrowserCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  useragent_.Swap(&other->useragent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_css_.Swap(&other->user_css_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  window_icon_.Swap(&other->window_icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vroverlay_key_.Swap(&other->vroverlay_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initial_url_.Swap(&other->initial_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserCreate, creation_flags_)
      + sizeof(CMsgBrowserCreate::creation_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserCreate, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
  swap(initial_left_, other->initial_left_);
  swap(offscreen_, other->offscreen_);
  swap(initial_top_, other->initial_top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserCreateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserCreateResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBrowserCreateResponse::CMsgBrowserCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserCreateResponse)
}
CMsgBrowserCreateResponse::CMsgBrowserCreateResponse(const CMsgBrowserCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserCreateResponse)
}

void CMsgBrowserCreateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(request_id_));
}

CMsgBrowserCreateResponse::~CMsgBrowserCreateResponse() {
  // @@protoc_insertion_point(destructor:CMsgBrowserCreateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserCreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBrowserCreateResponse::ArenaDtor(void* object) {
  CMsgBrowserCreateResponse* _this = reinterpret_cast< CMsgBrowserCreateResponse* >(object);
  (void)_this;
}
void CMsgBrowserCreateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_id_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserCreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserCreateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserCreateResponse)
  return target;
}

size_t CMsgBrowserCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserCreateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 request_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_request_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserCreateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserCreateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserCreateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgBrowserCreateResponse::MergeFrom(const CMsgBrowserCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserCreateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreateResponse::CopyFrom(const CMsgBrowserCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreateResponse::IsInitialized() const {
  return true;
}

void CMsgBrowserCreateResponse::InternalSwap(CMsgBrowserCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserCreateResponse, request_id_)
      + sizeof(CMsgBrowserCreateResponse::request_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserCreateResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserCreateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserRemove::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserRemove>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBrowserRemove::CMsgBrowserRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserRemove)
}
CMsgBrowserRemove::CMsgBrowserRemove(const CMsgBrowserRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserRemove)
}

void CMsgBrowserRemove::SharedCtor() {
browser_handle_ = 0u;
}

CMsgBrowserRemove::~CMsgBrowserRemove() {
  // @@protoc_insertion_point(destructor:CMsgBrowserRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBrowserRemove::ArenaDtor(void* object) {
  CMsgBrowserRemove* _this = reinterpret_cast< CMsgBrowserRemove* >(object);
  (void)_this;
}
void CMsgBrowserRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserRemove)
  return target;
}

size_t CMsgBrowserRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserRemove)
    MergeFrom(*source);
  }
}

void CMsgBrowserRemove::MergeFrom(const CMsgBrowserRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgBrowserRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserRemove::CopyFrom(const CMsgBrowserRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserRemove::IsInitialized() const {
  return true;
}

void CMsgBrowserRemove::InternalSwap(CMsgBrowserRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetLocalFileRequestMapping_AdditionalRoute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetLocalFileRequestMapping_AdditionalRoute>()._has_bits_);
  static void set_has_relative_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allowed_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetLocalFileRequestMapping.AdditionalRoute)
}
CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relative_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_relative_url()) {
    relative_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relative_url(), 
      GetArena());
  }
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_local_path()) {
    local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_path(), 
      GetArena());
  }
  allowed_extensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_allowed_extensions()) {
    allowed_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allowed_extensions(), 
      GetArena());
  }
  url_rewrite_ = from.url_rewrite_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetLocalFileRequestMapping.AdditionalRoute)
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SharedCtor() {
relative_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
allowed_extensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_rewrite_ = false;
}

CMsgSetLocalFileRequestMapping_AdditionalRoute::~CMsgSetLocalFileRequestMapping_AdditionalRoute() {
  // @@protoc_insertion_point(destructor:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  relative_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allowed_extensions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::ArenaDtor(void* object) {
  CMsgSetLocalFileRequestMapping_AdditionalRoute* _this = reinterpret_cast< CMsgSetLocalFileRequestMapping_AdditionalRoute* >(object);
  (void)_this;
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      relative_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      local_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      allowed_extensions_.ClearNonDefaultToEmpty();
    }
  }
  url_rewrite_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetLocalFileRequestMapping_AdditionalRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string relative_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_relative_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string local_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_local_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string allowed_extensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_allowed_extensions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool url_rewrite = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_url_rewrite(&has_bits);
          url_rewrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetLocalFileRequestMapping_AdditionalRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relative_url().data(), static_cast<int>(this->_internal_relative_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relative_url(), target);
  }

  // optional string local_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_path().data(), static_cast<int>(this->_internal_local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_path(), target);
  }

  // optional string allowed_extensions = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_allowed_extensions().data(), static_cast<int>(this->_internal_allowed_extensions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_allowed_extensions(), target);
  }

  // optional bool url_rewrite = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_url_rewrite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return target;
}

size_t CMsgSetLocalFileRequestMapping_AdditionalRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string relative_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_relative_url());
    }

    // optional string local_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_path());
    }

    // optional string allowed_extensions = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_allowed_extensions());
    }

    // optional bool url_rewrite = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetLocalFileRequestMapping_AdditionalRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetLocalFileRequestMapping_AdditionalRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetLocalFileRequestMapping.AdditionalRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetLocalFileRequestMapping.AdditionalRoute)
    MergeFrom(*source);
  }
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::MergeFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_relative_url(from._internal_relative_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_local_path(from._internal_local_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_allowed_extensions(from._internal_allowed_extensions());
    }
    if (cached_has_bits & 0x00000008u) {
      url_rewrite_ = from.url_rewrite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::CopyFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetLocalFileRequestMapping_AdditionalRoute::IsInitialized() const {
  return true;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::InternalSwap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relative_url_.Swap(&other->relative_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_path_.Swap(&other->local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  allowed_extensions_.Swap(&other->allowed_extensions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(url_rewrite_, other->url_rewrite_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetLocalFileRequestMapping_AdditionalRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetLocalFileRequestMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetLocalFileRequestMapping>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_local_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetLocalFileRequestMapping)
}
CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping(const CMsgSetLocalFileRequestMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_request_url()) {
    request_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_url(), 
      GetArena());
  }
  default_local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_default_local_path()) {
    default_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_local_path(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetLocalFileRequestMapping)
}

void CMsgSetLocalFileRequestMapping::SharedCtor() {
request_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
default_local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgSetLocalFileRequestMapping::~CMsgSetLocalFileRequestMapping() {
  // @@protoc_insertion_point(destructor:CMsgSetLocalFileRequestMapping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetLocalFileRequestMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetLocalFileRequestMapping::ArenaDtor(void* object) {
  CMsgSetLocalFileRequestMapping* _this = reinterpret_cast< CMsgSetLocalFileRequestMapping* >(object);
  (void)_this;
}
void CMsgSetLocalFileRequestMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetLocalFileRequestMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetLocalFileRequestMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetLocalFileRequestMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      default_local_path_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetLocalFileRequestMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string request_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetLocalFileRequestMapping.request_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_local_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_default_local_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetLocalFileRequestMapping.default_local_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetLocalFileRequestMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetLocalFileRequestMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string request_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_request_url().data(), static_cast<int>(this->_internal_request_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetLocalFileRequestMapping.request_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_url(), target);
  }

  // optional string default_local_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_local_path().data(), static_cast<int>(this->_internal_default_local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetLocalFileRequestMapping.default_local_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_default_local_path(), target);
  }

  // repeated .CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetLocalFileRequestMapping)
  return target;
}

size_t CMsgSetLocalFileRequestMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetLocalFileRequestMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string request_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_url());
    }

    // optional string default_local_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_local_path());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetLocalFileRequestMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetLocalFileRequestMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetLocalFileRequestMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetLocalFileRequestMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetLocalFileRequestMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetLocalFileRequestMapping)
    MergeFrom(*source);
  }
}

void CMsgSetLocalFileRequestMapping::MergeFrom(const CMsgSetLocalFileRequestMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetLocalFileRequestMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_request_url(from._internal_request_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_default_local_path(from._internal_default_local_path());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetLocalFileRequestMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetLocalFileRequestMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetLocalFileRequestMapping::CopyFrom(const CMsgSetLocalFileRequestMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetLocalFileRequestMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetLocalFileRequestMapping::IsInitialized() const {
  return true;
}

void CMsgSetLocalFileRequestMapping::InternalSwap(CMsgSetLocalFileRequestMapping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  routes_.InternalSwap(&other->routes_);
  request_url_.Swap(&other->request_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  default_local_path_.Swap(&other->default_local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetLocalFileRequestMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserErrorStrings::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserErrorStrings>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cache_miss(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bad_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_connection_problem(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proxy_problem(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgBrowserErrorStrings::CMsgBrowserErrorStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserErrorStrings)
}
CMsgBrowserErrorStrings::CMsgBrowserErrorStrings(const CMsgBrowserErrorStrings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_header()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArena());
  }
  cache_miss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cache_miss()) {
    cache_miss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_miss(), 
      GetArena());
  }
  bad_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bad_url()) {
    bad_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bad_url(), 
      GetArena());
  }
  connection_problem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connection_problem()) {
    connection_problem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_problem(), 
      GetArena());
  }
  proxy_problem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proxy_problem()) {
    proxy_problem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxy_problem(), 
      GetArena());
  }
  unknown_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unknown()) {
    unknown_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unknown(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserErrorStrings)
}

void CMsgBrowserErrorStrings::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cache_miss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bad_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
connection_problem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proxy_problem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unknown_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgBrowserErrorStrings::~CMsgBrowserErrorStrings() {
  // @@protoc_insertion_point(destructor:CMsgBrowserErrorStrings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserErrorStrings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_miss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bad_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_problem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_problem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unknown_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserErrorStrings::ArenaDtor(void* object) {
  CMsgBrowserErrorStrings* _this = reinterpret_cast< CMsgBrowserErrorStrings* >(object);
  (void)_this;
}
void CMsgBrowserErrorStrings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserErrorStrings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserErrorStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserErrorStrings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cache_miss_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bad_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      connection_problem_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      proxy_problem_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      unknown_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserErrorStrings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.header");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cache_miss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cache_miss();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.cache_miss");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bad_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bad_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.bad_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connection_problem = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_connection_problem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.connection_problem");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proxy_problem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_proxy_problem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.proxy_problem");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unknown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_unknown();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserErrorStrings.unknown");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserErrorStrings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserErrorStrings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string header = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.header");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_header(), target);
  }

  // optional string cache_miss = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cache_miss().data(), static_cast<int>(this->_internal_cache_miss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.cache_miss");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cache_miss(), target);
  }

  // optional string bad_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bad_url().data(), static_cast<int>(this->_internal_bad_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.bad_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bad_url(), target);
  }

  // optional string connection_problem = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_problem().data(), static_cast<int>(this->_internal_connection_problem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.connection_problem");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_connection_problem(), target);
  }

  // optional string proxy_problem = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proxy_problem().data(), static_cast<int>(this->_internal_proxy_problem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.proxy_problem");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_proxy_problem(), target);
  }

  // optional string unknown = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unknown().data(), static_cast<int>(this->_internal_unknown().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserErrorStrings.unknown");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserErrorStrings)
  return target;
}

size_t CMsgBrowserErrorStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserErrorStrings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string header = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header());
    }

    // optional string cache_miss = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_miss());
    }

    // optional string bad_url = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bad_url());
    }

    // optional string connection_problem = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_problem());
    }

    // optional string proxy_problem = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proxy_problem());
    }

    // optional string unknown = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unknown());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserErrorStrings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserErrorStrings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserErrorStrings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserErrorStrings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserErrorStrings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserErrorStrings)
    MergeFrom(*source);
  }
}

void CMsgBrowserErrorStrings::MergeFrom(const CMsgBrowserErrorStrings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserErrorStrings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cache_miss(from._internal_cache_miss());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bad_url(from._internal_bad_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_connection_problem(from._internal_connection_problem());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_proxy_problem(from._internal_proxy_problem());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_unknown(from._internal_unknown());
    }
    if (cached_has_bits & 0x00000080u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserErrorStrings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserErrorStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserErrorStrings::CopyFrom(const CMsgBrowserErrorStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserErrorStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserErrorStrings::IsInitialized() const {
  return true;
}

void CMsgBrowserErrorStrings::InternalSwap(CMsgBrowserErrorStrings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cache_miss_.Swap(&other->cache_miss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bad_url_.Swap(&other->bad_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connection_problem_.Swap(&other->connection_problem_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proxy_problem_.Swap(&other->proxy_problem_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unknown_.Swap(&other->unknown_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserErrorStrings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserSetName::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserSetName>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBrowserSetName::CMsgBrowserSetName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserSetName)
}
CMsgBrowserSetName::CMsgBrowserSetName(const CMsgBrowserSetName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserSetName)
}

void CMsgBrowserSetName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgBrowserSetName::~CMsgBrowserSetName() {
  // @@protoc_insertion_point(destructor:CMsgBrowserSetName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserSetName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserSetName::ArenaDtor(void* object) {
  CMsgBrowserSetName* _this = reinterpret_cast< CMsgBrowserSetName* >(object);
  (void)_this;
}
void CMsgBrowserSetName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserSetName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserSetName::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserSetName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserSetName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserSetName.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserSetName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserSetName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserSetName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserSetName)
  return target;
}

size_t CMsgBrowserSetName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserSetName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserSetName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserSetName)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserSetName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserSetName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserSetName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserSetName)
    MergeFrom(*source);
  }
}

void CMsgBrowserSetName::MergeFrom(const CMsgBrowserSetName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserSetName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserSetName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserSetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSetName::CopyFrom(const CMsgBrowserSetName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserSetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSetName::IsInitialized() const {
  return true;
}

void CMsgBrowserSetName::InternalSwap(CMsgBrowserSetName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserSetName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserSize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserSize>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBrowserSize::CMsgBrowserSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserSize)
}
CMsgBrowserSize::CMsgBrowserSize(const CMsgBrowserSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserSize)
}

void CMsgBrowserSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(browser_handle_));
}

CMsgBrowserSize::~CMsgBrowserSize() {
  // @@protoc_insertion_point(destructor:CMsgBrowserSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBrowserSize::ArenaDtor(void* object) {
  CMsgBrowserSize* _this = reinterpret_cast< CMsgBrowserSize* >(object);
  (void)_this;
}
void CMsgBrowserSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserSize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&width_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // optional double height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserSize)
  return target;
}

size_t CMsgBrowserSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double width = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserSize)
    MergeFrom(*source);
  }
}

void CMsgBrowserSize::MergeFrom(const CMsgBrowserSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSize::CopyFrom(const CMsgBrowserSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSize::IsInitialized() const {
  return true;
}

void CMsgBrowserSize::InternalSwap(CMsgBrowserSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserSize, browser_handle_)
      + sizeof(CMsgBrowserSize::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserSize, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserSetMinSize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserSetMinSize>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBrowserSetMinSize::CMsgBrowserSetMinSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserSetMinSize)
}
CMsgBrowserSetMinSize::CMsgBrowserSetMinSize(const CMsgBrowserSetMinSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserSetMinSize)
}

void CMsgBrowserSetMinSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&width_)) + sizeof(browser_handle_));
}

CMsgBrowserSetMinSize::~CMsgBrowserSetMinSize() {
  // @@protoc_insertion_point(destructor:CMsgBrowserSetMinSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserSetMinSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBrowserSetMinSize::ArenaDtor(void* object) {
  CMsgBrowserSetMinSize* _this = reinterpret_cast< CMsgBrowserSetMinSize* >(object);
  (void)_this;
}
void CMsgBrowserSetMinSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserSetMinSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserSetMinSize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserSetMinSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&width_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserSetMinSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserSetMinSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserSetMinSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // optional double height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserSetMinSize)
  return target;
}

size_t CMsgBrowserSetMinSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserSetMinSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double width = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserSetMinSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserSetMinSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserSetMinSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserSetMinSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserSetMinSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserSetMinSize)
    MergeFrom(*source);
  }
}

void CMsgBrowserSetMinSize::MergeFrom(const CMsgBrowserSetMinSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserSetMinSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserSetMinSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserSetMinSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSetMinSize::CopyFrom(const CMsgBrowserSetMinSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserSetMinSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSetMinSize::IsInitialized() const {
  return true;
}

void CMsgBrowserSetMinSize::InternalSwap(CMsgBrowserSetMinSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserSetMinSize, browser_handle_)
      + sizeof(CMsgBrowserSetMinSize::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserSetMinSize, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserSetMinSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserPosition>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x_local(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_local(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgBrowserPosition::CMsgBrowserPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserPosition)
}
CMsgBrowserPosition::CMsgBrowserPosition(const CMsgBrowserPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserPosition)
}

void CMsgBrowserPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
}

CMsgBrowserPosition::~CMsgBrowserPosition() {
  // @@protoc_insertion_point(destructor:CMsgBrowserPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBrowserPosition::ArenaDtor(void* object) {
  CMsgBrowserPosition* _this = reinterpret_cast< CMsgBrowserPosition* >(object);
  (void)_this;
}
void CMsgBrowserPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double x_local = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_x_local(&has_bits);
          x_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y_local = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_y_local(&has_bits);
          y_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional double x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // optional double y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // optional double x_local = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_x_local(), target);
  }

  // optional double y_local = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_y_local(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserPosition)
  return target;
}

size_t CMsgBrowserPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double x_local = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double y_local = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserPosition)
    MergeFrom(*source);
  }
}

void CMsgBrowserPosition::MergeFrom(const CMsgBrowserPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_local_ = from.x_local_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_local_ = from.y_local_;
    }
    if (cached_has_bits & 0x00000010u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserPosition::CopyFrom(const CMsgBrowserPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserPosition::IsInitialized() const {
  return true;
}

void CMsgBrowserPosition::InternalSwap(CMsgBrowserPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserPosition, browser_handle_)
      + sizeof(CMsgBrowserPosition::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserResized::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserResized>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dpi_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dpi_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBrowserResized::CMsgBrowserResized(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserResized)
}
CMsgBrowserResized::CMsgBrowserResized(const CMsgBrowserResized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserResized)
}

void CMsgBrowserResized::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
}

CMsgBrowserResized::~CMsgBrowserResized() {
  // @@protoc_insertion_point(destructor:CMsgBrowserResized)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserResized::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserResized::ArenaDtor(void* object) {
  CMsgBrowserResized* _this = reinterpret_cast< CMsgBrowserResized* >(object);
  (void)_this;
}
void CMsgBrowserResized::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserResized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserResized::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserResized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    display_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserResized::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dpi_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_dpi_horizontal(&has_bits);
          dpi_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dpi_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_dpi_vertical(&has_bits);
          dpi_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserResized.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserResized::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserResized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional double x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // optional double y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // optional double width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_width(), target);
  }

  // optional double height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_height(), target);
  }

  // optional double dpi_horizontal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dpi_horizontal(), target);
  }

  // optional double dpi_vertical = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dpi_vertical(), target);
  }

  // optional string display_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserResized.display_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserResized)
  return target;
}

size_t CMsgBrowserResized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserResized)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string display_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional double x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double dpi_horizontal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double dpi_vertical = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserResized::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserResized)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserResized* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserResized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserResized)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserResized)
    MergeFrom(*source);
  }
}

void CMsgBrowserResized::MergeFrom(const CMsgBrowserResized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserResized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      dpi_horizontal_ = from.dpi_horizontal_;
    }
    if (cached_has_bits & 0x00000040u) {
      dpi_vertical_ = from.dpi_vertical_;
    }
    if (cached_has_bits & 0x00000080u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserResized::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserResized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserResized::CopyFrom(const CMsgBrowserResized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserResized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserResized::IsInitialized() const {
  return true;
}

void CMsgBrowserResized::InternalSwap(CMsgBrowserResized* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserResized, browser_handle_)
      + sizeof(CMsgBrowserResized::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserResized, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserResized::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPostURL::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPostURL>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_post(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pageserial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_replace_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgPostURL::CMsgPostURL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPostURL)
}
CMsgPostURL::CMsgPostURL(const CMsgPostURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_post()) {
    post_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_post(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&replace_entry_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(replace_entry_));
  // @@protoc_insertion_point(copy_constructor:CMsgPostURL)
}

void CMsgPostURL::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replace_entry_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(replace_entry_));
}

CMsgPostURL::~CMsgPostURL() {
  // @@protoc_insertion_point(destructor:CMsgPostURL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPostURL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  post_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPostURL::ArenaDtor(void* object) {
  CMsgPostURL* _this = reinterpret_cast< CMsgPostURL* >(object);
  (void)_this;
}
void CMsgPostURL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPostURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPostURL::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPostURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      post_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replace_entry_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(replace_entry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPostURL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPostURL.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string post = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_post();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPostURL.post");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageserial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pageserial(&has_bits);
          pageserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool replace_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_replace_entry(&has_bits);
          replace_entry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPostURL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPostURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPostURL.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string post = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_post().data(), static_cast<int>(this->_internal_post().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPostURL.post");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_post(), target);
  }

  // optional uint32 pageserial = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pageserial(), target);
  }

  // optional bool replace_entry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_replace_entry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPostURL)
  return target;
}

size_t CMsgPostURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPostURL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string post = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_post());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 pageserial = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageserial());
    }

    // optional bool replace_entry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPostURL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPostURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPostURL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPostURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPostURL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPostURL)
    MergeFrom(*source);
  }
}

void CMsgPostURL::MergeFrom(const CMsgPostURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPostURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_post(from._internal_post());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      pageserial_ = from.pageserial_;
    }
    if (cached_has_bits & 0x00000010u) {
      replace_entry_ = from.replace_entry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPostURL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPostURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPostURL::CopyFrom(const CMsgPostURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPostURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPostURL::IsInitialized() const {
  return true;
}

void CMsgPostURL::InternalSwap(CMsgPostURL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  post_.Swap(&other->post_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPostURL, replace_entry_)
      + sizeof(CMsgPostURL::replace_entry_)
      - PROTOBUF_FIELD_OFFSET(CMsgPostURL, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPostURL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAddHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddHeader>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddHeader::CMsgAddHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAddHeader)
}
CMsgAddHeader::CMsgAddHeader(const CMsgAddHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgAddHeader)
}

void CMsgAddHeader::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgAddHeader::~CMsgAddHeader() {
  // @@protoc_insertion_point(destructor:CMsgAddHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAddHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAddHeader::ArenaDtor(void* object) {
  CMsgAddHeader* _this = reinterpret_cast< CMsgAddHeader* >(object);
  (void)_this;
}
void CMsgAddHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAddHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAddHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAddHeader.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAddHeader.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAddHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAddHeader.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAddHeader.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddHeader)
  return target;
}

size_t CMsgAddHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAddHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAddHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAddHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAddHeader)
    MergeFrom(*source);
  }
}

void CMsgAddHeader::MergeFrom(const CMsgAddHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAddHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddHeader::CopyFrom(const CMsgAddHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddHeader::IsInitialized() const {
  return true;
}

void CMsgAddHeader::InternalSwap(CMsgAddHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStopLoad::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStopLoad>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgStopLoad::CMsgStopLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStopLoad)
}
CMsgStopLoad::CMsgStopLoad(const CMsgStopLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgStopLoad)
}

void CMsgStopLoad::SharedCtor() {
browser_handle_ = 0u;
}

CMsgStopLoad::~CMsgStopLoad() {
  // @@protoc_insertion_point(destructor:CMsgStopLoad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStopLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgStopLoad::ArenaDtor(void* object) {
  CMsgStopLoad* _this = reinterpret_cast< CMsgStopLoad* >(object);
  (void)_this;
}
void CMsgStopLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStopLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStopLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStopLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStopLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStopLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStopLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStopLoad)
  return target;
}

size_t CMsgStopLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStopLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStopLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStopLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStopLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStopLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStopLoad)
    MergeFrom(*source);
  }
}

void CMsgStopLoad::MergeFrom(const CMsgStopLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStopLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgStopLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStopLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopLoad::CopyFrom(const CMsgStopLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStopLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopLoad::IsInitialized() const {
  return true;
}

void CMsgStopLoad::InternalSwap(CMsgStopLoad* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStopLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgReload::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReload>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgReload::CMsgReload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReload)
}
CMsgReload::CMsgReload(const CMsgReload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgReload)
}

void CMsgReload::SharedCtor() {
browser_handle_ = 0u;
}

CMsgReload::~CMsgReload() {
  // @@protoc_insertion_point(destructor:CMsgReload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgReload::ArenaDtor(void* object) {
  CMsgReload* _this = reinterpret_cast< CMsgReload* >(object);
  (void)_this;
}
void CMsgReload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReload::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReload)
  return target;
}

size_t CMsgReload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReload)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReload)
    MergeFrom(*source);
  }
}

void CMsgReload::MergeFrom(const CMsgReload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgReload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReload::CopyFrom(const CMsgReload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReload::IsInitialized() const {
  return true;
}

void CMsgReload::InternalSwap(CMsgReload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGoForward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGoForward>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGoForward::CMsgGoForward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGoForward)
}
CMsgGoForward::CMsgGoForward(const CMsgGoForward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgGoForward)
}

void CMsgGoForward::SharedCtor() {
browser_handle_ = 0u;
}

CMsgGoForward::~CMsgGoForward() {
  // @@protoc_insertion_point(destructor:CMsgGoForward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGoForward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGoForward::ArenaDtor(void* object) {
  CMsgGoForward* _this = reinterpret_cast< CMsgGoForward* >(object);
  (void)_this;
}
void CMsgGoForward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGoForward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGoForward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGoForward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGoForward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGoForward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGoForward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGoForward)
  return target;
}

size_t CMsgGoForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGoForward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGoForward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGoForward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGoForward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGoForward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGoForward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGoForward)
    MergeFrom(*source);
  }
}

void CMsgGoForward::MergeFrom(const CMsgGoForward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGoForward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgGoForward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGoForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoForward::CopyFrom(const CMsgGoForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGoForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoForward::IsInitialized() const {
  return true;
}

void CMsgGoForward::InternalSwap(CMsgGoForward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGoForward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGoBack::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGoBack>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGoBack::CMsgGoBack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGoBack)
}
CMsgGoBack::CMsgGoBack(const CMsgGoBack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgGoBack)
}

void CMsgGoBack::SharedCtor() {
browser_handle_ = 0u;
}

CMsgGoBack::~CMsgGoBack() {
  // @@protoc_insertion_point(destructor:CMsgGoBack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGoBack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGoBack::ArenaDtor(void* object) {
  CMsgGoBack* _this = reinterpret_cast< CMsgGoBack* >(object);
  (void)_this;
}
void CMsgGoBack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGoBack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGoBack::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGoBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGoBack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGoBack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGoBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGoBack)
  return target;
}

size_t CMsgGoBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGoBack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGoBack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGoBack)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGoBack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGoBack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGoBack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGoBack)
    MergeFrom(*source);
  }
}

void CMsgGoBack::MergeFrom(const CMsgGoBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGoBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgGoBack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGoBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoBack::CopyFrom(const CMsgGoBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGoBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoBack::IsInitialized() const {
  return true;
}

void CMsgGoBack::InternalSwap(CMsgGoBack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGoBack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWasHidden::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWasHidden>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgWasHidden::CMsgWasHidden(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWasHidden)
}
CMsgWasHidden::CMsgWasHidden(const CMsgWasHidden& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(hidden_));
  // @@protoc_insertion_point(copy_constructor:CMsgWasHidden)
}

void CMsgWasHidden::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(hidden_));
}

CMsgWasHidden::~CMsgWasHidden() {
  // @@protoc_insertion_point(destructor:CMsgWasHidden)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWasHidden::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgWasHidden::ArenaDtor(void* object) {
  CMsgWasHidden* _this = reinterpret_cast< CMsgWasHidden* >(object);
  (void)_this;
}
void CMsgWasHidden::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWasHidden::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWasHidden::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWasHidden)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWasHidden::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hidden = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWasHidden::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWasHidden)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool hidden = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWasHidden)
  return target;
}

size_t CMsgWasHidden::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWasHidden)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool hidden = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWasHidden::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWasHidden)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWasHidden* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWasHidden>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWasHidden)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWasHidden)
    MergeFrom(*source);
  }
}

void CMsgWasHidden::MergeFrom(const CMsgWasHidden& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWasHidden)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      hidden_ = from.hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWasHidden::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWasHidden)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWasHidden::CopyFrom(const CMsgWasHidden& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWasHidden)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWasHidden::IsInitialized() const {
  return true;
}

void CMsgWasHidden::InternalSwap(CMsgWasHidden* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWasHidden, hidden_)
      + sizeof(CMsgWasHidden::hidden_)
      - PROTOBUF_FIELD_OFFSET(CMsgWasHidden, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWasHidden::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetWindowVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetWindowVisibility>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetWindowVisibility::CMsgSetWindowVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetWindowVisibility)
}
CMsgSetWindowVisibility::CMsgSetWindowVisibility(const CMsgSetWindowVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetWindowVisibility)
}

void CMsgSetWindowVisibility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(visible_));
}

CMsgSetWindowVisibility::~CMsgSetWindowVisibility() {
  // @@protoc_insertion_point(destructor:CMsgSetWindowVisibility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetWindowVisibility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetWindowVisibility::ArenaDtor(void* object) {
  CMsgSetWindowVisibility* _this = reinterpret_cast< CMsgSetWindowVisibility* >(object);
  (void)_this;
}
void CMsgSetWindowVisibility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetWindowVisibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetWindowVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetWindowVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(visible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetWindowVisibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetWindowVisibility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetWindowVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool visible = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetWindowVisibility)
  return target;
}

size_t CMsgSetWindowVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetWindowVisibility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool visible = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetWindowVisibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetWindowVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetWindowVisibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetWindowVisibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetWindowVisibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetWindowVisibility)
    MergeFrom(*source);
  }
}

void CMsgSetWindowVisibility::MergeFrom(const CMsgSetWindowVisibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetWindowVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetWindowVisibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetWindowVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetWindowVisibility::CopyFrom(const CMsgSetWindowVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetWindowVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetWindowVisibility::IsInitialized() const {
  return true;
}

void CMsgSetWindowVisibility::InternalSwap(CMsgSetWindowVisibility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetWindowVisibility, visible_)
      + sizeof(CMsgSetWindowVisibility::visible_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetWindowVisibility, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetWindowVisibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearHistory>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearHistory::CMsgClearHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearHistory)
}
CMsgClearHistory::CMsgClearHistory(const CMsgClearHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearHistory)
}

void CMsgClearHistory::SharedCtor() {
browser_handle_ = 0u;
}

CMsgClearHistory::~CMsgClearHistory() {
  // @@protoc_insertion_point(destructor:CMsgClearHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearHistory::ArenaDtor(void* object) {
  CMsgClearHistory* _this = reinterpret_cast< CMsgClearHistory* >(object);
  (void)_this;
}
void CMsgClearHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearHistory)
  return target;
}

size_t CMsgClearHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearHistory)
    MergeFrom(*source);
  }
}

void CMsgClearHistory::MergeFrom(const CMsgClearHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgClearHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearHistory::CopyFrom(const CMsgClearHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearHistory::IsInitialized() const {
  return true;
}

void CMsgClearHistory::InternalSwap(CMsgClearHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearAllBrowsingData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearAllBrowsingData>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearAllBrowsingData::CMsgClearAllBrowsingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearAllBrowsingData)
}
CMsgClearAllBrowsingData::CMsgClearAllBrowsingData(const CMsgClearAllBrowsingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearAllBrowsingData)
}

void CMsgClearAllBrowsingData::SharedCtor() {
browser_handle_ = 0u;
}

CMsgClearAllBrowsingData::~CMsgClearAllBrowsingData() {
  // @@protoc_insertion_point(destructor:CMsgClearAllBrowsingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearAllBrowsingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearAllBrowsingData::ArenaDtor(void* object) {
  CMsgClearAllBrowsingData* _this = reinterpret_cast< CMsgClearAllBrowsingData* >(object);
  (void)_this;
}
void CMsgClearAllBrowsingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearAllBrowsingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearAllBrowsingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearAllBrowsingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearAllBrowsingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearAllBrowsingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearAllBrowsingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearAllBrowsingData)
  return target;
}

size_t CMsgClearAllBrowsingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearAllBrowsingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearAllBrowsingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearAllBrowsingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearAllBrowsingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearAllBrowsingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearAllBrowsingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearAllBrowsingData)
    MergeFrom(*source);
  }
}

void CMsgClearAllBrowsingData::MergeFrom(const CMsgClearAllBrowsingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearAllBrowsingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgClearAllBrowsingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearAllBrowsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearAllBrowsingData::CopyFrom(const CMsgClearAllBrowsingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearAllBrowsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearAllBrowsingData::IsInitialized() const {
  return true;
}

void CMsgClearAllBrowsingData::InternalSwap(CMsgClearAllBrowsingData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearAllBrowsingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCopy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCopy>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCopy::CMsgCopy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCopy)
}
CMsgCopy::CMsgCopy(const CMsgCopy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgCopy)
}

void CMsgCopy::SharedCtor() {
browser_handle_ = 0u;
}

CMsgCopy::~CMsgCopy() {
  // @@protoc_insertion_point(destructor:CMsgCopy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCopy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCopy::ArenaDtor(void* object) {
  CMsgCopy* _this = reinterpret_cast< CMsgCopy* >(object);
  (void)_this;
}
void CMsgCopy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCopy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCopy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCopy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCopy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCopy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCopy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCopy)
  return target;
}

size_t CMsgCopy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCopy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCopy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCopy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCopy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCopy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCopy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCopy)
    MergeFrom(*source);
  }
}

void CMsgCopy::MergeFrom(const CMsgCopy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCopy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgCopy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCopy::CopyFrom(const CMsgCopy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCopy::IsInitialized() const {
  return true;
}

void CMsgCopy::InternalSwap(CMsgCopy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCopy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPaste::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPaste>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPaste::CMsgPaste(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPaste)
}
CMsgPaste::CMsgPaste(const CMsgPaste& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgPaste)
}

void CMsgPaste::SharedCtor() {
browser_handle_ = 0u;
}

CMsgPaste::~CMsgPaste() {
  // @@protoc_insertion_point(destructor:CMsgPaste)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPaste::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPaste::ArenaDtor(void* object) {
  CMsgPaste* _this = reinterpret_cast< CMsgPaste* >(object);
  (void)_this;
}
void CMsgPaste::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPaste::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPaste::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPaste)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPaste::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPaste::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaste)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaste)
  return target;
}

size_t CMsgPaste::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPaste)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaste::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPaste)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaste* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPaste>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPaste)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPaste)
    MergeFrom(*source);
  }
}

void CMsgPaste::MergeFrom(const CMsgPaste& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPaste)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgPaste::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPaste)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaste::CopyFrom(const CMsgPaste& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPaste)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaste::IsInitialized() const {
  return true;
}

void CMsgPaste::InternalSwap(CMsgPaste* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPaste::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgExecuteJavaScript::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExecuteJavaScript>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_script(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgExecuteJavaScript::CMsgExecuteJavaScript(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgExecuteJavaScript)
}
CMsgExecuteJavaScript::CMsgExecuteJavaScript(const CMsgExecuteJavaScript& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_script()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgExecuteJavaScript)
}

void CMsgExecuteJavaScript::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgExecuteJavaScript::~CMsgExecuteJavaScript() {
  // @@protoc_insertion_point(destructor:CMsgExecuteJavaScript)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgExecuteJavaScript::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgExecuteJavaScript::ArenaDtor(void* object) {
  CMsgExecuteJavaScript* _this = reinterpret_cast< CMsgExecuteJavaScript* >(object);
  (void)_this;
}
void CMsgExecuteJavaScript::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgExecuteJavaScript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExecuteJavaScript::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExecuteJavaScript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    script_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExecuteJavaScript::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgExecuteJavaScript.script");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExecuteJavaScript::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExecuteJavaScript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string script = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_script().data(), static_cast<int>(this->_internal_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgExecuteJavaScript.script");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExecuteJavaScript)
  return target;
}

size_t CMsgExecuteJavaScript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExecuteJavaScript)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string script = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_script());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExecuteJavaScript::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExecuteJavaScript)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteJavaScript* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExecuteJavaScript>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExecuteJavaScript)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExecuteJavaScript)
    MergeFrom(*source);
  }
}

void CMsgExecuteJavaScript::MergeFrom(const CMsgExecuteJavaScript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExecuteJavaScript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_script(from._internal_script());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteJavaScript::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExecuteJavaScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteJavaScript::CopyFrom(const CMsgExecuteJavaScript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExecuteJavaScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteJavaScript::IsInitialized() const {
  return true;
}

void CMsgExecuteJavaScript::InternalSwap(CMsgExecuteJavaScript* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExecuteJavaScript::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetFocus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetFocus>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetFocus::CMsgSetFocus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetFocus)
}
CMsgSetFocus::CMsgSetFocus(const CMsgSetFocus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&focus_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(focus_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetFocus)
}

void CMsgSetFocus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&focus_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(focus_));
}

CMsgSetFocus::~CMsgSetFocus() {
  // @@protoc_insertion_point(destructor:CMsgSetFocus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetFocus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetFocus::ArenaDtor(void* object) {
  CMsgSetFocus* _this = reinterpret_cast< CMsgSetFocus* >(object);
  (void)_this;
}
void CMsgSetFocus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetFocus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetFocus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focus_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(focus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetFocus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool focus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_focus(&has_bits);
          focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetFocus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetFocus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool focus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_focus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetFocus)
  return target;
}

size_t CMsgSetFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetFocus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool focus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetFocus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetFocus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetFocus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetFocus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetFocus)
    MergeFrom(*source);
  }
}

void CMsgSetFocus::MergeFrom(const CMsgSetFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      focus_ = from.focus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetFocus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetFocus::CopyFrom(const CMsgSetFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetFocus::IsInitialized() const {
  return true;
}

void CMsgSetFocus::InternalSwap(CMsgSetFocus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetFocus, focus_)
      + sizeof(CMsgSetFocus::focus_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetFocus, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetFocus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHorizontalScrollBarSize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHorizontalScrollBarSize>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHorizontalScrollBarSize)
}
CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize(const CMsgHorizontalScrollBarSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgHorizontalScrollBarSize)
}

void CMsgHorizontalScrollBarSize::SharedCtor() {
browser_handle_ = 0u;
}

CMsgHorizontalScrollBarSize::~CMsgHorizontalScrollBarSize() {
  // @@protoc_insertion_point(destructor:CMsgHorizontalScrollBarSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHorizontalScrollBarSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHorizontalScrollBarSize::ArenaDtor(void* object) {
  CMsgHorizontalScrollBarSize* _this = reinterpret_cast< CMsgHorizontalScrollBarSize* >(object);
  (void)_this;
}
void CMsgHorizontalScrollBarSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHorizontalScrollBarSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHorizontalScrollBarSize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHorizontalScrollBarSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHorizontalScrollBarSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHorizontalScrollBarSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHorizontalScrollBarSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHorizontalScrollBarSize)
  return target;
}

size_t CMsgHorizontalScrollBarSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHorizontalScrollBarSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHorizontalScrollBarSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHorizontalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHorizontalScrollBarSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHorizontalScrollBarSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHorizontalScrollBarSize)
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSize::MergeFrom(const CMsgHorizontalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHorizontalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgHorizontalScrollBarSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHorizontalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSize::CopyFrom(const CMsgHorizontalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHorizontalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSize::IsInitialized() const {
  return true;
}

void CMsgHorizontalScrollBarSize::InternalSwap(CMsgHorizontalScrollBarSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHorizontalScrollBarSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHorizontalScrollBarSizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHorizontalScrollBarSizeResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scroll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scroll(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHorizontalScrollBarSizeResponse)
}
CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse(const CMsgHorizontalScrollBarSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:CMsgHorizontalScrollBarSizeResponse)
}

void CMsgHorizontalScrollBarSizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
}

CMsgHorizontalScrollBarSizeResponse::~CMsgHorizontalScrollBarSizeResponse() {
  // @@protoc_insertion_point(destructor:CMsgHorizontalScrollBarSizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHorizontalScrollBarSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHorizontalScrollBarSizeResponse::ArenaDtor(void* object) {
  CMsgHorizontalScrollBarSizeResponse* _this = reinterpret_cast< CMsgHorizontalScrollBarSizeResponse* >(object);
  (void)_this;
}
void CMsgHorizontalScrollBarSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHorizontalScrollBarSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHorizontalScrollBarSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHorizontalScrollBarSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_size_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHorizontalScrollBarSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scroll_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_scroll_max(&has_bits);
          scroll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scroll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_scroll(&has_bits);
          scroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float zoom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_zoom(&has_bits);
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_page_size(&has_bits);
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHorizontalScrollBarSizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHorizontalScrollBarSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scroll_max(), target);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scroll(), target);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_zoom(), target);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_visible(), target);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHorizontalScrollBarSizeResponse)
  return target;
}

size_t CMsgHorizontalScrollBarSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHorizontalScrollBarSizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 scroll_max = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scroll_max());
    }

    // optional uint32 scroll = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scroll());
    }

    // optional float zoom = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool visible = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 page_size = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHorizontalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHorizontalScrollBarSizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHorizontalScrollBarSizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHorizontalScrollBarSizeResponse)
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHorizontalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_max_ = from.scroll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      scroll_ = from.scroll_;
    }
    if (cached_has_bits & 0x00000008u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000010u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHorizontalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHorizontalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSizeResponse::IsInitialized() const {
  return true;
}

void CMsgHorizontalScrollBarSizeResponse::InternalSwap(CMsgHorizontalScrollBarSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, page_size_)
      + sizeof(CMsgHorizontalScrollBarSizeResponse::page_size_)
      - PROTOBUF_FIELD_OFFSET(CMsgHorizontalScrollBarSizeResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHorizontalScrollBarSizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgVerticalScrollBarSize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVerticalScrollBarSize>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVerticalScrollBarSize)
}
CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize(const CMsgVerticalScrollBarSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgVerticalScrollBarSize)
}

void CMsgVerticalScrollBarSize::SharedCtor() {
browser_handle_ = 0u;
}

CMsgVerticalScrollBarSize::~CMsgVerticalScrollBarSize() {
  // @@protoc_insertion_point(destructor:CMsgVerticalScrollBarSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVerticalScrollBarSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgVerticalScrollBarSize::ArenaDtor(void* object) {
  CMsgVerticalScrollBarSize* _this = reinterpret_cast< CMsgVerticalScrollBarSize* >(object);
  (void)_this;
}
void CMsgVerticalScrollBarSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVerticalScrollBarSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVerticalScrollBarSize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVerticalScrollBarSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVerticalScrollBarSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVerticalScrollBarSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVerticalScrollBarSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVerticalScrollBarSize)
  return target;
}

size_t CMsgVerticalScrollBarSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVerticalScrollBarSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVerticalScrollBarSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVerticalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVerticalScrollBarSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVerticalScrollBarSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVerticalScrollBarSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVerticalScrollBarSize)
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSize::MergeFrom(const CMsgVerticalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVerticalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgVerticalScrollBarSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVerticalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSize::CopyFrom(const CMsgVerticalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVerticalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSize::IsInitialized() const {
  return true;
}

void CMsgVerticalScrollBarSize::InternalSwap(CMsgVerticalScrollBarSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVerticalScrollBarSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgVerticalScrollBarSizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVerticalScrollBarSizeResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scroll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scroll(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVerticalScrollBarSizeResponse)
}
CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse(const CMsgVerticalScrollBarSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:CMsgVerticalScrollBarSizeResponse)
}

void CMsgVerticalScrollBarSizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
}

CMsgVerticalScrollBarSizeResponse::~CMsgVerticalScrollBarSizeResponse() {
  // @@protoc_insertion_point(destructor:CMsgVerticalScrollBarSizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVerticalScrollBarSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgVerticalScrollBarSizeResponse::ArenaDtor(void* object) {
  CMsgVerticalScrollBarSizeResponse* _this = reinterpret_cast< CMsgVerticalScrollBarSizeResponse* >(object);
  (void)_this;
}
void CMsgVerticalScrollBarSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVerticalScrollBarSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVerticalScrollBarSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVerticalScrollBarSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_size_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVerticalScrollBarSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scroll_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_scroll_max(&has_bits);
          scroll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scroll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_scroll(&has_bits);
          scroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float zoom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_zoom(&has_bits);
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_page_size(&has_bits);
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVerticalScrollBarSizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVerticalScrollBarSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scroll_max(), target);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scroll(), target);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_zoom(), target);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_visible(), target);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVerticalScrollBarSizeResponse)
  return target;
}

size_t CMsgVerticalScrollBarSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVerticalScrollBarSizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 scroll_max = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scroll_max());
    }

    // optional uint32 scroll = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scroll());
    }

    // optional float zoom = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool visible = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 page_size = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVerticalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVerticalScrollBarSizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVerticalScrollBarSizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVerticalScrollBarSizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVerticalScrollBarSizeResponse)
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const CMsgVerticalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVerticalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_max_ = from.scroll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      scroll_ = from.scroll_;
    }
    if (cached_has_bits & 0x00000008u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000010u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVerticalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const CMsgVerticalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVerticalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSizeResponse::IsInitialized() const {
  return true;
}

void CMsgVerticalScrollBarSizeResponse::InternalSwap(CMsgVerticalScrollBarSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, page_size_)
      + sizeof(CMsgVerticalScrollBarSizeResponse::page_size_)
      - PROTOBUF_FIELD_OFFSET(CMsgVerticalScrollBarSizeResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVerticalScrollBarSizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFind::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFind>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_find(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_infind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgFind::CMsgFind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFind)
}
CMsgFind::CMsgFind(const CMsgFind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  find_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_find()) {
    find_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_find(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:CMsgFind)
}

void CMsgFind::SharedCtor() {
find_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(reverse_));
}

CMsgFind::~CMsgFind() {
  // @@protoc_insertion_point(destructor:CMsgFind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  find_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgFind::ArenaDtor(void* object) {
  CMsgFind* _this = reinterpret_cast< CMsgFind* >(object);
  (void)_this;
}
void CMsgFind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFind::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    find_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string find = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_find();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFind.find");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool infind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_infind(&has_bits);
          infind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reverse(&has_bits);
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string find = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_find().data(), static_cast<int>(this->_internal_find().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFind.find");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_find(), target);
  }

  // optional bool infind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_infind(), target);
  }

  // optional bool reverse = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFind)
  return target;
}

size_t CMsgFind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string find = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_find());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool infind = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool reverse = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFind)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFind)
    MergeFrom(*source);
  }
}

void CMsgFind::MergeFrom(const CMsgFind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_find(from._internal_find());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      infind_ = from.infind_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFind::CopyFrom(const CMsgFind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFind::IsInitialized() const {
  return true;
}

void CMsgFind::InternalSwap(CMsgFind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  find_.Swap(&other->find_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFind, reverse_)
      + sizeof(CMsgFind::reverse_)
      - PROTOBUF_FIELD_OFFSET(CMsgFind, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStopFind::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStopFind>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgStopFind::CMsgStopFind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStopFind)
}
CMsgStopFind::CMsgStopFind(const CMsgStopFind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgStopFind)
}

void CMsgStopFind::SharedCtor() {
browser_handle_ = 0u;
}

CMsgStopFind::~CMsgStopFind() {
  // @@protoc_insertion_point(destructor:CMsgStopFind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStopFind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgStopFind::ArenaDtor(void* object) {
  CMsgStopFind* _this = reinterpret_cast< CMsgStopFind* >(object);
  (void)_this;
}
void CMsgStopFind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStopFind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStopFind::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStopFind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStopFind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStopFind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStopFind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStopFind)
  return target;
}

size_t CMsgStopFind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStopFind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStopFind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStopFind)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopFind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStopFind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStopFind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStopFind)
    MergeFrom(*source);
  }
}

void CMsgStopFind::MergeFrom(const CMsgStopFind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStopFind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgStopFind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStopFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFind::CopyFrom(const CMsgStopFind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStopFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFind::IsInitialized() const {
  return true;
}

void CMsgStopFind::InternalSwap(CMsgStopFind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStopFind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetHorizontalScroll::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetHorizontalScroll>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scroll(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetHorizontalScroll::CMsgSetHorizontalScroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetHorizontalScroll)
}
CMsgSetHorizontalScroll::CMsgSetHorizontalScroll(const CMsgSetHorizontalScroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetHorizontalScroll)
}

void CMsgSetHorizontalScroll::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
}

CMsgSetHorizontalScroll::~CMsgSetHorizontalScroll() {
  // @@protoc_insertion_point(destructor:CMsgSetHorizontalScroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetHorizontalScroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetHorizontalScroll::ArenaDtor(void* object) {
  CMsgSetHorizontalScroll* _this = reinterpret_cast< CMsgSetHorizontalScroll* >(object);
  (void)_this;
}
void CMsgSetHorizontalScroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetHorizontalScroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetHorizontalScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetHorizontalScroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scroll_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetHorizontalScroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scroll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scroll(&has_bits);
          scroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetHorizontalScroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetHorizontalScroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scroll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetHorizontalScroll)
  return target;
}

size_t CMsgSetHorizontalScroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetHorizontalScroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 scroll = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scroll());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetHorizontalScroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetHorizontalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetHorizontalScroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetHorizontalScroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetHorizontalScroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetHorizontalScroll)
    MergeFrom(*source);
  }
}

void CMsgSetHorizontalScroll::MergeFrom(const CMsgSetHorizontalScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetHorizontalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_ = from.scroll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetHorizontalScroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetHorizontalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHorizontalScroll::CopyFrom(const CMsgSetHorizontalScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetHorizontalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHorizontalScroll::IsInitialized() const {
  return true;
}

void CMsgSetHorizontalScroll::InternalSwap(CMsgSetHorizontalScroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetHorizontalScroll, scroll_)
      + sizeof(CMsgSetHorizontalScroll::scroll_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetHorizontalScroll, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetHorizontalScroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetVerticalScroll::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetVerticalScroll>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scroll(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetVerticalScroll::CMsgSetVerticalScroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetVerticalScroll)
}
CMsgSetVerticalScroll::CMsgSetVerticalScroll(const CMsgSetVerticalScroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetVerticalScroll)
}

void CMsgSetVerticalScroll::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
}

CMsgSetVerticalScroll::~CMsgSetVerticalScroll() {
  // @@protoc_insertion_point(destructor:CMsgSetVerticalScroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetVerticalScroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetVerticalScroll::ArenaDtor(void* object) {
  CMsgSetVerticalScroll* _this = reinterpret_cast< CMsgSetVerticalScroll* >(object);
  (void)_this;
}
void CMsgSetVerticalScroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetVerticalScroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetVerticalScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetVerticalScroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scroll_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetVerticalScroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scroll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scroll(&has_bits);
          scroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetVerticalScroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetVerticalScroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scroll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetVerticalScroll)
  return target;
}

size_t CMsgSetVerticalScroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetVerticalScroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 scroll = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scroll());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetVerticalScroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetVerticalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetVerticalScroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetVerticalScroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetVerticalScroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetVerticalScroll)
    MergeFrom(*source);
  }
}

void CMsgSetVerticalScroll::MergeFrom(const CMsgSetVerticalScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetVerticalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_ = from.scroll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetVerticalScroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetVerticalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetVerticalScroll::CopyFrom(const CMsgSetVerticalScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetVerticalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetVerticalScroll::IsInitialized() const {
  return true;
}

void CMsgSetVerticalScroll::InternalSwap(CMsgSetVerticalScroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetVerticalScroll, scroll_)
      + sizeof(CMsgSetVerticalScroll::scroll_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetVerticalScroll, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetVerticalScroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetZoomLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetZoomLevel>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetZoomLevel::CMsgSetZoomLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetZoomLevel)
}
CMsgSetZoomLevel::CMsgSetZoomLevel(const CMsgSetZoomLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&zoom_, &from.zoom_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&zoom_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetZoomLevel)
}

void CMsgSetZoomLevel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&zoom_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&zoom_)) + sizeof(browser_handle_));
}

CMsgSetZoomLevel::~CMsgSetZoomLevel() {
  // @@protoc_insertion_point(destructor:CMsgSetZoomLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetZoomLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetZoomLevel::ArenaDtor(void* object) {
  CMsgSetZoomLevel* _this = reinterpret_cast< CMsgSetZoomLevel* >(object);
  (void)_this;
}
void CMsgSetZoomLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetZoomLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetZoomLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetZoomLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&zoom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&zoom_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetZoomLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double zoom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_zoom(&has_bits);
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetZoomLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetZoomLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional double zoom = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_zoom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetZoomLevel)
  return target;
}

size_t CMsgSetZoomLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetZoomLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double zoom = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetZoomLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetZoomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetZoomLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetZoomLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetZoomLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetZoomLevel)
    MergeFrom(*source);
  }
}

void CMsgSetZoomLevel::MergeFrom(const CMsgSetZoomLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetZoomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetZoomLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetZoomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetZoomLevel::CopyFrom(const CMsgSetZoomLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetZoomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetZoomLevel::IsInitialized() const {
  return true;
}

void CMsgSetZoomLevel::InternalSwap(CMsgSetZoomLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetZoomLevel, browser_handle_)
      + sizeof(CMsgSetZoomLevel::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetZoomLevel, zoom_)>(
          reinterpret_cast<char*>(&zoom_),
          reinterpret_cast<char*>(&other->zoom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetZoomLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgViewSource::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgViewSource>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgViewSource::CMsgViewSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgViewSource)
}
CMsgViewSource::CMsgViewSource(const CMsgViewSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgViewSource)
}

void CMsgViewSource::SharedCtor() {
browser_handle_ = 0u;
}

CMsgViewSource::~CMsgViewSource() {
  // @@protoc_insertion_point(destructor:CMsgViewSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgViewSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgViewSource::ArenaDtor(void* object) {
  CMsgViewSource* _this = reinterpret_cast< CMsgViewSource* >(object);
  (void)_this;
}
void CMsgViewSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgViewSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgViewSource::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgViewSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgViewSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgViewSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgViewSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgViewSource)
  return target;
}

size_t CMsgViewSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgViewSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgViewSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgViewSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgViewSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgViewSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgViewSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgViewSource)
    MergeFrom(*source);
  }
}

void CMsgViewSource::MergeFrom(const CMsgViewSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgViewSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgViewSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgViewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgViewSource::CopyFrom(const CMsgViewSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgViewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgViewSource::IsInitialized() const {
  return true;
}

void CMsgViewSource::InternalSwap(CMsgViewSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgViewSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserReady::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserReady>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vr_overlay_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hwnd_browser(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBrowserReady::CMsgBrowserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserReady)
}
CMsgBrowserReady::CMsgBrowserReady(const CMsgBrowserReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vr_overlay_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vr_overlay_key()) {
    vr_overlay_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vr_overlay_key(), 
      GetArena());
  }
  ::memcpy(&hwnd_browser_, &from.hwnd_browser_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&hwnd_browser_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserReady)
}

void CMsgBrowserReady::SharedCtor() {
vr_overlay_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hwnd_browser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&hwnd_browser_)) + sizeof(browser_handle_));
}

CMsgBrowserReady::~CMsgBrowserReady() {
  // @@protoc_insertion_point(destructor:CMsgBrowserReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vr_overlay_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserReady::ArenaDtor(void* object) {
  CMsgBrowserReady* _this = reinterpret_cast< CMsgBrowserReady* >(object);
  (void)_this;
}
void CMsgBrowserReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vr_overlay_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hwnd_browser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&hwnd_browser_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vr_overlay_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vr_overlay_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserReady.vr_overlay_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hwnd_browser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_hwnd_browser(&has_bits);
          hwnd_browser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string vr_overlay_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vr_overlay_key().data(), static_cast<int>(this->_internal_vr_overlay_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserReady.vr_overlay_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vr_overlay_key(), target);
  }

  // optional fixed64 hwnd_browser = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_hwnd_browser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserReady)
  return target;
}

size_t CMsgBrowserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string vr_overlay_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vr_overlay_key());
    }

    // optional fixed64 hwnd_browser = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserReady)
    MergeFrom(*source);
  }
}

void CMsgBrowserReady::MergeFrom(const CMsgBrowserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vr_overlay_key(from._internal_vr_overlay_key());
    }
    if (cached_has_bits & 0x00000002u) {
      hwnd_browser_ = from.hwnd_browser_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserReady::CopyFrom(const CMsgBrowserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserReady::IsInitialized() const {
  return true;
}

void CMsgBrowserReady::InternalSwap(CMsgBrowserReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vr_overlay_key_.Swap(&other->vr_overlay_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserReady, browser_handle_)
      + sizeof(CMsgBrowserReady::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserReady, hwnd_browser_)>(
          reinterpret_cast<char*>(&hwnd_browser_),
          reinterpret_cast<char*>(&other->hwnd_browser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgURLChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgURLChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_postdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bisredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pagetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bnewnavigation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgURLChanged::CMsgURLChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgURLChanged)
}
CMsgURLChanged::CMsgURLChanged(const CMsgURLChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  postdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_postdata()) {
    postdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_postdata(), 
      GetArena());
  }
  pagetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pagetitle()) {
    pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pagetitle(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bnewnavigation_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bnewnavigation_));
  // @@protoc_insertion_point(copy_constructor:CMsgURLChanged)
}

void CMsgURLChanged::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
postdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bnewnavigation_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bnewnavigation_));
}

CMsgURLChanged::~CMsgURLChanged() {
  // @@protoc_insertion_point(destructor:CMsgURLChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgURLChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgURLChanged::ArenaDtor(void* object) {
  CMsgURLChanged* _this = reinterpret_cast< CMsgURLChanged* >(object);
  (void)_this;
}
void CMsgURLChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgURLChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgURLChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgURLChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      postdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      pagetitle_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bnewnavigation_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bnewnavigation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgURLChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgURLChanged.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string postData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_postdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgURLChanged.postData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bIsRedirect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bisredirect(&has_bits);
          bisredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pagetitle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pagetitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgURLChanged.pagetitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bNewNavigation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bnewnavigation(&has_bits);
          bnewnavigation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgURLChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgURLChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgURLChanged.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string postData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_postdata().data(), static_cast<int>(this->_internal_postdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgURLChanged.postData");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_postdata(), target);
  }

  // optional bool bIsRedirect = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bisredirect(), target);
  }

  // optional string pagetitle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pagetitle().data(), static_cast<int>(this->_internal_pagetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgURLChanged.pagetitle");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pagetitle(), target);
  }

  // optional bool bNewNavigation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bnewnavigation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgURLChanged)
  return target;
}

size_t CMsgURLChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgURLChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string postData = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_postdata());
    }

    // optional string pagetitle = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bIsRedirect = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool bNewNavigation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgURLChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgURLChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgURLChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgURLChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgURLChanged)
    MergeFrom(*source);
  }
}

void CMsgURLChanged::MergeFrom(const CMsgURLChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_postdata(from._internal_postdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_pagetitle(from._internal_pagetitle());
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisredirect_ = from.bisredirect_;
    }
    if (cached_has_bits & 0x00000020u) {
      bnewnavigation_ = from.bnewnavigation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgURLChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgURLChanged::CopyFrom(const CMsgURLChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgURLChanged::IsInitialized() const {
  return true;
}

void CMsgURLChanged::InternalSwap(CMsgURLChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postdata_.Swap(&other->postdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pagetitle_.Swap(&other->pagetitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgURLChanged, bnewnavigation_)
      + sizeof(CMsgURLChanged::bnewnavigation_)
      - PROTOBUF_FIELD_OFFSET(CMsgURLChanged, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgURLChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHistoryEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CHistoryEntry>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHistoryEntry::CHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHistoryEntry)
}
CHistoryEntry::CHistoryEntry(const CHistoryEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CHistoryEntry)
}

void CHistoryEntry::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CHistoryEntry::~CHistoryEntry() {
  // @@protoc_insertion_point(destructor:CHistoryEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHistoryEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHistoryEntry::ArenaDtor(void* object) {
  CHistoryEntry* _this = reinterpret_cast< CHistoryEntry* >(object);
  (void)_this;
}
void CHistoryEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHistoryEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHistoryEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CHistoryEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHistoryEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHistoryEntry.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHistoryEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHistoryEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHistoryEntry.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHistoryEntry)
  return target;
}

size_t CHistoryEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHistoryEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHistoryEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHistoryEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CHistoryEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHistoryEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHistoryEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHistoryEntry)
    MergeFrom(*source);
  }
}

void CHistoryEntry::MergeFrom(const CHistoryEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHistoryEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
}

void CHistoryEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHistoryEntry::CopyFrom(const CHistoryEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHistoryEntry::IsInitialized() const {
  return true;
}

void CHistoryEntry::InternalSwap(CHistoryEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CHistoryEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHistoryChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHistoryChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHistoryChanged::CMsgHistoryChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHistoryChanged)
}
CMsgHistoryChanged::CMsgHistoryChanged(const CMsgHistoryChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:CMsgHistoryChanged)
}

void CMsgHistoryChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(index_));
}

CMsgHistoryChanged::~CMsgHistoryChanged() {
  // @@protoc_insertion_point(destructor:CMsgHistoryChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHistoryChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHistoryChanged::ArenaDtor(void* object) {
  CMsgHistoryChanged* _this = reinterpret_cast< CMsgHistoryChanged* >(object);
  (void)_this;
}
void CMsgHistoryChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHistoryChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHistoryChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHistoryChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHistoryChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CHistoryEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHistoryChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHistoryChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // repeated .CHistoryEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHistoryChanged)
  return target;
}

size_t CMsgHistoryChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHistoryChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CHistoryEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHistoryChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHistoryChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHistoryChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHistoryChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHistoryChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHistoryChanged)
    MergeFrom(*source);
  }
}

void CMsgHistoryChanged::MergeFrom(const CMsgHistoryChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHistoryChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHistoryChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHistoryChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHistoryChanged::CopyFrom(const CMsgHistoryChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHistoryChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHistoryChanged::IsInitialized() const {
  return true;
}

void CMsgHistoryChanged::InternalSwap(CMsgHistoryChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHistoryChanged, index_)
      + sizeof(CMsgHistoryChanged::index_)
      - PROTOBUF_FIELD_OFFSET(CMsgHistoryChanged, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHistoryChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLoadError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLoadError>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLoadError::CMsgLoadError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLoadError)
}
CMsgLoadError::CMsgLoadError(const CMsgLoadError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  error_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_description()) {
    error_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_description(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgLoadError)
}

void CMsgLoadError::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(error_code_));
}

CMsgLoadError::~CMsgLoadError() {
  // @@protoc_insertion_point(destructor:CMsgLoadError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLoadError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadError::ArenaDtor(void* object) {
  CMsgLoadError* _this = reinterpret_cast< CMsgLoadError* >(object);
  (void)_this;
}
void CMsgLoadError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLoadError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLoadError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLoadError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      error_description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLoadError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadError.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadError.error_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLoadError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLoadError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadError.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional string error_description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_description().data(), static_cast<int>(this->_internal_error_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadError.error_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLoadError)
  return target;
}

size_t CMsgLoadError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLoadError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string error_description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_description());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 error_code = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLoadError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLoadError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLoadError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLoadError)
    MergeFrom(*source);
  }
}

void CMsgLoadError::MergeFrom(const CMsgLoadError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLoadError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_error_description(from._internal_error_description());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLoadError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadError::CopyFrom(const CMsgLoadError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLoadError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadError::IsInitialized() const {
  return true;
}

void CMsgLoadError::InternalSwap(CMsgLoadError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_description_.Swap(&other->error_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLoadError, error_code_)
      + sizeof(CMsgLoadError::error_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgLoadError, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLoadError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHTMLHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CHTMLHeader>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CHTMLHeader::CHTMLHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHTMLHeader)
}
CHTMLHeader::CHTMLHeader(const CHTMLHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CHTMLHeader)
}

void CHTMLHeader::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CHTMLHeader::~CHTMLHeader() {
  // @@protoc_insertion_point(destructor:CHTMLHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHTMLHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHTMLHeader::ArenaDtor(void* object) {
  CHTMLHeader* _this = reinterpret_cast< CHTMLHeader* >(object);
  (void)_this;
}
void CHTMLHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHTMLHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHTMLHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CHTMLHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHTMLHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHTMLHeader.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHTMLHeader.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHTMLHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHTMLHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHTMLHeader.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHTMLHeader.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHTMLHeader)
  return target;
}

size_t CHTMLHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHTMLHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHTMLHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHTMLHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CHTMLHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHTMLHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHTMLHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHTMLHeader)
    MergeFrom(*source);
  }
}

void CHTMLHeader::MergeFrom(const CHTMLHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHTMLHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CHTMLHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHTMLHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLHeader::CopyFrom(const CHTMLHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHTMLHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLHeader::IsInitialized() const {
  return true;
}

void CHTMLHeader::InternalSwap(CHTMLHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CHTMLHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CHTMLPageSecurityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CHTMLPageSecurityInfo>()._has_bits_);
  static void set_has_bissecure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bhascerterror(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_issuername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_certname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_certexpiry(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ncertbits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bisevcert(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CHTMLPageSecurityInfo::CHTMLPageSecurityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CHTMLPageSecurityInfo)
}
CHTMLPageSecurityInfo::CHTMLPageSecurityInfo(const CHTMLPageSecurityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  issuername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_issuername()) {
    issuername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_issuername(), 
      GetArena());
  }
  certname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_certname()) {
    certname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_certname(), 
      GetArena());
  }
  ::memcpy(&bissecure_, &from.bissecure_,
    static_cast<size_t>(reinterpret_cast<char*>(&ncertbits_) -
    reinterpret_cast<char*>(&bissecure_)) + sizeof(ncertbits_));
  // @@protoc_insertion_point(copy_constructor:CHTMLPageSecurityInfo)
}

void CHTMLPageSecurityInfo::SharedCtor() {
issuername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
certname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bissecure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ncertbits_) -
    reinterpret_cast<char*>(&bissecure_)) + sizeof(ncertbits_));
}

CHTMLPageSecurityInfo::~CHTMLPageSecurityInfo() {
  // @@protoc_insertion_point(destructor:CHTMLPageSecurityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHTMLPageSecurityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  issuername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  certname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHTMLPageSecurityInfo::ArenaDtor(void* object) {
  CHTMLPageSecurityInfo* _this = reinterpret_cast< CHTMLPageSecurityInfo* >(object);
  (void)_this;
}
void CHTMLPageSecurityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHTMLPageSecurityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CHTMLPageSecurityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CHTMLPageSecurityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      issuername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      certname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&bissecure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ncertbits_) -
        reinterpret_cast<char*>(&bissecure_)) + sizeof(ncertbits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHTMLPageSecurityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bIsSecure = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bissecure(&has_bits);
          bissecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bHasCertError = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bhascerterror(&has_bits);
          bhascerterror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string issuerName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_issuername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHTMLPageSecurityInfo.issuerName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string certName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_certname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CHTMLPageSecurityInfo.certName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 certExpiry = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_certexpiry(&has_bits);
          certexpiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nCertBits = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ncertbits(&has_bits);
          ncertbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bIsEVCert = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bisevcert(&has_bits);
          bisevcert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHTMLPageSecurityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHTMLPageSecurityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bIsSecure = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bissecure(), target);
  }

  // optional bool bHasCertError = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bhascerterror(), target);
  }

  // optional string issuerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_issuername().data(), static_cast<int>(this->_internal_issuername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHTMLPageSecurityInfo.issuerName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_issuername(), target);
  }

  // optional string certName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_certname().data(), static_cast<int>(this->_internal_certname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CHTMLPageSecurityInfo.certName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_certname(), target);
  }

  // optional int32 certExpiry = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_certexpiry(), target);
  }

  // optional int32 nCertBits = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ncertbits(), target);
  }

  // optional bool bIsEVCert = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bisevcert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHTMLPageSecurityInfo)
  return target;
}

size_t CHTMLPageSecurityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHTMLPageSecurityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string issuerName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuername());
    }

    // optional string certName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_certname());
    }

    // optional bool bIsSecure = 1 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool bHasCertError = 2 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bIsEVCert = 7 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 certExpiry = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_certexpiry());
    }

    // optional int32 nCertBits = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ncertbits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHTMLPageSecurityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHTMLPageSecurityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CHTMLPageSecurityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHTMLPageSecurityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHTMLPageSecurityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHTMLPageSecurityInfo)
    MergeFrom(*source);
  }
}

void CHTMLPageSecurityInfo::MergeFrom(const CHTMLPageSecurityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHTMLPageSecurityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_issuername(from._internal_issuername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_certname(from._internal_certname());
    }
    if (cached_has_bits & 0x00000004u) {
      bissecure_ = from.bissecure_;
    }
    if (cached_has_bits & 0x00000008u) {
      bhascerterror_ = from.bhascerterror_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisevcert_ = from.bisevcert_;
    }
    if (cached_has_bits & 0x00000020u) {
      certexpiry_ = from.certexpiry_;
    }
    if (cached_has_bits & 0x00000040u) {
      ncertbits_ = from.ncertbits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHTMLPageSecurityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHTMLPageSecurityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLPageSecurityInfo::CopyFrom(const CHTMLPageSecurityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHTMLPageSecurityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLPageSecurityInfo::IsInitialized() const {
  return true;
}

void CHTMLPageSecurityInfo::InternalSwap(CHTMLPageSecurityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  issuername_.Swap(&other->issuername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  certname_.Swap(&other->certname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHTMLPageSecurityInfo, ncertbits_)
      + sizeof(CHTMLPageSecurityInfo::ncertbits_)
      - PROTOBUF_FIELD_OFFSET(CHTMLPageSecurityInfo, bissecure_)>(
          reinterpret_cast<char*>(&bissecure_),
          reinterpret_cast<char*>(&other->bissecure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHTMLPageSecurityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFinishedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFinishedRequest>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pagetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgFinishedRequest::CMsgFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFinishedRequest)
}
CMsgFinishedRequest::CMsgFinishedRequest(const CMsgFinishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  pagetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pagetitle()) {
    pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pagetitle(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgFinishedRequest)
}

void CMsgFinishedRequest::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgFinishedRequest::~CMsgFinishedRequest() {
  // @@protoc_insertion_point(destructor:CMsgFinishedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFinishedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgFinishedRequest::ArenaDtor(void* object) {
  CMsgFinishedRequest* _this = reinterpret_cast< CMsgFinishedRequest* >(object);
  (void)_this;
}
void CMsgFinishedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFinishedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pagetitle_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFinishedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFinishedRequest.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pageTitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pagetitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFinishedRequest.pageTitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFinishedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFinishedRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pagetitle().data(), static_cast<int>(this->_internal_pagetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFinishedRequest.pageTitle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pagetitle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFinishedRequest)
  return target;
}

size_t CMsgFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFinishedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string pageTitle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFinishedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFinishedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFinishedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFinishedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFinishedRequest)
    MergeFrom(*source);
  }
}

void CMsgFinishedRequest::MergeFrom(const CMsgFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pagetitle(from._internal_pagetitle());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFinishedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFinishedRequest::CopyFrom(const CMsgFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFinishedRequest::IsInitialized() const {
  return true;
}

void CMsgFinishedRequest::InternalSwap(CMsgFinishedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pagetitle_.Swap(&other->pagetitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFinishedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLoadedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLoadedRequest>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pagetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLoadedRequest::CMsgLoadedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLoadedRequest)
}
CMsgLoadedRequest::CMsgLoadedRequest(const CMsgLoadedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  pagetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pagetitle()) {
    pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pagetitle(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgLoadedRequest)
}

void CMsgLoadedRequest::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgLoadedRequest::~CMsgLoadedRequest() {
  // @@protoc_insertion_point(destructor:CMsgLoadedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLoadedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadedRequest::ArenaDtor(void* object) {
  CMsgLoadedRequest* _this = reinterpret_cast< CMsgLoadedRequest* >(object);
  (void)_this;
}
void CMsgLoadedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLoadedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLoadedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLoadedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pagetitle_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLoadedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadedRequest.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pageTitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pagetitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadedRequest.pageTitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CHTMLHeader headers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLoadedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLoadedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadedRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pagetitle().data(), static_cast<int>(this->_internal_pagetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadedRequest.pageTitle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pagetitle(), target);
  }

  // repeated .CHTMLHeader headers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLoadedRequest)
  return target;
}

size_t CMsgLoadedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLoadedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CHTMLHeader headers = 5;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string pageTitle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLoadedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLoadedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLoadedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLoadedRequest)
    MergeFrom(*source);
  }
}

void CMsgLoadedRequest::MergeFrom(const CMsgLoadedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLoadedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pagetitle(from._internal_pagetitle());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLoadedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadedRequest::CopyFrom(const CMsgLoadedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLoadedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadedRequest::IsInitialized() const {
  return true;
}

void CMsgLoadedRequest::InternalSwap(CMsgLoadedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pagetitle_.Swap(&other->pagetitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLoadedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFavIconURLChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFavIconURLChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFavIconURLChanged::CMsgFavIconURLChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFavIconURLChanged)
}
CMsgFavIconURLChanged::CMsgFavIconURLChanged(const CMsgFavIconURLChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgFavIconURLChanged)
}

void CMsgFavIconURLChanged::SharedCtor() {
browser_handle_ = 0u;
}

CMsgFavIconURLChanged::~CMsgFavIconURLChanged() {
  // @@protoc_insertion_point(destructor:CMsgFavIconURLChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFavIconURLChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFavIconURLChanged::ArenaDtor(void* object) {
  CMsgFavIconURLChanged* _this = reinterpret_cast< CMsgFavIconURLChanged* >(object);
  (void)_this;
}
void CMsgFavIconURLChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFavIconURLChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFavIconURLChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFavIconURLChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFavIconURLChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFavIconURLChanged.urls");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFavIconURLChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFavIconURLChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // repeated string urls = 2;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFavIconURLChanged.urls");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFavIconURLChanged)
  return target;
}

size_t CMsgFavIconURLChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFavIconURLChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(urls_.size());
  for (int i = 0, n = urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      urls_.Get(i));
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFavIconURLChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFavIconURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFavIconURLChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFavIconURLChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFavIconURLChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFavIconURLChanged)
    MergeFrom(*source);
  }
}

void CMsgFavIconURLChanged::MergeFrom(const CMsgFavIconURLChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFavIconURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgFavIconURLChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFavIconURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFavIconURLChanged::CopyFrom(const CMsgFavIconURLChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFavIconURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFavIconURLChanged::IsInitialized() const {
  return true;
}

void CMsgFavIconURLChanged::InternalSwap(CMsgFavIconURLChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  urls_.InternalSwap(&other->urls_);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFavIconURLChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPageSecurity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPageSecurity>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CHTMLPageSecurityInfo& security_info(const CMsgPageSecurity* msg);
  static void set_has_security_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CHTMLPageSecurityInfo&
CMsgPageSecurity::_Internal::security_info(const CMsgPageSecurity* msg) {
  return *msg->security_info_;
}
CMsgPageSecurity::CMsgPageSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPageSecurity)
}
CMsgPageSecurity::CMsgPageSecurity(const CMsgPageSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  if (from._internal_has_security_info()) {
    security_info_ = new ::CHTMLPageSecurityInfo(*from.security_info_);
  } else {
    security_info_ = nullptr;
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgPageSecurity)
}

void CMsgPageSecurity::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&security_info_)) + sizeof(browser_handle_));
}

CMsgPageSecurity::~CMsgPageSecurity() {
  // @@protoc_insertion_point(destructor:CMsgPageSecurity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPageSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete security_info_;
}

void CMsgPageSecurity::ArenaDtor(void* object) {
  CMsgPageSecurity* _this = reinterpret_cast< CMsgPageSecurity* >(object);
  (void)_this;
}
void CMsgPageSecurity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPageSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPageSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPageSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(security_info_ != nullptr);
      security_info_->Clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPageSecurity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPageSecurity.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CHTMLPageSecurityInfo security_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPageSecurity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPageSecurity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPageSecurity.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional .CHTMLPageSecurityInfo security_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::security_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPageSecurity)
  return target;
}

size_t CMsgPageSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPageSecurity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .CHTMLPageSecurityInfo security_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *security_info_);
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPageSecurity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPageSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPageSecurity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPageSecurity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPageSecurity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPageSecurity)
    MergeFrom(*source);
  }
}

void CMsgPageSecurity::MergeFrom(const CMsgPageSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPageSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_security_info()->::CHTMLPageSecurityInfo::MergeFrom(from._internal_security_info());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPageSecurity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPageSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPageSecurity::CopyFrom(const CMsgPageSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPageSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPageSecurity::IsInitialized() const {
  return true;
}

void CMsgPageSecurity::InternalSwap(CMsgPageSecurity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPageSecurity, browser_handle_)
      + sizeof(CMsgPageSecurity::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgPageSecurity, security_info_)>(
          reinterpret_cast<char*>(&security_info_),
          reinterpret_cast<char*>(&other->security_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPageSecurity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStartRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartRequest>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_postdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bisredirect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgStartRequest::CMsgStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStartRequest)
}
CMsgStartRequest::CMsgStartRequest(const CMsgStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArena());
  }
  postdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_postdata()) {
    postdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_postdata(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bisredirect_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bisredirect_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartRequest)
}

void CMsgStartRequest::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
postdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bisredirect_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bisredirect_));
}

CMsgStartRequest::~CMsgStartRequest() {
  // @@protoc_insertion_point(destructor:CMsgStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartRequest::ArenaDtor(void* object) {
  CMsgStartRequest* _this = reinterpret_cast< CMsgStartRequest* >(object);
  (void)_this;
}
void CMsgStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      postdata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bisredirect_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bisredirect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartRequest.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartRequest.target");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string postData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_postdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartRequest.postData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bIsRedirect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bisredirect(&has_bits);
          bisredirect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string target = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartRequest.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // optional string postData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_postdata().data(), static_cast<int>(this->_internal_postdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartRequest.postData");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_postdata(), target);
  }

  // optional bool bIsRedirect = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bisredirect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartRequest)
  return target;
}

size_t CMsgStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string target = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional string postData = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_postdata());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bIsRedirect = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStartRequest)
    MergeFrom(*source);
  }
}

void CMsgStartRequest::MergeFrom(const CMsgStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_postdata(from._internal_postdata());
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisredirect_ = from.bisredirect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequest::CopyFrom(const CMsgStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequest::IsInitialized() const {
  return true;
}

void CMsgStartRequest::InternalSwap(CMsgStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postdata_.Swap(&other->postdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartRequest, bisredirect_)
      + sizeof(CMsgStartRequest::bisredirect_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartRequest, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStartRequestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartRequestResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ballow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgStartRequestResponse::CMsgStartRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStartRequestResponse)
}
CMsgStartRequestResponse::CMsgStartRequestResponse(const CMsgStartRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartRequestResponse)
}

void CMsgStartRequestResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
}

CMsgStartRequestResponse::~CMsgStartRequestResponse() {
  // @@protoc_insertion_point(destructor:CMsgStartRequestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStartRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgStartRequestResponse::ArenaDtor(void* object) {
  CMsgStartRequestResponse* _this = reinterpret_cast< CMsgStartRequestResponse* >(object);
  (void)_this;
}
void CMsgStartRequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStartRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStartRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ballow_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartRequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bAllow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ballow(&has_bits);
          ballow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStartRequestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ballow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartRequestResponse)
  return target;
}

size_t CMsgStartRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartRequestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bAllow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartRequestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStartRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartRequestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStartRequestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStartRequestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStartRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgStartRequestResponse::MergeFrom(const CMsgStartRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartRequestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStartRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequestResponse::CopyFrom(const CMsgStartRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequestResponse::IsInitialized() const {
  return true;
}

void CMsgStartRequestResponse::InternalSwap(CMsgStartRequestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartRequestResponse, ballow_)
      + sizeof(CMsgStartRequestResponse::ballow_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartRequestResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartRequestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgShowPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowPopup>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowPopup::CMsgShowPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgShowPopup)
}
CMsgShowPopup::CMsgShowPopup(const CMsgShowPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowPopup)
}

void CMsgShowPopup::SharedCtor() {
browser_handle_ = 0u;
}

CMsgShowPopup::~CMsgShowPopup() {
  // @@protoc_insertion_point(destructor:CMsgShowPopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgShowPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgShowPopup::ArenaDtor(void* object) {
  CMsgShowPopup* _this = reinterpret_cast< CMsgShowPopup* >(object);
  (void)_this;
}
void CMsgShowPopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgShowPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgShowPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowPopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgShowPopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowPopup)
  return target;
}

size_t CMsgShowPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowPopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowPopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgShowPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowPopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgShowPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgShowPopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgShowPopup)
    MergeFrom(*source);
  }
}

void CMsgShowPopup::MergeFrom(const CMsgShowPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgShowPopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgShowPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowPopup::CopyFrom(const CMsgShowPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowPopup::IsInitialized() const {
  return true;
}

void CMsgShowPopup::InternalSwap(CMsgShowPopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowPopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHidePopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHidePopup>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHidePopup::CMsgHidePopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHidePopup)
}
CMsgHidePopup::CMsgHidePopup(const CMsgHidePopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgHidePopup)
}

void CMsgHidePopup::SharedCtor() {
browser_handle_ = 0u;
}

CMsgHidePopup::~CMsgHidePopup() {
  // @@protoc_insertion_point(destructor:CMsgHidePopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHidePopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHidePopup::ArenaDtor(void* object) {
  CMsgHidePopup* _this = reinterpret_cast< CMsgHidePopup* >(object);
  (void)_this;
}
void CMsgHidePopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHidePopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHidePopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHidePopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHidePopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHidePopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHidePopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHidePopup)
  return target;
}

size_t CMsgHidePopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHidePopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHidePopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHidePopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHidePopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHidePopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHidePopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHidePopup)
    MergeFrom(*source);
  }
}

void CMsgHidePopup::MergeFrom(const CMsgHidePopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHidePopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgHidePopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHidePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHidePopup::CopyFrom(const CMsgHidePopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHidePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHidePopup::IsInitialized() const {
  return true;
}

void CMsgHidePopup::InternalSwap(CMsgHidePopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHidePopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSizePopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSizePopup>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wide(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tall(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSizePopup::CMsgSizePopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSizePopup)
}
CMsgSizePopup::CMsgSizePopup(const CMsgSizePopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  // @@protoc_insertion_point(copy_constructor:CMsgSizePopup)
}

void CMsgSizePopup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
}

CMsgSizePopup::~CMsgSizePopup() {
  // @@protoc_insertion_point(destructor:CMsgSizePopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSizePopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSizePopup::ArenaDtor(void* object) {
  CMsgSizePopup* _this = reinterpret_cast< CMsgSizePopup* >(object);
  (void)_this;
}
void CMsgSizePopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSizePopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSizePopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSizePopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tall_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSizePopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wide = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wide(&has_bits);
          wide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tall = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tall(&has_bits);
          tall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSizePopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSizePopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wide(), target);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSizePopup)
  return target;
}

size_t CMsgSizePopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSizePopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional uint32 wide = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wide());
    }

    // optional uint32 tall = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tall());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSizePopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSizePopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSizePopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSizePopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSizePopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSizePopup)
    MergeFrom(*source);
  }
}

void CMsgSizePopup::MergeFrom(const CMsgSizePopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSizePopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSizePopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSizePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSizePopup::CopyFrom(const CMsgSizePopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSizePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSizePopup::IsInitialized() const {
  return true;
}

void CMsgSizePopup::InternalSwap(CMsgSizePopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSizePopup, tall_)
      + sizeof(CMsgSizePopup::tall_)
      - PROTOBUF_FIELD_OFFSET(CMsgSizePopup, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSizePopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgOpenNewTab::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgOpenNewTab>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bforeground(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgOpenNewTab::CMsgOpenNewTab(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgOpenNewTab)
}
CMsgOpenNewTab::CMsgOpenNewTab(const CMsgOpenNewTab& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bforeground_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bforeground_));
  // @@protoc_insertion_point(copy_constructor:CMsgOpenNewTab)
}

void CMsgOpenNewTab::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bforeground_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bforeground_));
}

CMsgOpenNewTab::~CMsgOpenNewTab() {
  // @@protoc_insertion_point(destructor:CMsgOpenNewTab)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgOpenNewTab::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgOpenNewTab::ArenaDtor(void* object) {
  CMsgOpenNewTab* _this = reinterpret_cast< CMsgOpenNewTab* >(object);
  (void)_this;
}
void CMsgOpenNewTab::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgOpenNewTab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgOpenNewTab::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgOpenNewTab)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bforeground_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bforeground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgOpenNewTab::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgOpenNewTab.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bForeground = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bforeground(&has_bits);
          bforeground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgOpenNewTab::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpenNewTab)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgOpenNewTab.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional bool bForeground = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bforeground(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpenNewTab)
  return target;
}

size_t CMsgOpenNewTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgOpenNewTab)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bForeground = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgOpenNewTab::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgOpenNewTab)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenNewTab* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgOpenNewTab>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgOpenNewTab)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgOpenNewTab)
    MergeFrom(*source);
  }
}

void CMsgOpenNewTab::MergeFrom(const CMsgOpenNewTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgOpenNewTab)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      bforeground_ = from.bforeground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgOpenNewTab::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgOpenNewTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenNewTab::CopyFrom(const CMsgOpenNewTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgOpenNewTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenNewTab::IsInitialized() const {
  return true;
}

void CMsgOpenNewTab::InternalSwap(CMsgOpenNewTab* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgOpenNewTab, bforeground_)
      + sizeof(CMsgOpenNewTab::bforeground_)
      - PROTOBUF_FIELD_OFFSET(CMsgOpenNewTab, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgOpenNewTab::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPopupHTMLWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPopupHTMLWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wide(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tall(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_popup_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trusted_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_parent_popup_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgPopupHTMLWindow::CMsgPopupHTMLWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPopupHTMLWindow)
}
CMsgPopupHTMLWindow::CMsgPopupHTMLWindow(const CMsgPopupHTMLWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgPopupHTMLWindow)
}

void CMsgPopupHTMLWindow::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hwnd_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(hwnd_));
x_ = -2147483647 - 1;
y_ = -2147483647 - 1;
}

CMsgPopupHTMLWindow::~CMsgPopupHTMLWindow() {
  // @@protoc_insertion_point(destructor:CMsgPopupHTMLWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPopupHTMLWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPopupHTMLWindow::ArenaDtor(void* object) {
  CMsgPopupHTMLWindow* _this = reinterpret_cast< CMsgPopupHTMLWindow* >(object);
  (void)_this;
}
void CMsgPopupHTMLWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPopupHTMLWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPopupHTMLWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPopupHTMLWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_popup_index_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(parent_popup_index_));
  }
  if (cached_has_bits & 0x00000700u) {
    hwnd_ = PROTOBUF_ULONGLONG(0);
    x_ = -2147483647 - 1;
    y_ = -2147483647 - 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPopupHTMLWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPopupHTMLWindow.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 3 [default = -2147483648];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 4 [default = -2147483648];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wide = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wide(&has_bits);
          wide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tall = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tall(&has_bits);
          tall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 popup_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_popup_index(&has_bits);
          popup_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trusted_creator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_trusted_creator(&has_bits);
          trusted_creator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPopupHTMLWindow.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 hwnd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hwnd(&has_bits);
          hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_popup_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_parent_popup_index(&has_bits);
          parent_popup_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPopupHTMLWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopupHTMLWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPopupHTMLWindow.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional int32 x = 3 [default = -2147483648];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // optional int32 y = 4 [default = -2147483648];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // optional uint32 wide = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_wide(), target);
  }

  // optional uint32 tall = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tall(), target);
  }

  // optional uint32 popup_index = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_popup_index(), target);
  }

  // optional bool trusted_creator = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_trusted_creator(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPopupHTMLWindow.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // optional uint64 hwnd = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_hwnd(), target);
  }

  // optional uint32 parent_popup_index = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_parent_popup_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopupHTMLWindow)
  return target;
}

size_t CMsgPopupHTMLWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPopupHTMLWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 wide = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wide());
    }

    // optional uint32 tall = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tall());
    }

    // optional uint32 popup_index = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_popup_index());
    }

    // optional bool trusted_creator = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 parent_popup_index = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_popup_index());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 hwnd = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_hwnd());
    }

    // optional int32 x = 3 [default = -2147483648];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 4 [default = -2147483648];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPopupHTMLWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPopupHTMLWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupHTMLWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPopupHTMLWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPopupHTMLWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPopupHTMLWindow)
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindow::MergeFrom(const CMsgPopupHTMLWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPopupHTMLWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    if (cached_has_bits & 0x00000020u) {
      popup_index_ = from.popup_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      trusted_creator_ = from.trusted_creator_;
    }
    if (cached_has_bits & 0x00000080u) {
      parent_popup_index_ = from.parent_popup_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      hwnd_ = from.hwnd_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPopupHTMLWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPopupHTMLWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindow::CopyFrom(const CMsgPopupHTMLWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPopupHTMLWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindow::IsInitialized() const {
  return true;
}

void CMsgPopupHTMLWindow::InternalSwap(CMsgPopupHTMLWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPopupHTMLWindow, hwnd_)
      + sizeof(CMsgPopupHTMLWindow::hwnd_)
      - PROTOBUF_FIELD_OFFSET(CMsgPopupHTMLWindow, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPopupHTMLWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPopupHTMLWindowResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPopupHTMLWindowResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ballow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPopupHTMLWindowResponse)
}
CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse(const CMsgPopupHTMLWindowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:CMsgPopupHTMLWindowResponse)
}

void CMsgPopupHTMLWindowResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
}

CMsgPopupHTMLWindowResponse::~CMsgPopupHTMLWindowResponse() {
  // @@protoc_insertion_point(destructor:CMsgPopupHTMLWindowResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPopupHTMLWindowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPopupHTMLWindowResponse::ArenaDtor(void* object) {
  CMsgPopupHTMLWindowResponse* _this = reinterpret_cast< CMsgPopupHTMLWindowResponse* >(object);
  (void)_this;
}
void CMsgPopupHTMLWindowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPopupHTMLWindowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPopupHTMLWindowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPopupHTMLWindowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ballow_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPopupHTMLWindowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bAllow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ballow(&has_bits);
          ballow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPopupHTMLWindowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopupHTMLWindowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ballow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopupHTMLWindowResponse)
  return target;
}

size_t CMsgPopupHTMLWindowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPopupHTMLWindowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bAllow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPopupHTMLWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupHTMLWindowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPopupHTMLWindowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPopupHTMLWindowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPopupHTMLWindowResponse)
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const CMsgPopupHTMLWindowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPopupHTMLWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPopupHTMLWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const CMsgPopupHTMLWindowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPopupHTMLWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindowResponse::IsInitialized() const {
  return true;
}

void CMsgPopupHTMLWindowResponse::InternalSwap(CMsgPopupHTMLWindowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, ballow_)
      + sizeof(CMsgPopupHTMLWindowResponse::ballow_)
      - PROTOBUF_FIELD_OFFSET(CMsgPopupHTMLWindowResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPopupHTMLWindowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetHTMLTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetHTMLTitle>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetHTMLTitle::CMsgSetHTMLTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetHTMLTitle)
}
CMsgSetHTMLTitle::CMsgSetHTMLTitle(const CMsgSetHTMLTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetHTMLTitle)
}

void CMsgSetHTMLTitle::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgSetHTMLTitle::~CMsgSetHTMLTitle() {
  // @@protoc_insertion_point(destructor:CMsgSetHTMLTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetHTMLTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetHTMLTitle::ArenaDtor(void* object) {
  CMsgSetHTMLTitle* _this = reinterpret_cast< CMsgSetHTMLTitle* >(object);
  (void)_this;
}
void CMsgSetHTMLTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetHTMLTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetHTMLTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetHTMLTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetHTMLTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetHTMLTitle.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetHTMLTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetHTMLTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetHTMLTitle.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetHTMLTitle)
  return target;
}

size_t CMsgSetHTMLTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetHTMLTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetHTMLTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetHTMLTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetHTMLTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetHTMLTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetHTMLTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetHTMLTitle)
    MergeFrom(*source);
  }
}

void CMsgSetHTMLTitle::MergeFrom(const CMsgSetHTMLTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetHTMLTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetHTMLTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetHTMLTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHTMLTitle::CopyFrom(const CMsgSetHTMLTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetHTMLTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHTMLTitle::IsInitialized() const {
  return true;
}

void CMsgSetHTMLTitle::InternalSwap(CMsgSetHTMLTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetHTMLTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLoadingResource::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLoadingResource>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLoadingResource::CMsgLoadingResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLoadingResource)
}
CMsgLoadingResource::CMsgLoadingResource(const CMsgLoadingResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgLoadingResource)
}

void CMsgLoadingResource::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgLoadingResource::~CMsgLoadingResource() {
  // @@protoc_insertion_point(destructor:CMsgLoadingResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLoadingResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadingResource::ArenaDtor(void* object) {
  CMsgLoadingResource* _this = reinterpret_cast< CMsgLoadingResource* >(object);
  (void)_this;
}
void CMsgLoadingResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLoadingResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLoadingResource::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLoadingResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLoadingResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadingResource.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLoadingResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLoadingResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadingResource.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLoadingResource)
  return target;
}

size_t CMsgLoadingResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLoadingResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadingResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLoadingResource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadingResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLoadingResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLoadingResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLoadingResource)
    MergeFrom(*source);
  }
}

void CMsgLoadingResource::MergeFrom(const CMsgLoadingResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLoadingResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadingResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLoadingResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadingResource::CopyFrom(const CMsgLoadingResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLoadingResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadingResource::IsInitialized() const {
  return true;
}

void CMsgLoadingResource::InternalSwap(CMsgLoadingResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLoadingResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStatusText::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStatusText>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgStatusText::CMsgStatusText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStatusText)
}
CMsgStatusText::CMsgStatusText(const CMsgStatusText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgStatusText)
}

void CMsgStatusText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgStatusText::~CMsgStatusText() {
  // @@protoc_insertion_point(destructor:CMsgStatusText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStatusText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgStatusText::ArenaDtor(void* object) {
  CMsgStatusText* _this = reinterpret_cast< CMsgStatusText* >(object);
  (void)_this;
}
void CMsgStatusText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStatusText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStatusText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStatusText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStatusText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStatusText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStatusText)
  return target;
}

size_t CMsgStatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStatusText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStatusText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStatusText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStatusText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStatusText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStatusText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStatusText)
    MergeFrom(*source);
  }
}

void CMsgStatusText::MergeFrom(const CMsgStatusText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStatusText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStatusText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStatusText::CopyFrom(const CMsgStatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStatusText::IsInitialized() const {
  return true;
}

void CMsgStatusText::InternalSwap(CMsgStatusText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStatusText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetCursor::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetCursor>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wide(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tall(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_xhotspot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_yhotspot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSetCursor::CMsgSetCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetCursor)
}
CMsgSetCursor::CMsgSetCursor(const CMsgSetCursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_data()) {
    custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_data(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&yhotspot_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(yhotspot_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetCursor)
}

void CMsgSetCursor::SharedCtor() {
custom_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yhotspot_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(yhotspot_));
}

CMsgSetCursor::~CMsgSetCursor() {
  // @@protoc_insertion_point(destructor:CMsgSetCursor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetCursor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  custom_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetCursor::ArenaDtor(void* object) {
  CMsgSetCursor* _this = reinterpret_cast< CMsgSetCursor* >(object);
  (void)_this;
}
void CMsgSetCursor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetCursor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetCursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    custom_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yhotspot_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(yhotspot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetCursor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cursor(&has_bits);
          cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes custom_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_custom_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wide = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wide(&has_bits);
          wide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tall = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tall(&has_bits);
          tall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xhotspot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_xhotspot(&has_bits);
          xhotspot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 yhotspot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_yhotspot(&has_bits);
          yhotspot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetCursor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetCursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cursor(), target);
  }

  // optional bytes custom_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_custom_data(), target);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wide(), target);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tall(), target);
  }

  // optional uint32 xhotspot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_xhotspot(), target);
  }

  // optional uint32 yhotspot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_yhotspot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetCursor)
  return target;
}

size_t CMsgSetCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetCursor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes custom_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_custom_data());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 cursor = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cursor());
    }

    // optional uint32 wide = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wide());
    }

    // optional uint32 tall = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tall());
    }

    // optional uint32 xhotspot = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xhotspot());
    }

    // optional uint32 yhotspot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_yhotspot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetCursor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetCursor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetCursor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetCursor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetCursor)
    MergeFrom(*source);
  }
}

void CMsgSetCursor::MergeFrom(const CMsgSetCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_data(from._internal_custom_data());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      cursor_ = from.cursor_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    if (cached_has_bits & 0x00000020u) {
      xhotspot_ = from.xhotspot_;
    }
    if (cached_has_bits & 0x00000040u) {
      yhotspot_ = from.yhotspot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetCursor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCursor::CopyFrom(const CMsgSetCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCursor::IsInitialized() const {
  return true;
}

void CMsgSetCursor::InternalSwap(CMsgSetCursor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_data_.Swap(&other->custom_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetCursor, yhotspot_)
      + sizeof(CMsgSetCursor::yhotspot_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetCursor, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetCursor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFileLoadDialog_Filter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFileLoadDialog_Filter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgFileLoadDialog_Filter::CMsgFileLoadDialog_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  patterns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFileLoadDialog.Filter)
}
CMsgFileLoadDialog_Filter::CMsgFileLoadDialog_Filter(const CMsgFileLoadDialog_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      patterns_(from.patterns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:CMsgFileLoadDialog.Filter)
}

void CMsgFileLoadDialog_Filter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_default_ = false;
}

CMsgFileLoadDialog_Filter::~CMsgFileLoadDialog_Filter() {
  // @@protoc_insertion_point(destructor:CMsgFileLoadDialog.Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFileLoadDialog_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgFileLoadDialog_Filter::ArenaDtor(void* object) {
  CMsgFileLoadDialog_Filter* _this = reinterpret_cast< CMsgFileLoadDialog_Filter* >(object);
  (void)_this;
}
void CMsgFileLoadDialog_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFileLoadDialog_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFileLoadDialog_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFileLoadDialog.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patterns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFileLoadDialog_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFileLoadDialog.Filter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string patterns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_patterns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFileLoadDialog.Filter.patterns");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFileLoadDialog_Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFileLoadDialog.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFileLoadDialog.Filter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string patterns = 2;
  for (int i = 0, n = this->_internal_patterns_size(); i < n; i++) {
    const auto& s = this->_internal_patterns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFileLoadDialog.Filter.patterns");
    target = stream->WriteString(2, s, target);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFileLoadDialog.Filter)
  return target;
}

size_t CMsgFileLoadDialog_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFileLoadDialog.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string patterns = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(patterns_.size());
  for (int i = 0, n = patterns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      patterns_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFileLoadDialog_Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFileLoadDialog.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialog_Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFileLoadDialog_Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFileLoadDialog.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFileLoadDialog.Filter)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialog_Filter::MergeFrom(const CMsgFileLoadDialog_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFileLoadDialog.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patterns_.MergeFrom(from.patterns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFileLoadDialog_Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFileLoadDialog.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialog_Filter::CopyFrom(const CMsgFileLoadDialog_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFileLoadDialog.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialog_Filter::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialog_Filter::InternalSwap(CMsgFileLoadDialog_Filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  patterns_.InternalSwap(&other->patterns_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_default_, other->is_default_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFileLoadDialog_Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFileLoadDialog::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFileLoadDialog>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_owning_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initialfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_save(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_choose_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgFileLoadDialog::CMsgFileLoadDialog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accept_types_(arena),
  filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFileLoadDialog)
}
CMsgFileLoadDialog::CMsgFileLoadDialog(const CMsgFileLoadDialog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      accept_types_(from.accept_types_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  initialfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_initialfile()) {
    initialfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initialfile(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&choose_directory_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(choose_directory_));
  // @@protoc_insertion_point(copy_constructor:CMsgFileLoadDialog)
}

void CMsgFileLoadDialog::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initialfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&choose_directory_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(choose_directory_));
}

CMsgFileLoadDialog::~CMsgFileLoadDialog() {
  // @@protoc_insertion_point(destructor:CMsgFileLoadDialog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFileLoadDialog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initialfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgFileLoadDialog::ArenaDtor(void* object) {
  CMsgFileLoadDialog* _this = reinterpret_cast< CMsgFileLoadDialog* >(object);
  (void)_this;
}
void CMsgFileLoadDialog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFileLoadDialog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFileLoadDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFileLoadDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_types_.Clear();
  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      initialfile_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&choose_directory_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(choose_directory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFileLoadDialog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owning_browser_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owning_browser_handle(&has_bits);
          owning_browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFileLoadDialog.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string initialFile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_initialfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFileLoadDialog.initialFile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string accept_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accept_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFileLoadDialog.accept_types");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_save = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_save(&has_bits);
          is_save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool choose_directory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_choose_directory(&has_bits);
          choose_directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgFileLoadDialog.Filter filters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFileLoadDialog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFileLoadDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 owning_browser_handle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owning_browser_handle(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFileLoadDialog.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string initialFile = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_initialfile().data(), static_cast<int>(this->_internal_initialfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFileLoadDialog.initialFile");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_initialfile(), target);
  }

  // repeated string accept_types = 5;
  for (int i = 0, n = this->_internal_accept_types_size(); i < n; i++) {
    const auto& s = this->_internal_accept_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFileLoadDialog.accept_types");
    target = stream->WriteString(5, s, target);
  }

  // optional bool is_save = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_save(), target);
  }

  // optional bool choose_directory = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_choose_directory(), target);
  }

  // repeated .CMsgFileLoadDialog.Filter filters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFileLoadDialog)
  return target;
}

size_t CMsgFileLoadDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFileLoadDialog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accept_types = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(accept_types_.size());
  for (int i = 0, n = accept_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      accept_types_.Get(i));
  }

  // repeated .CMsgFileLoadDialog.Filter filters = 8;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string initialFile = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initialfile());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 owning_browser_handle = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owning_browser_handle());
    }

    // optional bool is_save = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool choose_directory = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFileLoadDialog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFileLoadDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFileLoadDialog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFileLoadDialog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFileLoadDialog)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialog::MergeFrom(const CMsgFileLoadDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFileLoadDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accept_types_.MergeFrom(from.accept_types_);
  filters_.MergeFrom(from.filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_initialfile(from._internal_initialfile());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      owning_browser_handle_ = from.owning_browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_save_ = from.is_save_;
    }
    if (cached_has_bits & 0x00000020u) {
      choose_directory_ = from.choose_directory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFileLoadDialog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFileLoadDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialog::CopyFrom(const CMsgFileLoadDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFileLoadDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialog::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialog::InternalSwap(CMsgFileLoadDialog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accept_types_.InternalSwap(&other->accept_types_);
  filters_.InternalSwap(&other->filters_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initialfile_.Swap(&other->initialfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFileLoadDialog, choose_directory_)
      + sizeof(CMsgFileLoadDialog::choose_directory_)
      - PROTOBUF_FIELD_OFFSET(CMsgFileLoadDialog, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFileLoadDialog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFileLoadDialogResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFileLoadDialogResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owning_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFileLoadDialogResponse)
}
CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse(const CMsgFileLoadDialogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bsuccess_));
  // @@protoc_insertion_point(copy_constructor:CMsgFileLoadDialogResponse)
}

void CMsgFileLoadDialogResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bsuccess_));
}

CMsgFileLoadDialogResponse::~CMsgFileLoadDialogResponse() {
  // @@protoc_insertion_point(destructor:CMsgFileLoadDialogResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFileLoadDialogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFileLoadDialogResponse::ArenaDtor(void* object) {
  CMsgFileLoadDialogResponse* _this = reinterpret_cast< CMsgFileLoadDialogResponse* >(object);
  (void)_this;
}
void CMsgFileLoadDialogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFileLoadDialogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFileLoadDialogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFileLoadDialogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bsuccess_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bsuccess_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFileLoadDialogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owning_browser_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owning_browser_handle(&has_bits);
          owning_browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bsuccess = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bsuccess(&has_bits);
          bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFileLoadDialogResponse.files");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFileLoadDialogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFileLoadDialogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 owning_browser_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owning_browser_handle(), target);
  }

  // optional bool bsuccess = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bsuccess(), target);
  }

  // repeated string files = 4;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFileLoadDialogResponse.files");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFileLoadDialogResponse)
  return target;
}

size_t CMsgFileLoadDialogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFileLoadDialogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(files_.size());
  for (int i = 0, n = files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      files_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 owning_browser_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owning_browser_handle());
    }

    // optional bool bsuccess = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFileLoadDialogResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFileLoadDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialogResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFileLoadDialogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFileLoadDialogResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFileLoadDialogResponse)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialogResponse::MergeFrom(const CMsgFileLoadDialogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFileLoadDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      owning_browser_handle_ = from.owning_browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      bsuccess_ = from.bsuccess_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFileLoadDialogResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFileLoadDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialogResponse::CopyFrom(const CMsgFileLoadDialogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFileLoadDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialogResponse::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialogResponse::InternalSwap(CMsgFileLoadDialogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFileLoadDialogResponse, bsuccess_)
      + sizeof(CMsgFileLoadDialogResponse::bsuccess_)
      - PROTOBUF_FIELD_OFFSET(CMsgFileLoadDialogResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFileLoadDialogResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgShowToolTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowToolTip>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowToolTip::CMsgShowToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgShowToolTip)
}
CMsgShowToolTip::CMsgShowToolTip(const CMsgShowToolTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowToolTip)
}

void CMsgShowToolTip::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgShowToolTip::~CMsgShowToolTip() {
  // @@protoc_insertion_point(destructor:CMsgShowToolTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgShowToolTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgShowToolTip::ArenaDtor(void* object) {
  CMsgShowToolTip* _this = reinterpret_cast< CMsgShowToolTip* >(object);
  (void)_this;
}
void CMsgShowToolTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgShowToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgShowToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowToolTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowToolTip.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgShowToolTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowToolTip.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowToolTip)
  return target;
}

size_t CMsgShowToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowToolTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowToolTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgShowToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowToolTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgShowToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgShowToolTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgShowToolTip)
    MergeFrom(*source);
  }
}

void CMsgShowToolTip::MergeFrom(const CMsgShowToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgShowToolTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgShowToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowToolTip::CopyFrom(const CMsgShowToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowToolTip::IsInitialized() const {
  return true;
}

void CMsgShowToolTip::InternalSwap(CMsgShowToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowToolTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUpdateToolTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUpdateToolTip>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgUpdateToolTip::CMsgUpdateToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUpdateToolTip)
}
CMsgUpdateToolTip::CMsgUpdateToolTip(const CMsgUpdateToolTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateToolTip)
}

void CMsgUpdateToolTip::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgUpdateToolTip::~CMsgUpdateToolTip() {
  // @@protoc_insertion_point(destructor:CMsgUpdateToolTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUpdateToolTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateToolTip::ArenaDtor(void* object) {
  CMsgUpdateToolTip* _this = reinterpret_cast< CMsgUpdateToolTip* >(object);
  (void)_this;
}
void CMsgUpdateToolTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUpdateToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUpdateToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUpdateToolTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgUpdateToolTip.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUpdateToolTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgUpdateToolTip.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateToolTip)
  return target;
}

size_t CMsgUpdateToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateToolTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUpdateToolTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUpdateToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateToolTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUpdateToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUpdateToolTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUpdateToolTip)
    MergeFrom(*source);
  }
}

void CMsgUpdateToolTip::MergeFrom(const CMsgUpdateToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUpdateToolTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUpdateToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateToolTip::CopyFrom(const CMsgUpdateToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateToolTip::IsInitialized() const {
  return true;
}

void CMsgUpdateToolTip::InternalSwap(CMsgUpdateToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUpdateToolTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHideToolTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHideToolTip>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHideToolTip::CMsgHideToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHideToolTip)
}
CMsgHideToolTip::CMsgHideToolTip(const CMsgHideToolTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgHideToolTip)
}

void CMsgHideToolTip::SharedCtor() {
browser_handle_ = 0u;
}

CMsgHideToolTip::~CMsgHideToolTip() {
  // @@protoc_insertion_point(destructor:CMsgHideToolTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHideToolTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHideToolTip::ArenaDtor(void* object) {
  CMsgHideToolTip* _this = reinterpret_cast< CMsgHideToolTip* >(object);
  (void)_this;
}
void CMsgHideToolTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHideToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHideToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHideToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHideToolTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHideToolTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHideToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHideToolTip)
  return target;
}

size_t CMsgHideToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHideToolTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHideToolTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHideToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHideToolTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHideToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHideToolTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHideToolTip)
    MergeFrom(*source);
  }
}

void CMsgHideToolTip::MergeFrom(const CMsgHideToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHideToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgHideToolTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHideToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHideToolTip::CopyFrom(const CMsgHideToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHideToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHideToolTip::IsInitialized() const {
  return true;
}

void CMsgHideToolTip::InternalSwap(CMsgHideToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHideToolTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSearchResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSearchResults>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activematch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_results(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSearchResults::CMsgSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSearchResults)
}
CMsgSearchResults::CMsgSearchResults(const CMsgSearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&results_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(results_));
  // @@protoc_insertion_point(copy_constructor:CMsgSearchResults)
}

void CMsgSearchResults::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&results_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(results_));
}

CMsgSearchResults::~CMsgSearchResults() {
  // @@protoc_insertion_point(destructor:CMsgSearchResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSearchResults::ArenaDtor(void* object) {
  CMsgSearchResults* _this = reinterpret_cast< CMsgSearchResults* >(object);
  (void)_this;
}
void CMsgSearchResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&results_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(results_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSearchResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 activeMatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_activematch(&has_bits);
          activematch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_results(&has_bits);
          results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSearchResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 activeMatch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_activematch(), target);
  }

  // optional int32 results = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSearchResults)
  return target;
}

size_t CMsgSearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSearchResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 activeMatch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_activematch());
    }

    // optional int32 results = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_results());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSearchResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSearchResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSearchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSearchResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSearchResults)
    MergeFrom(*source);
  }
}

void CMsgSearchResults::MergeFrom(const CMsgSearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      activematch_ = from.activematch_;
    }
    if (cached_has_bits & 0x00000004u) {
      results_ = from.results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSearchResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSearchResults::CopyFrom(const CMsgSearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSearchResults::IsInitialized() const {
  return true;
}

void CMsgSearchResults::InternalSwap(CMsgSearchResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSearchResults, results_)
      + sizeof(CMsgSearchResults::results_)
      - PROTOBUF_FIELD_OFFSET(CMsgSearchResults, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSearchResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClose::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClose>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClose::CMsgClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClose)
}
CMsgClose::CMsgClose(const CMsgClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgClose)
}

void CMsgClose::SharedCtor() {
browser_handle_ = 0u;
}

CMsgClose::~CMsgClose() {
  // @@protoc_insertion_point(destructor:CMsgClose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClose::ArenaDtor(void* object) {
  CMsgClose* _this = reinterpret_cast< CMsgClose* >(object);
  (void)_this;
}
void CMsgClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClose::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClose)
  return target;
}

size_t CMsgClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClose)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClose)
    MergeFrom(*source);
  }
}

void CMsgClose::MergeFrom(const CMsgClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClose::CopyFrom(const CMsgClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClose::IsInitialized() const {
  return true;
}

void CMsgClose::InternalSwap(CMsgClose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetSharedPaintBuffers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetSharedPaintBuffers>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tall(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_source_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetSharedPaintBuffers)
}
CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers(const CMsgSetSharedPaintBuffers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetSharedPaintBuffers)
}

void CMsgSetSharedPaintBuffers::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
}

CMsgSetSharedPaintBuffers::~CMsgSetSharedPaintBuffers() {
  // @@protoc_insertion_point(destructor:CMsgSetSharedPaintBuffers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetSharedPaintBuffers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetSharedPaintBuffers::ArenaDtor(void* object) {
  CMsgSetSharedPaintBuffers* _this = reinterpret_cast< CMsgSetSharedPaintBuffers* >(object);
  (void)_this;
}
void CMsgSetSharedPaintBuffers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetSharedPaintBuffers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetSharedPaintBuffers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetSharedPaintBuffers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tall_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetSharedPaintBuffers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wide(&has_bits);
          wide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tall(&has_bits);
          tall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_source_pid(&has_bits);
          source_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_handle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_source_handle(&has_bits);
          source_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetSharedPaintBuffers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetSharedPaintBuffers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 wide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wide(), target);
  }

  // optional uint32 tall = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tall(), target);
  }

  // optional uint64 source_pid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_source_pid(), target);
  }

  // optional uint64 source_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_source_handle(), target);
  }

  // optional uint64 handle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetSharedPaintBuffers)
  return target;
}

size_t CMsgSetSharedPaintBuffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetSharedPaintBuffers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 wide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wide());
    }

    // optional uint64 source_pid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_pid());
    }

    // optional uint64 source_handle = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_handle());
    }

    // optional uint64 handle = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_handle());
    }

    // optional uint32 tall = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tall());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetSharedPaintBuffers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetSharedPaintBuffers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetSharedPaintBuffers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetSharedPaintBuffers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetSharedPaintBuffers)
    MergeFrom(*source);
  }
}

void CMsgSetSharedPaintBuffers::MergeFrom(const CMsgSetSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_pid_ = from.source_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_handle_ = from.source_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      tall_ = from.tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetSharedPaintBuffers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSharedPaintBuffers::CopyFrom(const CMsgSetSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSharedPaintBuffers::IsInitialized() const {
  return true;
}

void CMsgSetSharedPaintBuffers::InternalSwap(CMsgSetSharedPaintBuffers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetSharedPaintBuffers, tall_)
      + sizeof(CMsgSetSharedPaintBuffers::tall_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetSharedPaintBuffers, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetSharedPaintBuffers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAckSharedPaintBuffers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAckSharedPaintBuffers>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAckSharedPaintBuffers::CMsgAckSharedPaintBuffers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAckSharedPaintBuffers)
}
CMsgAckSharedPaintBuffers::CMsgAckSharedPaintBuffers(const CMsgAckSharedPaintBuffers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgAckSharedPaintBuffers)
}

void CMsgAckSharedPaintBuffers::SharedCtor() {
browser_handle_ = 0u;
}

CMsgAckSharedPaintBuffers::~CMsgAckSharedPaintBuffers() {
  // @@protoc_insertion_point(destructor:CMsgAckSharedPaintBuffers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAckSharedPaintBuffers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAckSharedPaintBuffers::ArenaDtor(void* object) {
  CMsgAckSharedPaintBuffers* _this = reinterpret_cast< CMsgAckSharedPaintBuffers* >(object);
  (void)_this;
}
void CMsgAckSharedPaintBuffers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAckSharedPaintBuffers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAckSharedPaintBuffers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAckSharedPaintBuffers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAckSharedPaintBuffers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAckSharedPaintBuffers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAckSharedPaintBuffers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAckSharedPaintBuffers)
  return target;
}

size_t CMsgAckSharedPaintBuffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAckSharedPaintBuffers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAckSharedPaintBuffers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAckSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAckSharedPaintBuffers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAckSharedPaintBuffers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAckSharedPaintBuffers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAckSharedPaintBuffers)
    MergeFrom(*source);
  }
}

void CMsgAckSharedPaintBuffers::MergeFrom(const CMsgAckSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAckSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgAckSharedPaintBuffers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAckSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAckSharedPaintBuffers::CopyFrom(const CMsgAckSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAckSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAckSharedPaintBuffers::IsInitialized() const {
  return true;
}

void CMsgAckSharedPaintBuffers::InternalSwap(CMsgAckSharedPaintBuffers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAckSharedPaintBuffers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgNeedsPaint::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNeedsPaint>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scrollx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scrolly(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pagescale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pageserial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_frame_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stddev_sum_frame_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_long_frame_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgNeedsPaint::CMsgNeedsPaint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNeedsPaint)
}
CMsgNeedsPaint::CMsgNeedsPaint(const CMsgNeedsPaint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&long_frame_ms_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(long_frame_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgNeedsPaint)
}

void CMsgNeedsPaint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&long_frame_ms_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(long_frame_ms_));
}

CMsgNeedsPaint::~CMsgNeedsPaint() {
  // @@protoc_insertion_point(destructor:CMsgNeedsPaint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNeedsPaint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgNeedsPaint::ArenaDtor(void* object) {
  CMsgNeedsPaint* _this = reinterpret_cast< CMsgNeedsPaint* >(object);
  (void)_this;
}
void CMsgNeedsPaint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNeedsPaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNeedsPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNeedsPaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&long_frame_ms_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(long_frame_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNeedsPaint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scrollx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_scrollx(&has_bits);
          scrollx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scrolly = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_scrolly(&has_bits);
          scrolly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pagescale = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_pagescale(&has_bits);
          pagescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageserial = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_pageserial(&has_bits);
          pageserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_frame_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_avg_frame_ms(&has_bits);
          avg_frame_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float stddev_sum_frame_ms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_stddev_sum_frame_ms(&has_bits);
          stddev_sum_frame_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 long_frame_ms = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_long_frame_ms(&has_bits);
          long_frame_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNeedsPaint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNeedsPaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 scrollx = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_scrollx(), target);
  }

  // optional uint32 scrolly = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_scrolly(), target);
  }

  // optional float pagescale = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_pagescale(), target);
  }

  // optional uint32 pageserial = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_pageserial(), target);
  }

  // optional uint32 avg_frame_ms = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_avg_frame_ms(), target);
  }

  // optional float stddev_sum_frame_ms = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_stddev_sum_frame_ms(), target);
  }

  // optional uint32 long_frame_ms = 22;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_long_frame_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNeedsPaint)
  return target;
}

size_t CMsgNeedsPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNeedsPaint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 scrollx = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scrollx());
    }

    // optional uint32 scrolly = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scrolly());
    }

    // optional float pagescale = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 pageserial = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageserial());
    }

    // optional uint32 avg_frame_ms = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_frame_ms());
    }

    // optional float stddev_sum_frame_ms = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional uint32 long_frame_ms = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_long_frame_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNeedsPaint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeedsPaint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNeedsPaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNeedsPaint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNeedsPaint)
    MergeFrom(*source);
  }
}

void CMsgNeedsPaint::MergeFrom(const CMsgNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000004u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000008u) {
      pagescale_ = from.pagescale_;
    }
    if (cached_has_bits & 0x00000010u) {
      pageserial_ = from.pageserial_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_frame_ms_ = from.avg_frame_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      stddev_sum_frame_ms_ = from.stddev_sum_frame_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      long_frame_ms_ = from.long_frame_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNeedsPaint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsPaint::CopyFrom(const CMsgNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsPaint::IsInitialized() const {
  return true;
}

void CMsgNeedsPaint::InternalSwap(CMsgNeedsPaint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNeedsPaint, long_frame_ms_)
      + sizeof(CMsgNeedsPaint::long_frame_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgNeedsPaint, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNeedsPaint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgComboNeedsPaint::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgComboNeedsPaint>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rgba(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_combobox_wide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_combobox_tall(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shared_memory_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shared_memory_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgComboNeedsPaint::CMsgComboNeedsPaint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgComboNeedsPaint)
}
CMsgComboNeedsPaint::CMsgComboNeedsPaint(const CMsgComboNeedsPaint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rgba_, &from.rgba_,
    static_cast<size_t>(reinterpret_cast<char*>(&combobox_tall_) -
    reinterpret_cast<char*>(&rgba_)) + sizeof(combobox_tall_));
  // @@protoc_insertion_point(copy_constructor:CMsgComboNeedsPaint)
}

void CMsgComboNeedsPaint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rgba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&combobox_tall_) -
    reinterpret_cast<char*>(&rgba_)) + sizeof(combobox_tall_));
}

CMsgComboNeedsPaint::~CMsgComboNeedsPaint() {
  // @@protoc_insertion_point(destructor:CMsgComboNeedsPaint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgComboNeedsPaint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgComboNeedsPaint::ArenaDtor(void* object) {
  CMsgComboNeedsPaint* _this = reinterpret_cast< CMsgComboNeedsPaint* >(object);
  (void)_this;
}
void CMsgComboNeedsPaint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgComboNeedsPaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgComboNeedsPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgComboNeedsPaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&rgba_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&combobox_tall_) -
        reinterpret_cast<char*>(&rgba_)) + sizeof(combobox_tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgComboNeedsPaint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rgba = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rgba(&has_bits);
          rgba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 combobox_wide = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_combobox_wide(&has_bits);
          combobox_wide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 combobox_tall = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_combobox_tall(&has_bits);
          combobox_tall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 shared_memory_handle = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_shared_memory_handle(&has_bits);
          shared_memory_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 shared_memory_size = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_shared_memory_size(&has_bits);
          shared_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgComboNeedsPaint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgComboNeedsPaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint64 rgba = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rgba(), target);
  }

  // optional uint32 combobox_wide = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_combobox_wide(), target);
  }

  // optional uint32 combobox_tall = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_combobox_tall(), target);
  }

  // optional uint64 shared_memory_handle = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_shared_memory_handle(), target);
  }

  // optional uint64 shared_memory_size = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_shared_memory_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgComboNeedsPaint)
  return target;
}

size_t CMsgComboNeedsPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgComboNeedsPaint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 rgba = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rgba());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 combobox_wide = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_combobox_wide());
    }

    // optional uint64 shared_memory_handle = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shared_memory_handle());
    }

    // optional uint64 shared_memory_size = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shared_memory_size());
    }

    // optional uint32 combobox_tall = 4 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_combobox_tall());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgComboNeedsPaint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgComboNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgComboNeedsPaint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgComboNeedsPaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgComboNeedsPaint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgComboNeedsPaint)
    MergeFrom(*source);
  }
}

void CMsgComboNeedsPaint::MergeFrom(const CMsgComboNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgComboNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      rgba_ = from.rgba_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      combobox_wide_ = from.combobox_wide_;
    }
    if (cached_has_bits & 0x00000008u) {
      shared_memory_handle_ = from.shared_memory_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      shared_memory_size_ = from.shared_memory_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      combobox_tall_ = from.combobox_tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgComboNeedsPaint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgComboNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgComboNeedsPaint::CopyFrom(const CMsgComboNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgComboNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgComboNeedsPaint::IsInitialized() const {
  return true;
}

void CMsgComboNeedsPaint::InternalSwap(CMsgComboNeedsPaint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgComboNeedsPaint, combobox_tall_)
      + sizeof(CMsgComboNeedsPaint::combobox_tall_)
      - PROTOBUF_FIELD_OFFSET(CMsgComboNeedsPaint, rgba_)>(
          reinterpret_cast<char*>(&rgba_),
          reinterpret_cast<char*>(&other->rgba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgComboNeedsPaint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgNeedsSharedTexturePaint::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNeedsSharedTexturePaint>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_share_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scrollx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scrolly(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pagescale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pageserial(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgNeedsSharedTexturePaint::CMsgNeedsSharedTexturePaint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNeedsSharedTexturePaint)
}
CMsgNeedsSharedTexturePaint::CMsgNeedsSharedTexturePaint(const CMsgNeedsSharedTexturePaint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  // @@protoc_insertion_point(copy_constructor:CMsgNeedsSharedTexturePaint)
}

void CMsgNeedsSharedTexturePaint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
}

CMsgNeedsSharedTexturePaint::~CMsgNeedsSharedTexturePaint() {
  // @@protoc_insertion_point(destructor:CMsgNeedsSharedTexturePaint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNeedsSharedTexturePaint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgNeedsSharedTexturePaint::ArenaDtor(void* object) {
  CMsgNeedsSharedTexturePaint* _this = reinterpret_cast< CMsgNeedsSharedTexturePaint* >(object);
  (void)_this;
}
void CMsgNeedsSharedTexturePaint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNeedsSharedTexturePaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNeedsSharedTexturePaint::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNeedsSharedTexturePaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageserial_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNeedsSharedTexturePaint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 share_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_share_handle(&has_bits);
          share_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scrollx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_scrollx(&has_bits);
          scrollx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scrolly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_scrolly(&has_bits);
          scrolly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pagescale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_pagescale(&has_bits);
          pagescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageserial = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pageserial(&has_bits);
          pageserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNeedsSharedTexturePaint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNeedsSharedTexturePaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 share_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_share_handle(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // optional uint32 scrollx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_scrollx(), target);
  }

  // optional uint32 scrolly = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scrolly(), target);
  }

  // optional float pagescale = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pagescale(), target);
  }

  // optional uint32 pageserial = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pageserial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNeedsSharedTexturePaint)
  return target;
}

size_t CMsgNeedsSharedTexturePaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNeedsSharedTexturePaint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 share_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_share_handle());
    }

    // optional uint32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 scrollx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scrollx());
    }

    // optional uint32 scrolly = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scrolly());
    }

    // optional float pagescale = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 pageserial = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageserial());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNeedsSharedTexturePaint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNeedsSharedTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeedsSharedTexturePaint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNeedsSharedTexturePaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNeedsSharedTexturePaint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNeedsSharedTexturePaint)
    MergeFrom(*source);
  }
}

void CMsgNeedsSharedTexturePaint::MergeFrom(const CMsgNeedsSharedTexturePaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNeedsSharedTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      share_handle_ = from.share_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000020u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000040u) {
      pagescale_ = from.pagescale_;
    }
    if (cached_has_bits & 0x00000080u) {
      pageserial_ = from.pageserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNeedsSharedTexturePaint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNeedsSharedTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsSharedTexturePaint::CopyFrom(const CMsgNeedsSharedTexturePaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNeedsSharedTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsSharedTexturePaint::IsInitialized() const {
  return true;
}

void CMsgNeedsSharedTexturePaint::InternalSwap(CMsgNeedsSharedTexturePaint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNeedsSharedTexturePaint, pageserial_)
      + sizeof(CMsgNeedsSharedTexturePaint::pageserial_)
      - PROTOBUF_FIELD_OFFSET(CMsgNeedsSharedTexturePaint, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNeedsSharedTexturePaint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameOverlayTexturePaint::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameOverlayTexturePaint>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scrollx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scrolly(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pagescale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pageserial(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGameOverlayTexturePaint::CMsgGameOverlayTexturePaint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameOverlayTexturePaint)
}
CMsgGameOverlayTexturePaint::CMsgGameOverlayTexturePaint(const CMsgGameOverlayTexturePaint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameOverlayTexturePaint)
}

void CMsgGameOverlayTexturePaint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
}

CMsgGameOverlayTexturePaint::~CMsgGameOverlayTexturePaint() {
  // @@protoc_insertion_point(destructor:CMsgGameOverlayTexturePaint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameOverlayTexturePaint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameOverlayTexturePaint::ArenaDtor(void* object) {
  CMsgGameOverlayTexturePaint* _this = reinterpret_cast< CMsgGameOverlayTexturePaint* >(object);
  (void)_this;
}
void CMsgGameOverlayTexturePaint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameOverlayTexturePaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameOverlayTexturePaint::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameOverlayTexturePaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageserial_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameOverlayTexturePaint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scrollx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_scrollx(&has_bits);
          scrollx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scrolly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_scrolly(&has_bits);
          scrolly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pagescale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_pagescale(&has_bits);
          pagescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageserial = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pageserial(&has_bits);
          pageserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameOverlayTexturePaint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameOverlayTexturePaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // optional uint32 scrollx = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_scrollx(), target);
  }

  // optional uint32 scrolly = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scrolly(), target);
  }

  // optional float pagescale = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pagescale(), target);
  }

  // optional uint32 pageserial = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pageserial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameOverlayTexturePaint)
  return target;
}

size_t CMsgGameOverlayTexturePaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameOverlayTexturePaint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 width = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 scrollx = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scrollx());
    }

    // optional uint32 scrolly = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scrolly());
    }

    // optional float pagescale = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 pageserial = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageserial());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameOverlayTexturePaint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameOverlayTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameOverlayTexturePaint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameOverlayTexturePaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameOverlayTexturePaint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameOverlayTexturePaint)
    MergeFrom(*source);
  }
}

void CMsgGameOverlayTexturePaint::MergeFrom(const CMsgGameOverlayTexturePaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameOverlayTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000010u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000020u) {
      pagescale_ = from.pagescale_;
    }
    if (cached_has_bits & 0x00000040u) {
      pageserial_ = from.pageserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameOverlayTexturePaint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameOverlayTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameOverlayTexturePaint::CopyFrom(const CMsgGameOverlayTexturePaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameOverlayTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameOverlayTexturePaint::IsInitialized() const {
  return true;
}

void CMsgGameOverlayTexturePaint::InternalSwap(CMsgGameOverlayTexturePaint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameOverlayTexturePaint, pageserial_)
      + sizeof(CMsgGameOverlayTexturePaint::pageserial_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameOverlayTexturePaint, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameOverlayTexturePaint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGetZoom::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGetZoom>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGetZoom::CMsgGetZoom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGetZoom)
}
CMsgGetZoom::CMsgGetZoom(const CMsgGetZoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgGetZoom)
}

void CMsgGetZoom::SharedCtor() {
browser_handle_ = 0u;
}

CMsgGetZoom::~CMsgGetZoom() {
  // @@protoc_insertion_point(destructor:CMsgGetZoom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGetZoom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGetZoom::ArenaDtor(void* object) {
  CMsgGetZoom* _this = reinterpret_cast< CMsgGetZoom* >(object);
  (void)_this;
}
void CMsgGetZoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGetZoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGetZoom::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGetZoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGetZoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGetZoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGetZoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGetZoom)
  return target;
}

size_t CMsgGetZoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGetZoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetZoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGetZoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetZoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGetZoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGetZoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGetZoom)
    MergeFrom(*source);
  }
}

void CMsgGetZoom::MergeFrom(const CMsgGetZoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGetZoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgGetZoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGetZoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoom::CopyFrom(const CMsgGetZoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGetZoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoom::IsInitialized() const {
  return true;
}

void CMsgGetZoom::InternalSwap(CMsgGetZoom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGetZoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGetZoomResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGetZoomResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGetZoomResponse::CMsgGetZoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGetZoomResponse)
}
CMsgGetZoomResponse::CMsgGetZoomResponse(const CMsgGetZoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:CMsgGetZoomResponse)
}

void CMsgGetZoomResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
}

CMsgGetZoomResponse::~CMsgGetZoomResponse() {
  // @@protoc_insertion_point(destructor:CMsgGetZoomResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGetZoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGetZoomResponse::ArenaDtor(void* object) {
  CMsgGetZoomResponse* _this = reinterpret_cast< CMsgGetZoomResponse* >(object);
  (void)_this;
}
void CMsgGetZoomResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGetZoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGetZoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGetZoomResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zoom_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGetZoomResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float zoom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_zoom(&has_bits);
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGetZoomResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGetZoomResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_zoom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGetZoomResponse)
  return target;
}

size_t CMsgGetZoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGetZoomResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional float zoom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetZoomResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGetZoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetZoomResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGetZoomResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGetZoomResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGetZoomResponse)
    MergeFrom(*source);
  }
}

void CMsgGetZoomResponse::MergeFrom(const CMsgGetZoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGetZoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetZoomResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGetZoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoomResponse::CopyFrom(const CMsgGetZoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGetZoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoomResponse::IsInitialized() const {
  return true;
}

void CMsgGetZoomResponse::InternalSwap(CMsgGetZoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGetZoomResponse, zoom_)
      + sizeof(CMsgGetZoomResponse::zoom_)
      - PROTOBUF_FIELD_OFFSET(CMsgGetZoomResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGetZoomResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLinkAtPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLinkAtPosition>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgLinkAtPosition::CMsgLinkAtPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLinkAtPosition)
}
CMsgLinkAtPosition::CMsgLinkAtPosition(const CMsgLinkAtPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgLinkAtPosition)
}

void CMsgLinkAtPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgLinkAtPosition::~CMsgLinkAtPosition() {
  // @@protoc_insertion_point(destructor:CMsgLinkAtPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLinkAtPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLinkAtPosition::ArenaDtor(void* object) {
  CMsgLinkAtPosition* _this = reinterpret_cast< CMsgLinkAtPosition* >(object);
  (void)_this;
}
void CMsgLinkAtPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLinkAtPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLinkAtPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLinkAtPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLinkAtPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLinkAtPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLinkAtPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLinkAtPosition)
  return target;
}

size_t CMsgLinkAtPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLinkAtPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLinkAtPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLinkAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLinkAtPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLinkAtPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLinkAtPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLinkAtPosition)
    MergeFrom(*source);
  }
}

void CMsgLinkAtPosition::MergeFrom(const CMsgLinkAtPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLinkAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLinkAtPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLinkAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPosition::CopyFrom(const CMsgLinkAtPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLinkAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPosition::IsInitialized() const {
  return true;
}

void CMsgLinkAtPosition::InternalSwap(CMsgLinkAtPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLinkAtPosition, y_)
      + sizeof(CMsgLinkAtPosition::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgLinkAtPosition, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLinkAtPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLinkAtPositionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLinkAtPositionResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blivelink(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_binput(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLinkAtPositionResponse)
}
CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse(const CMsgLinkAtPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&binput_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(binput_));
  // @@protoc_insertion_point(copy_constructor:CMsgLinkAtPositionResponse)
}

void CMsgLinkAtPositionResponse::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&binput_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(binput_));
}

CMsgLinkAtPositionResponse::~CMsgLinkAtPositionResponse() {
  // @@protoc_insertion_point(destructor:CMsgLinkAtPositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLinkAtPositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLinkAtPositionResponse::ArenaDtor(void* object) {
  CMsgLinkAtPositionResponse* _this = reinterpret_cast< CMsgLinkAtPositionResponse* >(object);
  (void)_this;
}
void CMsgLinkAtPositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLinkAtPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLinkAtPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLinkAtPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&binput_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(binput_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLinkAtPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLinkAtPositionResponse.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool blivelink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_blivelink(&has_bits);
          blivelink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool binput = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_binput(&has_bits);
          binput_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLinkAtPositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLinkAtPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLinkAtPositionResponse.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // optional bool blivelink = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_blivelink(), target);
  }

  // optional bool binput = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_binput(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLinkAtPositionResponse)
  return target;
}

size_t CMsgLinkAtPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLinkAtPositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

    // optional bool blivelink = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool binput = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLinkAtPositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLinkAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLinkAtPositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLinkAtPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLinkAtPositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLinkAtPositionResponse)
    MergeFrom(*source);
  }
}

void CMsgLinkAtPositionResponse::MergeFrom(const CMsgLinkAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLinkAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      blivelink_ = from.blivelink_;
    }
    if (cached_has_bits & 0x00000020u) {
      binput_ = from.binput_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLinkAtPositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLinkAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPositionResponse::CopyFrom(const CMsgLinkAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLinkAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPositionResponse::IsInitialized() const {
  return true;
}

void CMsgLinkAtPositionResponse::InternalSwap(CMsgLinkAtPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLinkAtPositionResponse, binput_)
      + sizeof(CMsgLinkAtPositionResponse::binput_)
      - PROTOBUF_FIELD_OFFSET(CMsgLinkAtPositionResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLinkAtPositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgZoomToElementAtPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgZoomToElementAtPosition>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgZoomToElementAtPosition)
}
CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition(const CMsgZoomToElementAtPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgZoomToElementAtPosition)
}

void CMsgZoomToElementAtPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgZoomToElementAtPosition::~CMsgZoomToElementAtPosition() {
  // @@protoc_insertion_point(destructor:CMsgZoomToElementAtPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgZoomToElementAtPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgZoomToElementAtPosition::ArenaDtor(void* object) {
  CMsgZoomToElementAtPosition* _this = reinterpret_cast< CMsgZoomToElementAtPosition* >(object);
  (void)_this;
}
void CMsgZoomToElementAtPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgZoomToElementAtPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgZoomToElementAtPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgZoomToElementAtPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgZoomToElementAtPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgZoomToElementAtPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgZoomToElementAtPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgZoomToElementAtPosition)
  return target;
}

size_t CMsgZoomToElementAtPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgZoomToElementAtPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgZoomToElementAtPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgZoomToElementAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToElementAtPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgZoomToElementAtPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgZoomToElementAtPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgZoomToElementAtPosition)
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPosition::MergeFrom(const CMsgZoomToElementAtPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgZoomToElementAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgZoomToElementAtPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgZoomToElementAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPosition::CopyFrom(const CMsgZoomToElementAtPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgZoomToElementAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPosition::IsInitialized() const {
  return true;
}

void CMsgZoomToElementAtPosition::InternalSwap(CMsgZoomToElementAtPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgZoomToElementAtPosition, y_)
      + sizeof(CMsgZoomToElementAtPosition::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgZoomToElementAtPosition, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgZoomToElementAtPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgZoomToElementAtPositionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgZoomToElementAtPositionResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgZoomToElementAtPositionResponse)
}
CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse(const CMsgZoomToElementAtPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgZoomToElementAtPositionResponse)
}

void CMsgZoomToElementAtPositionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(duration_));
}

CMsgZoomToElementAtPositionResponse::~CMsgZoomToElementAtPositionResponse() {
  // @@protoc_insertion_point(destructor:CMsgZoomToElementAtPositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgZoomToElementAtPositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgZoomToElementAtPositionResponse::ArenaDtor(void* object) {
  CMsgZoomToElementAtPositionResponse* _this = reinterpret_cast< CMsgZoomToElementAtPositionResponse* >(object);
  (void)_this;
}
void CMsgZoomToElementAtPositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgZoomToElementAtPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgZoomToElementAtPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgZoomToElementAtPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgZoomToElementAtPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgZoomToElementAtPositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgZoomToElementAtPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgZoomToElementAtPositionResponse)
  return target;
}

size_t CMsgZoomToElementAtPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgZoomToElementAtPositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgZoomToElementAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToElementAtPositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgZoomToElementAtPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgZoomToElementAtPositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgZoomToElementAtPositionResponse)
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const CMsgZoomToElementAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgZoomToElementAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgZoomToElementAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const CMsgZoomToElementAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgZoomToElementAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPositionResponse::IsInitialized() const {
  return true;
}

void CMsgZoomToElementAtPositionResponse::InternalSwap(CMsgZoomToElementAtPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, duration_)
      + sizeof(CMsgZoomToElementAtPositionResponse::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgZoomToElementAtPositionResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgZoomToElementAtPositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgScalePageToValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgScalePageToValue>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgScalePageToValue::CMsgScalePageToValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgScalePageToValue)
}
CMsgScalePageToValue::CMsgScalePageToValue(const CMsgScalePageToValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgScalePageToValue)
}

void CMsgScalePageToValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgScalePageToValue::~CMsgScalePageToValue() {
  // @@protoc_insertion_point(destructor:CMsgScalePageToValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgScalePageToValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgScalePageToValue::ArenaDtor(void* object) {
  CMsgScalePageToValue* _this = reinterpret_cast< CMsgScalePageToValue* >(object);
  (void)_this;
}
void CMsgScalePageToValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgScalePageToValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgScalePageToValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgScalePageToValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgScalePageToValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgScalePageToValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgScalePageToValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgScalePageToValue)
  return target;
}

size_t CMsgScalePageToValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgScalePageToValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScalePageToValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgScalePageToValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScalePageToValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgScalePageToValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgScalePageToValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgScalePageToValue)
    MergeFrom(*source);
  }
}

void CMsgScalePageToValue::MergeFrom(const CMsgScalePageToValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgScalePageToValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScalePageToValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgScalePageToValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValue::CopyFrom(const CMsgScalePageToValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgScalePageToValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValue::IsInitialized() const {
  return true;
}

void CMsgScalePageToValue::InternalSwap(CMsgScalePageToValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgScalePageToValue, y_)
      + sizeof(CMsgScalePageToValue::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgScalePageToValue, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgScalePageToValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgForcePopupsToDirectHWND::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgForcePopupsToDirectHWND>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_direct_hwnd_popups(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgForcePopupsToDirectHWND::CMsgForcePopupsToDirectHWND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgForcePopupsToDirectHWND)
}
CMsgForcePopupsToDirectHWND::CMsgForcePopupsToDirectHWND(const CMsgForcePopupsToDirectHWND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_direct_hwnd_popups_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(force_direct_hwnd_popups_));
  // @@protoc_insertion_point(copy_constructor:CMsgForcePopupsToDirectHWND)
}

void CMsgForcePopupsToDirectHWND::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_direct_hwnd_popups_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(force_direct_hwnd_popups_));
}

CMsgForcePopupsToDirectHWND::~CMsgForcePopupsToDirectHWND() {
  // @@protoc_insertion_point(destructor:CMsgForcePopupsToDirectHWND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgForcePopupsToDirectHWND::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgForcePopupsToDirectHWND::ArenaDtor(void* object) {
  CMsgForcePopupsToDirectHWND* _this = reinterpret_cast< CMsgForcePopupsToDirectHWND* >(object);
  (void)_this;
}
void CMsgForcePopupsToDirectHWND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgForcePopupsToDirectHWND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgForcePopupsToDirectHWND::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgForcePopupsToDirectHWND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_direct_hwnd_popups_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(force_direct_hwnd_popups_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgForcePopupsToDirectHWND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_direct_hwnd_popups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_force_direct_hwnd_popups(&has_bits);
          force_direct_hwnd_popups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgForcePopupsToDirectHWND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgForcePopupsToDirectHWND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool force_direct_hwnd_popups = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_direct_hwnd_popups(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgForcePopupsToDirectHWND)
  return target;
}

size_t CMsgForcePopupsToDirectHWND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgForcePopupsToDirectHWND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool force_direct_hwnd_popups = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgForcePopupsToDirectHWND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgForcePopupsToDirectHWND)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgForcePopupsToDirectHWND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgForcePopupsToDirectHWND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgForcePopupsToDirectHWND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgForcePopupsToDirectHWND)
    MergeFrom(*source);
  }
}

void CMsgForcePopupsToDirectHWND::MergeFrom(const CMsgForcePopupsToDirectHWND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgForcePopupsToDirectHWND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_direct_hwnd_popups_ = from.force_direct_hwnd_popups_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgForcePopupsToDirectHWND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgForcePopupsToDirectHWND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgForcePopupsToDirectHWND::CopyFrom(const CMsgForcePopupsToDirectHWND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgForcePopupsToDirectHWND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgForcePopupsToDirectHWND::IsInitialized() const {
  return true;
}

void CMsgForcePopupsToDirectHWND::InternalSwap(CMsgForcePopupsToDirectHWND* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgForcePopupsToDirectHWND, force_direct_hwnd_popups_)
      + sizeof(CMsgForcePopupsToDirectHWND::force_direct_hwnd_popups_)
      - PROTOBUF_FIELD_OFFSET(CMsgForcePopupsToDirectHWND, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgForcePopupsToDirectHWND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgScalePageToValueResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgScalePageToValueResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgScalePageToValueResponse::CMsgScalePageToValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgScalePageToValueResponse)
}
CMsgScalePageToValueResponse::CMsgScalePageToValueResponse(const CMsgScalePageToValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:CMsgScalePageToValueResponse)
}

void CMsgScalePageToValueResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
}

CMsgScalePageToValueResponse::~CMsgScalePageToValueResponse() {
  // @@protoc_insertion_point(destructor:CMsgScalePageToValueResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgScalePageToValueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgScalePageToValueResponse::ArenaDtor(void* object) {
  CMsgScalePageToValueResponse* _this = reinterpret_cast< CMsgScalePageToValueResponse* >(object);
  (void)_this;
}
void CMsgScalePageToValueResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgScalePageToValueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgScalePageToValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgScalePageToValueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zoom_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgScalePageToValueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float zoom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_zoom(&has_bits);
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgScalePageToValueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgScalePageToValueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_zoom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgScalePageToValueResponse)
  return target;
}

size_t CMsgScalePageToValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgScalePageToValueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional float zoom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScalePageToValueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgScalePageToValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScalePageToValueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgScalePageToValueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgScalePageToValueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgScalePageToValueResponse)
    MergeFrom(*source);
  }
}

void CMsgScalePageToValueResponse::MergeFrom(const CMsgScalePageToValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgScalePageToValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScalePageToValueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgScalePageToValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValueResponse::CopyFrom(const CMsgScalePageToValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgScalePageToValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValueResponse::IsInitialized() const {
  return true;
}

void CMsgScalePageToValueResponse::InternalSwap(CMsgScalePageToValueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgScalePageToValueResponse, zoom_)
      + sizeof(CMsgScalePageToValueResponse::zoom_)
      - PROTOBUF_FIELD_OFFSET(CMsgScalePageToValueResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgScalePageToValueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSavePageToJPEG::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSavePageToJPEG>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSavePageToJPEG::CMsgSavePageToJPEG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSavePageToJPEG)
}
CMsgSavePageToJPEG::CMsgSavePageToJPEG(const CMsgSavePageToJPEG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CMsgSavePageToJPEG)
}

void CMsgSavePageToJPEG::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgSavePageToJPEG::~CMsgSavePageToJPEG() {
  // @@protoc_insertion_point(destructor:CMsgSavePageToJPEG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSavePageToJPEG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSavePageToJPEG::ArenaDtor(void* object) {
  CMsgSavePageToJPEG* _this = reinterpret_cast< CMsgSavePageToJPEG* >(object);
  (void)_this;
}
void CMsgSavePageToJPEG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSavePageToJPEG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSavePageToJPEG::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSavePageToJPEG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSavePageToJPEG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSavePageToJPEG.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSavePageToJPEG.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSavePageToJPEG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSavePageToJPEG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSavePageToJPEG.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSavePageToJPEG.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSavePageToJPEG)
  return target;
}

size_t CMsgSavePageToJPEG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSavePageToJPEG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string filename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSavePageToJPEG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSavePageToJPEG)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSavePageToJPEG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSavePageToJPEG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSavePageToJPEG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSavePageToJPEG)
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEG::MergeFrom(const CMsgSavePageToJPEG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSavePageToJPEG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSavePageToJPEG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSavePageToJPEG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEG::CopyFrom(const CMsgSavePageToJPEG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSavePageToJPEG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEG::IsInitialized() const {
  return true;
}

void CMsgSavePageToJPEG::InternalSwap(CMsgSavePageToJPEG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSavePageToJPEG, height_)
      + sizeof(CMsgSavePageToJPEG::height_)
      - PROTOBUF_FIELD_OFFSET(CMsgSavePageToJPEG, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSavePageToJPEG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSavePageToJPEGResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSavePageToJPEGResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSavePageToJPEGResponse)
}
CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse(const CMsgSavePageToJPEGResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSavePageToJPEGResponse)
}

void CMsgSavePageToJPEGResponse::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgSavePageToJPEGResponse::~CMsgSavePageToJPEGResponse() {
  // @@protoc_insertion_point(destructor:CMsgSavePageToJPEGResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSavePageToJPEGResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSavePageToJPEGResponse::ArenaDtor(void* object) {
  CMsgSavePageToJPEGResponse* _this = reinterpret_cast< CMsgSavePageToJPEGResponse* >(object);
  (void)_this;
}
void CMsgSavePageToJPEGResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSavePageToJPEGResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSavePageToJPEGResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSavePageToJPEGResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSavePageToJPEGResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSavePageToJPEGResponse.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSavePageToJPEGResponse.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSavePageToJPEGResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSavePageToJPEGResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSavePageToJPEGResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSavePageToJPEGResponse.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSavePageToJPEGResponse)
  return target;
}

size_t CMsgSavePageToJPEGResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSavePageToJPEGResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string filename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSavePageToJPEGResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSavePageToJPEGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSavePageToJPEGResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSavePageToJPEGResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSavePageToJPEGResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSavePageToJPEGResponse)
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEGResponse::MergeFrom(const CMsgSavePageToJPEGResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSavePageToJPEGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSavePageToJPEGResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSavePageToJPEGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEGResponse::CopyFrom(const CMsgSavePageToJPEGResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSavePageToJPEGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEGResponse::IsInitialized() const {
  return true;
}

void CMsgSavePageToJPEGResponse::InternalSwap(CMsgSavePageToJPEGResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSavePageToJPEGResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSAlert>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJSAlert::CMsgJSAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSAlert)
}
CMsgJSAlert::CMsgJSAlert(const CMsgJSAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgJSAlert)
}

void CMsgJSAlert::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgJSAlert::~CMsgJSAlert() {
  // @@protoc_insertion_point(destructor:CMsgJSAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSAlert::ArenaDtor(void* object) {
  CMsgJSAlert* _this = reinterpret_cast< CMsgJSAlert* >(object);
  (void)_this;
}
void CMsgJSAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSAlert.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSAlert.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSAlert)
  return target;
}

size_t CMsgJSAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSAlert)
    MergeFrom(*source);
  }
}

void CMsgJSAlert::MergeFrom(const CMsgJSAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSAlert::CopyFrom(const CMsgJSAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSAlert::IsInitialized() const {
  return true;
}

void CMsgJSAlert::InternalSwap(CMsgJSAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSConfirm::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSConfirm>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJSConfirm::CMsgJSConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSConfirm)
}
CMsgJSConfirm::CMsgJSConfirm(const CMsgJSConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgJSConfirm)
}

void CMsgJSConfirm::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgJSConfirm::~CMsgJSConfirm() {
  // @@protoc_insertion_point(destructor:CMsgJSConfirm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSConfirm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSConfirm::ArenaDtor(void* object) {
  CMsgJSConfirm* _this = reinterpret_cast< CMsgJSConfirm* >(object);
  (void)_this;
}
void CMsgJSConfirm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSConfirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSConfirm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSConfirm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSConfirm.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSConfirm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSConfirm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSConfirm.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSConfirm)
  return target;
}

size_t CMsgJSConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSConfirm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSConfirm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSConfirm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSConfirm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSConfirm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSConfirm)
    MergeFrom(*source);
  }
}

void CMsgJSConfirm::MergeFrom(const CMsgJSConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSConfirm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSConfirm::CopyFrom(const CMsgJSConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSConfirm::IsInitialized() const {
  return true;
}

void CMsgJSConfirm::InternalSwap(CMsgJSConfirm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSConfirm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSDialogResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSDialogResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgJSDialogResponse::CMsgJSDialogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSDialogResponse)
}
CMsgJSDialogResponse::CMsgJSDialogResponse(const CMsgJSDialogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSDialogResponse)
}

void CMsgJSDialogResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(result_));
}

CMsgJSDialogResponse::~CMsgJSDialogResponse() {
  // @@protoc_insertion_point(destructor:CMsgJSDialogResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSDialogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJSDialogResponse::ArenaDtor(void* object) {
  CMsgJSDialogResponse* _this = reinterpret_cast< CMsgJSDialogResponse* >(object);
  (void)_this;
}
void CMsgJSDialogResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSDialogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSDialogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSDialogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSDialogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSDialogResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSDialogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSDialogResponse)
  return target;
}

size_t CMsgJSDialogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSDialogResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSDialogResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSDialogResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSDialogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSDialogResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSDialogResponse)
    MergeFrom(*source);
  }
}

void CMsgJSDialogResponse::MergeFrom(const CMsgJSDialogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSDialogResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSDialogResponse::CopyFrom(const CMsgJSDialogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSDialogResponse::IsInitialized() const {
  return true;
}

void CMsgJSDialogResponse::InternalSwap(CMsgJSDialogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSDialogResponse, result_)
      + sizeof(CMsgJSDialogResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSDialogResponse, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSDialogResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCanGoBackAndForward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCanGoBackAndForward>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bgoback(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bgoforward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCanGoBackAndForward::CMsgCanGoBackAndForward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCanGoBackAndForward)
}
CMsgCanGoBackAndForward::CMsgCanGoBackAndForward(const CMsgCanGoBackAndForward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bgoforward_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bgoforward_));
  // @@protoc_insertion_point(copy_constructor:CMsgCanGoBackAndForward)
}

void CMsgCanGoBackAndForward::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bgoforward_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bgoforward_));
}

CMsgCanGoBackAndForward::~CMsgCanGoBackAndForward() {
  // @@protoc_insertion_point(destructor:CMsgCanGoBackAndForward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCanGoBackAndForward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCanGoBackAndForward::ArenaDtor(void* object) {
  CMsgCanGoBackAndForward* _this = reinterpret_cast< CMsgCanGoBackAndForward* >(object);
  (void)_this;
}
void CMsgCanGoBackAndForward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCanGoBackAndForward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCanGoBackAndForward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCanGoBackAndForward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bgoforward_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bgoforward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCanGoBackAndForward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bgoback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bgoback(&has_bits);
          bgoback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bgoforward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bgoforward(&has_bits);
          bgoforward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCanGoBackAndForward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCanGoBackAndForward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool bgoback = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bgoback(), target);
  }

  // optional bool bgoforward = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bgoforward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCanGoBackAndForward)
  return target;
}

size_t CMsgCanGoBackAndForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCanGoBackAndForward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bgoback = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool bgoforward = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCanGoBackAndForward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCanGoBackAndForward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCanGoBackAndForward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCanGoBackAndForward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCanGoBackAndForward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCanGoBackAndForward)
    MergeFrom(*source);
  }
}

void CMsgCanGoBackAndForward::MergeFrom(const CMsgCanGoBackAndForward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCanGoBackAndForward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      bgoback_ = from.bgoback_;
    }
    if (cached_has_bits & 0x00000004u) {
      bgoforward_ = from.bgoforward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCanGoBackAndForward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCanGoBackAndForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCanGoBackAndForward::CopyFrom(const CMsgCanGoBackAndForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCanGoBackAndForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCanGoBackAndForward::IsInitialized() const {
  return true;
}

void CMsgCanGoBackAndForward::InternalSwap(CMsgCanGoBackAndForward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCanGoBackAndForward, bgoforward_)
      + sizeof(CMsgCanGoBackAndForward::bgoforward_)
      - PROTOBUF_FIELD_OFFSET(CMsgCanGoBackAndForward, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCanGoBackAndForward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgOpenSteamURL::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgOpenSteamURL>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_referrer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgOpenSteamURL::CMsgOpenSteamURL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgOpenSteamURL)
}
CMsgOpenSteamURL::CMsgOpenSteamURL(const CMsgOpenSteamURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  referrer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_referrer()) {
    referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgOpenSteamURL)
}

void CMsgOpenSteamURL::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
referrer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgOpenSteamURL::~CMsgOpenSteamURL() {
  // @@protoc_insertion_point(destructor:CMsgOpenSteamURL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgOpenSteamURL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referrer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgOpenSteamURL::ArenaDtor(void* object) {
  CMsgOpenSteamURL* _this = reinterpret_cast< CMsgOpenSteamURL* >(object);
  (void)_this;
}
void CMsgOpenSteamURL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgOpenSteamURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgOpenSteamURL::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgOpenSteamURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      referrer_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgOpenSteamURL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgOpenSteamURL.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string referrer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_referrer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgOpenSteamURL.referrer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgOpenSteamURL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpenSteamURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgOpenSteamURL.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string referrer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_referrer().data(), static_cast<int>(this->_internal_referrer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgOpenSteamURL.referrer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referrer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpenSteamURL)
  return target;
}

size_t CMsgOpenSteamURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgOpenSteamURL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string referrer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgOpenSteamURL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgOpenSteamURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenSteamURL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgOpenSteamURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgOpenSteamURL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgOpenSteamURL)
    MergeFrom(*source);
  }
}

void CMsgOpenSteamURL::MergeFrom(const CMsgOpenSteamURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgOpenSteamURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_referrer(from._internal_referrer());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgOpenSteamURL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgOpenSteamURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenSteamURL::CopyFrom(const CMsgOpenSteamURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgOpenSteamURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenSteamURL::IsInitialized() const {
  return true;
}

void CMsgOpenSteamURL::InternalSwap(CMsgOpenSteamURL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  referrer_.Swap(&other->referrer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgOpenSteamURL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetCookie::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetCookie>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_httponly(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSetCookie::CMsgSetCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetCookie)
}
CMsgSetCookie::CMsgSetCookie(const CMsgSetCookie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_host()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArena());
  }
  ::memcpy(&expires_, &from.expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&httponly_) -
    reinterpret_cast<char*>(&expires_)) + sizeof(httponly_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetCookie)
}

void CMsgSetCookie::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expires_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&httponly_) -
    reinterpret_cast<char*>(&expires_)) + sizeof(httponly_));
}

CMsgSetCookie::~CMsgSetCookie() {
  // @@protoc_insertion_point(destructor:CMsgSetCookie)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetCookie::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetCookie::ArenaDtor(void* object) {
  CMsgSetCookie* _this = reinterpret_cast< CMsgSetCookie* >(object);
  (void)_this;
}
void CMsgSetCookie::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetCookie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetCookie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      host_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&httponly_) -
        reinterpret_cast<char*>(&expires_)) + sizeof(httponly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetCookie::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetCookie.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetCookie.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetCookie.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string host = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetCookie.host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expires = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_expires(&has_bits);
          expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool secure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_secure(&has_bits);
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool httponly = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_httponly(&has_bits);
          httponly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetCookie::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetCookie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetCookie.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetCookie.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetCookie.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetCookie.host");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host(), target);
  }

  // optional uint32 expires = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expires(), target);
  }

  // optional bool secure = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_secure(), target);
  }

  // optional bool httponly = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_httponly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetCookie)
  return target;
}

size_t CMsgSetCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetCookie)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string host = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional uint32 expires = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expires());
    }

    // optional bool secure = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool httponly = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetCookie::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetCookie* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetCookie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetCookie)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetCookie)
    MergeFrom(*source);
  }
}

void CMsgSetCookie::MergeFrom(const CMsgSetCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000010u) {
      expires_ = from.expires_;
    }
    if (cached_has_bits & 0x00000020u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00000040u) {
      httponly_ = from.httponly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetCookie::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCookie::CopyFrom(const CMsgSetCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCookie::IsInitialized() const {
  return true;
}

void CMsgSetCookie::InternalSwap(CMsgSetCookie* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetCookie, httponly_)
      + sizeof(CMsgSetCookie::httponly_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetCookie, expires_)>(
          reinterpret_cast<char*>(&expires_),
          reinterpret_cast<char*>(&other->expires_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetCookie::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetTargetFrameRate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetTargetFrameRate>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ntargetframerate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetTargetFrameRate::CMsgSetTargetFrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetTargetFrameRate)
}
CMsgSetTargetFrameRate::CMsgSetTargetFrameRate(const CMsgSetTargetFrameRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ntargetframerate_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ntargetframerate_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetTargetFrameRate)
}

void CMsgSetTargetFrameRate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ntargetframerate_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ntargetframerate_));
}

CMsgSetTargetFrameRate::~CMsgSetTargetFrameRate() {
  // @@protoc_insertion_point(destructor:CMsgSetTargetFrameRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetTargetFrameRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetTargetFrameRate::ArenaDtor(void* object) {
  CMsgSetTargetFrameRate* _this = reinterpret_cast< CMsgSetTargetFrameRate* >(object);
  (void)_this;
}
void CMsgSetTargetFrameRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetTargetFrameRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetTargetFrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetTargetFrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ntargetframerate_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(ntargetframerate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetTargetFrameRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nTargetFrameRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ntargetframerate(&has_bits);
          ntargetframerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetTargetFrameRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetTargetFrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 nTargetFrameRate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ntargetframerate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetTargetFrameRate)
  return target;
}

size_t CMsgSetTargetFrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetTargetFrameRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 nTargetFrameRate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ntargetframerate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetTargetFrameRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetTargetFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetTargetFrameRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetTargetFrameRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetTargetFrameRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetTargetFrameRate)
    MergeFrom(*source);
  }
}

void CMsgSetTargetFrameRate::MergeFrom(const CMsgSetTargetFrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetTargetFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ntargetframerate_ = from.ntargetframerate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetTargetFrameRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetTargetFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetTargetFrameRate::CopyFrom(const CMsgSetTargetFrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetTargetFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetTargetFrameRate::IsInitialized() const {
  return true;
}

void CMsgSetTargetFrameRate::InternalSwap(CMsgSetTargetFrameRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetTargetFrameRate, ntargetframerate_)
      + sizeof(CMsgSetTargetFrameRate::ntargetframerate_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetTargetFrameRate, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetTargetFrameRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPauseRepaint::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPauseRepaint>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPauseRepaint::CMsgPauseRepaint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPauseRepaint)
}
CMsgPauseRepaint::CMsgPauseRepaint(const CMsgPauseRepaint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgPauseRepaint)
}

void CMsgPauseRepaint::SharedCtor() {
browser_handle_ = 0u;
}

CMsgPauseRepaint::~CMsgPauseRepaint() {
  // @@protoc_insertion_point(destructor:CMsgPauseRepaint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPauseRepaint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPauseRepaint::ArenaDtor(void* object) {
  CMsgPauseRepaint* _this = reinterpret_cast< CMsgPauseRepaint* >(object);
  (void)_this;
}
void CMsgPauseRepaint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPauseRepaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPauseRepaint::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPauseRepaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPauseRepaint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPauseRepaint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPauseRepaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPauseRepaint)
  return target;
}

size_t CMsgPauseRepaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPauseRepaint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPauseRepaint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPauseRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPauseRepaint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPauseRepaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPauseRepaint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPauseRepaint)
    MergeFrom(*source);
  }
}

void CMsgPauseRepaint::MergeFrom(const CMsgPauseRepaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPauseRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgPauseRepaint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPauseRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPauseRepaint::CopyFrom(const CMsgPauseRepaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPauseRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPauseRepaint::IsInitialized() const {
  return true;
}

void CMsgPauseRepaint::InternalSwap(CMsgPauseRepaint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPauseRepaint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFullRepaint::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFullRepaint>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFullRepaint::CMsgFullRepaint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFullRepaint)
}
CMsgFullRepaint::CMsgFullRepaint(const CMsgFullRepaint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgFullRepaint)
}

void CMsgFullRepaint::SharedCtor() {
browser_handle_ = 0u;
}

CMsgFullRepaint::~CMsgFullRepaint() {
  // @@protoc_insertion_point(destructor:CMsgFullRepaint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFullRepaint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFullRepaint::ArenaDtor(void* object) {
  CMsgFullRepaint* _this = reinterpret_cast< CMsgFullRepaint* >(object);
  (void)_this;
}
void CMsgFullRepaint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFullRepaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFullRepaint::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFullRepaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFullRepaint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFullRepaint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFullRepaint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFullRepaint)
  return target;
}

size_t CMsgFullRepaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFullRepaint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFullRepaint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFullRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFullRepaint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFullRepaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFullRepaint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFullRepaint)
    MergeFrom(*source);
  }
}

void CMsgFullRepaint::MergeFrom(const CMsgFullRepaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFullRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgFullRepaint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFullRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFullRepaint::CopyFrom(const CMsgFullRepaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFullRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFullRepaint::IsInitialized() const {
  return true;
}

void CMsgFullRepaint::InternalSwap(CMsgFullRepaint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFullRepaint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestFullScreen::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestFullScreen>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestFullScreen::CMsgRequestFullScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestFullScreen)
}
CMsgRequestFullScreen::CMsgRequestFullScreen(const CMsgRequestFullScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestFullScreen)
}

void CMsgRequestFullScreen::SharedCtor() {
browser_handle_ = 0u;
}

CMsgRequestFullScreen::~CMsgRequestFullScreen() {
  // @@protoc_insertion_point(destructor:CMsgRequestFullScreen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestFullScreen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestFullScreen::ArenaDtor(void* object) {
  CMsgRequestFullScreen* _this = reinterpret_cast< CMsgRequestFullScreen* >(object);
  (void)_this;
}
void CMsgRequestFullScreen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestFullScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestFullScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestFullScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestFullScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestFullScreen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestFullScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestFullScreen)
  return target;
}

size_t CMsgRequestFullScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestFullScreen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestFullScreen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestFullScreen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestFullScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestFullScreen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestFullScreen)
    MergeFrom(*source);
  }
}

void CMsgRequestFullScreen::MergeFrom(const CMsgRequestFullScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgRequestFullScreen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestFullScreen::CopyFrom(const CMsgRequestFullScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestFullScreen::IsInitialized() const {
  return true;
}

void CMsgRequestFullScreen::InternalSwap(CMsgRequestFullScreen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestFullScreen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgExitFullScreen::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExitFullScreen>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgExitFullScreen::CMsgExitFullScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgExitFullScreen)
}
CMsgExitFullScreen::CMsgExitFullScreen(const CMsgExitFullScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgExitFullScreen)
}

void CMsgExitFullScreen::SharedCtor() {
browser_handle_ = 0u;
}

CMsgExitFullScreen::~CMsgExitFullScreen() {
  // @@protoc_insertion_point(destructor:CMsgExitFullScreen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgExitFullScreen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgExitFullScreen::ArenaDtor(void* object) {
  CMsgExitFullScreen* _this = reinterpret_cast< CMsgExitFullScreen* >(object);
  (void)_this;
}
void CMsgExitFullScreen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgExitFullScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExitFullScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExitFullScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExitFullScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExitFullScreen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExitFullScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExitFullScreen)
  return target;
}

size_t CMsgExitFullScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExitFullScreen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExitFullScreen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExitFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExitFullScreen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExitFullScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExitFullScreen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExitFullScreen)
    MergeFrom(*source);
  }
}

void CMsgExitFullScreen::MergeFrom(const CMsgExitFullScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExitFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgExitFullScreen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExitFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitFullScreen::CopyFrom(const CMsgExitFullScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExitFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitFullScreen::IsInitialized() const {
  return true;
}

void CMsgExitFullScreen::InternalSwap(CMsgExitFullScreen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExitFullScreen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgToggleFindInPageDialog::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgToggleFindInPageDialog>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgToggleFindInPageDialog::CMsgToggleFindInPageDialog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgToggleFindInPageDialog)
}
CMsgToggleFindInPageDialog::CMsgToggleFindInPageDialog(const CMsgToggleFindInPageDialog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgToggleFindInPageDialog)
}

void CMsgToggleFindInPageDialog::SharedCtor() {
browser_handle_ = 0u;
}

CMsgToggleFindInPageDialog::~CMsgToggleFindInPageDialog() {
  // @@protoc_insertion_point(destructor:CMsgToggleFindInPageDialog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgToggleFindInPageDialog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgToggleFindInPageDialog::ArenaDtor(void* object) {
  CMsgToggleFindInPageDialog* _this = reinterpret_cast< CMsgToggleFindInPageDialog* >(object);
  (void)_this;
}
void CMsgToggleFindInPageDialog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgToggleFindInPageDialog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgToggleFindInPageDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgToggleFindInPageDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgToggleFindInPageDialog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgToggleFindInPageDialog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgToggleFindInPageDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgToggleFindInPageDialog)
  return target;
}

size_t CMsgToggleFindInPageDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgToggleFindInPageDialog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgToggleFindInPageDialog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgToggleFindInPageDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgToggleFindInPageDialog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgToggleFindInPageDialog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgToggleFindInPageDialog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgToggleFindInPageDialog)
    MergeFrom(*source);
  }
}

void CMsgToggleFindInPageDialog::MergeFrom(const CMsgToggleFindInPageDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgToggleFindInPageDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgToggleFindInPageDialog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgToggleFindInPageDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgToggleFindInPageDialog::CopyFrom(const CMsgToggleFindInPageDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgToggleFindInPageDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgToggleFindInPageDialog::IsInitialized() const {
  return true;
}

void CMsgToggleFindInPageDialog::InternalSwap(CMsgToggleFindInPageDialog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgToggleFindInPageDialog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetPIDShuttingDown::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetPIDShuttingDown>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetPIDShuttingDown::CMsgSetPIDShuttingDown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetPIDShuttingDown)
}
CMsgSetPIDShuttingDown::CMsgSetPIDShuttingDown(const CMsgSetPIDShuttingDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetPIDShuttingDown)
}

void CMsgSetPIDShuttingDown::SharedCtor() {
browser_handle_ = 0u;
}

CMsgSetPIDShuttingDown::~CMsgSetPIDShuttingDown() {
  // @@protoc_insertion_point(destructor:CMsgSetPIDShuttingDown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetPIDShuttingDown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetPIDShuttingDown::ArenaDtor(void* object) {
  CMsgSetPIDShuttingDown* _this = reinterpret_cast< CMsgSetPIDShuttingDown* >(object);
  (void)_this;
}
void CMsgSetPIDShuttingDown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetPIDShuttingDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetPIDShuttingDown::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetPIDShuttingDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetPIDShuttingDown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetPIDShuttingDown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetPIDShuttingDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetPIDShuttingDown)
  return target;
}

size_t CMsgSetPIDShuttingDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetPIDShuttingDown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetPIDShuttingDown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetPIDShuttingDown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetPIDShuttingDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetPIDShuttingDown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetPIDShuttingDown)
    MergeFrom(*source);
  }
}

void CMsgSetPIDShuttingDown::MergeFrom(const CMsgSetPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgSetPIDShuttingDown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetPIDShuttingDown::CopyFrom(const CMsgSetPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetPIDShuttingDown::IsInitialized() const {
  return true;
}

void CMsgSetPIDShuttingDown::InternalSwap(CMsgSetPIDShuttingDown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetPIDShuttingDown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDisableBackgroundThrottling::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDisableBackgroundThrottling>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDisableBackgroundThrottling::CMsgDisableBackgroundThrottling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDisableBackgroundThrottling)
}
CMsgDisableBackgroundThrottling::CMsgDisableBackgroundThrottling(const CMsgDisableBackgroundThrottling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgDisableBackgroundThrottling)
}

void CMsgDisableBackgroundThrottling::SharedCtor() {
browser_handle_ = 0u;
}

CMsgDisableBackgroundThrottling::~CMsgDisableBackgroundThrottling() {
  // @@protoc_insertion_point(destructor:CMsgDisableBackgroundThrottling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDisableBackgroundThrottling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDisableBackgroundThrottling::ArenaDtor(void* object) {
  CMsgDisableBackgroundThrottling* _this = reinterpret_cast< CMsgDisableBackgroundThrottling* >(object);
  (void)_this;
}
void CMsgDisableBackgroundThrottling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDisableBackgroundThrottling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDisableBackgroundThrottling::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDisableBackgroundThrottling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDisableBackgroundThrottling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDisableBackgroundThrottling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDisableBackgroundThrottling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDisableBackgroundThrottling)
  return target;
}

size_t CMsgDisableBackgroundThrottling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDisableBackgroundThrottling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDisableBackgroundThrottling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDisableBackgroundThrottling)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDisableBackgroundThrottling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDisableBackgroundThrottling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDisableBackgroundThrottling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDisableBackgroundThrottling)
    MergeFrom(*source);
  }
}

void CMsgDisableBackgroundThrottling::MergeFrom(const CMsgDisableBackgroundThrottling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDisableBackgroundThrottling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgDisableBackgroundThrottling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDisableBackgroundThrottling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDisableBackgroundThrottling::CopyFrom(const CMsgDisableBackgroundThrottling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDisableBackgroundThrottling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDisableBackgroundThrottling::IsInitialized() const {
  return true;
}

void CMsgDisableBackgroundThrottling::InternalSwap(CMsgDisableBackgroundThrottling* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDisableBackgroundThrottling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAckPIDShuttingDown::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAckPIDShuttingDown>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAckPIDShuttingDown::CMsgAckPIDShuttingDown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAckPIDShuttingDown)
}
CMsgAckPIDShuttingDown::CMsgAckPIDShuttingDown(const CMsgAckPIDShuttingDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgAckPIDShuttingDown)
}

void CMsgAckPIDShuttingDown::SharedCtor() {
browser_handle_ = 0u;
}

CMsgAckPIDShuttingDown::~CMsgAckPIDShuttingDown() {
  // @@protoc_insertion_point(destructor:CMsgAckPIDShuttingDown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAckPIDShuttingDown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAckPIDShuttingDown::ArenaDtor(void* object) {
  CMsgAckPIDShuttingDown* _this = reinterpret_cast< CMsgAckPIDShuttingDown* >(object);
  (void)_this;
}
void CMsgAckPIDShuttingDown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAckPIDShuttingDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAckPIDShuttingDown::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAckPIDShuttingDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAckPIDShuttingDown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAckPIDShuttingDown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAckPIDShuttingDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAckPIDShuttingDown)
  return target;
}

size_t CMsgAckPIDShuttingDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAckPIDShuttingDown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAckPIDShuttingDown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAckPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAckPIDShuttingDown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAckPIDShuttingDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAckPIDShuttingDown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAckPIDShuttingDown)
    MergeFrom(*source);
  }
}

void CMsgAckPIDShuttingDown::MergeFrom(const CMsgAckPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAckPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgAckPIDShuttingDown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAckPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAckPIDShuttingDown::CopyFrom(const CMsgAckPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAckPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAckPIDShuttingDown::IsInitialized() const {
  return true;
}

void CMsgAckPIDShuttingDown::InternalSwap(CMsgAckPIDShuttingDown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAckPIDShuttingDown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGetCookiesForURL::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGetCookiesForURL>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGetCookiesForURL::CMsgGetCookiesForURL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGetCookiesForURL)
}
CMsgGetCookiesForURL::CMsgGetCookiesForURL(const CMsgGetCookiesForURL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgGetCookiesForURL)
}

void CMsgGetCookiesForURL::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgGetCookiesForURL::~CMsgGetCookiesForURL() {
  // @@protoc_insertion_point(destructor:CMsgGetCookiesForURL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGetCookiesForURL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGetCookiesForURL::ArenaDtor(void* object) {
  CMsgGetCookiesForURL* _this = reinterpret_cast< CMsgGetCookiesForURL* >(object);
  (void)_this;
}
void CMsgGetCookiesForURL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGetCookiesForURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGetCookiesForURL::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGetCookiesForURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGetCookiesForURL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGetCookiesForURL.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGetCookiesForURL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGetCookiesForURL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGetCookiesForURL.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGetCookiesForURL)
  return target;
}

size_t CMsgGetCookiesForURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGetCookiesForURL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetCookiesForURL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGetCookiesForURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetCookiesForURL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGetCookiesForURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGetCookiesForURL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGetCookiesForURL)
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURL::MergeFrom(const CMsgGetCookiesForURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGetCookiesForURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetCookiesForURL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGetCookiesForURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURL::CopyFrom(const CMsgGetCookiesForURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGetCookiesForURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURL::IsInitialized() const {
  return true;
}

void CMsgGetCookiesForURL::InternalSwap(CMsgGetCookiesForURL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGetCookiesForURL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCookie::_Internal {
 public:
  using HasBits = decltype(std::declval<CCookie>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCookie::CCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCookie)
}
CCookie::CCookie(const CCookie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_domain()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCookie)
}

void CCookie::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCookie::~CCookie() {
  // @@protoc_insertion_point(destructor:CCookie)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCookie::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCookie::ArenaDtor(void* object) {
  CCookie* _this = reinterpret_cast< CCookie* >(object);
  (void)_this;
}
void CCookie::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCookie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:CCookie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      path_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCookie::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCookie.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCookie.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCookie.domain");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCookie.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCookie::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCookie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCookie.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCookie.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string domain = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCookie.domain");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_domain(), target);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCookie.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCookie)
  return target;
}

size_t CCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCookie)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string domain = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string path = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCookie::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const CCookie* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCookie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCookie)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCookie)
    MergeFrom(*source);
  }
}

void CCookie::MergeFrom(const CCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_path(from._internal_path());
    }
  }
}

void CCookie::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCookie::CopyFrom(const CCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCookie::IsInitialized() const {
  return true;
}

void CCookie::InternalSwap(CCookie* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCookie::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGetCookiesForURLResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGetCookiesForURLResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cookies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGetCookiesForURLResponse)
}
CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse(const CMsgGetCookiesForURLResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cookies_(from.cookies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgGetCookiesForURLResponse)
}

void CMsgGetCookiesForURLResponse::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgGetCookiesForURLResponse::~CMsgGetCookiesForURLResponse() {
  // @@protoc_insertion_point(destructor:CMsgGetCookiesForURLResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGetCookiesForURLResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGetCookiesForURLResponse::ArenaDtor(void* object) {
  CMsgGetCookiesForURLResponse* _this = reinterpret_cast< CMsgGetCookiesForURLResponse* >(object);
  (void)_this;
}
void CMsgGetCookiesForURLResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGetCookiesForURLResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGetCookiesForURLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGetCookiesForURLResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGetCookiesForURLResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGetCookiesForURLResponse.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCookie cookies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cookies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGetCookiesForURLResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGetCookiesForURLResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGetCookiesForURLResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated .CCookie cookies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cookies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cookies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGetCookiesForURLResponse)
  return target;
}

size_t CMsgGetCookiesForURLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGetCookiesForURLResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCookie cookies = 3;
  total_size += 1UL * this->_internal_cookies_size();
  for (const auto& msg : this->cookies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetCookiesForURLResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGetCookiesForURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetCookiesForURLResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGetCookiesForURLResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGetCookiesForURLResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGetCookiesForURLResponse)
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURLResponse::MergeFrom(const CMsgGetCookiesForURLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGetCookiesForURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cookies_.MergeFrom(from.cookies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetCookiesForURLResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGetCookiesForURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURLResponse::CopyFrom(const CMsgGetCookiesForURLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGetCookiesForURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURLResponse::IsInitialized() const {
  return true;
}

void CMsgGetCookiesForURLResponse::InternalSwap(CMsgGetCookiesForURLResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cookies_.InternalSwap(&other->cookies_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGetCookiesForURLResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgNodeHasFocus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNodeHasFocus>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_binput(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elementtagname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_searchbuttontext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bhasmultipleinputs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bismainframe(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgNodeHasFocus::CMsgNodeHasFocus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNodeHasFocus)
}
CMsgNodeHasFocus::CMsgNodeHasFocus(const CMsgNodeHasFocus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  elementtagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_elementtagname()) {
    elementtagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_elementtagname(), 
      GetArena());
  }
  searchbuttontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_searchbuttontext()) {
    searchbuttontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_searchbuttontext(), 
      GetArena());
  }
  input_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input_type()) {
    input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_type(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bismainframe_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bismainframe_));
  // @@protoc_insertion_point(copy_constructor:CMsgNodeHasFocus)
}

void CMsgNodeHasFocus::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
elementtagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
searchbuttontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
input_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bismainframe_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bismainframe_));
}

CMsgNodeHasFocus::~CMsgNodeHasFocus() {
  // @@protoc_insertion_point(destructor:CMsgNodeHasFocus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNodeHasFocus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  elementtagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  searchbuttontext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgNodeHasFocus::ArenaDtor(void* object) {
  CMsgNodeHasFocus* _this = reinterpret_cast< CMsgNodeHasFocus* >(object);
  (void)_this;
}
void CMsgNodeHasFocus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNodeHasFocus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNodeHasFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNodeHasFocus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      elementtagname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      searchbuttontext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      input_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bismainframe_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bismainframe_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNodeHasFocus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bInput = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_binput(&has_bits);
          binput_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgNodeHasFocus.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string elementtagname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_elementtagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgNodeHasFocus.elementtagname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string searchbuttontext = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_searchbuttontext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgNodeHasFocus.searchbuttontext");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bHasMultipleInputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bhasmultipleinputs(&has_bits);
          bhasmultipleinputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_input_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgNodeHasFocus.input_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bIsMainFrame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_bismainframe(&has_bits);
          bismainframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNodeHasFocus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNodeHasFocus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool bInput = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_binput(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNodeHasFocus.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string elementtagname = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_elementtagname().data(), static_cast<int>(this->_internal_elementtagname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNodeHasFocus.elementtagname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_elementtagname(), target);
  }

  // optional string searchbuttontext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_searchbuttontext().data(), static_cast<int>(this->_internal_searchbuttontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNodeHasFocus.searchbuttontext");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_searchbuttontext(), target);
  }

  // optional bool bHasMultipleInputs = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bhasmultipleinputs(), target);
  }

  // optional string input_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_type().data(), static_cast<int>(this->_internal_input_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNodeHasFocus.input_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_input_type(), target);
  }

  // optional bool bIsMainFrame = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_bismainframe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNodeHasFocus)
  return target;
}

size_t CMsgNodeHasFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNodeHasFocus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string elementtagname = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_elementtagname());
    }

    // optional string searchbuttontext = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_searchbuttontext());
    }

    // optional string input_type = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_type());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool bInput = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool bHasMultipleInputs = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool bIsMainFrame = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNodeHasFocus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNodeHasFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNodeHasFocus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNodeHasFocus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNodeHasFocus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNodeHasFocus)
    MergeFrom(*source);
  }
}

void CMsgNodeHasFocus::MergeFrom(const CMsgNodeHasFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNodeHasFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_elementtagname(from._internal_elementtagname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_searchbuttontext(from._internal_searchbuttontext());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_input_type(from._internal_input_type());
    }
    if (cached_has_bits & 0x00000010u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      binput_ = from.binput_;
    }
    if (cached_has_bits & 0x00000040u) {
      bhasmultipleinputs_ = from.bhasmultipleinputs_;
    }
    if (cached_has_bits & 0x00000080u) {
      bismainframe_ = from.bismainframe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNodeHasFocus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNodeHasFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNodeHasFocus::CopyFrom(const CMsgNodeHasFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNodeHasFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNodeHasFocus::IsInitialized() const {
  return true;
}

void CMsgNodeHasFocus::InternalSwap(CMsgNodeHasFocus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  elementtagname_.Swap(&other->elementtagname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  searchbuttontext_.Swap(&other->searchbuttontext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_type_.Swap(&other->input_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNodeHasFocus, bismainframe_)
      + sizeof(CMsgNodeHasFocus::bismainframe_)
      - PROTOBUF_FIELD_OFFSET(CMsgNodeHasFocus, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNodeHasFocus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgZoomToFocusedElement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgZoomToFocusedElement>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgZoomToFocusedElement::CMsgZoomToFocusedElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgZoomToFocusedElement)
}
CMsgZoomToFocusedElement::CMsgZoomToFocusedElement(const CMsgZoomToFocusedElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgZoomToFocusedElement)
}

void CMsgZoomToFocusedElement::SharedCtor() {
browser_handle_ = 0u;
}

CMsgZoomToFocusedElement::~CMsgZoomToFocusedElement() {
  // @@protoc_insertion_point(destructor:CMsgZoomToFocusedElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgZoomToFocusedElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgZoomToFocusedElement::ArenaDtor(void* object) {
  CMsgZoomToFocusedElement* _this = reinterpret_cast< CMsgZoomToFocusedElement* >(object);
  (void)_this;
}
void CMsgZoomToFocusedElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgZoomToFocusedElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgZoomToFocusedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgZoomToFocusedElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgZoomToFocusedElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgZoomToFocusedElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgZoomToFocusedElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgZoomToFocusedElement)
  return target;
}

size_t CMsgZoomToFocusedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgZoomToFocusedElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgZoomToFocusedElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgZoomToFocusedElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToFocusedElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgZoomToFocusedElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgZoomToFocusedElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgZoomToFocusedElement)
    MergeFrom(*source);
  }
}

void CMsgZoomToFocusedElement::MergeFrom(const CMsgZoomToFocusedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgZoomToFocusedElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgZoomToFocusedElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgZoomToFocusedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToFocusedElement::CopyFrom(const CMsgZoomToFocusedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgZoomToFocusedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToFocusedElement::IsInitialized() const {
  return true;
}

void CMsgZoomToFocusedElement::InternalSwap(CMsgZoomToFocusedElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgZoomToFocusedElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFocusedNodeText::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFocusedNodeText>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFocusedNodeText::CMsgFocusedNodeText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFocusedNodeText)
}
CMsgFocusedNodeText::CMsgFocusedNodeText(const CMsgFocusedNodeText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgFocusedNodeText)
}

void CMsgFocusedNodeText::SharedCtor() {
browser_handle_ = 0u;
}

CMsgFocusedNodeText::~CMsgFocusedNodeText() {
  // @@protoc_insertion_point(destructor:CMsgFocusedNodeText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFocusedNodeText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFocusedNodeText::ArenaDtor(void* object) {
  CMsgFocusedNodeText* _this = reinterpret_cast< CMsgFocusedNodeText* >(object);
  (void)_this;
}
void CMsgFocusedNodeText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFocusedNodeText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFocusedNodeText::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFocusedNodeText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFocusedNodeText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFocusedNodeText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFocusedNodeText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFocusedNodeText)
  return target;
}

size_t CMsgFocusedNodeText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFocusedNodeText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFocusedNodeText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFocusedNodeText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFocusedNodeText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFocusedNodeText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFocusedNodeText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFocusedNodeText)
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeText::MergeFrom(const CMsgFocusedNodeText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFocusedNodeText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgFocusedNodeText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFocusedNodeText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeText::CopyFrom(const CMsgFocusedNodeText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFocusedNodeText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeText::IsInitialized() const {
  return true;
}

void CMsgFocusedNodeText::InternalSwap(CMsgFocusedNodeText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFocusedNodeText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFocusedNodeTextResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFocusedNodeTextResponse>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFocusedNodeTextResponse)
}
CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse(const CMsgFocusedNodeTextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgFocusedNodeTextResponse)
}

void CMsgFocusedNodeTextResponse::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgFocusedNodeTextResponse::~CMsgFocusedNodeTextResponse() {
  // @@protoc_insertion_point(destructor:CMsgFocusedNodeTextResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFocusedNodeTextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgFocusedNodeTextResponse::ArenaDtor(void* object) {
  CMsgFocusedNodeTextResponse* _this = reinterpret_cast< CMsgFocusedNodeTextResponse* >(object);
  (void)_this;
}
void CMsgFocusedNodeTextResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFocusedNodeTextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFocusedNodeTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFocusedNodeTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFocusedNodeTextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgFocusedNodeTextResponse.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFocusedNodeTextResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFocusedNodeTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgFocusedNodeTextResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFocusedNodeTextResponse)
  return target;
}

size_t CMsgFocusedNodeTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFocusedNodeTextResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFocusedNodeTextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFocusedNodeTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFocusedNodeTextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFocusedNodeTextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFocusedNodeTextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFocusedNodeTextResponse)
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeTextResponse::MergeFrom(const CMsgFocusedNodeTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFocusedNodeTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFocusedNodeTextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFocusedNodeTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeTextResponse::CopyFrom(const CMsgFocusedNodeTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFocusedNodeTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeTextResponse::IsInitialized() const {
  return true;
}

void CMsgFocusedNodeTextResponse::InternalSwap(CMsgFocusedNodeTextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFocusedNodeTextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBuildID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBuildID>()._has_bits_);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBuildID::CMsgBuildID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBuildID)
}
CMsgBuildID::CMsgBuildID(const CMsgBuildID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  build_id_ = from.build_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgBuildID)
}

void CMsgBuildID::SharedCtor() {
build_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgBuildID::~CMsgBuildID() {
  // @@protoc_insertion_point(destructor:CMsgBuildID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBuildID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBuildID::ArenaDtor(void* object) {
  CMsgBuildID* _this = reinterpret_cast< CMsgBuildID* >(object);
  (void)_this;
}
void CMsgBuildID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBuildID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBuildID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBuildID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBuildID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 build_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_build_id(&has_bits);
          build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBuildID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBuildID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_build_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBuildID)
  return target;
}

size_t CMsgBuildID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBuildID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 build_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_build_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBuildID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBuildID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBuildID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBuildID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBuildID)
    MergeFrom(*source);
  }
}

void CMsgBuildID::MergeFrom(const CMsgBuildID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_build_id()) {
    _internal_set_build_id(from._internal_build_id());
  }
}

void CMsgBuildID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBuildID::CopyFrom(const CMsgBuildID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBuildID::IsInitialized() const {
  return true;
}

void CMsgBuildID::InternalSwap(CMsgBuildID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(build_id_, other->build_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBuildID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgOpenDevTools::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgOpenDevTools>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgOpenDevTools::CMsgOpenDevTools(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgOpenDevTools)
}
CMsgOpenDevTools::CMsgOpenDevTools(const CMsgOpenDevTools& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgOpenDevTools)
}

void CMsgOpenDevTools::SharedCtor() {
browser_handle_ = 0u;
}

CMsgOpenDevTools::~CMsgOpenDevTools() {
  // @@protoc_insertion_point(destructor:CMsgOpenDevTools)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgOpenDevTools::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgOpenDevTools::ArenaDtor(void* object) {
  CMsgOpenDevTools* _this = reinterpret_cast< CMsgOpenDevTools* >(object);
  (void)_this;
}
void CMsgOpenDevTools::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgOpenDevTools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgOpenDevTools::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgOpenDevTools)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgOpenDevTools::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgOpenDevTools::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpenDevTools)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpenDevTools)
  return target;
}

size_t CMsgOpenDevTools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgOpenDevTools)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgOpenDevTools::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgOpenDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenDevTools* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgOpenDevTools>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgOpenDevTools)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgOpenDevTools)
    MergeFrom(*source);
  }
}

void CMsgOpenDevTools::MergeFrom(const CMsgOpenDevTools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgOpenDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgOpenDevTools::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgOpenDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenDevTools::CopyFrom(const CMsgOpenDevTools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgOpenDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenDevTools::IsInitialized() const {
  return true;
}

void CMsgOpenDevTools::InternalSwap(CMsgOpenDevTools* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgOpenDevTools::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCloseDevTools::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCloseDevTools>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCloseDevTools::CMsgCloseDevTools(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCloseDevTools)
}
CMsgCloseDevTools::CMsgCloseDevTools(const CMsgCloseDevTools& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgCloseDevTools)
}

void CMsgCloseDevTools::SharedCtor() {
browser_handle_ = 0u;
}

CMsgCloseDevTools::~CMsgCloseDevTools() {
  // @@protoc_insertion_point(destructor:CMsgCloseDevTools)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCloseDevTools::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCloseDevTools::ArenaDtor(void* object) {
  CMsgCloseDevTools* _this = reinterpret_cast< CMsgCloseDevTools* >(object);
  (void)_this;
}
void CMsgCloseDevTools::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCloseDevTools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCloseDevTools::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCloseDevTools)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCloseDevTools::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCloseDevTools::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCloseDevTools)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCloseDevTools)
  return target;
}

size_t CMsgCloseDevTools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCloseDevTools)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCloseDevTools::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCloseDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCloseDevTools* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCloseDevTools>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCloseDevTools)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCloseDevTools)
    MergeFrom(*source);
  }
}

void CMsgCloseDevTools::MergeFrom(const CMsgCloseDevTools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCloseDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgCloseDevTools::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCloseDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCloseDevTools::CopyFrom(const CMsgCloseDevTools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCloseDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCloseDevTools::IsInitialized() const {
  return true;
}

void CMsgCloseDevTools::InternalSwap(CMsgCloseDevTools* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCloseDevTools::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUnlockH264::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUnlockH264>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unloccode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgUnlockH264::CMsgUnlockH264(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUnlockH264)
}
CMsgUnlockH264::CMsgUnlockH264(const CMsgUnlockH264& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unloccode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unloccode()) {
    unloccode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unloccode(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgUnlockH264)
}

void CMsgUnlockH264::SharedCtor() {
unloccode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgUnlockH264::~CMsgUnlockH264() {
  // @@protoc_insertion_point(destructor:CMsgUnlockH264)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUnlockH264::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unloccode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgUnlockH264::ArenaDtor(void* object) {
  CMsgUnlockH264* _this = reinterpret_cast< CMsgUnlockH264* >(object);
  (void)_this;
}
void CMsgUnlockH264::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUnlockH264::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUnlockH264::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUnlockH264)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unloccode_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUnlockH264::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unloccode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unloccode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgUnlockH264.unloccode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUnlockH264::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUnlockH264)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string unloccode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unloccode().data(), static_cast<int>(this->_internal_unloccode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgUnlockH264.unloccode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unloccode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUnlockH264)
  return target;
}

size_t CMsgUnlockH264::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUnlockH264)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string unloccode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unloccode());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUnlockH264::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUnlockH264* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUnlockH264>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUnlockH264)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUnlockH264)
    MergeFrom(*source);
  }
}

void CMsgUnlockH264::MergeFrom(const CMsgUnlockH264& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unloccode(from._internal_unloccode());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUnlockH264::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUnlockH264::CopyFrom(const CMsgUnlockH264& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUnlockH264::IsInitialized() const {
  return true;
}

void CMsgUnlockH264::InternalSwap(CMsgUnlockH264* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unloccode_.Swap(&other->unloccode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUnlockH264::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgScreenInformationChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgScreenInformationChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_monitor_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_monitor_top(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_monitor_right(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_monitor_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usable_left(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_usable_top(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_usable_right(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_usable_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgScreenInformationChanged::CMsgScreenInformationChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgScreenInformationChanged)
}
CMsgScreenInformationChanged::CMsgScreenInformationChanged(const CMsgScreenInformationChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&usable_bottom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(usable_bottom_));
  // @@protoc_insertion_point(copy_constructor:CMsgScreenInformationChanged)
}

void CMsgScreenInformationChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usable_bottom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(usable_bottom_));
}

CMsgScreenInformationChanged::~CMsgScreenInformationChanged() {
  // @@protoc_insertion_point(destructor:CMsgScreenInformationChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgScreenInformationChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgScreenInformationChanged::ArenaDtor(void* object) {
  CMsgScreenInformationChanged* _this = reinterpret_cast< CMsgScreenInformationChanged* >(object);
  (void)_this;
}
void CMsgScreenInformationChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgScreenInformationChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgScreenInformationChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgScreenInformationChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usable_left_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(usable_left_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&usable_top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usable_bottom_) -
        reinterpret_cast<char*>(&usable_top_)) + sizeof(usable_bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgScreenInformationChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_override_width(&has_bits);
          override_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_height(&has_bits);
          override_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 monitor_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_monitor_left(&has_bits);
          monitor_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 monitor_top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_monitor_top(&has_bits);
          monitor_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 monitor_right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_monitor_right(&has_bits);
          monitor_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 monitor_bottom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_monitor_bottom(&has_bits);
          monitor_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 usable_left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_usable_left(&has_bits);
          usable_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 usable_top = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_usable_top(&has_bits);
          usable_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 usable_right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_usable_right(&has_bits);
          usable_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 usable_bottom = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_usable_bottom(&has_bits);
          usable_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgScreenInformationChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgScreenInformationChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 override_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_override_width(), target);
  }

  // optional uint32 override_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_override_height(), target);
  }

  // optional uint32 monitor_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_monitor_left(), target);
  }

  // optional uint32 monitor_top = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_monitor_top(), target);
  }

  // optional uint32 monitor_right = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_monitor_right(), target);
  }

  // optional uint32 monitor_bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_monitor_bottom(), target);
  }

  // optional uint32 usable_left = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_usable_left(), target);
  }

  // optional uint32 usable_top = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_usable_top(), target);
  }

  // optional uint32 usable_right = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_usable_right(), target);
  }

  // optional uint32 usable_bottom = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_usable_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgScreenInformationChanged)
  return target;
}

size_t CMsgScreenInformationChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgScreenInformationChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 override_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_width());
    }

    // optional uint32 override_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_height());
    }

    // optional uint32 monitor_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_monitor_left());
    }

    // optional uint32 monitor_top = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_monitor_top());
    }

    // optional uint32 monitor_right = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_monitor_right());
    }

    // optional uint32 monitor_bottom = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_monitor_bottom());
    }

    // optional uint32 usable_left = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usable_left());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 usable_top = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usable_top());
    }

    // optional uint32 usable_right = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usable_right());
    }

    // optional uint32 usable_bottom = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usable_bottom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScreenInformationChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgScreenInformationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScreenInformationChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgScreenInformationChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgScreenInformationChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgScreenInformationChanged)
    MergeFrom(*source);
  }
}

void CMsgScreenInformationChanged::MergeFrom(const CMsgScreenInformationChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgScreenInformationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_width_ = from.override_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_height_ = from.override_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      monitor_left_ = from.monitor_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      monitor_top_ = from.monitor_top_;
    }
    if (cached_has_bits & 0x00000020u) {
      monitor_right_ = from.monitor_right_;
    }
    if (cached_has_bits & 0x00000040u) {
      monitor_bottom_ = from.monitor_bottom_;
    }
    if (cached_has_bits & 0x00000080u) {
      usable_left_ = from.usable_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      usable_top_ = from.usable_top_;
    }
    if (cached_has_bits & 0x00000200u) {
      usable_right_ = from.usable_right_;
    }
    if (cached_has_bits & 0x00000400u) {
      usable_bottom_ = from.usable_bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScreenInformationChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgScreenInformationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScreenInformationChanged::CopyFrom(const CMsgScreenInformationChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgScreenInformationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenInformationChanged::IsInitialized() const {
  return true;
}

void CMsgScreenInformationChanged::InternalSwap(CMsgScreenInformationChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgScreenInformationChanged, usable_bottom_)
      + sizeof(CMsgScreenInformationChanged::usable_bottom_)
      - PROTOBUF_FIELD_OFFSET(CMsgScreenInformationChanged, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgScreenInformationChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearAllCookies::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearAllCookies>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearAllCookies::CMsgClearAllCookies(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearAllCookies)
}
CMsgClearAllCookies::CMsgClearAllCookies(const CMsgClearAllCookies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearAllCookies)
}

void CMsgClearAllCookies::SharedCtor() {
browser_handle_ = 0u;
}

CMsgClearAllCookies::~CMsgClearAllCookies() {
  // @@protoc_insertion_point(destructor:CMsgClearAllCookies)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearAllCookies::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearAllCookies::ArenaDtor(void* object) {
  CMsgClearAllCookies* _this = reinterpret_cast< CMsgClearAllCookies* >(object);
  (void)_this;
}
void CMsgClearAllCookies::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearAllCookies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearAllCookies::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearAllCookies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearAllCookies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearAllCookies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearAllCookies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearAllCookies)
  return target;
}

size_t CMsgClearAllCookies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearAllCookies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearAllCookies::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearAllCookies)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearAllCookies* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearAllCookies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearAllCookies)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearAllCookies)
    MergeFrom(*source);
  }
}

void CMsgClearAllCookies::MergeFrom(const CMsgClearAllCookies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearAllCookies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgClearAllCookies::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearAllCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearAllCookies::CopyFrom(const CMsgClearAllCookies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearAllCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearAllCookies::IsInitialized() const {
  return true;
}

void CMsgClearAllCookies::InternalSwap(CMsgClearAllCookies* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearAllCookies::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgScreenDPI::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgScreenDPI>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dpi_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgScreenDPI::CMsgScreenDPI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgScreenDPI)
}
CMsgScreenDPI::CMsgScreenDPI(const CMsgScreenDPI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&dpi_scaling_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(dpi_scaling_));
  // @@protoc_insertion_point(copy_constructor:CMsgScreenDPI)
}

void CMsgScreenDPI::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dpi_scaling_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(dpi_scaling_));
}

CMsgScreenDPI::~CMsgScreenDPI() {
  // @@protoc_insertion_point(destructor:CMsgScreenDPI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgScreenDPI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgScreenDPI::ArenaDtor(void* object) {
  CMsgScreenDPI* _this = reinterpret_cast< CMsgScreenDPI* >(object);
  (void)_this;
}
void CMsgScreenDPI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgScreenDPI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgScreenDPI::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgScreenDPI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dpi_scaling_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(dpi_scaling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgScreenDPI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dpi_scaling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dpi_scaling(&has_bits);
          dpi_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgScreenDPI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgScreenDPI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional float dpi_scaling = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dpi_scaling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgScreenDPI)
  return target;
}

size_t CMsgScreenDPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgScreenDPI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional float dpi_scaling = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScreenDPI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScreenDPI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgScreenDPI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgScreenDPI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgScreenDPI)
    MergeFrom(*source);
  }
}

void CMsgScreenDPI::MergeFrom(const CMsgScreenDPI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      dpi_scaling_ = from.dpi_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScreenDPI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScreenDPI::CopyFrom(const CMsgScreenDPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenDPI::IsInitialized() const {
  return true;
}

void CMsgScreenDPI::InternalSwap(CMsgScreenDPI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgScreenDPI, dpi_scaling_)
      + sizeof(CMsgScreenDPI::dpi_scaling_)
      - PROTOBUF_FIELD_OFFSET(CMsgScreenDPI, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgScreenDPI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAckScreenDPI::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAckScreenDPI>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAckScreenDPI::CMsgAckScreenDPI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAckScreenDPI)
}
CMsgAckScreenDPI::CMsgAckScreenDPI(const CMsgAckScreenDPI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgAckScreenDPI)
}

void CMsgAckScreenDPI::SharedCtor() {
browser_handle_ = 0u;
}

CMsgAckScreenDPI::~CMsgAckScreenDPI() {
  // @@protoc_insertion_point(destructor:CMsgAckScreenDPI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAckScreenDPI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAckScreenDPI::ArenaDtor(void* object) {
  CMsgAckScreenDPI* _this = reinterpret_cast< CMsgAckScreenDPI* >(object);
  (void)_this;
}
void CMsgAckScreenDPI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAckScreenDPI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAckScreenDPI::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAckScreenDPI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAckScreenDPI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAckScreenDPI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAckScreenDPI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAckScreenDPI)
  return target;
}

size_t CMsgAckScreenDPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAckScreenDPI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAckScreenDPI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAckScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAckScreenDPI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAckScreenDPI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAckScreenDPI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAckScreenDPI)
    MergeFrom(*source);
  }
}

void CMsgAckScreenDPI::MergeFrom(const CMsgAckScreenDPI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAckScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgAckScreenDPI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAckScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAckScreenDPI::CopyFrom(const CMsgAckScreenDPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAckScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAckScreenDPI::IsInitialized() const {
  return true;
}

void CMsgAckScreenDPI::InternalSwap(CMsgAckScreenDPI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAckScreenDPI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAuthedSteamDomains::_Internal {
 public:
};

CMsgAuthedSteamDomains::CMsgAuthedSteamDomains(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  domains_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAuthedSteamDomains)
}
CMsgAuthedSteamDomains::CMsgAuthedSteamDomains(const CMsgAuthedSteamDomains& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAuthedSteamDomains)
}

void CMsgAuthedSteamDomains::SharedCtor() {
}

CMsgAuthedSteamDomains::~CMsgAuthedSteamDomains() {
  // @@protoc_insertion_point(destructor:CMsgAuthedSteamDomains)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAuthedSteamDomains::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAuthedSteamDomains::ArenaDtor(void* object) {
  CMsgAuthedSteamDomains* _this = reinterpret_cast< CMsgAuthedSteamDomains* >(object);
  (void)_this;
}
void CMsgAuthedSteamDomains::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAuthedSteamDomains::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAuthedSteamDomains::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAuthedSteamDomains)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAuthedSteamDomains::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string domains = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_domains();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAuthedSteamDomains.domains");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAuthedSteamDomains::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAuthedSteamDomains)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string domains = 1;
  for (int i = 0, n = this->_internal_domains_size(); i < n; i++) {
    const auto& s = this->_internal_domains(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAuthedSteamDomains.domains");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAuthedSteamDomains)
  return target;
}

size_t CMsgAuthedSteamDomains::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAuthedSteamDomains)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string domains = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(domains_.size());
  for (int i = 0, n = domains_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      domains_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAuthedSteamDomains::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAuthedSteamDomains)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAuthedSteamDomains* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAuthedSteamDomains>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAuthedSteamDomains)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAuthedSteamDomains)
    MergeFrom(*source);
  }
}

void CMsgAuthedSteamDomains::MergeFrom(const CMsgAuthedSteamDomains& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAuthedSteamDomains)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
}

void CMsgAuthedSteamDomains::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAuthedSteamDomains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthedSteamDomains::CopyFrom(const CMsgAuthedSteamDomains& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAuthedSteamDomains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthedSteamDomains::IsInitialized() const {
  return true;
}

void CMsgAuthedSteamDomains::InternalSwap(CMsgAuthedSteamDomains* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  domains_.InternalSwap(&other->domains_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAuthedSteamDomains::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamAuthNeeded::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamAuthNeeded>()._has_bits_);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamAuthNeeded::CMsgSteamAuthNeeded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamAuthNeeded)
}
CMsgSteamAuthNeeded::CMsgSteamAuthNeeded(const CMsgSteamAuthNeeded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filler_ = from.filler_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamAuthNeeded)
}

void CMsgSteamAuthNeeded::SharedCtor() {
filler_ = false;
}

CMsgSteamAuthNeeded::~CMsgSteamAuthNeeded() {
  // @@protoc_insertion_point(destructor:CMsgSteamAuthNeeded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamAuthNeeded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamAuthNeeded::ArenaDtor(void* object) {
  CMsgSteamAuthNeeded* _this = reinterpret_cast< CMsgSteamAuthNeeded* >(object);
  (void)_this;
}
void CMsgSteamAuthNeeded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamAuthNeeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamAuthNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamAuthNeeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filler_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamAuthNeeded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool filler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_filler(&has_bits);
          filler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamAuthNeeded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamAuthNeeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_filler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamAuthNeeded)
  return target;
}

size_t CMsgSteamAuthNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamAuthNeeded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool filler = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamAuthNeeded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamAuthNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamAuthNeeded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamAuthNeeded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamAuthNeeded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamAuthNeeded)
    MergeFrom(*source);
  }
}

void CMsgSteamAuthNeeded::MergeFrom(const CMsgSteamAuthNeeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamAuthNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filler()) {
    _internal_set_filler(from._internal_filler());
  }
}

void CMsgSteamAuthNeeded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamAuthNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamAuthNeeded::CopyFrom(const CMsgSteamAuthNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamAuthNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamAuthNeeded::IsInitialized() const {
  return true;
}

void CMsgSteamAuthNeeded::InternalSwap(CMsgSteamAuthNeeded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filler_, other->filler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamAuthNeeded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSteamAuthCookiesSet::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamAuthCookiesSet>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamAuthCookiesSet)
}
CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet(const CMsgSteamAuthCookiesSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamAuthCookiesSet)
}

void CMsgSteamAuthCookiesSet::SharedCtor() {
success_ = false;
}

CMsgSteamAuthCookiesSet::~CMsgSteamAuthCookiesSet() {
  // @@protoc_insertion_point(destructor:CMsgSteamAuthCookiesSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamAuthCookiesSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamAuthCookiesSet::ArenaDtor(void* object) {
  CMsgSteamAuthCookiesSet* _this = reinterpret_cast< CMsgSteamAuthCookiesSet* >(object);
  (void)_this;
}
void CMsgSteamAuthCookiesSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamAuthCookiesSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSteamAuthCookiesSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamAuthCookiesSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamAuthCookiesSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamAuthCookiesSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamAuthCookiesSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamAuthCookiesSet)
  return target;
}

size_t CMsgSteamAuthCookiesSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamAuthCookiesSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamAuthCookiesSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamAuthCookiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamAuthCookiesSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamAuthCookiesSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamAuthCookiesSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamAuthCookiesSet)
    MergeFrom(*source);
  }
}

void CMsgSteamAuthCookiesSet::MergeFrom(const CMsgSteamAuthCookiesSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamAuthCookiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgSteamAuthCookiesSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamAuthCookiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamAuthCookiesSet::CopyFrom(const CMsgSteamAuthCookiesSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamAuthCookiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamAuthCookiesSet::IsInitialized() const {
  return true;
}

void CMsgSteamAuthCookiesSet::InternalSwap(CMsgSteamAuthCookiesSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamAuthCookiesSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSRegisterMethod::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSRegisterMethod>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgJSRegisterMethod::CMsgJSRegisterMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSRegisterMethod)
}
CMsgJSRegisterMethod::CMsgJSRegisterMethod(const CMsgJSRegisterMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_type_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(method_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSRegisterMethod)
}

void CMsgJSRegisterMethod::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&method_type_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(method_type_));
}

CMsgJSRegisterMethod::~CMsgJSRegisterMethod() {
  // @@protoc_insertion_point(destructor:CMsgJSRegisterMethod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSRegisterMethod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSRegisterMethod::ArenaDtor(void* object) {
  CMsgJSRegisterMethod* _this = reinterpret_cast< CMsgJSRegisterMethod* >(object);
  (void)_this;
}
void CMsgJSRegisterMethod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSRegisterMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSRegisterMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSRegisterMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_type_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(method_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSRegisterMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSRegisterMethod.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EJSRegisterMethodType method_type = 3 [default = EJSRegisterMethodType_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EJSRegisterMethodType_IsValid(val))) {
            _internal_set_method_type(static_cast<::EJSRegisterMethodType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSRegisterMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSRegisterMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSRegisterMethod.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .EJSRegisterMethodType method_type = 3 [default = EJSRegisterMethodType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_method_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSRegisterMethod)
  return target;
}

size_t CMsgJSRegisterMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSRegisterMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional .EJSRegisterMethodType method_type = 3 [default = EJSRegisterMethodType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSRegisterMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSRegisterMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSRegisterMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSRegisterMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSRegisterMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSRegisterMethod)
    MergeFrom(*source);
  }
}

void CMsgJSRegisterMethod::MergeFrom(const CMsgJSRegisterMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSRegisterMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_type_ = from.method_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSRegisterMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSRegisterMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSRegisterMethod::CopyFrom(const CMsgJSRegisterMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSRegisterMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSRegisterMethod::IsInitialized() const {
  return true;
}

void CMsgJSRegisterMethod::InternalSwap(CMsgJSRegisterMethod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSRegisterMethod, method_type_)
      + sizeof(CMsgJSRegisterMethod::method_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSRegisterMethod, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSRegisterMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSValue_JSObjectProperty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSValue_JSObjectProperty>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgJSValue& value(const CMsgJSValue_JSObjectProperty* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgJSValue&
CMsgJSValue_JSObjectProperty::_Internal::value(const CMsgJSValue_JSObjectProperty* msg) {
  return *msg->value_;
}
CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSValue.JSObjectProperty)
}
CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty(const CMsgJSValue_JSObjectProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::CMsgJSValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgJSValue.JSObjectProperty)
}

void CMsgJSValue_JSObjectProperty::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

CMsgJSValue_JSObjectProperty::~CMsgJSValue_JSObjectProperty() {
  // @@protoc_insertion_point(destructor:CMsgJSValue.JSObjectProperty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSValue_JSObjectProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void CMsgJSValue_JSObjectProperty::ArenaDtor(void* object) {
  CMsgJSValue_JSObjectProperty* _this = reinterpret_cast< CMsgJSValue_JSObjectProperty* >(object);
  (void)_this;
}
void CMsgJSValue_JSObjectProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSValue_JSObjectProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSValue_JSObjectProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSValue.JSObjectProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSValue_JSObjectProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSValue.JSObjectProperty.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgJSValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSValue_JSObjectProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSValue.JSObjectProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSValue.JSObjectProperty.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .CMsgJSValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSValue.JSObjectProperty)
  return target;
}

size_t CMsgJSValue_JSObjectProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSValue.JSObjectProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .CMsgJSValue value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSValue_JSObjectProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSValue.JSObjectProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSValue_JSObjectProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSValue_JSObjectProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSValue.JSObjectProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSValue.JSObjectProperty)
    MergeFrom(*source);
  }
}

void CMsgJSValue_JSObjectProperty::MergeFrom(const CMsgJSValue_JSObjectProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSValue.JSObjectProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::CMsgJSValue::MergeFrom(from._internal_value());
    }
  }
}

void CMsgJSValue_JSObjectProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSValue.JSObjectProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSValue_JSObjectProperty::CopyFrom(const CMsgJSValue_JSObjectProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSValue.JSObjectProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSValue_JSObjectProperty::IsInitialized() const {
  return true;
}

void CMsgJSValue_JSObjectProperty::InternalSwap(CMsgJSValue_JSObjectProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSValue_JSObjectProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSValue>()._has_bits_);
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uint_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_array(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_object(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgJSValue::CMsgJSValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  array_values_(arena),
  object_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSValue)
}
CMsgJSValue::CMsgJSValue(const CMsgJSValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      array_values_(from.array_values_),
      object_properties_(from.object_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArena());
  }
  bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes_value()) {
    bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes_value(), 
      GetArena());
  }
  ::memcpy(&int_value_, &from.int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_object_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(is_object_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSValue)
}

void CMsgJSValue::SharedCtor() {
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&int_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_object_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(is_object_));
}

CMsgJSValue::~CMsgJSValue() {
  // @@protoc_insertion_point(destructor:CMsgJSValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSValue::ArenaDtor(void* object) {
  CMsgJSValue* _this = reinterpret_cast< CMsgJSValue* >(object);
  (void)_this;
}
void CMsgJSValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_values_.Clear();
  object_properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&int_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_array_) -
        reinterpret_cast<char*>(&int_value_)) + sizeof(is_array_));
  }
  is_object_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bool_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_int_value(&has_bits);
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uint_value(&has_bits);
          uint_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSValue.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 function_handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_function_handle(&has_bits);
          function_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_array(&has_bits);
          is_array_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgJSValue array_values = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_object = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_object(&has_bits);
          is_object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgJSValue.JSObjectProperty object_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes bytes_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_value(), target);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_value(), target);
  }

  // optional uint32 uint_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uint_value(), target);
  }

  // optional double double_value = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSValue.string_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_value(), target);
  }

  // optional uint64 function_handle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_function_handle(), target);
  }

  // optional bool is_array = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_array(), target);
  }

  // repeated .CMsgJSValue array_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_array_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_array_values(i), target, stream);
  }

  // optional bool is_object = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_object(), target);
  }

  // repeated .CMsgJSValue.JSObjectProperty object_properties = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_object_properties(i), target, stream);
  }

  // optional bytes bytes_value = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_bytes_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSValue)
  return target;
}

size_t CMsgJSValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJSValue array_values = 9;
  total_size += 1UL * this->_internal_array_values_size();
  for (const auto& msg : this->array_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgJSValue.JSObjectProperty object_properties = 11;
  total_size += 1UL * this->_internal_object_properties_size();
  for (const auto& msg : this->object_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_value = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional bytes bytes_value = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
    }

    // optional int32 int_value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_value());
    }

    // optional uint32 uint_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint_value());
    }

    // optional double double_value = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 function_handle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_function_handle());
    }

    // optional bool bool_value = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_array = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_object = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSValue)
    MergeFrom(*source);
  }
}

void CMsgJSValue::MergeFrom(const CMsgJSValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_values_.MergeFrom(from.array_values_);
  object_properties_.MergeFrom(from.object_properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes_value(from._internal_bytes_value());
    }
    if (cached_has_bits & 0x00000004u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      uint_value_ = from.uint_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      function_handle_ = from.function_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_array_ = from.is_array_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_object(from._internal_is_object());
  }
}

void CMsgJSValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSValue::CopyFrom(const CMsgJSValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSValue::IsInitialized() const {
  return true;
}

void CMsgJSValue::InternalSwap(CMsgJSValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  array_values_.InternalSwap(&other->array_values_);
  object_properties_.InternalSwap(&other->object_properties_);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytes_value_.Swap(&other->bytes_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSValue, is_object_)
      + sizeof(CMsgJSValue::is_object_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSValue, int_value_)>(
          reinterpret_cast<char*>(&int_value_),
          reinterpret_cast<char*>(&other->int_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSMethodCall::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSMethodCall>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owning_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJSMethodCall::CMsgJSMethodCall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSMethodCall)
}
CMsgJSMethodCall::CMsgJSMethodCall(const CMsgJSMethodCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&owning_browser_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(owning_browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSMethodCall)
}

void CMsgJSMethodCall::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owning_browser_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(owning_browser_handle_));
}

CMsgJSMethodCall::~CMsgJSMethodCall() {
  // @@protoc_insertion_point(destructor:CMsgJSMethodCall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSMethodCall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSMethodCall::ArenaDtor(void* object) {
  CMsgJSMethodCall* _this = reinterpret_cast< CMsgJSMethodCall* >(object);
  (void)_this;
}
void CMsgJSMethodCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSMethodCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSMethodCall::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSMethodCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owning_browser_handle_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(owning_browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSMethodCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owning_browser_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owning_browser_handle(&has_bits);
          owning_browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSMethodCall.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgJSValue arguments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSMethodCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSMethodCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 owning_browser_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owning_browser_handle(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSMethodCall.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .CMsgJSValue arguments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_arguments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSMethodCall)
  return target;
}

size_t CMsgJSMethodCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSMethodCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJSValue arguments = 4;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 owning_browser_handle = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owning_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSMethodCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSMethodCall)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSMethodCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSMethodCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSMethodCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSMethodCall)
    MergeFrom(*source);
  }
}

void CMsgJSMethodCall::MergeFrom(const CMsgJSMethodCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSMethodCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      owning_browser_handle_ = from.owning_browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSMethodCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSMethodCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSMethodCall::CopyFrom(const CMsgJSMethodCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSMethodCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSMethodCall::IsInitialized() const {
  return true;
}

void CMsgJSMethodCall::InternalSwap(CMsgJSMethodCall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arguments_.InternalSwap(&other->arguments_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSMethodCall, owning_browser_handle_)
      + sizeof(CMsgJSMethodCall::owning_browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSMethodCall, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSMethodCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSExecuteCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSExecuteCallback>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owning_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_function_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgJSExecuteCallback::CMsgJSExecuteCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSExecuteCallback)
}
CMsgJSExecuteCallback::CMsgJSExecuteCallback(const CMsgJSExecuteCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&function_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(function_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSExecuteCallback)
}

void CMsgJSExecuteCallback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(function_handle_));
}

CMsgJSExecuteCallback::~CMsgJSExecuteCallback() {
  // @@protoc_insertion_point(destructor:CMsgJSExecuteCallback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSExecuteCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJSExecuteCallback::ArenaDtor(void* object) {
  CMsgJSExecuteCallback* _this = reinterpret_cast< CMsgJSExecuteCallback* >(object);
  (void)_this;
}
void CMsgJSExecuteCallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSExecuteCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSExecuteCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSExecuteCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&function_handle_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(function_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSExecuteCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owning_browser_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owning_browser_handle(&has_bits);
          owning_browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 function_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_function_handle(&has_bits);
          function_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgJSValue arguments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSExecuteCallback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSExecuteCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 owning_browser_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owning_browser_handle(), target);
  }

  // optional uint64 function_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_function_handle(), target);
  }

  // repeated .CMsgJSValue arguments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_arguments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSExecuteCallback)
  return target;
}

size_t CMsgJSExecuteCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSExecuteCallback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJSValue arguments = 4;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 owning_browser_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owning_browser_handle());
    }

    // optional uint64 function_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_function_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSExecuteCallback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSExecuteCallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSExecuteCallback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSExecuteCallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSExecuteCallback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSExecuteCallback)
    MergeFrom(*source);
  }
}

void CMsgJSExecuteCallback::MergeFrom(const CMsgJSExecuteCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSExecuteCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      owning_browser_handle_ = from.owning_browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      function_handle_ = from.function_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSExecuteCallback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSExecuteCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSExecuteCallback::CopyFrom(const CMsgJSExecuteCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSExecuteCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSExecuteCallback::IsInitialized() const {
  return true;
}

void CMsgJSExecuteCallback::InternalSwap(CMsgJSExecuteCallback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSExecuteCallback, function_handle_)
      + sizeof(CMsgJSExecuteCallback::function_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSExecuteCallback, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSExecuteCallback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSReleaseCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSReleaseCallback>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owning_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_function_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgJSReleaseCallback::CMsgJSReleaseCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSReleaseCallback)
}
CMsgJSReleaseCallback::CMsgJSReleaseCallback(const CMsgJSReleaseCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&function_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(function_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSReleaseCallback)
}

void CMsgJSReleaseCallback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(function_handle_));
}

CMsgJSReleaseCallback::~CMsgJSReleaseCallback() {
  // @@protoc_insertion_point(destructor:CMsgJSReleaseCallback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSReleaseCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgJSReleaseCallback::ArenaDtor(void* object) {
  CMsgJSReleaseCallback* _this = reinterpret_cast< CMsgJSReleaseCallback* >(object);
  (void)_this;
}
void CMsgJSReleaseCallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSReleaseCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSReleaseCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSReleaseCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&function_handle_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(function_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSReleaseCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owning_browser_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owning_browser_handle(&has_bits);
          owning_browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 function_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_function_handle(&has_bits);
          function_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSReleaseCallback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSReleaseCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 owning_browser_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owning_browser_handle(), target);
  }

  // optional uint64 function_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_function_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSReleaseCallback)
  return target;
}

size_t CMsgJSReleaseCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSReleaseCallback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 owning_browser_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owning_browser_handle());
    }

    // optional uint64 function_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_function_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSReleaseCallback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSReleaseCallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSReleaseCallback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSReleaseCallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSReleaseCallback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSReleaseCallback)
    MergeFrom(*source);
  }
}

void CMsgJSReleaseCallback::MergeFrom(const CMsgJSReleaseCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSReleaseCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      owning_browser_handle_ = from.owning_browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      function_handle_ = from.function_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSReleaseCallback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSReleaseCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSReleaseCallback::CopyFrom(const CMsgJSReleaseCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSReleaseCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSReleaseCallback::IsInitialized() const {
  return true;
}

void CMsgJSReleaseCallback::InternalSwap(CMsgJSReleaseCallback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSReleaseCallback, function_handle_)
      + sizeof(CMsgJSReleaseCallback::function_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSReleaseCallback, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSReleaseCallback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgJSRaiseException::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJSRaiseException>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owning_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJSRaiseException::CMsgJSRaiseException(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgJSRaiseException)
}
CMsgJSRaiseException::CMsgJSRaiseException(const CMsgJSRaiseException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exception()) {
    exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exception(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&owning_browser_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(owning_browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgJSRaiseException)
}

void CMsgJSRaiseException::SharedCtor() {
exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owning_browser_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(owning_browser_handle_));
}

CMsgJSRaiseException::~CMsgJSRaiseException() {
  // @@protoc_insertion_point(destructor:CMsgJSRaiseException)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgJSRaiseException::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exception_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSRaiseException::ArenaDtor(void* object) {
  CMsgJSRaiseException* _this = reinterpret_cast< CMsgJSRaiseException* >(object);
  (void)_this;
}
void CMsgJSRaiseException::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgJSRaiseException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgJSRaiseException::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJSRaiseException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    exception_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owning_browser_handle_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(owning_browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJSRaiseException::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owning_browser_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owning_browser_handle(&has_bits);
          owning_browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string exception = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exception();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgJSRaiseException.exception");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgJSRaiseException::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJSRaiseException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 owning_browser_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owning_browser_handle(), target);
  }

  // optional string exception = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exception().data(), static_cast<int>(this->_internal_exception().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJSRaiseException.exception");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exception(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJSRaiseException)
  return target;
}

size_t CMsgJSRaiseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJSRaiseException)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string exception = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exception());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 owning_browser_handle = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owning_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSRaiseException::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgJSRaiseException)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSRaiseException* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgJSRaiseException>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgJSRaiseException)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgJSRaiseException)
    MergeFrom(*source);
  }
}

void CMsgJSRaiseException::MergeFrom(const CMsgJSRaiseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgJSRaiseException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_exception(from._internal_exception());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      owning_browser_handle_ = from.owning_browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSRaiseException::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgJSRaiseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSRaiseException::CopyFrom(const CMsgJSRaiseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJSRaiseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSRaiseException::IsInitialized() const {
  return true;
}

void CMsgJSRaiseException::InternalSwap(CMsgJSRaiseException* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exception_.Swap(&other->exception_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJSRaiseException, owning_browser_handle_)
      + sizeof(CMsgJSRaiseException::owning_browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgJSRaiseException, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJSRaiseException::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLoadLocalization::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLoadLocalization>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_localization_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLoadLocalization::CMsgLoadLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLoadLocalization)
}
CMsgLoadLocalization::CMsgLoadLocalization(const CMsgLoadLocalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  localization_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localization_path()) {
    localization_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localization_path(), 
      GetArena());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgLoadLocalization)
}

void CMsgLoadLocalization::SharedCtor() {
localization_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgLoadLocalization::~CMsgLoadLocalization() {
  // @@protoc_insertion_point(destructor:CMsgLoadLocalization)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLoadLocalization::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  localization_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadLocalization::ArenaDtor(void* object) {
  CMsgLoadLocalization* _this = reinterpret_cast< CMsgLoadLocalization* >(object);
  (void)_this;
}
void CMsgLoadLocalization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLoadLocalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLoadLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLoadLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      localization_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLoadLocalization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string localization_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_localization_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadLocalization.localization_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLoadLocalization.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLoadLocalization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLoadLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string localization_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_path().data(), static_cast<int>(this->_internal_localization_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadLocalization.localization_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localization_path(), target);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLoadLocalization.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLoadLocalization)
  return target;
}

size_t CMsgLoadLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLoadLocalization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string localization_path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_path());
    }

    // optional string language = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadLocalization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLoadLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadLocalization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLoadLocalization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLoadLocalization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLoadLocalization)
    MergeFrom(*source);
  }
}

void CMsgLoadLocalization::MergeFrom(const CMsgLoadLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLoadLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_localization_path(from._internal_localization_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadLocalization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLoadLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadLocalization::CopyFrom(const CMsgLoadLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLoadLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadLocalization::IsInitialized() const {
  return true;
}

void CMsgLoadLocalization::InternalSwap(CMsgLoadLocalization* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  localization_path_.Swap(&other->localization_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLoadLocalization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgNotifyUserActivation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotifyUserActivation>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgNotifyUserActivation::CMsgNotifyUserActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgNotifyUserActivation)
}
CMsgNotifyUserActivation::CMsgNotifyUserActivation(const CMsgNotifyUserActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgNotifyUserActivation)
}

void CMsgNotifyUserActivation::SharedCtor() {
browser_handle_ = 0u;
}

CMsgNotifyUserActivation::~CMsgNotifyUserActivation() {
  // @@protoc_insertion_point(destructor:CMsgNotifyUserActivation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgNotifyUserActivation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgNotifyUserActivation::ArenaDtor(void* object) {
  CMsgNotifyUserActivation* _this = reinterpret_cast< CMsgNotifyUserActivation* >(object);
  (void)_this;
}
void CMsgNotifyUserActivation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNotifyUserActivation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNotifyUserActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotifyUserActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotifyUserActivation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgNotifyUserActivation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotifyUserActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotifyUserActivation)
  return target;
}

size_t CMsgNotifyUserActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotifyUserActivation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNotifyUserActivation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgNotifyUserActivation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotifyUserActivation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgNotifyUserActivation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgNotifyUserActivation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgNotifyUserActivation)
    MergeFrom(*source);
  }
}

void CMsgNotifyUserActivation::MergeFrom(const CMsgNotifyUserActivation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotifyUserActivation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgNotifyUserActivation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgNotifyUserActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotifyUserActivation::CopyFrom(const CMsgNotifyUserActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotifyUserActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotifyUserActivation::IsInitialized() const {
  return true;
}

void CMsgNotifyUserActivation::InternalSwap(CMsgNotifyUserActivation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotifyUserActivation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetNetFakeLocalSystemState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetNetFakeLocalSystemState>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetNetFakeLocalSystemState::CMsgSetNetFakeLocalSystemState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetNetFakeLocalSystemState)
}
CMsgSetNetFakeLocalSystemState::CMsgSetNetFakeLocalSystemState(const CMsgSetNetFakeLocalSystemState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetNetFakeLocalSystemState)
}

void CMsgSetNetFakeLocalSystemState::SharedCtor() {
state_ = 0u;
}

CMsgSetNetFakeLocalSystemState::~CMsgSetNetFakeLocalSystemState() {
  // @@protoc_insertion_point(destructor:CMsgSetNetFakeLocalSystemState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetNetFakeLocalSystemState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetNetFakeLocalSystemState::ArenaDtor(void* object) {
  CMsgSetNetFakeLocalSystemState* _this = reinterpret_cast< CMsgSetNetFakeLocalSystemState* >(object);
  (void)_this;
}
void CMsgSetNetFakeLocalSystemState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetNetFakeLocalSystemState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetNetFakeLocalSystemState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetNetFakeLocalSystemState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetNetFakeLocalSystemState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetNetFakeLocalSystemState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetNetFakeLocalSystemState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetNetFakeLocalSystemState)
  return target;
}

size_t CMsgSetNetFakeLocalSystemState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetNetFakeLocalSystemState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetNetFakeLocalSystemState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetNetFakeLocalSystemState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetNetFakeLocalSystemState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetNetFakeLocalSystemState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetNetFakeLocalSystemState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetNetFakeLocalSystemState)
    MergeFrom(*source);
  }
}

void CMsgSetNetFakeLocalSystemState::MergeFrom(const CMsgSetNetFakeLocalSystemState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetNetFakeLocalSystemState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
}

void CMsgSetNetFakeLocalSystemState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetNetFakeLocalSystemState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetNetFakeLocalSystemState::CopyFrom(const CMsgSetNetFakeLocalSystemState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetNetFakeLocalSystemState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetNetFakeLocalSystemState::IsInitialized() const {
  return true;
}

void CMsgSetNetFakeLocalSystemState::InternalSwap(CMsgSetNetFakeLocalSystemState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetNetFakeLocalSystemState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetGameOverlayTargetPIDs::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetGameOverlayTargetPIDs>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetGameOverlayTargetPIDs::CMsgSetGameOverlayTargetPIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_pid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetGameOverlayTargetPIDs)
}
CMsgSetGameOverlayTargetPIDs::CMsgSetGameOverlayTargetPIDs(const CMsgSetGameOverlayTargetPIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetGameOverlayTargetPIDs)
}

void CMsgSetGameOverlayTargetPIDs::SharedCtor() {
browser_handle_ = 0u;
}

CMsgSetGameOverlayTargetPIDs::~CMsgSetGameOverlayTargetPIDs() {
  // @@protoc_insertion_point(destructor:CMsgSetGameOverlayTargetPIDs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetGameOverlayTargetPIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetGameOverlayTargetPIDs::ArenaDtor(void* object) {
  CMsgSetGameOverlayTargetPIDs* _this = reinterpret_cast< CMsgSetGameOverlayTargetPIDs* >(object);
  (void)_this;
}
void CMsgSetGameOverlayTargetPIDs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetGameOverlayTargetPIDs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetGameOverlayTargetPIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetGameOverlayTargetPIDs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetGameOverlayTargetPIDs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 target_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetGameOverlayTargetPIDs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetGameOverlayTargetPIDs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // repeated uint32 target_pid = 2;
  for (int i = 0, n = this->_internal_target_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetGameOverlayTargetPIDs)
  return target;
}

size_t CMsgSetGameOverlayTargetPIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetGameOverlayTargetPIDs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 target_pid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_target_pid_size());
    total_size += data_size;
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetGameOverlayTargetPIDs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetGameOverlayTargetPIDs)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetGameOverlayTargetPIDs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetGameOverlayTargetPIDs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetGameOverlayTargetPIDs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetGameOverlayTargetPIDs)
    MergeFrom(*source);
  }
}

void CMsgSetGameOverlayTargetPIDs::MergeFrom(const CMsgSetGameOverlayTargetPIDs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetGameOverlayTargetPIDs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgSetGameOverlayTargetPIDs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetGameOverlayTargetPIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetGameOverlayTargetPIDs::CopyFrom(const CMsgSetGameOverlayTargetPIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetGameOverlayTargetPIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetGameOverlayTargetPIDs::IsInitialized() const {
  return true;
}

void CMsgSetGameOverlayTargetPIDs::InternalSwap(CMsgSetGameOverlayTargetPIDs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetGameOverlayTargetPIDs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameOverlayTargetTextureID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameOverlayTargetTextureID>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_texture_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameOverlayTargetTextureID::CMsgGameOverlayTargetTextureID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameOverlayTargetTextureID)
}
CMsgGameOverlayTargetTextureID::CMsgGameOverlayTargetTextureID(const CMsgGameOverlayTargetTextureID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&texture_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(texture_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameOverlayTargetTextureID)
}

void CMsgGameOverlayTargetTextureID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&texture_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(texture_handle_));
}

CMsgGameOverlayTargetTextureID::~CMsgGameOverlayTargetTextureID() {
  // @@protoc_insertion_point(destructor:CMsgGameOverlayTargetTextureID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameOverlayTargetTextureID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameOverlayTargetTextureID::ArenaDtor(void* object) {
  CMsgGameOverlayTargetTextureID* _this = reinterpret_cast< CMsgGameOverlayTargetTextureID* >(object);
  (void)_this;
}
void CMsgGameOverlayTargetTextureID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameOverlayTargetTextureID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameOverlayTargetTextureID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameOverlayTargetTextureID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&texture_handle_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(texture_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameOverlayTargetTextureID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_pid(&has_bits);
          target_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 texture_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_texture_handle(&has_bits);
          texture_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameOverlayTargetTextureID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameOverlayTargetTextureID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 target_pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pid(), target);
  }

  // optional uint32 texture_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_texture_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameOverlayTargetTextureID)
  return target;
}

size_t CMsgGameOverlayTargetTextureID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameOverlayTargetTextureID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 target_pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_pid());
    }

    // optional uint32 texture_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_texture_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameOverlayTargetTextureID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameOverlayTargetTextureID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameOverlayTargetTextureID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameOverlayTargetTextureID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameOverlayTargetTextureID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameOverlayTargetTextureID)
    MergeFrom(*source);
  }
}

void CMsgGameOverlayTargetTextureID::MergeFrom(const CMsgGameOverlayTargetTextureID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameOverlayTargetTextureID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_pid_ = from.target_pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      texture_handle_ = from.texture_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameOverlayTargetTextureID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameOverlayTargetTextureID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameOverlayTargetTextureID::CopyFrom(const CMsgGameOverlayTargetTextureID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameOverlayTargetTextureID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameOverlayTargetTextureID::IsInitialized() const {
  return true;
}

void CMsgGameOverlayTargetTextureID::InternalSwap(CMsgGameOverlayTargetTextureID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameOverlayTargetTextureID, texture_handle_)
      + sizeof(CMsgGameOverlayTargetTextureID::texture_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameOverlayTargetTextureID, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameOverlayTargetTextureID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDraggableRegionsChanged_DraggableRects::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDraggableRegionsChanged_DraggableRects>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_draggable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDraggableRegionsChanged_DraggableRects::CMsgDraggableRegionsChanged_DraggableRects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDraggableRegionsChanged.DraggableRects)
}
CMsgDraggableRegionsChanged_DraggableRects::CMsgDraggableRegionsChanged_DraggableRects(const CMsgDraggableRegionsChanged_DraggableRects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&draggable_) -
    reinterpret_cast<char*>(&x_)) + sizeof(draggable_));
  // @@protoc_insertion_point(copy_constructor:CMsgDraggableRegionsChanged.DraggableRects)
}

void CMsgDraggableRegionsChanged_DraggableRects::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&draggable_) -
    reinterpret_cast<char*>(&x_)) + sizeof(draggable_));
}

CMsgDraggableRegionsChanged_DraggableRects::~CMsgDraggableRegionsChanged_DraggableRects() {
  // @@protoc_insertion_point(destructor:CMsgDraggableRegionsChanged.DraggableRects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDraggableRegionsChanged_DraggableRects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDraggableRegionsChanged_DraggableRects::ArenaDtor(void* object) {
  CMsgDraggableRegionsChanged_DraggableRects* _this = reinterpret_cast< CMsgDraggableRegionsChanged_DraggableRects* >(object);
  (void)_this;
}
void CMsgDraggableRegionsChanged_DraggableRects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDraggableRegionsChanged_DraggableRects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDraggableRegionsChanged_DraggableRects::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDraggableRegionsChanged.DraggableRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&draggable_) -
        reinterpret_cast<char*>(&x_)) + sizeof(draggable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDraggableRegionsChanged_DraggableRects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool draggable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_draggable(&has_bits);
          draggable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDraggableRegionsChanged_DraggableRects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDraggableRegionsChanged.DraggableRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // optional bool draggable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_draggable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDraggableRegionsChanged.DraggableRects)
  return target;
}

size_t CMsgDraggableRegionsChanged_DraggableRects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDraggableRegionsChanged.DraggableRects)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional bool draggable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDraggableRegionsChanged_DraggableRects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDraggableRegionsChanged.DraggableRects)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDraggableRegionsChanged_DraggableRects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDraggableRegionsChanged_DraggableRects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDraggableRegionsChanged.DraggableRects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDraggableRegionsChanged.DraggableRects)
    MergeFrom(*source);
  }
}

void CMsgDraggableRegionsChanged_DraggableRects::MergeFrom(const CMsgDraggableRegionsChanged_DraggableRects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDraggableRegionsChanged.DraggableRects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      draggable_ = from.draggable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDraggableRegionsChanged_DraggableRects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDraggableRegionsChanged.DraggableRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDraggableRegionsChanged_DraggableRects::CopyFrom(const CMsgDraggableRegionsChanged_DraggableRects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDraggableRegionsChanged.DraggableRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDraggableRegionsChanged_DraggableRects::IsInitialized() const {
  return true;
}

void CMsgDraggableRegionsChanged_DraggableRects::InternalSwap(CMsgDraggableRegionsChanged_DraggableRects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDraggableRegionsChanged_DraggableRects, draggable_)
      + sizeof(CMsgDraggableRegionsChanged_DraggableRects::draggable_)
      - PROTOBUF_FIELD_OFFSET(CMsgDraggableRegionsChanged_DraggableRects, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDraggableRegionsChanged_DraggableRects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDraggableRegionsChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDraggableRegionsChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDraggableRegionsChanged::CMsgDraggableRegionsChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDraggableRegionsChanged)
}
CMsgDraggableRegionsChanged::CMsgDraggableRegionsChanged(const CMsgDraggableRegionsChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgDraggableRegionsChanged)
}

void CMsgDraggableRegionsChanged::SharedCtor() {
browser_handle_ = 0u;
}

CMsgDraggableRegionsChanged::~CMsgDraggableRegionsChanged() {
  // @@protoc_insertion_point(destructor:CMsgDraggableRegionsChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDraggableRegionsChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDraggableRegionsChanged::ArenaDtor(void* object) {
  CMsgDraggableRegionsChanged* _this = reinterpret_cast< CMsgDraggableRegionsChanged* >(object);
  (void)_this;
}
void CMsgDraggableRegionsChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDraggableRegionsChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDraggableRegionsChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDraggableRegionsChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDraggableRegionsChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDraggableRegionsChanged.DraggableRects rects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDraggableRegionsChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDraggableRegionsChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // repeated .CMsgDraggableRegionsChanged.DraggableRects rects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDraggableRegionsChanged)
  return target;
}

size_t CMsgDraggableRegionsChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDraggableRegionsChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDraggableRegionsChanged.DraggableRects rects = 2;
  total_size += 1UL * this->_internal_rects_size();
  for (const auto& msg : this->rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDraggableRegionsChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDraggableRegionsChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDraggableRegionsChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDraggableRegionsChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDraggableRegionsChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDraggableRegionsChanged)
    MergeFrom(*source);
  }
}

void CMsgDraggableRegionsChanged::MergeFrom(const CMsgDraggableRegionsChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDraggableRegionsChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgDraggableRegionsChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDraggableRegionsChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDraggableRegionsChanged::CopyFrom(const CMsgDraggableRegionsChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDraggableRegionsChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDraggableRegionsChanged::IsInitialized() const {
  return true;
}

void CMsgDraggableRegionsChanged::InternalSwap(CMsgDraggableRegionsChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rects_.InternalSwap(&other->rects_);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDraggableRegionsChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgResizeGripChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResizeGripChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgResizeGripChanged::CMsgResizeGripChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgResizeGripChanged)
}
CMsgResizeGripChanged::CMsgResizeGripChanged(const CMsgResizeGripChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CMsgResizeGripChanged)
}

void CMsgResizeGripChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgResizeGripChanged::~CMsgResizeGripChanged() {
  // @@protoc_insertion_point(destructor:CMsgResizeGripChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgResizeGripChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgResizeGripChanged::ArenaDtor(void* object) {
  CMsgResizeGripChanged* _this = reinterpret_cast< CMsgResizeGripChanged* >(object);
  (void)_this;
}
void CMsgResizeGripChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgResizeGripChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgResizeGripChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResizeGripChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResizeGripChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgResizeGripChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResizeGripChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResizeGripChanged)
  return target;
}

size_t CMsgResizeGripChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResizeGripChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResizeGripChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgResizeGripChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResizeGripChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgResizeGripChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgResizeGripChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgResizeGripChanged)
    MergeFrom(*source);
  }
}

void CMsgResizeGripChanged::MergeFrom(const CMsgResizeGripChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgResizeGripChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResizeGripChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgResizeGripChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResizeGripChanged::CopyFrom(const CMsgResizeGripChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResizeGripChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResizeGripChanged::IsInitialized() const {
  return true;
}

void CMsgResizeGripChanged::InternalSwap(CMsgResizeGripChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgResizeGripChanged, height_)
      + sizeof(CMsgResizeGripChanged::height_)
      - PROTOBUF_FIELD_OFFSET(CMsgResizeGripChanged, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResizeGripChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetWindowPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetWindowPosition>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgSetWindowPosition::CMsgSetWindowPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetWindowPosition)
}
CMsgSetWindowPosition::CMsgSetWindowPosition(const CMsgSetWindowPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetWindowPosition)
}

void CMsgSetWindowPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(browser_handle_));
}

CMsgSetWindowPosition::~CMsgSetWindowPosition() {
  // @@protoc_insertion_point(destructor:CMsgSetWindowPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetWindowPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetWindowPosition::ArenaDtor(void* object) {
  CMsgSetWindowPosition* _this = reinterpret_cast< CMsgSetWindowPosition* >(object);
  (void)_this;
}
void CMsgSetWindowPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetWindowPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetWindowPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetWindowPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(max_height_));
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetWindowPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_min_width(&has_bits);
          min_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_min_height(&has_bits);
          min_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_max_width(&has_bits);
          max_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_max_height(&has_bits);
          max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetWindowPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetWindowPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional double x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // optional double y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // optional double width = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_width(), target);
  }

  // optional double height = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_height(), target);
  }

  // optional double min_width = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_min_width(), target);
  }

  // optional double min_height = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_min_height(), target);
  }

  // optional double max_width = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_max_width(), target);
  }

  // optional double max_height = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_max_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetWindowPosition)
  return target;
}

size_t CMsgSetWindowPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetWindowPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double width = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double height = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min_width = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double min_height = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_width = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double max_height = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetWindowPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetWindowPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetWindowPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetWindowPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetWindowPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetWindowPosition)
    MergeFrom(*source);
  }
}

void CMsgSetWindowPosition::MergeFrom(const CMsgSetWindowPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetWindowPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_width_ = from.min_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_width_ = from.max_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_height_ = from.max_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgSetWindowPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetWindowPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetWindowPosition::CopyFrom(const CMsgSetWindowPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetWindowPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetWindowPosition::IsInitialized() const {
  return true;
}

void CMsgSetWindowPosition::InternalSwap(CMsgSetWindowPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetWindowPosition, browser_handle_)
      + sizeof(CMsgSetWindowPosition::browser_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetWindowPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetWindowPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgShowWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowWindow::CMsgShowWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgShowWindow)
}
CMsgShowWindow::CMsgShowWindow(const CMsgShowWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowWindow)
}

void CMsgShowWindow::SharedCtor() {
browser_handle_ = 0u;
}

CMsgShowWindow::~CMsgShowWindow() {
  // @@protoc_insertion_point(destructor:CMsgShowWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgShowWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgShowWindow::ArenaDtor(void* object) {
  CMsgShowWindow* _this = reinterpret_cast< CMsgShowWindow* >(object);
  (void)_this;
}
void CMsgShowWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgShowWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgShowWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgShowWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowWindow)
  return target;
}

size_t CMsgShowWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgShowWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgShowWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgShowWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgShowWindow)
    MergeFrom(*source);
  }
}

void CMsgShowWindow::MergeFrom(const CMsgShowWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgShowWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgShowWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowWindow::CopyFrom(const CMsgShowWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowWindow::IsInitialized() const {
  return true;
}

void CMsgShowWindow::InternalSwap(CMsgShowWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHideWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHideWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHideWindow::CMsgHideWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHideWindow)
}
CMsgHideWindow::CMsgHideWindow(const CMsgHideWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgHideWindow)
}

void CMsgHideWindow::SharedCtor() {
browser_handle_ = 0u;
}

CMsgHideWindow::~CMsgHideWindow() {
  // @@protoc_insertion_point(destructor:CMsgHideWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHideWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHideWindow::ArenaDtor(void* object) {
  CMsgHideWindow* _this = reinterpret_cast< CMsgHideWindow* >(object);
  (void)_this;
}
void CMsgHideWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHideWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHideWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHideWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHideWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHideWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHideWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHideWindow)
  return target;
}

size_t CMsgHideWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHideWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHideWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHideWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHideWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHideWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHideWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHideWindow)
    MergeFrom(*source);
  }
}

void CMsgHideWindow::MergeFrom(const CMsgHideWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHideWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgHideWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHideWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHideWindow::CopyFrom(const CMsgHideWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHideWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHideWindow::IsInitialized() const {
  return true;
}

void CMsgHideWindow::InternalSwap(CMsgHideWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHideWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBringWindowToFront::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBringWindowToFront>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBringWindowToFront::CMsgBringWindowToFront(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBringWindowToFront)
}
CMsgBringWindowToFront::CMsgBringWindowToFront(const CMsgBringWindowToFront& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgBringWindowToFront)
}

void CMsgBringWindowToFront::SharedCtor() {
browser_handle_ = 0u;
}

CMsgBringWindowToFront::~CMsgBringWindowToFront() {
  // @@protoc_insertion_point(destructor:CMsgBringWindowToFront)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBringWindowToFront::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBringWindowToFront::ArenaDtor(void* object) {
  CMsgBringWindowToFront* _this = reinterpret_cast< CMsgBringWindowToFront* >(object);
  (void)_this;
}
void CMsgBringWindowToFront::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBringWindowToFront::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBringWindowToFront::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBringWindowToFront)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBringWindowToFront::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBringWindowToFront::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBringWindowToFront)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBringWindowToFront)
  return target;
}

size_t CMsgBringWindowToFront::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBringWindowToFront)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBringWindowToFront::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBringWindowToFront)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBringWindowToFront* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBringWindowToFront>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBringWindowToFront)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBringWindowToFront)
    MergeFrom(*source);
  }
}

void CMsgBringWindowToFront::MergeFrom(const CMsgBringWindowToFront& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBringWindowToFront)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgBringWindowToFront::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBringWindowToFront)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBringWindowToFront::CopyFrom(const CMsgBringWindowToFront& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBringWindowToFront)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBringWindowToFront::IsInitialized() const {
  return true;
}

void CMsgBringWindowToFront::InternalSwap(CMsgBringWindowToFront* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBringWindowToFront::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetForegroundWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetForegroundWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetForegroundWindow::CMsgSetForegroundWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetForegroundWindow)
}
CMsgSetForegroundWindow::CMsgSetForegroundWindow(const CMsgSetForegroundWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetForegroundWindow)
}

void CMsgSetForegroundWindow::SharedCtor() {
browser_handle_ = 0u;
}

CMsgSetForegroundWindow::~CMsgSetForegroundWindow() {
  // @@protoc_insertion_point(destructor:CMsgSetForegroundWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetForegroundWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetForegroundWindow::ArenaDtor(void* object) {
  CMsgSetForegroundWindow* _this = reinterpret_cast< CMsgSetForegroundWindow* >(object);
  (void)_this;
}
void CMsgSetForegroundWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetForegroundWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetForegroundWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetForegroundWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetForegroundWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetForegroundWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetForegroundWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetForegroundWindow)
  return target;
}

size_t CMsgSetForegroundWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetForegroundWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetForegroundWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetForegroundWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetForegroundWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetForegroundWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetForegroundWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetForegroundWindow)
    MergeFrom(*source);
  }
}

void CMsgSetForegroundWindow::MergeFrom(const CMsgSetForegroundWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetForegroundWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgSetForegroundWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetForegroundWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetForegroundWindow::CopyFrom(const CMsgSetForegroundWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetForegroundWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetForegroundWindow::IsInitialized() const {
  return true;
}

void CMsgSetForegroundWindow::InternalSwap(CMsgSetForegroundWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetForegroundWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMaximizeRestoreWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMaximizeRestoreWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMaximizeRestoreWindow::CMsgMaximizeRestoreWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMaximizeRestoreWindow)
}
CMsgMaximizeRestoreWindow::CMsgMaximizeRestoreWindow(const CMsgMaximizeRestoreWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgMaximizeRestoreWindow)
}

void CMsgMaximizeRestoreWindow::SharedCtor() {
browser_handle_ = 0u;
}

CMsgMaximizeRestoreWindow::~CMsgMaximizeRestoreWindow() {
  // @@protoc_insertion_point(destructor:CMsgMaximizeRestoreWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMaximizeRestoreWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMaximizeRestoreWindow::ArenaDtor(void* object) {
  CMsgMaximizeRestoreWindow* _this = reinterpret_cast< CMsgMaximizeRestoreWindow* >(object);
  (void)_this;
}
void CMsgMaximizeRestoreWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMaximizeRestoreWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMaximizeRestoreWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMaximizeRestoreWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMaximizeRestoreWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMaximizeRestoreWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMaximizeRestoreWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMaximizeRestoreWindow)
  return target;
}

size_t CMsgMaximizeRestoreWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMaximizeRestoreWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMaximizeRestoreWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMaximizeRestoreWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMaximizeRestoreWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMaximizeRestoreWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMaximizeRestoreWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMaximizeRestoreWindow)
    MergeFrom(*source);
  }
}

void CMsgMaximizeRestoreWindow::MergeFrom(const CMsgMaximizeRestoreWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMaximizeRestoreWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgMaximizeRestoreWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMaximizeRestoreWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMaximizeRestoreWindow::CopyFrom(const CMsgMaximizeRestoreWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMaximizeRestoreWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMaximizeRestoreWindow::IsInitialized() const {
  return true;
}

void CMsgMaximizeRestoreWindow::InternalSwap(CMsgMaximizeRestoreWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMaximizeRestoreWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMinimizeWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMinimizeWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMinimizeWindow::CMsgMinimizeWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMinimizeWindow)
}
CMsgMinimizeWindow::CMsgMinimizeWindow(const CMsgMinimizeWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgMinimizeWindow)
}

void CMsgMinimizeWindow::SharedCtor() {
browser_handle_ = 0u;
}

CMsgMinimizeWindow::~CMsgMinimizeWindow() {
  // @@protoc_insertion_point(destructor:CMsgMinimizeWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMinimizeWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMinimizeWindow::ArenaDtor(void* object) {
  CMsgMinimizeWindow* _this = reinterpret_cast< CMsgMinimizeWindow* >(object);
  (void)_this;
}
void CMsgMinimizeWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMinimizeWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMinimizeWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMinimizeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMinimizeWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMinimizeWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMinimizeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMinimizeWindow)
  return target;
}

size_t CMsgMinimizeWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMinimizeWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMinimizeWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMinimizeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMinimizeWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMinimizeWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMinimizeWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMinimizeWindow)
    MergeFrom(*source);
  }
}

void CMsgMinimizeWindow::MergeFrom(const CMsgMinimizeWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMinimizeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgMinimizeWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMinimizeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMinimizeWindow::CopyFrom(const CMsgMinimizeWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMinimizeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMinimizeWindow::IsInitialized() const {
  return true;
}

void CMsgMinimizeWindow::InternalSwap(CMsgMinimizeWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMinimizeWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgShowBrowserContextMenu_ContextCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowBrowserContextMenu_ContextCommand>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowBrowserContextMenu_ContextCommand::CMsgShowBrowserContextMenu_ContextCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgShowBrowserContextMenu.ContextCommand)
}
CMsgShowBrowserContextMenu_ContextCommand::CMsgShowBrowserContextMenu_ContextCommand(const CMsgShowBrowserContextMenu_ContextCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowBrowserContextMenu.ContextCommand)
}

void CMsgShowBrowserContextMenu_ContextCommand::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

CMsgShowBrowserContextMenu_ContextCommand::~CMsgShowBrowserContextMenu_ContextCommand() {
  // @@protoc_insertion_point(destructor:CMsgShowBrowserContextMenu.ContextCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgShowBrowserContextMenu_ContextCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgShowBrowserContextMenu_ContextCommand::ArenaDtor(void* object) {
  CMsgShowBrowserContextMenu_ContextCommand* _this = reinterpret_cast< CMsgShowBrowserContextMenu_ContextCommand* >(object);
  (void)_this;
}
void CMsgShowBrowserContextMenu_ContextCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgShowBrowserContextMenu_ContextCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgShowBrowserContextMenu_ContextCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowBrowserContextMenu.ContextCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowBrowserContextMenu_ContextCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowBrowserContextMenu.ContextCommand.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgShowBrowserContextMenu_ContextCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowBrowserContextMenu.ContextCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowBrowserContextMenu.ContextCommand.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowBrowserContextMenu.ContextCommand)
  return target;
}

size_t CMsgShowBrowserContextMenu_ContextCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowBrowserContextMenu.ContextCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowBrowserContextMenu_ContextCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgShowBrowserContextMenu.ContextCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowBrowserContextMenu_ContextCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgShowBrowserContextMenu_ContextCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgShowBrowserContextMenu.ContextCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgShowBrowserContextMenu.ContextCommand)
    MergeFrom(*source);
  }
}

void CMsgShowBrowserContextMenu_ContextCommand::MergeFrom(const CMsgShowBrowserContextMenu_ContextCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowBrowserContextMenu.ContextCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgShowBrowserContextMenu_ContextCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgShowBrowserContextMenu.ContextCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowBrowserContextMenu_ContextCommand::CopyFrom(const CMsgShowBrowserContextMenu_ContextCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowBrowserContextMenu.ContextCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowBrowserContextMenu_ContextCommand::IsInitialized() const {
  return true;
}

void CMsgShowBrowserContextMenu_ContextCommand::InternalSwap(CMsgShowBrowserContextMenu_ContextCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowBrowserContextMenu_ContextCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgShowBrowserContextMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowBrowserContextMenu>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_page_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coord_x(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_coord_y(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_linurl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unfiltered_linurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selection_text(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_misspelled_word(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_edit_state_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgShowBrowserContextMenu::CMsgShowBrowserContextMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  custom_commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgShowBrowserContextMenu)
}
CMsgShowBrowserContextMenu::CMsgShowBrowserContextMenu(const CMsgShowBrowserContextMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_commands_(from.custom_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page_url()) {
    page_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_url(), 
      GetArena());
  }
  linurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_linurl()) {
    linurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_linurl(), 
      GetArena());
  }
  unfiltered_linurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unfiltered_linurl()) {
    unfiltered_linurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unfiltered_linurl(), 
      GetArena());
  }
  selection_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_selection_text()) {
    selection_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_selection_text(), 
      GetArena());
  }
  misspelled_word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_misspelled_word()) {
    misspelled_word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_misspelled_word(), 
      GetArena());
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&edit_state_flags_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(edit_state_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowBrowserContextMenu)
}

void CMsgShowBrowserContextMenu::SharedCtor() {
page_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
linurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unfiltered_linurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
selection_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
misspelled_word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edit_state_flags_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(edit_state_flags_));
}

CMsgShowBrowserContextMenu::~CMsgShowBrowserContextMenu() {
  // @@protoc_insertion_point(destructor:CMsgShowBrowserContextMenu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgShowBrowserContextMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  page_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unfiltered_linurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selection_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  misspelled_word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgShowBrowserContextMenu::ArenaDtor(void* object) {
  CMsgShowBrowserContextMenu* _this = reinterpret_cast< CMsgShowBrowserContextMenu* >(object);
  (void)_this;
}
void CMsgShowBrowserContextMenu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgShowBrowserContextMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgShowBrowserContextMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowBrowserContextMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      page_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      linurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      unfiltered_linurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      selection_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      misspelled_word_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coord_x_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(coord_x_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&coord_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edit_state_flags_) -
        reinterpret_cast<char*>(&coord_y_)) + sizeof(edit_state_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowBrowserContextMenu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgShowBrowserContextMenu.ContextCommand custom_commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 type_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type_flags(&has_bits);
          type_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string page_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_page_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowBrowserContextMenu.page_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 coord_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_coord_x(&has_bits);
          coord_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 coord_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_coord_y(&has_bits);
          coord_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string linurl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_linurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowBrowserContextMenu.linurl");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unfiltered_linurl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_unfiltered_linurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowBrowserContextMenu.unfiltered_linurl");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string selection_text = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_selection_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowBrowserContextMenu.selection_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string misspelled_word = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_misspelled_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgShowBrowserContextMenu.misspelled_word");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 edit_state_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_edit_state_flags(&has_bits);
          edit_state_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgShowBrowserContextMenu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowBrowserContextMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // repeated .CMsgShowBrowserContextMenu.ContextCommand custom_commands = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_custom_commands(i), target, stream);
  }

  // optional uint32 type_flags = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type_flags(), target);
  }

  // optional string page_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page_url().data(), static_cast<int>(this->_internal_page_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowBrowserContextMenu.page_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_url(), target);
  }

  // optional int32 coord_x = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_coord_x(), target);
  }

  // optional int32 coord_y = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_coord_y(), target);
  }

  // optional string linurl = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_linurl().data(), static_cast<int>(this->_internal_linurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowBrowserContextMenu.linurl");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_linurl(), target);
  }

  // optional string unfiltered_linurl = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unfiltered_linurl().data(), static_cast<int>(this->_internal_unfiltered_linurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowBrowserContextMenu.unfiltered_linurl");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_unfiltered_linurl(), target);
  }

  // optional string selection_text = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selection_text().data(), static_cast<int>(this->_internal_selection_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowBrowserContextMenu.selection_text");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_selection_text(), target);
  }

  // optional string misspelled_word = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_misspelled_word().data(), static_cast<int>(this->_internal_misspelled_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgShowBrowserContextMenu.misspelled_word");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_misspelled_word(), target);
  }

  // optional uint32 edit_state_flags = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_edit_state_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowBrowserContextMenu)
  return target;
}

size_t CMsgShowBrowserContextMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowBrowserContextMenu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowBrowserContextMenu.ContextCommand custom_commands = 2;
  total_size += 1UL * this->_internal_custom_commands_size();
  for (const auto& msg : this->custom_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string page_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_url());
    }

    // optional string linurl = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linurl());
    }

    // optional string unfiltered_linurl = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unfiltered_linurl());
    }

    // optional string selection_text = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selection_text());
    }

    // optional string misspelled_word = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_misspelled_word());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 type_flags = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type_flags());
    }

    // optional int32 coord_x = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_coord_x());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 coord_y = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_coord_y());
    }

    // optional uint32 edit_state_flags = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_edit_state_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowBrowserContextMenu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgShowBrowserContextMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowBrowserContextMenu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgShowBrowserContextMenu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgShowBrowserContextMenu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgShowBrowserContextMenu)
    MergeFrom(*source);
  }
}

void CMsgShowBrowserContextMenu::MergeFrom(const CMsgShowBrowserContextMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowBrowserContextMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_commands_.MergeFrom(from.custom_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_page_url(from._internal_page_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_linurl(from._internal_linurl());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_unfiltered_linurl(from._internal_unfiltered_linurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_selection_text(from._internal_selection_text());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_misspelled_word(from._internal_misspelled_word());
    }
    if (cached_has_bits & 0x00000020u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_flags_ = from.type_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      coord_x_ = from.coord_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      coord_y_ = from.coord_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      edit_state_flags_ = from.edit_state_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgShowBrowserContextMenu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgShowBrowserContextMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowBrowserContextMenu::CopyFrom(const CMsgShowBrowserContextMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowBrowserContextMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowBrowserContextMenu::IsInitialized() const {
  return true;
}

void CMsgShowBrowserContextMenu::InternalSwap(CMsgShowBrowserContextMenu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_commands_.InternalSwap(&other->custom_commands_);
  page_url_.Swap(&other->page_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  linurl_.Swap(&other->linurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unfiltered_linurl_.Swap(&other->unfiltered_linurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selection_text_.Swap(&other->selection_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  misspelled_word_.Swap(&other->misspelled_word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowBrowserContextMenu, edit_state_flags_)
      + sizeof(CMsgShowBrowserContextMenu::edit_state_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowBrowserContextMenu, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowBrowserContextMenu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHandleContextMenuCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHandleContextMenuCommand>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHandleContextMenuCommand::CMsgHandleContextMenuCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHandleContextMenuCommand)
}
CMsgHandleContextMenuCommand::CMsgHandleContextMenuCommand(const CMsgHandleContextMenuCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgHandleContextMenuCommand)
}

void CMsgHandleContextMenuCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(command_id_));
}

CMsgHandleContextMenuCommand::~CMsgHandleContextMenuCommand() {
  // @@protoc_insertion_point(destructor:CMsgHandleContextMenuCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHandleContextMenuCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHandleContextMenuCommand::ArenaDtor(void* object) {
  CMsgHandleContextMenuCommand* _this = reinterpret_cast< CMsgHandleContextMenuCommand* >(object);
  (void)_this;
}
void CMsgHandleContextMenuCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHandleContextMenuCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHandleContextMenuCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHandleContextMenuCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_id_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(command_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHandleContextMenuCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_id(&has_bits);
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHandleContextMenuCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHandleContextMenuCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 command_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_command_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHandleContextMenuCommand)
  return target;
}

size_t CMsgHandleContextMenuCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHandleContextMenuCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 command_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_command_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHandleContextMenuCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHandleContextMenuCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHandleContextMenuCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHandleContextMenuCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHandleContextMenuCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHandleContextMenuCommand)
    MergeFrom(*source);
  }
}

void CMsgHandleContextMenuCommand::MergeFrom(const CMsgHandleContextMenuCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHandleContextMenuCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      command_id_ = from.command_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHandleContextMenuCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHandleContextMenuCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHandleContextMenuCommand::CopyFrom(const CMsgHandleContextMenuCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHandleContextMenuCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHandleContextMenuCommand::IsInitialized() const {
  return true;
}

void CMsgHandleContextMenuCommand::InternalSwap(CMsgHandleContextMenuCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHandleContextMenuCommand, command_id_)
      + sizeof(CMsgHandleContextMenuCommand::command_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgHandleContextMenuCommand, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHandleContextMenuCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgTouchGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTouchGesture>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tap_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pinch_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgTouchGesture::CMsgTouchGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTouchGesture)
}
CMsgTouchGesture::CMsgTouchGesture(const CMsgTouchGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pinch_scale_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pinch_scale_));
  // @@protoc_insertion_point(copy_constructor:CMsgTouchGesture)
}

void CMsgTouchGesture::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pinch_scale_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pinch_scale_));
}

CMsgTouchGesture::~CMsgTouchGesture() {
  // @@protoc_insertion_point(destructor:CMsgTouchGesture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgTouchGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgTouchGesture::ArenaDtor(void* object) {
  CMsgTouchGesture* _this = reinterpret_cast< CMsgTouchGesture* >(object);
  (void)_this;
}
void CMsgTouchGesture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTouchGesture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTouchGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTouchGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  pinch_scale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTouchGesture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gesture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gesture(&has_bits);
          gesture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 tap_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tap_count(&has_bits);
          tap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pinch_scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_pinch_scale(&has_bits);
          pinch_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgTouchGesture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTouchGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 gesture = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gesture(), target);
  }

  // optional double x = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_x(), target);
  }

  // optional double y = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_y(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_height(), target);
  }

  // optional uint32 tap_count = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tap_count(), target);
  }

  // optional double pinch_scale = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_pinch_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTouchGesture)
  return target;
}

size_t CMsgTouchGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTouchGesture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional double x = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double y = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 gesture = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesture());
    }

    // optional uint32 tap_count = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tap_count());
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double pinch_scale = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgTouchGesture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgTouchGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTouchGesture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgTouchGesture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgTouchGesture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgTouchGesture)
    MergeFrom(*source);
  }
}

void CMsgTouchGesture::MergeFrom(const CMsgTouchGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTouchGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      gesture_ = from.gesture_;
    }
    if (cached_has_bits & 0x00000020u) {
      tap_count_ = from.tap_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_pinch_scale(from._internal_pinch_scale());
  }
}

void CMsgTouchGesture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgTouchGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTouchGesture::CopyFrom(const CMsgTouchGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTouchGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTouchGesture::IsInitialized() const {
  return true;
}

void CMsgTouchGesture::InternalSwap(CMsgTouchGesture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTouchGesture, pinch_scale_)
      + sizeof(CMsgTouchGesture::pinch_scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgTouchGesture, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTouchGesture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetTouchGesturesToCancel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetTouchGesturesToCancel>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetTouchGesturesToCancel::CMsgSetTouchGesturesToCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gestures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetTouchGesturesToCancel)
}
CMsgSetTouchGesturesToCancel::CMsgSetTouchGesturesToCancel(const CMsgSetTouchGesturesToCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gestures_(from.gestures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetTouchGesturesToCancel)
}

void CMsgSetTouchGesturesToCancel::SharedCtor() {
browser_handle_ = 0u;
}

CMsgSetTouchGesturesToCancel::~CMsgSetTouchGesturesToCancel() {
  // @@protoc_insertion_point(destructor:CMsgSetTouchGesturesToCancel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetTouchGesturesToCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetTouchGesturesToCancel::ArenaDtor(void* object) {
  CMsgSetTouchGesturesToCancel* _this = reinterpret_cast< CMsgSetTouchGesturesToCancel* >(object);
  (void)_this;
}
void CMsgSetTouchGesturesToCancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetTouchGesturesToCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetTouchGesturesToCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetTouchGesturesToCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gestures_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetTouchGesturesToCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 gestures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gestures(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gestures(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetTouchGesturesToCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetTouchGesturesToCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // repeated uint32 gestures = 2;
  for (int i = 0, n = this->_internal_gestures_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gestures(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetTouchGesturesToCancel)
  return target;
}

size_t CMsgSetTouchGesturesToCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetTouchGesturesToCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 gestures = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gestures_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gestures_size());
    total_size += data_size;
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetTouchGesturesToCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetTouchGesturesToCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetTouchGesturesToCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetTouchGesturesToCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetTouchGesturesToCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetTouchGesturesToCancel)
    MergeFrom(*source);
  }
}

void CMsgSetTouchGesturesToCancel::MergeFrom(const CMsgSetTouchGesturesToCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetTouchGesturesToCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gestures_.MergeFrom(from.gestures_);
  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgSetTouchGesturesToCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetTouchGesturesToCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetTouchGesturesToCancel::CopyFrom(const CMsgSetTouchGesturesToCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetTouchGesturesToCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetTouchGesturesToCancel::IsInitialized() const {
  return true;
}

void CMsgSetTouchGesturesToCancel::InternalSwap(CMsgSetTouchGesturesToCancel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gestures_.InternalSwap(&other->gestures_);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetTouchGesturesToCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgImeSetComposition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgImeSetComposition>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgImeSetComposition::CMsgImeSetComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgImeSetComposition)
}
CMsgImeSetComposition::CMsgImeSetComposition(const CMsgImeSetComposition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgImeSetComposition)
}

void CMsgImeSetComposition::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgImeSetComposition::~CMsgImeSetComposition() {
  // @@protoc_insertion_point(destructor:CMsgImeSetComposition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgImeSetComposition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgImeSetComposition::ArenaDtor(void* object) {
  CMsgImeSetComposition* _this = reinterpret_cast< CMsgImeSetComposition* >(object);
  (void)_this;
}
void CMsgImeSetComposition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgImeSetComposition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgImeSetComposition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgImeSetComposition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgImeSetComposition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgImeSetComposition.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgImeSetComposition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgImeSetComposition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgImeSetComposition.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgImeSetComposition)
  return target;
}

size_t CMsgImeSetComposition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgImeSetComposition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeSetComposition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgImeSetComposition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeSetComposition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgImeSetComposition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgImeSetComposition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgImeSetComposition)
    MergeFrom(*source);
  }
}

void CMsgImeSetComposition::MergeFrom(const CMsgImeSetComposition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgImeSetComposition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgImeSetComposition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgImeSetComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeSetComposition::CopyFrom(const CMsgImeSetComposition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgImeSetComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeSetComposition::IsInitialized() const {
  return true;
}

void CMsgImeSetComposition::InternalSwap(CMsgImeSetComposition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgImeSetComposition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgImeCommitText::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgImeCommitText>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgImeCommitText::CMsgImeCommitText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgImeCommitText)
}
CMsgImeCommitText::CMsgImeCommitText(const CMsgImeCommitText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgImeCommitText)
}

void CMsgImeCommitText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgImeCommitText::~CMsgImeCommitText() {
  // @@protoc_insertion_point(destructor:CMsgImeCommitText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgImeCommitText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgImeCommitText::ArenaDtor(void* object) {
  CMsgImeCommitText* _this = reinterpret_cast< CMsgImeCommitText* >(object);
  (void)_this;
}
void CMsgImeCommitText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgImeCommitText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgImeCommitText::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgImeCommitText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgImeCommitText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgImeCommitText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgImeCommitText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgImeCommitText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgImeCommitText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgImeCommitText)
  return target;
}

size_t CMsgImeCommitText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgImeCommitText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeCommitText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgImeCommitText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeCommitText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgImeCommitText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgImeCommitText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgImeCommitText)
    MergeFrom(*source);
  }
}

void CMsgImeCommitText::MergeFrom(const CMsgImeCommitText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgImeCommitText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgImeCommitText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgImeCommitText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeCommitText::CopyFrom(const CMsgImeCommitText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgImeCommitText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeCommitText::IsInitialized() const {
  return true;
}

void CMsgImeCommitText::InternalSwap(CMsgImeCommitText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgImeCommitText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgImeCancelComposition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgImeCancelComposition>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgImeCancelComposition::CMsgImeCancelComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgImeCancelComposition)
}
CMsgImeCancelComposition::CMsgImeCancelComposition(const CMsgImeCancelComposition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgImeCancelComposition)
}

void CMsgImeCancelComposition::SharedCtor() {
browser_handle_ = 0u;
}

CMsgImeCancelComposition::~CMsgImeCancelComposition() {
  // @@protoc_insertion_point(destructor:CMsgImeCancelComposition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgImeCancelComposition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgImeCancelComposition::ArenaDtor(void* object) {
  CMsgImeCancelComposition* _this = reinterpret_cast< CMsgImeCancelComposition* >(object);
  (void)_this;
}
void CMsgImeCancelComposition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgImeCancelComposition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgImeCancelComposition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgImeCancelComposition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgImeCancelComposition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgImeCancelComposition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgImeCancelComposition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgImeCancelComposition)
  return target;
}

size_t CMsgImeCancelComposition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgImeCancelComposition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeCancelComposition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgImeCancelComposition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeCancelComposition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgImeCancelComposition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgImeCancelComposition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgImeCancelComposition)
    MergeFrom(*source);
  }
}

void CMsgImeCancelComposition::MergeFrom(const CMsgImeCancelComposition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgImeCancelComposition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgImeCancelComposition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgImeCancelComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeCancelComposition::CopyFrom(const CMsgImeCancelComposition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgImeCancelComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeCancelComposition::IsInitialized() const {
  return true;
}

void CMsgImeCancelComposition::InternalSwap(CMsgImeCancelComposition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgImeCancelComposition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgImeCompositionRangeChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgImeCompositionRangeChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgImeCompositionRangeChanged::CMsgImeCompositionRangeChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgImeCompositionRangeChanged)
}
CMsgImeCompositionRangeChanged::CMsgImeCompositionRangeChanged(const CMsgImeCompositionRangeChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgImeCompositionRangeChanged)
}

void CMsgImeCompositionRangeChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgImeCompositionRangeChanged::~CMsgImeCompositionRangeChanged() {
  // @@protoc_insertion_point(destructor:CMsgImeCompositionRangeChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgImeCompositionRangeChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgImeCompositionRangeChanged::ArenaDtor(void* object) {
  CMsgImeCompositionRangeChanged* _this = reinterpret_cast< CMsgImeCompositionRangeChanged* >(object);
  (void)_this;
}
void CMsgImeCompositionRangeChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgImeCompositionRangeChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgImeCompositionRangeChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgImeCompositionRangeChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgImeCompositionRangeChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgImeCompositionRangeChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgImeCompositionRangeChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgImeCompositionRangeChanged)
  return target;
}

size_t CMsgImeCompositionRangeChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgImeCompositionRangeChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeCompositionRangeChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgImeCompositionRangeChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeCompositionRangeChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgImeCompositionRangeChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgImeCompositionRangeChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgImeCompositionRangeChanged)
    MergeFrom(*source);
  }
}

void CMsgImeCompositionRangeChanged::MergeFrom(const CMsgImeCompositionRangeChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgImeCompositionRangeChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgImeCompositionRangeChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgImeCompositionRangeChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeCompositionRangeChanged::CopyFrom(const CMsgImeCompositionRangeChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgImeCompositionRangeChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeCompositionRangeChanged::IsInitialized() const {
  return true;
}

void CMsgImeCompositionRangeChanged::InternalSwap(CMsgImeCompositionRangeChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgImeCompositionRangeChanged, y_)
      + sizeof(CMsgImeCompositionRangeChanged::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgImeCompositionRangeChanged, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgImeCompositionRangeChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgInspectElement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInspectElement>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgInspectElement::CMsgInspectElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgInspectElement)
}
CMsgInspectElement::CMsgInspectElement(const CMsgInspectElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgInspectElement)
}

void CMsgInspectElement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgInspectElement::~CMsgInspectElement() {
  // @@protoc_insertion_point(destructor:CMsgInspectElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgInspectElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgInspectElement::ArenaDtor(void* object) {
  CMsgInspectElement* _this = reinterpret_cast< CMsgInspectElement* >(object);
  (void)_this;
}
void CMsgInspectElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInspectElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInspectElement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInspectElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInspectElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInspectElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInspectElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInspectElement)
  return target;
}

size_t CMsgInspectElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInspectElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInspectElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgInspectElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInspectElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgInspectElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgInspectElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgInspectElement)
    MergeFrom(*source);
  }
}

void CMsgInspectElement::MergeFrom(const CMsgInspectElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInspectElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInspectElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgInspectElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInspectElement::CopyFrom(const CMsgInspectElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInspectElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInspectElement::IsInitialized() const {
  return true;
}

void CMsgInspectElement::InternalSwap(CMsgInspectElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInspectElement, y_)
      + sizeof(CMsgInspectElement::y_)
      - PROTOBUF_FIELD_OFFSET(CMsgInspectElement, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInspectElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDisableF5::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDisableF5>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDisableF5::CMsgDisableF5(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDisableF5)
}
CMsgDisableF5::CMsgDisableF5(const CMsgDisableF5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(disable_));
  // @@protoc_insertion_point(copy_constructor:CMsgDisableF5)
}

void CMsgDisableF5::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(disable_));
}

CMsgDisableF5::~CMsgDisableF5() {
  // @@protoc_insertion_point(destructor:CMsgDisableF5)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDisableF5::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDisableF5::ArenaDtor(void* object) {
  CMsgDisableF5* _this = reinterpret_cast< CMsgDisableF5* >(object);
  (void)_this;
}
void CMsgDisableF5::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDisableF5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDisableF5::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDisableF5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(disable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDisableF5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disable(&has_bits);
          disable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDisableF5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDisableF5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool disable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDisableF5)
  return target;
}

size_t CMsgDisableF5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDisableF5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool disable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDisableF5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDisableF5)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDisableF5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDisableF5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDisableF5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDisableF5)
    MergeFrom(*source);
  }
}

void CMsgDisableF5::MergeFrom(const CMsgDisableF5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDisableF5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      disable_ = from.disable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDisableF5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDisableF5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDisableF5::CopyFrom(const CMsgDisableF5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDisableF5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDisableF5::IsInitialized() const {
  return true;
}

void CMsgDisableF5::InternalSwap(CMsgDisableF5* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDisableF5, disable_)
      + sizeof(CMsgDisableF5::disable_)
      - PROTOBUF_FIELD_OFFSET(CMsgDisableF5, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDisableF5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgStartDownload::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartDownload>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgStartDownload::CMsgStartDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgStartDownload)
}
CMsgStartDownload::CMsgStartDownload(const CMsgStartDownload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgStartDownload)
}

void CMsgStartDownload::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgStartDownload::~CMsgStartDownload() {
  // @@protoc_insertion_point(destructor:CMsgStartDownload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgStartDownload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartDownload::ArenaDtor(void* object) {
  CMsgStartDownload* _this = reinterpret_cast< CMsgStartDownload* >(object);
  (void)_this;
}
void CMsgStartDownload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStartDownload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStartDownload::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartDownload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStartDownload.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStartDownload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartDownload.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartDownload)
  return target;
}

size_t CMsgStartDownload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartDownload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartDownload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgStartDownload)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartDownload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgStartDownload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgStartDownload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgStartDownload)
    MergeFrom(*source);
  }
}

void CMsgStartDownload::MergeFrom(const CMsgStartDownload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartDownload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartDownload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgStartDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartDownload::CopyFrom(const CMsgStartDownload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartDownload::IsInitialized() const {
  return true;
}

void CMsgStartDownload::InternalSwap(CMsgStartDownload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartDownload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetTopWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetTopWindow>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetTopWindow::CMsgSetTopWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetTopWindow)
}
CMsgSetTopWindow::CMsgSetTopWindow(const CMsgSetTopWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetTopWindow)
}

void CMsgSetTopWindow::SharedCtor() {
browser_handle_ = 0u;
}

CMsgSetTopWindow::~CMsgSetTopWindow() {
  // @@protoc_insertion_point(destructor:CMsgSetTopWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetTopWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetTopWindow::ArenaDtor(void* object) {
  CMsgSetTopWindow* _this = reinterpret_cast< CMsgSetTopWindow* >(object);
  (void)_this;
}
void CMsgSetTopWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetTopWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetTopWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetTopWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetTopWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetTopWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetTopWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetTopWindow)
  return target;
}

size_t CMsgSetTopWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetTopWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetTopWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetTopWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetTopWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetTopWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetTopWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetTopWindow)
    MergeFrom(*source);
  }
}

void CMsgSetTopWindow::MergeFrom(const CMsgSetTopWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetTopWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgSetTopWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetTopWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetTopWindow::CopyFrom(const CMsgSetTopWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetTopWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetTopWindow::IsInitialized() const {
  return true;
}

void CMsgSetTopWindow::InternalSwap(CMsgSetTopWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetTopWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserViewPostMessageToParentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserViewPostMessageToParentRequest>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requesting_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgBrowserViewPostMessageToParentRequest::CMsgBrowserViewPostMessageToParentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserViewPostMessageToParentRequest)
}
CMsgBrowserViewPostMessageToParentRequest::CMsgBrowserViewPostMessageToParentRequest(const CMsgBrowserViewPostMessageToParentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_args()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  requesting_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_url()) {
    requesting_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requesting_url(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserViewPostMessageToParentRequest)
}

void CMsgBrowserViewPostMessageToParentRequest::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
requesting_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgBrowserViewPostMessageToParentRequest::~CMsgBrowserViewPostMessageToParentRequest() {
  // @@protoc_insertion_point(destructor:CMsgBrowserViewPostMessageToParentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserViewPostMessageToParentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserViewPostMessageToParentRequest::ArenaDtor(void* object) {
  CMsgBrowserViewPostMessageToParentRequest* _this = reinterpret_cast< CMsgBrowserViewPostMessageToParentRequest* >(object);
  (void)_this;
}
void CMsgBrowserViewPostMessageToParentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserViewPostMessageToParentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserViewPostMessageToParentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserViewPostMessageToParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      args_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      requesting_url_.ClearNonDefaultToEmpty();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserViewPostMessageToParentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserViewPostMessageToParentRequest.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserViewPostMessageToParentRequest.args");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_requesting_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBrowserViewPostMessageToParentRequest.requesting_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserViewPostMessageToParentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserViewPostMessageToParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserViewPostMessageToParentRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional string args = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserViewPostMessageToParentRequest.args");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_args(), target);
  }

  // optional string requesting_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_url().data(), static_cast<int>(this->_internal_requesting_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBrowserViewPostMessageToParentRequest.requesting_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_requesting_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserViewPostMessageToParentRequest)
  return target;
}

size_t CMsgBrowserViewPostMessageToParentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserViewPostMessageToParentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string args = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_args());
    }

    // optional string requesting_url = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserViewPostMessageToParentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserViewPostMessageToParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserViewPostMessageToParentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserViewPostMessageToParentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserViewPostMessageToParentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserViewPostMessageToParentRequest)
    MergeFrom(*source);
  }
}

void CMsgBrowserViewPostMessageToParentRequest::MergeFrom(const CMsgBrowserViewPostMessageToParentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserViewPostMessageToParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_args(from._internal_args());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_requesting_url(from._internal_requesting_url());
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserViewPostMessageToParentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserViewPostMessageToParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserViewPostMessageToParentRequest::CopyFrom(const CMsgBrowserViewPostMessageToParentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserViewPostMessageToParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserViewPostMessageToParentRequest::IsInitialized() const {
  return true;
}

void CMsgBrowserViewPostMessageToParentRequest::InternalSwap(CMsgBrowserViewPostMessageToParentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_url_.Swap(&other->requesting_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserViewPostMessageToParentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBlockedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBlockedRequest>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBlockedRequest::CMsgBlockedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBlockedRequest)
}
CMsgBlockedRequest::CMsgBlockedRequest(const CMsgBlockedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgBlockedRequest)
}

void CMsgBlockedRequest::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgBlockedRequest::~CMsgBlockedRequest() {
  // @@protoc_insertion_point(destructor:CMsgBlockedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBlockedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBlockedRequest::ArenaDtor(void* object) {
  CMsgBlockedRequest* _this = reinterpret_cast< CMsgBlockedRequest* >(object);
  (void)_this;
}
void CMsgBlockedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBlockedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBlockedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBlockedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBlockedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBlockedRequest.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBlockedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBlockedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBlockedRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBlockedRequest)
  return target;
}

size_t CMsgBlockedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBlockedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBlockedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBlockedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBlockedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBlockedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBlockedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBlockedRequest)
    MergeFrom(*source);
  }
}

void CMsgBlockedRequest::MergeFrom(const CMsgBlockedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBlockedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBlockedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBlockedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBlockedRequest::CopyFrom(const CMsgBlockedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBlockedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBlockedRequest::IsInitialized() const {
  return true;
}

void CMsgBlockedRequest::InternalSwap(CMsgBlockedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBlockedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBrowserFocusChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBrowserFocusChanged>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_focused(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBrowserFocusChanged::CMsgBrowserFocusChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBrowserFocusChanged)
}
CMsgBrowserFocusChanged::CMsgBrowserFocusChanged(const CMsgBrowserFocusChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&focused_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(focused_));
  // @@protoc_insertion_point(copy_constructor:CMsgBrowserFocusChanged)
}

void CMsgBrowserFocusChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&focused_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(focused_));
}

CMsgBrowserFocusChanged::~CMsgBrowserFocusChanged() {
  // @@protoc_insertion_point(destructor:CMsgBrowserFocusChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBrowserFocusChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBrowserFocusChanged::ArenaDtor(void* object) {
  CMsgBrowserFocusChanged* _this = reinterpret_cast< CMsgBrowserFocusChanged* >(object);
  (void)_this;
}
void CMsgBrowserFocusChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBrowserFocusChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBrowserFocusChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBrowserFocusChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focused_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(focused_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBrowserFocusChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool focused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_focused(&has_bits);
          focused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBrowserFocusChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrowserFocusChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool focused = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_focused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrowserFocusChanged)
  return target;
}

size_t CMsgBrowserFocusChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBrowserFocusChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool focused = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserFocusChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBrowserFocusChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserFocusChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBrowserFocusChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBrowserFocusChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBrowserFocusChanged)
    MergeFrom(*source);
  }
}

void CMsgBrowserFocusChanged::MergeFrom(const CMsgBrowserFocusChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBrowserFocusChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      focused_ = from.focused_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserFocusChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBrowserFocusChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserFocusChanged::CopyFrom(const CMsgBrowserFocusChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBrowserFocusChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserFocusChanged::IsInitialized() const {
  return true;
}

void CMsgBrowserFocusChanged::InternalSwap(CMsgBrowserFocusChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBrowserFocusChanged, focused_)
      + sizeof(CMsgBrowserFocusChanged::focused_)
      - PROTOBUF_FIELD_OFFSET(CMsgBrowserFocusChanged, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBrowserFocusChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetProtocolBlockList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetProtocolBlockList>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetProtocolBlockList::CMsgSetProtocolBlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetProtocolBlockList)
}
CMsgSetProtocolBlockList::CMsgSetProtocolBlockList(const CMsgSetProtocolBlockList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_list()) {
    list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_list(), 
      GetArena());
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetProtocolBlockList)
}

void CMsgSetProtocolBlockList::SharedCtor() {
list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
browser_handle_ = 0u;
}

CMsgSetProtocolBlockList::~CMsgSetProtocolBlockList() {
  // @@protoc_insertion_point(destructor:CMsgSetProtocolBlockList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetProtocolBlockList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetProtocolBlockList::ArenaDtor(void* object) {
  CMsgSetProtocolBlockList* _this = reinterpret_cast< CMsgSetProtocolBlockList* >(object);
  (void)_this;
}
void CMsgSetProtocolBlockList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetProtocolBlockList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetProtocolBlockList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetProtocolBlockList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    list_.ClearNonDefaultToEmpty();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetProtocolBlockList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSetProtocolBlockList.list");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetProtocolBlockList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetProtocolBlockList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional string list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_list().data(), static_cast<int>(this->_internal_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetProtocolBlockList.list");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetProtocolBlockList)
  return target;
}

size_t CMsgSetProtocolBlockList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetProtocolBlockList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string list = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_list());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetProtocolBlockList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetProtocolBlockList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetProtocolBlockList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetProtocolBlockList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetProtocolBlockList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetProtocolBlockList)
    MergeFrom(*source);
  }
}

void CMsgSetProtocolBlockList::MergeFrom(const CMsgSetProtocolBlockList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetProtocolBlockList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_list(from._internal_list());
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetProtocolBlockList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetProtocolBlockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetProtocolBlockList::CopyFrom(const CMsgSetProtocolBlockList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetProtocolBlockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetProtocolBlockList::IsInitialized() const {
  return true;
}

void CMsgSetProtocolBlockList::InternalSwap(CMsgSetProtocolBlockList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  list_.Swap(&other->list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetProtocolBlockList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetForceDeviceScaleFactors::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetForceDeviceScaleFactors>()._has_bits_);
  static void set_has_dpi_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_browser_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetForceDeviceScaleFactors::CMsgSetForceDeviceScaleFactors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetForceDeviceScaleFactors)
}
CMsgSetForceDeviceScaleFactors::CMsgSetForceDeviceScaleFactors(const CMsgSetForceDeviceScaleFactors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dpi_scale_, &from.dpi_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_scale_) -
    reinterpret_cast<char*>(&dpi_scale_)) + sizeof(browser_scale_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetForceDeviceScaleFactors)
}

void CMsgSetForceDeviceScaleFactors::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dpi_scale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&browser_scale_) -
    reinterpret_cast<char*>(&dpi_scale_)) + sizeof(browser_scale_));
}

CMsgSetForceDeviceScaleFactors::~CMsgSetForceDeviceScaleFactors() {
  // @@protoc_insertion_point(destructor:CMsgSetForceDeviceScaleFactors)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetForceDeviceScaleFactors::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetForceDeviceScaleFactors::ArenaDtor(void* object) {
  CMsgSetForceDeviceScaleFactors* _this = reinterpret_cast< CMsgSetForceDeviceScaleFactors* >(object);
  (void)_this;
}
void CMsgSetForceDeviceScaleFactors::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetForceDeviceScaleFactors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetForceDeviceScaleFactors::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetForceDeviceScaleFactors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dpi_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_scale_) -
        reinterpret_cast<char*>(&dpi_scale_)) + sizeof(browser_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetForceDeviceScaleFactors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double dpi_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_dpi_scale(&has_bits);
          dpi_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double browser_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_browser_scale(&has_bits);
          browser_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetForceDeviceScaleFactors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetForceDeviceScaleFactors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dpi_scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dpi_scale(), target);
  }

  // optional double browser_scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_browser_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetForceDeviceScaleFactors)
  return target;
}

size_t CMsgSetForceDeviceScaleFactors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetForceDeviceScaleFactors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double dpi_scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double browser_scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetForceDeviceScaleFactors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetForceDeviceScaleFactors)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetForceDeviceScaleFactors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetForceDeviceScaleFactors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetForceDeviceScaleFactors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetForceDeviceScaleFactors)
    MergeFrom(*source);
  }
}

void CMsgSetForceDeviceScaleFactors::MergeFrom(const CMsgSetForceDeviceScaleFactors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetForceDeviceScaleFactors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dpi_scale_ = from.dpi_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_scale_ = from.browser_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetForceDeviceScaleFactors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetForceDeviceScaleFactors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetForceDeviceScaleFactors::CopyFrom(const CMsgSetForceDeviceScaleFactors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetForceDeviceScaleFactors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetForceDeviceScaleFactors::IsInitialized() const {
  return true;
}

void CMsgSetForceDeviceScaleFactors::InternalSwap(CMsgSetForceDeviceScaleFactors* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetForceDeviceScaleFactors, browser_scale_)
      + sizeof(CMsgSetForceDeviceScaleFactors::browser_scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetForceDeviceScaleFactors, dpi_scale_)>(
          reinterpret_cast<char*>(&dpi_scale_),
          reinterpret_cast<char*>(&other->dpi_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetForceDeviceScaleFactors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetUIMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetUIMode>()._has_bits_);
  static void set_has_ui_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSetUIMode::CMsgSetUIMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetUIMode)
}
CMsgSetUIMode::CMsgSetUIMode(const CMsgSetUIMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ui_mode_ = from.ui_mode_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetUIMode)
}

void CMsgSetUIMode::SharedCtor() {
ui_mode_ = 0;
}

CMsgSetUIMode::~CMsgSetUIMode() {
  // @@protoc_insertion_point(destructor:CMsgSetUIMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetUIMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetUIMode::ArenaDtor(void* object) {
  CMsgSetUIMode* _this = reinterpret_cast< CMsgSetUIMode* >(object);
  (void)_this;
}
void CMsgSetUIMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetUIMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetUIMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetUIMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ui_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetUIMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ui_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ui_mode(&has_bits);
          ui_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetUIMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetUIMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ui_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ui_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetUIMode)
  return target;
}

size_t CMsgSetUIMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetUIMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ui_mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ui_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetUIMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetUIMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetUIMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetUIMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetUIMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetUIMode)
    MergeFrom(*source);
  }
}

void CMsgSetUIMode::MergeFrom(const CMsgSetUIMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetUIMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ui_mode()) {
    _internal_set_ui_mode(from._internal_ui_mode());
  }
}

void CMsgSetUIMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetUIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetUIMode::CopyFrom(const CMsgSetUIMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetUIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetUIMode::IsInitialized() const {
  return true;
}

void CMsgSetUIMode::InternalSwap(CMsgSetUIMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ui_mode_, other->ui_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetUIMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPopupCreated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPopupCreated>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPopupCreated::CMsgPopupCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPopupCreated)
}
CMsgPopupCreated::CMsgPopupCreated(const CMsgPopupCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:CMsgPopupCreated)
}

void CMsgPopupCreated::SharedCtor() {
browser_handle_ = 0u;
}

CMsgPopupCreated::~CMsgPopupCreated() {
  // @@protoc_insertion_point(destructor:CMsgPopupCreated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPopupCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPopupCreated::ArenaDtor(void* object) {
  CMsgPopupCreated* _this = reinterpret_cast< CMsgPopupCreated* >(object);
  (void)_this;
}
void CMsgPopupCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPopupCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPopupCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPopupCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPopupCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPopupCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopupCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopupCreated)
  return target;
}

size_t CMsgPopupCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPopupCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_browser_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPopupCreated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPopupCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupCreated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPopupCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPopupCreated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPopupCreated)
    MergeFrom(*source);
  }
}

void CMsgPopupCreated::MergeFrom(const CMsgPopupCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPopupCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_browser_handle()) {
    _internal_set_browser_handle(from._internal_browser_handle());
  }
}

void CMsgPopupCreated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPopupCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupCreated::CopyFrom(const CMsgPopupCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPopupCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupCreated::IsInitialized() const {
  return true;
}

void CMsgPopupCreated::InternalSwap(CMsgPopupCreated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPopupCreated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetVRKeyboardVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetVRKeyboardVisibility>()._has_bits_);
  static void set_has_browser_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetVRKeyboardVisibility::CMsgSetVRKeyboardVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetVRKeyboardVisibility)
}
CMsgSetVRKeyboardVisibility::CMsgSetVRKeyboardVisibility(const CMsgSetVRKeyboardVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetVRKeyboardVisibility)
}

void CMsgSetVRKeyboardVisibility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&browser_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(visible_));
}

CMsgSetVRKeyboardVisibility::~CMsgSetVRKeyboardVisibility() {
  // @@protoc_insertion_point(destructor:CMsgSetVRKeyboardVisibility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetVRKeyboardVisibility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetVRKeyboardVisibility::ArenaDtor(void* object) {
  CMsgSetVRKeyboardVisibility* _this = reinterpret_cast< CMsgSetVRKeyboardVisibility* >(object);
  (void)_this;
}
void CMsgSetVRKeyboardVisibility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetVRKeyboardVisibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetVRKeyboardVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetVRKeyboardVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(visible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetVRKeyboardVisibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_browser_handle(&has_bits);
          browser_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetVRKeyboardVisibility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetVRKeyboardVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_browser_handle(), target);
  }

  // optional bool visible = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetVRKeyboardVisibility)
  return target;
}

size_t CMsgSetVRKeyboardVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetVRKeyboardVisibility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_browser_handle());
    }

    // optional bool visible = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetVRKeyboardVisibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetVRKeyboardVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetVRKeyboardVisibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetVRKeyboardVisibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetVRKeyboardVisibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetVRKeyboardVisibility)
    MergeFrom(*source);
  }
}

void CMsgSetVRKeyboardVisibility::MergeFrom(const CMsgSetVRKeyboardVisibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetVRKeyboardVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetVRKeyboardVisibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetVRKeyboardVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetVRKeyboardVisibility::CopyFrom(const CMsgSetVRKeyboardVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetVRKeyboardVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetVRKeyboardVisibility::IsInitialized() const {
  return true;
}

void CMsgSetVRKeyboardVisibility::InternalSwap(CMsgSetVRKeyboardVisibility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetVRKeyboardVisibility, visible_)
      + sizeof(CMsgSetVRKeyboardVisibility::visible_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetVRKeyboardVisibility, browser_handle_)>(
          reinterpret_cast<char*>(&browser_handle_),
          reinterpret_cast<char*>(&other->browser_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetVRKeyboardVisibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRestartJSContext::_Internal {
 public:
};

CMsgRestartJSContext::CMsgRestartJSContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRestartJSContext)
}
CMsgRestartJSContext::CMsgRestartJSContext(const CMsgRestartJSContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRestartJSContext)
}

void CMsgRestartJSContext::SharedCtor() {
}

CMsgRestartJSContext::~CMsgRestartJSContext() {
  // @@protoc_insertion_point(destructor:CMsgRestartJSContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRestartJSContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRestartJSContext::ArenaDtor(void* object) {
  CMsgRestartJSContext* _this = reinterpret_cast< CMsgRestartJSContext* >(object);
  (void)_this;
}
void CMsgRestartJSContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRestartJSContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRestartJSContext::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRestartJSContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRestartJSContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRestartJSContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRestartJSContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRestartJSContext)
  return target;
}

size_t CMsgRestartJSContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRestartJSContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRestartJSContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRestartJSContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRestartJSContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRestartJSContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRestartJSContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRestartJSContext)
    MergeFrom(*source);
  }
}

void CMsgRestartJSContext::MergeFrom(const CMsgRestartJSContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRestartJSContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRestartJSContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRestartJSContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRestartJSContext::CopyFrom(const CMsgRestartJSContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRestartJSContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRestartJSContext::IsInitialized() const {
  return true;
}

void CMsgRestartJSContext::InternalSwap(CMsgRestartJSContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRestartJSContext::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgKeyUp* Arena::CreateMaybeMessage< ::CMsgKeyUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKeyUp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgKeyDown* Arena::CreateMaybeMessage< ::CMsgKeyDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKeyDown >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgKeyChar* Arena::CreateMaybeMessage< ::CMsgKeyChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKeyChar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMouseDown* Arena::CreateMaybeMessage< ::CMsgMouseDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMouseDown >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMouseUp* Arena::CreateMaybeMessage< ::CMsgMouseUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMouseUp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMouseDblClick* Arena::CreateMaybeMessage< ::CMsgMouseDblClick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMouseDblClick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMouseWheel* Arena::CreateMaybeMessage< ::CMsgMouseWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMouseWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMouseMove* Arena::CreateMaybeMessage< ::CMsgMouseMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMouseMove >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMouseLeave* Arena::CreateMaybeMessage< ::CMsgMouseLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMouseLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserCreate* Arena::CreateMaybeMessage< ::CMsgBrowserCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserCreateResponse* Arena::CreateMaybeMessage< ::CMsgBrowserCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserRemove* Arena::CreateMaybeMessage< ::CMsgBrowserRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetLocalFileRequestMapping_AdditionalRoute* Arena::CreateMaybeMessage< ::CMsgSetLocalFileRequestMapping_AdditionalRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetLocalFileRequestMapping_AdditionalRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetLocalFileRequestMapping* Arena::CreateMaybeMessage< ::CMsgSetLocalFileRequestMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetLocalFileRequestMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserErrorStrings* Arena::CreateMaybeMessage< ::CMsgBrowserErrorStrings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserErrorStrings >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserSetName* Arena::CreateMaybeMessage< ::CMsgBrowserSetName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserSetName >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserSize* Arena::CreateMaybeMessage< ::CMsgBrowserSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserSize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserSetMinSize* Arena::CreateMaybeMessage< ::CMsgBrowserSetMinSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserSetMinSize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserPosition* Arena::CreateMaybeMessage< ::CMsgBrowserPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserResized* Arena::CreateMaybeMessage< ::CMsgBrowserResized >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserResized >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPostURL* Arena::CreateMaybeMessage< ::CMsgPostURL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPostURL >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddHeader* Arena::CreateMaybeMessage< ::CMsgAddHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStopLoad* Arena::CreateMaybeMessage< ::CMsgStopLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStopLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReload* Arena::CreateMaybeMessage< ::CMsgReload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReload >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGoForward* Arena::CreateMaybeMessage< ::CMsgGoForward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGoForward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGoBack* Arena::CreateMaybeMessage< ::CMsgGoBack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGoBack >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWasHidden* Arena::CreateMaybeMessage< ::CMsgWasHidden >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWasHidden >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetWindowVisibility* Arena::CreateMaybeMessage< ::CMsgSetWindowVisibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetWindowVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearHistory* Arena::CreateMaybeMessage< ::CMsgClearHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearAllBrowsingData* Arena::CreateMaybeMessage< ::CMsgClearAllBrowsingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearAllBrowsingData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCopy* Arena::CreateMaybeMessage< ::CMsgCopy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCopy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPaste* Arena::CreateMaybeMessage< ::CMsgPaste >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPaste >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExecuteJavaScript* Arena::CreateMaybeMessage< ::CMsgExecuteJavaScript >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExecuteJavaScript >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetFocus* Arena::CreateMaybeMessage< ::CMsgSetFocus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetFocus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHorizontalScrollBarSize* Arena::CreateMaybeMessage< ::CMsgHorizontalScrollBarSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHorizontalScrollBarSize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHorizontalScrollBarSizeResponse* Arena::CreateMaybeMessage< ::CMsgHorizontalScrollBarSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHorizontalScrollBarSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVerticalScrollBarSize* Arena::CreateMaybeMessage< ::CMsgVerticalScrollBarSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVerticalScrollBarSize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVerticalScrollBarSizeResponse* Arena::CreateMaybeMessage< ::CMsgVerticalScrollBarSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVerticalScrollBarSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFind* Arena::CreateMaybeMessage< ::CMsgFind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFind >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStopFind* Arena::CreateMaybeMessage< ::CMsgStopFind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStopFind >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetHorizontalScroll* Arena::CreateMaybeMessage< ::CMsgSetHorizontalScroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetHorizontalScroll >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetVerticalScroll* Arena::CreateMaybeMessage< ::CMsgSetVerticalScroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetVerticalScroll >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetZoomLevel* Arena::CreateMaybeMessage< ::CMsgSetZoomLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetZoomLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgViewSource* Arena::CreateMaybeMessage< ::CMsgViewSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgViewSource >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserReady* Arena::CreateMaybeMessage< ::CMsgBrowserReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserReady >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgURLChanged* Arena::CreateMaybeMessage< ::CMsgURLChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgURLChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CHistoryEntry* Arena::CreateMaybeMessage< ::CHistoryEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHistoryEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHistoryChanged* Arena::CreateMaybeMessage< ::CMsgHistoryChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHistoryChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLoadError* Arena::CreateMaybeMessage< ::CMsgLoadError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLoadError >(arena);
}
template<> PROTOBUF_NOINLINE ::CHTMLHeader* Arena::CreateMaybeMessage< ::CHTMLHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHTMLHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CHTMLPageSecurityInfo* Arena::CreateMaybeMessage< ::CHTMLPageSecurityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHTMLPageSecurityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFinishedRequest* Arena::CreateMaybeMessage< ::CMsgFinishedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFinishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLoadedRequest* Arena::CreateMaybeMessage< ::CMsgLoadedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLoadedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFavIconURLChanged* Arena::CreateMaybeMessage< ::CMsgFavIconURLChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFavIconURLChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPageSecurity* Arena::CreateMaybeMessage< ::CMsgPageSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPageSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStartRequest* Arena::CreateMaybeMessage< ::CMsgStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStartRequestResponse* Arena::CreateMaybeMessage< ::CMsgStartRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowPopup* Arena::CreateMaybeMessage< ::CMsgShowPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHidePopup* Arena::CreateMaybeMessage< ::CMsgHidePopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHidePopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSizePopup* Arena::CreateMaybeMessage< ::CMsgSizePopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSizePopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgOpenNewTab* Arena::CreateMaybeMessage< ::CMsgOpenNewTab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgOpenNewTab >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPopupHTMLWindow* Arena::CreateMaybeMessage< ::CMsgPopupHTMLWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPopupHTMLWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPopupHTMLWindowResponse* Arena::CreateMaybeMessage< ::CMsgPopupHTMLWindowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPopupHTMLWindowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetHTMLTitle* Arena::CreateMaybeMessage< ::CMsgSetHTMLTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetHTMLTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLoadingResource* Arena::CreateMaybeMessage< ::CMsgLoadingResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLoadingResource >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStatusText* Arena::CreateMaybeMessage< ::CMsgStatusText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStatusText >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetCursor* Arena::CreateMaybeMessage< ::CMsgSetCursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetCursor >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFileLoadDialog_Filter* Arena::CreateMaybeMessage< ::CMsgFileLoadDialog_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFileLoadDialog_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFileLoadDialog* Arena::CreateMaybeMessage< ::CMsgFileLoadDialog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFileLoadDialog >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFileLoadDialogResponse* Arena::CreateMaybeMessage< ::CMsgFileLoadDialogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFileLoadDialogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowToolTip* Arena::CreateMaybeMessage< ::CMsgShowToolTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUpdateToolTip* Arena::CreateMaybeMessage< ::CMsgUpdateToolTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUpdateToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHideToolTip* Arena::CreateMaybeMessage< ::CMsgHideToolTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHideToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSearchResults* Arena::CreateMaybeMessage< ::CMsgSearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClose* Arena::CreateMaybeMessage< ::CMsgClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClose >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetSharedPaintBuffers* Arena::CreateMaybeMessage< ::CMsgSetSharedPaintBuffers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetSharedPaintBuffers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAckSharedPaintBuffers* Arena::CreateMaybeMessage< ::CMsgAckSharedPaintBuffers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAckSharedPaintBuffers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNeedsPaint* Arena::CreateMaybeMessage< ::CMsgNeedsPaint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNeedsPaint >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgComboNeedsPaint* Arena::CreateMaybeMessage< ::CMsgComboNeedsPaint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgComboNeedsPaint >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNeedsSharedTexturePaint* Arena::CreateMaybeMessage< ::CMsgNeedsSharedTexturePaint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNeedsSharedTexturePaint >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameOverlayTexturePaint* Arena::CreateMaybeMessage< ::CMsgGameOverlayTexturePaint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameOverlayTexturePaint >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGetZoom* Arena::CreateMaybeMessage< ::CMsgGetZoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGetZoom >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGetZoomResponse* Arena::CreateMaybeMessage< ::CMsgGetZoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGetZoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLinkAtPosition* Arena::CreateMaybeMessage< ::CMsgLinkAtPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLinkAtPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLinkAtPositionResponse* Arena::CreateMaybeMessage< ::CMsgLinkAtPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLinkAtPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgZoomToElementAtPosition* Arena::CreateMaybeMessage< ::CMsgZoomToElementAtPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgZoomToElementAtPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgZoomToElementAtPositionResponse* Arena::CreateMaybeMessage< ::CMsgZoomToElementAtPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgZoomToElementAtPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgScalePageToValue* Arena::CreateMaybeMessage< ::CMsgScalePageToValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgScalePageToValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgForcePopupsToDirectHWND* Arena::CreateMaybeMessage< ::CMsgForcePopupsToDirectHWND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgForcePopupsToDirectHWND >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgScalePageToValueResponse* Arena::CreateMaybeMessage< ::CMsgScalePageToValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgScalePageToValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSavePageToJPEG* Arena::CreateMaybeMessage< ::CMsgSavePageToJPEG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSavePageToJPEG >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSavePageToJPEGResponse* Arena::CreateMaybeMessage< ::CMsgSavePageToJPEGResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSavePageToJPEGResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSAlert* Arena::CreateMaybeMessage< ::CMsgJSAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSConfirm* Arena::CreateMaybeMessage< ::CMsgJSConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSDialogResponse* Arena::CreateMaybeMessage< ::CMsgJSDialogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSDialogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCanGoBackAndForward* Arena::CreateMaybeMessage< ::CMsgCanGoBackAndForward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCanGoBackAndForward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgOpenSteamURL* Arena::CreateMaybeMessage< ::CMsgOpenSteamURL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgOpenSteamURL >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetCookie* Arena::CreateMaybeMessage< ::CMsgSetCookie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetCookie >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetTargetFrameRate* Arena::CreateMaybeMessage< ::CMsgSetTargetFrameRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetTargetFrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPauseRepaint* Arena::CreateMaybeMessage< ::CMsgPauseRepaint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPauseRepaint >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFullRepaint* Arena::CreateMaybeMessage< ::CMsgFullRepaint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFullRepaint >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestFullScreen* Arena::CreateMaybeMessage< ::CMsgRequestFullScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestFullScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExitFullScreen* Arena::CreateMaybeMessage< ::CMsgExitFullScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExitFullScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgToggleFindInPageDialog* Arena::CreateMaybeMessage< ::CMsgToggleFindInPageDialog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgToggleFindInPageDialog >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetPIDShuttingDown* Arena::CreateMaybeMessage< ::CMsgSetPIDShuttingDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetPIDShuttingDown >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDisableBackgroundThrottling* Arena::CreateMaybeMessage< ::CMsgDisableBackgroundThrottling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDisableBackgroundThrottling >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAckPIDShuttingDown* Arena::CreateMaybeMessage< ::CMsgAckPIDShuttingDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAckPIDShuttingDown >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGetCookiesForURL* Arena::CreateMaybeMessage< ::CMsgGetCookiesForURL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGetCookiesForURL >(arena);
}
template<> PROTOBUF_NOINLINE ::CCookie* Arena::CreateMaybeMessage< ::CCookie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCookie >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGetCookiesForURLResponse* Arena::CreateMaybeMessage< ::CMsgGetCookiesForURLResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGetCookiesForURLResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNodeHasFocus* Arena::CreateMaybeMessage< ::CMsgNodeHasFocus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNodeHasFocus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgZoomToFocusedElement* Arena::CreateMaybeMessage< ::CMsgZoomToFocusedElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgZoomToFocusedElement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFocusedNodeText* Arena::CreateMaybeMessage< ::CMsgFocusedNodeText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFocusedNodeText >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFocusedNodeTextResponse* Arena::CreateMaybeMessage< ::CMsgFocusedNodeTextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFocusedNodeTextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBuildID* Arena::CreateMaybeMessage< ::CMsgBuildID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBuildID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgOpenDevTools* Arena::CreateMaybeMessage< ::CMsgOpenDevTools >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgOpenDevTools >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCloseDevTools* Arena::CreateMaybeMessage< ::CMsgCloseDevTools >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCloseDevTools >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUnlockH264* Arena::CreateMaybeMessage< ::CMsgUnlockH264 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUnlockH264 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgScreenInformationChanged* Arena::CreateMaybeMessage< ::CMsgScreenInformationChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgScreenInformationChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearAllCookies* Arena::CreateMaybeMessage< ::CMsgClearAllCookies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearAllCookies >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgScreenDPI* Arena::CreateMaybeMessage< ::CMsgScreenDPI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgScreenDPI >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAckScreenDPI* Arena::CreateMaybeMessage< ::CMsgAckScreenDPI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAckScreenDPI >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAuthedSteamDomains* Arena::CreateMaybeMessage< ::CMsgAuthedSteamDomains >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAuthedSteamDomains >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamAuthNeeded* Arena::CreateMaybeMessage< ::CMsgSteamAuthNeeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamAuthNeeded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamAuthCookiesSet* Arena::CreateMaybeMessage< ::CMsgSteamAuthCookiesSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamAuthCookiesSet >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSRegisterMethod* Arena::CreateMaybeMessage< ::CMsgJSRegisterMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSRegisterMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSValue_JSObjectProperty* Arena::CreateMaybeMessage< ::CMsgJSValue_JSObjectProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSValue_JSObjectProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSValue* Arena::CreateMaybeMessage< ::CMsgJSValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSMethodCall* Arena::CreateMaybeMessage< ::CMsgJSMethodCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSMethodCall >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSExecuteCallback* Arena::CreateMaybeMessage< ::CMsgJSExecuteCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSExecuteCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSReleaseCallback* Arena::CreateMaybeMessage< ::CMsgJSReleaseCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSReleaseCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJSRaiseException* Arena::CreateMaybeMessage< ::CMsgJSRaiseException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJSRaiseException >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLoadLocalization* Arena::CreateMaybeMessage< ::CMsgLoadLocalization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLoadLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotifyUserActivation* Arena::CreateMaybeMessage< ::CMsgNotifyUserActivation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotifyUserActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetNetFakeLocalSystemState* Arena::CreateMaybeMessage< ::CMsgSetNetFakeLocalSystemState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetNetFakeLocalSystemState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetGameOverlayTargetPIDs* Arena::CreateMaybeMessage< ::CMsgSetGameOverlayTargetPIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetGameOverlayTargetPIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameOverlayTargetTextureID* Arena::CreateMaybeMessage< ::CMsgGameOverlayTargetTextureID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameOverlayTargetTextureID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDraggableRegionsChanged_DraggableRects* Arena::CreateMaybeMessage< ::CMsgDraggableRegionsChanged_DraggableRects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDraggableRegionsChanged_DraggableRects >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDraggableRegionsChanged* Arena::CreateMaybeMessage< ::CMsgDraggableRegionsChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDraggableRegionsChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResizeGripChanged* Arena::CreateMaybeMessage< ::CMsgResizeGripChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResizeGripChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetWindowPosition* Arena::CreateMaybeMessage< ::CMsgSetWindowPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetWindowPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowWindow* Arena::CreateMaybeMessage< ::CMsgShowWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHideWindow* Arena::CreateMaybeMessage< ::CMsgHideWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHideWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBringWindowToFront* Arena::CreateMaybeMessage< ::CMsgBringWindowToFront >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBringWindowToFront >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetForegroundWindow* Arena::CreateMaybeMessage< ::CMsgSetForegroundWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetForegroundWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMaximizeRestoreWindow* Arena::CreateMaybeMessage< ::CMsgMaximizeRestoreWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMaximizeRestoreWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMinimizeWindow* Arena::CreateMaybeMessage< ::CMsgMinimizeWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMinimizeWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowBrowserContextMenu_ContextCommand* Arena::CreateMaybeMessage< ::CMsgShowBrowserContextMenu_ContextCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowBrowserContextMenu_ContextCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowBrowserContextMenu* Arena::CreateMaybeMessage< ::CMsgShowBrowserContextMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowBrowserContextMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHandleContextMenuCommand* Arena::CreateMaybeMessage< ::CMsgHandleContextMenuCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHandleContextMenuCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTouchGesture* Arena::CreateMaybeMessage< ::CMsgTouchGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTouchGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetTouchGesturesToCancel* Arena::CreateMaybeMessage< ::CMsgSetTouchGesturesToCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetTouchGesturesToCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgImeSetComposition* Arena::CreateMaybeMessage< ::CMsgImeSetComposition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgImeSetComposition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgImeCommitText* Arena::CreateMaybeMessage< ::CMsgImeCommitText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgImeCommitText >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgImeCancelComposition* Arena::CreateMaybeMessage< ::CMsgImeCancelComposition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgImeCancelComposition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgImeCompositionRangeChanged* Arena::CreateMaybeMessage< ::CMsgImeCompositionRangeChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgImeCompositionRangeChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInspectElement* Arena::CreateMaybeMessage< ::CMsgInspectElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInspectElement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDisableF5* Arena::CreateMaybeMessage< ::CMsgDisableF5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDisableF5 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStartDownload* Arena::CreateMaybeMessage< ::CMsgStartDownload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartDownload >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetTopWindow* Arena::CreateMaybeMessage< ::CMsgSetTopWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetTopWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserViewPostMessageToParentRequest* Arena::CreateMaybeMessage< ::CMsgBrowserViewPostMessageToParentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserViewPostMessageToParentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBlockedRequest* Arena::CreateMaybeMessage< ::CMsgBlockedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBlockedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBrowserFocusChanged* Arena::CreateMaybeMessage< ::CMsgBrowserFocusChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBrowserFocusChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetProtocolBlockList* Arena::CreateMaybeMessage< ::CMsgSetProtocolBlockList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetProtocolBlockList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetForceDeviceScaleFactors* Arena::CreateMaybeMessage< ::CMsgSetForceDeviceScaleFactors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetForceDeviceScaleFactors >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetUIMode* Arena::CreateMaybeMessage< ::CMsgSetUIMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetUIMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPopupCreated* Arena::CreateMaybeMessage< ::CMsgPopupCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPopupCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetVRKeyboardVisibility* Arena::CreateMaybeMessage< ::CMsgSetVRKeyboardVisibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetVRKeyboardVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRestartJSContext* Arena::CreateMaybeMessage< ::CMsgRestartJSContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRestartJSContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
