// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_accounthardware.steamclient.proto

#include "steammessages_accounthardware.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CAccountHardware_RegisterSteamController_Request::CAccountHardware_RegisterSteamController_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal {
  constexpr CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_RegisterSteamController_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal _CAccountHardware_RegisterSteamController_Request_default_instance_;
constexpr CAccountHardware_RegisterSteamController_Response::CAccountHardware_RegisterSteamController_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_RegisterSteamController_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal _CAccountHardware_RegisterSteamController_Response_default_instance_;
constexpr CAccountHardware_CompleteSteamControllerRegistration_Request::CAccountHardware_CompleteSteamControllerRegistration_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal {
  constexpr CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_CompleteSteamControllerRegistration_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal _CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_;
constexpr CAccountHardware_CompleteSteamControllerRegistration_Response::CAccountHardware_CompleteSteamControllerRegistration_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_CompleteSteamControllerRegistration_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal _CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_;
constexpr CAccountHardware_QueryAccountsRegisteredToSerial_Request::CAccountHardware_QueryAccountsRegisteredToSerial_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal {
  constexpr CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_QueryAccountsRegisteredToSerial_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal _CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_;
constexpr CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_(0u)
  , registration_complete_(false){}
struct CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal {
  constexpr CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal() {}
  union {
    CAccountHardware_QueryAccountsRegisteredToSerial_Accounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal _CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_;
constexpr CAccountHardware_QueryAccountsRegisteredToSerial_Response::CAccountHardware_QueryAccountsRegisteredToSerial_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_(){}
struct CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_QueryAccountsRegisteredToSerial_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal _CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_;
constexpr CAccountHardware_SteamControllerSetConfig_ControllerConfig::CAccountHardware_SteamControllerSetConfig_ControllerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appidorname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , templatename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(PROTOBUF_ULONGLONG(0)){}
struct CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal {
  constexpr CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal() {}
  union {
    CAccountHardware_SteamControllerSetConfig_ControllerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal _CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_;
constexpr CAccountHardware_SteamControllerSetConfig_Request::CAccountHardware_SteamControllerSetConfig_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configurations_()
  , serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , only_for_this_serial_(false)
  , controller_type_(2){}
struct CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal {
  constexpr CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_SteamControllerSetConfig_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal _CAccountHardware_SteamControllerSetConfig_Request_default_instance_;
constexpr CAccountHardware_SteamControllerSetConfig_Response::CAccountHardware_SteamControllerSetConfig_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_SteamControllerSetConfig_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal _CAccountHardware_SteamControllerSetConfig_Response_default_instance_;
constexpr CAccountHardware_SteamControllerGetConfig_Request::CAccountHardware_SteamControllerGetConfig_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appidorname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , only_for_this_serial_(false)
  , controller_type_(2){}
struct CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal {
  constexpr CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_SteamControllerGetConfig_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal _CAccountHardware_SteamControllerGetConfig_Request_default_instance_;
constexpr CAccountHardware_SteamControllerGetConfig_ControllerConfig::CAccountHardware_SteamControllerGetConfig_ControllerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appidorname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , templatename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(PROTOBUF_ULONGLONG(0))
  , autosave_(false){}
struct CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal {
  constexpr CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal() {}
  union {
    CAccountHardware_SteamControllerGetConfig_ControllerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal _CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_;
constexpr CAccountHardware_SteamControllerGetConfig_Response::CAccountHardware_SteamControllerGetConfig_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configurations_(){}
struct CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_SteamControllerGetConfig_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal _CAccountHardware_SteamControllerGetConfig_Response_default_instance_;
constexpr CAccountHardware_DeRegisterSteamController_Request::CAccountHardware_DeRegisterSteamController_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u){}
struct CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal {
  constexpr CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_DeRegisterSteamController_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal _CAccountHardware_DeRegisterSteamController_Request_default_instance_;
constexpr CAccountHardware_DeRegisterSteamController_Response::CAccountHardware_DeRegisterSteamController_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_DeRegisterSteamController_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal _CAccountHardware_DeRegisterSteamController_Response_default_instance_;
constexpr CAccountHardware_SetPersonalizationFile_Request::CAccountHardware_SetPersonalizationFile_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(PROTOBUF_ULONGLONG(0))
  , accountid_(0u){}
struct CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal {
  constexpr CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_SetPersonalizationFile_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal _CAccountHardware_SetPersonalizationFile_Request_default_instance_;
constexpr CAccountHardware_SetPersonalizationFile_Response::CAccountHardware_SetPersonalizationFile_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_SetPersonalizationFile_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal _CAccountHardware_SetPersonalizationFile_Response_default_instance_;
constexpr CAccountHardware_GetPersonalizationFile_Request::CAccountHardware_GetPersonalizationFile_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u){}
struct CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal {
  constexpr CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_GetPersonalizationFile_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal _CAccountHardware_GetPersonalizationFile_Request_default_instance_;
constexpr CAccountHardware_GetPersonalizationFile_Response::CAccountHardware_GetPersonalizationFile_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(PROTOBUF_ULONGLONG(0)){}
struct CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_GetPersonalizationFile_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal _CAccountHardware_GetPersonalizationFile_Response_default_instance_;
constexpr CAccountHardware_VRCompatibilityChecRequest_Pair::CAccountHardware_VRCompatibilityChecRequest_Pair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_VRCompatibilityChecRequest_PairDefaultTypeInternal {
  constexpr CAccountHardware_VRCompatibilityChecRequest_PairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_VRCompatibilityChecRequest_PairDefaultTypeInternal() {}
  union {
    CAccountHardware_VRCompatibilityChecRequest_Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_VRCompatibilityChecRequest_PairDefaultTypeInternal _CAccountHardware_VRCompatibilityChecRequest_Pair_default_instance_;
constexpr CAccountHardware_VRCompatibilityChecRequest::CAccountHardware_VRCompatibilityChecRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , product_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_VRCompatibilityChecRequestDefaultTypeInternal {
  constexpr CAccountHardware_VRCompatibilityChecRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_VRCompatibilityChecRequestDefaultTypeInternal() {}
  union {
    CAccountHardware_VRCompatibilityChecRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_VRCompatibilityChecRequestDefaultTypeInternal _CAccountHardware_VRCompatibilityChecRequest_default_instance_;
constexpr CAccountHardware_VRCompatibilityChecResponse_Pair::CAccountHardware_VRCompatibilityChecResponse_Pair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_VRCompatibilityChecResponse_PairDefaultTypeInternal {
  constexpr CAccountHardware_VRCompatibilityChecResponse_PairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_VRCompatibilityChecResponse_PairDefaultTypeInternal() {}
  union {
    CAccountHardware_VRCompatibilityChecResponse_Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_VRCompatibilityChecResponse_PairDefaultTypeInternal _CAccountHardware_VRCompatibilityChecResponse_Pair_default_instance_;
constexpr CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_VRCompatibilityChecResponse_ComponentDisplayDefaultTypeInternal {
  constexpr CAccountHardware_VRCompatibilityChecResponse_ComponentDisplayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_VRCompatibilityChecResponse_ComponentDisplayDefaultTypeInternal() {}
  union {
    CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_VRCompatibilityChecResponse_ComponentDisplayDefaultTypeInternal _CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay_default_instance_;
constexpr CAccountHardware_VRCompatibilityChecResponse::CAccountHardware_VRCompatibilityChecResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , components_(){}
struct CAccountHardware_VRCompatibilityChecResponseDefaultTypeInternal {
  constexpr CAccountHardware_VRCompatibilityChecResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_VRCompatibilityChecResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_VRCompatibilityChecResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_VRCompatibilityChecResponseDefaultTypeInternal _CAccountHardware_VRCompatibilityChecResponse_default_instance_;
constexpr CAccountHardware_RegisterValveIndexComponent_Request::CAccountHardware_RegisterValveIndexComponent_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , manufacturer_serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , component_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , component_type_(0)

  , estimated_time_registered_(0){}
struct CAccountHardware_RegisterValveIndexComponent_RequestDefaultTypeInternal {
  constexpr CAccountHardware_RegisterValveIndexComponent_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_RegisterValveIndexComponent_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_RegisterValveIndexComponent_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_RegisterValveIndexComponent_RequestDefaultTypeInternal _CAccountHardware_RegisterValveIndexComponent_Request_default_instance_;
constexpr CAccountHardware_RegisterValveIndexComponent_Response::CAccountHardware_RegisterValveIndexComponent_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CAccountHardware_RegisterValveIndexComponent_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_RegisterValveIndexComponent_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_RegisterValveIndexComponent_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_RegisterValveIndexComponent_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_RegisterValveIndexComponent_ResponseDefaultTypeInternal _CAccountHardware_RegisterValveIndexComponent_Response_default_instance_;
constexpr CAccountHardware_GetSteamDeckComponents_Request::CAccountHardware_GetSteamDeckComponents_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_GetSteamDeckComponents_RequestDefaultTypeInternal {
  constexpr CAccountHardware_GetSteamDeckComponents_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_GetSteamDeckComponents_RequestDefaultTypeInternal() {}
  union {
    CAccountHardware_GetSteamDeckComponents_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_GetSteamDeckComponents_RequestDefaultTypeInternal _CAccountHardware_GetSteamDeckComponents_Request_default_instance_;
constexpr CAccountHardware_GetSteamDeckComponents_Response::CAccountHardware_GetSteamDeckComponents_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : json_components_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAccountHardware_GetSteamDeckComponents_ResponseDefaultTypeInternal {
  constexpr CAccountHardware_GetSteamDeckComponents_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAccountHardware_GetSteamDeckComponents_ResponseDefaultTypeInternal() {}
  union {
    CAccountHardware_GetSteamDeckComponents_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAccountHardware_GetSteamDeckComponents_ResponseDefaultTypeInternal _CAccountHardware_GetSteamDeckComponents_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5faccounthardware_2esteamclient_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Request, controller_code_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterSteamController_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Request, controller_code_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_CompleteSteamControllerRegistration_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Request, controller_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, accountid_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, registration_complete_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_QueryAccountsRegisteredToSerial_Response, accounts_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, appidorname_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_ControllerConfig, templatename_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, controller_code_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, accountid_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, configurations_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, controller_type_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Request, only_for_this_serial_),
  0,
  1,
  2,
  ~0u,
  4,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerSetConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, controller_code_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, accountid_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, appidorname_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, controller_type_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Request, only_for_this_serial_),
  0,
  1,
  3,
  2,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, appidorname_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, templatename_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_ControllerConfig, autosave_),
  0,
  3,
  1,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SteamControllerGetConfig_Response, configurations_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, controller_code_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Request, accountid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_DeRegisterSteamController_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Request, accountid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_SetPersonalizationFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Request, accountid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetPersonalizationFile_Response, publishedfileid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest_Pair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest_Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest_Pair, key_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest_Pair, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest, product_name_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecRequest, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_Pair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_Pair, key_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_Pair, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay, name_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay, image_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay, value_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse, values_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_VRCompatibilityChecResponse, components_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, manufacturer_serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, component_code_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, component_type_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Request, estimated_time_registered_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_RegisterValveIndexComponent_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Request, controller_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAccountHardware_GetSteamDeckComponents_Response, json_components_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CAccountHardware_RegisterSteamController_Request)},
  { 9, -1, sizeof(::CAccountHardware_RegisterSteamController_Response)},
  { 14, 21, sizeof(::CAccountHardware_CompleteSteamControllerRegistration_Request)},
  { 23, -1, sizeof(::CAccountHardware_CompleteSteamControllerRegistration_Response)},
  { 28, 35, sizeof(::CAccountHardware_QueryAccountsRegisteredToSerial_Request)},
  { 37, 44, sizeof(::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)},
  { 46, -1, sizeof(::CAccountHardware_QueryAccountsRegisteredToSerial_Response)},
  { 52, 60, sizeof(::CAccountHardware_SteamControllerSetConfig_ControllerConfig)},
  { 63, 74, sizeof(::CAccountHardware_SteamControllerSetConfig_Request)},
  { 80, -1, sizeof(::CAccountHardware_SteamControllerSetConfig_Response)},
  { 85, 96, sizeof(::CAccountHardware_SteamControllerGetConfig_Request)},
  { 102, 112, sizeof(::CAccountHardware_SteamControllerGetConfig_ControllerConfig)},
  { 117, -1, sizeof(::CAccountHardware_SteamControllerGetConfig_Response)},
  { 123, 131, sizeof(::CAccountHardware_DeRegisterSteamController_Request)},
  { 134, -1, sizeof(::CAccountHardware_DeRegisterSteamController_Response)},
  { 139, 147, sizeof(::CAccountHardware_SetPersonalizationFile_Request)},
  { 150, -1, sizeof(::CAccountHardware_SetPersonalizationFile_Response)},
  { 155, 162, sizeof(::CAccountHardware_GetPersonalizationFile_Request)},
  { 164, 170, sizeof(::CAccountHardware_GetPersonalizationFile_Response)},
  { 171, 178, sizeof(::CAccountHardware_VRCompatibilityChecRequest_Pair)},
  { 180, 187, sizeof(::CAccountHardware_VRCompatibilityChecRequest)},
  { 189, 196, sizeof(::CAccountHardware_VRCompatibilityChecResponse_Pair)},
  { 198, 206, sizeof(::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay)},
  { 209, -1, sizeof(::CAccountHardware_VRCompatibilityChecResponse)},
  { 216, 226, sizeof(::CAccountHardware_RegisterValveIndexComponent_Request)},
  { 231, -1, sizeof(::CAccountHardware_RegisterValveIndexComponent_Response)},
  { 236, 243, sizeof(::CAccountHardware_GetSteamDeckComponents_Request)},
  { 245, 251, sizeof(::CAccountHardware_GetSteamDeckComponents_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_RegisterSteamController_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_RegisterSteamController_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SteamControllerSetConfig_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SteamControllerSetConfig_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SteamControllerGetConfig_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SteamControllerGetConfig_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_DeRegisterSteamController_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_DeRegisterSteamController_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SetPersonalizationFile_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_SetPersonalizationFile_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_GetPersonalizationFile_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_GetPersonalizationFile_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_VRCompatibilityChecRequest_Pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_VRCompatibilityChecRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_VRCompatibilityChecResponse_Pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_VRCompatibilityChecResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_RegisterValveIndexComponent_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_RegisterValveIndexComponent_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_GetSteamDeckComponents_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAccountHardware_GetSteamDeckComponents_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5faccounthardware_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/steammessages_accounthardware.steamcli"
  "ent.proto\032 google/protobuf/descriptor.pr"
  "oto\032\030steammessages_base.proto\032,steammess"
  "ages_unified_base.steamclient.proto\"b\n0C"
  "AccountHardware_RegisterSteamController_"
  "Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017contro"
  "ller_code\030\002 \001(\t\"3\n1CAccountHardware_Regi"
  "sterSteamController_Response\"n\n<CAccount"
  "Hardware_CompleteSteamControllerRegistra"
  "tion_Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017c"
  "ontroller_code\030\002 \001(\t\"\?\n=CAccountHardware"
  "_CompleteSteamControllerRegistration_Res"
  "ponse\"j\n8CAccountHardware_QueryAccountsR"
  "egisteredToSerial_Request\022\025\n\rserial_numb"
  "er\030\001 \001(\t\022\027\n\017controller_code\030\002 \001(\t\"m\n9CAc"
  "countHardware_QueryAccountsRegisteredToS"
  "erial_Accounts\022\021\n\taccountid\030\001 \001(\r\022\035\n\025reg"
  "istration_complete\030\002 \001(\010\"\211\001\n9CAccountHar"
  "dware_QueryAccountsRegisteredToSerial_Re"
  "sponse\022L\n\010accounts\030\001 \003(\0132:.CAccountHardw"
  "are_QueryAccountsRegisteredToSerial_Acco"
  "unts\"\200\001\n:CAccountHardware_SteamControlle"
  "rSetConfig_ControllerConfig\022\023\n\013appidorna"
  "me\030\001 \001(\t\022\027\n\017publishedfileid\030\002 \001(\004\022\024\n\014tem"
  "platename\030\003 \001(\t\"\214\002\n1CAccountHardware_Ste"
  "amControllerSetConfig_Request\022\025\n\rserial_"
  "number\030\001 \001(\t\022\027\n\017controller_code\030\002 \001(\t\022\021\n"
  "\taccountid\030\003 \001(\r\022S\n\016configurations\030\004 \003(\013"
  "2;.CAccountHardware_SteamControllerSetCo"
  "nfig_ControllerConfig\022\032\n\017controller_type"
  "\030\005 \001(\005:\0012\022#\n\024only_for_this_serial\030\006 \001(\010:"
  "\005false\"4\n2CAccountHardware_SteamControll"
  "erSetConfig_Response\"\314\001\n1CAccountHardwar"
  "e_SteamControllerGetConfig_Request\022\025\n\rse"
  "rial_number\030\001 \001(\t\022\027\n\017controller_code\030\002 \001"
  "(\t\022\021\n\taccountid\030\003 \001(\r\022\023\n\013appidorname\030\004 \001"
  "(\t\022\032\n\017controller_type\030\005 \001(\005:\0012\022#\n\024only_f"
  "or_this_serial\030\006 \001(\010:\005false\"\260\001\n:CAccount"
  "Hardware_SteamControllerGetConfig_Contro"
  "llerConfig\022\023\n\013appidorname\030\001 \001(\t\022\027\n\017publi"
  "shedfileid\030\002 \001(\004\022\024\n\014templatename\030\003 \001(\t\022\025"
  "\n\rserial_number\030\004 \001(\t\022\027\n\010autosave\030\005 \001(\010:"
  "\005false\"\211\001\n2CAccountHardware_SteamControl"
  "lerGetConfig_Response\022S\n\016configurations\030"
  "\001 \003(\0132;.CAccountHardware_SteamController"
  "GetConfig_ControllerConfig\"w\n2CAccountHa"
  "rdware_DeRegisterSteamController_Request"
  "\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017controller_co"
  "de\030\002 \001(\t\022\021\n\taccountid\030\003 \001(\r\"5\n3CAccountH"
  "ardware_DeRegisterSteamController_Respon"
  "se\"t\n/CAccountHardware_SetPersonalizatio"
  "nFile_Request\022\025\n\rserial_number\030\001 \001(\t\022\027\n\017"
  "publishedfileid\030\002 \001(\004\022\021\n\taccountid\030\003 \001(\r"
  "\"2\n0CAccountHardware_SetPersonalizationF"
  "ile_Response\"[\n/CAccountHardware_GetPers"
  "onalizationFile_Request\022\025\n\rserial_number"
  "\030\001 \001(\t\022\021\n\taccountid\030\002 \001(\r\"K\n0CAccountHar"
  "dware_GetPersonalizationFile_Response\022\027\n"
  "\017publishedfileid\030\001 \001(\004\"\252\001\n+CAccountHardw"
  "are_VRCompatibilityChecRequest\022\024\n\014produc"
  "t_name\030\001 \001(\t\022A\n\006values\030\002 \003(\01321.CAccountH"
  "ardware_VRCompatibilityChecRequest.Pair\032"
  "\"\n\004Pair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\252\002\n,"
  "CAccountHardware_VRCompatibilityChecResp"
  "onse\022B\n\006values\030\001 \003(\01322.CAccountHardware_"
  "VRCompatibilityChecResponse.Pair\022R\n\ncomp"
  "onents\030\002 \003(\0132>.CAccountHardware_VRCompat"
  "ibilityChecResponse.ComponentDisplay\032\"\n\004"
  "Pair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032>\n\020Comp"
  "onentDisplay\022\014\n\004name\030\001 \001(\t\022\r\n\005image\030\002 \001("
  "\t\022\r\n\005value\030\003 \001(\t\"\370\001\n4CAccountHardware_Re"
  "gisterValveIndexComponent_Request\022\025\n\rser"
  "ial_number\030\001 \001(\t\022\"\n\032manufacturer_serial_"
  "number\030\002 \001(\t\022\026\n\016component_code\030\003 \001(\t\022J\n\016"
  "component_type\030\004 \001(\0162\025.EValveIndexCompon"
  "ent:\033EValveIndexComponentUnknown\022!\n\031esti"
  "mated_time_registered\030\005 \001(\005\"7\n5CAccountH"
  "ardware_RegisterValveIndexComponent_Resp"
  "onse\"a\n/CAccountHardware_GetSteamDeckCom"
  "ponents_Request\022\025\n\rserial_number\030\001 \001(\t\022\027"
  "\n\017controller_code\030\002 \001(\t\"K\n0CAccountHardw"
  "are_GetSteamDeckComponents_Response\022\027\n\017j"
  "son_components\030\001 \001(\t*\237\001\n\024EValveIndexComp"
  "onent\022\037\n\033EValveIndexComponentUnknown\020\000\022\033"
  "\n\027EValveIndexComponentHMD\020\001\022#\n\037EValveInd"
  "exComponentLeftKnuckle\020\002\022$\n EValveIndexC"
  "omponentRightKnuckle\020\0032\226\014\n\017AccountHardwa"
  "re\022\200\001\n\027RegisterSteamController\0221.CAccoun"
  "tHardware_RegisterSteamController_Reques"
  "t\0322.CAccountHardware_RegisterSteamContro"
  "ller_Response\022\244\001\n#CompleteSteamControlle"
  "rRegistration\022=.CAccountHardware_Complet"
  "eSteamControllerRegistration_Request\032>.C"
  "AccountHardware_CompleteSteamControllerR"
  "egistration_Response\022\234\001\n#QueryAccountsRe"
  "gisteredToController\0229.CAccountHardware_"
  "QueryAccountsRegisteredToSerial_Request\032"
  ":.CAccountHardware_QueryAccountsRegister"
  "edToSerial_Response\022\213\001\n SetDesiredContro"
  "llerConfigForApp\0222.CAccountHardware_Stea"
  "mControllerSetConfig_Request\0323.CAccountH"
  "ardware_SteamControllerSetConfig_Respons"
  "e\022\213\001\n GetDesiredControllerConfigForApp\0222"
  ".CAccountHardware_SteamControllerGetConf"
  "ig_Request\0323.CAccountHardware_SteamContr"
  "ollerGetConfig_Response\022\206\001\n\031DeRegisterSt"
  "eamController\0223.CAccountHardware_DeRegis"
  "terSteamController_Request\0324.CAccountHar"
  "dware_DeRegisterSteamController_Response"
  "\022\207\001\n SetControllerPersonalizationFile\0220."
  "CAccountHardware_SetPersonalizationFile_"
  "Request\0321.CAccountHardware_SetPersonaliz"
  "ationFile_Response\022\207\001\n GetControllerPers"
  "onalizationFile\0220.CAccountHardware_GetPe"
  "rsonalizationFile_Request\0321.CAccountHard"
  "ware_GetPersonalizationFile_Response\022s\n\024"
  "VRCompatibilityCheck\022,.CAccountHardware_"
  "VRCompatibilityChecRequest\032-.CAccountHar"
  "dware_VRCompatibilityChecResponse\022\214\001\n\033Re"
  "gisterValveIndexComponent\0225.CAccountHard"
  "ware_RegisterValveIndexComponent_Request"
  "\0326.CAccountHardware_RegisterValveIndexCo"
  "mponent_Response\022}\n\026GetSteamDeckComponen"
  "ts\0220.CAccountHardware_GetSteamDeckCompon"
  "ents_Request\0321.CAccountHardware_GetSteam"
  "DeckComponents_ResponseB\035\200\001\001\252\002\027OpenSteam"
  "works.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto = {
  false, false, 5054, descriptor_table_protodef_steammessages_5faccounthardware_2esteamclient_2eproto, "steammessages_accounthardware.steamclient.proto", 
  &descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto_once, descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto_deps, 3, 28,
  schemas, file_default_instances, TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5faccounthardware_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto);
  return descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5faccounthardware_2esteamclient_2eproto(&descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EValveIndexComponent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto[0];
}
bool EValveIndexComponent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CAccountHardware_RegisterSteamController_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_RegisterSteamController_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_RegisterSteamController_Request::CAccountHardware_RegisterSteamController_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_RegisterSteamController_Request)
}
CAccountHardware_RegisterSteamController_Request::CAccountHardware_RegisterSteamController_Request(const CAccountHardware_RegisterSteamController_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_RegisterSteamController_Request)
}

void CAccountHardware_RegisterSteamController_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_RegisterSteamController_Request::~CAccountHardware_RegisterSteamController_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_RegisterSteamController_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_RegisterSteamController_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_RegisterSteamController_Request::ArenaDtor(void* object) {
  CAccountHardware_RegisterSteamController_Request* _this = reinterpret_cast< CAccountHardware_RegisterSteamController_Request* >(object);
  (void)_this;
}
void CAccountHardware_RegisterSteamController_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_RegisterSteamController_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_RegisterSteamController_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_RegisterSteamController_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_RegisterSteamController_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_RegisterSteamController_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_RegisterSteamController_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_RegisterSteamController_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_RegisterSteamController_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterSteamController_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterSteamController_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_RegisterSteamController_Request)
  return target;
}

size_t CAccountHardware_RegisterSteamController_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_RegisterSteamController_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_RegisterSteamController_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_RegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_RegisterSteamController_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_RegisterSteamController_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_RegisterSteamController_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_RegisterSteamController_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_RegisterSteamController_Request::MergeFrom(const CAccountHardware_RegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_RegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
  }
}

void CAccountHardware_RegisterSteamController_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_RegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_RegisterSteamController_Request::CopyFrom(const CAccountHardware_RegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_RegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_RegisterSteamController_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_RegisterSteamController_Request::InternalSwap(CAccountHardware_RegisterSteamController_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_RegisterSteamController_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_RegisterSteamController_Response::_Internal {
 public:
};

CAccountHardware_RegisterSteamController_Response::CAccountHardware_RegisterSteamController_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_RegisterSteamController_Response)
}
CAccountHardware_RegisterSteamController_Response::CAccountHardware_RegisterSteamController_Response(const CAccountHardware_RegisterSteamController_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_RegisterSteamController_Response)
}

void CAccountHardware_RegisterSteamController_Response::SharedCtor() {
}

CAccountHardware_RegisterSteamController_Response::~CAccountHardware_RegisterSteamController_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_RegisterSteamController_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_RegisterSteamController_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_RegisterSteamController_Response::ArenaDtor(void* object) {
  CAccountHardware_RegisterSteamController_Response* _this = reinterpret_cast< CAccountHardware_RegisterSteamController_Response* >(object);
  (void)_this;
}
void CAccountHardware_RegisterSteamController_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_RegisterSteamController_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_RegisterSteamController_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_RegisterSteamController_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_RegisterSteamController_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_RegisterSteamController_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_RegisterSteamController_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_RegisterSteamController_Response)
  return target;
}

size_t CAccountHardware_RegisterSteamController_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_RegisterSteamController_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_RegisterSteamController_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_RegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_RegisterSteamController_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_RegisterSteamController_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_RegisterSteamController_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_RegisterSteamController_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_RegisterSteamController_Response::MergeFrom(const CAccountHardware_RegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_RegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_RegisterSteamController_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_RegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_RegisterSteamController_Response::CopyFrom(const CAccountHardware_RegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_RegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_RegisterSteamController_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_RegisterSteamController_Response::InternalSwap(CAccountHardware_RegisterSteamController_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_RegisterSteamController_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_CompleteSteamControllerRegistration_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_CompleteSteamControllerRegistration_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_CompleteSteamControllerRegistration_Request::CAccountHardware_CompleteSteamControllerRegistration_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_CompleteSteamControllerRegistration_Request)
}
CAccountHardware_CompleteSteamControllerRegistration_Request::CAccountHardware_CompleteSteamControllerRegistration_Request(const CAccountHardware_CompleteSteamControllerRegistration_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_CompleteSteamControllerRegistration_Request)
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_CompleteSteamControllerRegistration_Request::~CAccountHardware_CompleteSteamControllerRegistration_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_CompleteSteamControllerRegistration_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::ArenaDtor(void* object) {
  CAccountHardware_CompleteSteamControllerRegistration_Request* _this = reinterpret_cast< CAccountHardware_CompleteSteamControllerRegistration_Request* >(object);
  (void)_this;
}
void CAccountHardware_CompleteSteamControllerRegistration_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_CompleteSteamControllerRegistration_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_CompleteSteamControllerRegistration_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_CompleteSteamControllerRegistration_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_CompleteSteamControllerRegistration_Request)
  return target;
}

size_t CAccountHardware_CompleteSteamControllerRegistration_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_CompleteSteamControllerRegistration_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_CompleteSteamControllerRegistration_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_CompleteSteamControllerRegistration_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_CompleteSteamControllerRegistration_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::MergeFrom(const CAccountHardware_CompleteSteamControllerRegistration_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
  }
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::CopyFrom(const CAccountHardware_CompleteSteamControllerRegistration_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_CompleteSteamControllerRegistration_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_CompleteSteamControllerRegistration_Request::InternalSwap(CAccountHardware_CompleteSteamControllerRegistration_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_CompleteSteamControllerRegistration_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_CompleteSteamControllerRegistration_Response::_Internal {
 public:
};

CAccountHardware_CompleteSteamControllerRegistration_Response::CAccountHardware_CompleteSteamControllerRegistration_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_CompleteSteamControllerRegistration_Response)
}
CAccountHardware_CompleteSteamControllerRegistration_Response::CAccountHardware_CompleteSteamControllerRegistration_Response(const CAccountHardware_CompleteSteamControllerRegistration_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_CompleteSteamControllerRegistration_Response)
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::SharedCtor() {
}

CAccountHardware_CompleteSteamControllerRegistration_Response::~CAccountHardware_CompleteSteamControllerRegistration_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_CompleteSteamControllerRegistration_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::ArenaDtor(void* object) {
  CAccountHardware_CompleteSteamControllerRegistration_Response* _this = reinterpret_cast< CAccountHardware_CompleteSteamControllerRegistration_Response* >(object);
  (void)_this;
}
void CAccountHardware_CompleteSteamControllerRegistration_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_CompleteSteamControllerRegistration_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_CompleteSteamControllerRegistration_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_CompleteSteamControllerRegistration_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_CompleteSteamControllerRegistration_Response)
  return target;
}

size_t CAccountHardware_CompleteSteamControllerRegistration_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_CompleteSteamControllerRegistration_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_CompleteSteamControllerRegistration_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_CompleteSteamControllerRegistration_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_CompleteSteamControllerRegistration_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::MergeFrom(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_CompleteSteamControllerRegistration_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::CopyFrom(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_CompleteSteamControllerRegistration_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_CompleteSteamControllerRegistration_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_CompleteSteamControllerRegistration_Response::InternalSwap(CAccountHardware_CompleteSteamControllerRegistration_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_CompleteSteamControllerRegistration_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_QueryAccountsRegisteredToSerial_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_QueryAccountsRegisteredToSerial_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_QueryAccountsRegisteredToSerial_Request::CAccountHardware_QueryAccountsRegisteredToSerial_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
}
CAccountHardware_QueryAccountsRegisteredToSerial_Request::CAccountHardware_QueryAccountsRegisteredToSerial_Request(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_QueryAccountsRegisteredToSerial_Request::~CAccountHardware_QueryAccountsRegisteredToSerial_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::ArenaDtor(void* object) {
  CAccountHardware_QueryAccountsRegisteredToSerial_Request* _this = reinterpret_cast< CAccountHardware_QueryAccountsRegisteredToSerial_Request* >(object);
  (void)_this;
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_QueryAccountsRegisteredToSerial_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_QueryAccountsRegisteredToSerial_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  return target;
}

size_t CAccountHardware_QueryAccountsRegisteredToSerial_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_QueryAccountsRegisteredToSerial_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_QueryAccountsRegisteredToSerial_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Request::InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_QueryAccountsRegisteredToSerial_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_registration_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
}
CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&registration_complete_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(registration_complete_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&registration_complete_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(registration_complete_));
}

CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::~CAccountHardware_QueryAccountsRegisteredToSerial_Accounts() {
  // @@protoc_insertion_point(destructor:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::ArenaDtor(void* object) {
  CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* _this = reinterpret_cast< CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* >(object);
  (void)_this;
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&registration_complete_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(registration_complete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool registration_complete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_registration_complete(&has_bits);
          registration_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional bool registration_complete = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_registration_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  return target;
}

size_t CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional bool registration_complete = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
    MergeFrom(*source);
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      registration_complete_ = from.registration_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::IsInitialized() const {
  return true;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, registration_complete_)
      + sizeof(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::registration_complete_)
      - PROTOBUF_FIELD_OFFSET(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_QueryAccountsRegisteredToSerial_Response::_Internal {
 public:
};

CAccountHardware_QueryAccountsRegisteredToSerial_Response::CAccountHardware_QueryAccountsRegisteredToSerial_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
}
CAccountHardware_QueryAccountsRegisteredToSerial_Response::CAccountHardware_QueryAccountsRegisteredToSerial_Response(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SharedCtor() {
}

CAccountHardware_QueryAccountsRegisteredToSerial_Response::~CAccountHardware_QueryAccountsRegisteredToSerial_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::ArenaDtor(void* object) {
  CAccountHardware_QueryAccountsRegisteredToSerial_Response* _this = reinterpret_cast< CAccountHardware_QueryAccountsRegisteredToSerial_Response* >(object);
  (void)_this;
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_QueryAccountsRegisteredToSerial_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_QueryAccountsRegisteredToSerial_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_QueryAccountsRegisteredToSerial_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  return target;
}

size_t CAccountHardware_QueryAccountsRegisteredToSerial_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_QueryAccountsRegisteredToSerial_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_QueryAccountsRegisteredToSerial_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_QueryAccountsRegisteredToSerial_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_QueryAccountsRegisteredToSerial_Response::InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_QueryAccountsRegisteredToSerial_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SteamControllerSetConfig_ControllerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_SteamControllerSetConfig_ControllerConfig>()._has_bits_);
  static void set_has_appidorname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_templatename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_SteamControllerSetConfig_ControllerConfig::CAccountHardware_SteamControllerSetConfig_ControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
}
CAccountHardware_SteamControllerSetConfig_ControllerConfig::CAccountHardware_SteamControllerSetConfig_ControllerConfig(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appidorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appidorname()) {
    appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appidorname(), 
      GetArena());
  }
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_templatename()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SharedCtor() {
appidorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
publishedfileid_ = PROTOBUF_ULONGLONG(0);
}

CAccountHardware_SteamControllerSetConfig_ControllerConfig::~CAccountHardware_SteamControllerSetConfig_ControllerConfig() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appidorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::ArenaDtor(void* object) {
  CAccountHardware_SteamControllerSetConfig_ControllerConfig* _this = reinterpret_cast< CAccountHardware_SteamControllerSetConfig_ControllerConfig* >(object);
  (void)_this;
}
void CAccountHardware_SteamControllerSetConfig_ControllerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SteamControllerSetConfig_ControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appidorname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      templatename_.ClearNonDefaultToEmpty();
    }
  }
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SteamControllerSetConfig_ControllerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string appidorname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_appidorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string templatename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SteamControllerSetConfig_ControllerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appidorname().data(), static_cast<int>(this->_internal_appidorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appidorname(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_templatename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  return target;
}

size_t CAccountHardware_SteamControllerSetConfig_ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string appidorname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appidorname());
    }

    // optional string templatename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_templatename());
    }

    // optional uint64 publishedfileid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerSetConfig_ControllerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SteamControllerSetConfig_ControllerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::MergeFrom(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appidorname(from._internal_appidorname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_templatename(from._internal_templatename());
    }
    if (cached_has_bits & 0x00000004u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::CopyFrom(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerSetConfig_ControllerConfig::InternalSwap(CAccountHardware_SteamControllerSetConfig_ControllerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appidorname_.Swap(&other->appidorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SteamControllerSetConfig_ControllerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SteamControllerSetConfig_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_SteamControllerSetConfig_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_only_for_this_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CAccountHardware_SteamControllerSetConfig_Request::CAccountHardware_SteamControllerSetConfig_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configurations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SteamControllerSetConfig_Request)
}
CAccountHardware_SteamControllerSetConfig_Request::CAccountHardware_SteamControllerSetConfig_Request(const CAccountHardware_SteamControllerSetConfig_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerSetConfig_Request)
}

void CAccountHardware_SteamControllerSetConfig_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&only_for_this_serial_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
controller_type_ = 2;
}

CAccountHardware_SteamControllerSetConfig_Request::~CAccountHardware_SteamControllerSetConfig_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerSetConfig_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SteamControllerSetConfig_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerSetConfig_Request::ArenaDtor(void* object) {
  CAccountHardware_SteamControllerSetConfig_Request* _this = reinterpret_cast< CAccountHardware_SteamControllerSetConfig_Request* >(object);
  (void)_this;
}
void CAccountHardware_SteamControllerSetConfig_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SteamControllerSetConfig_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SteamControllerSetConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerSetConfig_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configurations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_for_this_serial_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
    controller_type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SteamControllerSetConfig_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerSetConfig_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerSetConfig_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 controller_type = 5 [default = 2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_controller_type(&has_bits);
          controller_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_for_this_serial = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_only_for_this_serial(&has_bits);
          only_for_this_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SteamControllerSetConfig_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerSetConfig_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerSetConfig_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid(), target);
  }

  // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configurations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_configurations(i), target, stream);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_controller_type(), target);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_only_for_this_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerSetConfig_Request)
  return target;
}

size_t CAccountHardware_SteamControllerSetConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerSetConfig_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
  total_size += 1UL * this->_internal_configurations_size();
  for (const auto& msg : this->configurations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

    // optional uint32 accountid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional bool only_for_this_serial = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 controller_type = 5 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_controller_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerSetConfig_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerSetConfig_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SteamControllerSetConfig_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerSetConfig_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerSetConfig_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerSetConfig_Request::MergeFrom(const CAccountHardware_SteamControllerSetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_for_this_serial_ = from.only_for_this_serial_;
    }
    if (cached_has_bits & 0x00000010u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerSetConfig_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerSetConfig_Request::CopyFrom(const CAccountHardware_SteamControllerSetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerSetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerSetConfig_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerSetConfig_Request::InternalSwap(CAccountHardware_SteamControllerSetConfig_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configurations_.InternalSwap(&other->configurations_);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountHardware_SteamControllerSetConfig_Request, only_for_this_serial_)
      + sizeof(CAccountHardware_SteamControllerSetConfig_Request::only_for_this_serial_)
      - PROTOBUF_FIELD_OFFSET(CAccountHardware_SteamControllerSetConfig_Request, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
  swap(controller_type_, other->controller_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SteamControllerSetConfig_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SteamControllerSetConfig_Response::_Internal {
 public:
};

CAccountHardware_SteamControllerSetConfig_Response::CAccountHardware_SteamControllerSetConfig_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SteamControllerSetConfig_Response)
}
CAccountHardware_SteamControllerSetConfig_Response::CAccountHardware_SteamControllerSetConfig_Response(const CAccountHardware_SteamControllerSetConfig_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerSetConfig_Response)
}

void CAccountHardware_SteamControllerSetConfig_Response::SharedCtor() {
}

CAccountHardware_SteamControllerSetConfig_Response::~CAccountHardware_SteamControllerSetConfig_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerSetConfig_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SteamControllerSetConfig_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_SteamControllerSetConfig_Response::ArenaDtor(void* object) {
  CAccountHardware_SteamControllerSetConfig_Response* _this = reinterpret_cast< CAccountHardware_SteamControllerSetConfig_Response* >(object);
  (void)_this;
}
void CAccountHardware_SteamControllerSetConfig_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SteamControllerSetConfig_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SteamControllerSetConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerSetConfig_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SteamControllerSetConfig_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SteamControllerSetConfig_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerSetConfig_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerSetConfig_Response)
  return target;
}

size_t CAccountHardware_SteamControllerSetConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerSetConfig_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerSetConfig_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerSetConfig_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SteamControllerSetConfig_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerSetConfig_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerSetConfig_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerSetConfig_Response::MergeFrom(const CAccountHardware_SteamControllerSetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_SteamControllerSetConfig_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerSetConfig_Response::CopyFrom(const CAccountHardware_SteamControllerSetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerSetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerSetConfig_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerSetConfig_Response::InternalSwap(CAccountHardware_SteamControllerSetConfig_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SteamControllerSetConfig_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SteamControllerGetConfig_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_SteamControllerGetConfig_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appidorname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_only_for_this_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CAccountHardware_SteamControllerGetConfig_Request::CAccountHardware_SteamControllerGetConfig_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SteamControllerGetConfig_Request)
}
CAccountHardware_SteamControllerGetConfig_Request::CAccountHardware_SteamControllerGetConfig_Request(const CAccountHardware_SteamControllerGetConfig_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  appidorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appidorname()) {
    appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appidorname(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerGetConfig_Request)
}

void CAccountHardware_SteamControllerGetConfig_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appidorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&only_for_this_serial_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
controller_type_ = 2;
}

CAccountHardware_SteamControllerGetConfig_Request::~CAccountHardware_SteamControllerGetConfig_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerGetConfig_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SteamControllerGetConfig_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appidorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerGetConfig_Request::ArenaDtor(void* object) {
  CAccountHardware_SteamControllerGetConfig_Request* _this = reinterpret_cast< CAccountHardware_SteamControllerGetConfig_Request* >(object);
  (void)_this;
}
void CAccountHardware_SteamControllerGetConfig_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SteamControllerGetConfig_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SteamControllerGetConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerGetConfig_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      appidorname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_for_this_serial_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(only_for_this_serial_));
    controller_type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SteamControllerGetConfig_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerGetConfig_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerGetConfig_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string appidorname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_appidorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerGetConfig_Request.appidorname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 controller_type = 5 [default = 2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_controller_type(&has_bits);
          controller_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_for_this_serial = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_only_for_this_serial(&has_bits);
          only_for_this_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SteamControllerGetConfig_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerGetConfig_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid(), target);
  }

  // optional string appidorname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appidorname().data(), static_cast<int>(this->_internal_appidorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_Request.appidorname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_appidorname(), target);
  }

  // optional int32 controller_type = 5 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_controller_type(), target);
  }

  // optional bool only_for_this_serial = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_only_for_this_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerGetConfig_Request)
  return target;
}

size_t CAccountHardware_SteamControllerGetConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerGetConfig_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

    // optional string appidorname = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appidorname());
    }

    // optional uint32 accountid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional bool only_for_this_serial = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 controller_type = 5 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_controller_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerGetConfig_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerGetConfig_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SteamControllerGetConfig_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerGetConfig_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerGetConfig_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerGetConfig_Request::MergeFrom(const CAccountHardware_SteamControllerGetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_appidorname(from._internal_appidorname());
    }
    if (cached_has_bits & 0x00000008u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000010u) {
      only_for_this_serial_ = from.only_for_this_serial_;
    }
    if (cached_has_bits & 0x00000020u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerGetConfig_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerGetConfig_Request::CopyFrom(const CAccountHardware_SteamControllerGetConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerGetConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerGetConfig_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerGetConfig_Request::InternalSwap(CAccountHardware_SteamControllerGetConfig_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appidorname_.Swap(&other->appidorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountHardware_SteamControllerGetConfig_Request, only_for_this_serial_)
      + sizeof(CAccountHardware_SteamControllerGetConfig_Request::only_for_this_serial_)
      - PROTOBUF_FIELD_OFFSET(CAccountHardware_SteamControllerGetConfig_Request, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
  swap(controller_type_, other->controller_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SteamControllerGetConfig_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SteamControllerGetConfig_ControllerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_SteamControllerGetConfig_ControllerConfig>()._has_bits_);
  static void set_has_appidorname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_templatename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_autosave(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CAccountHardware_SteamControllerGetConfig_ControllerConfig::CAccountHardware_SteamControllerGetConfig_ControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
}
CAccountHardware_SteamControllerGetConfig_ControllerConfig::CAccountHardware_SteamControllerGetConfig_ControllerConfig(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appidorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_appidorname()) {
    appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appidorname(), 
      GetArena());
  }
  templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_templatename()) {
    templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_templatename(), 
      GetArena());
  }
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autosave_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(autosave_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SharedCtor() {
appidorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
templatename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&autosave_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(autosave_));
}

CAccountHardware_SteamControllerGetConfig_ControllerConfig::~CAccountHardware_SteamControllerGetConfig_ControllerConfig() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appidorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  templatename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::ArenaDtor(void* object) {
  CAccountHardware_SteamControllerGetConfig_ControllerConfig* _this = reinterpret_cast< CAccountHardware_SteamControllerGetConfig_ControllerConfig* >(object);
  (void)_this;
}
void CAccountHardware_SteamControllerGetConfig_ControllerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SteamControllerGetConfig_ControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appidorname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      templatename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autosave_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(autosave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SteamControllerGetConfig_ControllerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string appidorname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_appidorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string templatename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_templatename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serial_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autosave = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_autosave(&has_bits);
          autosave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SteamControllerGetConfig_ControllerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string appidorname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_appidorname().data(), static_cast<int>(this->_internal_appidorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appidorname(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional string templatename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_templatename().data(), static_cast<int>(this->_internal_templatename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_templatename(), target);
  }

  // optional string serial_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serial_number(), target);
  }

  // optional bool autosave = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_autosave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  return target;
}

size_t CAccountHardware_SteamControllerGetConfig_ControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string appidorname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appidorname());
    }

    // optional string templatename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_templatename());
    }

    // optional string serial_number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional uint64 publishedfileid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

    // optional bool autosave = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerGetConfig_ControllerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SteamControllerGetConfig_ControllerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::MergeFrom(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_appidorname(from._internal_appidorname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_templatename(from._internal_templatename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000008u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000010u) {
      autosave_ = from.autosave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::CopyFrom(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerGetConfig_ControllerConfig::InternalSwap(CAccountHardware_SteamControllerGetConfig_ControllerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appidorname_.Swap(&other->appidorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  templatename_.Swap(&other->templatename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountHardware_SteamControllerGetConfig_ControllerConfig, autosave_)
      + sizeof(CAccountHardware_SteamControllerGetConfig_ControllerConfig::autosave_)
      - PROTOBUF_FIELD_OFFSET(CAccountHardware_SteamControllerGetConfig_ControllerConfig, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SteamControllerGetConfig_ControllerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SteamControllerGetConfig_Response::_Internal {
 public:
};

CAccountHardware_SteamControllerGetConfig_Response::CAccountHardware_SteamControllerGetConfig_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configurations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SteamControllerGetConfig_Response)
}
CAccountHardware_SteamControllerGetConfig_Response::CAccountHardware_SteamControllerGetConfig_Response(const CAccountHardware_SteamControllerGetConfig_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SteamControllerGetConfig_Response)
}

void CAccountHardware_SteamControllerGetConfig_Response::SharedCtor() {
}

CAccountHardware_SteamControllerGetConfig_Response::~CAccountHardware_SteamControllerGetConfig_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SteamControllerGetConfig_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SteamControllerGetConfig_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_SteamControllerGetConfig_Response::ArenaDtor(void* object) {
  CAccountHardware_SteamControllerGetConfig_Response* _this = reinterpret_cast< CAccountHardware_SteamControllerGetConfig_Response* >(object);
  (void)_this;
}
void CAccountHardware_SteamControllerGetConfig_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SteamControllerGetConfig_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SteamControllerGetConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SteamControllerGetConfig_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configurations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SteamControllerGetConfig_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SteamControllerGetConfig_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SteamControllerGetConfig_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configurations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configurations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SteamControllerGetConfig_Response)
  return target;
}

size_t CAccountHardware_SteamControllerGetConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SteamControllerGetConfig_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
  total_size += 1UL * this->_internal_configurations_size();
  for (const auto& msg : this->configurations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SteamControllerGetConfig_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SteamControllerGetConfig_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SteamControllerGetConfig_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SteamControllerGetConfig_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SteamControllerGetConfig_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_SteamControllerGetConfig_Response::MergeFrom(const CAccountHardware_SteamControllerGetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
}

void CAccountHardware_SteamControllerGetConfig_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SteamControllerGetConfig_Response::CopyFrom(const CAccountHardware_SteamControllerGetConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SteamControllerGetConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SteamControllerGetConfig_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_SteamControllerGetConfig_Response::InternalSwap(CAccountHardware_SteamControllerGetConfig_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  configurations_.InternalSwap(&other->configurations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SteamControllerGetConfig_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_DeRegisterSteamController_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_DeRegisterSteamController_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAccountHardware_DeRegisterSteamController_Request::CAccountHardware_DeRegisterSteamController_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_DeRegisterSteamController_Request)
}
CAccountHardware_DeRegisterSteamController_Request::CAccountHardware_DeRegisterSteamController_Request(const CAccountHardware_DeRegisterSteamController_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_DeRegisterSteamController_Request)
}

void CAccountHardware_DeRegisterSteamController_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accountid_ = 0u;
}

CAccountHardware_DeRegisterSteamController_Request::~CAccountHardware_DeRegisterSteamController_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_DeRegisterSteamController_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_DeRegisterSteamController_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_DeRegisterSteamController_Request::ArenaDtor(void* object) {
  CAccountHardware_DeRegisterSteamController_Request* _this = reinterpret_cast< CAccountHardware_DeRegisterSteamController_Request* >(object);
  (void)_this;
}
void CAccountHardware_DeRegisterSteamController_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_DeRegisterSteamController_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_DeRegisterSteamController_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_DeRegisterSteamController_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_DeRegisterSteamController_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_DeRegisterSteamController_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_DeRegisterSteamController_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_DeRegisterSteamController_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_DeRegisterSteamController_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_DeRegisterSteamController_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_DeRegisterSteamController_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_DeRegisterSteamController_Request)
  return target;
}

size_t CAccountHardware_DeRegisterSteamController_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_DeRegisterSteamController_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

    // optional uint32 accountid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_DeRegisterSteamController_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_DeRegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_DeRegisterSteamController_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_DeRegisterSteamController_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_DeRegisterSteamController_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_DeRegisterSteamController_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_DeRegisterSteamController_Request::MergeFrom(const CAccountHardware_DeRegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_DeRegisterSteamController_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_DeRegisterSteamController_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_DeRegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_DeRegisterSteamController_Request::CopyFrom(const CAccountHardware_DeRegisterSteamController_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_DeRegisterSteamController_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_DeRegisterSteamController_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_DeRegisterSteamController_Request::InternalSwap(CAccountHardware_DeRegisterSteamController_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_DeRegisterSteamController_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_DeRegisterSteamController_Response::_Internal {
 public:
};

CAccountHardware_DeRegisterSteamController_Response::CAccountHardware_DeRegisterSteamController_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_DeRegisterSteamController_Response)
}
CAccountHardware_DeRegisterSteamController_Response::CAccountHardware_DeRegisterSteamController_Response(const CAccountHardware_DeRegisterSteamController_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_DeRegisterSteamController_Response)
}

void CAccountHardware_DeRegisterSteamController_Response::SharedCtor() {
}

CAccountHardware_DeRegisterSteamController_Response::~CAccountHardware_DeRegisterSteamController_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_DeRegisterSteamController_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_DeRegisterSteamController_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_DeRegisterSteamController_Response::ArenaDtor(void* object) {
  CAccountHardware_DeRegisterSteamController_Response* _this = reinterpret_cast< CAccountHardware_DeRegisterSteamController_Response* >(object);
  (void)_this;
}
void CAccountHardware_DeRegisterSteamController_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_DeRegisterSteamController_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_DeRegisterSteamController_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_DeRegisterSteamController_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_DeRegisterSteamController_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_DeRegisterSteamController_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_DeRegisterSteamController_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_DeRegisterSteamController_Response)
  return target;
}

size_t CAccountHardware_DeRegisterSteamController_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_DeRegisterSteamController_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_DeRegisterSteamController_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_DeRegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_DeRegisterSteamController_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_DeRegisterSteamController_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_DeRegisterSteamController_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_DeRegisterSteamController_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_DeRegisterSteamController_Response::MergeFrom(const CAccountHardware_DeRegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_DeRegisterSteamController_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_DeRegisterSteamController_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_DeRegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_DeRegisterSteamController_Response::CopyFrom(const CAccountHardware_DeRegisterSteamController_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_DeRegisterSteamController_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_DeRegisterSteamController_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_DeRegisterSteamController_Response::InternalSwap(CAccountHardware_DeRegisterSteamController_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_DeRegisterSteamController_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SetPersonalizationFile_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_SetPersonalizationFile_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAccountHardware_SetPersonalizationFile_Request::CAccountHardware_SetPersonalizationFile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SetPersonalizationFile_Request)
}
CAccountHardware_SetPersonalizationFile_Request::CAccountHardware_SetPersonalizationFile_Request(const CAccountHardware_SetPersonalizationFile_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SetPersonalizationFile_Request)
}

void CAccountHardware_SetPersonalizationFile_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(accountid_));
}

CAccountHardware_SetPersonalizationFile_Request::~CAccountHardware_SetPersonalizationFile_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SetPersonalizationFile_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SetPersonalizationFile_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_SetPersonalizationFile_Request::ArenaDtor(void* object) {
  CAccountHardware_SetPersonalizationFile_Request* _this = reinterpret_cast< CAccountHardware_SetPersonalizationFile_Request* >(object);
  (void)_this;
}
void CAccountHardware_SetPersonalizationFile_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SetPersonalizationFile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SetPersonalizationFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SetPersonalizationFile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serial_number_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SetPersonalizationFile_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_SetPersonalizationFile_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SetPersonalizationFile_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SetPersonalizationFile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_SetPersonalizationFile_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SetPersonalizationFile_Request)
  return target;
}

size_t CAccountHardware_SetPersonalizationFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SetPersonalizationFile_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional uint64 publishedfileid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

    // optional uint32 accountid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SetPersonalizationFile_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SetPersonalizationFile_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SetPersonalizationFile_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SetPersonalizationFile_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SetPersonalizationFile_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_SetPersonalizationFile_Request::MergeFrom(const CAccountHardware_SetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_SetPersonalizationFile_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SetPersonalizationFile_Request::CopyFrom(const CAccountHardware_SetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SetPersonalizationFile_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_SetPersonalizationFile_Request::InternalSwap(CAccountHardware_SetPersonalizationFile_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountHardware_SetPersonalizationFile_Request, accountid_)
      + sizeof(CAccountHardware_SetPersonalizationFile_Request::accountid_)
      - PROTOBUF_FIELD_OFFSET(CAccountHardware_SetPersonalizationFile_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SetPersonalizationFile_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_SetPersonalizationFile_Response::_Internal {
 public:
};

CAccountHardware_SetPersonalizationFile_Response::CAccountHardware_SetPersonalizationFile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_SetPersonalizationFile_Response)
}
CAccountHardware_SetPersonalizationFile_Response::CAccountHardware_SetPersonalizationFile_Response(const CAccountHardware_SetPersonalizationFile_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_SetPersonalizationFile_Response)
}

void CAccountHardware_SetPersonalizationFile_Response::SharedCtor() {
}

CAccountHardware_SetPersonalizationFile_Response::~CAccountHardware_SetPersonalizationFile_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_SetPersonalizationFile_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_SetPersonalizationFile_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_SetPersonalizationFile_Response::ArenaDtor(void* object) {
  CAccountHardware_SetPersonalizationFile_Response* _this = reinterpret_cast< CAccountHardware_SetPersonalizationFile_Response* >(object);
  (void)_this;
}
void CAccountHardware_SetPersonalizationFile_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_SetPersonalizationFile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_SetPersonalizationFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_SetPersonalizationFile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_SetPersonalizationFile_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_SetPersonalizationFile_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_SetPersonalizationFile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_SetPersonalizationFile_Response)
  return target;
}

size_t CAccountHardware_SetPersonalizationFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_SetPersonalizationFile_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_SetPersonalizationFile_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_SetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_SetPersonalizationFile_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_SetPersonalizationFile_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_SetPersonalizationFile_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_SetPersonalizationFile_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_SetPersonalizationFile_Response::MergeFrom(const CAccountHardware_SetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_SetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_SetPersonalizationFile_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_SetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_SetPersonalizationFile_Response::CopyFrom(const CAccountHardware_SetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_SetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_SetPersonalizationFile_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_SetPersonalizationFile_Response::InternalSwap(CAccountHardware_SetPersonalizationFile_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_SetPersonalizationFile_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_GetPersonalizationFile_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_GetPersonalizationFile_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_GetPersonalizationFile_Request::CAccountHardware_GetPersonalizationFile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_GetPersonalizationFile_Request)
}
CAccountHardware_GetPersonalizationFile_Request::CAccountHardware_GetPersonalizationFile_Request(const CAccountHardware_GetPersonalizationFile_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_GetPersonalizationFile_Request)
}

void CAccountHardware_GetPersonalizationFile_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accountid_ = 0u;
}

CAccountHardware_GetPersonalizationFile_Request::~CAccountHardware_GetPersonalizationFile_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_GetPersonalizationFile_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_GetPersonalizationFile_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_GetPersonalizationFile_Request::ArenaDtor(void* object) {
  CAccountHardware_GetPersonalizationFile_Request* _this = reinterpret_cast< CAccountHardware_GetPersonalizationFile_Request* >(object);
  (void)_this;
}
void CAccountHardware_GetPersonalizationFile_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_GetPersonalizationFile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_GetPersonalizationFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_GetPersonalizationFile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serial_number_.ClearNonDefaultToEmpty();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_GetPersonalizationFile_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_GetPersonalizationFile_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_GetPersonalizationFile_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_GetPersonalizationFile_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_GetPersonalizationFile_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_GetPersonalizationFile_Request)
  return target;
}

size_t CAccountHardware_GetPersonalizationFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_GetPersonalizationFile_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_GetPersonalizationFile_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_GetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_GetPersonalizationFile_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_GetPersonalizationFile_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_GetPersonalizationFile_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_GetPersonalizationFile_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_GetPersonalizationFile_Request::MergeFrom(const CAccountHardware_GetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_GetPersonalizationFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_GetPersonalizationFile_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_GetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_GetPersonalizationFile_Request::CopyFrom(const CAccountHardware_GetPersonalizationFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_GetPersonalizationFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_GetPersonalizationFile_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_GetPersonalizationFile_Request::InternalSwap(CAccountHardware_GetPersonalizationFile_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_GetPersonalizationFile_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_GetPersonalizationFile_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_GetPersonalizationFile_Response>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAccountHardware_GetPersonalizationFile_Response::CAccountHardware_GetPersonalizationFile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_GetPersonalizationFile_Response)
}
CAccountHardware_GetPersonalizationFile_Response::CAccountHardware_GetPersonalizationFile_Response(const CAccountHardware_GetPersonalizationFile_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_GetPersonalizationFile_Response)
}

void CAccountHardware_GetPersonalizationFile_Response::SharedCtor() {
publishedfileid_ = PROTOBUF_ULONGLONG(0);
}

CAccountHardware_GetPersonalizationFile_Response::~CAccountHardware_GetPersonalizationFile_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_GetPersonalizationFile_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_GetPersonalizationFile_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_GetPersonalizationFile_Response::ArenaDtor(void* object) {
  CAccountHardware_GetPersonalizationFile_Response* _this = reinterpret_cast< CAccountHardware_GetPersonalizationFile_Response* >(object);
  (void)_this;
}
void CAccountHardware_GetPersonalizationFile_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_GetPersonalizationFile_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_GetPersonalizationFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_GetPersonalizationFile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_GetPersonalizationFile_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_GetPersonalizationFile_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_GetPersonalizationFile_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_GetPersonalizationFile_Response)
  return target;
}

size_t CAccountHardware_GetPersonalizationFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_GetPersonalizationFile_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 publishedfileid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_publishedfileid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_GetPersonalizationFile_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_GetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_GetPersonalizationFile_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_GetPersonalizationFile_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_GetPersonalizationFile_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_GetPersonalizationFile_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_GetPersonalizationFile_Response::MergeFrom(const CAccountHardware_GetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_GetPersonalizationFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publishedfileid()) {
    _internal_set_publishedfileid(from._internal_publishedfileid());
  }
}

void CAccountHardware_GetPersonalizationFile_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_GetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_GetPersonalizationFile_Response::CopyFrom(const CAccountHardware_GetPersonalizationFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_GetPersonalizationFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_GetPersonalizationFile_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_GetPersonalizationFile_Response::InternalSwap(CAccountHardware_GetPersonalizationFile_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_GetPersonalizationFile_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_VRCompatibilityChecRequest_Pair::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_VRCompatibilityChecRequest_Pair>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_VRCompatibilityChecRequest_Pair::CAccountHardware_VRCompatibilityChecRequest_Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_VRCompatibilityChecRequest.Pair)
}
CAccountHardware_VRCompatibilityChecRequest_Pair::CAccountHardware_VRCompatibilityChecRequest_Pair(const CAccountHardware_VRCompatibilityChecRequest_Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_VRCompatibilityChecRequest.Pair)
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_VRCompatibilityChecRequest_Pair::~CAccountHardware_VRCompatibilityChecRequest_Pair() {
  // @@protoc_insertion_point(destructor:CAccountHardware_VRCompatibilityChecRequest.Pair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::ArenaDtor(void* object) {
  CAccountHardware_VRCompatibilityChecRequest_Pair* _this = reinterpret_cast< CAccountHardware_VRCompatibilityChecRequest_Pair* >(object);
  (void)_this;
}
void CAccountHardware_VRCompatibilityChecRequest_Pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_VRCompatibilityChecRequest_Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_VRCompatibilityChecRequest_Pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecRequest.Pair.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecRequest.Pair.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_VRCompatibilityChecRequest_Pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecRequest.Pair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecRequest.Pair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_VRCompatibilityChecRequest.Pair)
  return target;
}

size_t CAccountHardware_VRCompatibilityChecRequest_Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_VRCompatibilityChecRequest_Pair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_VRCompatibilityChecRequest_Pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_VRCompatibilityChecRequest.Pair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_VRCompatibilityChecRequest.Pair)
    MergeFrom(*source);
  }
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::MergeFrom(const CAccountHardware_VRCompatibilityChecRequest_Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::CopyFrom(const CAccountHardware_VRCompatibilityChecRequest_Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_VRCompatibilityChecRequest.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_VRCompatibilityChecRequest_Pair::IsInitialized() const {
  return true;
}

void CAccountHardware_VRCompatibilityChecRequest_Pair::InternalSwap(CAccountHardware_VRCompatibilityChecRequest_Pair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_VRCompatibilityChecRequest_Pair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_VRCompatibilityChecRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_VRCompatibilityChecRequest>()._has_bits_);
  static void set_has_product_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAccountHardware_VRCompatibilityChecRequest::CAccountHardware_VRCompatibilityChecRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_VRCompatibilityChecRequest)
}
CAccountHardware_VRCompatibilityChecRequest::CAccountHardware_VRCompatibilityChecRequest(const CAccountHardware_VRCompatibilityChecRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_product_name()) {
    product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_VRCompatibilityChecRequest)
}

void CAccountHardware_VRCompatibilityChecRequest::SharedCtor() {
product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_VRCompatibilityChecRequest::~CAccountHardware_VRCompatibilityChecRequest() {
  // @@protoc_insertion_point(destructor:CAccountHardware_VRCompatibilityChecRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_VRCompatibilityChecRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_VRCompatibilityChecRequest::ArenaDtor(void* object) {
  CAccountHardware_VRCompatibilityChecRequest* _this = reinterpret_cast< CAccountHardware_VRCompatibilityChecRequest* >(object);
  (void)_this;
}
void CAccountHardware_VRCompatibilityChecRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_VRCompatibilityChecRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_VRCompatibilityChecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_VRCompatibilityChecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    product_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_VRCompatibilityChecRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string product_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecRequest.product_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CAccountHardware_VRCompatibilityChecRequest.Pair values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_VRCompatibilityChecRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_VRCompatibilityChecRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_name().data(), static_cast<int>(this->_internal_product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecRequest.product_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_name(), target);
  }

  // repeated .CAccountHardware_VRCompatibilityChecRequest.Pair values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_VRCompatibilityChecRequest)
  return target;
}

size_t CAccountHardware_VRCompatibilityChecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_VRCompatibilityChecRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAccountHardware_VRCompatibilityChecRequest.Pair values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string product_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_VRCompatibilityChecRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_VRCompatibilityChecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_VRCompatibilityChecRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_VRCompatibilityChecRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_VRCompatibilityChecRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_VRCompatibilityChecRequest)
    MergeFrom(*source);
  }
}

void CAccountHardware_VRCompatibilityChecRequest::MergeFrom(const CAccountHardware_VRCompatibilityChecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_VRCompatibilityChecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_product_name()) {
    _internal_set_product_name(from._internal_product_name());
  }
}

void CAccountHardware_VRCompatibilityChecRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_VRCompatibilityChecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_VRCompatibilityChecRequest::CopyFrom(const CAccountHardware_VRCompatibilityChecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_VRCompatibilityChecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_VRCompatibilityChecRequest::IsInitialized() const {
  return true;
}

void CAccountHardware_VRCompatibilityChecRequest::InternalSwap(CAccountHardware_VRCompatibilityChecRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  product_name_.Swap(&other->product_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_VRCompatibilityChecRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_VRCompatibilityChecResponse_Pair::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_VRCompatibilityChecResponse_Pair>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_VRCompatibilityChecResponse_Pair::CAccountHardware_VRCompatibilityChecResponse_Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_VRCompatibilityChecResponse.Pair)
}
CAccountHardware_VRCompatibilityChecResponse_Pair::CAccountHardware_VRCompatibilityChecResponse_Pair(const CAccountHardware_VRCompatibilityChecResponse_Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_VRCompatibilityChecResponse.Pair)
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_VRCompatibilityChecResponse_Pair::~CAccountHardware_VRCompatibilityChecResponse_Pair() {
  // @@protoc_insertion_point(destructor:CAccountHardware_VRCompatibilityChecResponse.Pair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::ArenaDtor(void* object) {
  CAccountHardware_VRCompatibilityChecResponse_Pair* _this = reinterpret_cast< CAccountHardware_VRCompatibilityChecResponse_Pair* >(object);
  (void)_this;
}
void CAccountHardware_VRCompatibilityChecResponse_Pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_VRCompatibilityChecResponse_Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_VRCompatibilityChecResponse_Pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecResponse.Pair.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecResponse.Pair.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_VRCompatibilityChecResponse_Pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecResponse.Pair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecResponse.Pair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_VRCompatibilityChecResponse.Pair)
  return target;
}

size_t CAccountHardware_VRCompatibilityChecResponse_Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_VRCompatibilityChecResponse_Pair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_VRCompatibilityChecResponse_Pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_VRCompatibilityChecResponse.Pair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_VRCompatibilityChecResponse.Pair)
    MergeFrom(*source);
  }
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::MergeFrom(const CAccountHardware_VRCompatibilityChecResponse_Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::CopyFrom(const CAccountHardware_VRCompatibilityChecResponse_Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_VRCompatibilityChecResponse.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_VRCompatibilityChecResponse_Pair::IsInitialized() const {
  return true;
}

void CAccountHardware_VRCompatibilityChecResponse_Pair::InternalSwap(CAccountHardware_VRCompatibilityChecResponse_Pair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_VRCompatibilityChecResponse_Pair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
}
CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay(const CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::~CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay() {
  // @@protoc_insertion_point(destructor:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::ArenaDtor(void* object) {
  CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay* _this = reinterpret_cast< CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay* >(object);
  (void)_this;
}
void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay.image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay.image");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  return target;
}

size_t CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string image = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
    MergeFrom(*source);
  }
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::MergeFrom(const CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::CopyFrom(const CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::IsInitialized() const {
  return true;
}

void CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::InternalSwap(CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_VRCompatibilityChecResponse::_Internal {
 public:
};

CAccountHardware_VRCompatibilityChecResponse::CAccountHardware_VRCompatibilityChecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena),
  components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_VRCompatibilityChecResponse)
}
CAccountHardware_VRCompatibilityChecResponse::CAccountHardware_VRCompatibilityChecResponse(const CAccountHardware_VRCompatibilityChecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_),
      components_(from.components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_VRCompatibilityChecResponse)
}

void CAccountHardware_VRCompatibilityChecResponse::SharedCtor() {
}

CAccountHardware_VRCompatibilityChecResponse::~CAccountHardware_VRCompatibilityChecResponse() {
  // @@protoc_insertion_point(destructor:CAccountHardware_VRCompatibilityChecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_VRCompatibilityChecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_VRCompatibilityChecResponse::ArenaDtor(void* object) {
  CAccountHardware_VRCompatibilityChecResponse* _this = reinterpret_cast< CAccountHardware_VRCompatibilityChecResponse* >(object);
  (void)_this;
}
void CAccountHardware_VRCompatibilityChecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_VRCompatibilityChecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_VRCompatibilityChecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_VRCompatibilityChecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  components_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_VRCompatibilityChecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CAccountHardware_VRCompatibilityChecResponse.Pair values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_VRCompatibilityChecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_VRCompatibilityChecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAccountHardware_VRCompatibilityChecResponse.Pair values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  // repeated .CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_VRCompatibilityChecResponse)
  return target;
}

size_t CAccountHardware_VRCompatibilityChecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_VRCompatibilityChecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAccountHardware_VRCompatibilityChecResponse.Pair values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CAccountHardware_VRCompatibilityChecResponse.ComponentDisplay components = 2;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_VRCompatibilityChecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_VRCompatibilityChecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_VRCompatibilityChecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_VRCompatibilityChecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_VRCompatibilityChecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_VRCompatibilityChecResponse)
    MergeFrom(*source);
  }
}

void CAccountHardware_VRCompatibilityChecResponse::MergeFrom(const CAccountHardware_VRCompatibilityChecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_VRCompatibilityChecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  components_.MergeFrom(from.components_);
}

void CAccountHardware_VRCompatibilityChecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_VRCompatibilityChecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_VRCompatibilityChecResponse::CopyFrom(const CAccountHardware_VRCompatibilityChecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_VRCompatibilityChecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_VRCompatibilityChecResponse::IsInitialized() const {
  return true;
}

void CAccountHardware_VRCompatibilityChecResponse::InternalSwap(CAccountHardware_VRCompatibilityChecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  components_.InternalSwap(&other->components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_VRCompatibilityChecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_RegisterValveIndexComponent_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_RegisterValveIndexComponent_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manufacturer_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_component_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_estimated_time_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CAccountHardware_RegisterValveIndexComponent_Request::CAccountHardware_RegisterValveIndexComponent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_RegisterValveIndexComponent_Request)
}
CAccountHardware_RegisterValveIndexComponent_Request::CAccountHardware_RegisterValveIndexComponent_Request(const CAccountHardware_RegisterValveIndexComponent_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  manufacturer_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_manufacturer_serial_number()) {
    manufacturer_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manufacturer_serial_number(), 
      GetArena());
  }
  component_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_component_code()) {
    component_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_code(), 
      GetArena());
  }
  ::memcpy(&component_type_, &from.component_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_time_registered_) -
    reinterpret_cast<char*>(&component_type_)) + sizeof(estimated_time_registered_));
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_RegisterValveIndexComponent_Request)
}

void CAccountHardware_RegisterValveIndexComponent_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
manufacturer_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
component_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estimated_time_registered_) -
    reinterpret_cast<char*>(&component_type_)) + sizeof(estimated_time_registered_));
}

CAccountHardware_RegisterValveIndexComponent_Request::~CAccountHardware_RegisterValveIndexComponent_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_RegisterValveIndexComponent_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_RegisterValveIndexComponent_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_RegisterValveIndexComponent_Request::ArenaDtor(void* object) {
  CAccountHardware_RegisterValveIndexComponent_Request* _this = reinterpret_cast< CAccountHardware_RegisterValveIndexComponent_Request* >(object);
  (void)_this;
}
void CAccountHardware_RegisterValveIndexComponent_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_RegisterValveIndexComponent_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_RegisterValveIndexComponent_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_RegisterValveIndexComponent_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      manufacturer_serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      component_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&component_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_time_registered_) -
        reinterpret_cast<char*>(&component_type_)) + sizeof(estimated_time_registered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_RegisterValveIndexComponent_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_RegisterValveIndexComponent_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string manufacturer_serial_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_manufacturer_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string component_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_component_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_RegisterValveIndexComponent_Request.component_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EValveIndexComponent component_type = 4 [default = EValveIndexComponentUnknown];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EValveIndexComponent_IsValid(val))) {
            _internal_set_component_type(static_cast<::EValveIndexComponent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 estimated_time_registered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_estimated_time_registered(&has_bits);
          estimated_time_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_RegisterValveIndexComponent_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_RegisterValveIndexComponent_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterValveIndexComponent_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string manufacturer_serial_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer_serial_number().data(), static_cast<int>(this->_internal_manufacturer_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_manufacturer_serial_number(), target);
  }

  // optional string component_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_code().data(), static_cast<int>(this->_internal_component_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_RegisterValveIndexComponent_Request.component_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_code(), target);
  }

  // optional .EValveIndexComponent component_type = 4 [default = EValveIndexComponentUnknown];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_component_type(), target);
  }

  // optional int32 estimated_time_registered = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_estimated_time_registered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_RegisterValveIndexComponent_Request)
  return target;
}

size_t CAccountHardware_RegisterValveIndexComponent_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_RegisterValveIndexComponent_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string manufacturer_serial_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer_serial_number());
    }

    // optional string component_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_code());
    }

    // optional .EValveIndexComponent component_type = 4 [default = EValveIndexComponentUnknown];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_component_type());
    }

    // optional int32 estimated_time_registered = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_estimated_time_registered());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_RegisterValveIndexComponent_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_RegisterValveIndexComponent_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_RegisterValveIndexComponent_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_RegisterValveIndexComponent_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_RegisterValveIndexComponent_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_RegisterValveIndexComponent_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_RegisterValveIndexComponent_Request::MergeFrom(const CAccountHardware_RegisterValveIndexComponent_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_RegisterValveIndexComponent_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_manufacturer_serial_number(from._internal_manufacturer_serial_number());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_component_code(from._internal_component_code());
    }
    if (cached_has_bits & 0x00000008u) {
      component_type_ = from.component_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      estimated_time_registered_ = from.estimated_time_registered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAccountHardware_RegisterValveIndexComponent_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_RegisterValveIndexComponent_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_RegisterValveIndexComponent_Request::CopyFrom(const CAccountHardware_RegisterValveIndexComponent_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_RegisterValveIndexComponent_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_RegisterValveIndexComponent_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_RegisterValveIndexComponent_Request::InternalSwap(CAccountHardware_RegisterValveIndexComponent_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  manufacturer_serial_number_.Swap(&other->manufacturer_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  component_code_.Swap(&other->component_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAccountHardware_RegisterValveIndexComponent_Request, estimated_time_registered_)
      + sizeof(CAccountHardware_RegisterValveIndexComponent_Request::estimated_time_registered_)
      - PROTOBUF_FIELD_OFFSET(CAccountHardware_RegisterValveIndexComponent_Request, component_type_)>(
          reinterpret_cast<char*>(&component_type_),
          reinterpret_cast<char*>(&other->component_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_RegisterValveIndexComponent_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_RegisterValveIndexComponent_Response::_Internal {
 public:
};

CAccountHardware_RegisterValveIndexComponent_Response::CAccountHardware_RegisterValveIndexComponent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_RegisterValveIndexComponent_Response)
}
CAccountHardware_RegisterValveIndexComponent_Response::CAccountHardware_RegisterValveIndexComponent_Response(const CAccountHardware_RegisterValveIndexComponent_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_RegisterValveIndexComponent_Response)
}

void CAccountHardware_RegisterValveIndexComponent_Response::SharedCtor() {
}

CAccountHardware_RegisterValveIndexComponent_Response::~CAccountHardware_RegisterValveIndexComponent_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_RegisterValveIndexComponent_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_RegisterValveIndexComponent_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAccountHardware_RegisterValveIndexComponent_Response::ArenaDtor(void* object) {
  CAccountHardware_RegisterValveIndexComponent_Response* _this = reinterpret_cast< CAccountHardware_RegisterValveIndexComponent_Response* >(object);
  (void)_this;
}
void CAccountHardware_RegisterValveIndexComponent_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_RegisterValveIndexComponent_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_RegisterValveIndexComponent_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_RegisterValveIndexComponent_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_RegisterValveIndexComponent_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_RegisterValveIndexComponent_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_RegisterValveIndexComponent_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_RegisterValveIndexComponent_Response)
  return target;
}

size_t CAccountHardware_RegisterValveIndexComponent_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_RegisterValveIndexComponent_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_RegisterValveIndexComponent_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_RegisterValveIndexComponent_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_RegisterValveIndexComponent_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_RegisterValveIndexComponent_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_RegisterValveIndexComponent_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_RegisterValveIndexComponent_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_RegisterValveIndexComponent_Response::MergeFrom(const CAccountHardware_RegisterValveIndexComponent_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_RegisterValveIndexComponent_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CAccountHardware_RegisterValveIndexComponent_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_RegisterValveIndexComponent_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_RegisterValveIndexComponent_Response::CopyFrom(const CAccountHardware_RegisterValveIndexComponent_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_RegisterValveIndexComponent_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_RegisterValveIndexComponent_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_RegisterValveIndexComponent_Response::InternalSwap(CAccountHardware_RegisterValveIndexComponent_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_RegisterValveIndexComponent_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_GetSteamDeckComponents_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_GetSteamDeckComponents_Request>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAccountHardware_GetSteamDeckComponents_Request::CAccountHardware_GetSteamDeckComponents_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_GetSteamDeckComponents_Request)
}
CAccountHardware_GetSteamDeckComponents_Request::CAccountHardware_GetSteamDeckComponents_Request(const CAccountHardware_GetSteamDeckComponents_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArena());
  }
  controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_controller_code()) {
    controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controller_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_GetSteamDeckComponents_Request)
}

void CAccountHardware_GetSteamDeckComponents_Request::SharedCtor() {
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controller_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_GetSteamDeckComponents_Request::~CAccountHardware_GetSteamDeckComponents_Request() {
  // @@protoc_insertion_point(destructor:CAccountHardware_GetSteamDeckComponents_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_GetSteamDeckComponents_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  controller_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_GetSteamDeckComponents_Request::ArenaDtor(void* object) {
  CAccountHardware_GetSteamDeckComponents_Request* _this = reinterpret_cast< CAccountHardware_GetSteamDeckComponents_Request* >(object);
  (void)_this;
}
void CAccountHardware_GetSteamDeckComponents_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_GetSteamDeckComponents_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_GetSteamDeckComponents_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_GetSteamDeckComponents_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      controller_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_GetSteamDeckComponents_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_GetSteamDeckComponents_Request.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string controller_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_controller_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_GetSteamDeckComponents_Request.controller_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_GetSteamDeckComponents_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_GetSteamDeckComponents_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_GetSteamDeckComponents_Request.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // optional string controller_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_controller_code().data(), static_cast<int>(this->_internal_controller_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_GetSteamDeckComponents_Request.controller_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_controller_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_GetSteamDeckComponents_Request)
  return target;
}

size_t CAccountHardware_GetSteamDeckComponents_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_GetSteamDeckComponents_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string serial_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serial_number());
    }

    // optional string controller_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_controller_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_GetSteamDeckComponents_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_GetSteamDeckComponents_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_GetSteamDeckComponents_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_GetSteamDeckComponents_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_GetSteamDeckComponents_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_GetSteamDeckComponents_Request)
    MergeFrom(*source);
  }
}

void CAccountHardware_GetSteamDeckComponents_Request::MergeFrom(const CAccountHardware_GetSteamDeckComponents_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_GetSteamDeckComponents_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serial_number(from._internal_serial_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_controller_code(from._internal_controller_code());
    }
  }
}

void CAccountHardware_GetSteamDeckComponents_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_GetSteamDeckComponents_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_GetSteamDeckComponents_Request::CopyFrom(const CAccountHardware_GetSteamDeckComponents_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_GetSteamDeckComponents_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_GetSteamDeckComponents_Request::IsInitialized() const {
  return true;
}

void CAccountHardware_GetSteamDeckComponents_Request::InternalSwap(CAccountHardware_GetSteamDeckComponents_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  controller_code_.Swap(&other->controller_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_GetSteamDeckComponents_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAccountHardware_GetSteamDeckComponents_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CAccountHardware_GetSteamDeckComponents_Response>()._has_bits_);
  static void set_has_json_components(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAccountHardware_GetSteamDeckComponents_Response::CAccountHardware_GetSteamDeckComponents_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAccountHardware_GetSteamDeckComponents_Response)
}
CAccountHardware_GetSteamDeckComponents_Response::CAccountHardware_GetSteamDeckComponents_Response(const CAccountHardware_GetSteamDeckComponents_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_components_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_json_components()) {
    json_components_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_components(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAccountHardware_GetSteamDeckComponents_Response)
}

void CAccountHardware_GetSteamDeckComponents_Response::SharedCtor() {
json_components_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAccountHardware_GetSteamDeckComponents_Response::~CAccountHardware_GetSteamDeckComponents_Response() {
  // @@protoc_insertion_point(destructor:CAccountHardware_GetSteamDeckComponents_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAccountHardware_GetSteamDeckComponents_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  json_components_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAccountHardware_GetSteamDeckComponents_Response::ArenaDtor(void* object) {
  CAccountHardware_GetSteamDeckComponents_Response* _this = reinterpret_cast< CAccountHardware_GetSteamDeckComponents_Response* >(object);
  (void)_this;
}
void CAccountHardware_GetSteamDeckComponents_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAccountHardware_GetSteamDeckComponents_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAccountHardware_GetSteamDeckComponents_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CAccountHardware_GetSteamDeckComponents_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_components_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAccountHardware_GetSteamDeckComponents_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string json_components = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_json_components();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAccountHardware_GetSteamDeckComponents_Response.json_components");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAccountHardware_GetSteamDeckComponents_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAccountHardware_GetSteamDeckComponents_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_components = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_components().data(), static_cast<int>(this->_internal_json_components().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAccountHardware_GetSteamDeckComponents_Response.json_components");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json_components(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAccountHardware_GetSteamDeckComponents_Response)
  return target;
}

size_t CAccountHardware_GetSteamDeckComponents_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAccountHardware_GetSteamDeckComponents_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string json_components = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_components());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAccountHardware_GetSteamDeckComponents_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAccountHardware_GetSteamDeckComponents_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CAccountHardware_GetSteamDeckComponents_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAccountHardware_GetSteamDeckComponents_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAccountHardware_GetSteamDeckComponents_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAccountHardware_GetSteamDeckComponents_Response)
    MergeFrom(*source);
  }
}

void CAccountHardware_GetSteamDeckComponents_Response::MergeFrom(const CAccountHardware_GetSteamDeckComponents_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAccountHardware_GetSteamDeckComponents_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_json_components()) {
    _internal_set_json_components(from._internal_json_components());
  }
}

void CAccountHardware_GetSteamDeckComponents_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAccountHardware_GetSteamDeckComponents_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountHardware_GetSteamDeckComponents_Response::CopyFrom(const CAccountHardware_GetSteamDeckComponents_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAccountHardware_GetSteamDeckComponents_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountHardware_GetSteamDeckComponents_Response::IsInitialized() const {
  return true;
}

void CAccountHardware_GetSteamDeckComponents_Response::InternalSwap(CAccountHardware_GetSteamDeckComponents_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  json_components_.Swap(&other->json_components_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAccountHardware_GetSteamDeckComponents_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AccountHardware::~AccountHardware() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* AccountHardware::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* AccountHardware::GetDescriptor() {
  return descriptor();
}

void AccountHardware::RegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_RegisterSteamController_Request*,
                         ::CAccountHardware_RegisterSteamController_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterSteamController() not implemented.");
  done->Run();
}

void AccountHardware::CompleteSteamControllerRegistration(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_CompleteSteamControllerRegistration_Request*,
                         ::CAccountHardware_CompleteSteamControllerRegistration_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CompleteSteamControllerRegistration() not implemented.");
  done->Run();
}

void AccountHardware::QueryAccountsRegisteredToController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request*,
                         ::CAccountHardware_QueryAccountsRegisteredToSerial_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryAccountsRegisteredToController() not implemented.");
  done->Run();
}

void AccountHardware::SetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_SteamControllerSetConfig_Request*,
                         ::CAccountHardware_SteamControllerSetConfig_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetDesiredControllerConfigForApp() not implemented.");
  done->Run();
}

void AccountHardware::GetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_SteamControllerGetConfig_Request*,
                         ::CAccountHardware_SteamControllerGetConfig_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDesiredControllerConfigForApp() not implemented.");
  done->Run();
}

void AccountHardware::DeRegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_DeRegisterSteamController_Request*,
                         ::CAccountHardware_DeRegisterSteamController_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeRegisterSteamController() not implemented.");
  done->Run();
}

void AccountHardware::SetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_SetPersonalizationFile_Request*,
                         ::CAccountHardware_SetPersonalizationFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetControllerPersonalizationFile() not implemented.");
  done->Run();
}

void AccountHardware::GetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_GetPersonalizationFile_Request*,
                         ::CAccountHardware_GetPersonalizationFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetControllerPersonalizationFile() not implemented.");
  done->Run();
}

void AccountHardware::VRCompatibilityCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_VRCompatibilityChecRequest*,
                         ::CAccountHardware_VRCompatibilityChecResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method VRCompatibilityCheck() not implemented.");
  done->Run();
}

void AccountHardware::RegisterValveIndexComponent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_RegisterValveIndexComponent_Request*,
                         ::CAccountHardware_RegisterValveIndexComponent_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterValveIndexComponent() not implemented.");
  done->Run();
}

void AccountHardware::GetSteamDeckComponents(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CAccountHardware_GetSteamDeckComponents_Request*,
                         ::CAccountHardware_GetSteamDeckComponents_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSteamDeckComponents() not implemented.");
  done->Run();
}

void AccountHardware::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5faccounthardware_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      RegisterSteamController(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_RegisterSteamController_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_RegisterSteamController_Response*>(
                 response),
             done);
      break;
    case 1:
      CompleteSteamControllerRegistration(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_CompleteSteamControllerRegistration_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_CompleteSteamControllerRegistration_Response*>(
                 response),
             done);
      break;
    case 2:
      QueryAccountsRegisteredToController(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_QueryAccountsRegisteredToSerial_Response*>(
                 response),
             done);
      break;
    case 3:
      SetDesiredControllerConfigForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_SteamControllerSetConfig_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_SteamControllerSetConfig_Response*>(
                 response),
             done);
      break;
    case 4:
      GetDesiredControllerConfigForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_SteamControllerGetConfig_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_SteamControllerGetConfig_Response*>(
                 response),
             done);
      break;
    case 5:
      DeRegisterSteamController(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_DeRegisterSteamController_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_DeRegisterSteamController_Response*>(
                 response),
             done);
      break;
    case 6:
      SetControllerPersonalizationFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_SetPersonalizationFile_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_SetPersonalizationFile_Response*>(
                 response),
             done);
      break;
    case 7:
      GetControllerPersonalizationFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_GetPersonalizationFile_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_GetPersonalizationFile_Response*>(
                 response),
             done);
      break;
    case 8:
      VRCompatibilityCheck(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_VRCompatibilityChecRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_VRCompatibilityChecResponse*>(
                 response),
             done);
      break;
    case 9:
      RegisterValveIndexComponent(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_RegisterValveIndexComponent_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_RegisterValveIndexComponent_Response*>(
                 response),
             done);
      break;
    case 10:
      GetSteamDeckComponents(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CAccountHardware_GetSteamDeckComponents_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CAccountHardware_GetSteamDeckComponents_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& AccountHardware::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAccountHardware_RegisterSteamController_Request::default_instance();
    case 1:
      return ::CAccountHardware_CompleteSteamControllerRegistration_Request::default_instance();
    case 2:
      return ::CAccountHardware_QueryAccountsRegisteredToSerial_Request::default_instance();
    case 3:
      return ::CAccountHardware_SteamControllerSetConfig_Request::default_instance();
    case 4:
      return ::CAccountHardware_SteamControllerGetConfig_Request::default_instance();
    case 5:
      return ::CAccountHardware_DeRegisterSteamController_Request::default_instance();
    case 6:
      return ::CAccountHardware_SetPersonalizationFile_Request::default_instance();
    case 7:
      return ::CAccountHardware_GetPersonalizationFile_Request::default_instance();
    case 8:
      return ::CAccountHardware_VRCompatibilityChecRequest::default_instance();
    case 9:
      return ::CAccountHardware_RegisterValveIndexComponent_Request::default_instance();
    case 10:
      return ::CAccountHardware_GetSteamDeckComponents_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& AccountHardware::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CAccountHardware_RegisterSteamController_Response::default_instance();
    case 1:
      return ::CAccountHardware_CompleteSteamControllerRegistration_Response::default_instance();
    case 2:
      return ::CAccountHardware_QueryAccountsRegisteredToSerial_Response::default_instance();
    case 3:
      return ::CAccountHardware_SteamControllerSetConfig_Response::default_instance();
    case 4:
      return ::CAccountHardware_SteamControllerGetConfig_Response::default_instance();
    case 5:
      return ::CAccountHardware_DeRegisterSteamController_Response::default_instance();
    case 6:
      return ::CAccountHardware_SetPersonalizationFile_Response::default_instance();
    case 7:
      return ::CAccountHardware_GetPersonalizationFile_Response::default_instance();
    case 8:
      return ::CAccountHardware_VRCompatibilityChecResponse::default_instance();
    case 9:
      return ::CAccountHardware_RegisterValveIndexComponent_Response::default_instance();
    case 10:
      return ::CAccountHardware_GetSteamDeckComponents_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

AccountHardware_Stub::AccountHardware_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AccountHardware_Stub::AccountHardware_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
AccountHardware_Stub::~AccountHardware_Stub() {
  if (owns_channel_) delete channel_;
}

void AccountHardware_Stub::RegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_RegisterSteamController_Request* request,
                              ::CAccountHardware_RegisterSteamController_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AccountHardware_Stub::CompleteSteamControllerRegistration(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_CompleteSteamControllerRegistration_Request* request,
                              ::CAccountHardware_CompleteSteamControllerRegistration_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AccountHardware_Stub::QueryAccountsRegisteredToController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* request,
                              ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AccountHardware_Stub::SetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_SteamControllerSetConfig_Request* request,
                              ::CAccountHardware_SteamControllerSetConfig_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void AccountHardware_Stub::GetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_SteamControllerGetConfig_Request* request,
                              ::CAccountHardware_SteamControllerGetConfig_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void AccountHardware_Stub::DeRegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_DeRegisterSteamController_Request* request,
                              ::CAccountHardware_DeRegisterSteamController_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void AccountHardware_Stub::SetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_SetPersonalizationFile_Request* request,
                              ::CAccountHardware_SetPersonalizationFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void AccountHardware_Stub::GetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_GetPersonalizationFile_Request* request,
                              ::CAccountHardware_GetPersonalizationFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void AccountHardware_Stub::VRCompatibilityCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_VRCompatibilityChecRequest* request,
                              ::CAccountHardware_VRCompatibilityChecResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void AccountHardware_Stub::RegisterValveIndexComponent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_RegisterValveIndexComponent_Request* request,
                              ::CAccountHardware_RegisterValveIndexComponent_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void AccountHardware_Stub::GetSteamDeckComponents(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CAccountHardware_GetSteamDeckComponents_Request* request,
                              ::CAccountHardware_GetSteamDeckComponents_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CAccountHardware_RegisterSteamController_Request* Arena::CreateMaybeMessage< ::CAccountHardware_RegisterSteamController_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_RegisterSteamController_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_RegisterSteamController_Response* Arena::CreateMaybeMessage< ::CAccountHardware_RegisterSteamController_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_RegisterSteamController_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_CompleteSteamControllerRegistration_Request* Arena::CreateMaybeMessage< ::CAccountHardware_CompleteSteamControllerRegistration_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_CompleteSteamControllerRegistration_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_CompleteSteamControllerRegistration_Response* Arena::CreateMaybeMessage< ::CAccountHardware_CompleteSteamControllerRegistration_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_CompleteSteamControllerRegistration_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* Arena::CreateMaybeMessage< ::CAccountHardware_QueryAccountsRegisteredToSerial_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_QueryAccountsRegisteredToSerial_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* Arena::CreateMaybeMessage< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* Arena::CreateMaybeMessage< ::CAccountHardware_QueryAccountsRegisteredToSerial_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_QueryAccountsRegisteredToSerial_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SteamControllerSetConfig_Request* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerSetConfig_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SteamControllerSetConfig_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SteamControllerSetConfig_Response* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerSetConfig_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SteamControllerSetConfig_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SteamControllerGetConfig_Request* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerGetConfig_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SteamControllerGetConfig_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SteamControllerGetConfig_Response* Arena::CreateMaybeMessage< ::CAccountHardware_SteamControllerGetConfig_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SteamControllerGetConfig_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_DeRegisterSteamController_Request* Arena::CreateMaybeMessage< ::CAccountHardware_DeRegisterSteamController_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_DeRegisterSteamController_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_DeRegisterSteamController_Response* Arena::CreateMaybeMessage< ::CAccountHardware_DeRegisterSteamController_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_DeRegisterSteamController_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SetPersonalizationFile_Request* Arena::CreateMaybeMessage< ::CAccountHardware_SetPersonalizationFile_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SetPersonalizationFile_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_SetPersonalizationFile_Response* Arena::CreateMaybeMessage< ::CAccountHardware_SetPersonalizationFile_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_SetPersonalizationFile_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_GetPersonalizationFile_Request* Arena::CreateMaybeMessage< ::CAccountHardware_GetPersonalizationFile_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_GetPersonalizationFile_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_GetPersonalizationFile_Response* Arena::CreateMaybeMessage< ::CAccountHardware_GetPersonalizationFile_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_GetPersonalizationFile_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_VRCompatibilityChecRequest_Pair* Arena::CreateMaybeMessage< ::CAccountHardware_VRCompatibilityChecRequest_Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_VRCompatibilityChecRequest_Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_VRCompatibilityChecRequest* Arena::CreateMaybeMessage< ::CAccountHardware_VRCompatibilityChecRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_VRCompatibilityChecRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_VRCompatibilityChecResponse_Pair* Arena::CreateMaybeMessage< ::CAccountHardware_VRCompatibilityChecResponse_Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_VRCompatibilityChecResponse_Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay* Arena::CreateMaybeMessage< ::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_VRCompatibilityChecResponse_ComponentDisplay >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_VRCompatibilityChecResponse* Arena::CreateMaybeMessage< ::CAccountHardware_VRCompatibilityChecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_VRCompatibilityChecResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_RegisterValveIndexComponent_Request* Arena::CreateMaybeMessage< ::CAccountHardware_RegisterValveIndexComponent_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_RegisterValveIndexComponent_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_RegisterValveIndexComponent_Response* Arena::CreateMaybeMessage< ::CAccountHardware_RegisterValveIndexComponent_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_RegisterValveIndexComponent_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_GetSteamDeckComponents_Request* Arena::CreateMaybeMessage< ::CAccountHardware_GetSteamDeckComponents_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_GetSteamDeckComponents_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CAccountHardware_GetSteamDeckComponents_Response* Arena::CreateMaybeMessage< ::CAccountHardware_GetSteamDeckComponents_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAccountHardware_GetSteamDeckComponents_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
