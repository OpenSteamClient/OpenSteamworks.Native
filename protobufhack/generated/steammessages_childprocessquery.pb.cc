// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_childprocessquery.proto

#include "steammessages_childprocessquery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgChildProcessQueryResponse::CMsgChildProcessQueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CMsgChildProcessQueryResponseDefaultTypeInternal {
  constexpr CMsgChildProcessQueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgChildProcessQueryResponseDefaultTypeInternal() {}
  union {
    CMsgChildProcessQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgChildProcessQueryResponseDefaultTypeInternal _CMsgChildProcessQueryResponse_default_instance_;
constexpr CMsgChildProcessQueryGpuTopology_GpuInfo::CMsgChildProcessQueryGpuTopology_GpuInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , driver_id_(0)

  , vram_size_bytes_(PROTOBUF_ULONGLONG(0))
  , driver_version_major_(0)
  , driver_version_minor_(0)
  , driver_version_patch_(0){}
struct CMsgChildProcessQueryGpuTopology_GpuInfoDefaultTypeInternal {
  constexpr CMsgChildProcessQueryGpuTopology_GpuInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgChildProcessQueryGpuTopology_GpuInfoDefaultTypeInternal() {}
  union {
    CMsgChildProcessQueryGpuTopology_GpuInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgChildProcessQueryGpuTopology_GpuInfoDefaultTypeInternal _CMsgChildProcessQueryGpuTopology_GpuInfo_default_instance_;
constexpr CMsgChildProcessQueryGpuTopology::CMsgChildProcessQueryGpuTopology(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gpus_()
  , default_gpu_id_(0u){}
struct CMsgChildProcessQueryGpuTopologyDefaultTypeInternal {
  constexpr CMsgChildProcessQueryGpuTopologyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgChildProcessQueryGpuTopologyDefaultTypeInternal() {}
  union {
    CMsgChildProcessQueryGpuTopology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgChildProcessQueryGpuTopologyDefaultTypeInternal _CMsgChildProcessQueryGpuTopology_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fchildprocessquery_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fchildprocessquery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fchildprocessquery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fchildprocessquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, vram_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, driver_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, driver_version_major_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, driver_version_minor_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology_GpuInfo, driver_version_patch_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology, gpus_),
  PROTOBUF_FIELD_OFFSET(::CMsgChildProcessQueryGpuTopology, default_gpu_id_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CMsgChildProcessQueryResponse)},
  { 7, 19, sizeof(::CMsgChildProcessQueryGpuTopology_GpuInfo)},
  { 26, 33, sizeof(::CMsgChildProcessQueryGpuTopology)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgChildProcessQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgChildProcessQueryGpuTopology_GpuInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgChildProcessQueryGpuTopology_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fchildprocessquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_childprocessquery.proto\032"
  " google/protobuf/descriptor.proto\032\013enums"
  ".proto\"f\n\035CMsgChildProcessQueryResponse\022"
  "9\n\014gpu_topology\030\001 \001(\0132!.CMsgChildProcess"
  "QueryGpuTopologyH\000B\n\n\010response\"\304\002\n CMsgC"
  "hildProcessQueryGpuTopology\0227\n\004gpus\030\001 \003("
  "\0132).CMsgChildProcessQueryGpuTopology.Gpu"
  "Info\022\026\n\016default_gpu_id\030\002 \001(\r\032\316\001\n\007GpuInfo"
  "\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\027\n\017vram_size_"
  "bytes\030\003 \001(\004\0226\n\tdriver_id\030\004 \001(\0162\r.EGpuDri"
  "verId:\024EGpuDriverId_Invalid\022\034\n\024driver_ve"
  "rsion_major\030\005 \001(\005\022\034\n\024driver_version_mino"
  "r\030\006 \001(\005\022\034\n\024driver_version_patch\030\007 \001(\005B\037H"
  "\001\200\001\000\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fchildprocessquery_2eproto_deps[2] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fchildprocessquery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fchildprocessquery_2eproto = {
  false, false, 550, descriptor_table_protodef_steammessages_5fchildprocessquery_2eproto, "steammessages_childprocessquery.proto", 
  &descriptor_table_steammessages_5fchildprocessquery_2eproto_once, descriptor_table_steammessages_5fchildprocessquery_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_steammessages_5fchildprocessquery_2eproto::offsets,
  file_level_metadata_steammessages_5fchildprocessquery_2eproto, file_level_enum_descriptors_steammessages_5fchildprocessquery_2eproto, file_level_service_descriptors_steammessages_5fchildprocessquery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fchildprocessquery_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchildprocessquery_2eproto);
  return descriptor_table_steammessages_5fchildprocessquery_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fchildprocessquery_2eproto(&descriptor_table_steammessages_5fchildprocessquery_2eproto);

// ===================================================================

class CMsgChildProcessQueryResponse::_Internal {
 public:
  static const ::CMsgChildProcessQueryGpuTopology& gpu_topology(const CMsgChildProcessQueryResponse* msg);
};

const ::CMsgChildProcessQueryGpuTopology&
CMsgChildProcessQueryResponse::_Internal::gpu_topology(const CMsgChildProcessQueryResponse* msg) {
  return *msg->response_.gpu_topology_;
}
void CMsgChildProcessQueryResponse::set_allocated_gpu_topology(::CMsgChildProcessQueryGpuTopology* gpu_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (gpu_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpu_topology);
    if (message_arena != submessage_arena) {
      gpu_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_topology, submessage_arena);
    }
    set_has_gpu_topology();
    response_.gpu_topology_ = gpu_topology;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgChildProcessQueryResponse.gpu_topology)
}
CMsgChildProcessQueryResponse::CMsgChildProcessQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgChildProcessQueryResponse)
}
CMsgChildProcessQueryResponse::CMsgChildProcessQueryResponse(const CMsgChildProcessQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kGpuTopology: {
      _internal_mutable_gpu_topology()->::CMsgChildProcessQueryGpuTopology::MergeFrom(from._internal_gpu_topology());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgChildProcessQueryResponse)
}

void CMsgChildProcessQueryResponse::SharedCtor() {
clear_has_response();
}

CMsgChildProcessQueryResponse::~CMsgChildProcessQueryResponse() {
  // @@protoc_insertion_point(destructor:CMsgChildProcessQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgChildProcessQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void CMsgChildProcessQueryResponse::ArenaDtor(void* object) {
  CMsgChildProcessQueryResponse* _this = reinterpret_cast< CMsgChildProcessQueryResponse* >(object);
  (void)_this;
}
void CMsgChildProcessQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgChildProcessQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgChildProcessQueryResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:CMsgChildProcessQueryResponse)
  switch (response_case()) {
    case kGpuTopology: {
      if (GetArena() == nullptr) {
        delete response_.gpu_topology_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void CMsgChildProcessQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgChildProcessQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgChildProcessQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CMsgChildProcessQueryGpuTopology gpu_topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgChildProcessQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgChildProcessQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CMsgChildProcessQueryGpuTopology gpu_topology = 1;
  if (_internal_has_gpu_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gpu_topology(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgChildProcessQueryResponse)
  return target;
}

size_t CMsgChildProcessQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgChildProcessQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .CMsgChildProcessQueryGpuTopology gpu_topology = 1;
    case kGpuTopology: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.gpu_topology_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgChildProcessQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgChildProcessQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgChildProcessQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgChildProcessQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgChildProcessQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgChildProcessQueryResponse)
    MergeFrom(*source);
  }
}

void CMsgChildProcessQueryResponse::MergeFrom(const CMsgChildProcessQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgChildProcessQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kGpuTopology: {
      _internal_mutable_gpu_topology()->::CMsgChildProcessQueryGpuTopology::MergeFrom(from._internal_gpu_topology());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void CMsgChildProcessQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgChildProcessQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgChildProcessQueryResponse::CopyFrom(const CMsgChildProcessQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgChildProcessQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgChildProcessQueryResponse::IsInitialized() const {
  return true;
}

void CMsgChildProcessQueryResponse::InternalSwap(CMsgChildProcessQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgChildProcessQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgChildProcessQueryGpuTopology_GpuInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgChildProcessQueryGpuTopology_GpuInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vram_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver_version_major(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_driver_version_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_driver_version_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgChildProcessQueryGpuTopology_GpuInfo::CMsgChildProcessQueryGpuTopology_GpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgChildProcessQueryGpuTopology.GpuInfo)
}
CMsgChildProcessQueryGpuTopology_GpuInfo::CMsgChildProcessQueryGpuTopology_GpuInfo(const CMsgChildProcessQueryGpuTopology_GpuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&driver_version_patch_) -
    reinterpret_cast<char*>(&id_)) + sizeof(driver_version_patch_));
  // @@protoc_insertion_point(copy_constructor:CMsgChildProcessQueryGpuTopology.GpuInfo)
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&driver_version_patch_) -
    reinterpret_cast<char*>(&id_)) + sizeof(driver_version_patch_));
}

CMsgChildProcessQueryGpuTopology_GpuInfo::~CMsgChildProcessQueryGpuTopology_GpuInfo() {
  // @@protoc_insertion_point(destructor:CMsgChildProcessQueryGpuTopology.GpuInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::ArenaDtor(void* object) {
  CMsgChildProcessQueryGpuTopology_GpuInfo* _this = reinterpret_cast< CMsgChildProcessQueryGpuTopology_GpuInfo* >(object);
  (void)_this;
}
void CMsgChildProcessQueryGpuTopology_GpuInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgChildProcessQueryGpuTopology_GpuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_version_patch_) -
        reinterpret_cast<char*>(&id_)) + sizeof(driver_version_patch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgChildProcessQueryGpuTopology_GpuInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgChildProcessQueryGpuTopology.GpuInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 vram_size_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vram_size_bytes(&has_bits);
          vram_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGpuDriverId driver_id = 4 [default = EGpuDriverId_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGpuDriverId_IsValid(val))) {
            _internal_set_driver_id(static_cast<::EGpuDriverId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 driver_version_major = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_driver_version_major(&has_bits);
          driver_version_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 driver_version_minor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_driver_version_minor(&has_bits);
          driver_version_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 driver_version_patch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_driver_version_patch(&has_bits);
          driver_version_patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgChildProcessQueryGpuTopology_GpuInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgChildProcessQueryGpuTopology.GpuInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint64 vram_size_bytes = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_vram_size_bytes(), target);
  }

  // optional .EGpuDriverId driver_id = 4 [default = EGpuDriverId_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_driver_id(), target);
  }

  // optional int32 driver_version_major = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_driver_version_major(), target);
  }

  // optional int32 driver_version_minor = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_driver_version_minor(), target);
  }

  // optional int32 driver_version_patch = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_driver_version_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgChildProcessQueryGpuTopology.GpuInfo)
  return target;
}

size_t CMsgChildProcessQueryGpuTopology_GpuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .EGpuDriverId driver_id = 4 [default = EGpuDriverId_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driver_id());
    }

    // optional uint64 vram_size_bytes = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_vram_size_bytes());
    }

    // optional int32 driver_version_major = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_driver_version_major());
    }

    // optional int32 driver_version_minor = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_driver_version_minor());
    }

    // optional int32 driver_version_patch = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_driver_version_patch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgChildProcessQueryGpuTopology_GpuInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgChildProcessQueryGpuTopology_GpuInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgChildProcessQueryGpuTopology.GpuInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgChildProcessQueryGpuTopology.GpuInfo)
    MergeFrom(*source);
  }
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::MergeFrom(const CMsgChildProcessQueryGpuTopology_GpuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      driver_id_ = from.driver_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      vram_size_bytes_ = from.vram_size_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      driver_version_major_ = from.driver_version_major_;
    }
    if (cached_has_bits & 0x00000020u) {
      driver_version_minor_ = from.driver_version_minor_;
    }
    if (cached_has_bits & 0x00000040u) {
      driver_version_patch_ = from.driver_version_patch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::CopyFrom(const CMsgChildProcessQueryGpuTopology_GpuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgChildProcessQueryGpuTopology.GpuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgChildProcessQueryGpuTopology_GpuInfo::IsInitialized() const {
  return true;
}

void CMsgChildProcessQueryGpuTopology_GpuInfo::InternalSwap(CMsgChildProcessQueryGpuTopology_GpuInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgChildProcessQueryGpuTopology_GpuInfo, driver_version_patch_)
      + sizeof(CMsgChildProcessQueryGpuTopology_GpuInfo::driver_version_patch_)
      - PROTOBUF_FIELD_OFFSET(CMsgChildProcessQueryGpuTopology_GpuInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgChildProcessQueryGpuTopology_GpuInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgChildProcessQueryGpuTopology::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgChildProcessQueryGpuTopology>()._has_bits_);
  static void set_has_default_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgChildProcessQueryGpuTopology::CMsgChildProcessQueryGpuTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gpus_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgChildProcessQueryGpuTopology)
}
CMsgChildProcessQueryGpuTopology::CMsgChildProcessQueryGpuTopology(const CMsgChildProcessQueryGpuTopology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gpus_(from.gpus_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_gpu_id_ = from.default_gpu_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgChildProcessQueryGpuTopology)
}

void CMsgChildProcessQueryGpuTopology::SharedCtor() {
default_gpu_id_ = 0u;
}

CMsgChildProcessQueryGpuTopology::~CMsgChildProcessQueryGpuTopology() {
  // @@protoc_insertion_point(destructor:CMsgChildProcessQueryGpuTopology)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgChildProcessQueryGpuTopology::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgChildProcessQueryGpuTopology::ArenaDtor(void* object) {
  CMsgChildProcessQueryGpuTopology* _this = reinterpret_cast< CMsgChildProcessQueryGpuTopology* >(object);
  (void)_this;
}
void CMsgChildProcessQueryGpuTopology::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgChildProcessQueryGpuTopology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgChildProcessQueryGpuTopology::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgChildProcessQueryGpuTopology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpus_.Clear();
  default_gpu_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgChildProcessQueryGpuTopology::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgChildProcessQueryGpuTopology.GpuInfo gpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 default_gpu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_default_gpu_id(&has_bits);
          default_gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgChildProcessQueryGpuTopology::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgChildProcessQueryGpuTopology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgChildProcessQueryGpuTopology.GpuInfo gpus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gpus(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 default_gpu_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_default_gpu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgChildProcessQueryGpuTopology)
  return target;
}

size_t CMsgChildProcessQueryGpuTopology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgChildProcessQueryGpuTopology)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgChildProcessQueryGpuTopology.GpuInfo gpus = 1;
  total_size += 1UL * this->_internal_gpus_size();
  for (const auto& msg : this->gpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 default_gpu_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_gpu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgChildProcessQueryGpuTopology::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgChildProcessQueryGpuTopology)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgChildProcessQueryGpuTopology* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgChildProcessQueryGpuTopology>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgChildProcessQueryGpuTopology)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgChildProcessQueryGpuTopology)
    MergeFrom(*source);
  }
}

void CMsgChildProcessQueryGpuTopology::MergeFrom(const CMsgChildProcessQueryGpuTopology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgChildProcessQueryGpuTopology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpus_.MergeFrom(from.gpus_);
  if (from._internal_has_default_gpu_id()) {
    _internal_set_default_gpu_id(from._internal_default_gpu_id());
  }
}

void CMsgChildProcessQueryGpuTopology::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgChildProcessQueryGpuTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgChildProcessQueryGpuTopology::CopyFrom(const CMsgChildProcessQueryGpuTopology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgChildProcessQueryGpuTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgChildProcessQueryGpuTopology::IsInitialized() const {
  return true;
}

void CMsgChildProcessQueryGpuTopology::InternalSwap(CMsgChildProcessQueryGpuTopology* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gpus_.InternalSwap(&other->gpus_);
  swap(default_gpu_id_, other->default_gpu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgChildProcessQueryGpuTopology::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgChildProcessQueryResponse* Arena::CreateMaybeMessage< ::CMsgChildProcessQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgChildProcessQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgChildProcessQueryGpuTopology_GpuInfo* Arena::CreateMaybeMessage< ::CMsgChildProcessQueryGpuTopology_GpuInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgChildProcessQueryGpuTopology_GpuInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgChildProcessQueryGpuTopology* Arena::CreateMaybeMessage< ::CMsgChildProcessQueryGpuTopology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgChildProcessQueryGpuTopology >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
