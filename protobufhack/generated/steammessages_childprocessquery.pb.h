// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_childprocessquery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fchildprocessquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fchildprocessquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fchildprocessquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fchildprocessquery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fchildprocessquery_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fchildprocessquery_2eproto_metadata_getter(int index);
class CMsgChildProcessQueryGpuTopology;
struct CMsgChildProcessQueryGpuTopologyDefaultTypeInternal;
extern CMsgChildProcessQueryGpuTopologyDefaultTypeInternal _CMsgChildProcessQueryGpuTopology_default_instance_;
class CMsgChildProcessQueryGpuTopology_GpuInfo;
struct CMsgChildProcessQueryGpuTopology_GpuInfoDefaultTypeInternal;
extern CMsgChildProcessQueryGpuTopology_GpuInfoDefaultTypeInternal _CMsgChildProcessQueryGpuTopology_GpuInfo_default_instance_;
class CMsgChildProcessQueryResponse;
struct CMsgChildProcessQueryResponseDefaultTypeInternal;
extern CMsgChildProcessQueryResponseDefaultTypeInternal _CMsgChildProcessQueryResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgChildProcessQueryGpuTopology* Arena::CreateMaybeMessage<::CMsgChildProcessQueryGpuTopology>(Arena*);
template<> ::CMsgChildProcessQueryGpuTopology_GpuInfo* Arena::CreateMaybeMessage<::CMsgChildProcessQueryGpuTopology_GpuInfo>(Arena*);
template<> ::CMsgChildProcessQueryResponse* Arena::CreateMaybeMessage<::CMsgChildProcessQueryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgChildProcessQueryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgChildProcessQueryResponse) */ {
 public:
  inline CMsgChildProcessQueryResponse() : CMsgChildProcessQueryResponse(nullptr) {}
  virtual ~CMsgChildProcessQueryResponse();
  explicit constexpr CMsgChildProcessQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgChildProcessQueryResponse(const CMsgChildProcessQueryResponse& from);
  CMsgChildProcessQueryResponse(CMsgChildProcessQueryResponse&& from) noexcept
    : CMsgChildProcessQueryResponse() {
    *this = ::std::move(from);
  }

  inline CMsgChildProcessQueryResponse& operator=(const CMsgChildProcessQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgChildProcessQueryResponse& operator=(CMsgChildProcessQueryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgChildProcessQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kGpuTopology = 1,
    RESPONSE_NOT_SET = 0,
  };

  static inline const CMsgChildProcessQueryResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgChildProcessQueryResponse*>(
               &_CMsgChildProcessQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgChildProcessQueryResponse& a, CMsgChildProcessQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgChildProcessQueryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgChildProcessQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgChildProcessQueryResponse* New() const final {
    return CreateMaybeMessage<CMsgChildProcessQueryResponse>(nullptr);
  }

  CMsgChildProcessQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgChildProcessQueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgChildProcessQueryResponse& from);
  void MergeFrom(const CMsgChildProcessQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgChildProcessQueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgChildProcessQueryResponse";
  }
  protected:
  explicit CMsgChildProcessQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fchildprocessquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuTopologyFieldNumber = 1,
  };
  // .CMsgChildProcessQueryGpuTopology gpu_topology = 1;
  bool has_gpu_topology() const;
  private:
  bool _internal_has_gpu_topology() const;
  public:
  void clear_gpu_topology();
  const ::CMsgChildProcessQueryGpuTopology& gpu_topology() const;
  ::CMsgChildProcessQueryGpuTopology* release_gpu_topology();
  ::CMsgChildProcessQueryGpuTopology* mutable_gpu_topology();
  void set_allocated_gpu_topology(::CMsgChildProcessQueryGpuTopology* gpu_topology);
  private:
  const ::CMsgChildProcessQueryGpuTopology& _internal_gpu_topology() const;
  ::CMsgChildProcessQueryGpuTopology* _internal_mutable_gpu_topology();
  public:
  void unsafe_arena_set_allocated_gpu_topology(
      ::CMsgChildProcessQueryGpuTopology* gpu_topology);
  ::CMsgChildProcessQueryGpuTopology* unsafe_arena_release_gpu_topology();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:CMsgChildProcessQueryResponse)
 private:
  class _Internal;
  void set_has_gpu_topology();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CMsgChildProcessQueryGpuTopology* gpu_topology_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fchildprocessquery_2eproto;
};
// -------------------------------------------------------------------

class CMsgChildProcessQueryGpuTopology_GpuInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgChildProcessQueryGpuTopology.GpuInfo) */ {
 public:
  inline CMsgChildProcessQueryGpuTopology_GpuInfo() : CMsgChildProcessQueryGpuTopology_GpuInfo(nullptr) {}
  virtual ~CMsgChildProcessQueryGpuTopology_GpuInfo();
  explicit constexpr CMsgChildProcessQueryGpuTopology_GpuInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgChildProcessQueryGpuTopology_GpuInfo(const CMsgChildProcessQueryGpuTopology_GpuInfo& from);
  CMsgChildProcessQueryGpuTopology_GpuInfo(CMsgChildProcessQueryGpuTopology_GpuInfo&& from) noexcept
    : CMsgChildProcessQueryGpuTopology_GpuInfo() {
    *this = ::std::move(from);
  }

  inline CMsgChildProcessQueryGpuTopology_GpuInfo& operator=(const CMsgChildProcessQueryGpuTopology_GpuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgChildProcessQueryGpuTopology_GpuInfo& operator=(CMsgChildProcessQueryGpuTopology_GpuInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgChildProcessQueryGpuTopology_GpuInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgChildProcessQueryGpuTopology_GpuInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgChildProcessQueryGpuTopology_GpuInfo*>(
               &_CMsgChildProcessQueryGpuTopology_GpuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgChildProcessQueryGpuTopology_GpuInfo& a, CMsgChildProcessQueryGpuTopology_GpuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgChildProcessQueryGpuTopology_GpuInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgChildProcessQueryGpuTopology_GpuInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgChildProcessQueryGpuTopology_GpuInfo* New() const final {
    return CreateMaybeMessage<CMsgChildProcessQueryGpuTopology_GpuInfo>(nullptr);
  }

  CMsgChildProcessQueryGpuTopology_GpuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgChildProcessQueryGpuTopology_GpuInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgChildProcessQueryGpuTopology_GpuInfo& from);
  void MergeFrom(const CMsgChildProcessQueryGpuTopology_GpuInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgChildProcessQueryGpuTopology_GpuInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgChildProcessQueryGpuTopology.GpuInfo";
  }
  protected:
  explicit CMsgChildProcessQueryGpuTopology_GpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fchildprocessquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kDriverIdFieldNumber = 4,
    kVramSizeBytesFieldNumber = 3,
    kDriverVersionMajorFieldNumber = 5,
    kDriverVersionMinorFieldNumber = 6,
    kDriverVersionPatchFieldNumber = 7,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EGpuDriverId driver_id = 4 [default = EGpuDriverId_Invalid];
  bool has_driver_id() const;
  private:
  bool _internal_has_driver_id() const;
  public:
  void clear_driver_id();
  ::EGpuDriverId driver_id() const;
  void set_driver_id(::EGpuDriverId value);
  private:
  ::EGpuDriverId _internal_driver_id() const;
  void _internal_set_driver_id(::EGpuDriverId value);
  public:

  // optional uint64 vram_size_bytes = 3;
  bool has_vram_size_bytes() const;
  private:
  bool _internal_has_vram_size_bytes() const;
  public:
  void clear_vram_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 vram_size_bytes() const;
  void set_vram_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vram_size_bytes() const;
  void _internal_set_vram_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 driver_version_major = 5;
  bool has_driver_version_major() const;
  private:
  bool _internal_has_driver_version_major() const;
  public:
  void clear_driver_version_major();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_version_major() const;
  void set_driver_version_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver_version_major() const;
  void _internal_set_driver_version_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 driver_version_minor = 6;
  bool has_driver_version_minor() const;
  private:
  bool _internal_has_driver_version_minor() const;
  public:
  void clear_driver_version_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_version_minor() const;
  void set_driver_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver_version_minor() const;
  void _internal_set_driver_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 driver_version_patch = 7;
  bool has_driver_version_patch() const;
  private:
  bool _internal_has_driver_version_patch() const;
  public:
  void clear_driver_version_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_version_patch() const;
  void set_driver_version_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver_version_patch() const;
  void _internal_set_driver_version_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgChildProcessQueryGpuTopology.GpuInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int driver_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vram_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_version_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_version_minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_version_patch_;
  friend struct ::TableStruct_steammessages_5fchildprocessquery_2eproto;
};
// -------------------------------------------------------------------

class CMsgChildProcessQueryGpuTopology PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgChildProcessQueryGpuTopology) */ {
 public:
  inline CMsgChildProcessQueryGpuTopology() : CMsgChildProcessQueryGpuTopology(nullptr) {}
  virtual ~CMsgChildProcessQueryGpuTopology();
  explicit constexpr CMsgChildProcessQueryGpuTopology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgChildProcessQueryGpuTopology(const CMsgChildProcessQueryGpuTopology& from);
  CMsgChildProcessQueryGpuTopology(CMsgChildProcessQueryGpuTopology&& from) noexcept
    : CMsgChildProcessQueryGpuTopology() {
    *this = ::std::move(from);
  }

  inline CMsgChildProcessQueryGpuTopology& operator=(const CMsgChildProcessQueryGpuTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgChildProcessQueryGpuTopology& operator=(CMsgChildProcessQueryGpuTopology&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgChildProcessQueryGpuTopology& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgChildProcessQueryGpuTopology* internal_default_instance() {
    return reinterpret_cast<const CMsgChildProcessQueryGpuTopology*>(
               &_CMsgChildProcessQueryGpuTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgChildProcessQueryGpuTopology& a, CMsgChildProcessQueryGpuTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgChildProcessQueryGpuTopology* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgChildProcessQueryGpuTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgChildProcessQueryGpuTopology* New() const final {
    return CreateMaybeMessage<CMsgChildProcessQueryGpuTopology>(nullptr);
  }

  CMsgChildProcessQueryGpuTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgChildProcessQueryGpuTopology>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgChildProcessQueryGpuTopology& from);
  void MergeFrom(const CMsgChildProcessQueryGpuTopology& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgChildProcessQueryGpuTopology* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgChildProcessQueryGpuTopology";
  }
  protected:
  explicit CMsgChildProcessQueryGpuTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fchildprocessquery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgChildProcessQueryGpuTopology_GpuInfo GpuInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGpusFieldNumber = 1,
    kDefaultGpuIdFieldNumber = 2,
  };
  // repeated .CMsgChildProcessQueryGpuTopology.GpuInfo gpus = 1;
  int gpus_size() const;
  private:
  int _internal_gpus_size() const;
  public:
  void clear_gpus();
  ::CMsgChildProcessQueryGpuTopology_GpuInfo* mutable_gpus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgChildProcessQueryGpuTopology_GpuInfo >*
      mutable_gpus();
  private:
  const ::CMsgChildProcessQueryGpuTopology_GpuInfo& _internal_gpus(int index) const;
  ::CMsgChildProcessQueryGpuTopology_GpuInfo* _internal_add_gpus();
  public:
  const ::CMsgChildProcessQueryGpuTopology_GpuInfo& gpus(int index) const;
  ::CMsgChildProcessQueryGpuTopology_GpuInfo* add_gpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgChildProcessQueryGpuTopology_GpuInfo >&
      gpus() const;

  // optional uint32 default_gpu_id = 2;
  bool has_default_gpu_id() const;
  private:
  bool _internal_has_default_gpu_id() const;
  public:
  void clear_default_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_gpu_id() const;
  void set_default_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_gpu_id() const;
  void _internal_set_default_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgChildProcessQueryGpuTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgChildProcessQueryGpuTopology_GpuInfo > gpus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_gpu_id_;
  friend struct ::TableStruct_steammessages_5fchildprocessquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgChildProcessQueryResponse

// .CMsgChildProcessQueryGpuTopology gpu_topology = 1;
inline bool CMsgChildProcessQueryResponse::_internal_has_gpu_topology() const {
  return response_case() == kGpuTopology;
}
inline bool CMsgChildProcessQueryResponse::has_gpu_topology() const {
  return _internal_has_gpu_topology();
}
inline void CMsgChildProcessQueryResponse::set_has_gpu_topology() {
  _oneof_case_[0] = kGpuTopology;
}
inline void CMsgChildProcessQueryResponse::clear_gpu_topology() {
  if (_internal_has_gpu_topology()) {
    if (GetArena() == nullptr) {
      delete response_.gpu_topology_;
    }
    clear_has_response();
  }
}
inline ::CMsgChildProcessQueryGpuTopology* CMsgChildProcessQueryResponse::release_gpu_topology() {
  // @@protoc_insertion_point(field_release:CMsgChildProcessQueryResponse.gpu_topology)
  if (_internal_has_gpu_topology()) {
    clear_has_response();
      ::CMsgChildProcessQueryGpuTopology* temp = response_.gpu_topology_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.gpu_topology_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgChildProcessQueryGpuTopology& CMsgChildProcessQueryResponse::_internal_gpu_topology() const {
  return _internal_has_gpu_topology()
      ? *response_.gpu_topology_
      : reinterpret_cast< ::CMsgChildProcessQueryGpuTopology&>(::_CMsgChildProcessQueryGpuTopology_default_instance_);
}
inline const ::CMsgChildProcessQueryGpuTopology& CMsgChildProcessQueryResponse::gpu_topology() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryResponse.gpu_topology)
  return _internal_gpu_topology();
}
inline ::CMsgChildProcessQueryGpuTopology* CMsgChildProcessQueryResponse::unsafe_arena_release_gpu_topology() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgChildProcessQueryResponse.gpu_topology)
  if (_internal_has_gpu_topology()) {
    clear_has_response();
    ::CMsgChildProcessQueryGpuTopology* temp = response_.gpu_topology_;
    response_.gpu_topology_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgChildProcessQueryResponse::unsafe_arena_set_allocated_gpu_topology(::CMsgChildProcessQueryGpuTopology* gpu_topology) {
  clear_response();
  if (gpu_topology) {
    set_has_gpu_topology();
    response_.gpu_topology_ = gpu_topology;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgChildProcessQueryResponse.gpu_topology)
}
inline ::CMsgChildProcessQueryGpuTopology* CMsgChildProcessQueryResponse::_internal_mutable_gpu_topology() {
  if (!_internal_has_gpu_topology()) {
    clear_response();
    set_has_gpu_topology();
    response_.gpu_topology_ = CreateMaybeMessage< ::CMsgChildProcessQueryGpuTopology >(GetArena());
  }
  return response_.gpu_topology_;
}
inline ::CMsgChildProcessQueryGpuTopology* CMsgChildProcessQueryResponse::mutable_gpu_topology() {
  // @@protoc_insertion_point(field_mutable:CMsgChildProcessQueryResponse.gpu_topology)
  return _internal_mutable_gpu_topology();
}

inline bool CMsgChildProcessQueryResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void CMsgChildProcessQueryResponse::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline CMsgChildProcessQueryResponse::ResponseCase CMsgChildProcessQueryResponse::response_case() const {
  return CMsgChildProcessQueryResponse::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgChildProcessQueryGpuTopology_GpuInfo

// optional uint32 id = 1;
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_id() const {
  return _internal_has_id();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgChildProcessQueryGpuTopology_GpuInfo::id() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.id)
  return _internal_id();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.id)
}

// optional string name = 2;
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgChildProcessQueryGpuTopology_GpuInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
  return _internal_name();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
}
inline std::string* CMsgChildProcessQueryGpuTopology_GpuInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_name() const {
  return name_.Get();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
}
inline std::string* CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgChildProcessQueryGpuTopology_GpuInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgChildProcessQueryGpuTopology.GpuInfo.name)
}

// optional uint64 vram_size_bytes = 3;
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_vram_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_vram_size_bytes() const {
  return _internal_has_vram_size_bytes();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_vram_size_bytes() {
  vram_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_vram_size_bytes() const {
  return vram_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgChildProcessQueryGpuTopology_GpuInfo::vram_size_bytes() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.vram_size_bytes)
  return _internal_vram_size_bytes();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_vram_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  vram_size_bytes_ = value;
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_vram_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vram_size_bytes(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.vram_size_bytes)
}

// optional .EGpuDriverId driver_id = 4 [default = EGpuDriverId_Invalid];
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_driver_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_driver_id() const {
  return _internal_has_driver_id();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_driver_id() {
  driver_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EGpuDriverId CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_driver_id() const {
  return static_cast< ::EGpuDriverId >(driver_id_);
}
inline ::EGpuDriverId CMsgChildProcessQueryGpuTopology_GpuInfo::driver_id() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_id)
  return _internal_driver_id();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_driver_id(::EGpuDriverId value) {
  assert(::EGpuDriverId_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  driver_id_ = value;
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_driver_id(::EGpuDriverId value) {
  _internal_set_driver_id(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_id)
}

// optional int32 driver_version_major = 5;
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_driver_version_major() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_driver_version_major() const {
  return _internal_has_driver_version_major();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_driver_version_major() {
  driver_version_major_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_driver_version_major() const {
  return driver_version_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgChildProcessQueryGpuTopology_GpuInfo::driver_version_major() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_version_major)
  return _internal_driver_version_major();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_driver_version_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  driver_version_major_ = value;
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_driver_version_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver_version_major(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_version_major)
}

// optional int32 driver_version_minor = 6;
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_driver_version_minor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_driver_version_minor() const {
  return _internal_has_driver_version_minor();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_driver_version_minor() {
  driver_version_minor_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_driver_version_minor() const {
  return driver_version_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgChildProcessQueryGpuTopology_GpuInfo::driver_version_minor() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_version_minor)
  return _internal_driver_version_minor();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_driver_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  driver_version_minor_ = value;
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_driver_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver_version_minor(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_version_minor)
}

// optional int32 driver_version_patch = 7;
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_has_driver_version_patch() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology_GpuInfo::has_driver_version_patch() const {
  return _internal_has_driver_version_patch();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::clear_driver_version_patch() {
  driver_version_patch_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_driver_version_patch() const {
  return driver_version_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgChildProcessQueryGpuTopology_GpuInfo::driver_version_patch() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_version_patch)
  return _internal_driver_version_patch();
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::_internal_set_driver_version_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  driver_version_patch_ = value;
}
inline void CMsgChildProcessQueryGpuTopology_GpuInfo::set_driver_version_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver_version_patch(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.GpuInfo.driver_version_patch)
}

// -------------------------------------------------------------------

// CMsgChildProcessQueryGpuTopology

// repeated .CMsgChildProcessQueryGpuTopology.GpuInfo gpus = 1;
inline int CMsgChildProcessQueryGpuTopology::_internal_gpus_size() const {
  return gpus_.size();
}
inline int CMsgChildProcessQueryGpuTopology::gpus_size() const {
  return _internal_gpus_size();
}
inline void CMsgChildProcessQueryGpuTopology::clear_gpus() {
  gpus_.Clear();
}
inline ::CMsgChildProcessQueryGpuTopology_GpuInfo* CMsgChildProcessQueryGpuTopology::mutable_gpus(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgChildProcessQueryGpuTopology.gpus)
  return gpus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgChildProcessQueryGpuTopology_GpuInfo >*
CMsgChildProcessQueryGpuTopology::mutable_gpus() {
  // @@protoc_insertion_point(field_mutable_list:CMsgChildProcessQueryGpuTopology.gpus)
  return &gpus_;
}
inline const ::CMsgChildProcessQueryGpuTopology_GpuInfo& CMsgChildProcessQueryGpuTopology::_internal_gpus(int index) const {
  return gpus_.Get(index);
}
inline const ::CMsgChildProcessQueryGpuTopology_GpuInfo& CMsgChildProcessQueryGpuTopology::gpus(int index) const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.gpus)
  return _internal_gpus(index);
}
inline ::CMsgChildProcessQueryGpuTopology_GpuInfo* CMsgChildProcessQueryGpuTopology::_internal_add_gpus() {
  return gpus_.Add();
}
inline ::CMsgChildProcessQueryGpuTopology_GpuInfo* CMsgChildProcessQueryGpuTopology::add_gpus() {
  // @@protoc_insertion_point(field_add:CMsgChildProcessQueryGpuTopology.gpus)
  return _internal_add_gpus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgChildProcessQueryGpuTopology_GpuInfo >&
CMsgChildProcessQueryGpuTopology::gpus() const {
  // @@protoc_insertion_point(field_list:CMsgChildProcessQueryGpuTopology.gpus)
  return gpus_;
}

// optional uint32 default_gpu_id = 2;
inline bool CMsgChildProcessQueryGpuTopology::_internal_has_default_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgChildProcessQueryGpuTopology::has_default_gpu_id() const {
  return _internal_has_default_gpu_id();
}
inline void CMsgChildProcessQueryGpuTopology::clear_default_gpu_id() {
  default_gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgChildProcessQueryGpuTopology::_internal_default_gpu_id() const {
  return default_gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgChildProcessQueryGpuTopology::default_gpu_id() const {
  // @@protoc_insertion_point(field_get:CMsgChildProcessQueryGpuTopology.default_gpu_id)
  return _internal_default_gpu_id();
}
inline void CMsgChildProcessQueryGpuTopology::_internal_set_default_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  default_gpu_id_ = value;
}
inline void CMsgChildProcessQueryGpuTopology::set_default_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_gpu_id(value);
  // @@protoc_insertion_point(field_set:CMsgChildProcessQueryGpuTopology.default_gpu_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fchildprocessquery_2eproto
