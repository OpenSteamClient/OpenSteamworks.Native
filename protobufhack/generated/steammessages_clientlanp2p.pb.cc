// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientlanp2p.proto

#include "steammessages_clientlanp2p.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depot_id_(0u){}
struct CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal {
  constexpr CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal() {}
  union {
    CMsgClientLANP2PRequestChunks_ChunkKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
constexpr CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunkeys_(){}
struct CMsgClientLANP2PRequestChunksDefaultTypeInternal {
  constexpr CMsgClientLANP2PRequestChunksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLANP2PRequestChunksDefaultTypeInternal() {}
  union {
    CMsgClientLANP2PRequestChunks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLANP2PRequestChunksDefaultTypeInternal _CMsgClientLANP2PRequestChunks_default_instance_;
constexpr CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chundata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0u)
  , depot_id_(0u)
  , encrypted_(false)
  , compressed_(false){}
struct CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal {
  constexpr CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal() {}
  union {
    CMsgClientLANP2PRequestChunksResponse_ChunkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
constexpr CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunresponses_(){}
struct CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal {
  constexpr CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal() {}
  union {
    CMsgClientLANP2PRequestChunksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal _CMsgClientLANP2PRequestChunksResponse_default_instance_;
constexpr CMsgClientPeerChunkRequest::CMsgClientPeerChunkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , depot_id_(0u)
  , access_token_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientPeerChunkRequestDefaultTypeInternal {
  constexpr CMsgClientPeerChunkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPeerChunkRequestDefaultTypeInternal() {}
  union {
    CMsgClientPeerChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPeerChunkRequestDefaultTypeInternal _CMsgClientPeerChunkRequest_default_instance_;
constexpr CMsgClientPeerChunkResponse::CMsgClientPeerChunkResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chundata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0u)
  , app_id_(0u)
  , depot_id_(0u)
  , encrypted_(false)
  , compressed_(false){}
struct CMsgClientPeerChunkResponseDefaultTypeInternal {
  constexpr CMsgClientPeerChunkResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPeerChunkResponseDefaultTypeInternal() {}
  union {
    CMsgClientPeerChunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPeerChunkResponseDefaultTypeInternal _CMsgClientPeerChunkResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientlanp2p_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientlanp2p_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientlanp2p_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientlanp2p_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks_ChunkKey, sha_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunks, chunkeys_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, sha_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, chundata_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, encrypted_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse_ChunkData, compressed_),
  2,
  3,
  0,
  1,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLANP2PRequestChunksResponse, chunresponses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkRequest, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkRequest, sha_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkRequest, access_token_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, sha_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, encrypted_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, compressed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPeerChunkResponse, chundata_),
  2,
  3,
  4,
  0,
  5,
  6,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgClientLANP2PRequestChunks_ChunkKey)},
  { 9, -1, sizeof(::CMsgClientLANP2PRequestChunks)},
  { 15, 26, sizeof(::CMsgClientLANP2PRequestChunksResponse_ChunkData)},
  { 32, -1, sizeof(::CMsgClientLANP2PRequestChunksResponse)},
  { 38, 47, sizeof(::CMsgClientPeerChunkRequest)},
  { 51, 63, sizeof(::CMsgClientPeerChunkResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLANP2PRequestChunks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLANP2PRequestChunksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPeerChunkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPeerChunkResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientlanp2p_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n steammessages_clientlanp2p.proto\032 goog"
  "le/protobuf/descriptor.proto\032\030steammessa"
  "ges_base.proto\"\205\001\n\035CMsgClientLANP2PReque"
  "stChunks\0229\n\010chunkeys\030\001 \003(\0132\'.CMsgClientL"
  "ANP2PRequestChunks.ChunkKey\032)\n\010ChunkKey\022"
  "\020\n\010depot_id\030\001 \001(\r\022\013\n\003sha\030\002 \001(\014\"\345\001\n%CMsgC"
  "lientLANP2PRequestChunksResponse\022G\n\rchun"
  "responses\030\001 \003(\01320.CMsgClientLANP2PReques"
  "tChunksResponse.ChunkData\032s\n\tChunkData\022\016"
  "\n\006result\030\001 \001(\r\022\020\n\010depot_id\030\002 \001(\r\022\013\n\003sha\030"
  "\003 \001(\014\022\020\n\010chundata\030\004 \001(\014\022\021\n\tencrypted\030\005 \001"
  "(\010\022\022\n\ncompressed\030\006 \001(\010\"a\n\032CMsgClientPeer"
  "ChunkRequest\022\016\n\006app_id\030\001 \001(\r\022\020\n\010depot_id"
  "\030\002 \001(\r\022\013\n\003sha\030\003 \001(\014\022\024\n\014access_token\030\004 \001("
  "\004\"\225\001\n\033CMsgClientPeerChunkResponse\022\016\n\006res"
  "ult\030\001 \001(\r\022\016\n\006app_id\030\002 \001(\r\022\020\n\010depot_id\030\003 "
  "\001(\r\022\013\n\003sha\030\004 \001(\014\022\021\n\tencrypted\030\005 \001(\010\022\022\n\nc"
  "ompressed\030\006 \001(\010\022\020\n\010chundata\030\007 \001(\014B\037H\001\200\001\000"
  "\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientlanp2p_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientlanp2p_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientlanp2p_2eproto = {
  false, false, 746, descriptor_table_protodef_steammessages_5fclientlanp2p_2eproto, "steammessages_clientlanp2p.proto", 
  &descriptor_table_steammessages_5fclientlanp2p_2eproto_once, descriptor_table_steammessages_5fclientlanp2p_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_steammessages_5fclientlanp2p_2eproto::offsets,
  file_level_metadata_steammessages_5fclientlanp2p_2eproto, file_level_enum_descriptors_steammessages_5fclientlanp2p_2eproto, file_level_service_descriptors_steammessages_5fclientlanp2p_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientlanp2p_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientlanp2p_2eproto);
  return descriptor_table_steammessages_5fclientlanp2p_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientlanp2p_2eproto(&descriptor_table_steammessages_5fclientlanp2p_2eproto);

// ===================================================================

class CMsgClientLANP2PRequestChunks_ChunkKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLANP2PRequestChunks_ChunkKey>()._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLANP2PRequestChunks.ChunkKey)
}
CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey(const CMsgClientLANP2PRequestChunks_ChunkKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArena());
  }
  depot_id_ = from.depot_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunks.ChunkKey)
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
depot_id_ = 0u;
}

CMsgClientLANP2PRequestChunks_ChunkKey::~CMsgClientLANP2PRequestChunks_ChunkKey() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunks.ChunkKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunks_ChunkKey::ArenaDtor(void* object) {
  CMsgClientLANP2PRequestChunks_ChunkKey* _this = reinterpret_cast< CMsgClientLANP2PRequestChunks_ChunkKey* >(object);
  (void)_this;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLANP2PRequestChunks_ChunkKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLANP2PRequestChunks_ChunkKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmpty();
  }
  depot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLANP2PRequestChunks_ChunkKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLANP2PRequestChunks_ChunkKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunks.ChunkKey)
  return target;
}

size_t CMsgClientLANP2PRequestChunks_ChunkKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes sha = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_depot_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks_ChunkKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLANP2PRequestChunks_ChunkKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunks.ChunkKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunks.ChunkKey)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks_ChunkKey::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::InternalSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(depot_id_, other->depot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLANP2PRequestChunks_ChunkKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLANP2PRequestChunks::_Internal {
 public:
};

CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunkeys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLANP2PRequestChunks)
}
CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks(const CMsgClientLANP2PRequestChunks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunkeys_(from.chunkeys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunks)
}

void CMsgClientLANP2PRequestChunks::SharedCtor() {
}

CMsgClientLANP2PRequestChunks::~CMsgClientLANP2PRequestChunks() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLANP2PRequestChunks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientLANP2PRequestChunks::ArenaDtor(void* object) {
  CMsgClientLANP2PRequestChunks* _this = reinterpret_cast< CMsgClientLANP2PRequestChunks* >(object);
  (void)_this;
}
void CMsgClientLANP2PRequestChunks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLANP2PRequestChunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLANP2PRequestChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunkeys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLANP2PRequestChunks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunkeys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunkeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLANP2PRequestChunks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunkeys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunkeys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chunkeys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunks)
  return target;
}

size_t CMsgClientLANP2PRequestChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunkeys = 1;
  total_size += 1UL * this->_internal_chunkeys_size();
  for (const auto& msg : this->chunkeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLANP2PRequestChunks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunks)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunkeys_.MergeFrom(from.chunkeys_);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks::InternalSwap(CMsgClientLANP2PRequestChunks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunkeys_.InternalSwap(&other->chunkeys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLANP2PRequestChunks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLANP2PRequestChunksResponse_ChunkData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLANP2PRequestChunksResponse_ChunkData>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chundata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLANP2PRequestChunksResponse.ChunkData)
}
CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArena());
  }
  chundata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chundata()) {
    chundata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chundata(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chundata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
}

CMsgClientLANP2PRequestChunksResponse_ChunkData::~CMsgClientLANP2PRequestChunksResponse_ChunkData() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chundata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::ArenaDtor(void* object) {
  CMsgClientLANP2PRequestChunksResponse_ChunkData* _this = reinterpret_cast< CMsgClientLANP2PRequestChunksResponse_ChunkData* >(object);
  (void)_this;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      chundata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_) -
        reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLANP2PRequestChunksResponse_ChunkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 depot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes chundata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chundata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_encrypted(&has_bits);
          encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compressed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_compressed(&has_bits);
          compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLANP2PRequestChunksResponse_ChunkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depot_id(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sha(), target);
  }

  // optional bytes chundata = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_chundata(), target);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_encrypted(), target);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_compressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes sha = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional bytes chundata = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chundata());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

    // optional uint32 depot_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_depot_id());
    }

    // optional bool encrypted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse_ChunkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLANP2PRequestChunksResponse_ChunkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunksResponse.ChunkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunksResponse.ChunkData)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_chundata(from._internal_chundata());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse_ChunkData::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chundata_.Swap(&other->chundata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, compressed_)
      + sizeof(CMsgClientLANP2PRequestChunksResponse_ChunkData::compressed_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLANP2PRequestChunksResponse_ChunkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLANP2PRequestChunksResponse::_Internal {
 public:
};

CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunresponses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLANP2PRequestChunksResponse)
}
CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse(const CMsgClientLANP2PRequestChunksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunresponses_(from.chunresponses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientLANP2PRequestChunksResponse)
}

void CMsgClientLANP2PRequestChunksResponse::SharedCtor() {
}

CMsgClientLANP2PRequestChunksResponse::~CMsgClientLANP2PRequestChunksResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLANP2PRequestChunksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLANP2PRequestChunksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientLANP2PRequestChunksResponse::ArenaDtor(void* object) {
  CMsgClientLANP2PRequestChunksResponse* _this = reinterpret_cast< CMsgClientLANP2PRequestChunksResponse* >(object);
  (void)_this;
}
void CMsgClientLANP2PRequestChunksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLANP2PRequestChunksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLANP2PRequestChunksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLANP2PRequestChunksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunresponses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLANP2PRequestChunksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunresponses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunresponses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLANP2PRequestChunksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLANP2PRequestChunksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunresponses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunresponses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chunresponses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLANP2PRequestChunksResponse)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLANP2PRequestChunksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunresponses = 1;
  total_size += 1UL * this->_internal_chunresponses_size();
  for (const auto& msg : this->chunresponses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLANP2PRequestChunksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLANP2PRequestChunksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLANP2PRequestChunksResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunresponses_.MergeFrom(from.chunresponses_);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse::InternalSwap(CMsgClientLANP2PRequestChunksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunresponses_.InternalSwap(&other->chunresponses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLANP2PRequestChunksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientPeerChunkRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPeerChunkRequest>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientPeerChunkRequest::CMsgClientPeerChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientPeerChunkRequest)
}
CMsgClientPeerChunkRequest::CMsgClientPeerChunkRequest(const CMsgClientPeerChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&access_token_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(access_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPeerChunkRequest)
}

void CMsgClientPeerChunkRequest::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&access_token_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(access_token_));
}

CMsgClientPeerChunkRequest::~CMsgClientPeerChunkRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientPeerChunkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientPeerChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPeerChunkRequest::ArenaDtor(void* object) {
  CMsgClientPeerChunkRequest* _this = reinterpret_cast< CMsgClientPeerChunkRequest* >(object);
  (void)_this;
}
void CMsgClientPeerChunkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPeerChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPeerChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPeerChunkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&access_token_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(access_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPeerChunkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 depot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 access_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_access_token(&has_bits);
          access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientPeerChunkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPeerChunkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depot_id(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sha(), target);
  }

  // optional uint64 access_token = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPeerChunkRequest)
  return target;
}

size_t CMsgClientPeerChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPeerChunkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes sha = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 depot_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_depot_id());
    }

    // optional uint64 access_token = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_access_token());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPeerChunkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientPeerChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPeerChunkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientPeerChunkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientPeerChunkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientPeerChunkRequest)
    MergeFrom(*source);
  }
}

void CMsgClientPeerChunkRequest::MergeFrom(const CMsgClientPeerChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPeerChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      access_token_ = from.access_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPeerChunkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientPeerChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPeerChunkRequest::CopyFrom(const CMsgClientPeerChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPeerChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPeerChunkRequest::IsInitialized() const {
  return true;
}

void CMsgClientPeerChunkRequest::InternalSwap(CMsgClientPeerChunkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPeerChunkRequest, access_token_)
      + sizeof(CMsgClientPeerChunkRequest::access_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPeerChunkRequest, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPeerChunkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientPeerChunkResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPeerChunkResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chundata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientPeerChunkResponse::CMsgClientPeerChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientPeerChunkResponse)
}
CMsgClientPeerChunkResponse::CMsgClientPeerChunkResponse(const CMsgClientPeerChunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArena());
  }
  chundata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chundata()) {
    chundata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chundata(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPeerChunkResponse)
}

void CMsgClientPeerChunkResponse::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chundata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
}

CMsgClientPeerChunkResponse::~CMsgClientPeerChunkResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientPeerChunkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientPeerChunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chundata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPeerChunkResponse::ArenaDtor(void* object) {
  CMsgClientPeerChunkResponse* _this = reinterpret_cast< CMsgClientPeerChunkResponse* >(object);
  (void)_this;
}
void CMsgClientPeerChunkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPeerChunkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPeerChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPeerChunkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      chundata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_) -
        reinterpret_cast<char*>(&result_)) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPeerChunkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 depot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_encrypted(&has_bits);
          encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compressed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_compressed(&has_bits);
          compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes chundata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_chundata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientPeerChunkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPeerChunkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 depot_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_depot_id(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha(), target);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_encrypted(), target);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_compressed(), target);
  }

  // optional bytes chundata = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chundata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPeerChunkResponse)
  return target;
}

size_t CMsgClientPeerChunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPeerChunkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes sha = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional bytes chundata = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chundata());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 depot_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_depot_id());
    }

    // optional bool encrypted = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPeerChunkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientPeerChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPeerChunkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientPeerChunkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientPeerChunkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientPeerChunkResponse)
    MergeFrom(*source);
  }
}

void CMsgClientPeerChunkResponse::MergeFrom(const CMsgClientPeerChunkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPeerChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_chundata(from._internal_chundata());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00000040u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPeerChunkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientPeerChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPeerChunkResponse::CopyFrom(const CMsgClientPeerChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPeerChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPeerChunkResponse::IsInitialized() const {
  return true;
}

void CMsgClientPeerChunkResponse::InternalSwap(CMsgClientPeerChunkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_.Swap(&other->sha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chundata_.Swap(&other->chundata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPeerChunkResponse, compressed_)
      + sizeof(CMsgClientPeerChunkResponse::compressed_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPeerChunkResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPeerChunkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientLANP2PRequestChunks_ChunkKey* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunks_ChunkKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLANP2PRequestChunks_ChunkKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLANP2PRequestChunks* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLANP2PRequestChunks >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLANP2PRequestChunksResponse_ChunkData* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLANP2PRequestChunksResponse* Arena::CreateMaybeMessage< ::CMsgClientLANP2PRequestChunksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLANP2PRequestChunksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPeerChunkRequest* Arena::CreateMaybeMessage< ::CMsgClientPeerChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPeerChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPeerChunkResponse* Arena::CreateMaybeMessage< ::CMsgClientPeerChunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPeerChunkResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
