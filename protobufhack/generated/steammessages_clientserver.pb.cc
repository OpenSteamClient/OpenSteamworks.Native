// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#include "steammessages_clientserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_instance_id_(PROTOBUF_ULONGLONG(0))
  , protocol_version_(0u){}
struct CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal {
  constexpr CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal() {}
  union {
    CMsgClientRegisterAuthTicketWithCM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRegisterAuthTicketWithCMDefaultTypeInternal _CMsgClientRegisterAuthTicketWithCM_default_instance_;
constexpr CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deprecated_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , game_id_(PROTOBUF_ULONGLONG(0))
  , estate_(0u)
  , eauth_session_response_(0u)
  , ticket_crc_(0u)
  , ticket_sequence_(0u)
  , owner_steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientTicketAuthCompleteDefaultTypeInternal {
  constexpr CMsgClientTicketAuthCompleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientTicketAuthCompleteDefaultTypeInternal() {}
  union {
    CMsgClientTicketAuthComplete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientTicketAuthCompleteDefaultTypeInternal _CMsgClientTicketAuthComplete_default_instance_;
constexpr CMsgClientCMList::CMsgClientCMList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cm_addresses_()
  , cm_ports_()
  , cm_websocket_addresses_()
  , percent_default_to_websocket_(0u){}
struct CMsgClientCMListDefaultTypeInternal {
  constexpr CMsgClientCMListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCMListDefaultTypeInternal() {}
  union {
    CMsgClientCMList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCMListDefaultTypeInternal _CMsgClientCMList_default_instance_;
constexpr CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rendezvous_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_dest_(PROTOBUF_ULONGLONG(0))
  , steam_id_src_(PROTOBUF_ULONGLONG(0))
  , legacy_connection_id_src_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientP2PConnectionInfoDefaultTypeInternal {
  constexpr CMsgClientP2PConnectionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientP2PConnectionInfoDefaultTypeInternal() {}
  union {
    CMsgClientP2PConnectionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientP2PConnectionInfoDefaultTypeInternal _CMsgClientP2PConnectionInfo_default_instance_;
constexpr CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : close_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_dest_(PROTOBUF_ULONGLONG(0))
  , steam_id_src_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , ep2p_session_error_(0u)
  , connection_id_dest_(PROTOBUF_ULONGLONG(0))
  , close_reason_(0u){}
struct CMsgClientP2PConnectionFailInfoDefaultTypeInternal {
  constexpr CMsgClientP2PConnectionFailInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientP2PConnectionFailInfoDefaultTypeInternal() {}
  union {
    CMsgClientP2PConnectionFailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientP2PConnectionFailInfoDefaultTypeInternal _CMsgClientP2PConnectionFailInfo_default_instance_;
constexpr CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CMsgClientNetworkingCertRequestDefaultTypeInternal {
  constexpr CMsgClientNetworkingCertRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientNetworkingCertRequestDefaultTypeInternal() {}
  union {
    CMsgClientNetworkingCertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientNetworkingCertRequestDefaultTypeInternal _CMsgClientNetworkingCertRequest_default_instance_;
constexpr CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ca_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ca_key_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientNetworkingCertReplyDefaultTypeInternal {
  constexpr CMsgClientNetworkingCertReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientNetworkingCertReplyDefaultTypeInternal() {}
  union {
    CMsgClientNetworkingCertReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientNetworkingCertReplyDefaultTypeInternal _CMsgClientNetworkingCertReply_default_instance_;
constexpr CMsgClientNetworkingMobileCertRequest::CMsgClientNetworkingMobileCertRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u){}
struct CMsgClientNetworkingMobileCertRequestDefaultTypeInternal {
  constexpr CMsgClientNetworkingMobileCertRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientNetworkingMobileCertRequestDefaultTypeInternal() {}
  union {
    CMsgClientNetworkingMobileCertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientNetworkingMobileCertRequestDefaultTypeInternal _CMsgClientNetworkingMobileCertRequest_default_instance_;
constexpr CMsgClientNetworkingMobileCertReply::CMsgClientNetworkingMobileCertReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientNetworkingMobileCertReplyDefaultTypeInternal {
  constexpr CMsgClientNetworkingMobileCertReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientNetworkingMobileCertReplyDefaultTypeInternal() {}
  union {
    CMsgClientNetworkingMobileCertReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientNetworkingMobileCertReplyDefaultTypeInternal _CMsgClientNetworkingMobileCertReply_default_instance_;
constexpr CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u){}
struct CMsgClientGetAppOwnershipTicketDefaultTypeInternal {
  constexpr CMsgClientGetAppOwnershipTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetAppOwnershipTicketDefaultTypeInternal() {}
  union {
    CMsgClientGetAppOwnershipTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetAppOwnershipTicketDefaultTypeInternal _CMsgClientGetAppOwnershipTicket_default_instance_;
constexpr CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , eresult_(2u){}
struct CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal {
  constexpr CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetAppOwnershipTicketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetAppOwnershipTicketResponseDefaultTypeInternal _CMsgClientGetAppOwnershipTicketResponse_default_instance_;
constexpr CMsgClientSessionToken::CMsgClientSessionToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientSessionTokenDefaultTypeInternal {
  constexpr CMsgClientSessionTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSessionTokenDefaultTypeInternal() {}
  union {
    CMsgClientSessionToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSessionTokenDefaultTypeInternal _CMsgClientSessionToken_default_instance_;
constexpr CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokens_()
  , max_tokens_to_keep_(10u){}
struct CMsgClientGameConnectTokensDefaultTypeInternal {
  constexpr CMsgClientGameConnectTokensDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGameConnectTokensDefaultTypeInternal() {}
  union {
    CMsgClientGameConnectTokens _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGameConnectTokensDefaultTypeInternal _CMsgClientGameConnectTokens_default_instance_;
constexpr CMsgClientGamesPlayed_ProcessInfo::CMsgClientGamesPlayed_ProcessInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : process_id_(0u)
  , process_id_parent_(0u)
  , parent_is_steam_(false){}
struct CMsgClientGamesPlayed_ProcessInfoDefaultTypeInternal {
  constexpr CMsgClientGamesPlayed_ProcessInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGamesPlayed_ProcessInfoDefaultTypeInternal() {}
  union {
    CMsgClientGamesPlayed_ProcessInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGamesPlayed_ProcessInfoDefaultTypeInternal _CMsgClientGamesPlayed_ProcessInfo_default_instance_;
constexpr CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : process_id_list_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_extra_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_data_blob_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vr_hmd_vendor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vr_hmd_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , primary_steam_controller_serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compat_tool_cmd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , beta_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_ip_address_(nullptr)
  , steam_id_gs_(PROTOBUF_ULONGLONG(0))
  , game_id_(PROTOBUF_ULONGLONG(0))
  , deprecated_game_ip_address_(0u)
  , game_port_(0u)
  , is_secure_(false)
  , process_id_(0u)
  , streaming_provider_id_(0u)
  , game_flags_(0u)
  , owner_id_(0u)
  , launch_option_type_(0u)
  , total_steam_controller_count_(0u)
  , total_non_steam_controller_count_(0u)
  , controller_workshop_file_id_(PROTOBUF_ULONGLONG(0))
  , launch_source_(0u)
  , vr_hmd_runtime_(0u)
  , controller_connection_type_(0u)
  , game_os_platform_(0)
  , game_build_id_(0u)
  , compat_tool_id_(0u)
  , compat_tool_build_id_(0u)
  , dlc_context_(0u)
  , primary_controller_type_(-1){}
struct CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal {
  constexpr CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal() {}
  union {
    CMsgClientGamesPlayed_GamePlayed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGamesPlayed_GamePlayedDefaultTypeInternal _CMsgClientGamesPlayed_GamePlayed_default_instance_;
constexpr CMsgClientGamesPlayed::CMsgClientGamesPlayed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_played_()
  , client_os_type_(0u)
  , cloud_gaming_platform_(0u)
  , recent_reauthentication_(false){}
struct CMsgClientGamesPlayedDefaultTypeInternal {
  constexpr CMsgClientGamesPlayedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGamesPlayedDefaultTypeInternal() {}
  union {
    CMsgClientGamesPlayed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGamesPlayedDefaultTypeInternal _CMsgClientGamesPlayed_default_instance_;
constexpr CMsgGSApprove::CMsgGSApprove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0))
  , owner_steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGSApproveDefaultTypeInternal {
  constexpr CMsgGSApproveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSApproveDefaultTypeInternal() {}
  union {
    CMsgGSApprove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSApproveDefaultTypeInternal _CMsgGSApprove_default_instance_;
constexpr CMsgGSDeny::CMsgGSDeny(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deny_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , edeny_reason_(0){}
struct CMsgGSDenyDefaultTypeInternal {
  constexpr CMsgGSDenyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSDenyDefaultTypeInternal() {}
  union {
    CMsgGSDeny _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSDenyDefaultTypeInternal _CMsgGSDeny_default_instance_;
constexpr CMsgGSKick::CMsgGSKick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0))
  , edeny_reason_(0){}
struct CMsgGSKickDefaultTypeInternal {
  constexpr CMsgGSKickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSKickDefaultTypeInternal() {}
  union {
    CMsgGSKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSKickDefaultTypeInternal _CMsgGSKick_default_instance_;
constexpr CMsgClientAuthList::CMsgClientAuthList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tickets_()
  , app_ids_()
  , tokens_left_(0u)
  , last_request_seq_(0u)
  , last_request_seq_from_server_(0u)
  , message_sequence_(0u)
  , filtered_(false){}
struct CMsgClientAuthListDefaultTypeInternal {
  constexpr CMsgClientAuthListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAuthListDefaultTypeInternal() {}
  union {
    CMsgClientAuthList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAuthListDefaultTypeInternal _CMsgClientAuthList_default_instance_;
constexpr CMsgClientAuthListAck::CMsgClientAuthListAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_crc_()
  , app_ids_()
  , message_sequence_(0u){}
struct CMsgClientAuthListAckDefaultTypeInternal {
  constexpr CMsgClientAuthListAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAuthListAckDefaultTypeInternal() {}
  union {
    CMsgClientAuthListAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAuthListAckDefaultTypeInternal _CMsgClientAuthListAck_default_instance_;
constexpr CMsgClientLicenseList_License::CMsgClientLicenseList_License(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchase_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , package_id_(0u)
  , time_created_(0u)
  , time_next_process_(0u)
  , minute_limit_(0)
  , minutes_used_(0)
  , payment_method_(0u)
  , flags_(0u)
  , license_type_(0u)
  , territory_code_(0)
  , change_number_(0)
  , owner_id_(0u)
  , initial_period_(0u)
  , initial_time_unit_(0u)
  , renewal_period_(0u)
  , access_token_(PROTOBUF_ULONGLONG(0))
  , renewal_time_unit_(0u)
  , master_package_id_(0u){}
struct CMsgClientLicenseList_LicenseDefaultTypeInternal {
  constexpr CMsgClientLicenseList_LicenseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLicenseList_LicenseDefaultTypeInternal() {}
  union {
    CMsgClientLicenseList_License _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLicenseList_LicenseDefaultTypeInternal _CMsgClientLicenseList_License_default_instance_;
constexpr CMsgClientLicenseList::CMsgClientLicenseList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : licenses_()
  , eresult_(2){}
struct CMsgClientLicenseListDefaultTypeInternal {
  constexpr CMsgClientLicenseListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLicenseListDefaultTypeInternal() {}
  union {
    CMsgClientLicenseList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLicenseListDefaultTypeInternal _CMsgClientLicenseList_default_instance_;
constexpr CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bis_limited_account_(false)
  , bis_community_banned_(false)
  , bis_locked_account_(false)
  , bis_limited_account_allowed_to_invite_friends_(false){}
struct CMsgClientIsLimitedAccountDefaultTypeInternal {
  constexpr CMsgClientIsLimitedAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientIsLimitedAccountDefaultTypeInternal() {}
  union {
    CMsgClientIsLimitedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientIsLimitedAccountDefaultTypeInternal _CMsgClientIsLimitedAccount_default_instance_;
constexpr CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_stat_(0u)
  , stat_aggregate_method_(0u){}
struct CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal {
  constexpr CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal() {}
  union {
    CMsgClientRequestedClientStats_StatsToSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestedClientStats_StatsToSendDefaultTypeInternal _CMsgClientRequestedClientStats_StatsToSend_default_instance_;
constexpr CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_to_send_(){}
struct CMsgClientRequestedClientStatsDefaultTypeInternal {
  constexpr CMsgClientRequestedClientStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestedClientStatsDefaultTypeInternal() {}
  union {
    CMsgClientRequestedClientStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestedClientStatsDefaultTypeInternal _CMsgClientRequestedClientStats_default_instance_;
constexpr CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ll_value_(PROTOBUF_LONGLONG(0))
  , client_stat_(0u)
  , time_of_day_(0u)
  , cell_id_(0u)
  , depot_id_(0u)
  , app_id_(0u){}
struct CMsgClientStat2_StatDetailDefaultTypeInternal {
  constexpr CMsgClientStat2_StatDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStat2_StatDetailDefaultTypeInternal() {}
  union {
    CMsgClientStat2_StatDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStat2_StatDetailDefaultTypeInternal _CMsgClientStat2_StatDetail_default_instance_;
constexpr CMsgClientStat2::CMsgClientStat2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_detail_(){}
struct CMsgClientStat2DefaultTypeInternal {
  constexpr CMsgClientStat2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStat2DefaultTypeInternal() {}
  union {
    CMsgClientStat2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStat2DefaultTypeInternal _CMsgClientStat2_default_instance_;
constexpr CMsgClientInviteToGame::CMsgClientInviteToGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connect_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_play_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_dest_(PROTOBUF_ULONGLONG(0))
  , steam_id_src_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientInviteToGameDefaultTypeInternal {
  constexpr CMsgClientInviteToGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientInviteToGameDefaultTypeInternal() {}
  union {
    CMsgClientInviteToGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientInviteToGameDefaultTypeInternal _CMsgClientInviteToGame_default_instance_;
constexpr CMsgClientChatInvite::CMsgClientChatInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_invited_(PROTOBUF_ULONGLONG(0))
  , steam_id_chat_(PROTOBUF_ULONGLONG(0))
  , steam_id_patron_(PROTOBUF_ULONGLONG(0))
  , steam_id_friend_chat_(PROTOBUF_ULONGLONG(0))
  , game_id_(PROTOBUF_ULONGLONG(0))
  , chatroom_type_(0){}
struct CMsgClientChatInviteDefaultTypeInternal {
  constexpr CMsgClientChatInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChatInviteDefaultTypeInternal() {}
  union {
    CMsgClientChatInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChatInviteDefaultTypeInternal _CMsgClientChatInvite_default_instance_;
constexpr CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connect_attempts_(0)
  , connect_successes_(0)
  , connect_failures_(0)
  , connections_dropped_(0)
  , seconds_running_(0u)
  , msec_tologonthistime_(0u)
  , count_bad_cms_(0u)
  , no_udp_connectivity_(false)
  , no_tcp_connectivity_(false)
  , no_websocket_443_connectivity_(false)
  , no_websocket_non_443_connectivity_(false){}
struct CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal {
  constexpr CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal() {}
  union {
    CMsgClientConnectionStats_Stats_Logon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientConnectionStats_Stats_LogonDefaultTypeInternal _CMsgClientConnectionStats_Stats_Logon_default_instance_;
constexpr CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pkts_sent_(PROTOBUF_ULONGLONG(0))
  , bytes_sent_(PROTOBUF_ULONGLONG(0))
  , pkts_recv_(PROTOBUF_ULONGLONG(0))
  , pkts_processed_(PROTOBUF_ULONGLONG(0))
  , bytes_recv_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal {
  constexpr CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal() {}
  union {
    CMsgClientConnectionStats_Stats_UDP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientConnectionStats_Stats_UDPDefaultTypeInternal _CMsgClientConnectionStats_Stats_UDP_default_instance_;
constexpr CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_udp_(nullptr)
  , connections_udp_(0u)
  , connections_tcp_(0u)
  , pkts_abandoned_(PROTOBUF_ULONGLONG(0))
  , conn_req_received_(PROTOBUF_ULONGLONG(0))
  , pkts_resent_(PROTOBUF_ULONGLONG(0))
  , msgs_sent_(PROTOBUF_ULONGLONG(0))
  , msgs_sent_failed_(PROTOBUF_ULONGLONG(0))
  , msgs_recv_(PROTOBUF_ULONGLONG(0))
  , datagrams_sent_(PROTOBUF_ULONGLONG(0))
  , datagrams_recv_(PROTOBUF_ULONGLONG(0))
  , bad_pkts_recv_(PROTOBUF_ULONGLONG(0))
  , unknown_conn_pkts_recv_(PROTOBUF_ULONGLONG(0))
  , missed_pkts_recv_(PROTOBUF_ULONGLONG(0))
  , dup_pkts_recv_(PROTOBUF_ULONGLONG(0))
  , failed_connect_challenges_(PROTOBUF_ULONGLONG(0))
  , micro_sec_avg_latency_(0u)
  , micro_sec_min_latency_(0u)
  , micro_sec_max_latency_(0u){}
struct CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal {
  constexpr CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal() {}
  union {
    CMsgClientConnectionStats_Stats_VConn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientConnectionStats_Stats_VConnDefaultTypeInternal _CMsgClientConnectionStats_Stats_VConn_default_instance_;
constexpr CMsgClientConnectionStats::CMsgClientConnectionStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_logon_(nullptr)
  , stats_vconn_(nullptr){}
struct CMsgClientConnectionStatsDefaultTypeInternal {
  constexpr CMsgClientConnectionStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientConnectionStatsDefaultTypeInternal() {}
  union {
    CMsgClientConnectionStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientConnectionStatsDefaultTypeInternal _CMsgClientConnectionStats_default_instance_;
constexpr CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_(0u)
  , changed_(false){}
struct CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal {
  constexpr CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal() {}
  union {
    CMsgClientServersAvailable_Server_Types_Available _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServersAvailable_Server_Types_AvailableDefaultTypeInternal _CMsgClientServersAvailable_Server_Types_Available_default_instance_;
constexpr CMsgClientServersAvailable::CMsgClientServersAvailable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_types_available_()
  , server_type_for_auth_services_(0u){}
struct CMsgClientServersAvailableDefaultTypeInternal {
  constexpr CMsgClientServersAvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServersAvailableDefaultTypeInternal() {}
  union {
    CMsgClientServersAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServersAvailableDefaultTypeInternal _CMsgClientServersAvailable_default_instance_;
constexpr CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : failure_strings_(){}
struct CMsgClientReportOverlayDetourFailureDefaultTypeInternal {
  constexpr CMsgClientReportOverlayDetourFailureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientReportOverlayDetourFailureDefaultTypeInternal() {}
  union {
    CMsgClientReportOverlayDetourFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientReportOverlayDetourFailureDefaultTypeInternal _CMsgClientReportOverlayDetourFailure_default_instance_;
constexpr CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CMsgClientRequestEncryptedAppTicketDefaultTypeInternal {
  constexpr CMsgClientRequestEncryptedAppTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestEncryptedAppTicketDefaultTypeInternal() {}
  union {
    CMsgClientRequestEncryptedAppTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestEncryptedAppTicketDefaultTypeInternal _CMsgClientRequestEncryptedAppTicket_default_instance_;
constexpr CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_app_ticket_(nullptr)
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal {
  constexpr CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestEncryptedAppTicketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestEncryptedAppTicketResponseDefaultTypeInternal _CMsgClientRequestEncryptedAppTicketResponse_default_instance_;
constexpr CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_wallet_(false)
  , balance_(0)
  , currency_(0)
  , balance_delayed_(0)
  , balance64_(PROTOBUF_LONGLONG(0))
  , balance64_delayed_(PROTOBUF_LONGLONG(0))
  , realm_(0){}
struct CMsgClientWalletInfoUpdateDefaultTypeInternal {
  constexpr CMsgClientWalletInfoUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientWalletInfoUpdateDefaultTypeInternal() {}
  union {
    CMsgClientWalletInfoUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientWalletInfoUpdateDefaultTypeInternal _CMsgClientWalletInfoUpdate_default_instance_;
constexpr CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_clan_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientAMGetClanOfficersDefaultTypeInternal {
  constexpr CMsgClientAMGetClanOfficersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetClanOfficersDefaultTypeInternal() {}
  union {
    CMsgClientAMGetClanOfficers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetClanOfficersDefaultTypeInternal _CMsgClientAMGetClanOfficers_default_instance_;
constexpr CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_clan_(PROTOBUF_ULONGLONG(0))
  , officer_count_(0)
  , eresult_(2){}
struct CMsgClientAMGetClanOfficersResponseDefaultTypeInternal {
  constexpr CMsgClientAMGetClanOfficersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetClanOfficersResponseDefaultTypeInternal() {}
  union {
    CMsgClientAMGetClanOfficersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetClanOfficersResponseDefaultTypeInternal _CMsgClientAMGetClanOfficersResponse_default_instance_;
constexpr CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal {
  constexpr CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal() {}
  union {
    CMsgClientAMGetPersonaNameHistory_IdInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetPersonaNameHistory_IdInstanceDefaultTypeInternal _CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_;
constexpr CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , id_count_(0){}
struct CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal {
  constexpr CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal() {}
  union {
    CMsgClientAMGetPersonaNameHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetPersonaNameHistoryDefaultTypeInternal _CMsgClientAMGetPersonaNameHistory_default_instance_;
constexpr CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_since_(0u){}
struct CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal {
  constexpr CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal() {}
  union {
    CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstanceDefaultTypeInternal _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_;
constexpr CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_()
  , steamid_(PROTOBUF_ULONGLONG(0))
  , eresult_(2){}
struct CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal {
  constexpr CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal() {}
  union {
    CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstanceDefaultTypeInternal _CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_;
constexpr CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_(){}
struct CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal {
  constexpr CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal() {}
  union {
    CMsgClientAMGetPersonaNameHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAMGetPersonaNameHistoryResponseDefaultTypeInternal _CMsgClientAMGetPersonaNameHistoryResponse_default_instance_;
constexpr CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eservertype_(0u)
  , app_id_(0u){}
struct CMsgClientDeregisterWithServerDefaultTypeInternal {
  constexpr CMsgClientDeregisterWithServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDeregisterWithServerDefaultTypeInternal() {}
  union {
    CMsgClientDeregisterWithServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDeregisterWithServerDefaultTypeInternal _CMsgClientDeregisterWithServer_default_instance_;
constexpr CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clan_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientClanState_NameInfoDefaultTypeInternal {
  constexpr CMsgClientClanState_NameInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientClanState_NameInfoDefaultTypeInternal() {}
  union {
    CMsgClientClanState_NameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientClanState_NameInfoDefaultTypeInternal _CMsgClientClanState_NameInfo_default_instance_;
constexpr CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_(0u)
  , online_(0u)
  , chatting_(0u)
  , in_game_(0u)
  , chat_room_members_(0u){}
struct CMsgClientClanState_UserCountsDefaultTypeInternal {
  constexpr CMsgClientClanState_UserCountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientClanState_UserCountsDefaultTypeInternal() {}
  union {
    CMsgClientClanState_UserCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientClanState_UserCountsDefaultTypeInternal _CMsgClientClanState_UserCounts_default_instance_;
constexpr CMsgClientClanState_Event::CMsgClientClanState_Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gid_(PROTOBUF_ULONGLONG(0))
  , event_time_(0u)
  , just_posted_(false)
  , game_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientClanState_EventDefaultTypeInternal {
  constexpr CMsgClientClanState_EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientClanState_EventDefaultTypeInternal() {}
  union {
    CMsgClientClanState_Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientClanState_EventDefaultTypeInternal _CMsgClientClanState_Event_default_instance_;
constexpr CMsgClientClanState::CMsgClientClanState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , announcements_()
  , name_info_(nullptr)
  , user_counts_(nullptr)
  , steamid_clan_(PROTOBUF_ULONGLONG(0))
  , clan_account_flags_(0u)
  , chat_room_private_(false){}
struct CMsgClientClanStateDefaultTypeInternal {
  constexpr CMsgClientClanStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientClanStateDefaultTypeInternal() {}
  union {
    CMsgClientClanState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientClanStateDefaultTypeInternal _CMsgClientClanState_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_2eproto[52];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterAuthTicketWithCM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterAuthTicketWithCM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterAuthTicketWithCM, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterAuthTicketWithCM, ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterAuthTicketWithCM, client_instance_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, estate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, eauth_session_response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, deprecated_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, ticket_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, ticket_sequence_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientTicketAuthComplete, owner_steam_id_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCMList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCMList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCMList, cm_addresses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCMList, cm_ports_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCMList, cm_websocket_addresses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCMList, percent_default_to_websocket_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, steam_id_dest_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, steam_id_src_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, candidate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, legacy_connection_id_src_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionInfo, rendezvous_),
  2,
  3,
  5,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, steam_id_dest_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, steam_id_src_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, ep2p_session_error_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, connection_id_dest_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, close_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientP2PConnectionFailInfo, close_message_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertRequest, key_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertRequest, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertReply, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertReply, ca_key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingCertReply, ca_signature_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingMobileCertRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingMobileCertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingMobileCertRequest, app_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingMobileCertReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingMobileCertReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNetworkingMobileCertReply, encoded_cert_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicket, app_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicketResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicketResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAppOwnershipTicketResponse, ticket_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSessionToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSessionToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSessionToken, token_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGameConnectTokens, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGameConnectTokens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGameConnectTokens, max_tokens_to_keep_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGameConnectTokens, tokens_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_ProcessInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_ProcessInfo, process_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_ProcessInfo, process_id_parent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_ProcessInfo, parent_is_steam_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, steam_id_gs_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, deprecated_game_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, is_secure_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_extra_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_data_blob_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, process_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, streaming_provider_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, owner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, vr_hmd_vendor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, vr_hmd_model_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, launch_option_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, primary_controller_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, primary_steam_controller_serial_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, total_steam_controller_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, total_non_steam_controller_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, controller_workshop_file_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, launch_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, vr_hmd_runtime_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, controller_connection_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_os_platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, game_build_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, compat_tool_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, compat_tool_cmd_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, compat_tool_build_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, beta_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, dlc_context_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed_GamePlayed, process_id_list_),
  9,
  10,
  11,
  12,
  13,
  0,
  1,
  2,
  14,
  15,
  16,
  17,
  3,
  4,
  18,
  30,
  5,
  19,
  20,
  21,
  22,
  23,
  8,
  24,
  25,
  26,
  27,
  6,
  28,
  7,
  29,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed, games_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed, client_os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed, cloud_gaming_platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGamesPlayed, recent_reauthentication_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGSApprove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSApprove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSApprove, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSApprove, owner_steam_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGSDeny, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSDeny, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSDeny, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSDeny, edeny_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSDeny, deny_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGSKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSKick, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSKick, edeny_reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, tokens_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, last_request_seq_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, last_request_seq_from_server_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, tickets_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, app_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, message_sequence_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthList, filtered_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthListAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthListAck, ticket_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthListAck, app_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthListAck, message_sequence_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, time_next_process_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, minute_limit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, minutes_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, payment_method_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, purchase_country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, license_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, territory_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, owner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, initial_period_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, initial_time_unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, renewal_period_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, renewal_time_unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, access_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList_License, master_package_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  15,
  17,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLicenseList, licenses_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientIsLimitedAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientIsLimitedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientIsLimitedAccount, bis_limited_account_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientIsLimitedAccount, bis_community_banned_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientIsLimitedAccount, bis_locked_account_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientIsLimitedAccount, bis_limited_account_allowed_to_invite_friends_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestedClientStats_StatsToSend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestedClientStats_StatsToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestedClientStats_StatsToSend, client_stat_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestedClientStats_StatsToSend, stat_aggregate_method_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestedClientStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestedClientStats, stats_to_send_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, client_stat_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, ll_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2_StatDetail, app_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStat2, stat_detail_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInviteToGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInviteToGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientInviteToGame, steam_id_dest_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInviteToGame, steam_id_src_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInviteToGame, connect_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInviteToGame, remote_play_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, steam_id_invited_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, steam_id_chat_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, steam_id_patron_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, chatroom_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, steam_id_friend_chat_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, chat_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatInvite, game_id_),
  1,
  2,
  3,
  6,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, connect_attempts_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, connect_successes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, connect_failures_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, connections_dropped_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, seconds_running_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, msec_tologonthistime_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, count_bad_cms_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, no_udp_connectivity_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, no_tcp_connectivity_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, no_websocket_443_connectivity_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_Logon, no_websocket_non_443_connectivity_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, pkts_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, pkts_processed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_UDP, bytes_recv_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, connections_udp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, connections_tcp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, stats_udp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, pkts_abandoned_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, conn_req_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, pkts_resent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, msgs_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, msgs_sent_failed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, msgs_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, datagrams_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, datagrams_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, bad_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, unknown_conn_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, missed_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, dup_pkts_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, failed_connect_challenges_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, micro_sec_avg_latency_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, micro_sec_min_latency_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats_Stats_VConn, micro_sec_max_latency_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats, stats_logon_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientConnectionStats, stats_vconn_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable_Server_Types_Available, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable_Server_Types_Available, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable_Server_Types_Available, server_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable_Server_Types_Available, changed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable, server_types_available_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServersAvailable, server_type_for_auth_services_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientReportOverlayDetourFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientReportOverlayDetourFailure, failure_strings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicket, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicket, userdata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicketResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicketResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestEncryptedAppTicketResponse, encrypted_app_ticket_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, has_wallet_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, balance_delayed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, balance64_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, balance64_delayed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWalletInfoUpdate, realm_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficers, steamid_clan_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficersResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficersResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficersResponse, steamid_clan_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetClanOfficersResponse, officer_count_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory_IdInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory_IdInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory_IdInstance, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory, id_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistory, ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_since_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, names_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAMGetPersonaNameHistoryResponse, responses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeregisterWithServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeregisterWithServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeregisterWithServer, eservertype_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeregisterWithServer, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_NameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_NameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_NameInfo, clan_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_NameInfo, sha_avatar_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, online_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, chatting_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, in_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_UserCounts, chat_room_members_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, gid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, event_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, headline_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState_Event, just_posted_),
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, steamid_clan_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, clan_account_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, name_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, user_counts_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, events_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, announcements_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientClanState, chat_room_private_),
  2,
  3,
  0,
  1,
  ~0u,
  ~0u,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgClientRegisterAuthTicketWithCM)},
  { 11, 24, sizeof(::CMsgClientTicketAuthComplete)},
  { 32, 41, sizeof(::CMsgClientCMList)},
  { 45, 56, sizeof(::CMsgClientP2PConnectionInfo)},
  { 62, 74, sizeof(::CMsgClientP2PConnectionFailInfo)},
  { 81, 88, sizeof(::CMsgClientNetworkingCertRequest)},
  { 90, 98, sizeof(::CMsgClientNetworkingCertReply)},
  { 101, 107, sizeof(::CMsgClientNetworkingMobileCertRequest)},
  { 108, 114, sizeof(::CMsgClientNetworkingMobileCertReply)},
  { 115, 121, sizeof(::CMsgClientGetAppOwnershipTicket)},
  { 122, 130, sizeof(::CMsgClientGetAppOwnershipTicketResponse)},
  { 133, 139, sizeof(::CMsgClientSessionToken)},
  { 140, 147, sizeof(::CMsgClientGameConnectTokens)},
  { 149, 157, sizeof(::CMsgClientGamesPlayed_ProcessInfo)},
  { 160, 197, sizeof(::CMsgClientGamesPlayed_GamePlayed)},
  { 229, 238, sizeof(::CMsgClientGamesPlayed)},
  { 242, 249, sizeof(::CMsgGSApprove)},
  { 251, 259, sizeof(::CMsgGSDeny)},
  { 262, 269, sizeof(::CMsgGSKick)},
  { 271, 283, sizeof(::CMsgClientAuthList)},
  { 290, 298, sizeof(::CMsgClientAuthListAck)},
  { 301, 324, sizeof(::CMsgClientLicenseList_License)},
  { 342, 349, sizeof(::CMsgClientLicenseList)},
  { 351, 360, sizeof(::CMsgClientIsLimitedAccount)},
  { 364, 371, sizeof(::CMsgClientRequestedClientStats_StatsToSend)},
  { 373, -1, sizeof(::CMsgClientRequestedClientStats)},
  { 379, 390, sizeof(::CMsgClientStat2_StatDetail)},
  { 396, -1, sizeof(::CMsgClientStat2)},
  { 402, 411, sizeof(::CMsgClientInviteToGame)},
  { 415, 427, sizeof(::CMsgClientChatInvite)},
  { 434, 450, sizeof(::CMsgClientConnectionStats_Stats_Logon)},
  { 461, 471, sizeof(::CMsgClientConnectionStats_Stats_UDP)},
  { 476, 500, sizeof(::CMsgClientConnectionStats_Stats_VConn)},
  { 519, 526, sizeof(::CMsgClientConnectionStats)},
  { 528, 535, sizeof(::CMsgClientServersAvailable_Server_Types_Available)},
  { 537, 544, sizeof(::CMsgClientServersAvailable)},
  { 546, -1, sizeof(::CMsgClientReportOverlayDetourFailure)},
  { 552, 559, sizeof(::CMsgClientRequestEncryptedAppTicket)},
  { 561, 569, sizeof(::CMsgClientRequestEncryptedAppTicketResponse)},
  { 572, 584, sizeof(::CMsgClientWalletInfoUpdate)},
  { 591, 597, sizeof(::CMsgClientAMGetClanOfficers)},
  { 598, 606, sizeof(::CMsgClientAMGetClanOfficersResponse)},
  { 609, 615, sizeof(::CMsgClientAMGetPersonaNameHistory_IdInstance)},
  { 616, 623, sizeof(::CMsgClientAMGetPersonaNameHistory)},
  { 625, 632, sizeof(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance)},
  { 634, 642, sizeof(::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance)},
  { 645, -1, sizeof(::CMsgClientAMGetPersonaNameHistoryResponse)},
  { 651, 658, sizeof(::CMsgClientDeregisterWithServer)},
  { 660, 667, sizeof(::CMsgClientClanState_NameInfo)},
  { 669, 679, sizeof(::CMsgClientClanState_UserCounts)},
  { 684, 694, sizeof(::CMsgClientClanState_Event)},
  { 699, 711, sizeof(::CMsgClientClanState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRegisterAuthTicketWithCM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientTicketAuthComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCMList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientP2PConnectionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientP2PConnectionFailInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientNetworkingCertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientNetworkingCertReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientNetworkingMobileCertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientNetworkingMobileCertReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetAppOwnershipTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetAppOwnershipTicketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSessionToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGameConnectTokens_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGamesPlayed_ProcessInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGamesPlayed_GamePlayed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGamesPlayed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSApprove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSDeny_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSKick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAuthList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAuthListAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLicenseList_License_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLicenseList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientIsLimitedAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestedClientStats_StatsToSend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestedClientStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStat2_StatDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStat2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientInviteToGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChatInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientConnectionStats_Stats_Logon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientConnectionStats_Stats_UDP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientConnectionStats_Stats_VConn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientConnectionStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServersAvailable_Server_Types_Available_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServersAvailable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientReportOverlayDetourFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestEncryptedAppTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestEncryptedAppTicketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientWalletInfoUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetClanOfficers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetClanOfficersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetPersonaNameHistory_IdInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetPersonaNameHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAMGetPersonaNameHistoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDeregisterWithServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientClanState_NameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientClanState_UserCounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientClanState_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientClanState_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n steammessages_clientserver.proto\032 goog"
  "le/protobuf/descriptor.proto\032\030steammessa"
  "ges_base.proto\032\032encrypted_app_ticket.pro"
  "to\"j\n\"CMsgClientRegisterAuthTicketWithCM"
  "\022\030\n\020protocol_version\030\001 \001(\r\022\016\n\006ticket\030\003 \001"
  "(\014\022\032\n\022client_instance_id\030\004 \001(\004\"\321\001\n\034CMsgC"
  "lientTicketAuthComplete\022\020\n\010steam_id\030\001 \001("
  "\006\022\017\n\007game_id\030\002 \001(\006\022\016\n\006estate\030\003 \001(\r\022\036\n\026ea"
  "uth_session_response\030\004 \001(\r\022\031\n\021DEPRECATED"
  "_ticket\030\005 \001(\014\022\022\n\nticket_crc\030\006 \001(\r\022\027\n\017tic"
  "ket_sequence\030\007 \001(\r\022\026\n\016owner_steam_id\030\010 \001"
  "(\006\"\200\001\n\020CMsgClientCMList\022\024\n\014cm_addresses\030"
  "\001 \003(\r\022\020\n\010cm_ports\030\002 \003(\r\022\036\n\026cm_websocket_"
  "addresses\030\003 \003(\t\022$\n\034percent_default_to_we"
  "bsocket\030\004 \001(\r\"\243\001\n\033CMsgClientP2PConnectio"
  "nInfo\022\025\n\rsteam_id_dest\030\001 \001(\006\022\024\n\014steam_id"
  "_src\030\002 \001(\006\022\016\n\006app_id\030\003 \001(\r\022\021\n\tcandidate\030"
  "\004 \001(\014\022 \n\030legacy_connection_id_src\030\005 \001(\006\022"
  "\022\n\nrendezvous\030\006 \001(\014\"\303\001\n\037CMsgClientP2PCon"
  "nectionFailInfo\022\025\n\rsteam_id_dest\030\001 \001(\006\022\024"
  "\n\014steam_id_src\030\002 \001(\006\022\016\n\006app_id\030\003 \001(\r\022\032\n\022"
  "ep2p_session_error\030\004 \001(\r\022\032\n\022connection_i"
  "d_dest\030\005 \001(\006\022\024\n\014close_reason\030\007 \001(\r\022\025\n\rcl"
  "ose_message\030\010 \001(\t\"C\n\037CMsgClientNetworkin"
  "gCertRequest\022\020\n\010key_data\030\002 \001(\014\022\016\n\006app_id"
  "\030\003 \001(\r\"V\n\035CMsgClientNetworkingCertReply\022"
  "\014\n\004cert\030\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014ca_s"
  "ignature\030\006 \001(\014\"7\n%CMsgClientNetworkingMo"
  "bileCertRequest\022\016\n\006app_id\030\001 \001(\r\";\n#CMsgC"
  "lientNetworkingMobileCertReply\022\024\n\014encode"
  "d_cert\030\001 \001(\t\"1\n\037CMsgClientGetAppOwnershi"
  "pTicket\022\016\n\006app_id\030\001 \001(\r\"]\n\'CMsgClientGet"
  "AppOwnershipTicketResponse\022\022\n\007eresult\030\001 "
  "\001(\r:\0012\022\016\n\006app_id\030\002 \001(\r\022\016\n\006ticket\030\003 \001(\014\"\'"
  "\n\026CMsgClientSessionToken\022\r\n\005token\030\001 \001(\004\""
  "M\n\033CMsgClientGameConnectTokens\022\036\n\022max_to"
  "kens_to_keep\030\001 \001(\r:\00210\022\016\n\006tokens\030\002 \003(\014\"\231"
  "\t\n\025CMsgClientGamesPlayed\0227\n\014games_played"
  "\030\001 \003(\0132!.CMsgClientGamesPlayed.GamePlaye"
  "d\022\026\n\016client_os_type\030\002 \001(\r\022\035\n\025cloud_gamin"
  "g_platform\030\003 \001(\r\022\037\n\027recent_reauthenticat"
  "ion\030\004 \001(\010\032U\n\013ProcessInfo\022\022\n\nprocess_id\030\001"
  " \001(\r\022\031\n\021process_id_parent\030\002 \001(\r\022\027\n\017paren"
  "t_is_steam\030\003 \001(\010\032\227\007\n\nGamePlayed\022\023\n\013steam"
  "_id_gs\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\006\022\"\n\032depreca"
  "ted_game_ip_address\030\003 \001(\r\022\021\n\tgame_port\030\004"
  " \001(\r\022\021\n\tis_secure\030\005 \001(\010\022\r\n\005token\030\006 \001(\014\022\027"
  "\n\017game_extra_info\030\007 \001(\t\022\026\n\016game_data_blo"
  "b\030\010 \001(\014\022\022\n\nprocess_id\030\t \001(\r\022\035\n\025streaming"
  "_provider_id\030\n \001(\r\022\022\n\ngame_flags\030\013 \001(\r\022\020"
  "\n\010owner_id\030\014 \001(\r\022\025\n\rvr_hmd_vendor\030\r \001(\t\022"
  "\024\n\014vr_hmd_model\030\016 \001(\t\022\035\n\022launch_option_t"
  "ype\030\017 \001(\r:\0010\022#\n\027primary_controller_type\030"
  "\020 \001(\005:\002-1\022\'\n\037primary_steam_controller_se"
  "rial\030\021 \001(\t\022\'\n\034total_steam_controller_cou"
  "nt\030\022 \001(\r:\0010\022+\n total_non_steam_controlle"
  "r_count\030\023 \001(\r:\0010\022&\n\033controller_workshop_"
  "file_id\030\024 \001(\004:\0010\022\030\n\rlaunch_source\030\025 \001(\r:"
  "\0010\022\026\n\016vr_hmd_runtime\030\026 \001(\r\022\'\n\017game_ip_ad"
  "dress\030\027 \001(\0132\016.CMsgIPAddress\022%\n\032controlle"
  "r_connection_type\030\030 \001(\r:\0010\022\030\n\020game_os_pl"
  "atform\030\031 \001(\005\022\025\n\rgame_build_id\030\032 \001(\r\022\031\n\016c"
  "ompat_tool_id\030\033 \001(\r:\0010\022\027\n\017compat_tool_cm"
  "d\030\034 \001(\t\022\034\n\024compat_tool_build_id\030\035 \001(\r\022\021\n"
  "\tbeta_name\030\036 \001(\t\022\023\n\013dlc_context\030\037 \001(\r\022;\n"
  "\017process_id_list\030  \003(\0132\".CMsgClientGames"
  "Played.ProcessInfo\"9\n\rCMsgGSApprove\022\020\n\010s"
  "team_id\030\001 \001(\006\022\026\n\016owner_steam_id\030\002 \001(\006\"I\n"
  "\nCMsgGSDeny\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014edeny_r"
  "eason\030\002 \001(\005\022\023\n\013deny_string\030\003 \001(\t\"4\n\nCMsg"
  "GSKick\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014edeny_reason"
  "\030\002 \001(\005\"\310\001\n\022CMsgClientAuthList\022\023\n\013tokens_"
  "left\030\001 \001(\r\022\030\n\020last_request_seq\030\002 \001(\r\022$\n\034"
  "last_request_seq_from_server\030\003 \001(\r\022 \n\007ti"
  "ckets\030\004 \003(\0132\017.CMsgAuthTicket\022\017\n\007app_ids\030"
  "\005 \003(\r\022\030\n\020message_sequence\030\006 \001(\r\022\020\n\010filte"
  "red\030\007 \001(\010\"V\n\025CMsgClientAuthListAck\022\022\n\nti"
  "cket_crc\030\001 \003(\r\022\017\n\007app_ids\030\002 \003(\r\022\030\n\020messa"
  "ge_sequence\030\003 \001(\r\"\216\004\n\025CMsgClientLicenseL"
  "ist\022\022\n\007eresult\030\001 \001(\005:\0012\0220\n\010licenses\030\002 \003("
  "\0132\036.CMsgClientLicenseList.License\032\256\003\n\007Li"
  "cense\022\022\n\npackage_id\030\001 \001(\r\022\024\n\014time_create"
  "d\030\002 \001(\007\022\031\n\021time_next_process\030\003 \001(\007\022\024\n\014mi"
  "nute_limit\030\004 \001(\005\022\024\n\014minutes_used\030\005 \001(\005\022\026"
  "\n\016payment_method\030\006 \001(\r\022\r\n\005flags\030\007 \001(\r\022\035\n"
  "\025purchase_country_code\030\010 \001(\t\022\024\n\014license_"
  "type\030\t \001(\r\022\026\n\016territory_code\030\n \001(\005\022\025\n\rch"
  "ange_number\030\013 \001(\005\022\020\n\010owner_id\030\014 \001(\r\022\026\n\016i"
  "nitial_period\030\r \001(\r\022\031\n\021initial_time_unit"
  "\030\016 \001(\r\022\026\n\016renewal_period\030\017 \001(\r\022\031\n\021renewa"
  "l_time_unit\030\020 \001(\r\022\024\n\014access_token\030\021 \001(\004\022"
  "\031\n\021master_package_id\030\022 \001(\r\"\252\001\n\032CMsgClien"
  "tIsLimitedAccount\022\033\n\023bis_limited_account"
  "\030\001 \001(\010\022\034\n\024bis_community_banned\030\002 \001(\010\022\032\n\022"
  "bis_locked_account\030\003 \001(\010\0225\n-bis_limited_"
  "account_allowed_to_invite_friends\030\004 \001(\010\""
  "\247\001\n\036CMsgClientRequestedClientStats\022B\n\rst"
  "ats_to_send\030\001 \003(\0132+.CMsgClientRequestedC"
  "lientStats.StatsToSend\032A\n\013StatsToSend\022\023\n"
  "\013client_stat\030\001 \001(\r\022\035\n\025stat_aggregate_met"
  "hod\030\002 \001(\r\"\300\001\n\017CMsgClientStat2\0220\n\013stat_de"
  "tail\030\001 \003(\0132\033.CMsgClientStat2.StatDetail\032"
  "{\n\nStatDetail\022\023\n\013client_stat\030\001 \001(\r\022\020\n\010ll"
  "_value\030\002 \001(\003\022\023\n\013time_of_day\030\003 \001(\r\022\017\n\007cel"
  "l_id\030\004 \001(\r\022\020\n\010depot_id\030\005 \001(\r\022\016\n\006app_id\030\006"
  " \001(\r\"r\n\026CMsgClientInviteToGame\022\025\n\rsteam_"
  "id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030\002 \001(\006\022\026\n\016c"
  "onnect_string\030\003 \001(\t\022\023\n\013remote_play\030\004 \001(\t"
  "\"\271\001\n\024CMsgClientChatInvite\022\030\n\020steam_id_in"
  "vited\030\001 \001(\006\022\025\n\rsteam_id_chat\030\002 \001(\006\022\027\n\017st"
  "eam_id_patron\030\003 \001(\006\022\025\n\rchatroom_type\030\004 \001"
  "(\005\022\034\n\024steam_id_friend_chat\030\005 \001(\006\022\021\n\tchat"
  "_name\030\006 \001(\t\022\017\n\007game_id\030\007 \001(\006\"\371\010\n\031CMsgCli"
  "entConnectionStats\022;\n\013stats_logon\030\001 \001(\0132"
  "&.CMsgClientConnectionStats.Stats_Logon\022"
  ";\n\013stats_vconn\030\002 \001(\0132&.CMsgClientConnect"
  "ionStats.Stats_VConn\032\323\002\n\013Stats_Logon\022\030\n\020"
  "connect_attempts\030\001 \001(\005\022\031\n\021connect_succes"
  "ses\030\002 \001(\005\022\030\n\020connect_failures\030\003 \001(\005\022\033\n\023c"
  "onnections_dropped\030\004 \001(\005\022\027\n\017seconds_runn"
  "ing\030\005 \001(\r\022\034\n\024msec_tologonthistime\030\006 \001(\r\022"
  "\025\n\rcount_bad_cms\030\007 \001(\r\022\033\n\023no_udp_connect"
  "ivity\030\010 \001(\010\022\033\n\023no_tcp_connectivity\030\t \001(\010"
  "\022%\n\035no_websocket_443_connectivity\030\n \001(\010\022"
  ")\n!no_websocket_non_443_connectivity\030\013 \001"
  "(\010\032q\n\tStats_UDP\022\021\n\tpkts_sent\030\001 \001(\004\022\022\n\nby"
  "tes_sent\030\002 \001(\004\022\021\n\tpkts_recv\030\003 \001(\004\022\026\n\016pkt"
  "s_processed\030\004 \001(\004\022\022\n\nbytes_recv\030\005 \001(\004\032\230\004"
  "\n\013Stats_VConn\022\027\n\017connections_udp\030\001 \001(\r\022\027"
  "\n\017connections_tcp\030\002 \001(\r\0227\n\tstats_udp\030\003 \001"
  "(\0132$.CMsgClientConnectionStats.Stats_UDP"
  "\022\026\n\016pkts_abandoned\030\004 \001(\004\022\031\n\021conn_req_rec"
  "eived\030\005 \001(\004\022\023\n\013pkts_resent\030\006 \001(\004\022\021\n\tmsgs"
  "_sent\030\007 \001(\004\022\030\n\020msgs_sent_failed\030\010 \001(\004\022\021\n"
  "\tmsgs_recv\030\t \001(\004\022\026\n\016datagrams_sent\030\n \001(\004"
  "\022\026\n\016datagrams_recv\030\013 \001(\004\022\025\n\rbad_pkts_rec"
  "v\030\014 \001(\004\022\036\n\026unknown_conn_pkts_recv\030\r \001(\004\022"
  "\030\n\020missed_pkts_recv\030\016 \001(\004\022\025\n\rdup_pkts_re"
  "cv\030\017 \001(\004\022!\n\031failed_connect_challenges\030\020 "
  "\001(\004\022\035\n\025micro_sec_avg_latency\030\021 \001(\r\022\035\n\025mi"
  "cro_sec_min_latency\030\022 \001(\r\022\035\n\025micro_sec_m"
  "ax_latency\030\023 \001(\r\"\322\001\n\032CMsgClientServersAv"
  "ailable\022R\n\026server_types_available\030\001 \003(\0132"
  "2.CMsgClientServersAvailable.Server_Type"
  "s_Available\022%\n\035server_type_for_auth_serv"
  "ices\030\002 \001(\r\0329\n\026Server_Types_Available\022\016\n\006"
  "server\030\001 \001(\r\022\017\n\007changed\030\002 \001(\010\"\?\n$CMsgCli"
  "entReportOverlayDetourFailure\022\027\n\017failure"
  "_strings\030\001 \003(\t\"G\n#CMsgClientRequestEncry"
  "ptedAppTicket\022\016\n\006app_id\030\001 \001(\r\022\020\n\010userdat"
  "a\030\002 \001(\014\"\204\001\n+CMsgClientRequestEncryptedAp"
  "pTicketResponse\022\016\n\006app_id\030\001 \001(\r\022\022\n\007eresu"
  "lt\030\002 \001(\005:\0012\0221\n\024encrypted_app_ticket\030\003 \001("
  "\0132\023.EncryptedAppTicket\"\265\001\n\032CMsgClientWal"
  "letInfoUpdate\022\022\n\nhas_wallet\030\001 \001(\010\022\017\n\007bal"
  "ance\030\002 \001(\005\022\020\n\010currency\030\003 \001(\005\022\027\n\017balance_"
  "delayed\030\004 \001(\005\022\027\n\tbalance64\030\005 \001(\003B\004\240\266\030\001\022\037"
  "\n\021balance64_delayed\030\006 \001(\003B\004\240\266\030\001\022\r\n\005realm"
  "\030\007 \001(\005\"3\n\033CMsgClientAMGetClanOfficers\022\024\n"
  "\014steamid_clan\030\001 \001(\006\"f\n#CMsgClientAMGetCl"
  "anOfficersResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\024"
  "\n\014steamid_clan\030\002 \001(\006\022\025\n\rofficer_count\030\003 "
  "\001(\005\"\220\001\n!CMsgClientAMGetPersonaNameHistor"
  "y\022\020\n\010id_count\030\001 \001(\005\022:\n\003Ids\030\002 \003(\0132-.CMsgC"
  "lientAMGetPersonaNameHistory.IdInstance\032"
  "\035\n\nIdInstance\022\017\n\007steamid\030\001 \001(\006\"\303\002\n)CMsgC"
  "lientAMGetPersonaNameHistoryResponse\022O\n\t"
  "responses\030\002 \003(\0132<.CMsgClientAMGetPersona"
  "NameHistoryResponse.NameTableInstance\032\304\001"
  "\n\021NameTableInstance\022\022\n\007eresult\030\001 \001(\005:\0012\022"
  "\017\n\007steamid\030\002 \001(\006\022X\n\005names\030\003 \003(\0132I.CMsgCl"
  "ientAMGetPersonaNameHistoryResponse.Name"
  "TableInstance.NameInstance\0320\n\014NameInstan"
  "ce\022\022\n\nname_since\030\001 \001(\007\022\014\n\004name\030\002 \001(\t\"E\n\036"
  "CMsgClientDeregisterWithServer\022\023\n\013eserve"
  "rtype\030\001 \001(\r\022\016\n\006app_id\030\002 \001(\r\"\253\004\n\023CMsgClie"
  "ntClanState\022\024\n\014steamid_clan\030\001 \001(\006\022\032\n\022cla"
  "n_account_flags\030\003 \001(\r\0220\n\tname_info\030\004 \001(\013"
  "2\035.CMsgClientClanState.NameInfo\0224\n\013user_"
  "counts\030\005 \001(\0132\037.CMsgClientClanState.UserC"
  "ounts\022*\n\006events\030\006 \003(\0132\032.CMsgClientClanSt"
  "ate.Event\0221\n\rannouncements\030\007 \003(\0132\032.CMsgC"
  "lientClanState.Event\022\031\n\021chat_room_privat"
  "e\030\010 \001(\010\0321\n\010NameInfo\022\021\n\tclan_name\030\001 \001(\t\022\022"
  "\n\nsha_avatar\030\002 \001(\014\032k\n\nUserCounts\022\017\n\007memb"
  "ers\030\001 \001(\r\022\016\n\006online\030\002 \001(\r\022\020\n\010chatting\030\003 "
  "\001(\r\022\017\n\007in_game\030\004 \001(\r\022\031\n\021chat_room_member"
  "s\030\005 \001(\r\032`\n\005Event\022\013\n\003gid\030\001 \001(\006\022\022\n\nevent_t"
  "ime\030\002 \001(\r\022\020\n\010headline\030\003 \001(\t\022\017\n\007game_id\030\004"
  " \001(\006\022\023\n\013just_posted\030\005 \001(\010B\037H\001\200\001\000\252\002\027OpenS"
  "teamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_2eproto_deps[3] = {
  &::descriptor_table_encrypted_5fapp_5fticket_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_2eproto = {
  false, false, 7618, descriptor_table_protodef_steammessages_5fclientserver_2eproto, "steammessages_clientserver.proto", 
  &descriptor_table_steammessages_5fclientserver_2eproto_once, descriptor_table_steammessages_5fclientserver_2eproto_deps, 3, 52,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_2eproto, file_level_service_descriptors_steammessages_5fclientserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_2eproto);
  return descriptor_table_steammessages_5fclientserver_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_2eproto(&descriptor_table_steammessages_5fclientserver_2eproto);

// ===================================================================

class CMsgClientRegisterAuthTicketWithCM::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRegisterAuthTicketWithCM>()._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRegisterAuthTicketWithCM)
}
CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  ::memcpy(&client_instance_id_, &from.client_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&client_instance_id_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRegisterAuthTicketWithCM)
}

void CMsgClientRegisterAuthTicketWithCM::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_instance_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&client_instance_id_)) + sizeof(protocol_version_));
}

CMsgClientRegisterAuthTicketWithCM::~CMsgClientRegisterAuthTicketWithCM() {
  // @@protoc_insertion_point(destructor:CMsgClientRegisterAuthTicketWithCM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRegisterAuthTicketWithCM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRegisterAuthTicketWithCM::ArenaDtor(void* object) {
  CMsgClientRegisterAuthTicketWithCM* _this = reinterpret_cast< CMsgClientRegisterAuthTicketWithCM* >(object);
  (void)_this;
}
void CMsgClientRegisterAuthTicketWithCM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRegisterAuthTicketWithCM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRegisterAuthTicketWithCM::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRegisterAuthTicketWithCM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&client_instance_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&client_instance_id_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRegisterAuthTicketWithCM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 client_instance_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_client_instance_id(&has_bits);
          client_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRegisterAuthTicketWithCM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRegisterAuthTicketWithCM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ticket(), target);
  }

  // optional uint64 client_instance_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_client_instance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRegisterAuthTicketWithCM)
  return target;
}

size_t CMsgClientRegisterAuthTicketWithCM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRegisterAuthTicketWithCM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ticket());
    }

    // optional uint64 client_instance_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_instance_id());
    }

    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRegisterAuthTicketWithCM)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRegisterAuthTicketWithCM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRegisterAuthTicketWithCM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRegisterAuthTicketWithCM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRegisterAuthTicketWithCM)
    MergeFrom(*source);
  }
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRegisterAuthTicketWithCM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRegisterAuthTicketWithCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRegisterAuthTicketWithCM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterAuthTicketWithCM::IsInitialized() const {
  return true;
}

void CMsgClientRegisterAuthTicketWithCM::InternalSwap(CMsgClientRegisterAuthTicketWithCM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, protocol_version_)
      + sizeof(CMsgClientRegisterAuthTicketWithCM::protocol_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, client_instance_id_)>(
          reinterpret_cast<char*>(&client_instance_id_),
          reinterpret_cast<char*>(&other->client_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRegisterAuthTicketWithCM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientTicketAuthComplete::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientTicketAuthComplete>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_estate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eauth_session_response(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deprecated_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ticket_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ticket_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_owner_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientTicketAuthComplete)
}
CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deprecated_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deprecated_ticket()) {
    deprecated_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deprecated_ticket(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientTicketAuthComplete)
}

void CMsgClientTicketAuthComplete::SharedCtor() {
deprecated_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
}

CMsgClientTicketAuthComplete::~CMsgClientTicketAuthComplete() {
  // @@protoc_insertion_point(destructor:CMsgClientTicketAuthComplete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientTicketAuthComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deprecated_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientTicketAuthComplete::ArenaDtor(void* object) {
  CMsgClientTicketAuthComplete* _this = reinterpret_cast< CMsgClientTicketAuthComplete* >(object);
  (void)_this;
}
void CMsgClientTicketAuthComplete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientTicketAuthComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientTicketAuthComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientTicketAuthComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deprecated_ticket_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_steam_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientTicketAuthComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 estate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_estate(&has_bits);
          estate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eauth_session_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_eauth_session_response(&has_bits);
          eauth_session_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes DEPRECATED_ticket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_deprecated_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ticket_crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ticket_crc(&has_bits);
          ticket_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ticket_sequence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ticket_sequence(&has_bits);
          ticket_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 owner_steam_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_owner_steam_id(&has_bits);
          owner_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientTicketAuthComplete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientTicketAuthComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // optional uint32 estate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_estate(), target);
  }

  // optional uint32 eauth_session_response = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_eauth_session_response(), target);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_deprecated_ticket(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ticket_crc(), target);
  }

  // optional uint32 ticket_sequence = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ticket_sequence(), target);
  }

  // optional fixed64 owner_steam_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_owner_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientTicketAuthComplete)
  return target;
}

size_t CMsgClientTicketAuthComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientTicketAuthComplete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes DEPRECATED_ticket = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_deprecated_ticket());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_estate());
    }

    // optional uint32 eauth_session_response = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eauth_session_response());
    }

    // optional uint32 ticket_crc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ticket_crc());
    }

    // optional uint32 ticket_sequence = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ticket_sequence());
    }

    // optional fixed64 owner_steam_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientTicketAuthComplete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientTicketAuthComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientTicketAuthComplete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientTicketAuthComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientTicketAuthComplete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientTicketAuthComplete)
    MergeFrom(*source);
  }
}

void CMsgClientTicketAuthComplete::MergeFrom(const CMsgClientTicketAuthComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientTicketAuthComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_ticket(from._internal_deprecated_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      estate_ = from.estate_;
    }
    if (cached_has_bits & 0x00000010u) {
      eauth_session_response_ = from.eauth_session_response_;
    }
    if (cached_has_bits & 0x00000020u) {
      ticket_crc_ = from.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      ticket_sequence_ = from.ticket_sequence_;
    }
    if (cached_has_bits & 0x00000080u) {
      owner_steam_id_ = from.owner_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientTicketAuthComplete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientTicketAuthComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientTicketAuthComplete::CopyFrom(const CMsgClientTicketAuthComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientTicketAuthComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientTicketAuthComplete::IsInitialized() const {
  return true;
}

void CMsgClientTicketAuthComplete::InternalSwap(CMsgClientTicketAuthComplete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deprecated_ticket_.Swap(&other->deprecated_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientTicketAuthComplete, owner_steam_id_)
      + sizeof(CMsgClientTicketAuthComplete::owner_steam_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientTicketAuthComplete, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientTicketAuthComplete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientCMList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCMList>()._has_bits_);
  static void set_has_percent_default_to_websocket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientCMList::CMsgClientCMList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cm_addresses_(arena),
  cm_ports_(arena),
  cm_websocket_addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientCMList)
}
CMsgClientCMList::CMsgClientCMList(const CMsgClientCMList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cm_addresses_(from.cm_addresses_),
      cm_ports_(from.cm_ports_),
      cm_websocket_addresses_(from.cm_websocket_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  percent_default_to_websocket_ = from.percent_default_to_websocket_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientCMList)
}

void CMsgClientCMList::SharedCtor() {
percent_default_to_websocket_ = 0u;
}

CMsgClientCMList::~CMsgClientCMList() {
  // @@protoc_insertion_point(destructor:CMsgClientCMList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientCMList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientCMList::ArenaDtor(void* object) {
  CMsgClientCMList* _this = reinterpret_cast< CMsgClientCMList* >(object);
  (void)_this;
}
void CMsgClientCMList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCMList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCMList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCMList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cm_addresses_.Clear();
  cm_ports_.Clear();
  cm_websocket_addresses_.Clear();
  percent_default_to_websocket_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCMList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 cm_addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_addresses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_addresses(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cm_ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_ports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_ports(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cm_websocket_addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cm_websocket_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCMList.cm_websocket_addresses");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 percent_default_to_websocket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_percent_default_to_websocket(&has_bits);
          percent_default_to_websocket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientCMList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCMList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  for (int i = 0, n = this->_internal_cm_addresses_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cm_addresses(i), target);
  }

  // repeated uint32 cm_ports = 2;
  for (int i = 0, n = this->_internal_cm_ports_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cm_ports(i), target);
  }

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0, n = this->_internal_cm_websocket_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_cm_websocket_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCMList.cm_websocket_addresses");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 percent_default_to_websocket = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_percent_default_to_websocket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCMList)
  return target;
}

size_t CMsgClientCMList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCMList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cm_addresses = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_addresses_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_addresses_size());
    total_size += data_size;
  }

  // repeated uint32 cm_ports = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_ports_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_ports_size());
    total_size += data_size;
  }

  // repeated string cm_websocket_addresses = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cm_websocket_addresses_.size());
  for (int i = 0, n = cm_websocket_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cm_websocket_addresses_.Get(i));
  }

  // optional uint32 percent_default_to_websocket = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_percent_default_to_websocket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientCMList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientCMList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCMList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientCMList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientCMList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientCMList)
    MergeFrom(*source);
  }
}

void CMsgClientCMList::MergeFrom(const CMsgClientCMList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCMList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cm_addresses_.MergeFrom(from.cm_addresses_);
  cm_ports_.MergeFrom(from.cm_ports_);
  cm_websocket_addresses_.MergeFrom(from.cm_websocket_addresses_);
  if (from._internal_has_percent_default_to_websocket()) {
    _internal_set_percent_default_to_websocket(from._internal_percent_default_to_websocket());
  }
}

void CMsgClientCMList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientCMList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCMList::CopyFrom(const CMsgClientCMList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCMList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCMList::IsInitialized() const {
  return true;
}

void CMsgClientCMList::InternalSwap(CMsgClientCMList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cm_addresses_.InternalSwap(&other->cm_addresses_);
  cm_ports_.InternalSwap(&other->cm_ports_);
  cm_websocket_addresses_.InternalSwap(&other->cm_websocket_addresses_);
  swap(percent_default_to_websocket_, other->percent_default_to_websocket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCMList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientP2PConnectionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientP2PConnectionInfo>()._has_bits_);
  static void set_has_steam_id_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_src(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_connection_id_src(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rendezvous(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientP2PConnectionInfo)
}
CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_candidate()) {
    candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidate(), 
      GetArena());
  }
  rendezvous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rendezvous()) {
    rendezvous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rendezvous(), 
      GetArena());
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientP2PConnectionInfo)
}

void CMsgClientP2PConnectionInfo::SharedCtor() {
candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rendezvous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_dest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(app_id_));
}

CMsgClientP2PConnectionInfo::~CMsgClientP2PConnectionInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientP2PConnectionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientP2PConnectionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rendezvous_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientP2PConnectionInfo::ArenaDtor(void* object) {
  CMsgClientP2PConnectionInfo* _this = reinterpret_cast< CMsgClientP2PConnectionInfo* >(object);
  (void)_this;
}
void CMsgClientP2PConnectionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientP2PConnectionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientP2PConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientP2PConnectionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      candidate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rendezvous_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&steam_id_dest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientP2PConnectionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_dest(&has_bits);
          steam_id_dest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_src(&has_bits);
          steam_id_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes candidate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_connection_id_src = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_legacy_connection_id_src(&has_bits);
          legacy_connection_id_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes rendezvous = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_rendezvous();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientP2PConnectionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientP2PConnectionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional bytes candidate = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_candidate(), target);
  }

  // optional fixed64 legacy_connection_id_src = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_legacy_connection_id_src(), target);
  }

  // optional bytes rendezvous = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_rendezvous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientP2PConnectionInfo)
  return target;
}

size_t CMsgClientP2PConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientP2PConnectionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes candidate = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_candidate());
    }

    // optional bytes rendezvous = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rendezvous());
    }

    // optional fixed64 steam_id_dest = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_connection_id_src = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientP2PConnectionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientP2PConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientP2PConnectionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientP2PConnectionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientP2PConnectionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientP2PConnectionInfo)
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionInfo::MergeFrom(const CMsgClientP2PConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientP2PConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_candidate(from._internal_candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rendezvous(from._internal_rendezvous());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_src_ = from.steam_id_src_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_connection_id_src_ = from.legacy_connection_id_src_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientP2PConnectionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientP2PConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionInfo::CopyFrom(const CMsgClientP2PConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientP2PConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionInfo::IsInitialized() const {
  return true;
}

void CMsgClientP2PConnectionInfo::InternalSwap(CMsgClientP2PConnectionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.Swap(&other->candidate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rendezvous_.Swap(&other->rendezvous_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientP2PConnectionInfo, app_id_)
      + sizeof(CMsgClientP2PConnectionInfo::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientP2PConnectionInfo, steam_id_dest_)>(
          reinterpret_cast<char*>(&steam_id_dest_),
          reinterpret_cast<char*>(&other->steam_id_dest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientP2PConnectionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientP2PConnectionFailInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientP2PConnectionFailInfo>()._has_bits_);
  static void set_has_steam_id_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_src(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ep2p_session_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_connection_id_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_close_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_close_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientP2PConnectionFailInfo)
}
CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  close_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_close_message()) {
    close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_close_message(), 
      GetArena());
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_reason_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(close_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientP2PConnectionFailInfo)
}

void CMsgClientP2PConnectionFailInfo::SharedCtor() {
close_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_dest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&close_reason_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(close_reason_));
}

CMsgClientP2PConnectionFailInfo::~CMsgClientP2PConnectionFailInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientP2PConnectionFailInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientP2PConnectionFailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  close_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientP2PConnectionFailInfo::ArenaDtor(void* object) {
  CMsgClientP2PConnectionFailInfo* _this = reinterpret_cast< CMsgClientP2PConnectionFailInfo* >(object);
  (void)_this;
}
void CMsgClientP2PConnectionFailInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientP2PConnectionFailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientP2PConnectionFailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientP2PConnectionFailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    close_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steam_id_dest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&close_reason_) -
        reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(close_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientP2PConnectionFailInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_dest(&has_bits);
          steam_id_dest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_src(&has_bits);
          steam_id_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ep2p_session_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ep2p_session_error(&has_bits);
          ep2p_session_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 connection_id_dest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_connection_id_dest(&has_bits);
          connection_id_dest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 close_reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_close_reason(&has_bits);
          close_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string close_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_close_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientP2PConnectionFailInfo.close_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientP2PConnectionFailInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientP2PConnectionFailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional uint32 ep2p_session_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ep2p_session_error(), target);
  }

  // optional fixed64 connection_id_dest = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_connection_id_dest(), target);
  }

  // optional uint32 close_reason = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_close_reason(), target);
  }

  // optional string close_message = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_close_message().data(), static_cast<int>(this->_internal_close_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientP2PConnectionFailInfo.close_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_close_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientP2PConnectionFailInfo)
  return target;
}

size_t CMsgClientP2PConnectionFailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientP2PConnectionFailInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string close_message = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_close_message());
    }

    // optional fixed64 steam_id_dest = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 ep2p_session_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ep2p_session_error());
    }

    // optional fixed64 connection_id_dest = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 close_reason = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_close_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientP2PConnectionFailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientP2PConnectionFailInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientP2PConnectionFailInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientP2PConnectionFailInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientP2PConnectionFailInfo)
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const CMsgClientP2PConnectionFailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientP2PConnectionFailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_close_message(from._internal_close_message());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_src_ = from.steam_id_src_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      ep2p_session_error_ = from.ep2p_session_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      connection_id_dest_ = from.connection_id_dest_;
    }
    if (cached_has_bits & 0x00000040u) {
      close_reason_ = from.close_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientP2PConnectionFailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const CMsgClientP2PConnectionFailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientP2PConnectionFailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionFailInfo::IsInitialized() const {
  return true;
}

void CMsgClientP2PConnectionFailInfo::InternalSwap(CMsgClientP2PConnectionFailInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  close_message_.Swap(&other->close_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, close_reason_)
      + sizeof(CMsgClientP2PConnectionFailInfo::close_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, steam_id_dest_)>(
          reinterpret_cast<char*>(&steam_id_dest_),
          reinterpret_cast<char*>(&other->steam_id_dest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientP2PConnectionFailInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientNetworkingCertRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNetworkingCertRequest>()._has_bits_);
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNetworkingCertRequest)
}
CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest(const CMsgClientNetworkingCertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_data()) {
    key_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_data(), 
      GetArena());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNetworkingCertRequest)
}

void CMsgClientNetworkingCertRequest::SharedCtor() {
key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
}

CMsgClientNetworkingCertRequest::~CMsgClientNetworkingCertRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientNetworkingCertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientNetworkingCertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNetworkingCertRequest::ArenaDtor(void* object) {
  CMsgClientNetworkingCertRequest* _this = reinterpret_cast< CMsgClientNetworkingCertRequest* >(object);
  (void)_this;
}
void CMsgClientNetworkingCertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientNetworkingCertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientNetworkingCertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNetworkingCertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_data_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNetworkingCertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes key_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientNetworkingCertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNetworkingCertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key_data(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNetworkingCertRequest)
  return target;
}

size_t CMsgClientNetworkingCertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNetworkingCertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_data());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNetworkingCertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientNetworkingCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNetworkingCertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientNetworkingCertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientNetworkingCertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientNetworkingCertRequest)
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingCertRequest::MergeFrom(const CMsgClientNetworkingCertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNetworkingCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key_data(from._internal_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNetworkingCertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientNetworkingCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingCertRequest::CopyFrom(const CMsgClientNetworkingCertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNetworkingCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingCertRequest::IsInitialized() const {
  return true;
}

void CMsgClientNetworkingCertRequest::InternalSwap(CMsgClientNetworkingCertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_data_.Swap(&other->key_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNetworkingCertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientNetworkingCertReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNetworkingCertReply>()._has_bits_);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ca_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ca_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNetworkingCertReply)
}
CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply(const CMsgClientNetworkingCertReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cert()) {
    cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cert(), 
      GetArena());
  }
  ca_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ca_signature()) {
    ca_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ca_signature(), 
      GetArena());
  }
  ca_key_id_ = from.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNetworkingCertReply)
}

void CMsgClientNetworkingCertReply::SharedCtor() {
cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ca_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ca_key_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientNetworkingCertReply::~CMsgClientNetworkingCertReply() {
  // @@protoc_insertion_point(destructor:CMsgClientNetworkingCertReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientNetworkingCertReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNetworkingCertReply::ArenaDtor(void* object) {
  CMsgClientNetworkingCertReply* _this = reinterpret_cast< CMsgClientNetworkingCertReply* >(object);
  (void)_this;
}
void CMsgClientNetworkingCertReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientNetworkingCertReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientNetworkingCertReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNetworkingCertReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ca_signature_.ClearNonDefaultToEmpty();
    }
  }
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNetworkingCertReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 ca_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ca_key_id(&has_bits);
          ca_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes ca_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ca_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientNetworkingCertReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNetworkingCertReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ca_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNetworkingCertReply)
  return target;
}

size_t CMsgClientNetworkingCertReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNetworkingCertReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNetworkingCertReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientNetworkingCertReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNetworkingCertReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientNetworkingCertReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientNetworkingCertReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientNetworkingCertReply)
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingCertReply::MergeFrom(const CMsgClientNetworkingCertReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNetworkingCertReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cert(from._internal_cert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ca_signature(from._internal_ca_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      ca_key_id_ = from.ca_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNetworkingCertReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientNetworkingCertReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingCertReply::CopyFrom(const CMsgClientNetworkingCertReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNetworkingCertReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingCertReply::IsInitialized() const {
  return true;
}

void CMsgClientNetworkingCertReply::InternalSwap(CMsgClientNetworkingCertReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cert_.Swap(&other->cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ca_signature_.Swap(&other->ca_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ca_key_id_, other->ca_key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNetworkingCertReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientNetworkingMobileCertRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNetworkingMobileCertRequest>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientNetworkingMobileCertRequest::CMsgClientNetworkingMobileCertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNetworkingMobileCertRequest)
}
CMsgClientNetworkingMobileCertRequest::CMsgClientNetworkingMobileCertRequest(const CMsgClientNetworkingMobileCertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNetworkingMobileCertRequest)
}

void CMsgClientNetworkingMobileCertRequest::SharedCtor() {
app_id_ = 0u;
}

CMsgClientNetworkingMobileCertRequest::~CMsgClientNetworkingMobileCertRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientNetworkingMobileCertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientNetworkingMobileCertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientNetworkingMobileCertRequest::ArenaDtor(void* object) {
  CMsgClientNetworkingMobileCertRequest* _this = reinterpret_cast< CMsgClientNetworkingMobileCertRequest* >(object);
  (void)_this;
}
void CMsgClientNetworkingMobileCertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientNetworkingMobileCertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientNetworkingMobileCertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNetworkingMobileCertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNetworkingMobileCertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientNetworkingMobileCertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNetworkingMobileCertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNetworkingMobileCertRequest)
  return target;
}

size_t CMsgClientNetworkingMobileCertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNetworkingMobileCertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNetworkingMobileCertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientNetworkingMobileCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNetworkingMobileCertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientNetworkingMobileCertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientNetworkingMobileCertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientNetworkingMobileCertRequest)
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingMobileCertRequest::MergeFrom(const CMsgClientNetworkingMobileCertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNetworkingMobileCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_id()) {
    _internal_set_app_id(from._internal_app_id());
  }
}

void CMsgClientNetworkingMobileCertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientNetworkingMobileCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingMobileCertRequest::CopyFrom(const CMsgClientNetworkingMobileCertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNetworkingMobileCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingMobileCertRequest::IsInitialized() const {
  return true;
}

void CMsgClientNetworkingMobileCertRequest::InternalSwap(CMsgClientNetworkingMobileCertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNetworkingMobileCertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientNetworkingMobileCertReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNetworkingMobileCertReply>()._has_bits_);
  static void set_has_encoded_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientNetworkingMobileCertReply::CMsgClientNetworkingMobileCertReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNetworkingMobileCertReply)
}
CMsgClientNetworkingMobileCertReply::CMsgClientNetworkingMobileCertReply(const CMsgClientNetworkingMobileCertReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encoded_cert()) {
    encoded_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_cert(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientNetworkingMobileCertReply)
}

void CMsgClientNetworkingMobileCertReply::SharedCtor() {
encoded_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgClientNetworkingMobileCertReply::~CMsgClientNetworkingMobileCertReply() {
  // @@protoc_insertion_point(destructor:CMsgClientNetworkingMobileCertReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientNetworkingMobileCertReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNetworkingMobileCertReply::ArenaDtor(void* object) {
  CMsgClientNetworkingMobileCertReply* _this = reinterpret_cast< CMsgClientNetworkingMobileCertReply* >(object);
  (void)_this;
}
void CMsgClientNetworkingMobileCertReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientNetworkingMobileCertReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientNetworkingMobileCertReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNetworkingMobileCertReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encoded_cert_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNetworkingMobileCertReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string encoded_cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientNetworkingMobileCertReply.encoded_cert");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientNetworkingMobileCertReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNetworkingMobileCertReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string encoded_cert = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encoded_cert().data(), static_cast<int>(this->_internal_encoded_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientNetworkingMobileCertReply.encoded_cert");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoded_cert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNetworkingMobileCertReply)
  return target;
}

size_t CMsgClientNetworkingMobileCertReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNetworkingMobileCertReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string encoded_cert = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoded_cert());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNetworkingMobileCertReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientNetworkingMobileCertReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNetworkingMobileCertReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientNetworkingMobileCertReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientNetworkingMobileCertReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientNetworkingMobileCertReply)
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingMobileCertReply::MergeFrom(const CMsgClientNetworkingMobileCertReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNetworkingMobileCertReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encoded_cert()) {
    _internal_set_encoded_cert(from._internal_encoded_cert());
  }
}

void CMsgClientNetworkingMobileCertReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientNetworkingMobileCertReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingMobileCertReply::CopyFrom(const CMsgClientNetworkingMobileCertReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNetworkingMobileCertReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingMobileCertReply::IsInitialized() const {
  return true;
}

void CMsgClientNetworkingMobileCertReply::InternalSwap(CMsgClientNetworkingMobileCertReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encoded_cert_.Swap(&other->encoded_cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNetworkingMobileCertReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGetAppOwnershipTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetAppOwnershipTicket>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetAppOwnershipTicket)
}
CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetAppOwnershipTicket)
}

void CMsgClientGetAppOwnershipTicket::SharedCtor() {
app_id_ = 0u;
}

CMsgClientGetAppOwnershipTicket::~CMsgClientGetAppOwnershipTicket() {
  // @@protoc_insertion_point(destructor:CMsgClientGetAppOwnershipTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGetAppOwnershipTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGetAppOwnershipTicket::ArenaDtor(void* object) {
  CMsgClientGetAppOwnershipTicket* _this = reinterpret_cast< CMsgClientGetAppOwnershipTicket* >(object);
  (void)_this;
}
void CMsgClientGetAppOwnershipTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetAppOwnershipTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetAppOwnershipTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetAppOwnershipTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetAppOwnershipTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGetAppOwnershipTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetAppOwnershipTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetAppOwnershipTicket)
  return target;
}

size_t CMsgClientGetAppOwnershipTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetAppOwnershipTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGetAppOwnershipTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGetAppOwnershipTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGetAppOwnershipTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGetAppOwnershipTicket)
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const CMsgClientGetAppOwnershipTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetAppOwnershipTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_id()) {
    _internal_set_app_id(from._internal_app_id());
  }
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGetAppOwnershipTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const CMsgClientGetAppOwnershipTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetAppOwnershipTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicket::IsInitialized() const {
  return true;
}

void CMsgClientGetAppOwnershipTicket::InternalSwap(CMsgClientGetAppOwnershipTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetAppOwnershipTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGetAppOwnershipTicketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetAppOwnershipTicketResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetAppOwnershipTicketResponse)
}
CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetAppOwnershipTicketResponse)
}

void CMsgClientGetAppOwnershipTicketResponse::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
eresult_ = 2u;
}

CMsgClientGetAppOwnershipTicketResponse::~CMsgClientGetAppOwnershipTicketResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetAppOwnershipTicketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGetAppOwnershipTicketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetAppOwnershipTicketResponse::ArenaDtor(void* object) {
  CMsgClientGetAppOwnershipTicketResponse* _this = reinterpret_cast< CMsgClientGetAppOwnershipTicketResponse* >(object);
  (void)_this;
}
void CMsgClientGetAppOwnershipTicketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetAppOwnershipTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetAppOwnershipTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetAppOwnershipTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    app_id_ = 0u;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetAppOwnershipTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGetAppOwnershipTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetAppOwnershipTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional bytes ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetAppOwnershipTicketResponse)
  return target;
}

size_t CMsgClientGetAppOwnershipTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetAppOwnershipTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ticket());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGetAppOwnershipTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGetAppOwnershipTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGetAppOwnershipTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGetAppOwnershipTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetAppOwnershipTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGetAppOwnershipTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetAppOwnershipTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetAppOwnershipTicketResponse::InternalSwap(CMsgClientGetAppOwnershipTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetAppOwnershipTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientSessionToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSessionToken>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSessionToken::CMsgClientSessionToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientSessionToken)
}
CMsgClientSessionToken::CMsgClientSessionToken(const CMsgClientSessionToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSessionToken)
}

void CMsgClientSessionToken::SharedCtor() {
token_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientSessionToken::~CMsgClientSessionToken() {
  // @@protoc_insertion_point(destructor:CMsgClientSessionToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientSessionToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientSessionToken::ArenaDtor(void* object) {
  CMsgClientSessionToken* _this = reinterpret_cast< CMsgClientSessionToken* >(object);
  (void)_this;
}
void CMsgClientSessionToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSessionToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSessionToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSessionToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSessionToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientSessionToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSessionToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSessionToken)
  return target;
}

size_t CMsgClientSessionToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSessionToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSessionToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSessionToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSessionToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientSessionToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSessionToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSessionToken)
    MergeFrom(*source);
  }
}

void CMsgClientSessionToken::MergeFrom(const CMsgClientSessionToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSessionToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _internal_set_token(from._internal_token());
  }
}

void CMsgClientSessionToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSessionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSessionToken::CopyFrom(const CMsgClientSessionToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSessionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSessionToken::IsInitialized() const {
  return true;
}

void CMsgClientSessionToken::InternalSwap(CMsgClientSessionToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSessionToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGameConnectTokens::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGameConnectTokens>()._has_bits_);
  static void set_has_max_tokens_to_keep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGameConnectTokens)
}
CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_tokens_to_keep_ = from.max_tokens_to_keep_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGameConnectTokens)
}

void CMsgClientGameConnectTokens::SharedCtor() {
max_tokens_to_keep_ = 10u;
}

CMsgClientGameConnectTokens::~CMsgClientGameConnectTokens() {
  // @@protoc_insertion_point(destructor:CMsgClientGameConnectTokens)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGameConnectTokens::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGameConnectTokens::ArenaDtor(void* object) {
  CMsgClientGameConnectTokens* _this = reinterpret_cast< CMsgClientGameConnectTokens* >(object);
  (void)_this;
}
void CMsgClientGameConnectTokens::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGameConnectTokens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGameConnectTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGameConnectTokens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  max_tokens_to_keep_ = 10u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGameConnectTokens::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_tokens_to_keep = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_tokens_to_keep(&has_bits);
          max_tokens_to_keep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tokens();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGameConnectTokens::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGameConnectTokens)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_tokens_to_keep(), target);
  }

  // repeated bytes tokens = 2;
  for (int i = 0, n = this->_internal_tokens_size(); i < n; i++) {
    const auto& s = this->_internal_tokens(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGameConnectTokens)
  return target;
}

size_t CMsgClientGameConnectTokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGameConnectTokens)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes tokens = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tokens_.size());
  for (int i = 0, n = tokens_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      tokens_.Get(i));
  }

  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_tokens_to_keep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGameConnectTokens::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGameConnectTokens)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGameConnectTokens* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGameConnectTokens>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGameConnectTokens)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGameConnectTokens)
    MergeFrom(*source);
  }
}

void CMsgClientGameConnectTokens::MergeFrom(const CMsgClientGameConnectTokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGameConnectTokens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from._internal_has_max_tokens_to_keep()) {
    _internal_set_max_tokens_to_keep(from._internal_max_tokens_to_keep());
  }
}

void CMsgClientGameConnectTokens::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGameConnectTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGameConnectTokens::CopyFrom(const CMsgClientGameConnectTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGameConnectTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGameConnectTokens::IsInitialized() const {
  return true;
}

void CMsgClientGameConnectTokens::InternalSwap(CMsgClientGameConnectTokens* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(&other->tokens_);
  swap(max_tokens_to_keep_, other->max_tokens_to_keep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGameConnectTokens::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGamesPlayed_ProcessInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGamesPlayed_ProcessInfo>()._has_bits_);
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_id_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_is_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientGamesPlayed_ProcessInfo::CMsgClientGamesPlayed_ProcessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGamesPlayed.ProcessInfo)
}
CMsgClientGamesPlayed_ProcessInfo::CMsgClientGamesPlayed_ProcessInfo(const CMsgClientGamesPlayed_ProcessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&process_id_, &from.process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_is_steam_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(parent_is_steam_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGamesPlayed.ProcessInfo)
}

void CMsgClientGamesPlayed_ProcessInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&process_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_is_steam_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(parent_is_steam_));
}

CMsgClientGamesPlayed_ProcessInfo::~CMsgClientGamesPlayed_ProcessInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientGamesPlayed.ProcessInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGamesPlayed_ProcessInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGamesPlayed_ProcessInfo::ArenaDtor(void* object) {
  CMsgClientGamesPlayed_ProcessInfo* _this = reinterpret_cast< CMsgClientGamesPlayed_ProcessInfo* >(object);
  (void)_this;
}
void CMsgClientGamesPlayed_ProcessInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGamesPlayed_ProcessInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGamesPlayed_ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGamesPlayed.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_is_steam_) -
        reinterpret_cast<char*>(&process_id_)) + sizeof(parent_is_steam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGamesPlayed_ProcessInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 process_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 process_id_parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_process_id_parent(&has_bits);
          process_id_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parent_is_steam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_parent_is_steam(&has_bits);
          parent_is_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGamesPlayed_ProcessInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGamesPlayed.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 process_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_process_id(), target);
  }

  // optional uint32 process_id_parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_process_id_parent(), target);
  }

  // optional bool parent_is_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_parent_is_steam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGamesPlayed.ProcessInfo)
  return target;
}

size_t CMsgClientGamesPlayed_ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGamesPlayed.ProcessInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 process_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_process_id());
    }

    // optional uint32 process_id_parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_process_id_parent());
    }

    // optional bool parent_is_steam = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGamesPlayed_ProcessInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGamesPlayed.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed_ProcessInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGamesPlayed_ProcessInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGamesPlayed.ProcessInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGamesPlayed.ProcessInfo)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed_ProcessInfo::MergeFrom(const CMsgClientGamesPlayed_ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGamesPlayed.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      process_id_parent_ = from.process_id_parent_;
    }
    if (cached_has_bits & 0x00000004u) {
      parent_is_steam_ = from.parent_is_steam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGamesPlayed_ProcessInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGamesPlayed.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_ProcessInfo::CopyFrom(const CMsgClientGamesPlayed_ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGamesPlayed.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed_ProcessInfo::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed_ProcessInfo::InternalSwap(CMsgClientGamesPlayed_ProcessInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGamesPlayed_ProcessInfo, parent_is_steam_)
      + sizeof(CMsgClientGamesPlayed_ProcessInfo::parent_is_steam_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGamesPlayed_ProcessInfo, process_id_)>(
          reinterpret_cast<char*>(&process_id_),
          reinterpret_cast<char*>(&other->process_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGamesPlayed_ProcessInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGamesPlayed_GamePlayed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGamesPlayed_GamePlayed>()._has_bits_);
  static void set_has_steam_id_gs(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deprecated_game_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_extra_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_data_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_streaming_provider_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_game_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vr_hmd_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vr_hmd_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_launch_option_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_primary_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_primary_steam_controller_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_steam_controller_count(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_total_non_steam_controller_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_controller_workshop_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_launch_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_vr_hmd_runtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::CMsgIPAddress& game_ip_address(const CMsgClientGamesPlayed_GamePlayed* msg);
  static void set_has_game_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_controller_connection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_game_os_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_game_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_compat_tool_id(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_compat_tool_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_compat_tool_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_beta_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dlc_context(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::CMsgIPAddress&
CMsgClientGamesPlayed_GamePlayed::_Internal::game_ip_address(const CMsgClientGamesPlayed_GamePlayed* msg) {
  return *msg->game_ip_address_;
}
void CMsgClientGamesPlayed_GamePlayed::clear_game_ip_address() {
  if (game_ip_address_ != nullptr) game_ip_address_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  process_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGamesPlayed.GamePlayed)
}
CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      process_id_list_(from.process_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  game_extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_extra_info()) {
    game_extra_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_extra_info(), 
      GetArena());
  }
  game_data_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_data_blob()) {
    game_data_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_data_blob(), 
      GetArena());
  }
  vr_hmd_vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vr_hmd_vendor()) {
    vr_hmd_vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vr_hmd_vendor(), 
      GetArena());
  }
  vr_hmd_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vr_hmd_model()) {
    vr_hmd_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vr_hmd_model(), 
      GetArena());
  }
  primary_steam_controller_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_primary_steam_controller_serial()) {
    primary_steam_controller_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_steam_controller_serial(), 
      GetArena());
  }
  compat_tool_cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_compat_tool_cmd()) {
    compat_tool_cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compat_tool_cmd(), 
      GetArena());
  }
  beta_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_beta_name()) {
    beta_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_beta_name(), 
      GetArena());
  }
  if (from._internal_has_game_ip_address()) {
    game_ip_address_ = new ::CMsgIPAddress(*from.game_ip_address_);
  } else {
    game_ip_address_ = nullptr;
  }
  ::memcpy(&steam_id_gs_, &from.steam_id_gs_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_controller_type_) -
    reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(primary_controller_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGamesPlayed.GamePlayed)
}

void CMsgClientGamesPlayed_GamePlayed::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_data_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vr_hmd_vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vr_hmd_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
primary_steam_controller_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
compat_tool_cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
beta_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_ip_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dlc_context_) -
    reinterpret_cast<char*>(&game_ip_address_)) + sizeof(dlc_context_));
primary_controller_type_ = -1;
}

CMsgClientGamesPlayed_GamePlayed::~CMsgClientGamesPlayed_GamePlayed() {
  // @@protoc_insertion_point(destructor:CMsgClientGamesPlayed.GamePlayed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGamesPlayed_GamePlayed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_extra_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vr_hmd_vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vr_hmd_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_steam_controller_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compat_tool_cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  beta_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_ip_address_;
}

void CMsgClientGamesPlayed_GamePlayed::ArenaDtor(void* object) {
  CMsgClientGamesPlayed_GamePlayed* _this = reinterpret_cast< CMsgClientGamesPlayed_GamePlayed* >(object);
  (void)_this;
}
void CMsgClientGamesPlayed_GamePlayed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGamesPlayed_GamePlayed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGamesPlayed_GamePlayed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGamesPlayed.GamePlayed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_extra_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      game_data_blob_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      vr_hmd_vendor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      vr_hmd_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      primary_steam_controller_serial_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      compat_tool_cmd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      beta_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(game_ip_address_ != nullptr);
    game_ip_address_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&steam_id_gs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streaming_provider_id_) -
        reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(streaming_provider_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&game_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vr_hmd_runtime_) -
        reinterpret_cast<char*>(&game_flags_)) + sizeof(vr_hmd_runtime_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&controller_connection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dlc_context_) -
        reinterpret_cast<char*>(&controller_connection_type_)) + sizeof(dlc_context_));
    primary_controller_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGamesPlayed_GamePlayed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 steam_id_gs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steam_id_gs(&has_bits);
          steam_id_gs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_game_ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deprecated_game_ip_address(&has_bits);
          deprecated_game_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_port(&has_bits);
          game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_secure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_secure(&has_bits);
          is_secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_extra_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_game_extra_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGamesPlayed.GamePlayed.game_extra_info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes game_data_blob = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_game_data_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 process_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 streaming_provider_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_streaming_provider_id(&has_bits);
          streaming_provider_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_game_flags(&has_bits);
          game_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vr_hmd_vendor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_vr_hmd_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vr_hmd_model = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_vr_hmd_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 launch_option_type = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_launch_option_type(&has_bits);
          launch_option_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 primary_controller_type = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_primary_controller_type(&has_bits);
          primary_controller_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string primary_steam_controller_serial = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_primary_steam_controller_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_steam_controller_count = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_total_steam_controller_count(&has_bits);
          total_steam_controller_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_non_steam_controller_count = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_total_non_steam_controller_count(&has_bits);
          total_non_steam_controller_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 controller_workshop_file_id = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_controller_workshop_file_id(&has_bits);
          controller_workshop_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 launch_source = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_launch_source(&has_bits);
          launch_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vr_hmd_runtime = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_vr_hmd_runtime(&has_bits);
          vr_hmd_runtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress game_ip_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_ip_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 controller_connection_type = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_controller_connection_type(&has_bits);
          controller_connection_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_os_platform = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_game_os_platform(&has_bits);
          game_os_platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_build_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_game_build_id(&has_bits);
          game_build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 compat_tool_id = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_compat_tool_id(&has_bits);
          compat_tool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string compat_tool_cmd = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_compat_tool_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 compat_tool_build_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_compat_tool_build_id(&has_bits);
          compat_tool_build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string beta_name = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_beta_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGamesPlayed.GamePlayed.beta_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dlc_context = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_dlc_context(&has_bits);
          dlc_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientGamesPlayed.ProcessInfo process_id_list = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_process_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGamesPlayed_GamePlayed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGamesPlayed.GamePlayed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id_gs = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steam_id_gs(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // optional uint32 deprecated_game_ip_address = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deprecated_game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_port(), target);
  }

  // optional bool is_secure = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_secure(), target);
  }

  // optional bytes token = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_token(), target);
  }

  // optional string game_extra_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_extra_info().data(), static_cast<int>(this->_internal_game_extra_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGamesPlayed.GamePlayed.game_extra_info");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_game_extra_info(), target);
  }

  // optional bytes game_data_blob = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_game_data_blob(), target);
  }

  // optional uint32 process_id = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_process_id(), target);
  }

  // optional uint32 streaming_provider_id = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_streaming_provider_id(), target);
  }

  // optional uint32 game_flags = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_game_flags(), target);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_owner_id(), target);
  }

  // optional string vr_hmd_vendor = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vr_hmd_vendor().data(), static_cast<int>(this->_internal_vr_hmd_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGamesPlayed.GamePlayed.vr_hmd_vendor");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_vr_hmd_vendor(), target);
  }

  // optional string vr_hmd_model = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vr_hmd_model().data(), static_cast<int>(this->_internal_vr_hmd_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGamesPlayed.GamePlayed.vr_hmd_model");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_vr_hmd_model(), target);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_launch_option_type(), target);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_primary_controller_type(), target);
  }

  // optional string primary_steam_controller_serial = 17;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_primary_steam_controller_serial().data(), static_cast<int>(this->_internal_primary_steam_controller_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGamesPlayed.GamePlayed.primary_steam_controller_serial");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_primary_steam_controller_serial(), target);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_total_steam_controller_count(), target);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_total_non_steam_controller_count(), target);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_controller_workshop_file_id(), target);
  }

  // optional uint32 launch_source = 21 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_launch_source(), target);
  }

  // optional uint32 vr_hmd_runtime = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_vr_hmd_runtime(), target);
  }

  // optional .CMsgIPAddress game_ip_address = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::game_ip_address(this), target, stream);
  }

  // optional uint32 controller_connection_type = 24 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_controller_connection_type(), target);
  }

  // optional int32 game_os_platform = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_game_os_platform(), target);
  }

  // optional uint32 game_build_id = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_game_build_id(), target);
  }

  // optional uint32 compat_tool_id = 27 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_compat_tool_id(), target);
  }

  // optional string compat_tool_cmd = 28;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_compat_tool_cmd().data(), static_cast<int>(this->_internal_compat_tool_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGamesPlayed.GamePlayed.compat_tool_cmd");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_compat_tool_cmd(), target);
  }

  // optional uint32 compat_tool_build_id = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_compat_tool_build_id(), target);
  }

  // optional string beta_name = 30;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_beta_name().data(), static_cast<int>(this->_internal_beta_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGamesPlayed.GamePlayed.beta_name");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_beta_name(), target);
  }

  // optional uint32 dlc_context = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_dlc_context(), target);
  }

  // repeated .CMsgClientGamesPlayed.ProcessInfo process_id_list = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_process_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_process_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGamesPlayed.GamePlayed)
  return target;
}

size_t CMsgClientGamesPlayed_GamePlayed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGamesPlayed.GamePlayed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGamesPlayed.ProcessInfo process_id_list = 32;
  total_size += 2UL * this->_internal_process_id_list_size();
  for (const auto& msg : this->process_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes token = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional string game_extra_info = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_extra_info());
    }

    // optional bytes game_data_blob = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_data_blob());
    }

    // optional string vr_hmd_vendor = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vr_hmd_vendor());
    }

    // optional string vr_hmd_model = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vr_hmd_model());
    }

    // optional string primary_steam_controller_serial = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_primary_steam_controller_serial());
    }

    // optional string compat_tool_cmd = 28;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_compat_tool_cmd());
    }

    // optional string beta_name = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_beta_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgIPAddress game_ip_address = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_ip_address_);
    }

    // optional uint64 steam_id_gs = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steam_id_gs());
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional uint32 deprecated_game_ip_address = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_port());
    }

    // optional bool is_secure = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 process_id = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_process_id());
    }

    // optional uint32 streaming_provider_id = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_streaming_provider_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 game_flags = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_flags());
    }

    // optional uint32 owner_id = 12;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_id());
    }

    // optional uint32 launch_option_type = 15 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_launch_option_type());
    }

    // optional uint32 total_steam_controller_count = 18 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_steam_controller_count());
    }

    // optional uint32 total_non_steam_controller_count = 19 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_non_steam_controller_count());
    }

    // optional uint64 controller_workshop_file_id = 20 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_controller_workshop_file_id());
    }

    // optional uint32 launch_source = 21 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_launch_source());
    }

    // optional uint32 vr_hmd_runtime = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vr_hmd_runtime());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional uint32 controller_connection_type = 24 [default = 0];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_controller_connection_type());
    }

    // optional int32 game_os_platform = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_os_platform());
    }

    // optional uint32 game_build_id = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_build_id());
    }

    // optional uint32 compat_tool_id = 27 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_compat_tool_id());
    }

    // optional uint32 compat_tool_build_id = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_compat_tool_build_id());
    }

    // optional uint32 dlc_context = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dlc_context());
    }

    // optional int32 primary_controller_type = 16 [default = -1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_primary_controller_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGamesPlayed.GamePlayed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed_GamePlayed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGamesPlayed_GamePlayed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGamesPlayed.GamePlayed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGamesPlayed.GamePlayed)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGamesPlayed.GamePlayed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_id_list_.MergeFrom(from.process_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_extra_info(from._internal_game_extra_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_game_data_blob(from._internal_game_data_blob());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_vr_hmd_vendor(from._internal_vr_hmd_vendor());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_vr_hmd_model(from._internal_vr_hmd_model());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_primary_steam_controller_serial(from._internal_primary_steam_controller_serial());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_compat_tool_cmd(from._internal_compat_tool_cmd());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_beta_name(from._internal_beta_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_game_ip_address()->::CMsgIPAddress::MergeFrom(from._internal_game_ip_address());
    }
    if (cached_has_bits & 0x00000200u) {
      steam_id_gs_ = from.steam_id_gs_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      deprecated_game_ip_address_ = from.deprecated_game_ip_address_;
    }
    if (cached_has_bits & 0x00001000u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_secure_ = from.is_secure_;
    }
    if (cached_has_bits & 0x00004000u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      streaming_provider_id_ = from.streaming_provider_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      game_flags_ = from.game_flags_;
    }
    if (cached_has_bits & 0x00020000u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      launch_option_type_ = from.launch_option_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      total_steam_controller_count_ = from.total_steam_controller_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      total_non_steam_controller_count_ = from.total_non_steam_controller_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      controller_workshop_file_id_ = from.controller_workshop_file_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      launch_source_ = from.launch_source_;
    }
    if (cached_has_bits & 0x00800000u) {
      vr_hmd_runtime_ = from.vr_hmd_runtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      controller_connection_type_ = from.controller_connection_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      game_os_platform_ = from.game_os_platform_;
    }
    if (cached_has_bits & 0x04000000u) {
      game_build_id_ = from.game_build_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      compat_tool_id_ = from.compat_tool_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      compat_tool_build_id_ = from.compat_tool_build_id_;
    }
    if (cached_has_bits & 0x20000000u) {
      dlc_context_ = from.dlc_context_;
    }
    if (cached_has_bits & 0x40000000u) {
      primary_controller_type_ = from.primary_controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGamesPlayed.GamePlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGamesPlayed.GamePlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed_GamePlayed::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed_GamePlayed::InternalSwap(CMsgClientGamesPlayed_GamePlayed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_id_list_.InternalSwap(&other->process_id_list_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_extra_info_.Swap(&other->game_extra_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_data_blob_.Swap(&other->game_data_blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vr_hmd_vendor_.Swap(&other->vr_hmd_vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vr_hmd_model_.Swap(&other->vr_hmd_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  primary_steam_controller_serial_.Swap(&other->primary_steam_controller_serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compat_tool_cmd_.Swap(&other->compat_tool_cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  beta_name_.Swap(&other->beta_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, dlc_context_)
      + sizeof(CMsgClientGamesPlayed_GamePlayed::dlc_context_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_ip_address_)>(
          reinterpret_cast<char*>(&game_ip_address_),
          reinterpret_cast<char*>(&other->game_ip_address_));
  swap(primary_controller_type_, other->primary_controller_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGamesPlayed_GamePlayed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGamesPlayed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGamesPlayed>()._has_bits_);
  static void set_has_client_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cloud_gaming_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recent_reauthentication(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientGamesPlayed::CMsgClientGamesPlayed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  games_played_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGamesPlayed)
}
CMsgClientGamesPlayed::CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      games_played_(from.games_played_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_os_type_, &from.client_os_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&recent_reauthentication_) -
    reinterpret_cast<char*>(&client_os_type_)) + sizeof(recent_reauthentication_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGamesPlayed)
}

void CMsgClientGamesPlayed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_os_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recent_reauthentication_) -
    reinterpret_cast<char*>(&client_os_type_)) + sizeof(recent_reauthentication_));
}

CMsgClientGamesPlayed::~CMsgClientGamesPlayed() {
  // @@protoc_insertion_point(destructor:CMsgClientGamesPlayed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGamesPlayed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGamesPlayed::ArenaDtor(void* object) {
  CMsgClientGamesPlayed* _this = reinterpret_cast< CMsgClientGamesPlayed* >(object);
  (void)_this;
}
void CMsgClientGamesPlayed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGamesPlayed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGamesPlayed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGamesPlayed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_played_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&client_os_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recent_reauthentication_) -
        reinterpret_cast<char*>(&client_os_type_)) + sizeof(recent_reauthentication_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGamesPlayed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games_played(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 client_os_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_os_type(&has_bits);
          client_os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cloud_gaming_platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cloud_gaming_platform(&has_bits);
          cloud_gaming_platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool recent_reauthentication = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_recent_reauthentication(&has_bits);
          recent_reauthentication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGamesPlayed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGamesPlayed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_played_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games_played(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_os_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_os_type(), target);
  }

  // optional uint32 cloud_gaming_platform = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cloud_gaming_platform(), target);
  }

  // optional bool recent_reauthentication = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_recent_reauthentication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGamesPlayed)
  return target;
}

size_t CMsgClientGamesPlayed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGamesPlayed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  total_size += 1UL * this->_internal_games_played_size();
  for (const auto& msg : this->games_played_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 client_os_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_os_type());
    }

    // optional uint32 cloud_gaming_platform = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cloud_gaming_platform());
    }

    // optional bool recent_reauthentication = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGamesPlayed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGamesPlayed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGamesPlayed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGamesPlayed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGamesPlayed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGamesPlayed)
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed::MergeFrom(const CMsgClientGamesPlayed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGamesPlayed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_played_.MergeFrom(from.games_played_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      client_os_type_ = from.client_os_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      cloud_gaming_platform_ = from.cloud_gaming_platform_;
    }
    if (cached_has_bits & 0x00000004u) {
      recent_reauthentication_ = from.recent_reauthentication_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGamesPlayed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGamesPlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed::CopyFrom(const CMsgClientGamesPlayed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGamesPlayed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed::IsInitialized() const {
  return true;
}

void CMsgClientGamesPlayed::InternalSwap(CMsgClientGamesPlayed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  games_played_.InternalSwap(&other->games_played_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGamesPlayed, recent_reauthentication_)
      + sizeof(CMsgClientGamesPlayed::recent_reauthentication_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGamesPlayed, client_os_type_)>(
          reinterpret_cast<char*>(&client_os_type_),
          reinterpret_cast<char*>(&other->client_os_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGamesPlayed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSApprove::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSApprove>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGSApprove::CMsgGSApprove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSApprove)
}
CMsgGSApprove::CMsgGSApprove(const CMsgGSApprove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSApprove)
}

void CMsgGSApprove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_steam_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
}

CMsgGSApprove::~CMsgGSApprove() {
  // @@protoc_insertion_point(destructor:CMsgGSApprove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSApprove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSApprove::ArenaDtor(void* object) {
  CMsgGSApprove* _this = reinterpret_cast< CMsgGSApprove* >(object);
  (void)_this;
}
void CMsgGSApprove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSApprove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSApprove::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSApprove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_steam_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(owner_steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSApprove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 owner_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_owner_steam_id(&has_bits);
          owner_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSApprove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSApprove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 owner_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_owner_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSApprove)
  return target;
}

size_t CMsgGSApprove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSApprove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSApprove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSApprove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSApprove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSApprove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSApprove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSApprove)
    MergeFrom(*source);
  }
}

void CMsgGSApprove::MergeFrom(const CMsgGSApprove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSApprove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_steam_id_ = from.owner_steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSApprove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSApprove::CopyFrom(const CMsgGSApprove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSApprove::IsInitialized() const {
  return true;
}

void CMsgGSApprove::InternalSwap(CMsgGSApprove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSApprove, owner_steam_id_)
      + sizeof(CMsgGSApprove::owner_steam_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSApprove, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSApprove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSDeny::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSDeny>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_edeny_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deny_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGSDeny::CMsgGSDeny(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSDeny)
}
CMsgGSDeny::CMsgGSDeny(const CMsgGSDeny& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deny_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deny_string()) {
    deny_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deny_string(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSDeny)
}

void CMsgGSDeny::SharedCtor() {
deny_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
}

CMsgGSDeny::~CMsgGSDeny() {
  // @@protoc_insertion_point(destructor:CMsgGSDeny)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSDeny::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deny_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSDeny::ArenaDtor(void* object) {
  CMsgGSDeny* _this = reinterpret_cast< CMsgGSDeny* >(object);
  (void)_this;
}
void CMsgGSDeny::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSDeny::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSDeny::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSDeny)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deny_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edeny_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSDeny::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 edeny_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_edeny_reason(&has_bits);
          edeny_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string deny_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_deny_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGSDeny.deny_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSDeny::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSDeny)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_edeny_reason(), target);
  }

  // optional string deny_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deny_string().data(), static_cast<int>(this->_internal_deny_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGSDeny.deny_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deny_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSDeny)
  return target;
}

size_t CMsgGSDeny::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSDeny)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string deny_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deny_string());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_edeny_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSDeny::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSDeny)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSDeny* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSDeny>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSDeny)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSDeny)
    MergeFrom(*source);
  }
}

void CMsgGSDeny::MergeFrom(const CMsgGSDeny& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSDeny)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deny_string(from._internal_deny_string());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      edeny_reason_ = from.edeny_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSDeny::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSDeny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDeny::CopyFrom(const CMsgGSDeny& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSDeny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDeny::IsInitialized() const {
  return true;
}

void CMsgGSDeny::InternalSwap(CMsgGSDeny* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deny_string_.Swap(&other->deny_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSDeny, edeny_reason_)
      + sizeof(CMsgGSDeny::edeny_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSDeny, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSDeny::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSKick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSKick>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_edeny_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGSKick::CMsgGSKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSKick)
}
CMsgGSKick::CMsgGSKick(const CMsgGSKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSKick)
}

void CMsgGSKick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edeny_reason_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
}

CMsgGSKick::~CMsgGSKick() {
  // @@protoc_insertion_point(destructor:CMsgGSKick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSKick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSKick::ArenaDtor(void* object) {
  CMsgGSKick* _this = reinterpret_cast< CMsgGSKick* >(object);
  (void)_this;
}
void CMsgGSKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edeny_reason_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(edeny_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSKick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 edeny_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_edeny_reason(&has_bits);
          edeny_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSKick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_edeny_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSKick)
  return target;
}

size_t CMsgGSKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSKick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_edeny_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSKick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSKick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSKick)
    MergeFrom(*source);
  }
}

void CMsgGSKick::MergeFrom(const CMsgGSKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      edeny_reason_ = from.edeny_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSKick::CopyFrom(const CMsgGSKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSKick::IsInitialized() const {
  return true;
}

void CMsgGSKick::InternalSwap(CMsgGSKick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSKick, edeny_reason_)
      + sizeof(CMsgGSKick::edeny_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSKick, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSKick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAuthList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAuthList>()._has_bits_);
  static void set_has_tokens_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_request_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_request_seq_from_server(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void CMsgClientAuthList::clear_tickets() {
  tickets_.Clear();
}
CMsgClientAuthList::CMsgClientAuthList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tickets_(arena),
  app_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAuthList)
}
CMsgClientAuthList::CMsgClientAuthList(const CMsgClientAuthList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tickets_(from.tickets_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tokens_left_, &from.tokens_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&filtered_) -
    reinterpret_cast<char*>(&tokens_left_)) + sizeof(filtered_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAuthList)
}

void CMsgClientAuthList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tokens_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filtered_) -
    reinterpret_cast<char*>(&tokens_left_)) + sizeof(filtered_));
}

CMsgClientAuthList::~CMsgClientAuthList() {
  // @@protoc_insertion_point(destructor:CMsgClientAuthList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAuthList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAuthList::ArenaDtor(void* object) {
  CMsgClientAuthList* _this = reinterpret_cast< CMsgClientAuthList* >(object);
  (void)_this;
}
void CMsgClientAuthList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAuthList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAuthList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAuthList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tickets_.Clear();
  app_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&tokens_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filtered_) -
        reinterpret_cast<char*>(&tokens_left_)) + sizeof(filtered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAuthList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tokens_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tokens_left(&has_bits);
          tokens_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_request_seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_request_seq(&has_bits);
          last_request_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_request_seq_from_server = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_request_seq_from_server(&has_bits);
          last_request_seq_from_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgAuthTicket tickets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tickets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 app_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_message_sequence(&has_bits);
          message_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filtered = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_filtered(&has_bits);
          filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAuthList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAuthList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tokens_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tokens_left(), target);
  }

  // optional uint32 last_request_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_request_seq(), target);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_request_seq_from_server(), target);
  }

  // repeated .CMsgAuthTicket tickets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tickets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tickets(i), target, stream);
  }

  // repeated uint32 app_ids = 5;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_app_ids(i), target);
  }

  // optional uint32 message_sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_message_sequence(), target);
  }

  // optional bool filtered = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_filtered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAuthList)
  return target;
}

size_t CMsgClientAuthList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAuthList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAuthTicket tickets = 4;
  total_size += 1UL * this->_internal_tickets_size();
  for (const auto& msg : this->tickets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 app_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_app_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 tokens_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tokens_left());
    }

    // optional uint32 last_request_seq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_request_seq());
    }

    // optional uint32 last_request_seq_from_server = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_request_seq_from_server());
    }

    // optional uint32 message_sequence = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_sequence());
    }

    // optional bool filtered = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAuthList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAuthList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAuthList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAuthList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAuthList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAuthList)
    MergeFrom(*source);
  }
}

void CMsgClientAuthList::MergeFrom(const CMsgClientAuthList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAuthList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tickets_.MergeFrom(from.tickets_);
  app_ids_.MergeFrom(from.app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      tokens_left_ = from.tokens_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_request_seq_ = from.last_request_seq_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_request_seq_from_server_ = from.last_request_seq_from_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_sequence_ = from.message_sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      filtered_ = from.filtered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAuthList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAuthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthList::CopyFrom(const CMsgClientAuthList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAuthList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthList::IsInitialized() const {
  return true;
}

void CMsgClientAuthList::InternalSwap(CMsgClientAuthList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tickets_.InternalSwap(&other->tickets_);
  app_ids_.InternalSwap(&other->app_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAuthList, filtered_)
      + sizeof(CMsgClientAuthList::filtered_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAuthList, tokens_left_)>(
          reinterpret_cast<char*>(&tokens_left_),
          reinterpret_cast<char*>(&other->tokens_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAuthList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAuthListAck::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAuthListAck>()._has_bits_);
  static void set_has_message_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAuthListAck::CMsgClientAuthListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ticket_crc_(arena),
  app_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAuthListAck)
}
CMsgClientAuthListAck::CMsgClientAuthListAck(const CMsgClientAuthListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ticket_crc_(from.ticket_crc_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_sequence_ = from.message_sequence_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAuthListAck)
}

void CMsgClientAuthListAck::SharedCtor() {
message_sequence_ = 0u;
}

CMsgClientAuthListAck::~CMsgClientAuthListAck() {
  // @@protoc_insertion_point(destructor:CMsgClientAuthListAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAuthListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAuthListAck::ArenaDtor(void* object) {
  CMsgClientAuthListAck* _this = reinterpret_cast< CMsgClientAuthListAck* >(object);
  (void)_this;
}
void CMsgClientAuthListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAuthListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAuthListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAuthListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_crc_.Clear();
  app_ids_.Clear();
  message_sequence_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAuthListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 ticket_crc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ticket_crc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ticket_crc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 app_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_message_sequence(&has_bits);
          message_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAuthListAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAuthListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  for (int i = 0, n = this->_internal_ticket_crc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ticket_crc(i), target);
  }

  // repeated uint32 app_ids = 2;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_sequence = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_message_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAuthListAck)
  return target;
}

size_t CMsgClientAuthListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAuthListAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ticket_crc = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ticket_crc_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ticket_crc_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_app_ids_size());
    total_size += data_size;
  }

  // optional uint32 message_sequence = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAuthListAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAuthListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAuthListAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAuthListAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAuthListAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAuthListAck)
    MergeFrom(*source);
  }
}

void CMsgClientAuthListAck::MergeFrom(const CMsgClientAuthListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAuthListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ticket_crc_.MergeFrom(from.ticket_crc_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from._internal_has_message_sequence()) {
    _internal_set_message_sequence(from._internal_message_sequence());
  }
}

void CMsgClientAuthListAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAuthListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthListAck::CopyFrom(const CMsgClientAuthListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAuthListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthListAck::IsInitialized() const {
  return true;
}

void CMsgClientAuthListAck::InternalSwap(CMsgClientAuthListAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_crc_.InternalSwap(&other->ticket_crc_);
  app_ids_.InternalSwap(&other->app_ids_);
  swap(message_sequence_, other->message_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAuthListAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLicenseList_License::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLicenseList_License>()._has_bits_);
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_next_process(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minute_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_minutes_used(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_payment_method(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_purchase_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_license_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_initial_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_initial_time_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_renewal_period(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_renewal_time_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_master_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgClientLicenseList_License::CMsgClientLicenseList_License(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLicenseList.License)
}
CMsgClientLicenseList_License::CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purchase_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_purchase_country_code()) {
    purchase_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purchase_country_code(), 
      GetArena());
  }
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&master_package_id_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(master_package_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLicenseList.License)
}

void CMsgClientLicenseList_License::SharedCtor() {
purchase_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&package_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&master_package_id_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(master_package_id_));
}

CMsgClientLicenseList_License::~CMsgClientLicenseList_License() {
  // @@protoc_insertion_point(destructor:CMsgClientLicenseList.License)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLicenseList_License::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  purchase_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLicenseList_License::ArenaDtor(void* object) {
  CMsgClientLicenseList_License* _this = reinterpret_cast< CMsgClientLicenseList_License* >(object);
  (void)_this;
}
void CMsgClientLicenseList_License::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLicenseList_License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLicenseList_License::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLicenseList.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    purchase_country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&package_id_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&license_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&access_token_) -
        reinterpret_cast<char*>(&license_type_)) + sizeof(access_token_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&renewal_time_unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&master_package_id_) -
        reinterpret_cast<char*>(&renewal_time_unit_)) + sizeof(master_package_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLicenseList_License::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_package_id(&has_bits);
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_next_process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_time_next_process(&has_bits);
          time_next_process_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 minute_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_minute_limit(&has_bits);
          minute_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minutes_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_minutes_used(&has_bits);
          minutes_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 payment_method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_payment_method(&has_bits);
          payment_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string purchase_country_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_purchase_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLicenseList.License.purchase_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 license_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_license_type(&has_bits);
          license_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 territory_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_territory_code(&has_bits);
          territory_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 change_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_change_number(&has_bits);
          change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_period = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_initial_period(&has_bits);
          initial_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_time_unit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_initial_time_unit(&has_bits);
          initial_time_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 renewal_period = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_renewal_period(&has_bits);
          renewal_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 renewal_time_unit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_renewal_time_unit(&has_bits);
          renewal_time_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 access_token = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_access_token(&has_bits);
          access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 master_package_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_master_package_id(&has_bits);
          master_package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLicenseList_License::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLicenseList.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_package_id(), target);
  }

  // optional fixed32 time_created = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_time_created(), target);
  }

  // optional fixed32 time_next_process = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_time_next_process(), target);
  }

  // optional int32 minute_limit = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_minute_limit(), target);
  }

  // optional int32 minutes_used = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minutes_used(), target);
  }

  // optional uint32 payment_method = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_payment_method(), target);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  // optional string purchase_country_code = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purchase_country_code().data(), static_cast<int>(this->_internal_purchase_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLicenseList.License.purchase_country_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_purchase_country_code(), target);
  }

  // optional uint32 license_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_license_type(), target);
  }

  // optional int32 territory_code = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_territory_code(), target);
  }

  // optional int32 change_number = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_change_number(), target);
  }

  // optional uint32 owner_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_owner_id(), target);
  }

  // optional uint32 initial_period = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_initial_period(), target);
  }

  // optional uint32 initial_time_unit = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_initial_time_unit(), target);
  }

  // optional uint32 renewal_period = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_renewal_period(), target);
  }

  // optional uint32 renewal_time_unit = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_renewal_time_unit(), target);
  }

  // optional uint64 access_token = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_access_token(), target);
  }

  // optional uint32 master_package_id = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_master_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLicenseList.License)
  return target;
}

size_t CMsgClientLicenseList_License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLicenseList.License)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string purchase_country_code = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purchase_country_code());
    }

    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_package_id());
    }

    // optional fixed32 time_created = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_next_process = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 minute_limit = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minute_limit());
    }

    // optional int32 minutes_used = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minutes_used());
    }

    // optional uint32 payment_method = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_payment_method());
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 license_type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_license_type());
    }

    // optional int32 territory_code = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_territory_code());
    }

    // optional int32 change_number = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_change_number());
    }

    // optional uint32 owner_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_id());
    }

    // optional uint32 initial_period = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_period());
    }

    // optional uint32 initial_time_unit = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_time_unit());
    }

    // optional uint32 renewal_period = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_renewal_period());
    }

    // optional uint64 access_token = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_access_token());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint32 renewal_time_unit = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_renewal_time_unit());
    }

    // optional uint32 master_package_id = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_master_package_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLicenseList_License::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLicenseList.License)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLicenseList_License* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLicenseList_License>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLicenseList.License)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLicenseList.License)
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList_License::MergeFrom(const CMsgClientLicenseList_License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLicenseList.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_purchase_country_code(from._internal_purchase_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_next_process_ = from.time_next_process_;
    }
    if (cached_has_bits & 0x00000010u) {
      minute_limit_ = from.minute_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      minutes_used_ = from.minutes_used_;
    }
    if (cached_has_bits & 0x00000040u) {
      payment_method_ = from.payment_method_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      license_type_ = from.license_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      territory_code_ = from.territory_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000800u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      initial_period_ = from.initial_period_;
    }
    if (cached_has_bits & 0x00002000u) {
      initial_time_unit_ = from.initial_time_unit_;
    }
    if (cached_has_bits & 0x00004000u) {
      renewal_period_ = from.renewal_period_;
    }
    if (cached_has_bits & 0x00008000u) {
      access_token_ = from.access_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      renewal_time_unit_ = from.renewal_time_unit_;
    }
    if (cached_has_bits & 0x00020000u) {
      master_package_id_ = from.master_package_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLicenseList_License::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLicenseList.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList_License::CopyFrom(const CMsgClientLicenseList_License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLicenseList.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList_License::IsInitialized() const {
  return true;
}

void CMsgClientLicenseList_License::InternalSwap(CMsgClientLicenseList_License* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  purchase_country_code_.Swap(&other->purchase_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLicenseList_License, master_package_id_)
      + sizeof(CMsgClientLicenseList_License::master_package_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLicenseList_License, package_id_)>(
          reinterpret_cast<char*>(&package_id_),
          reinterpret_cast<char*>(&other->package_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLicenseList_License::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLicenseList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLicenseList>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLicenseList::CMsgClientLicenseList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  licenses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLicenseList)
}
CMsgClientLicenseList::CMsgClientLicenseList(const CMsgClientLicenseList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientLicenseList)
}

void CMsgClientLicenseList::SharedCtor() {
eresult_ = 2;
}

CMsgClientLicenseList::~CMsgClientLicenseList() {
  // @@protoc_insertion_point(destructor:CMsgClientLicenseList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLicenseList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientLicenseList::ArenaDtor(void* object) {
  CMsgClientLicenseList* _this = reinterpret_cast< CMsgClientLicenseList* >(object);
  (void)_this;
}
void CMsgClientLicenseList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLicenseList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLicenseList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLicenseList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLicenseList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientLicenseList.License licenses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_licenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLicenseList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLicenseList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // repeated .CMsgClientLicenseList.License licenses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_licenses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_licenses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLicenseList)
  return target;
}

size_t CMsgClientLicenseList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLicenseList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientLicenseList.License licenses = 2;
  total_size += 1UL * this->_internal_licenses_size();
  for (const auto& msg : this->licenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLicenseList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLicenseList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLicenseList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLicenseList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLicenseList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLicenseList)
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList::MergeFrom(const CMsgClientLicenseList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLicenseList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CMsgClientLicenseList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLicenseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList::CopyFrom(const CMsgClientLicenseList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLicenseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList::IsInitialized() const {
  return true;
}

void CMsgClientLicenseList::InternalSwap(CMsgClientLicenseList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  licenses_.InternalSwap(&other->licenses_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLicenseList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientIsLimitedAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientIsLimitedAccount>()._has_bits_);
  static void set_has_bis_limited_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bis_community_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bis_locked_account(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bis_limited_account_allowed_to_invite_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientIsLimitedAccount)
}
CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bis_limited_account_, &from.bis_limited_account_,
    static_cast<size_t>(reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
    reinterpret_cast<char*>(&bis_limited_account_)) + sizeof(bis_limited_account_allowed_to_invite_friends_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientIsLimitedAccount)
}

void CMsgClientIsLimitedAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bis_limited_account_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
    reinterpret_cast<char*>(&bis_limited_account_)) + sizeof(bis_limited_account_allowed_to_invite_friends_));
}

CMsgClientIsLimitedAccount::~CMsgClientIsLimitedAccount() {
  // @@protoc_insertion_point(destructor:CMsgClientIsLimitedAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientIsLimitedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientIsLimitedAccount::ArenaDtor(void* object) {
  CMsgClientIsLimitedAccount* _this = reinterpret_cast< CMsgClientIsLimitedAccount* >(object);
  (void)_this;
}
void CMsgClientIsLimitedAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientIsLimitedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientIsLimitedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientIsLimitedAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bis_limited_account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bis_limited_account_allowed_to_invite_friends_) -
      reinterpret_cast<char*>(&bis_limited_account_)) + sizeof(bis_limited_account_allowed_to_invite_friends_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientIsLimitedAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bis_limited_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bis_limited_account(&has_bits);
          bis_limited_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bis_community_banned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bis_community_banned(&has_bits);
          bis_community_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bis_locked_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bis_locked_account(&has_bits);
          bis_locked_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bis_limited_account_allowed_to_invite_friends = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bis_limited_account_allowed_to_invite_friends(&has_bits);
          bis_limited_account_allowed_to_invite_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientIsLimitedAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientIsLimitedAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bis_limited_account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bis_limited_account(), target);
  }

  // optional bool bis_community_banned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bis_community_banned(), target);
  }

  // optional bool bis_locked_account = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bis_locked_account(), target);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bis_limited_account_allowed_to_invite_friends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientIsLimitedAccount)
  return target;
}

size_t CMsgClientIsLimitedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientIsLimitedAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool bis_limited_account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bis_community_banned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool bis_locked_account = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool bis_limited_account_allowed_to_invite_friends = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientIsLimitedAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientIsLimitedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientIsLimitedAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientIsLimitedAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientIsLimitedAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientIsLimitedAccount)
    MergeFrom(*source);
  }
}

void CMsgClientIsLimitedAccount::MergeFrom(const CMsgClientIsLimitedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientIsLimitedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bis_limited_account_ = from.bis_limited_account_;
    }
    if (cached_has_bits & 0x00000002u) {
      bis_community_banned_ = from.bis_community_banned_;
    }
    if (cached_has_bits & 0x00000004u) {
      bis_locked_account_ = from.bis_locked_account_;
    }
    if (cached_has_bits & 0x00000008u) {
      bis_limited_account_allowed_to_invite_friends_ = from.bis_limited_account_allowed_to_invite_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientIsLimitedAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientIsLimitedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientIsLimitedAccount::CopyFrom(const CMsgClientIsLimitedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientIsLimitedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientIsLimitedAccount::IsInitialized() const {
  return true;
}

void CMsgClientIsLimitedAccount::InternalSwap(CMsgClientIsLimitedAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_limited_account_allowed_to_invite_friends_)
      + sizeof(CMsgClientIsLimitedAccount::bis_limited_account_allowed_to_invite_friends_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_limited_account_)>(
          reinterpret_cast<char*>(&bis_limited_account_),
          reinterpret_cast<char*>(&other->bis_limited_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientIsLimitedAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientRequestedClientStats_StatsToSend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestedClientStats_StatsToSend>()._has_bits_);
  static void set_has_client_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_aggregate_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestedClientStats.StatsToSend)
}
CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_stat_, &from.client_stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_aggregate_method_) -
    reinterpret_cast<char*>(&client_stat_)) + sizeof(stat_aggregate_method_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestedClientStats.StatsToSend)
}

void CMsgClientRequestedClientStats_StatsToSend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_stat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_aggregate_method_) -
    reinterpret_cast<char*>(&client_stat_)) + sizeof(stat_aggregate_method_));
}

CMsgClientRequestedClientStats_StatsToSend::~CMsgClientRequestedClientStats_StatsToSend() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestedClientStats.StatsToSend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRequestedClientStats_StatsToSend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientRequestedClientStats_StatsToSend::ArenaDtor(void* object) {
  CMsgClientRequestedClientStats_StatsToSend* _this = reinterpret_cast< CMsgClientRequestedClientStats_StatsToSend* >(object);
  (void)_this;
}
void CMsgClientRequestedClientStats_StatsToSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestedClientStats_StatsToSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestedClientStats_StatsToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestedClientStats.StatsToSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_aggregate_method_) -
        reinterpret_cast<char*>(&client_stat_)) + sizeof(stat_aggregate_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestedClientStats_StatsToSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_stat(&has_bits);
          client_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_aggregate_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_aggregate_method(&has_bits);
          stat_aggregate_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRequestedClientStats_StatsToSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestedClientStats.StatsToSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_stat(), target);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_aggregate_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestedClientStats.StatsToSend)
  return target;
}

size_t CMsgClientRequestedClientStats_StatsToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestedClientStats.StatsToSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 client_stat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_stat());
    }

    // optional uint32 stat_aggregate_method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_aggregate_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRequestedClientStats.StatsToSend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestedClientStats_StatsToSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRequestedClientStats_StatsToSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRequestedClientStats.StatsToSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRequestedClientStats.StatsToSend)
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestedClientStats.StatsToSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_stat_ = from.client_stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_aggregate_method_ = from.stat_aggregate_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRequestedClientStats.StatsToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestedClientStats.StatsToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats_StatsToSend::IsInitialized() const {
  return true;
}

void CMsgClientRequestedClientStats_StatsToSend::InternalSwap(CMsgClientRequestedClientStats_StatsToSend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, stat_aggregate_method_)
      + sizeof(CMsgClientRequestedClientStats_StatsToSend::stat_aggregate_method_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, client_stat_)>(
          reinterpret_cast<char*>(&client_stat_),
          reinterpret_cast<char*>(&other->client_stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestedClientStats_StatsToSend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientRequestedClientStats::_Internal {
 public:
};

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_to_send_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestedClientStats)
}
CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_to_send_(from.stats_to_send_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestedClientStats)
}

void CMsgClientRequestedClientStats::SharedCtor() {
}

CMsgClientRequestedClientStats::~CMsgClientRequestedClientStats() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestedClientStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRequestedClientStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientRequestedClientStats::ArenaDtor(void* object) {
  CMsgClientRequestedClientStats* _this = reinterpret_cast< CMsgClientRequestedClientStats* >(object);
  (void)_this;
}
void CMsgClientRequestedClientStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestedClientStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestedClientStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestedClientStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_to_send_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestedClientStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats_to_send(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRequestedClientStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestedClientStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_to_send_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stats_to_send(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestedClientStats)
  return target;
}

size_t CMsgClientRequestedClientStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestedClientStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  total_size += 1UL * this->_internal_stats_to_send_size();
  for (const auto& msg : this->stats_to_send_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestedClientStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRequestedClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestedClientStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRequestedClientStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRequestedClientStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRequestedClientStats)
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats::MergeFrom(const CMsgClientRequestedClientStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestedClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_to_send_.MergeFrom(from.stats_to_send_);
}

void CMsgClientRequestedClientStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRequestedClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats::CopyFrom(const CMsgClientRequestedClientStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestedClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats::IsInitialized() const {
  return true;
}

void CMsgClientRequestedClientStats::InternalSwap(CMsgClientRequestedClientStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_to_send_.InternalSwap(&other->stats_to_send_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestedClientStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStat2_StatDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStat2_StatDetail>()._has_bits_);
  static void set_has_client_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ll_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_of_day(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStat2.StatDetail)
}
CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ll_value_, &from.ll_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&ll_value_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStat2.StatDetail)
}

void CMsgClientStat2_StatDetail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ll_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&ll_value_)) + sizeof(app_id_));
}

CMsgClientStat2_StatDetail::~CMsgClientStat2_StatDetail() {
  // @@protoc_insertion_point(destructor:CMsgClientStat2.StatDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStat2_StatDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStat2_StatDetail::ArenaDtor(void* object) {
  CMsgClientStat2_StatDetail* _this = reinterpret_cast< CMsgClientStat2_StatDetail* >(object);
  (void)_this;
}
void CMsgClientStat2_StatDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStat2_StatDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStat2_StatDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStat2.StatDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&ll_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&ll_value_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStat2_StatDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_stat(&has_bits);
          client_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ll_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ll_value(&has_bits);
          ll_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_of_day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_of_day(&has_bits);
          time_of_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 depot_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStat2_StatDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStat2.StatDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_stat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_stat(), target);
  }

  // optional int64 ll_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ll_value(), target);
  }

  // optional uint32 time_of_day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_of_day(), target);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cell_id(), target);
  }

  // optional uint32 depot_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depot_id(), target);
  }

  // optional uint32 app_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStat2.StatDetail)
  return target;
}

size_t CMsgClientStat2_StatDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStat2.StatDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 ll_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_ll_value());
    }

    // optional uint32 client_stat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_stat());
    }

    // optional uint32 time_of_day = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_of_day());
    }

    // optional uint32 cell_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

    // optional uint32 depot_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_depot_id());
    }

    // optional uint32 app_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStat2_StatDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStat2.StatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStat2_StatDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStat2_StatDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStat2.StatDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStat2.StatDetail)
    MergeFrom(*source);
  }
}

void CMsgClientStat2_StatDetail::MergeFrom(const CMsgClientStat2_StatDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStat2.StatDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ll_value_ = from.ll_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_stat_ = from.client_stat_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStat2_StatDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStat2.StatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2_StatDetail::CopyFrom(const CMsgClientStat2_StatDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStat2.StatDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2_StatDetail::IsInitialized() const {
  return true;
}

void CMsgClientStat2_StatDetail::InternalSwap(CMsgClientStat2_StatDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStat2_StatDetail, app_id_)
      + sizeof(CMsgClientStat2_StatDetail::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStat2_StatDetail, ll_value_)>(
          reinterpret_cast<char*>(&ll_value_),
          reinterpret_cast<char*>(&other->ll_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStat2_StatDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStat2::_Internal {
 public:
};

CMsgClientStat2::CMsgClientStat2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stat_detail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStat2)
}
CMsgClientStat2::CMsgClientStat2(const CMsgClientStat2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_detail_(from.stat_detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientStat2)
}

void CMsgClientStat2::SharedCtor() {
}

CMsgClientStat2::~CMsgClientStat2() {
  // @@protoc_insertion_point(destructor:CMsgClientStat2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStat2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStat2::ArenaDtor(void* object) {
  CMsgClientStat2* _this = reinterpret_cast< CMsgClientStat2* >(object);
  (void)_this;
}
void CMsgClientStat2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStat2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStat2::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStat2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_detail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStat2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStat2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStat2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_detail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stat_detail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStat2)
  return target;
}

size_t CMsgClientStat2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStat2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  total_size += 1UL * this->_internal_stat_detail_size();
  for (const auto& msg : this->stat_detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStat2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStat2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStat2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStat2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStat2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStat2)
    MergeFrom(*source);
  }
}

void CMsgClientStat2::MergeFrom(const CMsgClientStat2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStat2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_detail_.MergeFrom(from.stat_detail_);
}

void CMsgClientStat2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStat2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2::CopyFrom(const CMsgClientStat2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStat2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2::IsInitialized() const {
  return true;
}

void CMsgClientStat2::InternalSwap(CMsgClientStat2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stat_detail_.InternalSwap(&other->stat_detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStat2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientInviteToGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientInviteToGame>()._has_bits_);
  static void set_has_steam_id_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_src(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_connect_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_play(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientInviteToGame::CMsgClientInviteToGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientInviteToGame)
}
CMsgClientInviteToGame::CMsgClientInviteToGame(const CMsgClientInviteToGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connect_string()) {
    connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connect_string(), 
      GetArena());
  }
  remote_play_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_remote_play()) {
    remote_play_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_play(), 
      GetArena());
  }
  ::memcpy(&steam_id_dest_, &from.steam_id_dest_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_src_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(steam_id_src_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientInviteToGame)
}

void CMsgClientInviteToGame::SharedCtor() {
connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remote_play_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_dest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steam_id_src_) -
    reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(steam_id_src_));
}

CMsgClientInviteToGame::~CMsgClientInviteToGame() {
  // @@protoc_insertion_point(destructor:CMsgClientInviteToGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientInviteToGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connect_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_play_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientInviteToGame::ArenaDtor(void* object) {
  CMsgClientInviteToGame* _this = reinterpret_cast< CMsgClientInviteToGame* >(object);
  (void)_this;
}
void CMsgClientInviteToGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientInviteToGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientInviteToGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientInviteToGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connect_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      remote_play_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&steam_id_dest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_src_) -
        reinterpret_cast<char*>(&steam_id_dest_)) + sizeof(steam_id_src_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientInviteToGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_dest(&has_bits);
          steam_id_dest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_src(&has_bits);
          steam_id_src_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string connect_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_connect_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientInviteToGame.connect_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string remote_play = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_remote_play();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientInviteToGame.remote_play");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientInviteToGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientInviteToGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_dest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_src(), target);
  }

  // optional string connect_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect_string().data(), static_cast<int>(this->_internal_connect_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientInviteToGame.connect_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connect_string(), target);
  }

  // optional string remote_play = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_play().data(), static_cast<int>(this->_internal_remote_play().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientInviteToGame.remote_play");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remote_play(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientInviteToGame)
  return target;
}

size_t CMsgClientInviteToGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientInviteToGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string connect_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect_string());
    }

    // optional string remote_play = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_play());
    }

    // optional fixed64 steam_id_dest = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientInviteToGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientInviteToGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientInviteToGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientInviteToGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientInviteToGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientInviteToGame)
    MergeFrom(*source);
  }
}

void CMsgClientInviteToGame::MergeFrom(const CMsgClientInviteToGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientInviteToGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connect_string(from._internal_connect_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_remote_play(from._internal_remote_play());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_dest_ = from.steam_id_dest_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_src_ = from.steam_id_src_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientInviteToGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientInviteToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInviteToGame::CopyFrom(const CMsgClientInviteToGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientInviteToGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInviteToGame::IsInitialized() const {
  return true;
}

void CMsgClientInviteToGame::InternalSwap(CMsgClientInviteToGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connect_string_.Swap(&other->connect_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_play_.Swap(&other->remote_play_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientInviteToGame, steam_id_src_)
      + sizeof(CMsgClientInviteToGame::steam_id_src_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientInviteToGame, steam_id_dest_)>(
          reinterpret_cast<char*>(&steam_id_dest_),
          reinterpret_cast<char*>(&other->steam_id_dest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientInviteToGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientChatInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChatInvite>()._has_bits_);
  static void set_has_steam_id_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_patron(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chatroom_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steam_id_friend_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chat_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientChatInvite::CMsgClientChatInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientChatInvite)
}
CMsgClientChatInvite::CMsgClientChatInvite(const CMsgClientChatInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chat_name()) {
    chat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_invited_, &from.steam_id_invited_,
    static_cast<size_t>(reinterpret_cast<char*>(&chatroom_type_) -
    reinterpret_cast<char*>(&steam_id_invited_)) + sizeof(chatroom_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientChatInvite)
}

void CMsgClientChatInvite::SharedCtor() {
chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_invited_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chatroom_type_) -
    reinterpret_cast<char*>(&steam_id_invited_)) + sizeof(chatroom_type_));
}

CMsgClientChatInvite::~CMsgClientChatInvite() {
  // @@protoc_insertion_point(destructor:CMsgClientChatInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientChatInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChatInvite::ArenaDtor(void* object) {
  CMsgClientChatInvite* _this = reinterpret_cast< CMsgClientChatInvite* >(object);
  (void)_this;
}
void CMsgClientChatInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChatInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChatInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chat_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steam_id_invited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chatroom_type_) -
        reinterpret_cast<char*>(&steam_id_invited_)) + sizeof(chatroom_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChatInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_invited = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_invited(&has_bits);
          steam_id_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_chat(&has_bits);
          steam_id_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_patron = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_patron(&has_bits);
          steam_id_patron_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 chatroom_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_chatroom_type(&has_bits);
          chatroom_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_friend_chat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_steam_id_friend_chat(&has_bits);
          steam_id_friend_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string chat_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_chat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientChatInvite.chat_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientChatInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChatInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_invited = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_invited(), target);
  }

  // optional fixed64 steam_id_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_chat(), target);
  }

  // optional fixed64 steam_id_patron = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_patron(), target);
  }

  // optional int32 chatroom_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chatroom_type(), target);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_steam_id_friend_chat(), target);
  }

  // optional string chat_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_name().data(), static_cast<int>(this->_internal_chat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientChatInvite.chat_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_chat_name(), target);
  }

  // optional fixed64 game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChatInvite)
  return target;
}

size_t CMsgClientChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChatInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string chat_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_name());
    }

    // optional fixed64 steam_id_invited = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_chat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_patron = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_friend_chat = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 chatroom_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chatroom_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientChatInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChatInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientChatInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientChatInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientChatInvite)
    MergeFrom(*source);
  }
}

void CMsgClientChatInvite::MergeFrom(const CMsgClientChatInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chat_name(from._internal_chat_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_invited_ = from.steam_id_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_chat_ = from.steam_id_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_patron_ = from.steam_id_patron_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_friend_chat_ = from.steam_id_friend_chat_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      chatroom_type_ = from.chatroom_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientChatInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatInvite::CopyFrom(const CMsgClientChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientChatInvite::InternalSwap(CMsgClientChatInvite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_name_.Swap(&other->chat_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientChatInvite, chatroom_type_)
      + sizeof(CMsgClientChatInvite::chatroom_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientChatInvite, steam_id_invited_)>(
          reinterpret_cast<char*>(&steam_id_invited_),
          reinterpret_cast<char*>(&other->steam_id_invited_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChatInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientConnectionStats_Stats_Logon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientConnectionStats_Stats_Logon>()._has_bits_);
  static void set_has_connect_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connect_successes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connect_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_connections_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seconds_running(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_msec_tologonthistime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count_bad_cms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_no_udp_connectivity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_no_tcp_connectivity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_no_websocket_443_connectivity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_no_websocket_non_443_connectivity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientConnectionStats.Stats_Logon)
}
CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&connect_attempts_, &from.connect_attempts_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_websocket_non_443_connectivity_) -
    reinterpret_cast<char*>(&connect_attempts_)) + sizeof(no_websocket_non_443_connectivity_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientConnectionStats.Stats_Logon)
}

void CMsgClientConnectionStats_Stats_Logon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connect_attempts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_websocket_non_443_connectivity_) -
    reinterpret_cast<char*>(&connect_attempts_)) + sizeof(no_websocket_non_443_connectivity_));
}

CMsgClientConnectionStats_Stats_Logon::~CMsgClientConnectionStats_Stats_Logon() {
  // @@protoc_insertion_point(destructor:CMsgClientConnectionStats.Stats_Logon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientConnectionStats_Stats_Logon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientConnectionStats_Stats_Logon::ArenaDtor(void* object) {
  CMsgClientConnectionStats_Stats_Logon* _this = reinterpret_cast< CMsgClientConnectionStats_Stats_Logon* >(object);
  (void)_this;
}
void CMsgClientConnectionStats_Stats_Logon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientConnectionStats_Stats_Logon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientConnectionStats_Stats_Logon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientConnectionStats.Stats_Logon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&connect_attempts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_udp_connectivity_) -
        reinterpret_cast<char*>(&connect_attempts_)) + sizeof(no_udp_connectivity_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&no_tcp_connectivity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_websocket_non_443_connectivity_) -
        reinterpret_cast<char*>(&no_tcp_connectivity_)) + sizeof(no_websocket_non_443_connectivity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientConnectionStats_Stats_Logon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 connect_attempts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connect_attempts(&has_bits);
          connect_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 connect_successes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connect_successes(&has_bits);
          connect_successes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 connect_failures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_connect_failures(&has_bits);
          connect_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 connections_dropped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_connections_dropped(&has_bits);
          connections_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_running = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_seconds_running(&has_bits);
          seconds_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msec_tologonthistime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_msec_tologonthistime(&has_bits);
          msec_tologonthistime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count_bad_cms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_count_bad_cms(&has_bits);
          count_bad_cms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_udp_connectivity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_no_udp_connectivity(&has_bits);
          no_udp_connectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_tcp_connectivity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_no_tcp_connectivity(&has_bits);
          no_tcp_connectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_websocket_443_connectivity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_no_websocket_443_connectivity(&has_bits);
          no_websocket_443_connectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_websocket_non_443_connectivity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_no_websocket_non_443_connectivity(&has_bits);
          no_websocket_non_443_connectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientConnectionStats_Stats_Logon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientConnectionStats.Stats_Logon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connect_attempts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_connect_attempts(), target);
  }

  // optional int32 connect_successes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_connect_successes(), target);
  }

  // optional int32 connect_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_connect_failures(), target);
  }

  // optional int32 connections_dropped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_connections_dropped(), target);
  }

  // optional uint32 seconds_running = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seconds_running(), target);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_msec_tologonthistime(), target);
  }

  // optional uint32 count_bad_cms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_count_bad_cms(), target);
  }

  // optional bool no_udp_connectivity = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_no_udp_connectivity(), target);
  }

  // optional bool no_tcp_connectivity = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_no_tcp_connectivity(), target);
  }

  // optional bool no_websocket_443_connectivity = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_no_websocket_443_connectivity(), target);
  }

  // optional bool no_websocket_non_443_connectivity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_no_websocket_non_443_connectivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientConnectionStats.Stats_Logon)
  return target;
}

size_t CMsgClientConnectionStats_Stats_Logon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientConnectionStats.Stats_Logon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 connect_attempts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_connect_attempts());
    }

    // optional int32 connect_successes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_connect_successes());
    }

    // optional int32 connect_failures = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_connect_failures());
    }

    // optional int32 connections_dropped = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_connections_dropped());
    }

    // optional uint32 seconds_running = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_running());
    }

    // optional uint32 msec_tologonthistime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msec_tologonthistime());
    }

    // optional uint32 count_bad_cms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count_bad_cms());
    }

    // optional bool no_udp_connectivity = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool no_tcp_connectivity = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool no_websocket_443_connectivity = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool no_websocket_non_443_connectivity = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientConnectionStats.Stats_Logon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_Logon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientConnectionStats_Stats_Logon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientConnectionStats.Stats_Logon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientConnectionStats.Stats_Logon)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientConnectionStats.Stats_Logon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      connect_attempts_ = from.connect_attempts_;
    }
    if (cached_has_bits & 0x00000002u) {
      connect_successes_ = from.connect_successes_;
    }
    if (cached_has_bits & 0x00000004u) {
      connect_failures_ = from.connect_failures_;
    }
    if (cached_has_bits & 0x00000008u) {
      connections_dropped_ = from.connections_dropped_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_running_ = from.seconds_running_;
    }
    if (cached_has_bits & 0x00000020u) {
      msec_tologonthistime_ = from.msec_tologonthistime_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_bad_cms_ = from.count_bad_cms_;
    }
    if (cached_has_bits & 0x00000080u) {
      no_udp_connectivity_ = from.no_udp_connectivity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      no_tcp_connectivity_ = from.no_tcp_connectivity_;
    }
    if (cached_has_bits & 0x00000200u) {
      no_websocket_443_connectivity_ = from.no_websocket_443_connectivity_;
    }
    if (cached_has_bits & 0x00000400u) {
      no_websocket_non_443_connectivity_ = from.no_websocket_non_443_connectivity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientConnectionStats.Stats_Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientConnectionStats.Stats_Logon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_Logon::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_Logon::InternalSwap(CMsgClientConnectionStats_Stats_Logon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, no_websocket_non_443_connectivity_)
      + sizeof(CMsgClientConnectionStats_Stats_Logon::no_websocket_non_443_connectivity_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_attempts_)>(
          reinterpret_cast<char*>(&connect_attempts_),
          reinterpret_cast<char*>(&other->connect_attempts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientConnectionStats_Stats_Logon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientConnectionStats_Stats_UDP::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientConnectionStats_Stats_UDP>()._has_bits_);
  static void set_has_pkts_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pkts_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pkts_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientConnectionStats.Stats_UDP)
}
CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pkts_sent_, &from.pkts_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_recv_) -
    reinterpret_cast<char*>(&pkts_sent_)) + sizeof(bytes_recv_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientConnectionStats.Stats_UDP)
}

void CMsgClientConnectionStats_Stats_UDP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pkts_sent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_recv_) -
    reinterpret_cast<char*>(&pkts_sent_)) + sizeof(bytes_recv_));
}

CMsgClientConnectionStats_Stats_UDP::~CMsgClientConnectionStats_Stats_UDP() {
  // @@protoc_insertion_point(destructor:CMsgClientConnectionStats.Stats_UDP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientConnectionStats_Stats_UDP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientConnectionStats_Stats_UDP::ArenaDtor(void* object) {
  CMsgClientConnectionStats_Stats_UDP* _this = reinterpret_cast< CMsgClientConnectionStats_Stats_UDP* >(object);
  (void)_this;
}
void CMsgClientConnectionStats_Stats_UDP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientConnectionStats_Stats_UDP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientConnectionStats_Stats_UDP::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientConnectionStats.Stats_UDP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pkts_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_recv_) -
        reinterpret_cast<char*>(&pkts_sent_)) + sizeof(bytes_recv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientConnectionStats_Stats_UDP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 pkts_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pkts_sent(&has_bits);
          pkts_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bytes_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bytes_sent(&has_bits);
          bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pkts_recv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pkts_recv(&has_bits);
          pkts_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pkts_processed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pkts_processed(&has_bits);
          pkts_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bytes_recv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bytes_recv(&has_bits);
          bytes_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientConnectionStats_Stats_UDP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientConnectionStats.Stats_UDP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 pkts_sent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pkts_sent(), target);
  }

  // optional uint64 bytes_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bytes_sent(), target);
  }

  // optional uint64 pkts_recv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pkts_recv(), target);
  }

  // optional uint64 pkts_processed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pkts_processed(), target);
  }

  // optional uint64 bytes_recv = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_recv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientConnectionStats.Stats_UDP)
  return target;
}

size_t CMsgClientConnectionStats_Stats_UDP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientConnectionStats.Stats_UDP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 pkts_sent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pkts_sent());
    }

    // optional uint64 bytes_sent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bytes_sent());
    }

    // optional uint64 pkts_recv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pkts_recv());
    }

    // optional uint64 pkts_processed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pkts_processed());
    }

    // optional uint64 bytes_recv = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bytes_recv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientConnectionStats.Stats_UDP)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_UDP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientConnectionStats_Stats_UDP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientConnectionStats.Stats_UDP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientConnectionStats.Stats_UDP)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientConnectionStats.Stats_UDP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pkts_sent_ = from.pkts_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_sent_ = from.bytes_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      pkts_recv_ = from.pkts_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkts_processed_ = from.pkts_processed_;
    }
    if (cached_has_bits & 0x00000010u) {
      bytes_recv_ = from.bytes_recv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientConnectionStats.Stats_UDP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientConnectionStats.Stats_UDP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_UDP::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_UDP::InternalSwap(CMsgClientConnectionStats_Stats_UDP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, bytes_recv_)
      + sizeof(CMsgClientConnectionStats_Stats_UDP::bytes_recv_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_sent_)>(
          reinterpret_cast<char*>(&pkts_sent_),
          reinterpret_cast<char*>(&other->pkts_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientConnectionStats_Stats_UDP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientConnectionStats_Stats_VConn::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientConnectionStats_Stats_VConn>()._has_bits_);
  static void set_has_connections_udp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connections_tcp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgClientConnectionStats_Stats_UDP& stats_udp(const CMsgClientConnectionStats_Stats_VConn* msg);
  static void set_has_stats_udp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pkts_abandoned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_conn_req_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pkts_resent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msgs_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msgs_sent_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msgs_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_datagrams_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_datagrams_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bad_pkts_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_unknown_conn_pkts_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_missed_pkts_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dup_pkts_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_failed_connect_challenges(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_micro_sec_avg_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_micro_sec_min_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_micro_sec_max_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::CMsgClientConnectionStats_Stats_UDP&
CMsgClientConnectionStats_Stats_VConn::_Internal::stats_udp(const CMsgClientConnectionStats_Stats_VConn* msg) {
  return *msg->stats_udp_;
}
CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientConnectionStats.Stats_VConn)
}
CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats_udp()) {
    stats_udp_ = new ::CMsgClientConnectionStats_Stats_UDP(*from.stats_udp_);
  } else {
    stats_udp_ = nullptr;
  }
  ::memcpy(&connections_udp_, &from.connections_udp_,
    static_cast<size_t>(reinterpret_cast<char*>(&micro_sec_max_latency_) -
    reinterpret_cast<char*>(&connections_udp_)) + sizeof(micro_sec_max_latency_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientConnectionStats.Stats_VConn)
}

void CMsgClientConnectionStats_Stats_VConn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_udp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&micro_sec_max_latency_) -
    reinterpret_cast<char*>(&stats_udp_)) + sizeof(micro_sec_max_latency_));
}

CMsgClientConnectionStats_Stats_VConn::~CMsgClientConnectionStats_Stats_VConn() {
  // @@protoc_insertion_point(destructor:CMsgClientConnectionStats.Stats_VConn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientConnectionStats_Stats_VConn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_udp_;
}

void CMsgClientConnectionStats_Stats_VConn::ArenaDtor(void* object) {
  CMsgClientConnectionStats_Stats_VConn* _this = reinterpret_cast< CMsgClientConnectionStats_Stats_VConn* >(object);
  (void)_this;
}
void CMsgClientConnectionStats_Stats_VConn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientConnectionStats_Stats_VConn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientConnectionStats_Stats_VConn::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientConnectionStats.Stats_VConn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stats_udp_ != nullptr);
    stats_udp_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&connections_udp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msgs_sent_failed_) -
        reinterpret_cast<char*>(&connections_udp_)) + sizeof(msgs_sent_failed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&msgs_recv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_connect_challenges_) -
        reinterpret_cast<char*>(&msgs_recv_)) + sizeof(failed_connect_challenges_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&micro_sec_avg_latency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&micro_sec_max_latency_) -
        reinterpret_cast<char*>(&micro_sec_avg_latency_)) + sizeof(micro_sec_max_latency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientConnectionStats_Stats_VConn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 connections_udp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connections_udp(&has_bits);
          connections_udp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 connections_tcp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connections_tcp(&has_bits);
          connections_tcp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_udp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pkts_abandoned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pkts_abandoned(&has_bits);
          pkts_abandoned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 conn_req_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_conn_req_received(&has_bits);
          conn_req_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pkts_resent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pkts_resent(&has_bits);
          pkts_resent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 msgs_sent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_msgs_sent(&has_bits);
          msgs_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 msgs_sent_failed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_msgs_sent_failed(&has_bits);
          msgs_sent_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 msgs_recv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_msgs_recv(&has_bits);
          msgs_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 datagrams_sent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_datagrams_sent(&has_bits);
          datagrams_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 datagrams_recv = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_datagrams_recv(&has_bits);
          datagrams_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bad_pkts_recv = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bad_pkts_recv(&has_bits);
          bad_pkts_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unknown_conn_pkts_recv = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_unknown_conn_pkts_recv(&has_bits);
          unknown_conn_pkts_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 missed_pkts_recv = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_missed_pkts_recv(&has_bits);
          missed_pkts_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dup_pkts_recv = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dup_pkts_recv(&has_bits);
          dup_pkts_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 failed_connect_challenges = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_failed_connect_challenges(&has_bits);
          failed_connect_challenges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 micro_sec_avg_latency = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_micro_sec_avg_latency(&has_bits);
          micro_sec_avg_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 micro_sec_min_latency = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_micro_sec_min_latency(&has_bits);
          micro_sec_min_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 micro_sec_max_latency = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_micro_sec_max_latency(&has_bits);
          micro_sec_max_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientConnectionStats_Stats_VConn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientConnectionStats.Stats_VConn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connections_udp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connections_udp(), target);
  }

  // optional uint32 connections_tcp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_connections_tcp(), target);
  }

  // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stats_udp(this), target, stream);
  }

  // optional uint64 pkts_abandoned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pkts_abandoned(), target);
  }

  // optional uint64 conn_req_received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_conn_req_received(), target);
  }

  // optional uint64 pkts_resent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_pkts_resent(), target);
  }

  // optional uint64 msgs_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_msgs_sent(), target);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_msgs_sent_failed(), target);
  }

  // optional uint64 msgs_recv = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_msgs_recv(), target);
  }

  // optional uint64 datagrams_sent = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_datagrams_sent(), target);
  }

  // optional uint64 datagrams_recv = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_datagrams_recv(), target);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_bad_pkts_recv(), target);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_unknown_conn_pkts_recv(), target);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_missed_pkts_recv(), target);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_dup_pkts_recv(), target);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_failed_connect_challenges(), target);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_micro_sec_avg_latency(), target);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_micro_sec_min_latency(), target);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_micro_sec_max_latency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientConnectionStats.Stats_VConn)
  return target;
}

size_t CMsgClientConnectionStats_Stats_VConn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientConnectionStats.Stats_VConn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_udp_);
    }

    // optional uint32 connections_udp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_connections_udp());
    }

    // optional uint32 connections_tcp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_connections_tcp());
    }

    // optional uint64 pkts_abandoned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pkts_abandoned());
    }

    // optional uint64 conn_req_received = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_conn_req_received());
    }

    // optional uint64 pkts_resent = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pkts_resent());
    }

    // optional uint64 msgs_sent = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_msgs_sent());
    }

    // optional uint64 msgs_sent_failed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_msgs_sent_failed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 msgs_recv = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_msgs_recv());
    }

    // optional uint64 datagrams_sent = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_datagrams_sent());
    }

    // optional uint64 datagrams_recv = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_datagrams_recv());
    }

    // optional uint64 bad_pkts_recv = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bad_pkts_recv());
    }

    // optional uint64 unknown_conn_pkts_recv = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unknown_conn_pkts_recv());
    }

    // optional uint64 missed_pkts_recv = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_missed_pkts_recv());
    }

    // optional uint64 dup_pkts_recv = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dup_pkts_recv());
    }

    // optional uint64 failed_connect_challenges = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_failed_connect_challenges());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 micro_sec_avg_latency = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_micro_sec_avg_latency());
    }

    // optional uint32 micro_sec_min_latency = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_micro_sec_min_latency());
    }

    // optional uint32 micro_sec_max_latency = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_micro_sec_max_latency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientConnectionStats.Stats_VConn)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_VConn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientConnectionStats_Stats_VConn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientConnectionStats.Stats_VConn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientConnectionStats.Stats_VConn)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientConnectionStats.Stats_VConn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stats_udp()->::CMsgClientConnectionStats_Stats_UDP::MergeFrom(from._internal_stats_udp());
    }
    if (cached_has_bits & 0x00000002u) {
      connections_udp_ = from.connections_udp_;
    }
    if (cached_has_bits & 0x00000004u) {
      connections_tcp_ = from.connections_tcp_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkts_abandoned_ = from.pkts_abandoned_;
    }
    if (cached_has_bits & 0x00000010u) {
      conn_req_received_ = from.conn_req_received_;
    }
    if (cached_has_bits & 0x00000020u) {
      pkts_resent_ = from.pkts_resent_;
    }
    if (cached_has_bits & 0x00000040u) {
      msgs_sent_ = from.msgs_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      msgs_sent_failed_ = from.msgs_sent_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      msgs_recv_ = from.msgs_recv_;
    }
    if (cached_has_bits & 0x00000200u) {
      datagrams_sent_ = from.datagrams_sent_;
    }
    if (cached_has_bits & 0x00000400u) {
      datagrams_recv_ = from.datagrams_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      bad_pkts_recv_ = from.bad_pkts_recv_;
    }
    if (cached_has_bits & 0x00001000u) {
      unknown_conn_pkts_recv_ = from.unknown_conn_pkts_recv_;
    }
    if (cached_has_bits & 0x00002000u) {
      missed_pkts_recv_ = from.missed_pkts_recv_;
    }
    if (cached_has_bits & 0x00004000u) {
      dup_pkts_recv_ = from.dup_pkts_recv_;
    }
    if (cached_has_bits & 0x00008000u) {
      failed_connect_challenges_ = from.failed_connect_challenges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      micro_sec_avg_latency_ = from.micro_sec_avg_latency_;
    }
    if (cached_has_bits & 0x00020000u) {
      micro_sec_min_latency_ = from.micro_sec_min_latency_;
    }
    if (cached_has_bits & 0x00040000u) {
      micro_sec_max_latency_ = from.micro_sec_max_latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientConnectionStats.Stats_VConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientConnectionStats.Stats_VConn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_VConn::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats_Stats_VConn::InternalSwap(CMsgClientConnectionStats_Stats_VConn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_max_latency_)
      + sizeof(CMsgClientConnectionStats_Stats_VConn::micro_sec_max_latency_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, stats_udp_)>(
          reinterpret_cast<char*>(&stats_udp_),
          reinterpret_cast<char*>(&other->stats_udp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientConnectionStats_Stats_VConn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientConnectionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientConnectionStats>()._has_bits_);
  static const ::CMsgClientConnectionStats_Stats_Logon& stats_logon(const CMsgClientConnectionStats* msg);
  static void set_has_stats_logon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgClientConnectionStats_Stats_VConn& stats_vconn(const CMsgClientConnectionStats* msg);
  static void set_has_stats_vconn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgClientConnectionStats_Stats_Logon&
CMsgClientConnectionStats::_Internal::stats_logon(const CMsgClientConnectionStats* msg) {
  return *msg->stats_logon_;
}
const ::CMsgClientConnectionStats_Stats_VConn&
CMsgClientConnectionStats::_Internal::stats_vconn(const CMsgClientConnectionStats* msg) {
  return *msg->stats_vconn_;
}
CMsgClientConnectionStats::CMsgClientConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientConnectionStats)
}
CMsgClientConnectionStats::CMsgClientConnectionStats(const CMsgClientConnectionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats_logon()) {
    stats_logon_ = new ::CMsgClientConnectionStats_Stats_Logon(*from.stats_logon_);
  } else {
    stats_logon_ = nullptr;
  }
  if (from._internal_has_stats_vconn()) {
    stats_vconn_ = new ::CMsgClientConnectionStats_Stats_VConn(*from.stats_vconn_);
  } else {
    stats_vconn_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientConnectionStats)
}

void CMsgClientConnectionStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_logon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stats_vconn_) -
    reinterpret_cast<char*>(&stats_logon_)) + sizeof(stats_vconn_));
}

CMsgClientConnectionStats::~CMsgClientConnectionStats() {
  // @@protoc_insertion_point(destructor:CMsgClientConnectionStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientConnectionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_logon_;
  if (this != internal_default_instance()) delete stats_vconn_;
}

void CMsgClientConnectionStats::ArenaDtor(void* object) {
  CMsgClientConnectionStats* _this = reinterpret_cast< CMsgClientConnectionStats* >(object);
  (void)_this;
}
void CMsgClientConnectionStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientConnectionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientConnectionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_logon_ != nullptr);
      stats_logon_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_vconn_ != nullptr);
      stats_vconn_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientConnectionStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_logon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_vconn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientConnectionStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientConnectionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stats_logon(this), target, stream);
  }

  // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stats_vconn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientConnectionStats)
  return target;
}

size_t CMsgClientConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientConnectionStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_logon_);
    }

    // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_vconn_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientConnectionStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientConnectionStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientConnectionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientConnectionStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientConnectionStats)
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats::MergeFrom(const CMsgClientConnectionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientConnectionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stats_logon()->::CMsgClientConnectionStats_Stats_Logon::MergeFrom(from._internal_stats_logon());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stats_vconn()->::CMsgClientConnectionStats_Stats_VConn::MergeFrom(from._internal_stats_vconn());
    }
  }
}

void CMsgClientConnectionStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats::CopyFrom(const CMsgClientConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats::IsInitialized() const {
  return true;
}

void CMsgClientConnectionStats::InternalSwap(CMsgClientConnectionStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats, stats_vconn_)
      + sizeof(CMsgClientConnectionStats::stats_vconn_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientConnectionStats, stats_logon_)>(
          reinterpret_cast<char*>(&stats_logon_),
          reinterpret_cast<char*>(&other->stats_logon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientConnectionStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientServersAvailable_Server_Types_Available::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServersAvailable_Server_Types_Available>()._has_bits_);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServersAvailable.Server_Types_Available)
}
CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_, &from.server_,
    static_cast<size_t>(reinterpret_cast<char*>(&changed_) -
    reinterpret_cast<char*>(&server_)) + sizeof(changed_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientServersAvailable.Server_Types_Available)
}

void CMsgClientServersAvailable_Server_Types_Available::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&changed_) -
    reinterpret_cast<char*>(&server_)) + sizeof(changed_));
}

CMsgClientServersAvailable_Server_Types_Available::~CMsgClientServersAvailable_Server_Types_Available() {
  // @@protoc_insertion_point(destructor:CMsgClientServersAvailable.Server_Types_Available)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientServersAvailable_Server_Types_Available::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientServersAvailable_Server_Types_Available::ArenaDtor(void* object) {
  CMsgClientServersAvailable_Server_Types_Available* _this = reinterpret_cast< CMsgClientServersAvailable_Server_Types_Available* >(object);
  (void)_this;
}
void CMsgClientServersAvailable_Server_Types_Available::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServersAvailable_Server_Types_Available::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServersAvailable_Server_Types_Available::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServersAvailable.Server_Types_Available)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changed_) -
        reinterpret_cast<char*>(&server_)) + sizeof(changed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServersAvailable_Server_Types_Available::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server(&has_bits);
          server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_changed(&has_bits);
          changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientServersAvailable_Server_Types_Available::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServersAvailable.Server_Types_Available)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server(), target);
  }

  // optional bool changed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServersAvailable.Server_Types_Available)
  return target;
}

size_t CMsgClientServersAvailable_Server_Types_Available::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServersAvailable.Server_Types_Available)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 server = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server());
    }

    // optional bool changed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientServersAvailable.Server_Types_Available)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServersAvailable_Server_Types_Available* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientServersAvailable_Server_Types_Available>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientServersAvailable.Server_Types_Available)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientServersAvailable.Server_Types_Available)
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServersAvailable.Server_Types_Available)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_ = from.server_;
    }
    if (cached_has_bits & 0x00000002u) {
      changed_ = from.changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientServersAvailable.Server_Types_Available)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServersAvailable.Server_Types_Available)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable_Server_Types_Available::IsInitialized() const {
  return true;
}

void CMsgClientServersAvailable_Server_Types_Available::InternalSwap(CMsgClientServersAvailable_Server_Types_Available* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, changed_)
      + sizeof(CMsgClientServersAvailable_Server_Types_Available::changed_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, server_)>(
          reinterpret_cast<char*>(&server_),
          reinterpret_cast<char*>(&other->server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServersAvailable_Server_Types_Available::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientServersAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServersAvailable>()._has_bits_);
  static void set_has_server_type_for_auth_services(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientServersAvailable::CMsgClientServersAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  server_types_available_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServersAvailable)
}
CMsgClientServersAvailable::CMsgClientServersAvailable(const CMsgClientServersAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      server_types_available_(from.server_types_available_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_type_for_auth_services_ = from.server_type_for_auth_services_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientServersAvailable)
}

void CMsgClientServersAvailable::SharedCtor() {
server_type_for_auth_services_ = 0u;
}

CMsgClientServersAvailable::~CMsgClientServersAvailable() {
  // @@protoc_insertion_point(destructor:CMsgClientServersAvailable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientServersAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientServersAvailable::ArenaDtor(void* object) {
  CMsgClientServersAvailable* _this = reinterpret_cast< CMsgClientServersAvailable* >(object);
  (void)_this;
}
void CMsgClientServersAvailable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServersAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServersAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServersAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_types_available_.Clear();
  server_type_for_auth_services_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServersAvailable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_types_available(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 server_type_for_auth_services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_type_for_auth_services(&has_bits);
          server_type_for_auth_services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientServersAvailable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServersAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_server_types_available_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_server_types_available(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_type_for_auth_services = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_type_for_auth_services(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServersAvailable)
  return target;
}

size_t CMsgClientServersAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServersAvailable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  total_size += 1UL * this->_internal_server_types_available_size();
  for (const auto& msg : this->server_types_available_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 server_type_for_auth_services = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_type_for_auth_services());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServersAvailable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientServersAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServersAvailable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientServersAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientServersAvailable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientServersAvailable)
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable::MergeFrom(const CMsgClientServersAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServersAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_types_available_.MergeFrom(from.server_types_available_);
  if (from._internal_has_server_type_for_auth_services()) {
    _internal_set_server_type_for_auth_services(from._internal_server_type_for_auth_services());
  }
}

void CMsgClientServersAvailable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientServersAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable::CopyFrom(const CMsgClientServersAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServersAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable::IsInitialized() const {
  return true;
}

void CMsgClientServersAvailable::InternalSwap(CMsgClientServersAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_types_available_.InternalSwap(&other->server_types_available_);
  swap(server_type_for_auth_services_, other->server_type_for_auth_services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServersAvailable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientReportOverlayDetourFailure::_Internal {
 public:
};

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  failure_strings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientReportOverlayDetourFailure)
}
CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      failure_strings_(from.failure_strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientReportOverlayDetourFailure)
}

void CMsgClientReportOverlayDetourFailure::SharedCtor() {
}

CMsgClientReportOverlayDetourFailure::~CMsgClientReportOverlayDetourFailure() {
  // @@protoc_insertion_point(destructor:CMsgClientReportOverlayDetourFailure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientReportOverlayDetourFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientReportOverlayDetourFailure::ArenaDtor(void* object) {
  CMsgClientReportOverlayDetourFailure* _this = reinterpret_cast< CMsgClientReportOverlayDetourFailure* >(object);
  (void)_this;
}
void CMsgClientReportOverlayDetourFailure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientReportOverlayDetourFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientReportOverlayDetourFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientReportOverlayDetourFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failure_strings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientReportOverlayDetourFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string failure_strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failure_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientReportOverlayDetourFailure.failure_strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientReportOverlayDetourFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientReportOverlayDetourFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  for (int i = 0, n = this->_internal_failure_strings_size(); i < n; i++) {
    const auto& s = this->_internal_failure_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientReportOverlayDetourFailure.failure_strings");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientReportOverlayDetourFailure)
  return target;
}

size_t CMsgClientReportOverlayDetourFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientReportOverlayDetourFailure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string failure_strings = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(failure_strings_.size());
  for (int i = 0, n = failure_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      failure_strings_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientReportOverlayDetourFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientReportOverlayDetourFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientReportOverlayDetourFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientReportOverlayDetourFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientReportOverlayDetourFailure)
    MergeFrom(*source);
  }
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const CMsgClientReportOverlayDetourFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientReportOverlayDetourFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failure_strings_.MergeFrom(from.failure_strings_);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientReportOverlayDetourFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const CMsgClientReportOverlayDetourFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientReportOverlayDetourFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReportOverlayDetourFailure::IsInitialized() const {
  return true;
}

void CMsgClientReportOverlayDetourFailure::InternalSwap(CMsgClientReportOverlayDetourFailure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  failure_strings_.InternalSwap(&other->failure_strings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientReportOverlayDetourFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientRequestEncryptedAppTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestEncryptedAppTicket>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestEncryptedAppTicket)
}
CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userdata()) {
    userdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userdata(), 
      GetArena());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestEncryptedAppTicket)
}

void CMsgClientRequestEncryptedAppTicket::SharedCtor() {
userdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
}

CMsgClientRequestEncryptedAppTicket::~CMsgClientRequestEncryptedAppTicket() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestEncryptedAppTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRequestEncryptedAppTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestEncryptedAppTicket::ArenaDtor(void* object) {
  CMsgClientRequestEncryptedAppTicket* _this = reinterpret_cast< CMsgClientRequestEncryptedAppTicket* >(object);
  (void)_this;
}
void CMsgClientRequestEncryptedAppTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestEncryptedAppTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestEncryptedAppTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestEncryptedAppTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userdata_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestEncryptedAppTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes userdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRequestEncryptedAppTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestEncryptedAppTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional bytes userdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_userdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestEncryptedAppTicket)
  return target;
}

size_t CMsgClientRequestEncryptedAppTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestEncryptedAppTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes userdata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_userdata());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRequestEncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRequestEncryptedAppTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRequestEncryptedAppTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRequestEncryptedAppTicket)
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const CMsgClientRequestEncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestEncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_userdata(from._internal_userdata());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRequestEncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const CMsgClientRequestEncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestEncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicket::IsInitialized() const {
  return true;
}

void CMsgClientRequestEncryptedAppTicket::InternalSwap(CMsgClientRequestEncryptedAppTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  userdata_.Swap(&other->userdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestEncryptedAppTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientRequestEncryptedAppTicketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestEncryptedAppTicketResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::EncryptedAppTicket& encrypted_app_ticket(const CMsgClientRequestEncryptedAppTicketResponse* msg);
  static void set_has_encrypted_app_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::EncryptedAppTicket&
CMsgClientRequestEncryptedAppTicketResponse::_Internal::encrypted_app_ticket(const CMsgClientRequestEncryptedAppTicketResponse* msg) {
  return *msg->encrypted_app_ticket_;
}
void CMsgClientRequestEncryptedAppTicketResponse::clear_encrypted_app_ticket() {
  if (encrypted_app_ticket_ != nullptr) encrypted_app_ticket_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestEncryptedAppTicketResponse)
}
CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_encrypted_app_ticket()) {
    encrypted_app_ticket_ = new ::EncryptedAppTicket(*from.encrypted_app_ticket_);
  } else {
    encrypted_app_ticket_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestEncryptedAppTicketResponse)
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encrypted_app_ticket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&encrypted_app_ticket_)) + sizeof(app_id_));
eresult_ = 2;
}

CMsgClientRequestEncryptedAppTicketResponse::~CMsgClientRequestEncryptedAppTicketResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestEncryptedAppTicketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete encrypted_app_ticket_;
}

void CMsgClientRequestEncryptedAppTicketResponse::ArenaDtor(void* object) {
  CMsgClientRequestEncryptedAppTicketResponse* _this = reinterpret_cast< CMsgClientRequestEncryptedAppTicketResponse* >(object);
  (void)_this;
}
void CMsgClientRequestEncryptedAppTicketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestEncryptedAppTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestEncryptedAppTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestEncryptedAppTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(encrypted_app_ticket_ != nullptr);
    encrypted_app_ticket_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestEncryptedAppTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EncryptedAppTicket encrypted_app_ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_app_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRequestEncryptedAppTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestEncryptedAppTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional .EncryptedAppTicket encrypted_app_ticket = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::encrypted_app_ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestEncryptedAppTicketResponse)
  return target;
}

size_t CMsgClientRequestEncryptedAppTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestEncryptedAppTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EncryptedAppTicket encrypted_app_ticket = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encrypted_app_ticket_);
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRequestEncryptedAppTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRequestEncryptedAppTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRequestEncryptedAppTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRequestEncryptedAppTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestEncryptedAppTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_encrypted_app_ticket()->::EncryptedAppTicket::MergeFrom(from._internal_encrypted_app_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRequestEncryptedAppTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestEncryptedAppTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestEncryptedAppTicketResponse::InternalSwap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, app_id_)
      + sizeof(CMsgClientRequestEncryptedAppTicketResponse::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, encrypted_app_ticket_)>(
          reinterpret_cast<char*>(&encrypted_app_ticket_),
          reinterpret_cast<char*>(&other->encrypted_app_ticket_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestEncryptedAppTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientWalletInfoUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientWalletInfoUpdate>()._has_bits_);
  static void set_has_has_wallet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_balance_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_balance64(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_balance64_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_realm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientWalletInfoUpdate)
}
CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_wallet_, &from.has_wallet_,
    static_cast<size_t>(reinterpret_cast<char*>(&realm_) -
    reinterpret_cast<char*>(&has_wallet_)) + sizeof(realm_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientWalletInfoUpdate)
}

void CMsgClientWalletInfoUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&has_wallet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&realm_) -
    reinterpret_cast<char*>(&has_wallet_)) + sizeof(realm_));
}

CMsgClientWalletInfoUpdate::~CMsgClientWalletInfoUpdate() {
  // @@protoc_insertion_point(destructor:CMsgClientWalletInfoUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientWalletInfoUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientWalletInfoUpdate::ArenaDtor(void* object) {
  CMsgClientWalletInfoUpdate* _this = reinterpret_cast< CMsgClientWalletInfoUpdate* >(object);
  (void)_this;
}
void CMsgClientWalletInfoUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientWalletInfoUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientWalletInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientWalletInfoUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&has_wallet_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&realm_) -
        reinterpret_cast<char*>(&has_wallet_)) + sizeof(realm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientWalletInfoUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_wallet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_wallet(&has_bits);
          has_wallet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 balance_delayed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_balance_delayed(&has_bits);
          balance_delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balance64 = 5 [(.php_output_always_number) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_balance64(&has_bits);
          balance64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balance64_delayed = 6 [(.php_output_always_number) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_balance64_delayed(&has_bits);
          balance64_delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 realm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_realm(&has_bits);
          realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientWalletInfoUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientWalletInfoUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_wallet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_wallet(), target);
  }

  // optional int32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_balance(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_currency(), target);
  }

  // optional int32 balance_delayed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_balance_delayed(), target);
  }

  // optional int64 balance64 = 5 [(.php_output_always_number) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_balance64(), target);
  }

  // optional int64 balance64_delayed = 6 [(.php_output_always_number) = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_balance64_delayed(), target);
  }

  // optional int32 realm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_realm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientWalletInfoUpdate)
  return target;
}

size_t CMsgClientWalletInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientWalletInfoUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool has_wallet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_balance());
    }

    // optional int32 currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_currency());
    }

    // optional int32 balance_delayed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_balance_delayed());
    }

    // optional int64 balance64 = 5 [(.php_output_always_number) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balance64());
    }

    // optional int64 balance64_delayed = 6 [(.php_output_always_number) = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balance64_delayed());
    }

    // optional int32 realm = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_realm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientWalletInfoUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientWalletInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWalletInfoUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientWalletInfoUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientWalletInfoUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientWalletInfoUpdate)
    MergeFrom(*source);
  }
}

void CMsgClientWalletInfoUpdate::MergeFrom(const CMsgClientWalletInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientWalletInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      has_wallet_ = from.has_wallet_;
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      balance_delayed_ = from.balance_delayed_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance64_ = from.balance64_;
    }
    if (cached_has_bits & 0x00000020u) {
      balance64_delayed_ = from.balance64_delayed_;
    }
    if (cached_has_bits & 0x00000040u) {
      realm_ = from.realm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWalletInfoUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientWalletInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWalletInfoUpdate::CopyFrom(const CMsgClientWalletInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientWalletInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWalletInfoUpdate::IsInitialized() const {
  return true;
}

void CMsgClientWalletInfoUpdate::InternalSwap(CMsgClientWalletInfoUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientWalletInfoUpdate, realm_)
      + sizeof(CMsgClientWalletInfoUpdate::realm_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientWalletInfoUpdate, has_wallet_)>(
          reinterpret_cast<char*>(&has_wallet_),
          reinterpret_cast<char*>(&other->has_wallet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientWalletInfoUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetClanOfficers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAMGetClanOfficers>()._has_bits_);
  static void set_has_steamid_clan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetClanOfficers)
}
CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_clan_ = from.steamid_clan_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetClanOfficers)
}

void CMsgClientAMGetClanOfficers::SharedCtor() {
steamid_clan_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientAMGetClanOfficers::~CMsgClientAMGetClanOfficers() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetClanOfficers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetClanOfficers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAMGetClanOfficers::ArenaDtor(void* object) {
  CMsgClientAMGetClanOfficers* _this = reinterpret_cast< CMsgClientAMGetClanOfficers* >(object);
  (void)_this;
}
void CMsgClientAMGetClanOfficers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetClanOfficers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetClanOfficers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetClanOfficers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_clan_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetClanOfficers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_clan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid_clan(&has_bits);
          steamid_clan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetClanOfficers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetClanOfficers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_clan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetClanOfficers)
  return target;
}

size_t CMsgClientAMGetClanOfficers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetClanOfficers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid_clan = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetClanOfficers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetClanOfficers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetClanOfficers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetClanOfficers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetClanOfficers)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficers::MergeFrom(const CMsgClientAMGetClanOfficers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetClanOfficers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid_clan()) {
    _internal_set_steamid_clan(from._internal_steamid_clan());
  }
}

void CMsgClientAMGetClanOfficers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetClanOfficers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficers::CopyFrom(const CMsgClientAMGetClanOfficers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetClanOfficers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficers::IsInitialized() const {
  return true;
}

void CMsgClientAMGetClanOfficers::InternalSwap(CMsgClientAMGetClanOfficers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_clan_, other->steamid_clan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetClanOfficers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetClanOfficersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAMGetClanOfficersResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid_clan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_officer_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetClanOfficersResponse)
}
CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_clan_, &from.steamid_clan_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_clan_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetClanOfficersResponse)
}

void CMsgClientAMGetClanOfficersResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_clan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&officer_count_) -
    reinterpret_cast<char*>(&steamid_clan_)) + sizeof(officer_count_));
eresult_ = 2;
}

CMsgClientAMGetClanOfficersResponse::~CMsgClientAMGetClanOfficersResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetClanOfficersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetClanOfficersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAMGetClanOfficersResponse::ArenaDtor(void* object) {
  CMsgClientAMGetClanOfficersResponse* _this = reinterpret_cast< CMsgClientAMGetClanOfficersResponse* >(object);
  (void)_this;
}
void CMsgClientAMGetClanOfficersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetClanOfficersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetClanOfficersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetClanOfficersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_clan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&officer_count_) -
        reinterpret_cast<char*>(&steamid_clan_)) + sizeof(officer_count_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetClanOfficersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_clan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid_clan(&has_bits);
          steamid_clan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 officer_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_officer_count(&has_bits);
          officer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetClanOfficersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetClanOfficersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional fixed64 steamid_clan = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_clan(), target);
  }

  // optional int32 officer_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_officer_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetClanOfficersResponse)
  return target;
}

size_t CMsgClientAMGetClanOfficersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetClanOfficersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid_clan = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 officer_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_officer_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetClanOfficersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetClanOfficersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetClanOfficersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetClanOfficersResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const CMsgClientAMGetClanOfficersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetClanOfficersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_clan_ = from.steamid_clan_;
    }
    if (cached_has_bits & 0x00000002u) {
      officer_count_ = from.officer_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetClanOfficersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const CMsgClientAMGetClanOfficersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetClanOfficersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficersResponse::IsInitialized() const {
  return true;
}

void CMsgClientAMGetClanOfficersResponse::InternalSwap(CMsgClientAMGetClanOfficersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, officer_count_)
      + sizeof(CMsgClientAMGetClanOfficersResponse::officer_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, steamid_clan_)>(
          reinterpret_cast<char*>(&steamid_clan_),
          reinterpret_cast<char*>(&other->steamid_clan_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetClanOfficersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetPersonaNameHistory_IdInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAMGetPersonaNameHistory_IdInstance>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetPersonaNameHistory.IdInstance)
}
CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetPersonaNameHistory.IdInstance)
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientAMGetPersonaNameHistory_IdInstance::~CMsgClientAMGetPersonaNameHistory_IdInstance() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetPersonaNameHistory.IdInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::ArenaDtor(void* object) {
  CMsgClientAMGetPersonaNameHistory_IdInstance* _this = reinterpret_cast< CMsgClientAMGetPersonaNameHistory_IdInstance* >(object);
  (void)_this;
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetPersonaNameHistory_IdInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetPersonaNameHistory_IdInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetPersonaNameHistory_IdInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetPersonaNameHistory.IdInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistory_IdInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory_IdInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistory_IdInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetPersonaNameHistory.IdInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetPersonaNameHistory.IdInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetPersonaNameHistory.IdInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::InternalSwap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetPersonaNameHistory_IdInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetPersonaNameHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAMGetPersonaNameHistory>()._has_bits_);
  static void set_has_id_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetPersonaNameHistory)
}
CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_count_ = from.id_count_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetPersonaNameHistory)
}

void CMsgClientAMGetPersonaNameHistory::SharedCtor() {
id_count_ = 0;
}

CMsgClientAMGetPersonaNameHistory::~CMsgClientAMGetPersonaNameHistory() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetPersonaNameHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetPersonaNameHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAMGetPersonaNameHistory::ArenaDtor(void* object) {
  CMsgClientAMGetPersonaNameHistory* _this = reinterpret_cast< CMsgClientAMGetPersonaNameHistory* >(object);
  (void)_this;
}
void CMsgClientAMGetPersonaNameHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetPersonaNameHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetPersonaNameHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetPersonaNameHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  id_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetPersonaNameHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id_count(&has_bits);
          id_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetPersonaNameHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetPersonaNameHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id_count(), target);
  }

  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetPersonaNameHistory)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetPersonaNameHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 id_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetPersonaNameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetPersonaNameHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetPersonaNameHistory)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const CMsgClientAMGetPersonaNameHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetPersonaNameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_id_count()) {
    _internal_set_id_count(from._internal_id_count());
  }
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetPersonaNameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const CMsgClientAMGetPersonaNameHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetPersonaNameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistory::InternalSwap(CMsgClientAMGetPersonaNameHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_.InternalSwap(&other->ids_);
  swap(id_count_, other->id_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetPersonaNameHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance>()._has_bits_);
  static void set_has_name_since(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  name_since_ = from.name_since_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_since_ = 0u;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::ArenaDtor(void* object) {
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* _this = reinterpret_cast< CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* >(object);
  (void)_this;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  name_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 name_since = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_name_since(&has_bits);
          name_since_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 name_since = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_name_since(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed32 name_since = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      name_since_ = from.name_since_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(name_since_, other->name_since_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
eresult_ = 2;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::ArenaDtor(void* object) {
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* _this = reinterpret_cast< CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* >(object);
  (void)_this;
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    steamid_ = PROTOBUF_ULONGLONG(0);
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_names(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  total_size += 1UL * this->_internal_names_size();
  for (const auto& msg : this->names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  names_.InternalSwap(&other->names_);
  swap(steamid_, other->steamid_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAMGetPersonaNameHistoryResponse::_Internal {
 public:
};

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAMGetPersonaNameHistoryResponse)
}
CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientAMGetPersonaNameHistoryResponse)
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedCtor() {
}

CMsgClientAMGetPersonaNameHistoryResponse::~CMsgClientAMGetPersonaNameHistoryResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientAMGetPersonaNameHistoryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientAMGetPersonaNameHistoryResponse::ArenaDtor(void* object) {
  CMsgClientAMGetPersonaNameHistoryResponse* _this = reinterpret_cast< CMsgClientAMGetPersonaNameHistoryResponse* >(object);
  (void)_this;
}
void CMsgClientAMGetPersonaNameHistoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAMGetPersonaNameHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAMGetPersonaNameHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAMGetPersonaNameHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAMGetPersonaNameHistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAMGetPersonaNameHistoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAMGetPersonaNameHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAMGetPersonaNameHistoryResponse)
  return target;
}

size_t CMsgClientAMGetPersonaNameHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAMGetPersonaNameHistoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAMGetPersonaNameHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAMGetPersonaNameHistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAMGetPersonaNameHistoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAMGetPersonaNameHistoryResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAMGetPersonaNameHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAMGetPersonaNameHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAMGetPersonaNameHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse::IsInitialized() const {
  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse::InternalSwap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAMGetPersonaNameHistoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientDeregisterWithServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDeregisterWithServer>()._has_bits_);
  static void set_has_eservertype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientDeregisterWithServer)
}
CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eservertype_, &from.eservertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&eservertype_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientDeregisterWithServer)
}

void CMsgClientDeregisterWithServer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eservertype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&eservertype_)) + sizeof(app_id_));
}

CMsgClientDeregisterWithServer::~CMsgClientDeregisterWithServer() {
  // @@protoc_insertion_point(destructor:CMsgClientDeregisterWithServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientDeregisterWithServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientDeregisterWithServer::ArenaDtor(void* object) {
  CMsgClientDeregisterWithServer* _this = reinterpret_cast< CMsgClientDeregisterWithServer* >(object);
  (void)_this;
}
void CMsgClientDeregisterWithServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDeregisterWithServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDeregisterWithServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDeregisterWithServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&eservertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&eservertype_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDeregisterWithServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 eservertype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eservertype(&has_bits);
          eservertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientDeregisterWithServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDeregisterWithServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eservertype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eservertype(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDeregisterWithServer)
  return target;
}

size_t CMsgClientDeregisterWithServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDeregisterWithServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 eservertype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eservertype());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientDeregisterWithServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientDeregisterWithServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeregisterWithServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientDeregisterWithServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientDeregisterWithServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientDeregisterWithServer)
    MergeFrom(*source);
  }
}

void CMsgClientDeregisterWithServer::MergeFrom(const CMsgClientDeregisterWithServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDeregisterWithServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eservertype_ = from.eservertype_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientDeregisterWithServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientDeregisterWithServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeregisterWithServer::CopyFrom(const CMsgClientDeregisterWithServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDeregisterWithServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeregisterWithServer::IsInitialized() const {
  return true;
}

void CMsgClientDeregisterWithServer::InternalSwap(CMsgClientDeregisterWithServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientDeregisterWithServer, app_id_)
      + sizeof(CMsgClientDeregisterWithServer::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientDeregisterWithServer, eservertype_)>(
          reinterpret_cast<char*>(&eservertype_),
          reinterpret_cast<char*>(&other->eservertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDeregisterWithServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientClanState_NameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientClanState_NameInfo>()._has_bits_);
  static void set_has_clan_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientClanState.NameInfo)
}
CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clan_name()) {
    clan_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clan_name(), 
      GetArena());
  }
  sha_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_avatar()) {
    sha_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_avatar(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientClanState.NameInfo)
}

void CMsgClientClanState_NameInfo::SharedCtor() {
clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgClientClanState_NameInfo::~CMsgClientClanState_NameInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientClanState.NameInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientClanState_NameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientClanState_NameInfo::ArenaDtor(void* object) {
  CMsgClientClanState_NameInfo* _this = reinterpret_cast< CMsgClientClanState_NameInfo* >(object);
  (void)_this;
}
void CMsgClientClanState_NameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientClanState_NameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientClanState_NameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientClanState.NameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clan_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_avatar_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientClanState_NameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string clan_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clan_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientClanState.NameInfo.clan_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientClanState_NameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientClanState.NameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clan_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clan_name().data(), static_cast<int>(this->_internal_clan_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientClanState.NameInfo.clan_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clan_name(), target);
  }

  // optional bytes sha_avatar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_avatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientClanState.NameInfo)
  return target;
}

size_t CMsgClientClanState_NameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientClanState.NameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string clan_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clan_name());
    }

    // optional bytes sha_avatar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_avatar());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState_NameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientClanState.NameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_NameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientClanState_NameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientClanState.NameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientClanState.NameInfo)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_NameInfo::MergeFrom(const CMsgClientClanState_NameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientClanState.NameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clan_name(from._internal_clan_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_avatar(from._internal_sha_avatar());
    }
  }
}

void CMsgClientClanState_NameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientClanState.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_NameInfo::CopyFrom(const CMsgClientClanState_NameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientClanState.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_NameInfo::IsInitialized() const {
  return true;
}

void CMsgClientClanState_NameInfo::InternalSwap(CMsgClientClanState_NameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clan_name_.Swap(&other->clan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha_avatar_.Swap(&other->sha_avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientClanState_NameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientClanState_UserCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientClanState_UserCounts>()._has_bits_);
  static void set_has_members(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chatting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_game(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chat_room_members(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientClanState.UserCounts)
}
CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&members_, &from.members_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_room_members_) -
    reinterpret_cast<char*>(&members_)) + sizeof(chat_room_members_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientClanState.UserCounts)
}

void CMsgClientClanState_UserCounts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&members_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_room_members_) -
    reinterpret_cast<char*>(&members_)) + sizeof(chat_room_members_));
}

CMsgClientClanState_UserCounts::~CMsgClientClanState_UserCounts() {
  // @@protoc_insertion_point(destructor:CMsgClientClanState.UserCounts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientClanState_UserCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientClanState_UserCounts::ArenaDtor(void* object) {
  CMsgClientClanState_UserCounts* _this = reinterpret_cast< CMsgClientClanState_UserCounts* >(object);
  (void)_this;
}
void CMsgClientClanState_UserCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientClanState_UserCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientClanState_UserCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientClanState.UserCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_room_members_) -
        reinterpret_cast<char*>(&members_)) + sizeof(chat_room_members_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientClanState_UserCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_members(&has_bits);
          members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chatting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chatting(&has_bits);
          chatting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_game = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_in_game(&has_bits);
          in_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chat_room_members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chat_room_members(&has_bits);
          chat_room_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientClanState_UserCounts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientClanState.UserCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 members = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_members(), target);
  }

  // optional uint32 online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_online(), target);
  }

  // optional uint32 chatting = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chatting(), target);
  }

  // optional uint32 in_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_in_game(), target);
  }

  // optional uint32 chat_room_members = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chat_room_members(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientClanState.UserCounts)
  return target;
}

size_t CMsgClientClanState_UserCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientClanState.UserCounts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 members = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_members());
    }

    // optional uint32 online = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_online());
    }

    // optional uint32 chatting = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chatting());
    }

    // optional uint32 in_game = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_game());
    }

    // optional uint32 chat_room_members = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_room_members());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState_UserCounts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientClanState.UserCounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_UserCounts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientClanState_UserCounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientClanState.UserCounts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientClanState.UserCounts)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_UserCounts::MergeFrom(const CMsgClientClanState_UserCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientClanState.UserCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      members_ = from.members_;
    }
    if (cached_has_bits & 0x00000002u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000004u) {
      chatting_ = from.chatting_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_game_ = from.in_game_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_room_members_ = from.chat_room_members_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState_UserCounts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientClanState.UserCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_UserCounts::CopyFrom(const CMsgClientClanState_UserCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientClanState.UserCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_UserCounts::IsInitialized() const {
  return true;
}

void CMsgClientClanState_UserCounts::InternalSwap(CMsgClientClanState_UserCounts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientClanState_UserCounts, chat_room_members_)
      + sizeof(CMsgClientClanState_UserCounts::chat_room_members_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientClanState_UserCounts, members_)>(
          reinterpret_cast<char*>(&members_),
          reinterpret_cast<char*>(&other->members_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientClanState_UserCounts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientClanState_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientClanState_Event>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_just_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientClanState_Event::CMsgClientClanState_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientClanState.Event)
}
CMsgClientClanState_Event::CMsgClientClanState_Event(const CMsgClientClanState_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headline()) {
    headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headline(), 
      GetArena());
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientClanState.Event)
}

void CMsgClientClanState_Event::SharedCtor() {
headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(game_id_));
}

CMsgClientClanState_Event::~CMsgClientClanState_Event() {
  // @@protoc_insertion_point(destructor:CMsgClientClanState.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientClanState_Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientClanState_Event::ArenaDtor(void* object) {
  CMsgClientClanState_Event* _this = reinterpret_cast< CMsgClientClanState_Event* >(object);
  (void)_this;
}
void CMsgClientClanState_Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientClanState_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientClanState_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientClanState.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    headline_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientClanState_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_time(&has_bits);
          event_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string headline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientClanState.Event.headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool just_posted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_just_posted(&has_bits);
          just_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientClanState_Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientClanState.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gid(), target);
  }

  // optional uint32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_time(), target);
  }

  // optional string headline = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headline().data(), static_cast<int>(this->_internal_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientClanState.Event.headline");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headline(), target);
  }

  // optional fixed64 game_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_game_id(), target);
  }

  // optional bool just_posted = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_just_posted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientClanState.Event)
  return target;
}

size_t CMsgClientClanState_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientClanState.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string headline = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headline());
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 event_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_time());
    }

    // optional bool just_posted = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional fixed64 game_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState_Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientClanState.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState_Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientClanState_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientClanState.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientClanState.Event)
    MergeFrom(*source);
  }
}

void CMsgClientClanState_Event::MergeFrom(const CMsgClientClanState_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientClanState.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_headline(from._internal_headline());
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      just_posted_ = from.just_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState_Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientClanState.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_Event::CopyFrom(const CMsgClientClanState_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientClanState.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_Event::IsInitialized() const {
  return true;
}

void CMsgClientClanState_Event::InternalSwap(CMsgClientClanState_Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headline_.Swap(&other->headline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientClanState_Event, game_id_)
      + sizeof(CMsgClientClanState_Event::game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientClanState_Event, gid_)>(
          reinterpret_cast<char*>(&gid_),
          reinterpret_cast<char*>(&other->gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientClanState_Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientClanState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientClanState>()._has_bits_);
  static void set_has_steamid_clan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clan_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgClientClanState_NameInfo& name_info(const CMsgClientClanState* msg);
  static void set_has_name_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgClientClanState_UserCounts& user_counts(const CMsgClientClanState* msg);
  static void set_has_user_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_room_private(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgClientClanState_NameInfo&
CMsgClientClanState::_Internal::name_info(const CMsgClientClanState* msg) {
  return *msg->name_info_;
}
const ::CMsgClientClanState_UserCounts&
CMsgClientClanState::_Internal::user_counts(const CMsgClientClanState* msg) {
  return *msg->user_counts_;
}
CMsgClientClanState::CMsgClientClanState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena),
  announcements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientClanState)
}
CMsgClientClanState::CMsgClientClanState(const CMsgClientClanState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      events_(from.events_),
      announcements_(from.announcements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name_info()) {
    name_info_ = new ::CMsgClientClanState_NameInfo(*from.name_info_);
  } else {
    name_info_ = nullptr;
  }
  if (from._internal_has_user_counts()) {
    user_counts_ = new ::CMsgClientClanState_UserCounts(*from.user_counts_);
  } else {
    user_counts_ = nullptr;
  }
  ::memcpy(&steamid_clan_, &from.steamid_clan_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_room_private_) -
    reinterpret_cast<char*>(&steamid_clan_)) + sizeof(chat_room_private_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientClanState)
}

void CMsgClientClanState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_room_private_) -
    reinterpret_cast<char*>(&name_info_)) + sizeof(chat_room_private_));
}

CMsgClientClanState::~CMsgClientClanState() {
  // @@protoc_insertion_point(destructor:CMsgClientClanState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientClanState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete name_info_;
  if (this != internal_default_instance()) delete user_counts_;
}

void CMsgClientClanState::ArenaDtor(void* object) {
  CMsgClientClanState* _this = reinterpret_cast< CMsgClientClanState* >(object);
  (void)_this;
}
void CMsgClientClanState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientClanState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientClanState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientClanState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  announcements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(name_info_ != nullptr);
      name_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_counts_ != nullptr);
      user_counts_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&steamid_clan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_room_private_) -
        reinterpret_cast<char*>(&steamid_clan_)) + sizeof(chat_room_private_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientClanState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_clan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid_clan(&has_bits);
          steamid_clan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 clan_account_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clan_account_flags(&has_bits);
          clan_account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientClanState.NameInfo name_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientClanState.UserCounts user_counts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientClanState.Event events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientClanState.Event announcements = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_announcements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool chat_room_private = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_chat_room_private(&has_bits);
          chat_room_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientClanState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientClanState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_clan = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_clan(), target);
  }

  // optional uint32 clan_account_flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_clan_account_flags(), target);
  }

  // optional .CMsgClientClanState.NameInfo name_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::name_info(this), target, stream);
  }

  // optional .CMsgClientClanState.UserCounts user_counts = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::user_counts(this), target, stream);
  }

  // repeated .CMsgClientClanState.Event events = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_events(i), target, stream);
  }

  // repeated .CMsgClientClanState.Event announcements = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_announcements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_announcements(i), target, stream);
  }

  // optional bool chat_room_private = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_chat_room_private(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientClanState)
  return target;
}

size_t CMsgClientClanState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientClanState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientClanState.Event events = 6;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientClanState.Event announcements = 7;
  total_size += 1UL * this->_internal_announcements_size();
  for (const auto& msg : this->announcements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgClientClanState.NameInfo name_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_info_);
    }

    // optional .CMsgClientClanState.UserCounts user_counts = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_counts_);
    }

    // optional fixed64 steamid_clan = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 clan_account_flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clan_account_flags());
    }

    // optional bool chat_room_private = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientClanState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientClanState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientClanState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientClanState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientClanState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientClanState)
    MergeFrom(*source);
  }
}

void CMsgClientClanState::MergeFrom(const CMsgClientClanState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientClanState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  announcements_.MergeFrom(from.announcements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_name_info()->::CMsgClientClanState_NameInfo::MergeFrom(from._internal_name_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_user_counts()->::CMsgClientClanState_UserCounts::MergeFrom(from._internal_user_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_clan_ = from.steamid_clan_;
    }
    if (cached_has_bits & 0x00000008u) {
      clan_account_flags_ = from.clan_account_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_room_private_ = from.chat_room_private_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientClanState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientClanState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState::CopyFrom(const CMsgClientClanState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientClanState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState::IsInitialized() const {
  return true;
}

void CMsgClientClanState::InternalSwap(CMsgClientClanState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  events_.InternalSwap(&other->events_);
  announcements_.InternalSwap(&other->announcements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientClanState, chat_room_private_)
      + sizeof(CMsgClientClanState::chat_room_private_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientClanState, name_info_)>(
          reinterpret_cast<char*>(&name_info_),
          reinterpret_cast<char*>(&other->name_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientClanState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientRegisterAuthTicketWithCM* Arena::CreateMaybeMessage< ::CMsgClientRegisterAuthTicketWithCM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRegisterAuthTicketWithCM >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientTicketAuthComplete* Arena::CreateMaybeMessage< ::CMsgClientTicketAuthComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientTicketAuthComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCMList* Arena::CreateMaybeMessage< ::CMsgClientCMList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCMList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientP2PConnectionInfo* Arena::CreateMaybeMessage< ::CMsgClientP2PConnectionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientP2PConnectionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientP2PConnectionFailInfo* Arena::CreateMaybeMessage< ::CMsgClientP2PConnectionFailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientP2PConnectionFailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNetworkingCertRequest* Arena::CreateMaybeMessage< ::CMsgClientNetworkingCertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNetworkingCertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNetworkingCertReply* Arena::CreateMaybeMessage< ::CMsgClientNetworkingCertReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNetworkingCertReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNetworkingMobileCertRequest* Arena::CreateMaybeMessage< ::CMsgClientNetworkingMobileCertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNetworkingMobileCertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNetworkingMobileCertReply* Arena::CreateMaybeMessage< ::CMsgClientNetworkingMobileCertReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNetworkingMobileCertReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetAppOwnershipTicket* Arena::CreateMaybeMessage< ::CMsgClientGetAppOwnershipTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetAppOwnershipTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetAppOwnershipTicketResponse* Arena::CreateMaybeMessage< ::CMsgClientGetAppOwnershipTicketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetAppOwnershipTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSessionToken* Arena::CreateMaybeMessage< ::CMsgClientSessionToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSessionToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGameConnectTokens* Arena::CreateMaybeMessage< ::CMsgClientGameConnectTokens >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGameConnectTokens >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGamesPlayed_ProcessInfo* Arena::CreateMaybeMessage< ::CMsgClientGamesPlayed_ProcessInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGamesPlayed_ProcessInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGamesPlayed_GamePlayed* Arena::CreateMaybeMessage< ::CMsgClientGamesPlayed_GamePlayed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGamesPlayed_GamePlayed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGamesPlayed* Arena::CreateMaybeMessage< ::CMsgClientGamesPlayed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGamesPlayed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSApprove* Arena::CreateMaybeMessage< ::CMsgGSApprove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSApprove >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSDeny* Arena::CreateMaybeMessage< ::CMsgGSDeny >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSDeny >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSKick* Arena::CreateMaybeMessage< ::CMsgGSKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSKick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAuthList* Arena::CreateMaybeMessage< ::CMsgClientAuthList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAuthList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAuthListAck* Arena::CreateMaybeMessage< ::CMsgClientAuthListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAuthListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLicenseList_License* Arena::CreateMaybeMessage< ::CMsgClientLicenseList_License >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLicenseList_License >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLicenseList* Arena::CreateMaybeMessage< ::CMsgClientLicenseList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLicenseList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientIsLimitedAccount* Arena::CreateMaybeMessage< ::CMsgClientIsLimitedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientIsLimitedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestedClientStats_StatsToSend* Arena::CreateMaybeMessage< ::CMsgClientRequestedClientStats_StatsToSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestedClientStats_StatsToSend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestedClientStats* Arena::CreateMaybeMessage< ::CMsgClientRequestedClientStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestedClientStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStat2_StatDetail* Arena::CreateMaybeMessage< ::CMsgClientStat2_StatDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStat2_StatDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStat2* Arena::CreateMaybeMessage< ::CMsgClientStat2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStat2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientInviteToGame* Arena::CreateMaybeMessage< ::CMsgClientInviteToGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientInviteToGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChatInvite* Arena::CreateMaybeMessage< ::CMsgClientChatInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChatInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientConnectionStats_Stats_Logon* Arena::CreateMaybeMessage< ::CMsgClientConnectionStats_Stats_Logon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientConnectionStats_Stats_Logon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientConnectionStats_Stats_UDP* Arena::CreateMaybeMessage< ::CMsgClientConnectionStats_Stats_UDP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientConnectionStats_Stats_UDP >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientConnectionStats_Stats_VConn* Arena::CreateMaybeMessage< ::CMsgClientConnectionStats_Stats_VConn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientConnectionStats_Stats_VConn >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientConnectionStats* Arena::CreateMaybeMessage< ::CMsgClientConnectionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientConnectionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServersAvailable_Server_Types_Available* Arena::CreateMaybeMessage< ::CMsgClientServersAvailable_Server_Types_Available >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServersAvailable_Server_Types_Available >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServersAvailable* Arena::CreateMaybeMessage< ::CMsgClientServersAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServersAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientReportOverlayDetourFailure* Arena::CreateMaybeMessage< ::CMsgClientReportOverlayDetourFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientReportOverlayDetourFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestEncryptedAppTicket* Arena::CreateMaybeMessage< ::CMsgClientRequestEncryptedAppTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestEncryptedAppTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestEncryptedAppTicketResponse* Arena::CreateMaybeMessage< ::CMsgClientRequestEncryptedAppTicketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestEncryptedAppTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientWalletInfoUpdate* Arena::CreateMaybeMessage< ::CMsgClientWalletInfoUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientWalletInfoUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetClanOfficers* Arena::CreateMaybeMessage< ::CMsgClientAMGetClanOfficers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetClanOfficers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetClanOfficersResponse* Arena::CreateMaybeMessage< ::CMsgClientAMGetClanOfficersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetClanOfficersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetPersonaNameHistory_IdInstance* Arena::CreateMaybeMessage< ::CMsgClientAMGetPersonaNameHistory_IdInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetPersonaNameHistory_IdInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetPersonaNameHistory* Arena::CreateMaybeMessage< ::CMsgClientAMGetPersonaNameHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetPersonaNameHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* Arena::CreateMaybeMessage< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* Arena::CreateMaybeMessage< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAMGetPersonaNameHistoryResponse* Arena::CreateMaybeMessage< ::CMsgClientAMGetPersonaNameHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAMGetPersonaNameHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDeregisterWithServer* Arena::CreateMaybeMessage< ::CMsgClientDeregisterWithServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDeregisterWithServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientClanState_NameInfo* Arena::CreateMaybeMessage< ::CMsgClientClanState_NameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientClanState_NameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientClanState_UserCounts* Arena::CreateMaybeMessage< ::CMsgClientClanState_UserCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientClanState_UserCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientClanState_Event* Arena::CreateMaybeMessage< ::CMsgClientClanState_Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientClanState_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientClanState* Arena::CreateMaybeMessage< ::CMsgClientClanState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientClanState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
