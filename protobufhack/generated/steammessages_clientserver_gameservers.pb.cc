// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_gameservers.proto

#include "steammessages_clientserver_gameservers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgGSServerType::CMsgGSServerType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdr_logon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_served_(0u)
  , flags_(0u)
  , deprecated_game_ip_address_(0u)
  , game_port_(0u)
  , game_query_port_(0u)
  , fake_ip_(0u)
  , game_port_local_(0u){}
struct CMsgGSServerTypeDefaultTypeInternal {
  constexpr CMsgGSServerTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSServerTypeDefaultTypeInternal() {}
  union {
    CMsgGSServerType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSServerTypeDefaultTypeInternal _CMsgGSServerType_default_instance_;
constexpr CMsgGSStatusReply::CMsgGSStatusReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_secure_(false){}
struct CMsgGSStatusReplyDefaultTypeInternal {
  constexpr CMsgGSStatusReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSStatusReplyDefaultTypeInternal() {}
  union {
    CMsgGSStatusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSStatusReplyDefaultTypeInternal _CMsgGSStatusReply_default_instance_;
constexpr CMsgGSPlayerList_Player::CMsgGSPlayerList_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_ip_(nullptr)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , deprecated_public_ip_(0u){}
struct CMsgGSPlayerList_PlayerDefaultTypeInternal {
  constexpr CMsgGSPlayerList_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSPlayerList_PlayerDefaultTypeInternal() {}
  union {
    CMsgGSPlayerList_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSPlayerList_PlayerDefaultTypeInternal _CMsgGSPlayerList_Player_default_instance_;
constexpr CMsgGSPlayerList::CMsgGSPlayerList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_(){}
struct CMsgGSPlayerListDefaultTypeInternal {
  constexpr CMsgGSPlayerListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSPlayerListDefaultTypeInternal() {}
  union {
    CMsgGSPlayerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSPlayerListDefaultTypeInternal _CMsgGSPlayerList_default_instance_;
constexpr CMsgGSUserPlaying::CMsgGSUserPlaying(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_ip_(nullptr)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , deprecated_public_ip_(0u){}
struct CMsgGSUserPlayingDefaultTypeInternal {
  constexpr CMsgGSUserPlayingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSUserPlayingDefaultTypeInternal() {}
  union {
    CMsgGSUserPlaying _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSUserPlayingDefaultTypeInternal _CMsgGSUserPlaying_default_instance_;
constexpr CMsgGSDisconnectNotice::CMsgGSDisconnectNotice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGSDisconnectNoticeDefaultTypeInternal {
  constexpr CMsgGSDisconnectNoticeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSDisconnectNoticeDefaultTypeInternal() {}
  union {
    CMsgGSDisconnectNotice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSDisconnectNoticeDefaultTypeInternal _CMsgGSDisconnectNotice_default_instance_;
constexpr CMsgGameServerData_Player::CMsgGameServerData_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGameServerData_PlayerDefaultTypeInternal {
  constexpr CMsgGameServerData_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerData_PlayerDefaultTypeInternal() {}
  union {
    CMsgGameServerData_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerData_PlayerDefaultTypeInternal _CMsgGameServerData_Player_default_instance_;
constexpr CMsgGameServerData::CMsgGameServerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , gamedir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spectator_server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdr_ping_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_port_(0u)
  , game_port_(0u)
  , spectator_port_(0u)
  , app_id_(0u)
  , max_players_(0u)
  , bot_count_(0u)
  , password_(false)
  , secure_(false)
  , dedicated_(false)
  , revision_(0u)
  , fake_ip_(0u){}
struct CMsgGameServerDataDefaultTypeInternal {
  constexpr CMsgGameServerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerDataDefaultTypeInternal() {}
  union {
    CMsgGameServerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerDataDefaultTypeInternal _CMsgGameServerData_default_instance_;
constexpr CMsgGameServerRemove::CMsgGameServerRemove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legacy_steam_id_gs_(PROTOBUF_ULONGLONG(0))
  , legacy_query_port_(0u){}
struct CMsgGameServerRemoveDefaultTypeInternal {
  constexpr CMsgGameServerRemoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerRemoveDefaultTypeInternal() {}
  union {
    CMsgGameServerRemove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerRemoveDefaultTypeInternal _CMsgGameServerRemove_default_instance_;
constexpr CMsgClientGMSServerQuery::CMsgClientGMSServerQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , geo_location_ip_(0u)
  , region_code_(0u)
  , max_servers_(0u){}
struct CMsgClientGMSServerQueryDefaultTypeInternal {
  constexpr CMsgClientGMSServerQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGMSServerQueryDefaultTypeInternal() {}
  union {
    CMsgClientGMSServerQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGMSServerQueryDefaultTypeInternal _CMsgClientGMSServerQuery_default_instance_;
constexpr CMsgGMSClientServerQueryResponse_Server::CMsgGMSClientServerQueryResponse_Server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gamedir_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_description_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gametype_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spectator_name_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdr_ping_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_ip_(nullptr)
  , deprecated_server_ip_(0u)
  , query_port_(0u)
  , auth_players_(0u)
  , revision_(0u)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , players_(0u)
  , game_port_(0u)
  , sdr_popid_(0u)
  , flags_(0u)
  , app_id_(0u)
  , max_players_(0u)
  , bots_(0u)
  , spectator_port_(0u)
  , gamedir_strindex_(0u)
  , map_strindex_(0u)
  , name_strindex_(0u)
  , game_description_strindex_(0u)
  , version_strindex_(0u)
  , gametype_strindex_(0u)
  , spectator_name_strindex_(0u){}
struct CMsgGMSClientServerQueryResponse_ServerDefaultTypeInternal {
  constexpr CMsgGMSClientServerQueryResponse_ServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGMSClientServerQueryResponse_ServerDefaultTypeInternal() {}
  union {
    CMsgGMSClientServerQueryResponse_Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGMSClientServerQueryResponse_ServerDefaultTypeInternal _CMsgGMSClientServerQueryResponse_Server_default_instance_;
constexpr CMsgGMSClientServerQueryResponse::CMsgGMSClientServerQueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_()
  , server_strings_()
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_server_data_(nullptr){}
struct CMsgGMSClientServerQueryResponseDefaultTypeInternal {
  constexpr CMsgGMSClientServerQueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGMSClientServerQueryResponseDefaultTypeInternal() {}
  union {
    CMsgGMSClientServerQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGMSClientServerQueryResponseDefaultTypeInternal _CMsgGMSClientServerQueryResponse_default_instance_;
constexpr CMsgGameServerOutOfDate::CMsgGameServerOutOfDate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_gs_(PROTOBUF_ULONGLONG(0))
  , reject_(false){}
struct CMsgGameServerOutOfDateDefaultTypeInternal {
  constexpr CMsgGameServerOutOfDateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerOutOfDateDefaultTypeInternal() {}
  union {
    CMsgGameServerOutOfDate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerOutOfDateDefaultTypeInternal _CMsgGameServerOutOfDate_default_instance_;
constexpr CMsgGSAssociateWithClan::CMsgGSAssociateWithClan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_clan_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGSAssociateWithClanDefaultTypeInternal {
  constexpr CMsgGSAssociateWithClanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSAssociateWithClanDefaultTypeInternal() {}
  union {
    CMsgGSAssociateWithClan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSAssociateWithClanDefaultTypeInternal _CMsgGSAssociateWithClan_default_instance_;
constexpr CMsgGSAssociateWithClanResponse::CMsgGSAssociateWithClanResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_clan_(PROTOBUF_ULONGLONG(0))
  , eresult_(2u){}
struct CMsgGSAssociateWithClanResponseDefaultTypeInternal {
  constexpr CMsgGSAssociateWithClanResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSAssociateWithClanResponseDefaultTypeInternal() {}
  union {
    CMsgGSAssociateWithClanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSAssociateWithClanResponseDefaultTypeInternal _CMsgGSAssociateWithClanResponse_default_instance_;
constexpr CMsgGSComputeNewPlayerCompatibility::CMsgGSComputeNewPlayerCompatibility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_candidate_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGSComputeNewPlayerCompatibilityDefaultTypeInternal {
  constexpr CMsgGSComputeNewPlayerCompatibilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSComputeNewPlayerCompatibilityDefaultTypeInternal() {}
  union {
    CMsgGSComputeNewPlayerCompatibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSComputeNewPlayerCompatibilityDefaultTypeInternal _CMsgGSComputeNewPlayerCompatibility_default_instance_;
constexpr CMsgGSComputeNewPlayerCompatibilityResponse::CMsgGSComputeNewPlayerCompatibilityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_candidate_(PROTOBUF_ULONGLONG(0))
  , is_clan_member_(false)
  , ct_dont_like_you_(0)
  , ct_you_dont_like_(0)
  , ct_clanmembers_dont_like_you_(0)
  , eresult_(2u){}
struct CMsgGSComputeNewPlayerCompatibilityResponseDefaultTypeInternal {
  constexpr CMsgGSComputeNewPlayerCompatibilityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGSComputeNewPlayerCompatibilityResponseDefaultTypeInternal() {}
  union {
    CMsgGSComputeNewPlayerCompatibilityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGSComputeNewPlayerCompatibilityResponseDefaultTypeInternal _CMsgGSComputeNewPlayerCompatibilityResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fgameservers_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fclientserver_5fgameservers_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fgameservers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_5fgameservers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, app_id_served_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, deprecated_game_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, game_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, game_dir_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, game_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, game_query_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, game_port_local_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, sdr_logon_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSServerType, fake_ip_),
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  9,
  2,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGSStatusReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSStatusReply, is_secure_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList_Player, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList_Player, deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList_Player, token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList_Player, public_ip_),
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSPlayerList, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSUserPlaying, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSUserPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSUserPlaying, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSUserPlaying, deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSUserPlaying, token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSUserPlaying, public_ip_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGSDisconnectNotice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSDisconnectNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSDisconnectNotice, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData_Player, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, query_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, game_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, spectator_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, server_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, game_description_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, spectator_server_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, fake_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, sdr_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, gamedir_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, product_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, max_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, bot_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, password_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, secure_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, dedicated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, os_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerData, map_),
  21,
  12,
  13,
  14,
  8,
  10,
  9,
  22,
  11,
  15,
  0,
  1,
  2,
  3,
  ~0u,
  16,
  17,
  18,
  19,
  20,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRemove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRemove, legacy_steam_id_gs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerRemove, legacy_query_port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, geo_location_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, region_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, filter_text_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGMSServerQuery, max_servers_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, deprecated_server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, query_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, auth_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, game_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, sdr_popid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, sdr_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, max_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, bots_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, spectator_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, gamedir_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, gamedir_strindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, map_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, map_strindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, name_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, name_strindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, game_description_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, game_description_strindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, version_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, version_strindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, gametype_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, gametype_strindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, spectator_name_str_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse_Server, spectator_name_strindex_),
  9,
  10,
  11,
  8,
  13,
  12,
  14,
  15,
  16,
  7,
  17,
  18,
  19,
  20,
  21,
  0,
  22,
  1,
  23,
  2,
  24,
  3,
  25,
  4,
  26,
  5,
  27,
  6,
  28,
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse, servers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse, error_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse, default_server_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGMSClientServerQueryResponse, server_strings_),
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerOutOfDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerOutOfDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerOutOfDate, steam_id_gs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerOutOfDate, reject_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerOutOfDate, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClan, steam_id_clan_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClanResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClanResponse, steam_id_clan_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSAssociateWithClanResponse, eresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibility, steam_id_candidate_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, steam_id_candidate_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, is_clan_member_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, ct_dont_like_you_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, ct_you_dont_like_),
  PROTOBUF_FIELD_OFFSET(::CMsgGSComputeNewPlayerCompatibilityResponse, ct_clanmembers_dont_like_you_),
  0,
  5,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::CMsgGSServerType)},
  { 25, 31, sizeof(::CMsgGSStatusReply)},
  { 32, 41, sizeof(::CMsgGSPlayerList_Player)},
  { 45, -1, sizeof(::CMsgGSPlayerList)},
  { 51, 60, sizeof(::CMsgGSUserPlaying)},
  { 64, 70, sizeof(::CMsgGSDisconnectNotice)},
  { 71, 77, sizeof(::CMsgGameServerData_Player)},
  { 78, 107, sizeof(::CMsgGameServerData)},
  { 131, 138, sizeof(::CMsgGameServerRemove)},
  { 140, 150, sizeof(::CMsgClientGMSServerQuery)},
  { 155, 189, sizeof(::CMsgGMSClientServerQueryResponse_Server)},
  { 218, 227, sizeof(::CMsgGMSClientServerQueryResponse)},
  { 231, 239, sizeof(::CMsgGameServerOutOfDate)},
  { 242, 248, sizeof(::CMsgGSAssociateWithClan)},
  { 249, 256, sizeof(::CMsgGSAssociateWithClanResponse)},
  { 258, 264, sizeof(::CMsgGSComputeNewPlayerCompatibility)},
  { 265, 276, sizeof(::CMsgGSComputeNewPlayerCompatibilityResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSServerType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSStatusReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSPlayerList_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSPlayerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSUserPlaying_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSDisconnectNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerData_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGMSServerQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGMSClientServerQueryResponse_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGMSClientServerQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerOutOfDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSAssociateWithClan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSAssociateWithClanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSComputeNewPlayerCompatibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGSComputeNewPlayerCompatibilityResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fgameservers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,steammessages_clientserver_gameservers"
  ".proto\032 google/protobuf/descriptor.proto"
  "\032\030steammessages_base.proto\"\355\001\n\020CMsgGSSer"
  "verType\022\025\n\rapp_id_served\030\001 \001(\r\022\r\n\005flags\030"
  "\002 \001(\r\022\"\n\032deprecated_game_ip_address\030\003 \001("
  "\r\022\021\n\tgame_port\030\004 \001(\r\022\020\n\010game_dir\030\005 \001(\t\022\024"
  "\n\014game_version\030\006 \001(\t\022\027\n\017game_query_port\030"
  "\007 \001(\r\022\027\n\017game_port_local\030\n \001(\r\022\021\n\tsdr_lo"
  "gon\030\010 \001(\014\022\017\n\007fake_ip\030\t \001(\007\"&\n\021CMsgGSStat"
  "usReply\022\021\n\tis_secure\030\001 \001(\010\"\251\001\n\020CMsgGSPla"
  "yerList\022)\n\007players\030\001 \003(\0132\030.CMsgGSPlayerL"
  "ist.Player\032j\n\006Player\022\020\n\010steam_id\030\001 \001(\004\022\034"
  "\n\024deprecated_public_ip\030\002 \001(\r\022\r\n\005token\030\003 "
  "\001(\014\022!\n\tpublic_ip\030\004 \001(\0132\016.CMsgIPAddress\"u"
  "\n\021CMsgGSUserPlaying\022\020\n\010steam_id\030\001 \001(\006\022\034\n"
  "\024deprecated_public_ip\030\002 \001(\r\022\r\n\005token\030\003 \001"
  "(\014\022!\n\tpublic_ip\030\004 \001(\0132\016.CMsgIPAddress\"*\n"
  "\026CMsgGSDisconnectNotice\022\020\n\010steam_id\030\001 \001("
  "\006\"\227\004\n\022CMsgGameServerData\022\020\n\010revision\030\030 \001"
  "(\r\022\022\n\nquery_port\030\003 \001(\r\022\021\n\tgame_port\030\004 \001("
  "\r\022\026\n\016spectator_port\030\005 \001(\r\022\023\n\013server_name"
  "\030\026 \001(\t\022\030\n\020game_description\030\035 \001(\t\022\035\n\025spec"
  "tator_server_name\030\033 \001(\t\022\017\n\007fake_ip\030\034 \001(\007"
  "\022\031\n\021sdr_ping_location\030\036 \001(\t\022\016\n\006app_id\030\006 "
  "\001(\r\022\017\n\007gamedir\030\007 \001(\t\022\017\n\007version\030\010 \001(\t\022\017\n"
  "\007product\030\t \001(\t\022\016\n\006region\030\n \001(\t\022+\n\007player"
  "s\030\013 \003(\0132\032.CMsgGameServerData.Player\022\023\n\013m"
  "ax_players\030\014 \001(\r\022\021\n\tbot_count\030\r \001(\r\022\020\n\010p"
  "assword\030\016 \001(\010\022\016\n\006secure\030\017 \001(\010\022\021\n\tdedicat"
  "ed\030\020 \001(\010\022\n\n\002os\030\021 \001(\t\022\021\n\tgame_data\030\022 \001(\t\022"
  "\021\n\tgame_type\030\024 \001(\t\022\013\n\003map\030\025 \001(\t\032\032\n\006Playe"
  "r\022\020\n\010steam_id\030\001 \001(\006\"M\n\024CMsgGameServerRem"
  "ove\022\032\n\022legacy_steam_id_gs\030\001 \001(\006\022\031\n\021legac"
  "y_query_port\030\003 \001(\r\"\202\001\n\030CMsgClientGMSServ"
  "erQuery\022\016\n\006app_id\030\001 \001(\r\022\027\n\017geo_location_"
  "ip\030\002 \001(\r\022\023\n\013region_code\030\003 \001(\r\022\023\n\013filter_"
  "text\030\004 \001(\t\022\023\n\013max_servers\030\005 \001(\r\"\241\007\n CMsg"
  "GMSClientServerQueryResponse\0229\n\007servers\030"
  "\001 \003(\0132(.CMsgGMSClientServerQueryResponse"
  ".Server\022\r\n\005error\030\002 \001(\t\022E\n\023default_server"
  "_data\030\003 \001(\0132(.CMsgGMSClientServerQueryRe"
  "sponse.Server\022\026\n\016server_strings\030\004 \003(\t\032\240\005"
  "\n\006Server\022\034\n\024deprecated_server_ip\030\001 \001(\r\022\022"
  "\n\nquery_port\030\002 \001(\r\022\024\n\014auth_players\030\003 \001(\r"
  "\022!\n\tserver_ip\030\004 \001(\0132\016.CMsgIPAddress\022\020\n\010s"
  "team_id\030\006 \001(\006\022\020\n\010revision\030\007 \001(\r\022\017\n\007playe"
  "rs\030\010 \001(\r\022\021\n\tgame_port\030\t \001(\r\022\021\n\tsdr_popid"
  "\030\n \001(\007\022\031\n\021sdr_ping_location\030  \001(\t\022\r\n\005fla"
  "gs\030\013 \001(\r\022\016\n\006app_id\030\014 \001(\r\022\023\n\013max_players\030"
  "\r \001(\r\022\014\n\004bots\030\016 \001(\r\022\026\n\016spectator_port\030\017 "
  "\001(\r\022\023\n\013gamedir_str\030\020 \001(\t\022\030\n\020gamedir_stri"
  "ndex\030\021 \001(\r\022\017\n\007map_str\030\022 \001(\t\022\024\n\014map_strin"
  "dex\030\023 \001(\r\022\020\n\010name_str\030\024 \001(\t\022\025\n\rname_stri"
  "ndex\030\025 \001(\r\022\034\n\024game_description_str\030\026 \001(\t"
  "\022!\n\031game_description_strindex\030\027 \001(\r\022\023\n\013v"
  "ersion_str\030\030 \001(\t\022\030\n\020version_strindex\030\031 \001"
  "(\r\022\024\n\014gametype_str\030\032 \001(\t\022\031\n\021gametype_str"
  "index\030\033 \001(\r\022\032\n\022spectator_name_str\030\036 \001(\t\022"
  "\037\n\027spectator_name_strindex\030\037 \001(\r\"1\n\006EFla"
  "gs\022\025\n\021EFlag_HasPassword\020\001\022\020\n\014EFlag_Secur"
  "e\020\002\"O\n\027CMsgGameServerOutOfDate\022\023\n\013steam_"
  "id_gs\030\001 \001(\006\022\016\n\006reject\030\002 \001(\010\022\017\n\007message\030\003"
  " \001(\t\"0\n\027CMsgGSAssociateWithClan\022\025\n\rsteam"
  "_id_clan\030\001 \001(\006\"L\n\037CMsgGSAssociateWithCla"
  "nResponse\022\025\n\rsteam_id_clan\030\001 \001(\006\022\022\n\007eres"
  "ult\030\002 \001(\r:\0012\"A\n#CMsgGSComputeNewPlayerCo"
  "mpatibility\022\032\n\022steam_id_candidate\030\001 \001(\006\""
  "\317\001\n+CMsgGSComputeNewPlayerCompatibilityR"
  "esponse\022\032\n\022steam_id_candidate\030\001 \001(\006\022\022\n\007e"
  "result\030\002 \001(\r:\0012\022\026\n\016is_clan_member\030\003 \001(\010\022"
  "\030\n\020ct_dont_like_you\030\004 \001(\005\022\030\n\020ct_you_dont"
  "_like\030\005 \001(\005\022$\n\034ct_clanmembers_dont_like_"
  "you\030\006 \001(\005B\037H\001\200\001\000\252\002\027OpenSteamworks.Protob"
  "uf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto = {
  false, false, 2922, descriptor_table_protodef_steammessages_5fclientserver_5fgameservers_2eproto, "steammessages_clientserver_gameservers.proto", 
  &descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto_once, descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto_deps, 2, 17,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fgameservers_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fgameservers_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fgameservers_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fgameservers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto);
  return descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fgameservers_2eproto(&descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGMSClientServerQueryResponse_EFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fgameservers_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientserver_5fgameservers_2eproto[0];
}
bool CMsgGMSClientServerQueryResponse_EFlags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGMSClientServerQueryResponse_EFlags CMsgGMSClientServerQueryResponse::EFlag_HasPassword;
constexpr CMsgGMSClientServerQueryResponse_EFlags CMsgGMSClientServerQueryResponse::EFlag_Secure;
constexpr CMsgGMSClientServerQueryResponse_EFlags CMsgGMSClientServerQueryResponse::EFlags_MIN;
constexpr CMsgGMSClientServerQueryResponse_EFlags CMsgGMSClientServerQueryResponse::EFlags_MAX;
constexpr int CMsgGMSClientServerQueryResponse::EFlags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CMsgGSServerType::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSServerType>()._has_bits_);
  static void set_has_app_id_served(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deprecated_game_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_query_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_port_local(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sdr_logon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fake_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgGSServerType::CMsgGSServerType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSServerType)
}
CMsgGSServerType::CMsgGSServerType(const CMsgGSServerType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_dir()) {
    game_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_dir(), 
      GetArena());
  }
  game_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_version()) {
    game_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_version(), 
      GetArena());
  }
  sdr_logon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdr_logon()) {
    sdr_logon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdr_logon(), 
      GetArena());
  }
  ::memcpy(&app_id_served_, &from.app_id_served_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_port_local_) -
    reinterpret_cast<char*>(&app_id_served_)) + sizeof(game_port_local_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSServerType)
}

void CMsgGSServerType::SharedCtor() {
game_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdr_logon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_served_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_port_local_) -
    reinterpret_cast<char*>(&app_id_served_)) + sizeof(game_port_local_));
}

CMsgGSServerType::~CMsgGSServerType() {
  // @@protoc_insertion_point(destructor:CMsgGSServerType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSServerType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdr_logon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGSServerType::ArenaDtor(void* object) {
  CMsgGSServerType* _this = reinterpret_cast< CMsgGSServerType* >(object);
  (void)_this;
}
void CMsgGSServerType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSServerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSServerType::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSServerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      game_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sdr_logon_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&app_id_served_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_query_port_) -
        reinterpret_cast<char*>(&app_id_served_)) + sizeof(game_query_port_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&fake_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_port_local_) -
        reinterpret_cast<char*>(&fake_ip_)) + sizeof(game_port_local_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSServerType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id_served = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id_served(&has_bits);
          app_id_served_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_game_ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deprecated_game_ip_address(&has_bits);
          deprecated_game_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_port(&has_bits);
          game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_game_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGSServerType.game_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_game_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGSServerType.game_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_query_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_game_query_port(&has_bits);
          game_query_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sdr_logon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sdr_logon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 fake_ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fake_ip(&has_bits);
          fake_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_port_local = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_game_port_local(&has_bits);
          game_port_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSServerType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSServerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id_served = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id_served(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional uint32 deprecated_game_ip_address = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deprecated_game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_port(), target);
  }

  // optional string game_dir = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_dir().data(), static_cast<int>(this->_internal_game_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGSServerType.game_dir");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_game_dir(), target);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_version().data(), static_cast<int>(this->_internal_game_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGSServerType.game_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_game_version(), target);
  }

  // optional uint32 game_query_port = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_query_port(), target);
  }

  // optional bytes sdr_logon = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_sdr_logon(), target);
  }

  // optional fixed32 fake_ip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fake_ip(), target);
  }

  // optional uint32 game_port_local = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_game_port_local(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSServerType)
  return target;
}

size_t CMsgGSServerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSServerType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string game_dir = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_dir());
    }

    // optional string game_version = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_version());
    }

    // optional bytes sdr_logon = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sdr_logon());
    }

    // optional uint32 app_id_served = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id_served());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 deprecated_game_ip_address = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_port());
    }

    // optional uint32 game_query_port = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_query_port());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed32 fake_ip = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 game_port_local = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_port_local());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSServerType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSServerType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSServerType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSServerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSServerType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSServerType)
    MergeFrom(*source);
  }
}

void CMsgGSServerType::MergeFrom(const CMsgGSServerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSServerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_dir(from._internal_game_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_version(from._internal_game_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sdr_logon(from._internal_sdr_logon());
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_served_ = from.app_id_served_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      deprecated_game_ip_address_ = from.deprecated_game_ip_address_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_query_port_ = from.game_query_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      fake_ip_ = from.fake_ip_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_port_local_ = from.game_port_local_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSServerType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSServerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSServerType::CopyFrom(const CMsgGSServerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSServerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSServerType::IsInitialized() const {
  return true;
}

void CMsgGSServerType::InternalSwap(CMsgGSServerType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_dir_.Swap(&other->game_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_version_.Swap(&other->game_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdr_logon_.Swap(&other->sdr_logon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSServerType, game_port_local_)
      + sizeof(CMsgGSServerType::game_port_local_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSServerType, app_id_served_)>(
          reinterpret_cast<char*>(&app_id_served_),
          reinterpret_cast<char*>(&other->app_id_served_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSServerType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSStatusReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSStatusReply>()._has_bits_);
  static void set_has_is_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGSStatusReply::CMsgGSStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSStatusReply)
}
CMsgGSStatusReply::CMsgGSStatusReply(const CMsgGSStatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_secure_ = from.is_secure_;
  // @@protoc_insertion_point(copy_constructor:CMsgGSStatusReply)
}

void CMsgGSStatusReply::SharedCtor() {
is_secure_ = false;
}

CMsgGSStatusReply::~CMsgGSStatusReply() {
  // @@protoc_insertion_point(destructor:CMsgGSStatusReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSStatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSStatusReply::ArenaDtor(void* object) {
  CMsgGSStatusReply* _this = reinterpret_cast< CMsgGSStatusReply* >(object);
  (void)_this;
}
void CMsgGSStatusReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSStatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSStatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_secure_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSStatusReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_secure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_secure(&has_bits);
          is_secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSStatusReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSStatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_secure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_secure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSStatusReply)
  return target;
}

size_t CMsgGSStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSStatusReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_secure = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSStatusReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSStatusReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSStatusReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSStatusReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSStatusReply)
    MergeFrom(*source);
  }
}

void CMsgGSStatusReply::MergeFrom(const CMsgGSStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_secure()) {
    _internal_set_is_secure(from._internal_is_secure());
  }
}

void CMsgGSStatusReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSStatusReply::CopyFrom(const CMsgGSStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSStatusReply::IsInitialized() const {
  return true;
}

void CMsgGSStatusReply::InternalSwap(CMsgGSStatusReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_secure_, other->is_secure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSStatusReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSPlayerList_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSPlayerList_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgGSPlayerList_Player* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgIPAddress&
CMsgGSPlayerList_Player::_Internal::public_ip(const CMsgGSPlayerList_Player* msg) {
  return *msg->public_ip_;
}
void CMsgGSPlayerList_Player::clear_public_ip() {
  if (public_ip_ != nullptr) public_ip_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgGSPlayerList_Player::CMsgGSPlayerList_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSPlayerList.Player)
}
CMsgGSPlayerList_Player::CMsgGSPlayerList_Player(const CMsgGSPlayerList_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::CMsgIPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(deprecated_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSPlayerList.Player)
}

void CMsgGSPlayerList_Player::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&public_ip_)) + sizeof(deprecated_public_ip_));
}

CMsgGSPlayerList_Player::~CMsgGSPlayerList_Player() {
  // @@protoc_insertion_point(destructor:CMsgGSPlayerList.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSPlayerList_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_ip_;
}

void CMsgGSPlayerList_Player::ArenaDtor(void* object) {
  CMsgGSPlayerList_Player* _this = reinterpret_cast< CMsgGSPlayerList_Player* >(object);
  (void)_this;
}
void CMsgGSPlayerList_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSPlayerList_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSPlayerList_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSPlayerList.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(public_ip_ != nullptr);
      public_ip_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_public_ip_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(deprecated_public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSPlayerList_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deprecated_public_ip(&has_bits);
          deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSPlayerList_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSPlayerList.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 deprecated_public_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deprecated_public_ip(), target);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token(), target);
  }

  // optional .CMsgIPAddress public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::public_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSPlayerList.Player)
  return target;
}

size_t CMsgGSPlayerList_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSPlayerList.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional .CMsgIPAddress public_ip = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_ip_);
    }

    // optional uint64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steam_id());
    }

    // optional uint32 deprecated_public_ip = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_public_ip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSPlayerList_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSPlayerList.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSPlayerList_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSPlayerList_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSPlayerList.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSPlayerList.Player)
    MergeFrom(*source);
  }
}

void CMsgGSPlayerList_Player::MergeFrom(const CMsgGSPlayerList_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSPlayerList.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_public_ip_ = from.deprecated_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSPlayerList_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSPlayerList.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSPlayerList_Player::CopyFrom(const CMsgGSPlayerList_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSPlayerList.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList_Player::IsInitialized() const {
  return true;
}

void CMsgGSPlayerList_Player::InternalSwap(CMsgGSPlayerList_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSPlayerList_Player, deprecated_public_ip_)
      + sizeof(CMsgGSPlayerList_Player::deprecated_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSPlayerList_Player, public_ip_)>(
          reinterpret_cast<char*>(&public_ip_),
          reinterpret_cast<char*>(&other->public_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSPlayerList_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSPlayerList::_Internal {
 public:
};

CMsgGSPlayerList::CMsgGSPlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSPlayerList)
}
CMsgGSPlayerList::CMsgGSPlayerList(const CMsgGSPlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGSPlayerList)
}

void CMsgGSPlayerList::SharedCtor() {
}

CMsgGSPlayerList::~CMsgGSPlayerList() {
  // @@protoc_insertion_point(destructor:CMsgGSPlayerList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSPlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSPlayerList::ArenaDtor(void* object) {
  CMsgGSPlayerList* _this = reinterpret_cast< CMsgGSPlayerList* >(object);
  (void)_this;
}
void CMsgGSPlayerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSPlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSPlayerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGSPlayerList.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSPlayerList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGSPlayerList.Player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSPlayerList)
  return target;
}

size_t CMsgGSPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSPlayerList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGSPlayerList.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSPlayerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSPlayerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSPlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSPlayerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSPlayerList)
    MergeFrom(*source);
  }
}

void CMsgGSPlayerList::MergeFrom(const CMsgGSPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void CMsgGSPlayerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSPlayerList::CopyFrom(const CMsgGSPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList::IsInitialized() const {
  return true;
}

void CMsgGSPlayerList::InternalSwap(CMsgGSPlayerList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSPlayerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSUserPlaying::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSUserPlaying>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgGSUserPlaying* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgIPAddress&
CMsgGSUserPlaying::_Internal::public_ip(const CMsgGSUserPlaying* msg) {
  return *msg->public_ip_;
}
void CMsgGSUserPlaying::clear_public_ip() {
  if (public_ip_ != nullptr) public_ip_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgGSUserPlaying::CMsgGSUserPlaying(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSUserPlaying)
}
CMsgGSUserPlaying::CMsgGSUserPlaying(const CMsgGSUserPlaying& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::CMsgIPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(deprecated_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSUserPlaying)
}

void CMsgGSUserPlaying::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&public_ip_)) + sizeof(deprecated_public_ip_));
}

CMsgGSUserPlaying::~CMsgGSUserPlaying() {
  // @@protoc_insertion_point(destructor:CMsgGSUserPlaying)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSUserPlaying::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_ip_;
}

void CMsgGSUserPlaying::ArenaDtor(void* object) {
  CMsgGSUserPlaying* _this = reinterpret_cast< CMsgGSUserPlaying* >(object);
  (void)_this;
}
void CMsgGSUserPlaying::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSUserPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSUserPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSUserPlaying)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(public_ip_ != nullptr);
      public_ip_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_public_ip_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(deprecated_public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSUserPlaying::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deprecated_public_ip(&has_bits);
          deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSUserPlaying::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSUserPlaying)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 deprecated_public_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deprecated_public_ip(), target);
  }

  // optional bytes token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token(), target);
  }

  // optional .CMsgIPAddress public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::public_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSUserPlaying)
  return target;
}

size_t CMsgGSUserPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSUserPlaying)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional .CMsgIPAddress public_ip = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_ip_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 deprecated_public_ip = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_public_ip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSUserPlaying::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSUserPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSUserPlaying* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSUserPlaying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSUserPlaying)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSUserPlaying)
    MergeFrom(*source);
  }
}

void CMsgGSUserPlaying::MergeFrom(const CMsgGSUserPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSUserPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_public_ip_ = from.deprecated_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSUserPlaying::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSUserPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSUserPlaying::CopyFrom(const CMsgGSUserPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSUserPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSUserPlaying::IsInitialized() const {
  return true;
}

void CMsgGSUserPlaying::InternalSwap(CMsgGSUserPlaying* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSUserPlaying, deprecated_public_ip_)
      + sizeof(CMsgGSUserPlaying::deprecated_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSUserPlaying, public_ip_)>(
          reinterpret_cast<char*>(&public_ip_),
          reinterpret_cast<char*>(&other->public_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSUserPlaying::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSDisconnectNotice::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSDisconnectNotice>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGSDisconnectNotice::CMsgGSDisconnectNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSDisconnectNotice)
}
CMsgGSDisconnectNotice::CMsgGSDisconnectNotice(const CMsgGSDisconnectNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGSDisconnectNotice)
}

void CMsgGSDisconnectNotice::SharedCtor() {
steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGSDisconnectNotice::~CMsgGSDisconnectNotice() {
  // @@protoc_insertion_point(destructor:CMsgGSDisconnectNotice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSDisconnectNotice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSDisconnectNotice::ArenaDtor(void* object) {
  CMsgGSDisconnectNotice* _this = reinterpret_cast< CMsgGSDisconnectNotice* >(object);
  (void)_this;
}
void CMsgGSDisconnectNotice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSDisconnectNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSDisconnectNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSDisconnectNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSDisconnectNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSDisconnectNotice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSDisconnectNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSDisconnectNotice)
  return target;
}

size_t CMsgGSDisconnectNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSDisconnectNotice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSDisconnectNotice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSDisconnectNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSDisconnectNotice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSDisconnectNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSDisconnectNotice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSDisconnectNotice)
    MergeFrom(*source);
  }
}

void CMsgGSDisconnectNotice::MergeFrom(const CMsgGSDisconnectNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSDisconnectNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
}

void CMsgGSDisconnectNotice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSDisconnectNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDisconnectNotice::CopyFrom(const CMsgGSDisconnectNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSDisconnectNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDisconnectNotice::IsInitialized() const {
  return true;
}

void CMsgGSDisconnectNotice::InternalSwap(CMsgGSDisconnectNotice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSDisconnectNotice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerData_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerData_Player>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerData_Player::CMsgGameServerData_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerData.Player)
}
CMsgGameServerData_Player::CMsgGameServerData_Player(const CMsgGameServerData_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerData.Player)
}

void CMsgGameServerData_Player::SharedCtor() {
steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGameServerData_Player::~CMsgGameServerData_Player() {
  // @@protoc_insertion_point(destructor:CMsgGameServerData.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerData_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameServerData_Player::ArenaDtor(void* object) {
  CMsgGameServerData_Player* _this = reinterpret_cast< CMsgGameServerData_Player* >(object);
  (void)_this;
}
void CMsgGameServerData_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerData_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerData_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerData.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerData_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerData_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerData.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerData.Player)
  return target;
}

size_t CMsgGameServerData_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerData.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerData_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerData.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerData_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerData_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerData.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerData.Player)
    MergeFrom(*source);
  }
}

void CMsgGameServerData_Player::MergeFrom(const CMsgGameServerData_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerData.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
}

void CMsgGameServerData_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerData.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerData_Player::CopyFrom(const CMsgGameServerData_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerData.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerData_Player::IsInitialized() const {
  return true;
}

void CMsgGameServerData_Player::InternalSwap(CMsgGameServerData_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerData_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerData>()._has_bits_);
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_query_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_spectator_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spectator_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fake_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_sdr_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_gamedir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bot_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dedicated(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgGameServerData::CMsgGameServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerData)
}
CMsgGameServerData::CMsgGameServerData(const CMsgGameServerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamedir()) {
    gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamedir(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_product()) {
    product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product(), 
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_region()) {
    region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region(), 
      GetArena());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_os()) {
    os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os(), 
      GetArena());
  }
  game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_data()) {
    game_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_data(), 
      GetArena());
  }
  game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_type()) {
    game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_type(), 
      GetArena());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map(), 
      GetArena());
  }
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_name()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArena());
  }
  spectator_server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spectator_server_name()) {
    spectator_server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spectator_server_name(), 
      GetArena());
  }
  game_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_description()) {
    game_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_description(), 
      GetArena());
  }
  sdr_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdr_ping_location()) {
    sdr_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdr_ping_location(), 
      GetArena());
  }
  ::memcpy(&query_port_, &from.query_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&fake_ip_) -
    reinterpret_cast<char*>(&query_port_)) + sizeof(fake_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerData)
}

void CMsgGameServerData::SharedCtor() {
gamedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spectator_server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdr_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fake_ip_) -
    reinterpret_cast<char*>(&query_port_)) + sizeof(fake_ip_));
}

CMsgGameServerData::~CMsgGameServerData() {
  // @@protoc_insertion_point(destructor:CMsgGameServerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamedir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spectator_server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdr_ping_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerData::ArenaDtor(void* object) {
  CMsgGameServerData* _this = reinterpret_cast< CMsgGameServerData* >(object);
  (void)_this;
}
void CMsgGameServerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gamedir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      region_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      os_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      game_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      game_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      server_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      spectator_server_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      game_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      sdr_ping_location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&query_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&query_port_)) + sizeof(app_id_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&max_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fake_ip_) -
        reinterpret_cast<char*>(&max_players_)) + sizeof(fake_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 query_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_query_port(&has_bits);
          query_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_port(&has_bits);
          game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectator_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_spectator_port(&has_bits);
          spectator_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamedir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_gamedir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.gamedir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string product = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.product");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string region = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.region");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameServerData.Player players = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 max_players = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_players(&has_bits);
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bot_count(&has_bits);
          bot_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool password = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_password(&has_bits);
          password_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool secure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_secure(&has_bits);
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dedicated = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dedicated(&has_bits);
          dedicated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.os");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_data = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_game_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.game_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_game_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.game_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.server_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 revision = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_revision(&has_bits);
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string spectator_server_name = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_spectator_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.spectator_server_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 fake_ip = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_fake_ip(&has_bits);
          fake_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string game_description = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_game_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.game_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sdr_ping_location = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_sdr_ping_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerData.sdr_ping_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 query_port = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_query_port(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_port(), target);
  }

  // optional uint32 spectator_port = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_spectator_port(), target);
  }

  // optional uint32 app_id = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_app_id(), target);
  }

  // optional string gamedir = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamedir().data(), static_cast<int>(this->_internal_gamedir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.gamedir");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_gamedir(), target);
  }

  // optional string version = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_version(), target);
  }

  // optional string product = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.product");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_product(), target);
  }

  // optional string region = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.region");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_region(), target);
  }

  // repeated .CMsgGameServerData.Player players = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_players(i), target, stream);
  }

  // optional uint32 max_players = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_players(), target);
  }

  // optional uint32 bot_count = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_bot_count(), target);
  }

  // optional bool password = 14;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_password(), target);
  }

  // optional bool secure = 15;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_secure(), target);
  }

  // optional bool dedicated = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_dedicated(), target);
  }

  // optional string os = 17;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.os");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_os(), target);
  }

  // optional string game_data = 18;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_data().data(), static_cast<int>(this->_internal_game_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.game_data");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_game_data(), target);
  }

  // optional string game_type = 20;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.game_type");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_game_type(), target);
  }

  // optional string map = 21;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.map");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_map(), target);
  }

  // optional string server_name = 22;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.server_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_server_name(), target);
  }

  // optional uint32 revision = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_revision(), target);
  }

  // optional string spectator_server_name = 27;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spectator_server_name().data(), static_cast<int>(this->_internal_spectator_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.spectator_server_name");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_spectator_server_name(), target);
  }

  // optional fixed32 fake_ip = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(28, this->_internal_fake_ip(), target);
  }

  // optional string game_description = 29;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_description().data(), static_cast<int>(this->_internal_game_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.game_description");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_game_description(), target);
  }

  // optional string sdr_ping_location = 30;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdr_ping_location().data(), static_cast<int>(this->_internal_sdr_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerData.sdr_ping_location");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_sdr_ping_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerData)
  return target;
}

size_t CMsgGameServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameServerData.Player players = 11;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string gamedir = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamedir());
    }

    // optional string version = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string product = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product());
    }

    // optional string region = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region());
    }

    // optional string os = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os());
    }

    // optional string game_data = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_data());
    }

    // optional string game_type = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_type());
    }

    // optional string map = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string server_name = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_name());
    }

    // optional string spectator_server_name = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spectator_server_name());
    }

    // optional string game_description = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_description());
    }

    // optional string sdr_ping_location = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdr_ping_location());
    }

    // optional uint32 query_port = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_query_port());
    }

    // optional uint32 game_port = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_port());
    }

    // optional uint32 spectator_port = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectator_port());
    }

    // optional uint32 app_id = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 max_players = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_players());
    }

    // optional uint32 bot_count = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_count());
    }

    // optional bool password = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool secure = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool dedicated = 16;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional uint32 revision = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_revision());
    }

    // optional fixed32 fake_ip = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerData)
    MergeFrom(*source);
  }
}

void CMsgGameServerData::MergeFrom(const CMsgGameServerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamedir(from._internal_gamedir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_product(from._internal_product());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_region(from._internal_region());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_os(from._internal_os());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_game_data(from._internal_game_data());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_game_type(from._internal_game_type());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_map(from._internal_map());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_server_name(from._internal_server_name());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_spectator_server_name(from._internal_spectator_server_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_game_description(from._internal_game_description());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_sdr_ping_location(from._internal_sdr_ping_location());
    }
    if (cached_has_bits & 0x00001000u) {
      query_port_ = from.query_port_;
    }
    if (cached_has_bits & 0x00002000u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00004000u) {
      spectator_port_ = from.spectator_port_;
    }
    if (cached_has_bits & 0x00008000u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00020000u) {
      bot_count_ = from.bot_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      password_ = from.password_;
    }
    if (cached_has_bits & 0x00080000u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00100000u) {
      dedicated_ = from.dedicated_;
    }
    if (cached_has_bits & 0x00200000u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00400000u) {
      fake_ip_ = from.fake_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerData::CopyFrom(const CMsgGameServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerData::IsInitialized() const {
  return true;
}

void CMsgGameServerData::InternalSwap(CMsgGameServerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  gamedir_.Swap(&other->gamedir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_.Swap(&other->product_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_data_.Swap(&other->game_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_type_.Swap(&other->game_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spectator_server_name_.Swap(&other->spectator_server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_description_.Swap(&other->game_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdr_ping_location_.Swap(&other->sdr_ping_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerData, fake_ip_)
      + sizeof(CMsgGameServerData::fake_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerData, query_port_)>(
          reinterpret_cast<char*>(&query_port_),
          reinterpret_cast<char*>(&other->query_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerRemove::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerRemove>()._has_bits_);
  static void set_has_legacy_steam_id_gs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_query_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameServerRemove::CMsgGameServerRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerRemove)
}
CMsgGameServerRemove::CMsgGameServerRemove(const CMsgGameServerRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&legacy_steam_id_gs_, &from.legacy_steam_id_gs_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_query_port_) -
    reinterpret_cast<char*>(&legacy_steam_id_gs_)) + sizeof(legacy_query_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerRemove)
}

void CMsgGameServerRemove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_steam_id_gs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&legacy_query_port_) -
    reinterpret_cast<char*>(&legacy_steam_id_gs_)) + sizeof(legacy_query_port_));
}

CMsgGameServerRemove::~CMsgGameServerRemove() {
  // @@protoc_insertion_point(destructor:CMsgGameServerRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameServerRemove::ArenaDtor(void* object) {
  CMsgGameServerRemove* _this = reinterpret_cast< CMsgGameServerRemove* >(object);
  (void)_this;
}
void CMsgGameServerRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&legacy_steam_id_gs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legacy_query_port_) -
        reinterpret_cast<char*>(&legacy_steam_id_gs_)) + sizeof(legacy_query_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 legacy_steam_id_gs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_legacy_steam_id_gs(&has_bits);
          legacy_steam_id_gs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 legacy_query_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_legacy_query_port(&has_bits);
          legacy_query_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 legacy_steam_id_gs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_legacy_steam_id_gs(), target);
  }

  // optional uint32 legacy_query_port = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_legacy_query_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerRemove)
  return target;
}

size_t CMsgGameServerRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 legacy_steam_id_gs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_query_port = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_query_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerRemove)
    MergeFrom(*source);
  }
}

void CMsgGameServerRemove::MergeFrom(const CMsgGameServerRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_steam_id_gs_ = from.legacy_steam_id_gs_;
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_query_port_ = from.legacy_query_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerRemove::CopyFrom(const CMsgGameServerRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerRemove::IsInitialized() const {
  return true;
}

void CMsgGameServerRemove::InternalSwap(CMsgGameServerRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerRemove, legacy_query_port_)
      + sizeof(CMsgGameServerRemove::legacy_query_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerRemove, legacy_steam_id_gs_)>(
          reinterpret_cast<char*>(&legacy_steam_id_gs_),
          reinterpret_cast<char*>(&other->legacy_steam_id_gs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGMSServerQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGMSServerQuery>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_geo_location_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_servers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientGMSServerQuery::CMsgClientGMSServerQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGMSServerQuery)
}
CMsgClientGMSServerQuery::CMsgClientGMSServerQuery(const CMsgClientGMSServerQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filter_text()) {
    filter_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter_text(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_servers_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(max_servers_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGMSServerQuery)
}

void CMsgClientGMSServerQuery::SharedCtor() {
filter_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_servers_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(max_servers_));
}

CMsgClientGMSServerQuery::~CMsgClientGMSServerQuery() {
  // @@protoc_insertion_point(destructor:CMsgClientGMSServerQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGMSServerQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filter_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGMSServerQuery::ArenaDtor(void* object) {
  CMsgClientGMSServerQuery* _this = reinterpret_cast< CMsgClientGMSServerQuery* >(object);
  (void)_this;
}
void CMsgClientGMSServerQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGMSServerQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGMSServerQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGMSServerQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filter_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_servers_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(max_servers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGMSServerQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 geo_location_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_geo_location_ip(&has_bits);
          geo_location_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_region_code(&has_bits);
          region_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filter_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filter_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGMSServerQuery.filter_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_servers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_servers(&has_bits);
          max_servers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGMSServerQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGMSServerQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 geo_location_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_geo_location_ip(), target);
  }

  // optional uint32 region_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region_code(), target);
  }

  // optional string filter_text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_text().data(), static_cast<int>(this->_internal_filter_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGMSServerQuery.filter_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filter_text(), target);
  }

  // optional uint32 max_servers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_servers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGMSServerQuery)
  return target;
}

size_t CMsgClientGMSServerQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGMSServerQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string filter_text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_text());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 geo_location_ip = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_geo_location_ip());
    }

    // optional uint32 region_code = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region_code());
    }

    // optional uint32 max_servers = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_servers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGMSServerQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGMSServerQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGMSServerQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGMSServerQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGMSServerQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGMSServerQuery)
    MergeFrom(*source);
  }
}

void CMsgClientGMSServerQuery::MergeFrom(const CMsgClientGMSServerQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGMSServerQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filter_text(from._internal_filter_text());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      geo_location_ip_ = from.geo_location_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      region_code_ = from.region_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_servers_ = from.max_servers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGMSServerQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGMSServerQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGMSServerQuery::CopyFrom(const CMsgClientGMSServerQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGMSServerQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGMSServerQuery::IsInitialized() const {
  return true;
}

void CMsgClientGMSServerQuery::InternalSwap(CMsgClientGMSServerQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_text_.Swap(&other->filter_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGMSServerQuery, max_servers_)
      + sizeof(CMsgClientGMSServerQuery::max_servers_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGMSServerQuery, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGMSServerQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGMSClientServerQueryResponse_Server::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGMSClientServerQueryResponse_Server>()._has_bits_);
  static void set_has_deprecated_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_query_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_auth_players(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgIPAddress& server_ip(const CMsgGMSClientServerQueryResponse_Server* msg);
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sdr_popid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sdr_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_spectator_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gamedir_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gamedir_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_map_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_name_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_game_description_str(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_description_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_version_str(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_gametype_str(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gametype_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_spectator_name_str(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_spectator_name_strindex(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

const ::CMsgIPAddress&
CMsgGMSClientServerQueryResponse_Server::_Internal::server_ip(const CMsgGMSClientServerQueryResponse_Server* msg) {
  return *msg->server_ip_;
}
void CMsgGMSClientServerQueryResponse_Server::clear_server_ip() {
  if (server_ip_ != nullptr) server_ip_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
CMsgGMSClientServerQueryResponse_Server::CMsgGMSClientServerQueryResponse_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGMSClientServerQueryResponse.Server)
}
CMsgGMSClientServerQueryResponse_Server::CMsgGMSClientServerQueryResponse_Server(const CMsgGMSClientServerQueryResponse_Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamedir_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamedir_str()) {
    gamedir_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamedir_str(), 
      GetArena());
  }
  map_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_str()) {
    map_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_str(), 
      GetArena());
  }
  name_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_str()) {
    name_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_str(), 
      GetArena());
  }
  game_description_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_description_str()) {
    game_description_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_description_str(), 
      GetArena());
  }
  version_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_str()) {
    version_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_str(), 
      GetArena());
  }
  gametype_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gametype_str()) {
    gametype_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gametype_str(), 
      GetArena());
  }
  spectator_name_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spectator_name_str()) {
    spectator_name_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spectator_name_str(), 
      GetArena());
  }
  sdr_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdr_ping_location()) {
    sdr_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdr_ping_location(), 
      GetArena());
  }
  if (from._internal_has_server_ip()) {
    server_ip_ = new ::CMsgIPAddress(*from.server_ip_);
  } else {
    server_ip_ = nullptr;
  }
  ::memcpy(&deprecated_server_ip_, &from.deprecated_server_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&spectator_name_strindex_) -
    reinterpret_cast<char*>(&deprecated_server_ip_)) + sizeof(spectator_name_strindex_));
  // @@protoc_insertion_point(copy_constructor:CMsgGMSClientServerQueryResponse.Server)
}

void CMsgGMSClientServerQueryResponse_Server::SharedCtor() {
gamedir_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_description_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gametype_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spectator_name_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdr_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spectator_name_strindex_) -
    reinterpret_cast<char*>(&server_ip_)) + sizeof(spectator_name_strindex_));
}

CMsgGMSClientServerQueryResponse_Server::~CMsgGMSClientServerQueryResponse_Server() {
  // @@protoc_insertion_point(destructor:CMsgGMSClientServerQueryResponse.Server)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGMSClientServerQueryResponse_Server::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamedir_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_description_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gametype_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spectator_name_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdr_ping_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_ip_;
}

void CMsgGMSClientServerQueryResponse_Server::ArenaDtor(void* object) {
  CMsgGMSClientServerQueryResponse_Server* _this = reinterpret_cast< CMsgGMSClientServerQueryResponse_Server* >(object);
  (void)_this;
}
void CMsgGMSClientServerQueryResponse_Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGMSClientServerQueryResponse_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGMSClientServerQueryResponse_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGMSClientServerQueryResponse.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gamedir_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      game_description_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      version_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      gametype_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      spectator_name_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      sdr_ping_location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(server_ip_ != nullptr);
    server_ip_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&deprecated_server_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_port_) -
        reinterpret_cast<char*>(&deprecated_server_ip_)) + sizeof(game_port_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&sdr_popid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_strindex_) -
        reinterpret_cast<char*>(&sdr_popid_)) + sizeof(map_strindex_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&name_strindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectator_name_strindex_) -
        reinterpret_cast<char*>(&name_strindex_)) + sizeof(spectator_name_strindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGMSClientServerQueryResponse_Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 deprecated_server_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_deprecated_server_ip(&has_bits);
          deprecated_server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 query_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_query_port(&has_bits);
          query_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 auth_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_auth_players(&has_bits);
          auth_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress server_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 revision = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_revision(&has_bits);
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_game_port(&has_bits);
          game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 sdr_popid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_sdr_popid(&has_bits);
          sdr_popid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_players = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_players(&has_bits);
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bots = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_bots(&has_bits);
          bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectator_port = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_spectator_port(&has_bits);
          spectator_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamedir_str = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gamedir_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.gamedir_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gamedir_strindex = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_gamedir_strindex(&has_bits);
          gamedir_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_str = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_map_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.map_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 map_strindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_map_strindex(&has_bits);
          map_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_str = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_name_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.name_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 name_strindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_name_strindex(&has_bits);
          name_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_description_str = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_game_description_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.game_description_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_description_strindex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_game_description_strindex(&has_bits);
          game_description_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version_str = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_version_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.version_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_strindex = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_version_strindex(&has_bits);
          version_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gametype_str = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_gametype_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.gametype_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gametype_strindex = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_gametype_strindex(&has_bits);
          gametype_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string spectator_name_str = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_spectator_name_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.spectator_name_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectator_name_strindex = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_spectator_name_strindex(&has_bits);
          spectator_name_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sdr_ping_location = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_sdr_ping_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.Server.sdr_ping_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGMSClientServerQueryResponse_Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGMSClientServerQueryResponse.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 deprecated_server_ip = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deprecated_server_ip(), target);
  }

  // optional uint32 query_port = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_query_port(), target);
  }

  // optional uint32 auth_players = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_auth_players(), target);
  }

  // optional .CMsgIPAddress server_ip = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::server_ip(this), target, stream);
  }

  // optional fixed64 steam_id = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_steam_id(), target);
  }

  // optional uint32 revision = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_revision(), target);
  }

  // optional uint32 players = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_players(), target);
  }

  // optional uint32 game_port = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_game_port(), target);
  }

  // optional fixed32 sdr_popid = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_sdr_popid(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_flags(), target);
  }

  // optional uint32 app_id = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_app_id(), target);
  }

  // optional uint32 max_players = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_players(), target);
  }

  // optional uint32 bots = 14;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_bots(), target);
  }

  // optional uint32 spectator_port = 15;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_spectator_port(), target);
  }

  // optional string gamedir_str = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamedir_str().data(), static_cast<int>(this->_internal_gamedir_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.gamedir_str");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gamedir_str(), target);
  }

  // optional uint32 gamedir_strindex = 17;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_gamedir_strindex(), target);
  }

  // optional string map_str = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_str().data(), static_cast<int>(this->_internal_map_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.map_str");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_map_str(), target);
  }

  // optional uint32 map_strindex = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_map_strindex(), target);
  }

  // optional string name_str = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_str().data(), static_cast<int>(this->_internal_name_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.name_str");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_name_str(), target);
  }

  // optional uint32 name_strindex = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_name_strindex(), target);
  }

  // optional string game_description_str = 22;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_description_str().data(), static_cast<int>(this->_internal_game_description_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.game_description_str");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_game_description_str(), target);
  }

  // optional uint32 game_description_strindex = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_game_description_strindex(), target);
  }

  // optional string version_str = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version_str().data(), static_cast<int>(this->_internal_version_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.version_str");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_version_str(), target);
  }

  // optional uint32 version_strindex = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_version_strindex(), target);
  }

  // optional string gametype_str = 26;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gametype_str().data(), static_cast<int>(this->_internal_gametype_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.gametype_str");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_gametype_str(), target);
  }

  // optional uint32 gametype_strindex = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_gametype_strindex(), target);
  }

  // optional string spectator_name_str = 30;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spectator_name_str().data(), static_cast<int>(this->_internal_spectator_name_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.spectator_name_str");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_spectator_name_str(), target);
  }

  // optional uint32 spectator_name_strindex = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_spectator_name_strindex(), target);
  }

  // optional string sdr_ping_location = 32;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdr_ping_location().data(), static_cast<int>(this->_internal_sdr_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.Server.sdr_ping_location");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_sdr_ping_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGMSClientServerQueryResponse.Server)
  return target;
}

size_t CMsgGMSClientServerQueryResponse_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGMSClientServerQueryResponse.Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string gamedir_str = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamedir_str());
    }

    // optional string map_str = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_str());
    }

    // optional string name_str = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_str());
    }

    // optional string game_description_str = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_description_str());
    }

    // optional string version_str = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version_str());
    }

    // optional string gametype_str = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gametype_str());
    }

    // optional string spectator_name_str = 30;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spectator_name_str());
    }

    // optional string sdr_ping_location = 32;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdr_ping_location());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgIPAddress server_ip = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_ip_);
    }

    // optional uint32 deprecated_server_ip = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_server_ip());
    }

    // optional uint32 query_port = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_query_port());
    }

    // optional uint32 auth_players = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_auth_players());
    }

    // optional uint32 revision = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_revision());
    }

    // optional fixed64 steam_id = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 players = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players());
    }

    // optional uint32 game_port = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_port());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed32 sdr_popid = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 app_id = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 max_players = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_players());
    }

    // optional uint32 bots = 14;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bots());
    }

    // optional uint32 spectator_port = 15;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectator_port());
    }

    // optional uint32 gamedir_strindex = 17;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gamedir_strindex());
    }

    // optional uint32 map_strindex = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_map_strindex());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional uint32 name_strindex = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_name_strindex());
    }

    // optional uint32 game_description_strindex = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_description_strindex());
    }

    // optional uint32 version_strindex = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_strindex());
    }

    // optional uint32 gametype_strindex = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gametype_strindex());
    }

    // optional uint32 spectator_name_strindex = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectator_name_strindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGMSClientServerQueryResponse_Server::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGMSClientServerQueryResponse.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGMSClientServerQueryResponse_Server* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGMSClientServerQueryResponse_Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGMSClientServerQueryResponse.Server)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGMSClientServerQueryResponse.Server)
    MergeFrom(*source);
  }
}

void CMsgGMSClientServerQueryResponse_Server::MergeFrom(const CMsgGMSClientServerQueryResponse_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGMSClientServerQueryResponse.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamedir_str(from._internal_gamedir_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_map_str(from._internal_map_str());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name_str(from._internal_name_str());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_game_description_str(from._internal_game_description_str());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_version_str(from._internal_version_str());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_gametype_str(from._internal_gametype_str());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_spectator_name_str(from._internal_spectator_name_str());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_sdr_ping_location(from._internal_sdr_ping_location());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_server_ip()->::CMsgIPAddress::MergeFrom(from._internal_server_ip());
    }
    if (cached_has_bits & 0x00000200u) {
      deprecated_server_ip_ = from.deprecated_server_ip_;
    }
    if (cached_has_bits & 0x00000400u) {
      query_port_ = from.query_port_;
    }
    if (cached_has_bits & 0x00000800u) {
      auth_players_ = from.auth_players_;
    }
    if (cached_has_bits & 0x00001000u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00002000u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00008000u) {
      game_port_ = from.game_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      sdr_popid_ = from.sdr_popid_;
    }
    if (cached_has_bits & 0x00020000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00040000u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00100000u) {
      bots_ = from.bots_;
    }
    if (cached_has_bits & 0x00200000u) {
      spectator_port_ = from.spectator_port_;
    }
    if (cached_has_bits & 0x00400000u) {
      gamedir_strindex_ = from.gamedir_strindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      map_strindex_ = from.map_strindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      name_strindex_ = from.name_strindex_;
    }
    if (cached_has_bits & 0x02000000u) {
      game_description_strindex_ = from.game_description_strindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      version_strindex_ = from.version_strindex_;
    }
    if (cached_has_bits & 0x08000000u) {
      gametype_strindex_ = from.gametype_strindex_;
    }
    if (cached_has_bits & 0x10000000u) {
      spectator_name_strindex_ = from.spectator_name_strindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGMSClientServerQueryResponse_Server::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGMSClientServerQueryResponse.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGMSClientServerQueryResponse_Server::CopyFrom(const CMsgGMSClientServerQueryResponse_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGMSClientServerQueryResponse.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGMSClientServerQueryResponse_Server::IsInitialized() const {
  return true;
}

void CMsgGMSClientServerQueryResponse_Server::InternalSwap(CMsgGMSClientServerQueryResponse_Server* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamedir_str_.Swap(&other->gamedir_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_str_.Swap(&other->map_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_str_.Swap(&other->name_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_description_str_.Swap(&other->game_description_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_str_.Swap(&other->version_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gametype_str_.Swap(&other->gametype_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spectator_name_str_.Swap(&other->spectator_name_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdr_ping_location_.Swap(&other->sdr_ping_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGMSClientServerQueryResponse_Server, spectator_name_strindex_)
      + sizeof(CMsgGMSClientServerQueryResponse_Server::spectator_name_strindex_)
      - PROTOBUF_FIELD_OFFSET(CMsgGMSClientServerQueryResponse_Server, server_ip_)>(
          reinterpret_cast<char*>(&server_ip_),
          reinterpret_cast<char*>(&other->server_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGMSClientServerQueryResponse_Server::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGMSClientServerQueryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGMSClientServerQueryResponse>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGMSClientServerQueryResponse_Server& default_server_data(const CMsgGMSClientServerQueryResponse* msg);
  static void set_has_default_server_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgGMSClientServerQueryResponse_Server&
CMsgGMSClientServerQueryResponse::_Internal::default_server_data(const CMsgGMSClientServerQueryResponse* msg) {
  return *msg->default_server_data_;
}
CMsgGMSClientServerQueryResponse::CMsgGMSClientServerQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena),
  server_strings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGMSClientServerQueryResponse)
}
CMsgGMSClientServerQueryResponse::CMsgGMSClientServerQueryResponse(const CMsgGMSClientServerQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      servers_(from.servers_),
      server_strings_(from.server_strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  if (from._internal_has_default_server_data()) {
    default_server_data_ = new ::CMsgGMSClientServerQueryResponse_Server(*from.default_server_data_);
  } else {
    default_server_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGMSClientServerQueryResponse)
}

void CMsgGMSClientServerQueryResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
default_server_data_ = nullptr;
}

CMsgGMSClientServerQueryResponse::~CMsgGMSClientServerQueryResponse() {
  // @@protoc_insertion_point(destructor:CMsgGMSClientServerQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGMSClientServerQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_server_data_;
}

void CMsgGMSClientServerQueryResponse::ArenaDtor(void* object) {
  CMsgGMSClientServerQueryResponse* _this = reinterpret_cast< CMsgGMSClientServerQueryResponse* >(object);
  (void)_this;
}
void CMsgGMSClientServerQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGMSClientServerQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGMSClientServerQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGMSClientServerQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  server_strings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(default_server_data_ != nullptr);
      default_server_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGMSClientServerQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGMSClientServerQueryResponse.Server servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGMSClientServerQueryResponse.Server default_server_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_server_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string server_strings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_server_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGMSClientServerQueryResponse.server_strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGMSClientServerQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGMSClientServerQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGMSClientServerQueryResponse.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_servers(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // optional .CMsgGMSClientServerQueryResponse.Server default_server_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::default_server_data(this), target, stream);
  }

  // repeated string server_strings = 4;
  for (int i = 0, n = this->_internal_server_strings_size(); i < n; i++) {
    const auto& s = this->_internal_server_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGMSClientServerQueryResponse.server_strings");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGMSClientServerQueryResponse)
  return target;
}

size_t CMsgGMSClientServerQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGMSClientServerQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGMSClientServerQueryResponse.Server servers = 1;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string server_strings = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(server_strings_.size());
  for (int i = 0, n = server_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      server_strings_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional .CMsgGMSClientServerQueryResponse.Server default_server_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_server_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGMSClientServerQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGMSClientServerQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGMSClientServerQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGMSClientServerQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGMSClientServerQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGMSClientServerQueryResponse)
    MergeFrom(*source);
  }
}

void CMsgGMSClientServerQueryResponse::MergeFrom(const CMsgGMSClientServerQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGMSClientServerQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  server_strings_.MergeFrom(from.server_strings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_default_server_data()->::CMsgGMSClientServerQueryResponse_Server::MergeFrom(from._internal_default_server_data());
    }
  }
}

void CMsgGMSClientServerQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGMSClientServerQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGMSClientServerQueryResponse::CopyFrom(const CMsgGMSClientServerQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGMSClientServerQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGMSClientServerQueryResponse::IsInitialized() const {
  return true;
}

void CMsgGMSClientServerQueryResponse::InternalSwap(CMsgGMSClientServerQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  servers_.InternalSwap(&other->servers_);
  server_strings_.InternalSwap(&other->server_strings_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(default_server_data_, other->default_server_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGMSClientServerQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameServerOutOfDate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerOutOfDate>()._has_bits_);
  static void set_has_steam_id_gs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reject(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerOutOfDate::CMsgGameServerOutOfDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerOutOfDate)
}
CMsgGameServerOutOfDate::CMsgGameServerOutOfDate(const CMsgGameServerOutOfDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&steam_id_gs_, &from.steam_id_gs_,
    static_cast<size_t>(reinterpret_cast<char*>(&reject_) -
    reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(reject_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerOutOfDate)
}

void CMsgGameServerOutOfDate::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_gs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reject_) -
    reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(reject_));
}

CMsgGameServerOutOfDate::~CMsgGameServerOutOfDate() {
  // @@protoc_insertion_point(destructor:CMsgGameServerOutOfDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameServerOutOfDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerOutOfDate::ArenaDtor(void* object) {
  CMsgGameServerOutOfDate* _this = reinterpret_cast< CMsgGameServerOutOfDate* >(object);
  (void)_this;
}
void CMsgGameServerOutOfDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerOutOfDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerOutOfDate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerOutOfDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_gs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reject_) -
        reinterpret_cast<char*>(&steam_id_gs_)) + sizeof(reject_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerOutOfDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_gs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_gs(&has_bits);
          steam_id_gs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool reject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reject(&has_bits);
          reject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerOutOfDate.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerOutOfDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerOutOfDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_gs = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_gs(), target);
  }

  // optional bool reject = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reject(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerOutOfDate.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerOutOfDate)
  return target;
}

size_t CMsgGameServerOutOfDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerOutOfDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional fixed64 steam_id_gs = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool reject = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameServerOutOfDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameServerOutOfDate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameServerOutOfDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameServerOutOfDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameServerOutOfDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameServerOutOfDate)
    MergeFrom(*source);
  }
}

void CMsgGameServerOutOfDate::MergeFrom(const CMsgGameServerOutOfDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerOutOfDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_gs_ = from.steam_id_gs_;
    }
    if (cached_has_bits & 0x00000004u) {
      reject_ = from.reject_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameServerOutOfDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameServerOutOfDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameServerOutOfDate::CopyFrom(const CMsgGameServerOutOfDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerOutOfDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerOutOfDate::IsInitialized() const {
  return true;
}

void CMsgGameServerOutOfDate::InternalSwap(CMsgGameServerOutOfDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerOutOfDate, reject_)
      + sizeof(CMsgGameServerOutOfDate::reject_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerOutOfDate, steam_id_gs_)>(
          reinterpret_cast<char*>(&steam_id_gs_),
          reinterpret_cast<char*>(&other->steam_id_gs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerOutOfDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSAssociateWithClan::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSAssociateWithClan>()._has_bits_);
  static void set_has_steam_id_clan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGSAssociateWithClan::CMsgGSAssociateWithClan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSAssociateWithClan)
}
CMsgGSAssociateWithClan::CMsgGSAssociateWithClan(const CMsgGSAssociateWithClan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_clan_ = from.steam_id_clan_;
  // @@protoc_insertion_point(copy_constructor:CMsgGSAssociateWithClan)
}

void CMsgGSAssociateWithClan::SharedCtor() {
steam_id_clan_ = PROTOBUF_ULONGLONG(0);
}

CMsgGSAssociateWithClan::~CMsgGSAssociateWithClan() {
  // @@protoc_insertion_point(destructor:CMsgGSAssociateWithClan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSAssociateWithClan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSAssociateWithClan::ArenaDtor(void* object) {
  CMsgGSAssociateWithClan* _this = reinterpret_cast< CMsgGSAssociateWithClan* >(object);
  (void)_this;
}
void CMsgGSAssociateWithClan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSAssociateWithClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSAssociateWithClan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSAssociateWithClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_clan_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSAssociateWithClan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_clan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_clan(&has_bits);
          steam_id_clan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSAssociateWithClan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSAssociateWithClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_clan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSAssociateWithClan)
  return target;
}

size_t CMsgGSAssociateWithClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSAssociateWithClan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id_clan = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSAssociateWithClan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSAssociateWithClan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSAssociateWithClan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSAssociateWithClan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSAssociateWithClan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSAssociateWithClan)
    MergeFrom(*source);
  }
}

void CMsgGSAssociateWithClan::MergeFrom(const CMsgGSAssociateWithClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSAssociateWithClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id_clan()) {
    _internal_set_steam_id_clan(from._internal_steam_id_clan());
  }
}

void CMsgGSAssociateWithClan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSAssociateWithClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSAssociateWithClan::CopyFrom(const CMsgGSAssociateWithClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSAssociateWithClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSAssociateWithClan::IsInitialized() const {
  return true;
}

void CMsgGSAssociateWithClan::InternalSwap(CMsgGSAssociateWithClan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_clan_, other->steam_id_clan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSAssociateWithClan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSAssociateWithClanResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSAssociateWithClanResponse>()._has_bits_);
  static void set_has_steam_id_clan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGSAssociateWithClanResponse::CMsgGSAssociateWithClanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSAssociateWithClanResponse)
}
CMsgGSAssociateWithClanResponse::CMsgGSAssociateWithClanResponse(const CMsgGSAssociateWithClanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_clan_, &from.steam_id_clan_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_clan_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSAssociateWithClanResponse)
}

void CMsgGSAssociateWithClanResponse::SharedCtor() {
steam_id_clan_ = PROTOBUF_ULONGLONG(0);
eresult_ = 2u;
}

CMsgGSAssociateWithClanResponse::~CMsgGSAssociateWithClanResponse() {
  // @@protoc_insertion_point(destructor:CMsgGSAssociateWithClanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSAssociateWithClanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSAssociateWithClanResponse::ArenaDtor(void* object) {
  CMsgGSAssociateWithClanResponse* _this = reinterpret_cast< CMsgGSAssociateWithClanResponse* >(object);
  (void)_this;
}
void CMsgGSAssociateWithClanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSAssociateWithClanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSAssociateWithClanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSAssociateWithClanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    steam_id_clan_ = PROTOBUF_ULONGLONG(0);
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSAssociateWithClanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_clan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_clan(&has_bits);
          steam_id_clan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 eresult = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSAssociateWithClanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSAssociateWithClanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_clan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_clan(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSAssociateWithClanResponse)
  return target;
}

size_t CMsgGSAssociateWithClanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSAssociateWithClanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id_clan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSAssociateWithClanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSAssociateWithClanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSAssociateWithClanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSAssociateWithClanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSAssociateWithClanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSAssociateWithClanResponse)
    MergeFrom(*source);
  }
}

void CMsgGSAssociateWithClanResponse::MergeFrom(const CMsgGSAssociateWithClanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSAssociateWithClanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_clan_ = from.steam_id_clan_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSAssociateWithClanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSAssociateWithClanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSAssociateWithClanResponse::CopyFrom(const CMsgGSAssociateWithClanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSAssociateWithClanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSAssociateWithClanResponse::IsInitialized() const {
  return true;
}

void CMsgGSAssociateWithClanResponse::InternalSwap(CMsgGSAssociateWithClanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_clan_, other->steam_id_clan_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSAssociateWithClanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSComputeNewPlayerCompatibility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSComputeNewPlayerCompatibility>()._has_bits_);
  static void set_has_steam_id_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGSComputeNewPlayerCompatibility::CMsgGSComputeNewPlayerCompatibility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSComputeNewPlayerCompatibility)
}
CMsgGSComputeNewPlayerCompatibility::CMsgGSComputeNewPlayerCompatibility(const CMsgGSComputeNewPlayerCompatibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_candidate_ = from.steam_id_candidate_;
  // @@protoc_insertion_point(copy_constructor:CMsgGSComputeNewPlayerCompatibility)
}

void CMsgGSComputeNewPlayerCompatibility::SharedCtor() {
steam_id_candidate_ = PROTOBUF_ULONGLONG(0);
}

CMsgGSComputeNewPlayerCompatibility::~CMsgGSComputeNewPlayerCompatibility() {
  // @@protoc_insertion_point(destructor:CMsgGSComputeNewPlayerCompatibility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSComputeNewPlayerCompatibility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSComputeNewPlayerCompatibility::ArenaDtor(void* object) {
  CMsgGSComputeNewPlayerCompatibility* _this = reinterpret_cast< CMsgGSComputeNewPlayerCompatibility* >(object);
  (void)_this;
}
void CMsgGSComputeNewPlayerCompatibility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSComputeNewPlayerCompatibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSComputeNewPlayerCompatibility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSComputeNewPlayerCompatibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_candidate_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSComputeNewPlayerCompatibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_candidate(&has_bits);
          steam_id_candidate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSComputeNewPlayerCompatibility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSComputeNewPlayerCompatibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_candidate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSComputeNewPlayerCompatibility)
  return target;
}

size_t CMsgGSComputeNewPlayerCompatibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSComputeNewPlayerCompatibility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id_candidate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSComputeNewPlayerCompatibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSComputeNewPlayerCompatibility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSComputeNewPlayerCompatibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSComputeNewPlayerCompatibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSComputeNewPlayerCompatibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSComputeNewPlayerCompatibility)
    MergeFrom(*source);
  }
}

void CMsgGSComputeNewPlayerCompatibility::MergeFrom(const CMsgGSComputeNewPlayerCompatibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSComputeNewPlayerCompatibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id_candidate()) {
    _internal_set_steam_id_candidate(from._internal_steam_id_candidate());
  }
}

void CMsgGSComputeNewPlayerCompatibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSComputeNewPlayerCompatibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSComputeNewPlayerCompatibility::CopyFrom(const CMsgGSComputeNewPlayerCompatibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSComputeNewPlayerCompatibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSComputeNewPlayerCompatibility::IsInitialized() const {
  return true;
}

void CMsgGSComputeNewPlayerCompatibility::InternalSwap(CMsgGSComputeNewPlayerCompatibility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_candidate_, other->steam_id_candidate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSComputeNewPlayerCompatibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGSComputeNewPlayerCompatibilityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGSComputeNewPlayerCompatibilityResponse>()._has_bits_);
  static void set_has_steam_id_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_clan_member(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ct_dont_like_you(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ct_you_dont_like(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ct_clanmembers_dont_like_you(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGSComputeNewPlayerCompatibilityResponse::CMsgGSComputeNewPlayerCompatibilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGSComputeNewPlayerCompatibilityResponse)
}
CMsgGSComputeNewPlayerCompatibilityResponse::CMsgGSComputeNewPlayerCompatibilityResponse(const CMsgGSComputeNewPlayerCompatibilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_candidate_, &from.steam_id_candidate_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_candidate_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgGSComputeNewPlayerCompatibilityResponse)
}

void CMsgGSComputeNewPlayerCompatibilityResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_candidate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ct_clanmembers_dont_like_you_) -
    reinterpret_cast<char*>(&steam_id_candidate_)) + sizeof(ct_clanmembers_dont_like_you_));
eresult_ = 2u;
}

CMsgGSComputeNewPlayerCompatibilityResponse::~CMsgGSComputeNewPlayerCompatibilityResponse() {
  // @@protoc_insertion_point(destructor:CMsgGSComputeNewPlayerCompatibilityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGSComputeNewPlayerCompatibilityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGSComputeNewPlayerCompatibilityResponse::ArenaDtor(void* object) {
  CMsgGSComputeNewPlayerCompatibilityResponse* _this = reinterpret_cast< CMsgGSComputeNewPlayerCompatibilityResponse* >(object);
  (void)_this;
}
void CMsgGSComputeNewPlayerCompatibilityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGSComputeNewPlayerCompatibilityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGSComputeNewPlayerCompatibilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&steam_id_candidate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ct_clanmembers_dont_like_you_) -
        reinterpret_cast<char*>(&steam_id_candidate_)) + sizeof(ct_clanmembers_dont_like_you_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGSComputeNewPlayerCompatibilityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id_candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id_candidate(&has_bits);
          steam_id_candidate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 eresult = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_clan_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_clan_member(&has_bits);
          is_clan_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ct_dont_like_you = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ct_dont_like_you(&has_bits);
          ct_dont_like_you_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ct_you_dont_like = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ct_you_dont_like(&has_bits);
          ct_you_dont_like_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ct_clanmembers_dont_like_you = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ct_clanmembers_dont_like_you(&has_bits);
          ct_clanmembers_dont_like_you_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGSComputeNewPlayerCompatibilityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_candidate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_candidate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional bool is_clan_member = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_clan_member(), target);
  }

  // optional int32 ct_dont_like_you = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ct_dont_like_you(), target);
  }

  // optional int32 ct_you_dont_like = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ct_you_dont_like(), target);
  }

  // optional int32 ct_clanmembers_dont_like_you = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ct_clanmembers_dont_like_you(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGSComputeNewPlayerCompatibilityResponse)
  return target;
}

size_t CMsgGSComputeNewPlayerCompatibilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 steam_id_candidate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_clan_member = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 ct_dont_like_you = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ct_dont_like_you());
    }

    // optional int32 ct_you_dont_like = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ct_you_dont_like());
    }

    // optional int32 ct_clanmembers_dont_like_you = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ct_clanmembers_dont_like_you());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGSComputeNewPlayerCompatibilityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGSComputeNewPlayerCompatibilityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGSComputeNewPlayerCompatibilityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGSComputeNewPlayerCompatibilityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGSComputeNewPlayerCompatibilityResponse)
    MergeFrom(*source);
  }
}

void CMsgGSComputeNewPlayerCompatibilityResponse::MergeFrom(const CMsgGSComputeNewPlayerCompatibilityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_candidate_ = from.steam_id_candidate_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_clan_member_ = from.is_clan_member_;
    }
    if (cached_has_bits & 0x00000004u) {
      ct_dont_like_you_ = from.ct_dont_like_you_;
    }
    if (cached_has_bits & 0x00000008u) {
      ct_you_dont_like_ = from.ct_you_dont_like_;
    }
    if (cached_has_bits & 0x00000010u) {
      ct_clanmembers_dont_like_you_ = from.ct_clanmembers_dont_like_you_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGSComputeNewPlayerCompatibilityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSComputeNewPlayerCompatibilityResponse::CopyFrom(const CMsgGSComputeNewPlayerCompatibilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGSComputeNewPlayerCompatibilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSComputeNewPlayerCompatibilityResponse::IsInitialized() const {
  return true;
}

void CMsgGSComputeNewPlayerCompatibilityResponse::InternalSwap(CMsgGSComputeNewPlayerCompatibilityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGSComputeNewPlayerCompatibilityResponse, ct_clanmembers_dont_like_you_)
      + sizeof(CMsgGSComputeNewPlayerCompatibilityResponse::ct_clanmembers_dont_like_you_)
      - PROTOBUF_FIELD_OFFSET(CMsgGSComputeNewPlayerCompatibilityResponse, steam_id_candidate_)>(
          reinterpret_cast<char*>(&steam_id_candidate_),
          reinterpret_cast<char*>(&other->steam_id_candidate_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGSComputeNewPlayerCompatibilityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgGSServerType* Arena::CreateMaybeMessage< ::CMsgGSServerType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSServerType >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSStatusReply* Arena::CreateMaybeMessage< ::CMsgGSStatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSPlayerList_Player* Arena::CreateMaybeMessage< ::CMsgGSPlayerList_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSPlayerList_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSPlayerList* Arena::CreateMaybeMessage< ::CMsgGSPlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSPlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSUserPlaying* Arena::CreateMaybeMessage< ::CMsgGSUserPlaying >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSUserPlaying >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSDisconnectNotice* Arena::CreateMaybeMessage< ::CMsgGSDisconnectNotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSDisconnectNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerData_Player* Arena::CreateMaybeMessage< ::CMsgGameServerData_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerData_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerData* Arena::CreateMaybeMessage< ::CMsgGameServerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerRemove* Arena::CreateMaybeMessage< ::CMsgGameServerRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGMSServerQuery* Arena::CreateMaybeMessage< ::CMsgClientGMSServerQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGMSServerQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGMSClientServerQueryResponse_Server* Arena::CreateMaybeMessage< ::CMsgGMSClientServerQueryResponse_Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGMSClientServerQueryResponse_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGMSClientServerQueryResponse* Arena::CreateMaybeMessage< ::CMsgGMSClientServerQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGMSClientServerQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerOutOfDate* Arena::CreateMaybeMessage< ::CMsgGameServerOutOfDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerOutOfDate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSAssociateWithClan* Arena::CreateMaybeMessage< ::CMsgGSAssociateWithClan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSAssociateWithClan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSAssociateWithClanResponse* Arena::CreateMaybeMessage< ::CMsgGSAssociateWithClanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSAssociateWithClanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSComputeNewPlayerCompatibility* Arena::CreateMaybeMessage< ::CMsgGSComputeNewPlayerCompatibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSComputeNewPlayerCompatibility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGSComputeNewPlayerCompatibilityResponse* Arena::CreateMaybeMessage< ::CMsgGSComputeNewPlayerCompatibilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGSComputeNewPlayerCompatibilityResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
