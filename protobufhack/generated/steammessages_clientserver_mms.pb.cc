// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_mms.proto

#include "steammessages_clientserver_mms.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientMMSSetRatelimitPolicyOnClient::CMsgClientMMSSetRatelimitPolicyOnClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , enable_rate_limits_(false)
  , seconds_per_message_(0)
  , milliseconds_per_data_update_(0){}
struct CMsgClientMMSSetRatelimitPolicyOnClientDefaultTypeInternal {
  constexpr CMsgClientMMSSetRatelimitPolicyOnClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetRatelimitPolicyOnClientDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetRatelimitPolicyOnClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetRatelimitPolicyOnClientDefaultTypeInternal _CMsgClientMMSSetRatelimitPolicyOnClient_default_instance_;
constexpr CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , persona_name_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_ip_(nullptr)
  , app_id_(0u)
  , max_members_(0)
  , lobby_type_(0)
  , lobby_flags_(0)
  , cell_id_(0u)
  , deprecated_public_ip_(0u){}
struct CMsgClientMMSCreateLobbyDefaultTypeInternal {
  constexpr CMsgClientMMSCreateLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSCreateLobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSCreateLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSCreateLobbyDefaultTypeInternal _CMsgClientMMSCreateLobby_default_instance_;
constexpr CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientMMSCreateLobbyResponseDefaultTypeInternal {
  constexpr CMsgClientMMSCreateLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSCreateLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSCreateLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSCreateLobbyResponseDefaultTypeInternal _CMsgClientMMSCreateLobbyResponse_default_instance_;
constexpr CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSJoinLobbyDefaultTypeInternal {
  constexpr CMsgClientMMSJoinLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSJoinLobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSJoinLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSJoinLobbyDefaultTypeInternal _CMsgClientMMSJoinLobby_default_instance_;
constexpr CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal {
  constexpr CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal() {}
  union {
    CMsgClientMMSJoinLobbyResponse_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSJoinLobbyResponse_MemberDefaultTypeInternal _CMsgClientMMSJoinLobbyResponse_Member_default_instance_;
constexpr CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , chat_room_enter_response_(0)
  , max_members_(0)
  , lobby_type_(0)
  , steam_id_owner_(PROTOBUF_ULONGLONG(0))
  , lobby_flags_(0){}
struct CMsgClientMMSJoinLobbyResponseDefaultTypeInternal {
  constexpr CMsgClientMMSJoinLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSJoinLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSJoinLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSJoinLobbyResponseDefaultTypeInternal _CMsgClientMMSJoinLobbyResponse_default_instance_;
constexpr CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSLeaveLobbyDefaultTypeInternal {
  constexpr CMsgClientMMSLeaveLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSLeaveLobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSLeaveLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSLeaveLobbyDefaultTypeInternal _CMsgClientMMSLeaveLobby_default_instance_;
constexpr CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal {
  constexpr CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSLeaveLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSLeaveLobbyResponseDefaultTypeInternal _CMsgClientMMSLeaveLobbyResponse_default_instance_;
constexpr CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comparision_(0)
  , filter_type_(0){}
struct CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyList_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyList_FilterDefaultTypeInternal _CMsgClientMMSGetLobbyList_Filter_default_instance_;
constexpr CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , public_ip_(nullptr)
  , app_id_(0u)
  , num_lobbies_requested_(0)
  , cell_id_(0u)
  , deprecated_public_ip_(0u){}
struct CMsgClientMMSGetLobbyListDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyListDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyListDefaultTypeInternal _CMsgClientMMSGetLobbyList_default_instance_;
constexpr CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , max_members_(0)
  , lobby_type_(0)
  , lobby_flags_(0)
  , num_members_(0)
  , weight_(PROTOBUF_LONGLONG(0))
  , distance_(0){}
struct CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyListResponse_Lobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyListResponse_LobbyDefaultTypeInternal _CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_;
constexpr CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobbies_()
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientMMSGetLobbyListResponseDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyListResponseDefaultTypeInternal _CMsgClientMMSGetLobbyListResponse_default_instance_;
constexpr CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , max_members_(0)
  , steam_id_member_(PROTOBUF_ULONGLONG(0))
  , lobby_type_(0)
  , lobby_flags_(0){}
struct CMsgClientMMSSetLobbyDataDefaultTypeInternal {
  constexpr CMsgClientMMSSetLobbyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetLobbyDataDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetLobbyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetLobbyDataDefaultTypeInternal _CMsgClientMMSSetLobbyData_default_instance_;
constexpr CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal {
  constexpr CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetLobbyDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetLobbyDataResponseDefaultTypeInternal _CMsgClientMMSSetLobbyDataResponse_default_instance_;
constexpr CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSGetLobbyDataDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyDataDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyDataDefaultTypeInternal _CMsgClientMMSGetLobbyData_default_instance_;
constexpr CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientMMSLobbyData_MemberDefaultTypeInternal {
  constexpr CMsgClientMMSLobbyData_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSLobbyData_MemberDefaultTypeInternal() {}
  union {
    CMsgClientMMSLobbyData_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSLobbyData_MemberDefaultTypeInternal _CMsgClientMMSLobbyData_Member_default_instance_;
constexpr CMsgClientMMSLobbyData::CMsgClientMMSLobbyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , num_members_(0)
  , max_members_(0)
  , lobby_type_(0)
  , steam_id_owner_(PROTOBUF_ULONGLONG(0))
  , lobby_flags_(0)
  , lobby_cellid_(0u)
  , owner_should_accept_changes_(false){}
struct CMsgClientMMSLobbyDataDefaultTypeInternal {
  constexpr CMsgClientMMSLobbyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSLobbyDataDefaultTypeInternal() {}
  union {
    CMsgClientMMSLobbyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSLobbyDataDefaultTypeInternal _CMsgClientMMSLobbyData_default_instance_;
constexpr CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_target_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal {
  constexpr CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal() {}
  union {
    CMsgClientMMSSendLobbyChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSendLobbyChatMsgDefaultTypeInternal _CMsgClientMMSSendLobbyChatMsg_default_instance_;
constexpr CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_sender_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSLobbyChatMsgDefaultTypeInternal {
  constexpr CMsgClientMMSLobbyChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSLobbyChatMsgDefaultTypeInternal() {}
  union {
    CMsgClientMMSLobbyChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSLobbyChatMsgDefaultTypeInternal _CMsgClientMMSLobbyChatMsg_default_instance_;
constexpr CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_new_owner_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSSetLobbyOwnerDefaultTypeInternal {
  constexpr CMsgClientMMSSetLobbyOwnerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetLobbyOwnerDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetLobbyOwner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetLobbyOwnerDefaultTypeInternal _CMsgClientMMSSetLobbyOwner_default_instance_;
constexpr CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal {
  constexpr CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetLobbyOwnerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetLobbyOwnerResponseDefaultTypeInternal _CMsgClientMMSSetLobbyOwnerResponse_default_instance_;
constexpr CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_lobby2_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSSetLobbyLinkedDefaultTypeInternal {
  constexpr CMsgClientMMSSetLobbyLinkedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetLobbyLinkedDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetLobbyLinked _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetLobbyLinkedDefaultTypeInternal _CMsgClientMMSSetLobbyLinked_default_instance_;
constexpr CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_ip_(nullptr)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , deprecated_game_server_ip_(0u)
  , game_server_steam_id_(PROTOBUF_ULONGLONG(0))
  , game_server_port_(0u){}
struct CMsgClientMMSSetLobbyGameServerDefaultTypeInternal {
  constexpr CMsgClientMMSSetLobbyGameServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSSetLobbyGameServerDefaultTypeInternal() {}
  union {
    CMsgClientMMSSetLobbyGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSSetLobbyGameServerDefaultTypeInternal _CMsgClientMMSSetLobbyGameServer_default_instance_;
constexpr CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_ip_(nullptr)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , deprecated_game_server_ip_(0u)
  , game_server_steam_id_(PROTOBUF_ULONGLONG(0))
  , game_server_port_(0u){}
struct CMsgClientMMSLobbyGameServerSetDefaultTypeInternal {
  constexpr CMsgClientMMSLobbyGameServerSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSLobbyGameServerSetDefaultTypeInternal() {}
  union {
    CMsgClientMMSLobbyGameServerSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSLobbyGameServerSetDefaultTypeInternal _CMsgClientMMSLobbyGameServerSet_default_instance_;
constexpr CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_user_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSUserJoinedLobbyDefaultTypeInternal {
  constexpr CMsgClientMMSUserJoinedLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSUserJoinedLobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSUserJoinedLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSUserJoinedLobbyDefaultTypeInternal _CMsgClientMMSUserJoinedLobby_default_instance_;
constexpr CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_user_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSUserLeftLobbyDefaultTypeInternal {
  constexpr CMsgClientMMSUserLeftLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSUserLeftLobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSUserLeftLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSUserLeftLobbyDefaultTypeInternal _CMsgClientMMSUserLeftLobby_default_instance_;
constexpr CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , steam_id_user_invited_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u){}
struct CMsgClientMMSInviteToLobbyDefaultTypeInternal {
  constexpr CMsgClientMMSInviteToLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSInviteToLobbyDefaultTypeInternal() {}
  union {
    CMsgClientMMSInviteToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSInviteToLobbyDefaultTypeInternal _CMsgClientMMSInviteToLobby_default_instance_;
constexpr CMsgClientMMSGetLobbyStatus::CMsgClientMMSGetLobbyStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , claim_membership_(false)
  , claim_ownership_(false){}
struct CMsgClientMMSGetLobbyStatusDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyStatusDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyStatusDefaultTypeInternal _CMsgClientMMSGetLobbyStatus_default_instance_;
constexpr CMsgClientMMSGetLobbyStatusResponse::CMsgClientMMSGetLobbyStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_lobby_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , lobby_status_(0)
{}
struct CMsgClientMMSGetLobbyStatusResponseDefaultTypeInternal {
  constexpr CMsgClientMMSGetLobbyStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientMMSGetLobbyStatusResponseDefaultTypeInternal() {}
  union {
    CMsgClientMMSGetLobbyStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientMMSGetLobbyStatusResponseDefaultTypeInternal _CMsgClientMMSGetLobbyStatusResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fmms_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fclientserver_5fmms_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fmms_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_5fmms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetRatelimitPolicyOnClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetRatelimitPolicyOnClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetRatelimitPolicyOnClient, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetRatelimitPolicyOnClient, enable_rate_limits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetRatelimitPolicyOnClient, seconds_per_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetRatelimitPolicyOnClient, milliseconds_per_data_update_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, metadata_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, persona_name_owner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobby, public_ip_),
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobbyResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobbyResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSCreateLobbyResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobby, persona_name_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse_Member, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse_Member, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse_Member, metadata_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, chat_room_enter_response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, steam_id_owner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSJoinLobbyResponse, members_),
  2,
  1,
  3,
  4,
  5,
  7,
  6,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobby, steam_id_lobby_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobbyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobbyResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobbyResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLeaveLobbyResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList_Filter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList_Filter, key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList_Filter, value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList_Filter, comparision_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList_Filter, filter_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, num_lobbies_requested_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, filters_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyList, public_ip_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, metadata_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, num_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, distance_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse_Lobby, weight_),
  1,
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyListResponse, lobbies_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, steam_id_member_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyData, metadata_),
  2,
  1,
  4,
  3,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyDataResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyDataResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyDataResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyData, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyData, steam_id_lobby_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData_Member, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData_Member, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData_Member, metadata_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, num_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, lobby_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, steam_id_owner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, metadata_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, lobby_cellid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyData, owner_should_accept_changes_),
  2,
  1,
  3,
  4,
  5,
  7,
  6,
  0,
  ~0u,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSendLobbyChatMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSendLobbyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSendLobbyChatMsg, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSendLobbyChatMsg, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSendLobbyChatMsg, steam_id_target_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSendLobbyChatMsg, lobby_message_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyChatMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyChatMsg, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyChatMsg, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyChatMsg, steam_id_sender_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyChatMsg, lobby_message_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwner, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwner, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwner, steam_id_new_owner_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwnerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwnerResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwnerResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyOwnerResponse, eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyLinked, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyLinked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyLinked, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyLinked, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyLinked, steam_id_lobby2_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, deprecated_game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, game_server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSSetLobbyGameServer, game_server_ip_),
  2,
  1,
  3,
  5,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, deprecated_game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, game_server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSLobbyGameServerSet, game_server_ip_),
  2,
  1,
  3,
  5,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserJoinedLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserJoinedLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserJoinedLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserJoinedLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserJoinedLobby, steam_id_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserJoinedLobby, persona_name_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserLeftLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserLeftLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserLeftLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserLeftLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserLeftLobby, steam_id_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSUserLeftLobby, persona_name_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSInviteToLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSInviteToLobby, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSInviteToLobby, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSInviteToLobby, steam_id_user_invited_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatus, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatus, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatus, claim_membership_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatus, claim_ownership_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatusResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatusResponse, steam_id_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientMMSGetLobbyStatusResponse, lobby_status_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgClientMMSSetRatelimitPolicyOnClient)},
  { 13, 27, sizeof(::CMsgClientMMSCreateLobby)},
  { 36, 44, sizeof(::CMsgClientMMSCreateLobbyResponse)},
  { 47, 55, sizeof(::CMsgClientMMSJoinLobby)},
  { 58, 66, sizeof(::CMsgClientMMSJoinLobbyResponse_Member)},
  { 69, 83, sizeof(::CMsgClientMMSJoinLobbyResponse)},
  { 92, 99, sizeof(::CMsgClientMMSLeaveLobby)},
  { 101, 109, sizeof(::CMsgClientMMSLeaveLobbyResponse)},
  { 112, 121, sizeof(::CMsgClientMMSGetLobbyList_Filter)},
  { 125, 136, sizeof(::CMsgClientMMSGetLobbyList)},
  { 142, 155, sizeof(::CMsgClientMMSGetLobbyListResponse_Lobby)},
  { 163, 171, sizeof(::CMsgClientMMSGetLobbyListResponse)},
  { 174, 186, sizeof(::CMsgClientMMSSetLobbyData)},
  { 193, 201, sizeof(::CMsgClientMMSSetLobbyDataResponse)},
  { 204, 211, sizeof(::CMsgClientMMSGetLobbyData)},
  { 213, 221, sizeof(::CMsgClientMMSLobbyData_Member)},
  { 224, 240, sizeof(::CMsgClientMMSLobbyData)},
  { 251, 260, sizeof(::CMsgClientMMSSendLobbyChatMsg)},
  { 264, 273, sizeof(::CMsgClientMMSLobbyChatMsg)},
  { 277, 285, sizeof(::CMsgClientMMSSetLobbyOwner)},
  { 288, 296, sizeof(::CMsgClientMMSSetLobbyOwnerResponse)},
  { 299, 307, sizeof(::CMsgClientMMSSetLobbyLinked)},
  { 310, 321, sizeof(::CMsgClientMMSSetLobbyGameServer)},
  { 327, 338, sizeof(::CMsgClientMMSLobbyGameServerSet)},
  { 344, 353, sizeof(::CMsgClientMMSUserJoinedLobby)},
  { 357, 366, sizeof(::CMsgClientMMSUserLeftLobby)},
  { 370, 378, sizeof(::CMsgClientMMSInviteToLobby)},
  { 381, 390, sizeof(::CMsgClientMMSGetLobbyStatus)},
  { 394, 402, sizeof(::CMsgClientMMSGetLobbyStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetRatelimitPolicyOnClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSCreateLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSCreateLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSJoinLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSJoinLobbyResponse_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSJoinLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSLeaveLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSLeaveLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyList_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyListResponse_Lobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetLobbyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetLobbyDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSLobbyData_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSLobbyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSendLobbyChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSLobbyChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetLobbyOwner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetLobbyOwnerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetLobbyLinked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSSetLobbyGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSLobbyGameServerSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSUserJoinedLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSUserLeftLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSInviteToLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientMMSGetLobbyStatusResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fmms_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_clientserver_mms.proto\032 "
  "google/protobuf/descriptor.proto\032\030steamm"
  "essages_base.proto\"\230\001\n\'CMsgClientMMSSetR"
  "atelimitPolicyOnClient\022\016\n\006app_id\030\001 \001(\r\022\032"
  "\n\022enable_rate_limits\030\002 \001(\010\022\033\n\023seconds_pe"
  "r_message\030\003 \001(\005\022$\n\034milliseconds_per_data"
  "_update\030\004 \001(\005\"\350\001\n\030CMsgClientMMSCreateLob"
  "by\022\016\n\006app_id\030\001 \001(\r\022\023\n\013max_members\030\002 \001(\005\022"
  "\022\n\nlobby_type\030\003 \001(\005\022\023\n\013lobby_flags\030\004 \001(\005"
  "\022\017\n\007cell_id\030\005 \001(\r\022\034\n\024deprecated_public_i"
  "p\030\006 \001(\r\022\020\n\010metadata\030\007 \001(\014\022\032\n\022persona_nam"
  "e_owner\030\010 \001(\t\022!\n\tpublic_ip\030\t \001(\0132\016.CMsgI"
  "PAddress\"^\n CMsgClientMMSCreateLobbyResp"
  "onse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002"
  " \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"V\n\026CMsgClientMM"
  "SJoinLobby\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_l"
  "obby\030\002 \001(\006\022\024\n\014persona_name\030\003 \001(\t\"\317\002\n\036CMs"
  "gClientMMSJoinLobbyResponse\022\016\n\006app_id\030\001 "
  "\001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022 \n\030chat_room"
  "_enter_response\030\003 \001(\005\022\023\n\013max_members\030\004 \001"
  "(\005\022\022\n\nlobby_type\030\005 \001(\005\022\023\n\013lobby_flags\030\006 "
  "\001(\005\022\026\n\016steam_id_owner\030\007 \001(\006\022\020\n\010metadata\030"
  "\010 \001(\014\0227\n\007members\030\t \003(\0132&.CMsgClientMMSJo"
  "inLobbyResponse.Member\032B\n\006Member\022\020\n\010stea"
  "m_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\020\n\010meta"
  "data\030\003 \001(\014\"A\n\027CMsgClientMMSLeaveLobby\022\016\n"
  "\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\"]\n"
  "\037CMsgClientMMSLeaveLobbyResponse\022\016\n\006app_"
  "id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\022\n\007eres"
  "ult\030\003 \001(\005:\0012\"\240\002\n\031CMsgClientMMSGetLobbyLi"
  "st\022\016\n\006app_id\030\001 \001(\r\022\035\n\025num_lobbies_reques"
  "ted\030\003 \001(\005\022\017\n\007cell_id\030\004 \001(\r\022\034\n\024deprecated"
  "_public_ip\030\005 \001(\r\0222\n\007filters\030\006 \003(\0132!.CMsg"
  "ClientMMSGetLobbyList.Filter\022!\n\tpublic_i"
  "p\030\007 \001(\0132\016.CMsgIPAddress\032N\n\006Filter\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\023\n\013comparision\030\003 \001"
  "(\005\022\023\n\013filter_type\030\004 \001(\005\"\245\002\n!CMsgClientMM"
  "SGetLobbyListResponse\022\016\n\006app_id\030\001 \001(\r\022\022\n"
  "\007eresult\030\003 \001(\005:\0012\0229\n\007lobbies\030\004 \003(\0132(.CMs"
  "gClientMMSGetLobbyListResponse.Lobby\032\240\001\n"
  "\005Lobby\022\020\n\010steam_id\030\001 \001(\006\022\023\n\013max_members\030"
  "\002 \001(\005\022\022\n\nlobby_type\030\003 \001(\005\022\023\n\013lobby_flags"
  "\030\004 \001(\005\022\020\n\010metadata\030\005 \001(\014\022\023\n\013num_members\030"
  "\006 \001(\005\022\020\n\010distance\030\007 \001(\002\022\016\n\006weight\030\010 \001(\003\""
  "\254\001\n\031CMsgClientMMSSetLobbyData\022\016\n\006app_id\030"
  "\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\027\n\017steam_i"
  "d_member\030\003 \001(\006\022\023\n\013max_members\030\004 \001(\005\022\022\n\nl"
  "obby_type\030\005 \001(\005\022\023\n\013lobby_flags\030\006 \001(\005\022\020\n\010"
  "metadata\030\007 \001(\014\"_\n!CMsgClientMMSSetLobbyD"
  "ataResponse\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_"
  "lobby\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"C\n\031CMsgC"
  "lientMMSGetLobbyData\022\016\n\006app_id\030\001 \001(\r\022\026\n\016"
  "steam_id_lobby\030\002 \001(\006\"\355\002\n\026CMsgClientMMSLo"
  "bbyData\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobb"
  "y\030\002 \001(\006\022\023\n\013num_members\030\003 \001(\005\022\023\n\013max_memb"
  "ers\030\004 \001(\005\022\022\n\nlobby_type\030\005 \001(\005\022\023\n\013lobby_f"
  "lags\030\006 \001(\005\022\026\n\016steam_id_owner\030\007 \001(\006\022\020\n\010me"
  "tadata\030\010 \001(\014\022/\n\007members\030\t \003(\0132\036.CMsgClie"
  "ntMMSLobbyData.Member\022\024\n\014lobby_cellid\030\n "
  "\001(\r\022#\n\033owner_should_accept_changes\030\013 \001(\010"
  "\032B\n\006Member\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_"
  "name\030\002 \001(\t\022\020\n\010metadata\030\003 \001(\014\"w\n\035CMsgClie"
  "ntMMSSendLobbyChatMsg\022\016\n\006app_id\030\001 \001(\r\022\026\n"
  "\016steam_id_lobby\030\002 \001(\006\022\027\n\017steam_id_target"
  "\030\003 \001(\006\022\025\n\rlobby_message\030\004 \001(\014\"s\n\031CMsgCli"
  "entMMSLobbyChatMsg\022\016\n\006app_id\030\001 \001(\r\022\026\n\016st"
  "eam_id_lobby\030\002 \001(\006\022\027\n\017steam_id_sender\030\003 "
  "\001(\006\022\025\n\rlobby_message\030\004 \001(\014\"`\n\032CMsgClient"
  "MMSSetLobbyOwner\022\016\n\006app_id\030\001 \001(\r\022\026\n\016stea"
  "m_id_lobby\030\002 \001(\006\022\032\n\022steam_id_new_owner\030\003"
  " \001(\006\"`\n\"CMsgClientMMSSetLobbyOwnerRespon"
  "se\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001"
  "(\006\022\022\n\007eresult\030\003 \001(\005:\0012\"^\n\033CMsgClientMMSS"
  "etLobbyLinked\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_i"
  "d_lobby\030\002 \001(\006\022\027\n\017steam_id_lobby2\030\003 \001(\006\"\314"
  "\001\n\037CMsgClientMMSSetLobbyGameServer\022\016\n\006ap"
  "p_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022!\n\031de"
  "precated_game_server_ip\030\003 \001(\r\022\030\n\020game_se"
  "rver_port\030\004 \001(\r\022\034\n\024game_server_steam_id\030"
  "\005 \001(\006\022&\n\016game_server_ip\030\006 \001(\0132\016.CMsgIPAd"
  "dress\"\314\001\n\037CMsgClientMMSLobbyGameServerSe"
  "t\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001("
  "\006\022!\n\031deprecated_game_server_ip\030\003 \001(\r\022\030\n\020"
  "game_server_port\030\004 \001(\r\022\034\n\024game_server_st"
  "eam_id\030\005 \001(\006\022&\n\016game_server_ip\030\006 \001(\0132\016.C"
  "MsgIPAddress\"s\n\034CMsgClientMMSUserJoinedL"
  "obby\022\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002"
  " \001(\006\022\025\n\rsteam_id_user\030\003 \001(\006\022\024\n\014persona_n"
  "ame\030\004 \001(\t\"q\n\032CMsgClientMMSUserLeftLobby\022"
  "\016\n\006app_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022"
  "\025\n\rsteam_id_user\030\003 \001(\006\022\024\n\014persona_name\030\004"
  " \001(\t\"c\n\032CMsgClientMMSInviteToLobby\022\016\n\006ap"
  "p_id\030\001 \001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022\035\n\025st"
  "eam_id_user_invited\030\003 \001(\006\"x\n\033CMsgClientM"
  "MSGetLobbyStatus\022\016\n\006app_id\030\001 \001(\r\022\026\n\016stea"
  "m_id_lobby\030\002 \001(\006\022\030\n\020claim_membership\030\003 \001"
  "(\010\022\027\n\017claim_ownership\030\004 \001(\010\"\215\001\n#CMsgClie"
  "ntMMSGetLobbyStatusResponse\022\016\n\006app_id\030\001 "
  "\001(\r\022\026\n\016steam_id_lobby\030\002 \001(\006\022>\n\014lobby_sta"
  "tus\030\003 \001(\0162\020.EMMSLobbyStatus:\026EMMSLobbySt"
  "atusInvalid*\210\001\n\017EMMSLobbyStatus\022\032\n\026EMMSL"
  "obbyStatusInvalid\020\000\022\031\n\025EMMSLobbyStatusEx"
  "ists\020\001\022\037\n\033EMMSLobbyStatusDoesNotExist\020\002\022"
  "\035\n\031EMMSLobbyStatusNotAMember\020\003B\037H\001\200\001\000\252\002\027"
  "OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fmms_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fmms_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fmms_2eproto = {
  false, false, 4183, descriptor_table_protodef_steammessages_5fclientserver_5fmms_2eproto, "steammessages_clientserver_mms.proto", 
  &descriptor_table_steammessages_5fclientserver_5fmms_2eproto_once, descriptor_table_steammessages_5fclientserver_5fmms_2eproto_deps, 2, 29,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fmms_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fmms_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fmms_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fmms_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_5fmms_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fmms_2eproto);
  return descriptor_table_steammessages_5fclientserver_5fmms_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fmms_2eproto(&descriptor_table_steammessages_5fclientserver_5fmms_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMMSLobbyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fmms_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientserver_5fmms_2eproto[0];
}
bool EMMSLobbyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgClientMMSSetRatelimitPolicyOnClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetRatelimitPolicyOnClient>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_rate_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_per_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_milliseconds_per_data_update(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientMMSSetRatelimitPolicyOnClient::CMsgClientMMSSetRatelimitPolicyOnClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetRatelimitPolicyOnClient)
}
CMsgClientMMSSetRatelimitPolicyOnClient::CMsgClientMMSSetRatelimitPolicyOnClient(const CMsgClientMMSSetRatelimitPolicyOnClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&milliseconds_per_data_update_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(milliseconds_per_data_update_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetRatelimitPolicyOnClient)
}

void CMsgClientMMSSetRatelimitPolicyOnClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&milliseconds_per_data_update_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(milliseconds_per_data_update_));
}

CMsgClientMMSSetRatelimitPolicyOnClient::~CMsgClientMMSSetRatelimitPolicyOnClient() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetRatelimitPolicyOnClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetRatelimitPolicyOnClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSSetRatelimitPolicyOnClient::ArenaDtor(void* object) {
  CMsgClientMMSSetRatelimitPolicyOnClient* _this = reinterpret_cast< CMsgClientMMSSetRatelimitPolicyOnClient* >(object);
  (void)_this;
}
void CMsgClientMMSSetRatelimitPolicyOnClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetRatelimitPolicyOnClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetRatelimitPolicyOnClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&milliseconds_per_data_update_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(milliseconds_per_data_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetRatelimitPolicyOnClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_rate_limits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_rate_limits(&has_bits);
          enable_rate_limits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seconds_per_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds_per_message(&has_bits);
          seconds_per_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 milliseconds_per_data_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_milliseconds_per_data_update(&has_bits);
          milliseconds_per_data_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetRatelimitPolicyOnClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional bool enable_rate_limits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_rate_limits(), target);
  }

  // optional int32 seconds_per_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seconds_per_message(), target);
  }

  // optional int32 milliseconds_per_data_update = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_milliseconds_per_data_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetRatelimitPolicyOnClient)
  return target;
}

size_t CMsgClientMMSSetRatelimitPolicyOnClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional bool enable_rate_limits = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 seconds_per_message = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seconds_per_message());
    }

    // optional int32 milliseconds_per_data_update = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_milliseconds_per_data_update());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetRatelimitPolicyOnClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetRatelimitPolicyOnClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetRatelimitPolicyOnClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetRatelimitPolicyOnClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetRatelimitPolicyOnClient)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetRatelimitPolicyOnClient::MergeFrom(const CMsgClientMMSSetRatelimitPolicyOnClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_rate_limits_ = from.enable_rate_limits_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_per_message_ = from.seconds_per_message_;
    }
    if (cached_has_bits & 0x00000008u) {
      milliseconds_per_data_update_ = from.milliseconds_per_data_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetRatelimitPolicyOnClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetRatelimitPolicyOnClient::CopyFrom(const CMsgClientMMSSetRatelimitPolicyOnClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetRatelimitPolicyOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetRatelimitPolicyOnClient::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetRatelimitPolicyOnClient::InternalSwap(CMsgClientMMSSetRatelimitPolicyOnClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetRatelimitPolicyOnClient, milliseconds_per_data_update_)
      + sizeof(CMsgClientMMSSetRatelimitPolicyOnClient::milliseconds_per_data_update_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetRatelimitPolicyOnClient, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetRatelimitPolicyOnClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSCreateLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSCreateLobby>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_persona_name_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgClientMMSCreateLobby* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgIPAddress&
CMsgClientMMSCreateLobby::_Internal::public_ip(const CMsgClientMMSCreateLobby* msg) {
  return *msg->public_ip_;
}
void CMsgClientMMSCreateLobby::clear_public_ip() {
  if (public_ip_ != nullptr) public_ip_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSCreateLobby)
}
CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby(const CMsgClientMMSCreateLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  persona_name_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name_owner()) {
    persona_name_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name_owner(), 
      GetArena());
  }
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::CMsgIPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(deprecated_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSCreateLobby)
}

void CMsgClientMMSCreateLobby::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
persona_name_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&public_ip_)) + sizeof(deprecated_public_ip_));
}

CMsgClientMMSCreateLobby::~CMsgClientMMSCreateLobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSCreateLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSCreateLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persona_name_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_ip_;
}

void CMsgClientMMSCreateLobby::ArenaDtor(void* object) {
  CMsgClientMMSCreateLobby* _this = reinterpret_cast< CMsgClientMMSCreateLobby* >(object);
  (void)_this;
}
void CMsgClientMMSCreateLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSCreateLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSCreateLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSCreateLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      persona_name_owner_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(public_ip_ != nullptr);
      public_ip_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cell_id_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(cell_id_));
  }
  deprecated_public_ip_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSCreateLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lobby_flags(&has_bits);
          lobby_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_deprecated_public_ip(&has_bits);
          deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string persona_name_owner = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_persona_name_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSCreateLobby.persona_name_owner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSCreateLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSCreateLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_members(), target);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lobby_type(), target);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lobby_flags(), target);
  }

  // optional uint32 cell_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cell_id(), target);
  }

  // optional uint32 deprecated_public_ip = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_deprecated_public_ip(), target);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_metadata(), target);
  }

  // optional string persona_name_owner = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name_owner().data(), static_cast<int>(this->_internal_persona_name_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSCreateLobby.persona_name_owner");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_persona_name_owner(), target);
  }

  // optional .CMsgIPAddress public_ip = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::public_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSCreateLobby)
  return target;
}

size_t CMsgClientMMSCreateLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSCreateLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional string persona_name_owner = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name_owner());
    }

    // optional .CMsgIPAddress public_ip = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_ip_);
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 max_members = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_members());
    }

    // optional int32 lobby_type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_flags());
    }

    // optional uint32 cell_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

  }
  // optional uint32 deprecated_public_ip = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deprecated_public_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSCreateLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSCreateLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSCreateLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSCreateLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSCreateLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSCreateLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSCreateLobby::MergeFrom(const CMsgClientMMSCreateLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSCreateLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_persona_name_owner(from._internal_persona_name_owner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      lobby_flags_ = from.lobby_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_deprecated_public_ip(from._internal_deprecated_public_ip());
  }
}

void CMsgClientMMSCreateLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSCreateLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobby::CopyFrom(const CMsgClientMMSCreateLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSCreateLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSCreateLobby::InternalSwap(CMsgClientMMSCreateLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  persona_name_owner_.Swap(&other->persona_name_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSCreateLobby, deprecated_public_ip_)
      + sizeof(CMsgClientMMSCreateLobby::deprecated_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSCreateLobby, public_ip_)>(
          reinterpret_cast<char*>(&public_ip_),
          reinterpret_cast<char*>(&other->public_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSCreateLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSCreateLobbyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSCreateLobbyResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSCreateLobbyResponse)
}
CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse(const CMsgClientMMSCreateLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSCreateLobbyResponse)
}

void CMsgClientMMSCreateLobbyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
eresult_ = 2;
}

CMsgClientMMSCreateLobbyResponse::~CMsgClientMMSCreateLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSCreateLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSCreateLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSCreateLobbyResponse::ArenaDtor(void* object) {
  CMsgClientMMSCreateLobbyResponse* _this = reinterpret_cast< CMsgClientMMSCreateLobbyResponse* >(object);
  (void)_this;
}
void CMsgClientMMSCreateLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSCreateLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSCreateLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSCreateLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSCreateLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSCreateLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSCreateLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSCreateLobbyResponse)
  return target;
}

size_t CMsgClientMMSCreateLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSCreateLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSCreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSCreateLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSCreateLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSCreateLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSCreateLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const CMsgClientMMSCreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSCreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSCreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const CMsgClientMMSCreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSCreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSCreateLobbyResponse::InternalSwap(CMsgClientMMSCreateLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, app_id_)
      + sizeof(CMsgClientMMSCreateLobbyResponse::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSCreateLobbyResponse, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSCreateLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSJoinLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSJoinLobby>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSJoinLobby)
}
CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby(const CMsgClientMMSJoinLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSJoinLobby)
}

void CMsgClientMMSJoinLobby::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSJoinLobby::~CMsgClientMMSJoinLobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSJoinLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSJoinLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobby::ArenaDtor(void* object) {
  CMsgClientMMSJoinLobby* _this = reinterpret_cast< CMsgClientMMSJoinLobby* >(object);
  (void)_this;
}
void CMsgClientMMSJoinLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSJoinLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSJoinLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSJoinLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSJoinLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSJoinLobby.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSJoinLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSJoinLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSJoinLobby.persona_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persona_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSJoinLobby)
  return target;
}

size_t CMsgClientMMSJoinLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSJoinLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSJoinLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSJoinLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSJoinLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSJoinLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSJoinLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobby::MergeFrom(const CMsgClientMMSJoinLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSJoinLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSJoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobby::CopyFrom(const CMsgClientMMSJoinLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSJoinLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobby::InternalSwap(CMsgClientMMSJoinLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSJoinLobby, app_id_)
      + sizeof(CMsgClientMMSJoinLobby::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSJoinLobby, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSJoinLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSJoinLobbyResponse_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSJoinLobbyResponse_Member>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSJoinLobbyResponse.Member)
}
CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member(const CMsgClientMMSJoinLobbyResponse_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSJoinLobbyResponse.Member)
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientMMSJoinLobbyResponse_Member::~CMsgClientMMSJoinLobbyResponse_Member() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSJoinLobbyResponse.Member)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobbyResponse_Member::ArenaDtor(void* object) {
  CMsgClientMMSJoinLobbyResponse_Member* _this = reinterpret_cast< CMsgClientMMSJoinLobbyResponse_Member* >(object);
  (void)_this;
}
void CMsgClientMMSJoinLobbyResponse_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSJoinLobbyResponse_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSJoinLobbyResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSJoinLobbyResponse.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmpty();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSJoinLobbyResponse_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSJoinLobbyResponse.Member.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSJoinLobbyResponse_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSJoinLobbyResponse.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSJoinLobbyResponse.Member.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSJoinLobbyResponse.Member)
  return target;
}

size_t CMsgClientMMSJoinLobbyResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSJoinLobbyResponse.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSJoinLobbyResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobbyResponse_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSJoinLobbyResponse_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSJoinLobbyResponse.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSJoinLobbyResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSJoinLobbyResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSJoinLobbyResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSJoinLobbyResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse_Member::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobbyResponse_Member::InternalSwap(CMsgClientMMSJoinLobbyResponse_Member* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSJoinLobbyResponse_Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSJoinLobbyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSJoinLobbyResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_room_enter_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steam_id_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSJoinLobbyResponse)
}
CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse(const CMsgClientMMSJoinLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSJoinLobbyResponse)
}

void CMsgClientMMSJoinLobbyResponse::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
}

CMsgClientMMSJoinLobbyResponse::~CMsgClientMMSJoinLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSJoinLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSJoinLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSJoinLobbyResponse::ArenaDtor(void* object) {
  CMsgClientMMSJoinLobbyResponse* _this = reinterpret_cast< CMsgClientMMSJoinLobbyResponse* >(object);
  (void)_this;
}
void CMsgClientMMSJoinLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSJoinLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSJoinLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSJoinLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_flags_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSJoinLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 chat_room_enter_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chat_room_enter_response(&has_bits);
          chat_room_enter_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lobby_flags(&has_bits);
          lobby_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_steam_id_owner(&has_bits);
          steam_id_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientMMSJoinLobbyResponse.Member members = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSJoinLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSJoinLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional int32 chat_room_enter_response = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chat_room_enter_response(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lobby_flags(), target);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steam_id_owner(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // repeated .CMsgClientMMSJoinLobbyResponse.Member members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSJoinLobbyResponse)
  return target;
}

size_t CMsgClientMMSJoinLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSJoinLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientMMSJoinLobbyResponse.Member members = 9;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 chat_room_enter_response = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chat_room_enter_response());
    }

    // optional int32 max_members = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_members());
    }

    // optional int32 lobby_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_type());
    }

    // optional fixed64 steam_id_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_flags = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSJoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSJoinLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSJoinLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSJoinLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSJoinLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const CMsgClientMMSJoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSJoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_room_enter_response_ = from.chat_room_enter_response_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_owner_ = from.steam_id_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSJoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const CMsgClientMMSJoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSJoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSJoinLobbyResponse::InternalSwap(CMsgClientMMSJoinLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, lobby_flags_)
      + sizeof(CMsgClientMMSJoinLobbyResponse::lobby_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSJoinLobbyResponse, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSJoinLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSLeaveLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSLeaveLobby>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSLeaveLobby)
}
CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby(const CMsgClientMMSLeaveLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSLeaveLobby)
}

void CMsgClientMMSLeaveLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSLeaveLobby::~CMsgClientMMSLeaveLobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSLeaveLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSLeaveLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSLeaveLobby::ArenaDtor(void* object) {
  CMsgClientMMSLeaveLobby* _this = reinterpret_cast< CMsgClientMMSLeaveLobby* >(object);
  (void)_this;
}
void CMsgClientMMSLeaveLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSLeaveLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSLeaveLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSLeaveLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSLeaveLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSLeaveLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSLeaveLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSLeaveLobby)
  return target;
}

size_t CMsgClientMMSLeaveLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSLeaveLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLeaveLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSLeaveLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLeaveLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSLeaveLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSLeaveLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSLeaveLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLeaveLobby::MergeFrom(const CMsgClientMMSLeaveLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSLeaveLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLeaveLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSLeaveLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobby::CopyFrom(const CMsgClientMMSLeaveLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSLeaveLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSLeaveLobby::InternalSwap(CMsgClientMMSLeaveLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSLeaveLobby, app_id_)
      + sizeof(CMsgClientMMSLeaveLobby::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSLeaveLobby, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSLeaveLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSLeaveLobbyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSLeaveLobbyResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSLeaveLobbyResponse)
}
CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse(const CMsgClientMMSLeaveLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSLeaveLobbyResponse)
}

void CMsgClientMMSLeaveLobbyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
eresult_ = 2;
}

CMsgClientMMSLeaveLobbyResponse::~CMsgClientMMSLeaveLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSLeaveLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSLeaveLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSLeaveLobbyResponse::ArenaDtor(void* object) {
  CMsgClientMMSLeaveLobbyResponse* _this = reinterpret_cast< CMsgClientMMSLeaveLobbyResponse* >(object);
  (void)_this;
}
void CMsgClientMMSLeaveLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSLeaveLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSLeaveLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSLeaveLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSLeaveLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSLeaveLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSLeaveLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSLeaveLobbyResponse)
  return target;
}

size_t CMsgClientMMSLeaveLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSLeaveLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSLeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLeaveLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSLeaveLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSLeaveLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSLeaveLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSLeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSLeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSLeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSLeaveLobbyResponse::InternalSwap(CMsgClientMMSLeaveLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, app_id_)
      + sizeof(CMsgClientMMSLeaveLobbyResponse::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSLeaveLobbyResponse, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSLeaveLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyList_Filter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyList_Filter>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comparision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyList.Filter)
}
CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter(const CMsgClientMMSGetLobbyList_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  ::memcpy(&comparision_, &from.comparision_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&comparision_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyList.Filter)
}

void CMsgClientMMSGetLobbyList_Filter::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&comparision_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&comparision_)) + sizeof(filter_type_));
}

CMsgClientMMSGetLobbyList_Filter::~CMsgClientMMSGetLobbyList_Filter() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyList.Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyList_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSGetLobbyList_Filter::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyList_Filter* _this = reinterpret_cast< CMsgClientMMSGetLobbyList_Filter* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyList_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyList_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyList_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyList.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&comparision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_type_) -
        reinterpret_cast<char*>(&comparision_)) + sizeof(filter_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyList_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSGetLobbyList.Filter.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSGetLobbyList.Filter.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 comparision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_comparision(&has_bits);
          comparision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 filter_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filter_type(&has_bits);
          filter_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyList_Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyList.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSGetLobbyList.Filter.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSGetLobbyList.Filter.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional int32 comparision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_comparision(), target);
  }

  // optional int32 filter_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_filter_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyList.Filter)
  return target;
}

size_t CMsgClientMMSGetLobbyList_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyList.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional int32 comparision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_comparision());
    }

    // optional int32 filter_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_filter_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyList.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyList_Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyList_Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyList.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyList.Filter)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyList.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      comparision_ = from.comparision_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_type_ = from.filter_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyList.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyList.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList_Filter::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyList_Filter::InternalSwap(CMsgClientMMSGetLobbyList_Filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, filter_type_)
      + sizeof(CMsgClientMMSGetLobbyList_Filter::filter_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyList_Filter, comparision_)>(
          reinterpret_cast<char*>(&comparision_),
          reinterpret_cast<char*>(&other->comparision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyList_Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyList>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_lobbies_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgClientMMSGetLobbyList* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgIPAddress&
CMsgClientMMSGetLobbyList::_Internal::public_ip(const CMsgClientMMSGetLobbyList* msg) {
  return *msg->public_ip_;
}
void CMsgClientMMSGetLobbyList::clear_public_ip() {
  if (public_ip_ != nullptr) public_ip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyList)
}
CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList(const CMsgClientMMSGetLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::CMsgIPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(deprecated_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyList)
}

void CMsgClientMMSGetLobbyList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_public_ip_) -
    reinterpret_cast<char*>(&public_ip_)) + sizeof(deprecated_public_ip_));
}

CMsgClientMMSGetLobbyList::~CMsgClientMMSGetLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete public_ip_;
}

void CMsgClientMMSGetLobbyList::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyList* _this = reinterpret_cast< CMsgClientMMSGetLobbyList* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(public_ip_ != nullptr);
    public_ip_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_public_ip_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(deprecated_public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_lobbies_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_lobbies_requested(&has_bits);
          num_lobbies_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_deprecated_public_ip(&has_bits);
          deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientMMSGetLobbyList.Filter filters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 num_lobbies_requested = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_lobbies_requested(), target);
  }

  // optional uint32 cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cell_id(), target);
  }

  // optional uint32 deprecated_public_ip = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_deprecated_public_ip(), target);
  }

  // repeated .CMsgClientMMSGetLobbyList.Filter filters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_filters(i), target, stream);
  }

  // optional .CMsgIPAddress public_ip = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::public_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyList)
  return target;
}

size_t CMsgClientMMSGetLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientMMSGetLobbyList.Filter filters = 6;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgIPAddress public_ip = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_ip_);
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 num_lobbies_requested = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_lobbies_requested());
    }

    // optional uint32 cell_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

    // optional uint32 deprecated_public_ip = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_public_ip());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyList)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyList::MergeFrom(const CMsgClientMMSGetLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_lobbies_requested_ = from.num_lobbies_requested_;
    }
    if (cached_has_bits & 0x00000008u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      deprecated_public_ip_ = from.deprecated_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList::CopyFrom(const CMsgClientMMSGetLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyList::InternalSwap(CMsgClientMMSGetLobbyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyList, deprecated_public_ip_)
      + sizeof(CMsgClientMMSGetLobbyList::deprecated_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyList, public_ip_)>(
          reinterpret_cast<char*>(&public_ip_),
          reinterpret_cast<char*>(&other->public_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyListResponse_Lobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyListResponse_Lobby>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_members(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyListResponse.Lobby)
}
CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby(const CMsgClientMMSGetLobbyListResponse_Lobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyListResponse.Lobby)
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(distance_));
}

CMsgClientMMSGetLobbyListResponse_Lobby::~CMsgClientMMSGetLobbyListResponse_Lobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyListResponse.Lobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSGetLobbyListResponse_Lobby::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyListResponse_Lobby* _this = reinterpret_cast< CMsgClientMMSGetLobbyListResponse_Lobby* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyListResponse_Lobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyListResponse_Lobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyListResponse_Lobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyListResponse_Lobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 max_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lobby_flags(&has_bits);
          lobby_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_members = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_members(&has_bits);
          num_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyListResponse_Lobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional int32 max_members = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_members(), target);
  }

  // optional int32 lobby_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lobby_type(), target);
  }

  // optional int32 lobby_flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lobby_flags(), target);
  }

  // optional bytes metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  // optional int32 num_members = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_members(), target);
  }

  // optional float distance = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_distance(), target);
  }

  // optional int64 weight = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyListResponse.Lobby)
  return target;
}

size_t CMsgClientMMSGetLobbyListResponse_Lobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 max_members = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_members());
    }

    // optional int32 lobby_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_flags());
    }

    // optional int32 num_members = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_members());
    }

    // optional int64 weight = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_weight());
    }

    // optional float distance = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyListResponse_Lobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyListResponse_Lobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyListResponse.Lobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyListResponse.Lobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_flags_ = from.lobby_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyListResponse.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse_Lobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::InternalSwap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, distance_)
      + sizeof(CMsgClientMMSGetLobbyListResponse_Lobby::distance_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyListResponse_Lobby, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyListResponse_Lobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyListResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobbies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyListResponse)
}
CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse(const CMsgClientMMSGetLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyListResponse)
}

void CMsgClientMMSGetLobbyListResponse::SharedCtor() {
app_id_ = 0u;
eresult_ = 2;
}

CMsgClientMMSGetLobbyListResponse::~CMsgClientMMSGetLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSGetLobbyListResponse::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyListResponse* _this = reinterpret_cast< CMsgClientMMSGetLobbyListResponse* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobbies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  // repeated .CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lobbies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyListResponse)
  return target;
}

size_t CMsgClientMMSGetLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const CMsgClientMMSGetLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const CMsgClientMMSGetLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyListResponse::InternalSwap(CMsgClientMMSGetLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobbies_.InternalSwap(&other->lobbies_);
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSetLobbyData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetLobbyData>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_member(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetLobbyData)
}
CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData(const CMsgClientMMSSetLobbyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetLobbyData)
}

void CMsgClientMMSSetLobbyData::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_flags_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
}

CMsgClientMMSSetLobbyData::~CMsgClientMMSSetLobbyData() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetLobbyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetLobbyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSSetLobbyData::ArenaDtor(void* object) {
  CMsgClientMMSSetLobbyData* _this = reinterpret_cast< CMsgClientMMSSetLobbyData* >(object);
  (void)_this;
}
void CMsgClientMMSSetLobbyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_flags_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetLobbyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_member(&has_bits);
          steam_id_member_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 max_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lobby_flags(&has_bits);
          lobby_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetLobbyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_member = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_member(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lobby_flags(), target);
  }

  // optional bytes metadata = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetLobbyData)
  return target;
}

size_t CMsgClientMMSSetLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetLobbyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes metadata = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 max_members = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_members());
    }

    // optional fixed64 steam_id_member = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_type());
    }

    // optional int32 lobby_flags = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetLobbyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyData::MergeFrom(const CMsgClientMMSSetLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_member_ = from.steam_id_member_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyData::CopyFrom(const CMsgClientMMSSetLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyData::InternalSwap(CMsgClientMMSSetLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyData, lobby_flags_)
      + sizeof(CMsgClientMMSSetLobbyData::lobby_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyData, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetLobbyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSetLobbyDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetLobbyDataResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetLobbyDataResponse)
}
CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse(const CMsgClientMMSSetLobbyDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetLobbyDataResponse)
}

void CMsgClientMMSSetLobbyDataResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
eresult_ = 2;
}

CMsgClientMMSSetLobbyDataResponse::~CMsgClientMMSSetLobbyDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetLobbyDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetLobbyDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSSetLobbyDataResponse::ArenaDtor(void* object) {
  CMsgClientMMSSetLobbyDataResponse* _this = reinterpret_cast< CMsgClientMMSSetLobbyDataResponse* >(object);
  (void)_this;
}
void CMsgClientMMSSetLobbyDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetLobbyDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetLobbyDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetLobbyDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetLobbyDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetLobbyDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetLobbyDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetLobbyDataResponse)
  return target;
}

size_t CMsgClientMMSSetLobbyDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetLobbyDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetLobbyDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetLobbyDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetLobbyDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetLobbyDataResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetLobbyDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetLobbyDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetLobbyDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyDataResponse::InternalSwap(CMsgClientMMSSetLobbyDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, app_id_)
      + sizeof(CMsgClientMMSSetLobbyDataResponse::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyDataResponse, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetLobbyDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyData>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyData)
}
CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData(const CMsgClientMMSGetLobbyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyData)
}

void CMsgClientMMSGetLobbyData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSGetLobbyData::~CMsgClientMMSGetLobbyData() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSGetLobbyData::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyData* _this = reinterpret_cast< CMsgClientMMSGetLobbyData* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyData)
  return target;
}

size_t CMsgClientMMSGetLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyData::MergeFrom(const CMsgClientMMSGetLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyData::CopyFrom(const CMsgClientMMSGetLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyData::InternalSwap(CMsgClientMMSGetLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyData, app_id_)
      + sizeof(CMsgClientMMSGetLobbyData::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyData, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSLobbyData_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSLobbyData_Member>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSLobbyData.Member)
}
CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member(const CMsgClientMMSLobbyData_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSLobbyData.Member)
}

void CMsgClientMMSLobbyData_Member::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientMMSLobbyData_Member::~CMsgClientMMSLobbyData_Member() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSLobbyData.Member)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSLobbyData_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyData_Member::ArenaDtor(void* object) {
  CMsgClientMMSLobbyData_Member* _this = reinterpret_cast< CMsgClientMMSLobbyData_Member* >(object);
  (void)_this;
}
void CMsgClientMMSLobbyData_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSLobbyData_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSLobbyData_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSLobbyData.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmpty();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSLobbyData_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSLobbyData.Member.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSLobbyData_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSLobbyData.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSLobbyData.Member.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSLobbyData.Member)
  return target;
}

size_t CMsgClientMMSLobbyData_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSLobbyData.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional bytes metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSLobbyData.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyData_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSLobbyData_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSLobbyData.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSLobbyData.Member)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const CMsgClientMMSLobbyData_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSLobbyData.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSLobbyData.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const CMsgClientMMSLobbyData_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSLobbyData.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData_Member::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyData_Member::InternalSwap(CMsgClientMMSLobbyData_Member* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSLobbyData_Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSLobbyData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSLobbyData>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_members(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steam_id_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_owner_should_accept_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgClientMMSLobbyData::CMsgClientMMSLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSLobbyData)
}
CMsgClientMMSLobbyData::CMsgClientMMSLobbyData(const CMsgClientMMSLobbyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_should_accept_changes_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(owner_should_accept_changes_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSLobbyData)
}

void CMsgClientMMSLobbyData::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_should_accept_changes_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(owner_should_accept_changes_));
}

CMsgClientMMSLobbyData::~CMsgClientMMSLobbyData() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSLobbyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSLobbyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyData::ArenaDtor(void* object) {
  CMsgClientMMSLobbyData* _this = reinterpret_cast< CMsgClientMMSLobbyData* >(object);
  (void)_this;
}
void CMsgClientMMSLobbyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_flags_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_flags_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&lobby_cellid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_should_accept_changes_) -
        reinterpret_cast<char*>(&lobby_cellid_)) + sizeof(owner_should_accept_changes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSLobbyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 num_members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_members(&has_bits);
          num_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lobby_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lobby_flags(&has_bits);
          lobby_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_steam_id_owner(&has_bits);
          steam_id_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientMMSLobbyData.Member members = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_cellid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_lobby_cellid(&has_bits);
          lobby_cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool owner_should_accept_changes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_owner_should_accept_changes(&has_bits);
          owner_should_accept_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSLobbyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional int32 num_members = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_members(), target);
  }

  // optional int32 max_members = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_members(), target);
  }

  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lobby_type(), target);
  }

  // optional int32 lobby_flags = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lobby_flags(), target);
  }

  // optional fixed64 steam_id_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steam_id_owner(), target);
  }

  // optional bytes metadata = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_metadata(), target);
  }

  // repeated .CMsgClientMMSLobbyData.Member members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_members(i), target, stream);
  }

  // optional uint32 lobby_cellid = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lobby_cellid(), target);
  }

  // optional bool owner_should_accept_changes = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_owner_should_accept_changes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSLobbyData)
  return target;
}

size_t CMsgClientMMSLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSLobbyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientMMSLobbyData.Member members = 9;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes metadata = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 num_members = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_members());
    }

    // optional int32 max_members = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_members());
    }

    // optional int32 lobby_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_type());
    }

    // optional fixed64 steam_id_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 lobby_flags = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lobby_flags());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 lobby_cellid = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_cellid());
    }

    // optional bool owner_should_accept_changes = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSLobbyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSLobbyData)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyData::MergeFrom(const CMsgClientMMSLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_id_owner_ = from.steam_id_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_flags_ = from.lobby_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      lobby_cellid_ = from.lobby_cellid_;
    }
    if (cached_has_bits & 0x00000200u) {
      owner_should_accept_changes_ = from.owner_should_accept_changes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData::CopyFrom(const CMsgClientMMSLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyData::InternalSwap(CMsgClientMMSLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSLobbyData, owner_should_accept_changes_)
      + sizeof(CMsgClientMMSLobbyData::owner_should_accept_changes_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSLobbyData, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSLobbyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSendLobbyChatMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSendLobbyChatMsg>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lobby_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSendLobbyChatMsg)
}
CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg(const CMsgClientMMSSendLobbyChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lobby_message()) {
    lobby_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lobby_message(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSendLobbyChatMsg)
}

void CMsgClientMMSSendLobbyChatMsg::SharedCtor() {
lobby_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSSendLobbyChatMsg::~CMsgClientMMSSendLobbyChatMsg() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSendLobbyChatMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSendLobbyChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lobby_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSSendLobbyChatMsg::ArenaDtor(void* object) {
  CMsgClientMMSSendLobbyChatMsg* _this = reinterpret_cast< CMsgClientMMSSendLobbyChatMsg* >(object);
  (void)_this;
}
void CMsgClientMMSSendLobbyChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSendLobbyChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSendLobbyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSendLobbyChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lobby_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSendLobbyChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_target(&has_bits);
          steam_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes lobby_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lobby_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSendLobbyChatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSendLobbyChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_target(), target);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_lobby_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSendLobbyChatMsg)
  return target;
}

size_t CMsgClientMMSSendLobbyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSendLobbyChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes lobby_message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_lobby_message());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_target = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSendLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSendLobbyChatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSendLobbyChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSendLobbyChatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSendLobbyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSendLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lobby_message(from._internal_lobby_message());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_target_ = from.steam_id_target_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSendLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSendLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSendLobbyChatMsg::IsInitialized() const {
  return true;
}

void CMsgClientMMSSendLobbyChatMsg::InternalSwap(CMsgClientMMSSendLobbyChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_message_.Swap(&other->lobby_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, app_id_)
      + sizeof(CMsgClientMMSSendLobbyChatMsg::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSendLobbyChatMsg, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSendLobbyChatMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSLobbyChatMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSLobbyChatMsg>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lobby_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSLobbyChatMsg)
}
CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg(const CMsgClientMMSLobbyChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lobby_message()) {
    lobby_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lobby_message(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSLobbyChatMsg)
}

void CMsgClientMMSLobbyChatMsg::SharedCtor() {
lobby_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSLobbyChatMsg::~CMsgClientMMSLobbyChatMsg() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSLobbyChatMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSLobbyChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lobby_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSLobbyChatMsg::ArenaDtor(void* object) {
  CMsgClientMMSLobbyChatMsg* _this = reinterpret_cast< CMsgClientMMSLobbyChatMsg* >(object);
  (void)_this;
}
void CMsgClientMMSLobbyChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSLobbyChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSLobbyChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSLobbyChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lobby_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSLobbyChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_sender(&has_bits);
          steam_id_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes lobby_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lobby_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSLobbyChatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSLobbyChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_sender(), target);
  }

  // optional bytes lobby_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_lobby_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSLobbyChatMsg)
  return target;
}

size_t CMsgClientMMSLobbyChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSLobbyChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes lobby_message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_lobby_message());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_sender = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyChatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSLobbyChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSLobbyChatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSLobbyChatMsg)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const CMsgClientMMSLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSLobbyChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lobby_message(from._internal_lobby_message());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_sender_ = from.steam_id_sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const CMsgClientMMSLobbyChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSLobbyChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyChatMsg::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyChatMsg::InternalSwap(CMsgClientMMSLobbyChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_message_.Swap(&other->lobby_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, app_id_)
      + sizeof(CMsgClientMMSLobbyChatMsg::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSLobbyChatMsg, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSLobbyChatMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSetLobbyOwner::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetLobbyOwner>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id_new_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetLobbyOwner)
}
CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner(const CMsgClientMMSSetLobbyOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetLobbyOwner)
}

void CMsgClientMMSSetLobbyOwner::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSSetLobbyOwner::~CMsgClientMMSSetLobbyOwner() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetLobbyOwner)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetLobbyOwner::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSSetLobbyOwner::ArenaDtor(void* object) {
  CMsgClientMMSSetLobbyOwner* _this = reinterpret_cast< CMsgClientMMSSetLobbyOwner* >(object);
  (void)_this;
}
void CMsgClientMMSSetLobbyOwner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetLobbyOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetLobbyOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetLobbyOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetLobbyOwner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_new_owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_new_owner(&has_bits);
          steam_id_new_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetLobbyOwner::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetLobbyOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_new_owner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_new_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetLobbyOwner)
  return target;
}

size_t CMsgClientMMSSetLobbyOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetLobbyOwner)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_new_owner = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetLobbyOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyOwner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetLobbyOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetLobbyOwner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetLobbyOwner)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const CMsgClientMMSSetLobbyOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetLobbyOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_new_owner_ = from.steam_id_new_owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetLobbyOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const CMsgClientMMSSetLobbyOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetLobbyOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwner::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyOwner::InternalSwap(CMsgClientMMSSetLobbyOwner* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, app_id_)
      + sizeof(CMsgClientMMSSetLobbyOwner::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyOwner, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetLobbyOwner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSetLobbyOwnerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetLobbyOwnerResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetLobbyOwnerResponse)
}
CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse(const CMsgClientMMSSetLobbyOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetLobbyOwnerResponse)
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
eresult_ = 2;
}

CMsgClientMMSSetLobbyOwnerResponse::~CMsgClientMMSSetLobbyOwnerResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetLobbyOwnerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSSetLobbyOwnerResponse::ArenaDtor(void* object) {
  CMsgClientMMSSetLobbyOwnerResponse* _this = reinterpret_cast< CMsgClientMMSSetLobbyOwnerResponse* >(object);
  (void)_this;
}
void CMsgClientMMSSetLobbyOwnerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetLobbyOwnerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetLobbyOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetLobbyOwnerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetLobbyOwnerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetLobbyOwnerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetLobbyOwnerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetLobbyOwnerResponse)
  return target;
}

size_t CMsgClientMMSSetLobbyOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetLobbyOwnerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetLobbyOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyOwnerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetLobbyOwnerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetLobbyOwnerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetLobbyOwnerResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetLobbyOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetLobbyOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetLobbyOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwnerResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyOwnerResponse::InternalSwap(CMsgClientMMSSetLobbyOwnerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, app_id_)
      + sizeof(CMsgClientMMSSetLobbyOwnerResponse::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyOwnerResponse, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetLobbyOwnerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSetLobbyLinked::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetLobbyLinked>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id_lobby2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetLobbyLinked)
}
CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked(const CMsgClientMMSSetLobbyLinked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetLobbyLinked)
}

void CMsgClientMMSSetLobbyLinked::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSSetLobbyLinked::~CMsgClientMMSSetLobbyLinked() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetLobbyLinked)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetLobbyLinked::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSSetLobbyLinked::ArenaDtor(void* object) {
  CMsgClientMMSSetLobbyLinked* _this = reinterpret_cast< CMsgClientMMSSetLobbyLinked* >(object);
  (void)_this;
}
void CMsgClientMMSSetLobbyLinked::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetLobbyLinked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetLobbyLinked::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetLobbyLinked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetLobbyLinked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_lobby2(&has_bits);
          steam_id_lobby2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetLobbyLinked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetLobbyLinked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_lobby2 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_lobby2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetLobbyLinked)
  return target;
}

size_t CMsgClientMMSSetLobbyLinked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetLobbyLinked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_lobby2 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetLobbyLinked)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyLinked* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetLobbyLinked>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetLobbyLinked)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetLobbyLinked)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const CMsgClientMMSSetLobbyLinked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetLobbyLinked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby2_ = from.steam_id_lobby2_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetLobbyLinked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const CMsgClientMMSSetLobbyLinked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetLobbyLinked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyLinked::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyLinked::InternalSwap(CMsgClientMMSSetLobbyLinked* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, app_id_)
      + sizeof(CMsgClientMMSSetLobbyLinked::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyLinked, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetLobbyLinked::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSSetLobbyGameServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSSetLobbyGameServer>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_game_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgIPAddress& game_server_ip(const CMsgClientMMSSetLobbyGameServer* msg);
  static void set_has_game_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgIPAddress&
CMsgClientMMSSetLobbyGameServer::_Internal::game_server_ip(const CMsgClientMMSSetLobbyGameServer* msg) {
  return *msg->game_server_ip_;
}
void CMsgClientMMSSetLobbyGameServer::clear_game_server_ip() {
  if (game_server_ip_ != nullptr) game_server_ip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSSetLobbyGameServer)
}
CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer(const CMsgClientMMSSetLobbyGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_server_ip()) {
    game_server_ip_ = new ::CMsgIPAddress(*from.game_server_ip_);
  } else {
    game_server_ip_ = nullptr;
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSSetLobbyGameServer)
}

void CMsgClientMMSSetLobbyGameServer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_server_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&game_server_ip_)) + sizeof(game_server_port_));
}

CMsgClientMMSSetLobbyGameServer::~CMsgClientMMSSetLobbyGameServer() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSSetLobbyGameServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSSetLobbyGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_server_ip_;
}

void CMsgClientMMSSetLobbyGameServer::ArenaDtor(void* object) {
  CMsgClientMMSSetLobbyGameServer* _this = reinterpret_cast< CMsgClientMMSSetLobbyGameServer* >(object);
  (void)_this;
}
void CMsgClientMMSSetLobbyGameServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSSetLobbyGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSSetLobbyGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSSetLobbyGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_server_ip_ != nullptr);
    game_server_ip_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_port_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSSetLobbyGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_game_server_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deprecated_game_server_ip(&has_bits);
          deprecated_game_server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_server_port(&has_bits);
          game_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_server_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_game_server_steam_id(&has_bits);
          game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress game_server_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_server_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSSetLobbyGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSSetLobbyGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional uint32 deprecated_game_server_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deprecated_game_server_ip(), target);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_server_port(), target);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_game_server_steam_id(), target);
  }

  // optional .CMsgIPAddress game_server_ip = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::game_server_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSSetLobbyGameServer)
  return target;
}

size_t CMsgClientMMSSetLobbyGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSSetLobbyGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgIPAddress game_server_ip = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_server_ip_);
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 deprecated_game_server_ip = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_game_server_ip());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_port = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_server_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSSetLobbyGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSSetLobbyGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSSetLobbyGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSSetLobbyGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSSetLobbyGameServer)
    MergeFrom(*source);
  }
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const CMsgClientMMSSetLobbyGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSSetLobbyGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_server_ip()->::CMsgIPAddress::MergeFrom(from._internal_game_server_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_game_server_ip_ = from.deprecated_game_server_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_server_port_ = from.game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSSetLobbyGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const CMsgClientMMSSetLobbyGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSSetLobbyGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyGameServer::IsInitialized() const {
  return true;
}

void CMsgClientMMSSetLobbyGameServer::InternalSwap(CMsgClientMMSSetLobbyGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, game_server_port_)
      + sizeof(CMsgClientMMSSetLobbyGameServer::game_server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSSetLobbyGameServer, game_server_ip_)>(
          reinterpret_cast<char*>(&game_server_ip_),
          reinterpret_cast<char*>(&other->game_server_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSSetLobbyGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSLobbyGameServerSet::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSLobbyGameServerSet>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_game_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgIPAddress& game_server_ip(const CMsgClientMMSLobbyGameServerSet* msg);
  static void set_has_game_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgIPAddress&
CMsgClientMMSLobbyGameServerSet::_Internal::game_server_ip(const CMsgClientMMSLobbyGameServerSet* msg) {
  return *msg->game_server_ip_;
}
void CMsgClientMMSLobbyGameServerSet::clear_game_server_ip() {
  if (game_server_ip_ != nullptr) game_server_ip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSLobbyGameServerSet)
}
CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet(const CMsgClientMMSLobbyGameServerSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_server_ip()) {
    game_server_ip_ = new ::CMsgIPAddress(*from.game_server_ip_);
  } else {
    game_server_ip_ = nullptr;
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSLobbyGameServerSet)
}

void CMsgClientMMSLobbyGameServerSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_server_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_server_port_) -
    reinterpret_cast<char*>(&game_server_ip_)) + sizeof(game_server_port_));
}

CMsgClientMMSLobbyGameServerSet::~CMsgClientMMSLobbyGameServerSet() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSLobbyGameServerSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSLobbyGameServerSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_server_ip_;
}

void CMsgClientMMSLobbyGameServerSet::ArenaDtor(void* object) {
  CMsgClientMMSLobbyGameServerSet* _this = reinterpret_cast< CMsgClientMMSLobbyGameServerSet* >(object);
  (void)_this;
}
void CMsgClientMMSLobbyGameServerSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSLobbyGameServerSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSLobbyGameServerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSLobbyGameServerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_server_ip_ != nullptr);
    game_server_ip_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_server_port_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSLobbyGameServerSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_game_server_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deprecated_game_server_ip(&has_bits);
          deprecated_game_server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_server_port(&has_bits);
          game_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_server_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_game_server_steam_id(&has_bits);
          game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress game_server_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_server_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSLobbyGameServerSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSLobbyGameServerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional uint32 deprecated_game_server_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deprecated_game_server_ip(), target);
  }

  // optional uint32 game_server_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_server_port(), target);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_game_server_steam_id(), target);
  }

  // optional .CMsgIPAddress game_server_ip = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::game_server_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSLobbyGameServerSet)
  return target;
}

size_t CMsgClientMMSLobbyGameServerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSLobbyGameServerSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgIPAddress game_server_ip = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_server_ip_);
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 deprecated_game_server_ip = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_game_server_ip());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_port = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_server_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSLobbyGameServerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSLobbyGameServerSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSLobbyGameServerSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSLobbyGameServerSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSLobbyGameServerSet)
    MergeFrom(*source);
  }
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const CMsgClientMMSLobbyGameServerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSLobbyGameServerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_server_ip()->::CMsgIPAddress::MergeFrom(from._internal_game_server_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_game_server_ip_ = from.deprecated_game_server_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_steam_id_ = from.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_server_port_ = from.game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSLobbyGameServerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const CMsgClientMMSLobbyGameServerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSLobbyGameServerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyGameServerSet::IsInitialized() const {
  return true;
}

void CMsgClientMMSLobbyGameServerSet::InternalSwap(CMsgClientMMSLobbyGameServerSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, game_server_port_)
      + sizeof(CMsgClientMMSLobbyGameServerSet::game_server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSLobbyGameServerSet, game_server_ip_)>(
          reinterpret_cast<char*>(&game_server_ip_),
          reinterpret_cast<char*>(&other->game_server_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSLobbyGameServerSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSUserJoinedLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSUserJoinedLobby>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSUserJoinedLobby)
}
CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby(const CMsgClientMMSUserJoinedLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSUserJoinedLobby)
}

void CMsgClientMMSUserJoinedLobby::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSUserJoinedLobby::~CMsgClientMMSUserJoinedLobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSUserJoinedLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSUserJoinedLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSUserJoinedLobby::ArenaDtor(void* object) {
  CMsgClientMMSUserJoinedLobby* _this = reinterpret_cast< CMsgClientMMSUserJoinedLobby* >(object);
  (void)_this;
}
void CMsgClientMMSUserJoinedLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSUserJoinedLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSUserJoinedLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSUserJoinedLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSUserJoinedLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_user(&has_bits);
          steam_id_user_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSUserJoinedLobby.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSUserJoinedLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSUserJoinedLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_user(), target);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSUserJoinedLobby.persona_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_persona_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSUserJoinedLobby)
  return target;
}

size_t CMsgClientMMSUserJoinedLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSUserJoinedLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSUserJoinedLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSUserJoinedLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSUserJoinedLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSUserJoinedLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSUserJoinedLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const CMsgClientMMSUserJoinedLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSUserJoinedLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSUserJoinedLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const CMsgClientMMSUserJoinedLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSUserJoinedLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserJoinedLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSUserJoinedLobby::InternalSwap(CMsgClientMMSUserJoinedLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, app_id_)
      + sizeof(CMsgClientMMSUserJoinedLobby::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSUserJoinedLobby, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSUserJoinedLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSUserLeftLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSUserLeftLobby>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSUserLeftLobby)
}
CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby(const CMsgClientMMSUserLeftLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSUserLeftLobby)
}

void CMsgClientMMSUserLeftLobby::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSUserLeftLobby::~CMsgClientMMSUserLeftLobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSUserLeftLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSUserLeftLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientMMSUserLeftLobby::ArenaDtor(void* object) {
  CMsgClientMMSUserLeftLobby* _this = reinterpret_cast< CMsgClientMMSUserLeftLobby* >(object);
  (void)_this;
}
void CMsgClientMMSUserLeftLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSUserLeftLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSUserLeftLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSUserLeftLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSUserLeftLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_user(&has_bits);
          steam_id_user_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientMMSUserLeftLobby.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSUserLeftLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSUserLeftLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_user(), target);
  }

  // optional string persona_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientMMSUserLeftLobby.persona_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_persona_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSUserLeftLobby)
  return target;
}

size_t CMsgClientMMSUserLeftLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSUserLeftLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSUserLeftLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSUserLeftLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSUserLeftLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSUserLeftLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSUserLeftLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const CMsgClientMMSUserLeftLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSUserLeftLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSUserLeftLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const CMsgClientMMSUserLeftLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSUserLeftLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserLeftLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSUserLeftLobby::InternalSwap(CMsgClientMMSUserLeftLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, app_id_)
      + sizeof(CMsgClientMMSUserLeftLobby::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSUserLeftLobby, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSUserLeftLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSInviteToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSInviteToLobby>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id_user_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSInviteToLobby)
}
CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby(const CMsgClientMMSInviteToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSInviteToLobby)
}

void CMsgClientMMSInviteToLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
}

CMsgClientMMSInviteToLobby::~CMsgClientMMSInviteToLobby() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSInviteToLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSInviteToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSInviteToLobby::ArenaDtor(void* object) {
  CMsgClientMMSInviteToLobby* _this = reinterpret_cast< CMsgClientMMSInviteToLobby* >(object);
  (void)_this;
}
void CMsgClientMMSInviteToLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSInviteToLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSInviteToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSInviteToLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_user_invited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id_user_invited(&has_bits);
          steam_id_user_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSInviteToLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSInviteToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional fixed64 steam_id_user_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id_user_invited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSInviteToLobby)
  return target;
}

size_t CMsgClientMMSInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSInviteToLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user_invited = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSInviteToLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSInviteToLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSInviteToLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSInviteToLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSInviteToLobby)
    MergeFrom(*source);
  }
}

void CMsgClientMMSInviteToLobby::MergeFrom(const CMsgClientMMSInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_user_invited_ = from.steam_id_user_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSInviteToLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSInviteToLobby::CopyFrom(const CMsgClientMMSInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgClientMMSInviteToLobby::InternalSwap(CMsgClientMMSInviteToLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSInviteToLobby, app_id_)
      + sizeof(CMsgClientMMSInviteToLobby::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSInviteToLobby, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSInviteToLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyStatus>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claim_membership(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_claim_ownership(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientMMSGetLobbyStatus::CMsgClientMMSGetLobbyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyStatus)
}
CMsgClientMMSGetLobbyStatus::CMsgClientMMSGetLobbyStatus(const CMsgClientMMSGetLobbyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&claim_ownership_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(claim_ownership_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyStatus)
}

void CMsgClientMMSGetLobbyStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&claim_ownership_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(claim_ownership_));
}

CMsgClientMMSGetLobbyStatus::~CMsgClientMMSGetLobbyStatus() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSGetLobbyStatus::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyStatus* _this = reinterpret_cast< CMsgClientMMSGetLobbyStatus* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&claim_ownership_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(claim_ownership_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool claim_membership = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_claim_membership(&has_bits);
          claim_membership_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool claim_ownership = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_claim_ownership(&has_bits);
          claim_ownership_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional bool claim_membership = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_claim_membership(), target);
  }

  // optional bool claim_ownership = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_claim_ownership(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyStatus)
  return target;
}

size_t CMsgClientMMSGetLobbyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional bool claim_membership = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool claim_ownership = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyStatus)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyStatus::MergeFrom(const CMsgClientMMSGetLobbyStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      claim_membership_ = from.claim_membership_;
    }
    if (cached_has_bits & 0x00000008u) {
      claim_ownership_ = from.claim_ownership_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyStatus::CopyFrom(const CMsgClientMMSGetLobbyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyStatus::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyStatus::InternalSwap(CMsgClientMMSGetLobbyStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyStatus, claim_ownership_)
      + sizeof(CMsgClientMMSGetLobbyStatus::claim_ownership_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyStatus, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientMMSGetLobbyStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientMMSGetLobbyStatusResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_id_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientMMSGetLobbyStatusResponse::CMsgClientMMSGetLobbyStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientMMSGetLobbyStatusResponse)
}
CMsgClientMMSGetLobbyStatusResponse::CMsgClientMMSGetLobbyStatusResponse(const CMsgClientMMSGetLobbyStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_lobby_, &from.steam_id_lobby_,
    static_cast<size_t>(reinterpret_cast<char*>(&lobby_status_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_status_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientMMSGetLobbyStatusResponse)
}

void CMsgClientMMSGetLobbyStatusResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_lobby_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_status_) -
    reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_status_));
}

CMsgClientMMSGetLobbyStatusResponse::~CMsgClientMMSGetLobbyStatusResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientMMSGetLobbyStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientMMSGetLobbyStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientMMSGetLobbyStatusResponse::ArenaDtor(void* object) {
  CMsgClientMMSGetLobbyStatusResponse* _this = reinterpret_cast< CMsgClientMMSGetLobbyStatusResponse* >(object);
  (void)_this;
}
void CMsgClientMMSGetLobbyStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientMMSGetLobbyStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientMMSGetLobbyStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientMMSGetLobbyStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_lobby_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_status_) -
        reinterpret_cast<char*>(&steam_id_lobby_)) + sizeof(lobby_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientMMSGetLobbyStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_lobby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id_lobby(&has_bits);
          steam_id_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .EMMSLobbyStatus lobby_status = 3 [default = EMMSLobbyStatusInvalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMMSLobbyStatus_IsValid(val))) {
            _internal_set_lobby_status(static_cast<::EMMSLobbyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientMMSGetLobbyStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientMMSGetLobbyStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_lobby(), target);
  }

  // optional .EMMSLobbyStatus lobby_status = 3 [default = EMMSLobbyStatusInvalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_lobby_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientMMSGetLobbyStatusResponse)
  return target;
}

size_t CMsgClientMMSGetLobbyStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientMMSGetLobbyStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id_lobby = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional .EMMSLobbyStatus lobby_status = 3 [default = EMMSLobbyStatusInvalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lobby_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientMMSGetLobbyStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientMMSGetLobbyStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientMMSGetLobbyStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientMMSGetLobbyStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientMMSGetLobbyStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientMMSGetLobbyStatusResponse)
    MergeFrom(*source);
  }
}

void CMsgClientMMSGetLobbyStatusResponse::MergeFrom(const CMsgClientMMSGetLobbyStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientMMSGetLobbyStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_lobby_ = from.steam_id_lobby_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_status_ = from.lobby_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientMMSGetLobbyStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientMMSGetLobbyStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyStatusResponse::CopyFrom(const CMsgClientMMSGetLobbyStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientMMSGetLobbyStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyStatusResponse::IsInitialized() const {
  return true;
}

void CMsgClientMMSGetLobbyStatusResponse::InternalSwap(CMsgClientMMSGetLobbyStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyStatusResponse, lobby_status_)
      + sizeof(CMsgClientMMSGetLobbyStatusResponse::lobby_status_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientMMSGetLobbyStatusResponse, steam_id_lobby_)>(
          reinterpret_cast<char*>(&steam_id_lobby_),
          reinterpret_cast<char*>(&other->steam_id_lobby_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientMMSGetLobbyStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetRatelimitPolicyOnClient* Arena::CreateMaybeMessage< ::CMsgClientMMSSetRatelimitPolicyOnClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetRatelimitPolicyOnClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSCreateLobby* Arena::CreateMaybeMessage< ::CMsgClientMMSCreateLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSCreateLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSCreateLobbyResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSCreateLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSCreateLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSJoinLobby* Arena::CreateMaybeMessage< ::CMsgClientMMSJoinLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSJoinLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSJoinLobbyResponse_Member* Arena::CreateMaybeMessage< ::CMsgClientMMSJoinLobbyResponse_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSJoinLobbyResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSJoinLobbyResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSJoinLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSJoinLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSLeaveLobby* Arena::CreateMaybeMessage< ::CMsgClientMMSLeaveLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSLeaveLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSLeaveLobbyResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSLeaveLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSLeaveLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyList_Filter* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyList_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyList_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyList* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyListResponse_Lobby* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyListResponse_Lobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyListResponse_Lobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyListResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetLobbyData* Arena::CreateMaybeMessage< ::CMsgClientMMSSetLobbyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetLobbyDataResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSSetLobbyDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetLobbyDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyData* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSLobbyData_Member* Arena::CreateMaybeMessage< ::CMsgClientMMSLobbyData_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSLobbyData_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSLobbyData* Arena::CreateMaybeMessage< ::CMsgClientMMSLobbyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSendLobbyChatMsg* Arena::CreateMaybeMessage< ::CMsgClientMMSSendLobbyChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSendLobbyChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSLobbyChatMsg* Arena::CreateMaybeMessage< ::CMsgClientMMSLobbyChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSLobbyChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetLobbyOwner* Arena::CreateMaybeMessage< ::CMsgClientMMSSetLobbyOwner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetLobbyOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetLobbyOwnerResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSSetLobbyOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetLobbyOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetLobbyLinked* Arena::CreateMaybeMessage< ::CMsgClientMMSSetLobbyLinked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetLobbyLinked >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSSetLobbyGameServer* Arena::CreateMaybeMessage< ::CMsgClientMMSSetLobbyGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSSetLobbyGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSLobbyGameServerSet* Arena::CreateMaybeMessage< ::CMsgClientMMSLobbyGameServerSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSLobbyGameServerSet >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSUserJoinedLobby* Arena::CreateMaybeMessage< ::CMsgClientMMSUserJoinedLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSUserJoinedLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSUserLeftLobby* Arena::CreateMaybeMessage< ::CMsgClientMMSUserLeftLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSUserLeftLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSInviteToLobby* Arena::CreateMaybeMessage< ::CMsgClientMMSInviteToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSInviteToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyStatus* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientMMSGetLobbyStatusResponse* Arena::CreateMaybeMessage< ::CMsgClientMMSGetLobbyStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientMMSGetLobbyStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
