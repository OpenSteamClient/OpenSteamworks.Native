// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_ufs.proto

#include "steammessages_clientserver_ufs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , file_size_(0u)
  , time_stamp_(PROTOBUF_ULONGLONG(0))
  , raw_file_size_(0u)
  , platforms_to_sync_deprecated_(0u)
  , cell_id_(0u)
  , can_encrypt_(false)
  , platforms_to_sync_(4294967295u){}
struct CMsgClientUFSUploadFileRequestDefaultTypeInternal {
  constexpr CMsgClientUFSUploadFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadFileRequestDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadFileRequestDefaultTypeInternal _CMsgClientUFSUploadFileRequest_default_instance_;
constexpr CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kv_headers_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , use_http_(false)
  , use_https_(false)
  , encrypt_file_(false)
  , eresult_(2){}
struct CMsgClientUFSUploadFileResponseDefaultTypeInternal {
  constexpr CMsgClientUFSUploadFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadFileResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadFileResponseDefaultTypeInternal _CMsgClientUFSUploadFileResponse_default_instance_;
constexpr CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , cub_file_(0u)
  , eresult_(2){}
struct CMsgClientUFSUploadCommit_FileDefaultTypeInternal {
  constexpr CMsgClientUFSUploadCommit_FileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadCommit_FileDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadCommit_File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadCommit_FileDefaultTypeInternal _CMsgClientUFSUploadCommit_File_default_instance_;
constexpr CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_(){}
struct CMsgClientUFSUploadCommitDefaultTypeInternal {
  constexpr CMsgClientUFSUploadCommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadCommitDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadCommitDefaultTypeInternal _CMsgClientUFSUploadCommit_default_instance_;
constexpr CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , eresult_(2){}
struct CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal {
  constexpr CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadCommitResponse_File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal _CMsgClientUFSUploadCommitResponse_File_default_instance_;
constexpr CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_(){}
struct CMsgClientUFSUploadCommitResponseDefaultTypeInternal {
  constexpr CMsgClientUFSUploadCommitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadCommitResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadCommitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadCommitResponseDefaultTypeInternal _CMsgClientUFSUploadCommitResponse_default_instance_;
constexpr CMsgClientUFSFileChunk::CMsgClientUFSFileChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_start_(0u){}
struct CMsgClientUFSFileChunkDefaultTypeInternal {
  constexpr CMsgClientUFSFileChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSFileChunkDefaultTypeInternal() {}
  union {
    CMsgClientUFSFileChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSFileChunkDefaultTypeInternal _CMsgClientUFSFileChunk_default_instance_;
constexpr CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientUFSTransferHeartbeatDefaultTypeInternal {
  constexpr CMsgClientUFSTransferHeartbeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSTransferHeartbeatDefaultTypeInternal() {}
  union {
    CMsgClientUFSTransferHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSTransferHeartbeatDefaultTypeInternal _CMsgClientUFSTransferHeartbeat_default_instance_;
constexpr CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2){}
struct CMsgClientUFSUploadFileFinishedDefaultTypeInternal {
  constexpr CMsgClientUFSUploadFileFinishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSUploadFileFinishedDefaultTypeInternal() {}
  union {
    CMsgClientUFSUploadFileFinished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSUploadFileFinishedDefaultTypeInternal _CMsgClientUFSUploadFileFinished_default_instance_;
constexpr CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , is_explicit_delete_(false){}
struct CMsgClientUFSDeleteFileRequestDefaultTypeInternal {
  constexpr CMsgClientUFSDeleteFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSDeleteFileRequestDefaultTypeInternal() {}
  union {
    CMsgClientUFSDeleteFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSDeleteFileRequestDefaultTypeInternal _CMsgClientUFSDeleteFileRequest_default_instance_;
constexpr CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2){}
struct CMsgClientUFSDeleteFileResponseDefaultTypeInternal {
  constexpr CMsgClientUFSDeleteFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSDeleteFileResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSDeleteFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSDeleteFileResponseDefaultTypeInternal _CMsgClientUFSDeleteFileResponse_default_instance_;
constexpr CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_to_query_()
  , send_path_prefixes_(false){}
struct CMsgClientUFSGetFileListForAppDefaultTypeInternal {
  constexpr CMsgClientUFSGetFileListForAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetFileListForAppDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetFileListForApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetFileListForAppDefaultTypeInternal _CMsgClientUFSGetFileListForApp_default_instance_;
constexpr CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , raw_file_size_(0u)
  , time_stamp_(PROTOBUF_ULONGLONG(0))
  , is_explicit_delete_(false)
  , platforms_to_sync_(0u)
  , path_prefix_index_(0u){}
struct CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal {
  constexpr CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetFileListForAppResponse_File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal _CMsgClientUFSGetFileListForAppResponse_File_default_instance_;
constexpr CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , path_prefixes_(){}
struct CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal {
  constexpr CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetFileListForAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal _CMsgClientUFSGetFileListForAppResponse_default_instance_;
constexpr CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , can_handle_http_(false){}
struct CMsgClientUFSDownloadRequestDefaultTypeInternal {
  constexpr CMsgClientUFSDownloadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSDownloadRequestDefaultTypeInternal() {}
  union {
    CMsgClientUFSDownloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSDownloadRequestDefaultTypeInternal _CMsgClientUFSDownloadRequest_default_instance_;
constexpr CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kv_headers_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , file_size_(0u)
  , time_stamp_(PROTOBUF_ULONGLONG(0))
  , raw_file_size_(0u)
  , is_explicit_delete_(false)
  , use_http_(false)
  , use_https_(false)
  , encrypted_(false)
  , eresult_(2){}
struct CMsgClientUFSDownloadResponseDefaultTypeInternal {
  constexpr CMsgClientUFSDownloadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSDownloadResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSDownloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSDownloadResponseDefaultTypeInternal _CMsgClientUFSDownloadResponse_default_instance_;
constexpr CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , am_session_token_(PROTOBUF_ULONGLONG(0))
  , protocol_version_(0u){}
struct CMsgClientUFSLoginRequestDefaultTypeInternal {
  constexpr CMsgClientUFSLoginRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSLoginRequestDefaultTypeInternal() {}
  union {
    CMsgClientUFSLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSLoginRequestDefaultTypeInternal _CMsgClientUFSLoginRequest_default_instance_;
constexpr CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgClientUFSLoginResponseDefaultTypeInternal {
  constexpr CMsgClientUFSLoginResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSLoginResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSLoginResponseDefaultTypeInternal _CMsgClientUFSLoginResponse_default_instance_;
constexpr CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hcontent_(PROTOBUF_ULONGLONG(18446744073709551615)){}
struct CMsgClientUFSGetUGCDetailsDefaultTypeInternal {
  constexpr CMsgClientUFSGetUGCDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetUGCDetailsDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetUGCDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetUGCDetailsDefaultTypeInternal _CMsgClientUFSGetUGCDetails_default_instance_;
constexpr CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rangechechost_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_encoded_sha1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , file_size_(0u)
  , steamid_creator_(PROTOBUF_ULONGLONG(0))
  , compressed_file_size_(0u)
  , eresult_(2){}
struct CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal {
  constexpr CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetUGCDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal _CMsgClientUFSGetUGCDetailsResponse_default_instance_;
constexpr CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CMsgClientUFSGetSingleFileInfoDefaultTypeInternal {
  constexpr CMsgClientUFSGetSingleFileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetSingleFileInfoDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetSingleFileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetSingleFileInfoDefaultTypeInternal _CMsgClientUFSGetSingleFileInfo_default_instance_;
constexpr CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , raw_file_size_(0u)
  , time_stamp_(PROTOBUF_ULONGLONG(0))
  , is_explicit_delete_(false)
  , eresult_(2){}
struct CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal {
  constexpr CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSGetSingleFileInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal _CMsgClientUFSGetSingleFileInfoResponse_default_instance_;
constexpr CMsgClientUFSShareFile::CMsgClientUFSShareFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CMsgClientUFSShareFileDefaultTypeInternal {
  constexpr CMsgClientUFSShareFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSShareFileDefaultTypeInternal() {}
  union {
    CMsgClientUFSShareFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSShareFileDefaultTypeInternal _CMsgClientUFSShareFile_default_instance_;
constexpr CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2)
  , hcontent_(PROTOBUF_ULONGLONG(18446744073709551615)){}
struct CMsgClientUFSShareFileResponseDefaultTypeInternal {
  constexpr CMsgClientUFSShareFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUFSShareFileResponseDefaultTypeInternal() {}
  union {
    CMsgClientUFSShareFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUFSShareFileResponseDefaultTypeInternal _CMsgClientUFSShareFileResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fufs_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5fufs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fufs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_5fufs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, platforms_to_sync_deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileRequest, can_encrypt_),
  2,
  3,
  5,
  0,
  4,
  1,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, use_http_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, http_host_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, http_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, kv_headers_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, use_https_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileResponse, encrypt_file_),
  7,
  0,
  4,
  1,
  2,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, cub_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit_File, file_name_),
  4,
  2,
  0,
  3,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommit, files_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse_File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse_File, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse_File, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse_File, sha_file_),
  2,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadCommitResponse, files_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSFileChunk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSFileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSFileChunk, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSFileChunk, file_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSFileChunk, data_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSTransferHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileFinished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileFinished, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSUploadFileFinished, sha_file_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileRequest, is_explicit_delete_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDeleteFileResponse, file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForApp, apps_to_query_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForApp, send_path_prefixes_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse_File, path_prefix_index_),
  2,
  0,
  1,
  4,
  3,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse, files_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetFileListForAppResponse, path_prefixes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadRequest, can_handle_http_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, use_http_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, http_host_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, http_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, kv_headers_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, use_https_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSDownloadResponse, encrypted_),
  12,
  4,
  5,
  7,
  0,
  6,
  8,
  9,
  1,
  2,
  3,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginRequest, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginRequest, am_session_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginRequest, apps_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSLoginResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetails, hcontent_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, steamid_creator_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, compressed_file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, rangechechost_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetUGCDetailsResponse, file_encoded_sha1_),
  8,
  0,
  4,
  1,
  6,
  5,
  7,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfo, file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSGetSingleFileInfoResponse, is_explicit_delete_),
  6,
  2,
  0,
  1,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFile, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFile, file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUFSShareFileResponse, hcontent_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::CMsgClientUFSUploadFileRequest)},
  { 25, 38, sizeof(::CMsgClientUFSUploadFileResponse)},
  { 46, 56, sizeof(::CMsgClientUFSUploadCommit_File)},
  { 61, -1, sizeof(::CMsgClientUFSUploadCommit)},
  { 67, 75, sizeof(::CMsgClientUFSUploadCommitResponse_File)},
  { 78, -1, sizeof(::CMsgClientUFSUploadCommitResponse)},
  { 84, 92, sizeof(::CMsgClientUFSFileChunk)},
  { 95, -1, sizeof(::CMsgClientUFSTransferHeartbeat)},
  { 100, 107, sizeof(::CMsgClientUFSUploadFileFinished)},
  { 109, 117, sizeof(::CMsgClientUFSDeleteFileRequest)},
  { 120, 127, sizeof(::CMsgClientUFSDeleteFileResponse)},
  { 129, 136, sizeof(::CMsgClientUFSGetFileListForApp)},
  { 138, 151, sizeof(::CMsgClientUFSGetFileListForAppResponse_File)},
  { 159, -1, sizeof(::CMsgClientUFSGetFileListForAppResponse)},
  { 166, 174, sizeof(::CMsgClientUFSDownloadRequest)},
  { 177, 195, sizeof(::CMsgClientUFSDownloadResponse)},
  { 208, 216, sizeof(::CMsgClientUFSLoginRequest)},
  { 219, 225, sizeof(::CMsgClientUFSLoginResponse)},
  { 226, 232, sizeof(::CMsgClientUFSGetUGCDetails)},
  { 233, 247, sizeof(::CMsgClientUFSGetUGCDetailsResponse)},
  { 256, 263, sizeof(::CMsgClientUFSGetSingleFileInfo)},
  { 265, 277, sizeof(::CMsgClientUFSGetSingleFileInfoResponse)},
  { 284, 291, sizeof(::CMsgClientUFSShareFile)},
  { 293, 300, sizeof(::CMsgClientUFSShareFileResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadCommit_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadCommit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadCommitResponse_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadCommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSFileChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSTransferHeartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSUploadFileFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSDeleteFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSDeleteFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetFileListForApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetFileListForAppResponse_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetFileListForAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSDownloadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSDownloadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSLoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSLoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetUGCDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetUGCDetailsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetSingleFileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSGetSingleFileInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSShareFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUFSShareFileResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fufs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_clientserver_ufs.proto\032 "
  "google/protobuf/descriptor.proto\032\030steamm"
  "essages_base.proto\"\206\002\n\036CMsgClientUFSUplo"
  "adFileRequest\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_si"
  "ze\030\002 \001(\r\022\025\n\rraw_file_size\030\003 \001(\r\022\020\n\010sha_f"
  "ile\030\004 \001(\014\022\022\n\ntime_stamp\030\005 \001(\004\022\021\n\tfile_na"
  "me\030\006 \001(\t\022$\n\034platforms_to_sync_deprecated"
  "\030\007 \001(\r\022%\n\021platforms_to_sync\030\010 \001(\r:\n42949"
  "67295\022\017\n\007cell_id\030\t \001(\r\022\023\n\013can_encrypt\030\n "
  "\001(\010\"\273\001\n\037CMsgClientUFSUploadFileResponse\022"
  "\022\n\007eresult\030\001 \001(\005:\0012\022\020\n\010sha_file\030\002 \001(\014\022\020\n"
  "\010use_http\030\003 \001(\010\022\021\n\thttp_host\030\004 \001(\t\022\020\n\010ht"
  "tp_url\030\005 \001(\t\022\022\n\nkv_headers\030\006 \001(\014\022\021\n\tuse_"
  "https\030\007 \001(\010\022\024\n\014encrypt_file\030\010 \001(\010\"\256\001\n\031CM"
  "sgClientUFSUploadCommit\022.\n\005files\030\001 \003(\0132\037"
  ".CMsgClientUFSUploadCommit.File\032a\n\004File\022"
  "\022\n\007eresult\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\020\n\010s"
  "ha_file\030\003 \001(\014\022\020\n\010cub_file\030\004 \001(\r\022\021\n\tfile_"
  "name\030\005 \001(\t\"\231\001\n!CMsgClientUFSUploadCommit"
  "Response\0226\n\005files\030\001 \003(\0132\'.CMsgClientUFSU"
  "ploadCommitResponse.File\032<\n\004File\022\022\n\007eres"
  "ult\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\020\n\010sha_file"
  "\030\003 \001(\014\"L\n\026CMsgClientUFSFileChunk\022\020\n\010sha_"
  "file\030\001 \001(\014\022\022\n\nfile_start\030\002 \001(\r\022\014\n\004data\030\003"
  " \001(\014\" \n\036CMsgClientUFSTransferHeartbeat\"G"
  "\n\037CMsgClientUFSUploadFileFinished\022\022\n\007ere"
  "sult\030\001 \001(\005:\0012\022\020\n\010sha_file\030\002 \001(\014\"_\n\036CMsgC"
  "lientUFSDeleteFileRequest\022\016\n\006app_id\030\001 \001("
  "\r\022\021\n\tfile_name\030\002 \001(\t\022\032\n\022is_explicit_dele"
  "te\030\003 \001(\010\"H\n\037CMsgClientUFSDeleteFileRespo"
  "nse\022\022\n\007eresult\030\001 \001(\005:\0012\022\021\n\tfile_name\030\002 \001"
  "(\t\"S\n\036CMsgClientUFSGetFileListForApp\022\025\n\r"
  "apps_to_query\030\001 \003(\r\022\032\n\022send_path_prefixe"
  "s\030\002 \001(\010\"\301\002\n&CMsgClientUFSGetFileListForA"
  "ppResponse\022;\n\005files\030\001 \003(\0132,.CMsgClientUF"
  "SGetFileListForAppResponse.File\022\025\n\rpath_"
  "prefixes\030\002 \003(\t\032\270\001\n\004File\022\016\n\006app_id\030\001 \001(\r\022"
  "\021\n\tfile_name\030\002 \001(\t\022\020\n\010sha_file\030\003 \001(\014\022\022\n\n"
  "time_stamp\030\004 \001(\004\022\025\n\rraw_file_size\030\005 \001(\r\022"
  "\032\n\022is_explicit_delete\030\006 \001(\010\022\031\n\021platforms"
  "_to_sync\030\007 \001(\r\022\031\n\021path_prefix_index\030\010 \001("
  "\r:\010\200\265\030\010\210\265\030\020\"Z\n\034CMsgClientUFSDownloadRequ"
  "est\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\022\027"
  "\n\017can_handle_http\030\003 \001(\010\"\240\002\n\035CMsgClientUF"
  "SDownloadResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\016\n"
  "\006app_id\030\002 \001(\r\022\021\n\tfile_size\030\003 \001(\r\022\025\n\rraw_"
  "file_size\030\004 \001(\r\022\020\n\010sha_file\030\005 \001(\014\022\022\n\ntim"
  "e_stamp\030\006 \001(\004\022\032\n\022is_explicit_delete\030\007 \001("
  "\010\022\020\n\010use_http\030\010 \001(\010\022\021\n\thttp_host\030\t \001(\t\022\020"
  "\n\010http_url\030\n \001(\t\022\022\n\nkv_headers\030\013 \001(\014\022\021\n\t"
  "use_https\030\014 \001(\010\022\021\n\tencrypted\030\r \001(\010\"]\n\031CM"
  "sgClientUFSLoginRequest\022\030\n\020protocol_vers"
  "ion\030\001 \001(\r\022\030\n\020am_session_token\030\002 \001(\004\022\014\n\004a"
  "pps\030\003 \003(\r\"0\n\032CMsgClientUFSLoginResponse\022"
  "\022\n\007eresult\030\001 \001(\005:\0012\"D\n\032CMsgClientUFSGetU"
  "GCDetails\022&\n\010hcontent\030\001 \001(\006:\02418446744073"
  "709551615\"\343\001\n\"CMsgClientUFSGetUGCDetails"
  "Response\022\022\n\007eresult\030\001 \001(\005:\0012\022\013\n\003url\030\002 \001("
  "\t\022\016\n\006app_id\030\003 \001(\r\022\020\n\010filename\030\004 \001(\t\022\027\n\017s"
  "teamid_creator\030\005 \001(\006\022\021\n\tfile_size\030\006 \001(\r\022"
  "\034\n\024compressed_file_size\030\007 \001(\r\022\025\n\rrangech"
  "echost\030\010 \001(\t\022\031\n\021file_encoded_sha1\030\t \001(\t\""
  "C\n\036CMsgClientUFSGetSingleFileInfo\022\016\n\006app"
  "_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\"\270\001\n&CMsgCli"
  "entUFSGetSingleFileInfoResponse\022\022\n\007eresu"
  "lt\030\001 \001(\005:\0012\022\016\n\006app_id\030\002 \001(\r\022\021\n\tfile_name"
  "\030\003 \001(\t\022\020\n\010sha_file\030\004 \001(\014\022\022\n\ntime_stamp\030\005"
  " \001(\004\022\025\n\rraw_file_size\030\006 \001(\r\022\032\n\022is_explic"
  "it_delete\030\007 \001(\010\";\n\026CMsgClientUFSShareFil"
  "e\022\016\n\006app_id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\"\\\n\036"
  "CMsgClientUFSShareFileResponse\022\022\n\007eresul"
  "t\030\001 \001(\005:\0012\022&\n\010hcontent\030\002 \001(\006:\0241844674407"
  "3709551615B\037H\001\200\001\000\252\002\027OpenSteamworks.Proto"
  "buf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fufs_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fufs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fufs_2eproto = {
  false, false, 2923, descriptor_table_protodef_steammessages_5fclientserver_5fufs_2eproto, "steammessages_clientserver_ufs.proto", 
  &descriptor_table_steammessages_5fclientserver_5fufs_2eproto_once, descriptor_table_steammessages_5fclientserver_5fufs_2eproto_deps, 2, 24,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fufs_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fufs_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fufs_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fufs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fufs_2eproto);
  return descriptor_table_steammessages_5fclientserver_5fufs_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fufs_2eproto(&descriptor_table_steammessages_5fclientserver_5fufs_2eproto);

// ===================================================================

class CMsgClientUFSUploadFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSUploadFileRequest>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platforms_to_sync_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_platforms_to_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_encrypt(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadFileRequest)
}
CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest(const CMsgClientUFSUploadFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&platforms_to_sync_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(platforms_to_sync_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadFileRequest)
}

void CMsgClientUFSUploadFileRequest::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_encrypt_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(can_encrypt_));
platforms_to_sync_ = 4294967295u;
}

CMsgClientUFSUploadFileRequest::~CMsgClientUFSUploadFileRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadFileRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileRequest::ArenaDtor(void* object) {
  CMsgClientUFSUploadFileRequest* _this = reinterpret_cast< CMsgClientUFSUploadFileRequest* >(object);
  (void)_this;
}
void CMsgClientUFSUploadFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cell_id_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(cell_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    can_encrypt_ = false;
    platforms_to_sync_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSUploadFileRequest.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platforms_to_sync_deprecated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_platforms_to_sync_deprecated(&has_bits);
          platforms_to_sync_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platforms_to_sync = 8 [default = 4294967295];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_platforms_to_sync(&has_bits);
          platforms_to_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_encrypt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_encrypt(&has_bits);
          can_encrypt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  // optional uint32 raw_file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_raw_file_size(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_file(), target);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time_stamp(), target);
  }

  // optional string file_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSUploadFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file_name(), target);
  }

  // optional uint32 platforms_to_sync_deprecated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_platforms_to_sync_deprecated(), target);
  }

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_platforms_to_sync(), target);
  }

  // optional uint32 cell_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cell_id(), target);
  }

  // optional bool can_encrypt = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_can_encrypt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadFileRequest)
  return target;
}

size_t CMsgClientUFSUploadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional string file_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 file_size = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_size());
    }

    // optional uint64 time_stamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time_stamp());
    }

    // optional uint32 raw_file_size = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raw_file_size());
    }

    // optional uint32 platforms_to_sync_deprecated = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platforms_to_sync_deprecated());
    }

    // optional uint32 cell_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool can_encrypt = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 8 [default = 4294967295];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platforms_to_sync());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadFileRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const CMsgClientUFSUploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      platforms_to_sync_deprecated_ = from.platforms_to_sync_deprecated_;
    }
    if (cached_has_bits & 0x00000080u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      can_encrypt_ = from.can_encrypt_;
    }
    if (cached_has_bits & 0x00000200u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const CMsgClientUFSUploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileRequest::InternalSwap(CMsgClientUFSUploadFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, can_encrypt_)
      + sizeof(CMsgClientUFSUploadFileRequest::can_encrypt_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSUploadFileRequest, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(platforms_to_sync_, other->platforms_to_sync_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSUploadFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSUploadFileResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_http(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_http_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_http_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kv_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_encrypt_file(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadFileResponse)
}
CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse(const CMsgClientUFSUploadFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  http_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_http_host()) {
    http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_host(), 
      GetArena());
  }
  http_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_http_url()) {
    http_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_url(), 
      GetArena());
  }
  kv_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kv_headers()) {
    kv_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kv_headers(), 
      GetArena());
  }
  ::memcpy(&use_http_, &from.use_http_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&use_http_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadFileResponse)
}

void CMsgClientUFSUploadFileResponse::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
http_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
http_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kv_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_http_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encrypt_file_) -
    reinterpret_cast<char*>(&use_http_)) + sizeof(encrypt_file_));
eresult_ = 2;
}

CMsgClientUFSUploadFileResponse::~CMsgClientUFSUploadFileResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadFileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kv_headers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileResponse::ArenaDtor(void* object) {
  CMsgClientUFSUploadFileResponse* _this = reinterpret_cast< CMsgClientUFSUploadFileResponse* >(object);
  (void)_this;
}
void CMsgClientUFSUploadFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      http_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      http_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      kv_headers_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&use_http_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_file_) -
      reinterpret_cast<char*>(&use_http_)) + sizeof(encrypt_file_));
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_http = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_http(&has_bits);
          use_http_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string http_host = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_http_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSUploadFileResponse.http_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string http_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_http_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSUploadFileResponse.http_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes kv_headers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_kv_headers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_https = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_file = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_encrypt_file(&has_bits);
          encrypt_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_file(), target);
  }

  // optional bool use_http = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_http(), target);
  }

  // optional string http_host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_host().data(), static_cast<int>(this->_internal_http_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSUploadFileResponse.http_host");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_http_host(), target);
  }

  // optional string http_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_url().data(), static_cast<int>(this->_internal_http_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSUploadFileResponse.http_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_http_url(), target);
  }

  // optional bytes kv_headers = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_kv_headers(), target);
  }

  // optional bool use_https = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_https(), target);
  }

  // optional bool encrypt_file = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_encrypt_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadFileResponse)
  return target;
}

size_t CMsgClientUFSUploadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional string http_host = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_host());
    }

    // optional string http_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_url());
    }

    // optional bytes kv_headers = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kv_headers());
    }

    // optional bool use_http = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_https = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_file = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const CMsgClientUFSUploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_http_host(from._internal_http_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_http_url(from._internal_http_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_kv_headers(from._internal_kv_headers());
    }
    if (cached_has_bits & 0x00000010u) {
      use_http_ = from.use_http_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000040u) {
      encrypt_file_ = from.encrypt_file_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const CMsgClientUFSUploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileResponse::InternalSwap(CMsgClientUFSUploadFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  http_host_.Swap(&other->http_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  http_url_.Swap(&other->http_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kv_headers_.Swap(&other->kv_headers_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, encrypt_file_)
      + sizeof(CMsgClientUFSUploadFileResponse::encrypt_file_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSUploadFileResponse, use_http_)>(
          reinterpret_cast<char*>(&use_http_),
          reinterpret_cast<char*>(&other->use_http_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSUploadCommit_File::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSUploadCommit_File>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cub_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadCommit.File)
}
CMsgClientUFSUploadCommit_File::CMsgClientUFSUploadCommit_File(const CMsgClientUFSUploadCommit_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadCommit.File)
}

void CMsgClientUFSUploadCommit_File::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cub_file_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(cub_file_));
eresult_ = 2;
}

CMsgClientUFSUploadCommit_File::~CMsgClientUFSUploadCommit_File() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadCommit.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadCommit_File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadCommit_File::ArenaDtor(void* object) {
  CMsgClientUFSUploadCommit_File* _this = reinterpret_cast< CMsgClientUFSUploadCommit_File* >(object);
  (void)_this;
}
void CMsgClientUFSUploadCommit_File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadCommit_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadCommit_File::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadCommit.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cub_file_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(cub_file_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadCommit_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cub_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cub_file(&has_bits);
          cub_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSUploadCommit.File.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadCommit_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadCommit.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sha_file(), target);
  }

  // optional uint32 cub_file = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cub_file(), target);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSUploadCommit.File.file_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadCommit.File)
  return target;
}

size_t CMsgClientUFSUploadCommit_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadCommit.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes sha_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional string file_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 cub_file = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cub_file());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommit_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadCommit.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommit_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadCommit_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadCommit.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadCommit.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommit_File::MergeFrom(const CMsgClientUFSUploadCommit_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadCommit.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cub_file_ = from.cub_file_;
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadCommit_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadCommit.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommit_File::CopyFrom(const CMsgClientUFSUploadCommit_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadCommit.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommit_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommit_File::InternalSwap(CMsgClientUFSUploadCommit_File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, cub_file_)
      + sizeof(CMsgClientUFSUploadCommit_File::cub_file_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSUploadCommit_File, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadCommit_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSUploadCommit::_Internal {
 public:
};

CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadCommit)
}
CMsgClientUFSUploadCommit::CMsgClientUFSUploadCommit(const CMsgClientUFSUploadCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadCommit)
}

void CMsgClientUFSUploadCommit::SharedCtor() {
}

CMsgClientUFSUploadCommit::~CMsgClientUFSUploadCommit() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadCommit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadCommit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSUploadCommit::ArenaDtor(void* object) {
  CMsgClientUFSUploadCommit* _this = reinterpret_cast< CMsgClientUFSUploadCommit* >(object);
  (void)_this;
}
void CMsgClientUFSUploadCommit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadCommit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientUFSUploadCommit.File files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadCommit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadCommit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientUFSUploadCommit.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadCommit)
  return target;
}

size_t CMsgClientUFSUploadCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadCommit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientUFSUploadCommit.File files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadCommit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadCommit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadCommit)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommit::MergeFrom(const CMsgClientUFSUploadCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
}

void CMsgClientUFSUploadCommit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommit::CopyFrom(const CMsgClientUFSUploadCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommit::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommit::InternalSwap(CMsgClientUFSUploadCommit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadCommit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSUploadCommitResponse_File::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSUploadCommitResponse_File>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadCommitResponse.File)
}
CMsgClientUFSUploadCommitResponse_File::CMsgClientUFSUploadCommitResponse_File(const CMsgClientUFSUploadCommitResponse_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadCommitResponse.File)
}

void CMsgClientUFSUploadCommitResponse_File::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
eresult_ = 2;
}

CMsgClientUFSUploadCommitResponse_File::~CMsgClientUFSUploadCommitResponse_File() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadCommitResponse.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadCommitResponse_File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadCommitResponse_File::ArenaDtor(void* object) {
  CMsgClientUFSUploadCommitResponse_File* _this = reinterpret_cast< CMsgClientUFSUploadCommitResponse_File* >(object);
  (void)_this;
}
void CMsgClientUFSUploadCommitResponse_File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadCommitResponse_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadCommitResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadCommitResponse.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_file_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadCommitResponse_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadCommitResponse_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadCommitResponse.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sha_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadCommitResponse.File)
  return target;
}

size_t CMsgClientUFSUploadCommitResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadCommitResponse.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sha_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommitResponse_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadCommitResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommitResponse_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadCommitResponse_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadCommitResponse.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadCommitResponse.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommitResponse_File::MergeFrom(const CMsgClientUFSUploadCommitResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadCommitResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadCommitResponse_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadCommitResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommitResponse_File::CopyFrom(const CMsgClientUFSUploadCommitResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadCommitResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommitResponse_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommitResponse_File::InternalSwap(CMsgClientUFSUploadCommitResponse_File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadCommitResponse_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSUploadCommitResponse::_Internal {
 public:
};

CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadCommitResponse)
}
CMsgClientUFSUploadCommitResponse::CMsgClientUFSUploadCommitResponse(const CMsgClientUFSUploadCommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadCommitResponse)
}

void CMsgClientUFSUploadCommitResponse::SharedCtor() {
}

CMsgClientUFSUploadCommitResponse::~CMsgClientUFSUploadCommitResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadCommitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadCommitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSUploadCommitResponse::ArenaDtor(void* object) {
  CMsgClientUFSUploadCommitResponse* _this = reinterpret_cast< CMsgClientUFSUploadCommitResponse* >(object);
  (void)_this;
}
void CMsgClientUFSUploadCommitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadCommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadCommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadCommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientUFSUploadCommitResponse.File files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadCommitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadCommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientUFSUploadCommitResponse.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadCommitResponse)
  return target;
}

size_t CMsgClientUFSUploadCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadCommitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientUFSUploadCommitResponse.File files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadCommitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadCommitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadCommitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadCommitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadCommitResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadCommitResponse::MergeFrom(const CMsgClientUFSUploadCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
}

void CMsgClientUFSUploadCommitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadCommitResponse::CopyFrom(const CMsgClientUFSUploadCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadCommitResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadCommitResponse::InternalSwap(CMsgClientUFSUploadCommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadCommitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSFileChunk::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSFileChunk>()._has_bits_);
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUFSFileChunk::CMsgClientUFSFileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSFileChunk)
}
CMsgClientUFSFileChunk::CMsgClientUFSFileChunk(const CMsgClientUFSFileChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  file_start_ = from.file_start_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSFileChunk)
}

void CMsgClientUFSFileChunk::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_start_ = 0u;
}

CMsgClientUFSFileChunk::~CMsgClientUFSFileChunk() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSFileChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSFileChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSFileChunk::ArenaDtor(void* object) {
  CMsgClientUFSFileChunk* _this = reinterpret_cast< CMsgClientUFSFileChunk* >(object);
  (void)_this;
}
void CMsgClientUFSFileChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSFileChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSFileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSFileChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  file_start_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSFileChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes sha_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_start(&has_bits);
          file_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSFileChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSFileChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_file = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha_file(), target);
  }

  // optional uint32 file_start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_start(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSFileChunk)
  return target;
}

size_t CMsgClientUFSFileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSFileChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sha_file = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 file_start = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSFileChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSFileChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSFileChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSFileChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSFileChunk)
    MergeFrom(*source);
  }
}

void CMsgClientUFSFileChunk::MergeFrom(const CMsgClientUFSFileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSFileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      file_start_ = from.file_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSFileChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSFileChunk::CopyFrom(const CMsgClientUFSFileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSFileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSFileChunk::IsInitialized() const {
  return true;
}

void CMsgClientUFSFileChunk::InternalSwap(CMsgClientUFSFileChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(file_start_, other->file_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSFileChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSTransferHeartbeat::_Internal {
 public:
};

CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSTransferHeartbeat)
}
CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat(const CMsgClientUFSTransferHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSTransferHeartbeat)
}

void CMsgClientUFSTransferHeartbeat::SharedCtor() {
}

CMsgClientUFSTransferHeartbeat::~CMsgClientUFSTransferHeartbeat() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSTransferHeartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSTransferHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSTransferHeartbeat::ArenaDtor(void* object) {
  CMsgClientUFSTransferHeartbeat* _this = reinterpret_cast< CMsgClientUFSTransferHeartbeat* >(object);
  (void)_this;
}
void CMsgClientUFSTransferHeartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSTransferHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSTransferHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSTransferHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSTransferHeartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSTransferHeartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSTransferHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSTransferHeartbeat)
  return target;
}

size_t CMsgClientUFSTransferHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSTransferHeartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSTransferHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSTransferHeartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSTransferHeartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSTransferHeartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSTransferHeartbeat)
    MergeFrom(*source);
  }
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const CMsgClientUFSTransferHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSTransferHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSTransferHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const CMsgClientUFSTransferHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSTransferHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSTransferHeartbeat::IsInitialized() const {
  return true;
}

void CMsgClientUFSTransferHeartbeat::InternalSwap(CMsgClientUFSTransferHeartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSTransferHeartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSUploadFileFinished::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSUploadFileFinished>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSUploadFileFinished)
}
CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished(const CMsgClientUFSUploadFileFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSUploadFileFinished)
}

void CMsgClientUFSUploadFileFinished::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eresult_ = 2;
}

CMsgClientUFSUploadFileFinished::~CMsgClientUFSUploadFileFinished() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSUploadFileFinished)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSUploadFileFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSUploadFileFinished::ArenaDtor(void* object) {
  CMsgClientUFSUploadFileFinished* _this = reinterpret_cast< CMsgClientUFSUploadFileFinished* >(object);
  (void)_this;
}
void CMsgClientUFSUploadFileFinished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSUploadFileFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSUploadFileFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSUploadFileFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSUploadFileFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSUploadFileFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSUploadFileFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bytes sha_file = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSUploadFileFinished)
  return target;
}

size_t CMsgClientUFSUploadFileFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSUploadFileFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes sha_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSUploadFileFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSUploadFileFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSUploadFileFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSUploadFileFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSUploadFileFinished)
    MergeFrom(*source);
  }
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const CMsgClientUFSUploadFileFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSUploadFileFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSUploadFileFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const CMsgClientUFSUploadFileFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSUploadFileFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileFinished::IsInitialized() const {
  return true;
}

void CMsgClientUFSUploadFileFinished::InternalSwap(CMsgClientUFSUploadFileFinished* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSUploadFileFinished::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSDeleteFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSDeleteFileRequest>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_explicit_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSDeleteFileRequest)
}
CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest(const CMsgClientUFSDeleteFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSDeleteFileRequest)
}

void CMsgClientUFSDeleteFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
}

CMsgClientUFSDeleteFileRequest::~CMsgClientUFSDeleteFileRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSDeleteFileRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSDeleteFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDeleteFileRequest::ArenaDtor(void* object) {
  CMsgClientUFSDeleteFileRequest* _this = reinterpret_cast< CMsgClientUFSDeleteFileRequest* >(object);
  (void)_this;
}
void CMsgClientUFSDeleteFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSDeleteFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSDeleteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSDeleteFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSDeleteFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSDeleteFileRequest.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_explicit_delete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_explicit_delete(&has_bits);
          is_explicit_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSDeleteFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSDeleteFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSDeleteFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // optional bool is_explicit_delete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_explicit_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSDeleteFileRequest)
  return target;
}

size_t CMsgClientUFSDeleteFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSDeleteFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional bool is_explicit_delete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSDeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDeleteFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSDeleteFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSDeleteFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSDeleteFileRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const CMsgClientUFSDeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSDeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSDeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const CMsgClientUFSDeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSDeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSDeleteFileRequest::InternalSwap(CMsgClientUFSDeleteFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, is_explicit_delete_)
      + sizeof(CMsgClientUFSDeleteFileRequest::is_explicit_delete_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSDeleteFileRequest, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSDeleteFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSDeleteFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSDeleteFileResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSDeleteFileResponse)
}
CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse(const CMsgClientUFSDeleteFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSDeleteFileResponse)
}

void CMsgClientUFSDeleteFileResponse::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eresult_ = 2;
}

CMsgClientUFSDeleteFileResponse::~CMsgClientUFSDeleteFileResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSDeleteFileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSDeleteFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDeleteFileResponse::ArenaDtor(void* object) {
  CMsgClientUFSDeleteFileResponse* _this = reinterpret_cast< CMsgClientUFSDeleteFileResponse* >(object);
  (void)_this;
}
void CMsgClientUFSDeleteFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSDeleteFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSDeleteFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSDeleteFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSDeleteFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSDeleteFileResponse.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSDeleteFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSDeleteFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSDeleteFileResponse.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSDeleteFileResponse)
  return target;
}

size_t CMsgClientUFSDeleteFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSDeleteFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSDeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDeleteFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSDeleteFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSDeleteFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSDeleteFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const CMsgClientUFSDeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSDeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSDeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const CMsgClientUFSDeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSDeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSDeleteFileResponse::InternalSwap(CMsgClientUFSDeleteFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSDeleteFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetFileListForApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSGetFileListForApp>()._has_bits_);
  static void set_has_send_path_prefixes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  apps_to_query_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetFileListForApp)
}
CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp(const CMsgClientUFSGetFileListForApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      apps_to_query_(from.apps_to_query_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  send_path_prefixes_ = from.send_path_prefixes_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetFileListForApp)
}

void CMsgClientUFSGetFileListForApp::SharedCtor() {
send_path_prefixes_ = false;
}

CMsgClientUFSGetFileListForApp::~CMsgClientUFSGetFileListForApp() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetFileListForApp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetFileListForApp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSGetFileListForApp::ArenaDtor(void* object) {
  CMsgClientUFSGetFileListForApp* _this = reinterpret_cast< CMsgClientUFSGetFileListForApp* >(object);
  (void)_this;
}
void CMsgClientUFSGetFileListForApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetFileListForApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetFileListForApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetFileListForApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_to_query_.Clear();
  send_path_prefixes_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetFileListForApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 apps_to_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_apps_to_query(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_apps_to_query(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_path_prefixes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_send_path_prefixes(&has_bits);
          send_path_prefixes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetFileListForApp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetFileListForApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  for (int i = 0, n = this->_internal_apps_to_query_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_apps_to_query(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool send_path_prefixes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_send_path_prefixes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetFileListForApp)
  return target;
}

size_t CMsgClientUFSGetFileListForApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetFileListForApp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 apps_to_query = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->apps_to_query_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_apps_to_query_size());
    total_size += data_size;
  }

  // optional bool send_path_prefixes = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetFileListForApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForApp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetFileListForApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetFileListForApp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetFileListForApp)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const CMsgClientUFSGetFileListForApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetFileListForApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_to_query_.MergeFrom(from.apps_to_query_);
  if (from._internal_has_send_path_prefixes()) {
    _internal_set_send_path_prefixes(from._internal_send_path_prefixes());
  }
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetFileListForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const CMsgClientUFSGetFileListForApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetFileListForApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForApp::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForApp::InternalSwap(CMsgClientUFSGetFileListForApp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_to_query_.InternalSwap(&other->apps_to_query_);
  swap(send_path_prefixes_, other->send_path_prefixes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetFileListForApp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetFileListForAppResponse_File::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSGetFileListForAppResponse_File>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_explicit_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_platforms_to_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_path_prefix_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetFileListForAppResponse.File)
}
CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File(const CMsgClientUFSGetFileListForAppResponse_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_prefix_index_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(path_prefix_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetFileListForAppResponse.File)
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&path_prefix_index_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(path_prefix_index_));
}

CMsgClientUFSGetFileListForAppResponse_File::~CMsgClientUFSGetFileListForAppResponse_File() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetFileListForAppResponse.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetFileListForAppResponse_File::ArenaDtor(void* object) {
  CMsgClientUFSGetFileListForAppResponse_File* _this = reinterpret_cast< CMsgClientUFSGetFileListForAppResponse_File* >(object);
  (void)_this;
}
void CMsgClientUFSGetFileListForAppResponse_File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetFileListForAppResponse_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetFileListForAppResponse_File::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetFileListForAppResponse.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_prefix_index_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(path_prefix_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetFileListForAppResponse_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetFileListForAppResponse.File.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_explicit_delete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_explicit_delete(&has_bits);
          is_explicit_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platforms_to_sync = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_platforms_to_sync(&has_bits);
          platforms_to_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 path_prefix_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_path_prefix_index(&has_bits);
          path_prefix_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetFileListForAppResponse_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetFileListForAppResponse.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetFileListForAppResponse.File.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // optional bytes sha_file = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sha_file(), target);
  }

  // optional uint64 time_stamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time_stamp(), target);
  }

  // optional uint32 raw_file_size = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_raw_file_size(), target);
  }

  // optional bool is_explicit_delete = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_explicit_delete(), target);
  }

  // optional uint32 platforms_to_sync = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_platforms_to_sync(), target);
  }

  // optional uint32 path_prefix_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_path_prefix_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetFileListForAppResponse.File)
  return target;
}

size_t CMsgClientUFSGetFileListForAppResponse_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetFileListForAppResponse.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional bytes sha_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 raw_file_size = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raw_file_size());
    }

    // optional uint64 time_stamp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time_stamp());
    }

    // optional bool is_explicit_delete = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platforms_to_sync());
    }

    // optional uint32 path_prefix_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_path_prefix_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetFileListForAppResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForAppResponse_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetFileListForAppResponse_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetFileListForAppResponse.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetFileListForAppResponse.File)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetFileListForAppResponse.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000040u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_prefix_index_ = from.path_prefix_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetFileListForAppResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetFileListForAppResponse.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse_File::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForAppResponse_File::InternalSwap(CMsgClientUFSGetFileListForAppResponse_File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, path_prefix_index_)
      + sizeof(CMsgClientUFSGetFileListForAppResponse_File::path_prefix_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSGetFileListForAppResponse_File, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetFileListForAppResponse_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetFileListForAppResponse::_Internal {
 public:
};

CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena),
  path_prefixes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetFileListForAppResponse)
}
CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse(const CMsgClientUFSGetFileListForAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_),
      path_prefixes_(from.path_prefixes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetFileListForAppResponse)
}

void CMsgClientUFSGetFileListForAppResponse::SharedCtor() {
}

CMsgClientUFSGetFileListForAppResponse::~CMsgClientUFSGetFileListForAppResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetFileListForAppResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetFileListForAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSGetFileListForAppResponse::ArenaDtor(void* object) {
  CMsgClientUFSGetFileListForAppResponse* _this = reinterpret_cast< CMsgClientUFSGetFileListForAppResponse* >(object);
  (void)_this;
}
void CMsgClientUFSGetFileListForAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetFileListForAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetFileListForAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetFileListForAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  path_prefixes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetFileListForAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientUFSGetFileListForAppResponse.File files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string path_prefixes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_path_prefixes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetFileListForAppResponse.path_prefixes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetFileListForAppResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetFileListForAppResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientUFSGetFileListForAppResponse.File files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_files(i), target, stream);
  }

  // repeated string path_prefixes = 2;
  for (int i = 0, n = this->_internal_path_prefixes_size(); i < n; i++) {
    const auto& s = this->_internal_path_prefixes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetFileListForAppResponse.path_prefixes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetFileListForAppResponse)
  return target;
}

size_t CMsgClientUFSGetFileListForAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetFileListForAppResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientUFSGetFileListForAppResponse.File files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string path_prefixes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(path_prefixes_.size());
  for (int i = 0, n = path_prefixes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      path_prefixes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetFileListForAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetFileListForAppResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetFileListForAppResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetFileListForAppResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetFileListForAppResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetFileListForAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  path_prefixes_.MergeFrom(from.path_prefixes_);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetFileListForAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetFileListForAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetFileListForAppResponse::InternalSwap(CMsgClientUFSGetFileListForAppResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  path_prefixes_.InternalSwap(&other->path_prefixes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetFileListForAppResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSDownloadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSDownloadRequest>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_handle_http(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSDownloadRequest)
}
CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest(const CMsgClientUFSDownloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_handle_http_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(can_handle_http_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSDownloadRequest)
}

void CMsgClientUFSDownloadRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_handle_http_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(can_handle_http_));
}

CMsgClientUFSDownloadRequest::~CMsgClientUFSDownloadRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSDownloadRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSDownloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDownloadRequest::ArenaDtor(void* object) {
  CMsgClientUFSDownloadRequest* _this = reinterpret_cast< CMsgClientUFSDownloadRequest* >(object);
  (void)_this;
}
void CMsgClientUFSDownloadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSDownloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSDownloadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_handle_http_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(can_handle_http_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSDownloadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSDownloadRequest.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_handle_http = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_handle_http(&has_bits);
          can_handle_http_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSDownloadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSDownloadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSDownloadRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // optional bool can_handle_http = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_handle_http(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSDownloadRequest)
  return target;
}

size_t CMsgClientUFSDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSDownloadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional bool can_handle_http = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDownloadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDownloadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSDownloadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSDownloadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSDownloadRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDownloadRequest::MergeFrom(const CMsgClientUFSDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_handle_http_ = from.can_handle_http_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDownloadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDownloadRequest::CopyFrom(const CMsgClientUFSDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSDownloadRequest::InternalSwap(CMsgClientUFSDownloadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSDownloadRequest, can_handle_http_)
      + sizeof(CMsgClientUFSDownloadRequest::can_handle_http_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSDownloadRequest, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSDownloadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSDownloadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSDownloadResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_explicit_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_http(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_http_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_http_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kv_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSDownloadResponse)
}
CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse(const CMsgClientUFSDownloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  http_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_http_host()) {
    http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_host(), 
      GetArena());
  }
  http_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_http_url()) {
    http_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_url(), 
      GetArena());
  }
  kv_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kv_headers()) {
    kv_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kv_headers(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSDownloadResponse)
}

void CMsgClientUFSDownloadResponse::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
http_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
http_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kv_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(encrypted_));
eresult_ = 2;
}

CMsgClientUFSDownloadResponse::~CMsgClientUFSDownloadResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSDownloadResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSDownloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kv_headers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSDownloadResponse::ArenaDtor(void* object) {
  CMsgClientUFSDownloadResponse* _this = reinterpret_cast< CMsgClientUFSDownloadResponse* >(object);
  (void)_this;
}
void CMsgClientUFSDownloadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSDownloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSDownloadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      http_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      http_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      kv_headers_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_file_size_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(raw_file_size_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&is_explicit_delete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypted_) -
        reinterpret_cast<char*>(&is_explicit_delete_)) + sizeof(encrypted_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSDownloadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_explicit_delete = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_explicit_delete(&has_bits);
          is_explicit_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_http = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_use_http(&has_bits);
          use_http_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string http_host = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_http_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSDownloadResponse.http_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string http_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_http_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSDownloadResponse.http_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes kv_headers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_kv_headers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_https = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_encrypted(&has_bits);
          encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSDownloadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSDownloadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 file_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_size(), target);
  }

  // optional uint32 raw_file_size = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_raw_file_size(), target);
  }

  // optional bytes sha_file = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sha_file(), target);
  }

  // optional uint64 time_stamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_time_stamp(), target);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_explicit_delete(), target);
  }

  // optional bool use_http = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_http(), target);
  }

  // optional string http_host = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_host().data(), static_cast<int>(this->_internal_http_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSDownloadResponse.http_host");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_http_host(), target);
  }

  // optional string http_url = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_url().data(), static_cast<int>(this->_internal_http_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSDownloadResponse.http_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_http_url(), target);
  }

  // optional bytes kv_headers = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_kv_headers(), target);
  }

  // optional bool use_https = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_https(), target);
  }

  // optional bool encrypted = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_encrypted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSDownloadResponse)
  return target;
}

size_t CMsgClientUFSDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSDownloadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional string http_host = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_host());
    }

    // optional string http_url = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_url());
    }

    // optional bytes kv_headers = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kv_headers());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 file_size = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_size());
    }

    // optional uint64 time_stamp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time_stamp());
    }

    // optional uint32 raw_file_size = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raw_file_size());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool is_explicit_delete = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool use_http = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool use_https = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool encrypted = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSDownloadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSDownloadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSDownloadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSDownloadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSDownloadResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSDownloadResponse::MergeFrom(const CMsgClientUFSDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_http_host(from._internal_http_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_http_url(from._internal_http_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_kv_headers(from._internal_kv_headers());
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      raw_file_size_ = from.raw_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_http_ = from.use_http_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000800u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00001000u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSDownloadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSDownloadResponse::CopyFrom(const CMsgClientUFSDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSDownloadResponse::InternalSwap(CMsgClientUFSDownloadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  http_host_.Swap(&other->http_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  http_url_.Swap(&other->http_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kv_headers_.Swap(&other->kv_headers_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSDownloadResponse, encrypted_)
      + sizeof(CMsgClientUFSDownloadResponse::encrypted_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSDownloadResponse, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSDownloadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSLoginRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSLoginRequest>()._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_am_session_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSLoginRequest)
}
CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest(const CMsgClientUFSLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&am_session_token_, &from.am_session_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&am_session_token_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSLoginRequest)
}

void CMsgClientUFSLoginRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&am_session_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&am_session_token_)) + sizeof(protocol_version_));
}

CMsgClientUFSLoginRequest::~CMsgClientUFSLoginRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSLoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSLoginRequest::ArenaDtor(void* object) {
  CMsgClientUFSLoginRequest* _this = reinterpret_cast< CMsgClientUFSLoginRequest* >(object);
  (void)_this;
}
void CMsgClientUFSLoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSLoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&am_session_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&am_session_token_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSLoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 am_session_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_am_session_token(&has_bits);
          am_session_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_apps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_apps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSLoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSLoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // optional uint64 am_session_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_am_session_token(), target);
  }

  // repeated uint32 apps = 3;
  for (int i = 0, n = this->_internal_apps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apps(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSLoginRequest)
  return target;
}

size_t CMsgClientUFSLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSLoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 apps = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->apps_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_apps_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 am_session_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_am_session_token());
    }

    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSLoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSLoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSLoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSLoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSLoginRequest)
    MergeFrom(*source);
  }
}

void CMsgClientUFSLoginRequest::MergeFrom(const CMsgClientUFSLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      am_session_token_ = from.am_session_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSLoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSLoginRequest::CopyFrom(const CMsgClientUFSLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginRequest::IsInitialized() const {
  return true;
}

void CMsgClientUFSLoginRequest::InternalSwap(CMsgClientUFSLoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_.InternalSwap(&other->apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSLoginRequest, protocol_version_)
      + sizeof(CMsgClientUFSLoginRequest::protocol_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSLoginRequest, am_session_token_)>(
          reinterpret_cast<char*>(&am_session_token_),
          reinterpret_cast<char*>(&other->am_session_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSLoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSLoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSLoginResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSLoginResponse)
}
CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse(const CMsgClientUFSLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSLoginResponse)
}

void CMsgClientUFSLoginResponse::SharedCtor() {
eresult_ = 2;
}

CMsgClientUFSLoginResponse::~CMsgClientUFSLoginResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSLoginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSLoginResponse::ArenaDtor(void* object) {
  CMsgClientUFSLoginResponse* _this = reinterpret_cast< CMsgClientUFSLoginResponse* >(object);
  (void)_this;
}
void CMsgClientUFSLoginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSLoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSLoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSLoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSLoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSLoginResponse)
  return target;
}

size_t CMsgClientUFSLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSLoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSLoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSLoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSLoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSLoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSLoginResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSLoginResponse::MergeFrom(const CMsgClientUFSLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CMsgClientUFSLoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSLoginResponse::CopyFrom(const CMsgClientUFSLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSLoginResponse::InternalSwap(CMsgClientUFSLoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSLoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetUGCDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSGetUGCDetails>()._has_bits_);
  static void set_has_hcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetUGCDetails)
}
CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails(const CMsgClientUFSGetUGCDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hcontent_ = from.hcontent_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetUGCDetails)
}

void CMsgClientUFSGetUGCDetails::SharedCtor() {
hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

CMsgClientUFSGetUGCDetails::~CMsgClientUFSGetUGCDetails() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetUGCDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetUGCDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSGetUGCDetails::ArenaDtor(void* object) {
  CMsgClientUFSGetUGCDetails* _this = reinterpret_cast< CMsgClientUFSGetUGCDetails* >(object);
  (void)_this;
}
void CMsgClientUFSGetUGCDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetUGCDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetUGCDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetUGCDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetUGCDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 hcontent = 1 [default = 18446744073709551615];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_hcontent(&has_bits);
          hcontent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetUGCDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetUGCDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_hcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetUGCDetails)
  return target;
}

size_t CMsgClientUFSGetUGCDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetUGCDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetUGCDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetUGCDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetUGCDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetUGCDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetUGCDetails)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const CMsgClientUFSGetUGCDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetUGCDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hcontent()) {
    _internal_set_hcontent(from._internal_hcontent());
  }
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetUGCDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const CMsgClientUFSGetUGCDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetUGCDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetails::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetUGCDetails::InternalSwap(CMsgClientUFSGetUGCDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hcontent_, other->hcontent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetUGCDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetUGCDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSGetUGCDetailsResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compressed_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rangechechost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_encoded_sha1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetUGCDetailsResponse)
}
CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse(const CMsgClientUFSGetUGCDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  rangechechost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rangechechost()) {
    rangechechost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rangechechost(), 
      GetArena());
  }
  file_encoded_sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_encoded_sha1()) {
    file_encoded_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_encoded_sha1(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetUGCDetailsResponse)
}

void CMsgClientUFSGetUGCDetailsResponse::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rangechechost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_encoded_sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compressed_file_size_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(compressed_file_size_));
eresult_ = 2;
}

CMsgClientUFSGetUGCDetailsResponse::~CMsgClientUFSGetUGCDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetUGCDetailsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetUGCDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rangechechost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_encoded_sha1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetUGCDetailsResponse::ArenaDtor(void* object) {
  CMsgClientUFSGetUGCDetailsResponse* _this = reinterpret_cast< CMsgClientUFSGetUGCDetailsResponse* >(object);
  (void)_this;
}
void CMsgClientUFSGetUGCDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetUGCDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetUGCDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetUGCDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      rangechechost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      file_encoded_sha1_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_file_size_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(compressed_file_size_));
  }
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetUGCDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetUGCDetailsResponse.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetUGCDetailsResponse.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_creator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_steamid_creator(&has_bits);
          steamid_creator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 compressed_file_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_compressed_file_size(&has_bits);
          compressed_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rangechechost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_rangechechost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetUGCDetailsResponse.rangechechost");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_encoded_sha1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_file_encoded_sha1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetUGCDetailsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetUGCDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetUGCDetailsResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetUGCDetailsResponse.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  // optional fixed64 steamid_creator = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_steamid_creator(), target);
  }

  // optional uint32 file_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_size(), target);
  }

  // optional uint32 compressed_file_size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_compressed_file_size(), target);
  }

  // optional string rangechechost = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rangechechost().data(), static_cast<int>(this->_internal_rangechechost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetUGCDetailsResponse.rangechechost");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rangechechost(), target);
  }

  // optional string file_encoded_sha1 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_encoded_sha1().data(), static_cast<int>(this->_internal_file_encoded_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_file_encoded_sha1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetUGCDetailsResponse)
  return target;
}

size_t CMsgClientUFSGetUGCDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetUGCDetailsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string filename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string rangechechost = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rangechechost());
    }

    // optional string file_encoded_sha1 = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_encoded_sha1());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 file_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_size());
    }

    // optional fixed64 steamid_creator = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 compressed_file_size = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_compressed_file_size());
    }

  }
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetUGCDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetUGCDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetUGCDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetUGCDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetUGCDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetUGCDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_rangechechost(from._internal_rangechechost());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_file_encoded_sha1(from._internal_file_encoded_sha1());
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    if (cached_has_bits & 0x00000080u) {
      compressed_file_size_ = from.compressed_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetUGCDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetUGCDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetUGCDetailsResponse::InternalSwap(CMsgClientUFSGetUGCDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rangechechost_.Swap(&other->rangechechost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_encoded_sha1_.Swap(&other->file_encoded_sha1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, compressed_file_size_)
      + sizeof(CMsgClientUFSGetUGCDetailsResponse::compressed_file_size_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSGetUGCDetailsResponse, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetUGCDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetSingleFileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSGetSingleFileInfo>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetSingleFileInfo)
}
CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo(const CMsgClientUFSGetSingleFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetSingleFileInfo)
}

void CMsgClientUFSGetSingleFileInfo::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
}

CMsgClientUFSGetSingleFileInfo::~CMsgClientUFSGetSingleFileInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetSingleFileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetSingleFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetSingleFileInfo::ArenaDtor(void* object) {
  CMsgClientUFSGetSingleFileInfo* _this = reinterpret_cast< CMsgClientUFSGetSingleFileInfo* >(object);
  (void)_this;
}
void CMsgClientUFSGetSingleFileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetSingleFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetSingleFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetSingleFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetSingleFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetSingleFileInfo.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetSingleFileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetSingleFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetSingleFileInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetSingleFileInfo)
  return target;
}

size_t CMsgClientUFSGetSingleFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetSingleFileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetSingleFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetSingleFileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetSingleFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetSingleFileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetSingleFileInfo)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const CMsgClientUFSGetSingleFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetSingleFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetSingleFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const CMsgClientUFSGetSingleFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetSingleFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfo::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetSingleFileInfo::InternalSwap(CMsgClientUFSGetSingleFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetSingleFileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSGetSingleFileInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSGetSingleFileInfoResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_explicit_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSGetSingleFileInfoResponse)
}
CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse(const CMsgClientUFSGetSingleFileInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArena());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSGetSingleFileInfoResponse)
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
eresult_ = 2;
}

CMsgClientUFSGetSingleFileInfoResponse::~CMsgClientUFSGetSingleFileInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSGetSingleFileInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSGetSingleFileInfoResponse::ArenaDtor(void* object) {
  CMsgClientUFSGetSingleFileInfoResponse* _this = reinterpret_cast< CMsgClientUFSGetSingleFileInfoResponse* >(object);
  (void)_this;
}
void CMsgClientUFSGetSingleFileInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSGetSingleFileInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSGetSingleFileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSGetSingleFileInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(is_explicit_delete_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSGetSingleFileInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSGetSingleFileInfoResponse.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_explicit_delete = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_explicit_delete(&has_bits);
          is_explicit_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSGetSingleFileInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSGetSingleFileInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional string file_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSGetSingleFileInfoResponse.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_file(), target);
  }

  // optional uint64 time_stamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time_stamp(), target);
  }

  // optional uint32 raw_file_size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_raw_file_size(), target);
  }

  // optional bool is_explicit_delete = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_explicit_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSGetSingleFileInfoResponse)
  return target;
}

size_t CMsgClientUFSGetSingleFileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSGetSingleFileInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string file_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional bytes sha_file = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 raw_file_size = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raw_file_size());
    }

    // optional uint64 time_stamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_time_stamp());
    }

    // optional bool is_explicit_delete = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSGetSingleFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSGetSingleFileInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSGetSingleFileInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSGetSingleFileInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSGetSingleFileInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSGetSingleFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSGetSingleFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSGetSingleFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSGetSingleFileInfoResponse::InternalSwap(CMsgClientUFSGetSingleFileInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha_file_.Swap(&other->sha_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, is_explicit_delete_)
      + sizeof(CMsgClientUFSGetSingleFileInfoResponse::is_explicit_delete_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUFSGetSingleFileInfoResponse, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSGetSingleFileInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSShareFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSShareFile>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUFSShareFile::CMsgClientUFSShareFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSShareFile)
}
CMsgClientUFSShareFile::CMsgClientUFSShareFile(const CMsgClientUFSShareFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSShareFile)
}

void CMsgClientUFSShareFile::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_id_ = 0u;
}

CMsgClientUFSShareFile::~CMsgClientUFSShareFile() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSShareFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSShareFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUFSShareFile::ArenaDtor(void* object) {
  CMsgClientUFSShareFile* _this = reinterpret_cast< CMsgClientUFSShareFile* >(object);
  (void)_this;
}
void CMsgClientUFSShareFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSShareFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSShareFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSShareFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSShareFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUFSShareFile.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSShareFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSShareFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUFSShareFile.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSShareFile)
  return target;
}

size_t CMsgClientUFSShareFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSShareFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSShareFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSShareFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSShareFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSShareFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSShareFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSShareFile)
    MergeFrom(*source);
  }
}

void CMsgClientUFSShareFile::MergeFrom(const CMsgClientUFSShareFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSShareFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSShareFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSShareFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSShareFile::CopyFrom(const CMsgClientUFSShareFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSShareFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFile::IsInitialized() const {
  return true;
}

void CMsgClientUFSShareFile::InternalSwap(CMsgClientUFSShareFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSShareFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientUFSShareFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUFSShareFileResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientUFSShareFileResponse)
}
CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse(const CMsgClientUFSShareFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&hcontent_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(hcontent_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUFSShareFileResponse)
}

void CMsgClientUFSShareFileResponse::SharedCtor() {
eresult_ = 2;
hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

CMsgClientUFSShareFileResponse::~CMsgClientUFSShareFileResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUFSShareFileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientUFSShareFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientUFSShareFileResponse::ArenaDtor(void* object) {
  CMsgClientUFSShareFileResponse* _this = reinterpret_cast< CMsgClientUFSShareFileResponse* >(object);
  (void)_this;
}
void CMsgClientUFSShareFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUFSShareFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUFSShareFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUFSShareFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    eresult_ = 2;
    hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUFSShareFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hcontent = 2 [default = 18446744073709551615];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_hcontent(&has_bits);
          hcontent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientUFSShareFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUFSShareFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_hcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUFSShareFileResponse)
  return target;
}

size_t CMsgClientUFSShareFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUFSShareFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

    // optional fixed64 hcontent = 2 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientUFSShareFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientUFSShareFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientUFSShareFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientUFSShareFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientUFSShareFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientUFSShareFileResponse)
    MergeFrom(*source);
  }
}

void CMsgClientUFSShareFileResponse::MergeFrom(const CMsgClientUFSShareFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUFSShareFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      hcontent_ = from.hcontent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientUFSShareFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientUFSShareFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUFSShareFileResponse::CopyFrom(const CMsgClientUFSShareFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUFSShareFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFileResponse::IsInitialized() const {
  return true;
}

void CMsgClientUFSShareFileResponse::InternalSwap(CMsgClientUFSShareFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
  swap(hcontent_, other->hcontent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUFSShareFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadFileRequest* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadFileResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadCommit_File* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadCommit_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadCommit_File >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadCommit* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadCommitResponse_File* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadCommitResponse_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadCommitResponse_File >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadCommitResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadCommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadCommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSFileChunk* Arena::CreateMaybeMessage< ::CMsgClientUFSFileChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSFileChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSTransferHeartbeat* Arena::CreateMaybeMessage< ::CMsgClientUFSTransferHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSTransferHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSUploadFileFinished* Arena::CreateMaybeMessage< ::CMsgClientUFSUploadFileFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSUploadFileFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSDeleteFileRequest* Arena::CreateMaybeMessage< ::CMsgClientUFSDeleteFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSDeleteFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSDeleteFileResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSDeleteFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSDeleteFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetFileListForApp* Arena::CreateMaybeMessage< ::CMsgClientUFSGetFileListForApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetFileListForApp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetFileListForAppResponse_File* Arena::CreateMaybeMessage< ::CMsgClientUFSGetFileListForAppResponse_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetFileListForAppResponse_File >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetFileListForAppResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSGetFileListForAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetFileListForAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSDownloadRequest* Arena::CreateMaybeMessage< ::CMsgClientUFSDownloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSDownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSDownloadResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSDownloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSLoginRequest* Arena::CreateMaybeMessage< ::CMsgClientUFSLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSLoginResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetUGCDetails* Arena::CreateMaybeMessage< ::CMsgClientUFSGetUGCDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetUGCDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetUGCDetailsResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSGetUGCDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetUGCDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetSingleFileInfo* Arena::CreateMaybeMessage< ::CMsgClientUFSGetSingleFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetSingleFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSGetSingleFileInfoResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSGetSingleFileInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSGetSingleFileInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSShareFile* Arena::CreateMaybeMessage< ::CMsgClientUFSShareFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSShareFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUFSShareFileResponse* Arena::CreateMaybeMessage< ::CMsgClientUFSShareFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUFSShareFileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
