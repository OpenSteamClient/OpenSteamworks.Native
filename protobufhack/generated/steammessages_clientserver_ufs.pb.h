// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_ufs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fufs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fufs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5fufs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_5fufs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fufs_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(int index);
class CMsgClientUFSGetSingleFileInfo;
struct CMsgClientUFSGetSingleFileInfoDefaultTypeInternal;
extern CMsgClientUFSGetSingleFileInfoDefaultTypeInternal _CMsgClientUFSGetSingleFileInfo_default_instance_;
class CMsgClientUFSGetSingleFileInfoResponse;
struct CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal;
extern CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal _CMsgClientUFSGetSingleFileInfoResponse_default_instance_;
class CMsgClientUFSGetUGCDetails;
struct CMsgClientUFSGetUGCDetailsDefaultTypeInternal;
extern CMsgClientUFSGetUGCDetailsDefaultTypeInternal _CMsgClientUFSGetUGCDetails_default_instance_;
class CMsgClientUFSGetUGCDetailsResponse;
struct CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal;
extern CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal _CMsgClientUFSGetUGCDetailsResponse_default_instance_;
class CMsgClientUFSShareFile;
struct CMsgClientUFSShareFileDefaultTypeInternal;
extern CMsgClientUFSShareFileDefaultTypeInternal _CMsgClientUFSShareFile_default_instance_;
class CMsgClientUFSShareFileResponse;
struct CMsgClientUFSShareFileResponseDefaultTypeInternal;
extern CMsgClientUFSShareFileResponseDefaultTypeInternal _CMsgClientUFSShareFileResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientUFSGetSingleFileInfo* Arena::CreateMaybeMessage<::CMsgClientUFSGetSingleFileInfo>(Arena*);
template<> ::CMsgClientUFSGetSingleFileInfoResponse* Arena::CreateMaybeMessage<::CMsgClientUFSGetSingleFileInfoResponse>(Arena*);
template<> ::CMsgClientUFSGetUGCDetails* Arena::CreateMaybeMessage<::CMsgClientUFSGetUGCDetails>(Arena*);
template<> ::CMsgClientUFSGetUGCDetailsResponse* Arena::CreateMaybeMessage<::CMsgClientUFSGetUGCDetailsResponse>(Arena*);
template<> ::CMsgClientUFSShareFile* Arena::CreateMaybeMessage<::CMsgClientUFSShareFile>(Arena*);
template<> ::CMsgClientUFSShareFileResponse* Arena::CreateMaybeMessage<::CMsgClientUFSShareFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientUFSGetUGCDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetUGCDetails) */ {
 public:
  inline CMsgClientUFSGetUGCDetails() : CMsgClientUFSGetUGCDetails(nullptr) {}
  virtual ~CMsgClientUFSGetUGCDetails();
  explicit constexpr CMsgClientUFSGetUGCDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetUGCDetails(const CMsgClientUFSGetUGCDetails& from);
  CMsgClientUFSGetUGCDetails(CMsgClientUFSGetUGCDetails&& from) noexcept
    : CMsgClientUFSGetUGCDetails() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetUGCDetails& operator=(const CMsgClientUFSGetUGCDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetUGCDetails& operator=(CMsgClientUFSGetUGCDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientUFSGetUGCDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetUGCDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetUGCDetails*>(
               &_CMsgClientUFSGetUGCDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientUFSGetUGCDetails& a, CMsgClientUFSGetUGCDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetUGCDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetUGCDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientUFSGetUGCDetails* New() const final {
    return CreateMaybeMessage<CMsgClientUFSGetUGCDetails>(nullptr);
  }

  CMsgClientUFSGetUGCDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientUFSGetUGCDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientUFSGetUGCDetails& from);
  void MergeFrom(const CMsgClientUFSGetUGCDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetUGCDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetUGCDetails";
  }
  protected:
  explicit CMsgClientUFSGetUGCDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHcontentFieldNumber = 1,
  };
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  bool has_hcontent() const;
  private:
  bool _internal_has_hcontent() const;
  public:
  void clear_hcontent();
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent() const;
  void set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hcontent() const;
  void _internal_set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetUGCDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetUGCDetailsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetUGCDetailsResponse) */ {
 public:
  inline CMsgClientUFSGetUGCDetailsResponse() : CMsgClientUFSGetUGCDetailsResponse(nullptr) {}
  virtual ~CMsgClientUFSGetUGCDetailsResponse();
  explicit constexpr CMsgClientUFSGetUGCDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetUGCDetailsResponse(const CMsgClientUFSGetUGCDetailsResponse& from);
  CMsgClientUFSGetUGCDetailsResponse(CMsgClientUFSGetUGCDetailsResponse&& from) noexcept
    : CMsgClientUFSGetUGCDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetUGCDetailsResponse& operator=(const CMsgClientUFSGetUGCDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetUGCDetailsResponse& operator=(CMsgClientUFSGetUGCDetailsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientUFSGetUGCDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetUGCDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetUGCDetailsResponse*>(
               &_CMsgClientUFSGetUGCDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientUFSGetUGCDetailsResponse& a, CMsgClientUFSGetUGCDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetUGCDetailsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetUGCDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientUFSGetUGCDetailsResponse* New() const final {
    return CreateMaybeMessage<CMsgClientUFSGetUGCDetailsResponse>(nullptr);
  }

  CMsgClientUFSGetUGCDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientUFSGetUGCDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientUFSGetUGCDetailsResponse& from);
  void MergeFrom(const CMsgClientUFSGetUGCDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetUGCDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetUGCDetailsResponse";
  }
  protected:
  explicit CMsgClientUFSGetUGCDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kFilenameFieldNumber = 4,
    kRangechechostFieldNumber = 8,
    kFileEncodedSha1FieldNumber = 9,
    kAppIdFieldNumber = 3,
    kFileSizeFieldNumber = 6,
    kSteamidCreatorFieldNumber = 5,
    kCompressedFileSizeFieldNumber = 7,
    kEresultFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 4;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string rangechechost = 8;
  bool has_rangechechost() const;
  private:
  bool _internal_has_rangechechost() const;
  public:
  void clear_rangechechost();
  const std::string& rangechechost() const;
  void set_rangechechost(const std::string& value);
  void set_rangechechost(std::string&& value);
  void set_rangechechost(const char* value);
  void set_rangechechost(const char* value, size_t size);
  std::string* mutable_rangechechost();
  std::string* release_rangechechost();
  void set_allocated_rangechechost(std::string* rangechechost);
  private:
  const std::string& _internal_rangechechost() const;
  void _internal_set_rangechechost(const std::string& value);
  std::string* _internal_mutable_rangechechost();
  public:

  // optional string file_encoded_sha1 = 9;
  bool has_file_encoded_sha1() const;
  private:
  bool _internal_has_file_encoded_sha1() const;
  public:
  void clear_file_encoded_sha1();
  const std::string& file_encoded_sha1() const;
  void set_file_encoded_sha1(const std::string& value);
  void set_file_encoded_sha1(std::string&& value);
  void set_file_encoded_sha1(const char* value);
  void set_file_encoded_sha1(const char* value, size_t size);
  std::string* mutable_file_encoded_sha1();
  std::string* release_file_encoded_sha1();
  void set_allocated_file_encoded_sha1(std::string* file_encoded_sha1);
  private:
  const std::string& _internal_file_encoded_sha1() const;
  void _internal_set_file_encoded_sha1(const std::string& value);
  std::string* _internal_mutable_file_encoded_sha1();
  public:

  // optional uint32 app_id = 3;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 file_size = 6;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 steamid_creator = 5;
  bool has_steamid_creator() const;
  private:
  bool _internal_has_steamid_creator() const;
  public:
  void clear_steamid_creator();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_creator() const;
  void set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid_creator() const;
  void _internal_set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 compressed_file_size = 7;
  bool has_compressed_file_size() const;
  private:
  bool _internal_has_compressed_file_size() const;
  public:
  void clear_compressed_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 compressed_file_size() const;
  void set_compressed_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compressed_file_size() const;
  void _internal_set_compressed_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetUGCDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rangechechost_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_encoded_sha1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_creator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compressed_file_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetSingleFileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetSingleFileInfo) */ {
 public:
  inline CMsgClientUFSGetSingleFileInfo() : CMsgClientUFSGetSingleFileInfo(nullptr) {}
  virtual ~CMsgClientUFSGetSingleFileInfo();
  explicit constexpr CMsgClientUFSGetSingleFileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetSingleFileInfo(const CMsgClientUFSGetSingleFileInfo& from);
  CMsgClientUFSGetSingleFileInfo(CMsgClientUFSGetSingleFileInfo&& from) noexcept
    : CMsgClientUFSGetSingleFileInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetSingleFileInfo& operator=(const CMsgClientUFSGetSingleFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetSingleFileInfo& operator=(CMsgClientUFSGetSingleFileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientUFSGetSingleFileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetSingleFileInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetSingleFileInfo*>(
               &_CMsgClientUFSGetSingleFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientUFSGetSingleFileInfo& a, CMsgClientUFSGetSingleFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetSingleFileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetSingleFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientUFSGetSingleFileInfo* New() const final {
    return CreateMaybeMessage<CMsgClientUFSGetSingleFileInfo>(nullptr);
  }

  CMsgClientUFSGetSingleFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientUFSGetSingleFileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientUFSGetSingleFileInfo& from);
  void MergeFrom(const CMsgClientUFSGetSingleFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetSingleFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetSingleFileInfo";
  }
  protected:
  explicit CMsgClientUFSGetSingleFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetSingleFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetSingleFileInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetSingleFileInfoResponse) */ {
 public:
  inline CMsgClientUFSGetSingleFileInfoResponse() : CMsgClientUFSGetSingleFileInfoResponse(nullptr) {}
  virtual ~CMsgClientUFSGetSingleFileInfoResponse();
  explicit constexpr CMsgClientUFSGetSingleFileInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetSingleFileInfoResponse(const CMsgClientUFSGetSingleFileInfoResponse& from);
  CMsgClientUFSGetSingleFileInfoResponse(CMsgClientUFSGetSingleFileInfoResponse&& from) noexcept
    : CMsgClientUFSGetSingleFileInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetSingleFileInfoResponse& operator=(const CMsgClientUFSGetSingleFileInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetSingleFileInfoResponse& operator=(CMsgClientUFSGetSingleFileInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientUFSGetSingleFileInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetSingleFileInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetSingleFileInfoResponse*>(
               &_CMsgClientUFSGetSingleFileInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientUFSGetSingleFileInfoResponse& a, CMsgClientUFSGetSingleFileInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetSingleFileInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetSingleFileInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientUFSGetSingleFileInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgClientUFSGetSingleFileInfoResponse>(nullptr);
  }

  CMsgClientUFSGetSingleFileInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientUFSGetSingleFileInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientUFSGetSingleFileInfoResponse& from);
  void MergeFrom(const CMsgClientUFSGetSingleFileInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetSingleFileInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetSingleFileInfoResponse";
  }
  protected:
  explicit CMsgClientUFSGetSingleFileInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kShaFileFieldNumber = 4,
    kAppIdFieldNumber = 2,
    kRawFileSizeFieldNumber = 6,
    kTimeStampFieldNumber = 5,
    kIsExplicitDeleteFieldNumber = 7,
    kEresultFieldNumber = 1,
  };
  // optional string file_name = 3;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional bytes sha_file = 4;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  void set_sha_file(const std::string& value);
  void set_sha_file(std::string&& value);
  void set_sha_file(const char* value);
  void set_sha_file(const void* value, size_t size);
  std::string* mutable_sha_file();
  std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 raw_file_size = 6;
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 raw_file_size() const;
  void set_raw_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_raw_file_size() const;
  void _internal_set_raw_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 time_stamp = 5;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_explicit_delete = 7;
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetSingleFileInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 raw_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  bool is_explicit_delete_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSShareFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSShareFile) */ {
 public:
  inline CMsgClientUFSShareFile() : CMsgClientUFSShareFile(nullptr) {}
  virtual ~CMsgClientUFSShareFile();
  explicit constexpr CMsgClientUFSShareFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSShareFile(const CMsgClientUFSShareFile& from);
  CMsgClientUFSShareFile(CMsgClientUFSShareFile&& from) noexcept
    : CMsgClientUFSShareFile() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSShareFile& operator=(const CMsgClientUFSShareFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSShareFile& operator=(CMsgClientUFSShareFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientUFSShareFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSShareFile* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSShareFile*>(
               &_CMsgClientUFSShareFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientUFSShareFile& a, CMsgClientUFSShareFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSShareFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSShareFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientUFSShareFile* New() const final {
    return CreateMaybeMessage<CMsgClientUFSShareFile>(nullptr);
  }

  CMsgClientUFSShareFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientUFSShareFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientUFSShareFile& from);
  void MergeFrom(const CMsgClientUFSShareFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSShareFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSShareFile";
  }
  protected:
  explicit CMsgClientUFSShareFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSShareFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSShareFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSShareFileResponse) */ {
 public:
  inline CMsgClientUFSShareFileResponse() : CMsgClientUFSShareFileResponse(nullptr) {}
  virtual ~CMsgClientUFSShareFileResponse();
  explicit constexpr CMsgClientUFSShareFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSShareFileResponse(const CMsgClientUFSShareFileResponse& from);
  CMsgClientUFSShareFileResponse(CMsgClientUFSShareFileResponse&& from) noexcept
    : CMsgClientUFSShareFileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSShareFileResponse& operator=(const CMsgClientUFSShareFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSShareFileResponse& operator=(CMsgClientUFSShareFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientUFSShareFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSShareFileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSShareFileResponse*>(
               &_CMsgClientUFSShareFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientUFSShareFileResponse& a, CMsgClientUFSShareFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSShareFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSShareFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientUFSShareFileResponse* New() const final {
    return CreateMaybeMessage<CMsgClientUFSShareFileResponse>(nullptr);
  }

  CMsgClientUFSShareFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientUFSShareFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientUFSShareFileResponse& from);
  void MergeFrom(const CMsgClientUFSShareFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSShareFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSShareFileResponse";
  }
  protected:
  explicit CMsgClientUFSShareFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fufs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
    kHcontentFieldNumber = 2,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  bool has_hcontent() const;
  private:
  bool _internal_has_hcontent() const;
  public:
  void clear_hcontent();
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent() const;
  void set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hcontent() const;
  void _internal_set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSShareFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientUFSGetUGCDetails

// optional fixed64 hcontent = 1 [default = 18446744073709551615];
inline bool CMsgClientUFSGetUGCDetails::_internal_has_hcontent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetails::has_hcontent() const {
  return _internal_has_hcontent();
}
inline void CMsgClientUFSGetUGCDetails::clear_hcontent() {
  hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSGetUGCDetails::_internal_hcontent() const {
  return hcontent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSGetUGCDetails::hcontent() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetails.hcontent)
  return _internal_hcontent();
}
inline void CMsgClientUFSGetUGCDetails::_internal_set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  hcontent_ = value;
}
inline void CMsgClientUFSGetUGCDetails::set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hcontent(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetails.hcontent)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetUGCDetailsResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientUFSGetUGCDetailsResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientUFSGetUGCDetailsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  eresult_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.eresult)
}

// optional string url = 2;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_url() const {
  return _internal_has_url();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::url() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.url)
  return _internal_url();
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.url)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_url() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.url)
  return _internal_mutable_url();
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_url() const {
  return url_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetUGCDetailsResponse.url)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetUGCDetailsResponse.url)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetUGCDetailsResponse.url)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_url() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.url)
}

// optional uint32 app_id = 3;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetUGCDetailsResponse::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetUGCDetailsResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  app_id_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.app_id)
}

// optional string filename = 4;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_filename() const {
  return _internal_has_filename();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::filename() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.filename)
  return _internal_filename();
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.filename)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.filename)
  return _internal_mutable_filename();
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_filename() const {
  return filename_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetUGCDetailsResponse.filename)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetUGCDetailsResponse.filename)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetUGCDetailsResponse.filename)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_filename() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.filename)
}

// optional fixed64 steamid_creator = 5;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_steamid_creator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_steamid_creator() const {
  return _internal_has_steamid_creator();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_steamid_creator() {
  steamid_creator_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSGetUGCDetailsResponse::_internal_steamid_creator() const {
  return steamid_creator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSGetUGCDetailsResponse::steamid_creator() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
  return _internal_steamid_creator();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_creator_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid_creator(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
}

// optional uint32 file_size = 6;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_file_size() const {
  return _internal_has_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetUGCDetailsResponse::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetUGCDetailsResponse::file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.file_size)
  return _internal_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  file_size_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.file_size)
}

// optional uint32 compressed_file_size = 7;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_compressed_file_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_compressed_file_size() const {
  return _internal_has_compressed_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_compressed_file_size() {
  compressed_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetUGCDetailsResponse::_internal_compressed_file_size() const {
  return compressed_file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetUGCDetailsResponse::compressed_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
  return _internal_compressed_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_compressed_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  compressed_file_size_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_compressed_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compressed_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
}

// optional string rangechechost = 8;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_rangechechost() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_rangechechost() const {
  return _internal_has_rangechechost();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_rangechechost() {
  rangechechost_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::rangechechost() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
  return _internal_rangechechost();
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_rangechechost(const std::string& value) {
  _internal_set_rangechechost(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_rangechechost() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
  return _internal_mutable_rangechechost();
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_rangechechost() const {
  return rangechechost_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_rangechechost(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  rangechechost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_rangechechost(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  rangechechost_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_rangechechost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  rangechechost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_rangechechost(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  rangechechost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_rangechechost() {
  _has_bits_[0] |= 0x00000004u;
  return rangechechost_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_rangechechost() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
  if (!_internal_has_rangechechost()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return rangechechost_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_rangechechost(std::string* rangechechost) {
  if (rangechechost != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rangechechost_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rangechechost,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.rangechechost)
}

// optional string file_encoded_sha1 = 9;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_file_encoded_sha1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_file_encoded_sha1() const {
  return _internal_has_file_encoded_sha1();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_file_encoded_sha1() {
  file_encoded_sha1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::file_encoded_sha1() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  return _internal_file_encoded_sha1();
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(const std::string& value) {
  _internal_set_file_encoded_sha1(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_file_encoded_sha1() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  return _internal_mutable_file_encoded_sha1();
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_file_encoded_sha1() const {
  return file_encoded_sha1_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_file_encoded_sha1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  file_encoded_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  file_encoded_sha1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  file_encoded_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  file_encoded_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_file_encoded_sha1() {
  _has_bits_[0] |= 0x00000008u;
  return file_encoded_sha1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_file_encoded_sha1() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  if (!_internal_has_file_encoded_sha1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return file_encoded_sha1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_file_encoded_sha1(std::string* file_encoded_sha1) {
  if (file_encoded_sha1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  file_encoded_sha1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_encoded_sha1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetSingleFileInfo

// optional uint32 app_id = 1;
inline bool CMsgClientUFSGetSingleFileInfo::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetSingleFileInfo::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetSingleFileInfo::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetSingleFileInfo::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfo.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetSingleFileInfo::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSGetSingleFileInfo::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfo.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSGetSingleFileInfo::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfo::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSGetSingleFileInfo::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetSingleFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfo.file_name)
  return _internal_file_name();
}
inline void CMsgClientUFSGetSingleFileInfo::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfo.file_name)
}
inline std::string* CMsgClientUFSGetSingleFileInfo::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetSingleFileInfo.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& CMsgClientUFSGetSingleFileInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSGetSingleFileInfo::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetSingleFileInfo::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetSingleFileInfo.file_name)
}
inline void CMsgClientUFSGetSingleFileInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetSingleFileInfo.file_name)
}
inline void CMsgClientUFSGetSingleFileInfo::set_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetSingleFileInfo.file_name)
}
inline std::string* CMsgClientUFSGetSingleFileInfo::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetSingleFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetSingleFileInfo.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetSingleFileInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetSingleFileInfo.file_name)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetSingleFileInfoResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientUFSGetSingleFileInfoResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientUFSGetSingleFileInfoResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  eresult_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.eresult)
}

// optional uint32 app_id = 2;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetSingleFileInfoResponse::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetSingleFileInfoResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.app_id)
}

// optional string file_name = 3;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.file_name)
  return _internal_file_name();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetSingleFileInfoResponse.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetSingleFileInfoResponse.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}

// optional bytes sha_file = 4;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  return _internal_sha_file();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(const std::string& value) {
  _internal_set_sha_file(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::mutable_sha_file() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  return _internal_mutable_sha_file();
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000002u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}

// optional uint64 time_stamp = 5;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSGetSingleFileInfoResponse::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSGetSingleFileInfoResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
  return _internal_time_stamp();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
}

// optional uint32 raw_file_size = 6;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetSingleFileInfoResponse::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSGetSingleFileInfoResponse::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
  return _internal_raw_file_size();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_raw_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  raw_file_size_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_raw_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
}

// optional bool is_explicit_delete = 7;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_explicit_delete_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
}

// -------------------------------------------------------------------

// CMsgClientUFSShareFile

// optional uint32 app_id = 1;
inline bool CMsgClientUFSShareFile::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFile::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSShareFile::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSShareFile::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientUFSShareFile::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFile.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSShareFile::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSShareFile::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFile.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSShareFile::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFile::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSShareFile::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSShareFile::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFile.file_name)
  return _internal_file_name();
}
inline void CMsgClientUFSShareFile::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFile.file_name)
}
inline std::string* CMsgClientUFSShareFile::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSShareFile.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& CMsgClientUFSShareFile::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSShareFile::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientUFSShareFile::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientUFSShareFile.file_name)
}
inline void CMsgClientUFSShareFile::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSShareFile.file_name)
}
inline void CMsgClientUFSShareFile::set_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSShareFile.file_name)
}
inline std::string* CMsgClientUFSShareFile::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientUFSShareFile::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSShareFile.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientUFSShareFile::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSShareFile.file_name)
}

// -------------------------------------------------------------------

// CMsgClientUFSShareFileResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSShareFileResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFileResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSShareFileResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientUFSShareFileResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientUFSShareFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFileResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSShareFileResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientUFSShareFileResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFileResponse.eresult)
}

// optional fixed64 hcontent = 2 [default = 18446744073709551615];
inline bool CMsgClientUFSShareFileResponse::_internal_has_hcontent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFileResponse::has_hcontent() const {
  return _internal_has_hcontent();
}
inline void CMsgClientUFSShareFileResponse::clear_hcontent() {
  hcontent_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSShareFileResponse::_internal_hcontent() const {
  return hcontent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientUFSShareFileResponse::hcontent() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFileResponse.hcontent)
  return _internal_hcontent();
}
inline void CMsgClientUFSShareFileResponse::_internal_set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  hcontent_ = value;
}
inline void CMsgClientUFSShareFileResponse::set_hcontent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hcontent(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFileResponse.hcontent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fufs_2eproto
