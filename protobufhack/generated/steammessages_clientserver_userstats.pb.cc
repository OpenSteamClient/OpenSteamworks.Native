// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_userstats.proto

#include "steammessages_clientserver_userstats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientGetUserStats::CMsgClientGetUserStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(PROTOBUF_ULONGLONG(0))
  , crc_stats_(0u)
  , schema_local_version_(0)
  , steam_id_for_user_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientGetUserStatsDefaultTypeInternal {
  constexpr CMsgClientGetUserStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetUserStatsDefaultTypeInternal() {}
  union {
    CMsgClientGetUserStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetUserStatsDefaultTypeInternal _CMsgClientGetUserStats_default_instance_;
constexpr CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_id_(0u)
  , stat_value_(0u){}
struct CMsgClientGetUserStatsResponse_StatsDefaultTypeInternal {
  constexpr CMsgClientGetUserStatsResponse_StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetUserStatsResponse_StatsDefaultTypeInternal() {}
  union {
    CMsgClientGetUserStatsResponse_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetUserStatsResponse_StatsDefaultTypeInternal _CMsgClientGetUserStatsResponse_Stats_default_instance_;
constexpr CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unloctime_()
  , achievement_id_(0u){}
struct CMsgClientGetUserStatsResponse_Achievement_BlocksDefaultTypeInternal {
  constexpr CMsgClientGetUserStatsResponse_Achievement_BlocksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetUserStatsResponse_Achievement_BlocksDefaultTypeInternal() {}
  union {
    CMsgClientGetUserStatsResponse_Achievement_Blocks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetUserStatsResponse_Achievement_BlocksDefaultTypeInternal _CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_;
constexpr CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , achievement_blocks_()
  , schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_id_(PROTOBUF_ULONGLONG(0))
  , crc_stats_(0u)
  , eresult_(2){}
struct CMsgClientGetUserStatsResponseDefaultTypeInternal {
  constexpr CMsgClientGetUserStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetUserStatsResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetUserStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetUserStatsResponseDefaultTypeInternal _CMsgClientGetUserStatsResponse_default_instance_;
constexpr CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_id_(0u)
  , reverted_stat_value_(0u){}
struct CMsgClientStoreUserStatsResponse_Stats_Failed_ValidationDefaultTypeInternal {
  constexpr CMsgClientStoreUserStatsResponse_Stats_Failed_ValidationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStoreUserStatsResponse_Stats_Failed_ValidationDefaultTypeInternal() {}
  union {
    CMsgClientStoreUserStatsResponse_Stats_Failed_Validation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStoreUserStatsResponse_Stats_Failed_ValidationDefaultTypeInternal _CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_;
constexpr CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_failed_validation_()
  , game_id_(PROTOBUF_ULONGLONG(0))
  , crc_stats_(0u)
  , stats_out_of_date_(false)
  , eresult_(2){}
struct CMsgClientStoreUserStatsResponseDefaultTypeInternal {
  constexpr CMsgClientStoreUserStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStoreUserStatsResponseDefaultTypeInternal() {}
  union {
    CMsgClientStoreUserStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStoreUserStatsResponseDefaultTypeInternal _CMsgClientStoreUserStatsResponse_default_instance_;
constexpr CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_id_(0u)
  , stat_value_(0u){}
struct CMsgClientStoreUserStats2_StatsDefaultTypeInternal {
  constexpr CMsgClientStoreUserStats2_StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStoreUserStats2_StatsDefaultTypeInternal() {}
  union {
    CMsgClientStoreUserStats2_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStoreUserStats2_StatsDefaultTypeInternal _CMsgClientStoreUserStats2_Stats_default_instance_;
constexpr CMsgClientStoreUserStats2::CMsgClientStoreUserStats2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , game_id_(PROTOBUF_ULONGLONG(0))
  , settor_steam_id_(PROTOBUF_ULONGLONG(0))
  , settee_steam_id_(PROTOBUF_ULONGLONG(0))
  , crc_stats_(0u)
  , explicit_reset_(false){}
struct CMsgClientStoreUserStats2DefaultTypeInternal {
  constexpr CMsgClientStoreUserStats2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStoreUserStats2DefaultTypeInternal() {}
  union {
    CMsgClientStoreUserStats2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStoreUserStats2DefaultTypeInternal _CMsgClientStoreUserStats2_default_instance_;
constexpr CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_id_(0u)
  , stat_value_(0u){}
struct CMsgClientStatsUpdated_Updated_StatsDefaultTypeInternal {
  constexpr CMsgClientStatsUpdated_Updated_StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStatsUpdated_Updated_StatsDefaultTypeInternal() {}
  union {
    CMsgClientStatsUpdated_Updated_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStatsUpdated_Updated_StatsDefaultTypeInternal _CMsgClientStatsUpdated_Updated_Stats_default_instance_;
constexpr CMsgClientStatsUpdated::CMsgClientStatsUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updated_stats_()
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , game_id_(PROTOBUF_ULONGLONG(0))
  , crc_stats_(0u){}
struct CMsgClientStatsUpdatedDefaultTypeInternal {
  constexpr CMsgClientStatsUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStatsUpdatedDefaultTypeInternal() {}
  union {
    CMsgClientStatsUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStatsUpdatedDefaultTypeInternal _CMsgClientStatsUpdated_default_instance_;
constexpr CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_id_(0u)
  , stat_value_(0u){}
struct CMsgClientStoreUserStats_Stats_To_StoreDefaultTypeInternal {
  constexpr CMsgClientStoreUserStats_Stats_To_StoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStoreUserStats_Stats_To_StoreDefaultTypeInternal() {}
  union {
    CMsgClientStoreUserStats_Stats_To_Store _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStoreUserStats_Stats_To_StoreDefaultTypeInternal _CMsgClientStoreUserStats_Stats_To_Store_default_instance_;
constexpr CMsgClientStoreUserStats::CMsgClientStoreUserStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_to_store_()
  , game_id_(PROTOBUF_ULONGLONG(0))
  , explicit_reset_(false){}
struct CMsgClientStoreUserStatsDefaultTypeInternal {
  constexpr CMsgClientStoreUserStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStoreUserStatsDefaultTypeInternal() {}
  union {
    CMsgClientStoreUserStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStoreUserStatsDefaultTypeInternal _CMsgClientStoreUserStats_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fuserstats_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5fuserstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fuserstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_5fuserstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStats, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStats, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStats, schema_local_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStats, steam_id_for_user_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Achievement_Blocks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Achievement_Blocks, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse_Achievement_Blocks, unloctime_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, schema_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetUserStatsResponse, achievement_blocks_),
  1,
  3,
  2,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, reverted_stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, stats_failed_validation_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStatsResponse, stats_out_of_date_),
  0,
  3,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, settor_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, settee_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, explicit_reset_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats2, stats_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated_Updated_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated_Updated_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated_Updated_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated_Updated_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated, crc_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStatsUpdated, updated_stats_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats_Stats_To_Store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats_Stats_To_Store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats_Stats_To_Store, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats_Stats_To_Store, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats, explicit_reset_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStoreUserStats, stats_to_store_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgClientGetUserStats)},
  { 13, 20, sizeof(::CMsgClientGetUserStatsResponse_Stats)},
  { 22, 29, sizeof(::CMsgClientGetUserStatsResponse_Achievement_Blocks)},
  { 31, 42, sizeof(::CMsgClientGetUserStatsResponse)},
  { 48, 55, sizeof(::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation)},
  { 57, 67, sizeof(::CMsgClientStoreUserStatsResponse)},
  { 72, 79, sizeof(::CMsgClientStoreUserStats2_Stats)},
  { 81, 92, sizeof(::CMsgClientStoreUserStats2)},
  { 98, 105, sizeof(::CMsgClientStatsUpdated_Updated_Stats)},
  { 107, 116, sizeof(::CMsgClientStatsUpdated)},
  { 120, 127, sizeof(::CMsgClientStoreUserStats_Stats_To_Store)},
  { 129, 137, sizeof(::CMsgClientStoreUserStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetUserStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetUserStatsResponse_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetUserStatsResponse_Achievement_Blocks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetUserStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStoreUserStatsResponse_Stats_Failed_Validation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStoreUserStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStoreUserStats2_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStoreUserStats2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStatsUpdated_Updated_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStatsUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStoreUserStats_Stats_To_Store_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStoreUserStats_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fuserstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*steammessages_clientserver_userstats.p"
  "roto\032 google/protobuf/descriptor.proto\032\030"
  "steammessages_base.proto\"u\n\026CMsgClientGe"
  "tUserStats\022\017\n\007game_id\030\001 \001(\006\022\021\n\tcrc_stats"
  "\030\002 \001(\r\022\034\n\024schema_local_version\030\003 \001(\005\022\031\n\021"
  "steam_id_for_user\030\004 \001(\006\"\335\002\n\036CMsgClientGe"
  "tUserStatsResponse\022\017\n\007game_id\030\001 \001(\006\022\022\n\007e"
  "result\030\002 \001(\005:\0012\022\021\n\tcrc_stats\030\003 \001(\r\022\016\n\006sc"
  "hema\030\004 \001(\014\0224\n\005stats\030\005 \003(\0132%.CMsgClientGe"
  "tUserStatsResponse.Stats\022N\n\022achievement_"
  "blocks\030\006 \003(\01322.CMsgClientGetUserStatsRes"
  "ponse.Achievement_Blocks\032,\n\005Stats\022\017\n\007sta"
  "t_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\r\032\?\n\022Achiev"
  "ement_Blocks\022\026\n\016achievement_id\030\001 \001(\r\022\021\n\t"
  "unloctime\030\002 \003(\007\"\232\002\n CMsgClientStoreUserS"
  "tatsResponse\022\017\n\007game_id\030\001 \001(\006\022\022\n\007eresult"
  "\030\002 \001(\005:\0012\022\021\n\tcrc_stats\030\003 \001(\r\022Z\n\027stats_fa"
  "iled_validation\030\004 \003(\01329.CMsgClientStoreU"
  "serStatsResponse.Stats_Failed_Validation"
  "\022\031\n\021stats_out_of_date\030\005 \001(\010\032G\n\027Stats_Fai"
  "led_Validation\022\017\n\007stat_id\030\001 \001(\r\022\033\n\023rever"
  "ted_stat_value\030\002 \001(\r\"\350\001\n\031CMsgClientStore"
  "UserStats2\022\017\n\007game_id\030\001 \001(\006\022\027\n\017settor_st"
  "eam_id\030\002 \001(\006\022\027\n\017settee_steam_id\030\003 \001(\006\022\021\n"
  "\tcrc_stats\030\004 \001(\r\022\026\n\016explicit_reset\030\005 \001(\010"
  "\022/\n\005stats\030\006 \003(\0132 .CMsgClientStoreUserSta"
  "ts2.Stats\032,\n\005Stats\022\017\n\007stat_id\030\001 \001(\r\022\022\n\ns"
  "tat_value\030\002 \001(\r\"\302\001\n\026CMsgClientStatsUpdat"
  "ed\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\021\n"
  "\tcrc_stats\030\003 \001(\r\022<\n\rupdated_stats\030\004 \003(\0132"
  "%.CMsgClientStatsUpdated.Updated_Stats\0324"
  "\n\rUpdated_Stats\022\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat"
  "_value\030\002 \001(\r\"\274\001\n\030CMsgClientStoreUserStat"
  "s\022\017\n\007game_id\030\001 \001(\006\022\026\n\016explicit_reset\030\002 \001"
  "(\010\022@\n\016stats_to_store\030\003 \003(\0132(.CMsgClientS"
  "toreUserStats.Stats_To_Store\0325\n\016Stats_To"
  "_Store\022\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 "
  "\001(\rB\037H\001\200\001\000\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto = {
  false, false, 1516, descriptor_table_protodef_steammessages_5fclientserver_5fuserstats_2eproto, "steammessages_clientserver_userstats.proto", 
  &descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto_once, descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto_deps, 2, 12,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fuserstats_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fuserstats_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fuserstats_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fuserstats_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto);
  return descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fuserstats_2eproto(&descriptor_table_steammessages_5fclientserver_5fuserstats_2eproto);

// ===================================================================

class CMsgClientGetUserStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetUserStats>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crc_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_schema_local_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_for_user(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientGetUserStats::CMsgClientGetUserStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetUserStats)
}
CMsgClientGetUserStats::CMsgClientGetUserStats(const CMsgClientGetUserStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_for_user_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(steam_id_for_user_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetUserStats)
}

void CMsgClientGetUserStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steam_id_for_user_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(steam_id_for_user_));
}

CMsgClientGetUserStats::~CMsgClientGetUserStats() {
  // @@protoc_insertion_point(destructor:CMsgClientGetUserStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGetUserStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGetUserStats::ArenaDtor(void* object) {
  CMsgClientGetUserStats* _this = reinterpret_cast< CMsgClientGetUserStats* >(object);
  (void)_this;
}
void CMsgClientGetUserStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetUserStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetUserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetUserStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_for_user_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(steam_id_for_user_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetUserStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crc_stats(&has_bits);
          crc_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 schema_local_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_schema_local_version(&has_bits);
          schema_local_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id_for_user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_steam_id_for_user(&has_bits);
          steam_id_for_user_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGetUserStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetUserStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // optional uint32 crc_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_crc_stats(), target);
  }

  // optional int32 schema_local_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_schema_local_version(), target);
  }

  // optional fixed64 steam_id_for_user = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steam_id_for_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetUserStats)
  return target;
}

size_t CMsgClientGetUserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetUserStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc_stats());
    }

    // optional int32 schema_local_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_schema_local_version());
    }

    // optional fixed64 steam_id_for_user = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGetUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGetUserStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGetUserStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGetUserStats)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStats::MergeFrom(const CMsgClientGetUserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      schema_local_version_ = from.schema_local_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_for_user_ = from.steam_id_for_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGetUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStats::CopyFrom(const CMsgClientGetUserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStats::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStats::InternalSwap(CMsgClientGetUserStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetUserStats, steam_id_for_user_)
      + sizeof(CMsgClientGetUserStats::steam_id_for_user_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetUserStats, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetUserStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGetUserStatsResponse_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetUserStatsResponse_Stats>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetUserStatsResponse.Stats)
}
CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats(const CMsgClientGetUserStatsResponse_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetUserStatsResponse.Stats)
}

void CMsgClientGetUserStatsResponse_Stats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientGetUserStatsResponse_Stats::~CMsgClientGetUserStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:CMsgClientGetUserStatsResponse.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGetUserStatsResponse_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGetUserStatsResponse_Stats::ArenaDtor(void* object) {
  CMsgClientGetUserStatsResponse_Stats* _this = reinterpret_cast< CMsgClientGetUserStatsResponse_Stats* >(object);
  (void)_this;
}
void CMsgClientGetUserStatsResponse_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetUserStatsResponse_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetUserStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetUserStatsResponse.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetUserStatsResponse_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGetUserStatsResponse_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetUserStatsResponse.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetUserStatsResponse.Stats)
  return target;
}

size_t CMsgClientGetUserStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetUserStatsResponse.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGetUserStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGetUserStatsResponse_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGetUserStatsResponse.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGetUserStatsResponse.Stats)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetUserStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGetUserStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetUserStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse_Stats::InternalSwap(CMsgClientGetUserStatsResponse_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Stats, stat_value_)
      + sizeof(CMsgClientGetUserStatsResponse_Stats::stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetUserStatsResponse_Stats, stat_id_)>(
          reinterpret_cast<char*>(&stat_id_),
          reinterpret_cast<char*>(&other->stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetUserStatsResponse_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGetUserStatsResponse_Achievement_Blocks::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetUserStatsResponse_Achievement_Blocks>()._has_bits_);
  static void set_has_achievement_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unloctime_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetUserStatsResponse.Achievement_Blocks)
}
CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unloctime_(from.unloctime_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  achievement_id_ = from.achievement_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetUserStatsResponse.Achievement_Blocks)
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedCtor() {
achievement_id_ = 0u;
}

CMsgClientGetUserStatsResponse_Achievement_Blocks::~CMsgClientGetUserStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::ArenaDtor(void* object) {
  CMsgClientGetUserStatsResponse_Achievement_Blocks* _this = reinterpret_cast< CMsgClientGetUserStatsResponse_Achievement_Blocks* >(object);
  (void)_this;
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetUserStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unloctime_.Clear();
  achievement_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetUserStatsResponse_Achievement_Blocks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 achievement_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_achievement_id(&has_bits);
          achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 unloctime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unloctime(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_unloctime(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGetUserStatsResponse_Achievement_Blocks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_achievement_id(), target);
  }

  // repeated fixed32 unloctime = 2;
  for (int i = 0, n = this->_internal_unloctime_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_unloctime(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgClientGetUserStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 unloctime = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unloctime_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unloctime_size());
    total_size += data_size;
  }

  // optional uint32 achievement_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achievement_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse_Achievement_Blocks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGetUserStatsResponse_Achievement_Blocks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGetUserStatsResponse.Achievement_Blocks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGetUserStatsResponse.Achievement_Blocks)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unloctime_.MergeFrom(from.unloctime_);
  if (from._internal_has_achievement_id()) {
    _internal_set_achievement_id(from._internal_achievement_id());
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetUserStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::InternalSwap(CMsgClientGetUserStatsResponse_Achievement_Blocks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unloctime_.InternalSwap(&other->unloctime_);
  swap(achievement_id_, other->achievement_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetUserStatsResponse_Achievement_Blocks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientGetUserStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetUserStatsResponse>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crc_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena),
  achievement_blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetUserStatsResponse)
}
CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse(const CMsgClientGetUserStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      achievement_blocks_(from.achievement_blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schema()) {
    schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema(), 
      GetArena());
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetUserStatsResponse)
}

void CMsgClientGetUserStatsResponse::SharedCtor() {
schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(crc_stats_));
eresult_ = 2;
}

CMsgClientGetUserStatsResponse::~CMsgClientGetUserStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetUserStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientGetUserStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetUserStatsResponse::ArenaDtor(void* object) {
  CMsgClientGetUserStatsResponse* _this = reinterpret_cast< CMsgClientGetUserStatsResponse* >(object);
  (void)_this;
}
void CMsgClientGetUserStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetUserStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetUserStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetUserStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  achievement_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    schema_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_stats_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(crc_stats_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetUserStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crc_stats(&has_bits);
          crc_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientGetUserStatsResponse.Stats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievement_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientGetUserStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetUserStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crc_stats(), target);
  }

  // optional bytes schema = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_schema(), target);
  }

  // repeated .CMsgClientGetUserStatsResponse.Stats stats = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stats(i), target, stream);
  }

  // repeated .CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievement_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_achievement_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetUserStatsResponse)
  return target;
}

size_t CMsgClientGetUserStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetUserStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGetUserStatsResponse.Stats stats = 5;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  total_size += 1UL * this->_internal_achievement_blocks_size();
  for (const auto& msg : this->achievement_blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes schema = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema());
    }

    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc_stats());
    }

    // optional int32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetUserStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientGetUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetUserStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientGetUserStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientGetUserStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientGetUserStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientGetUserStatsResponse::MergeFrom(const CMsgClientGetUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_schema(from._internal_schema());
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientGetUserStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientGetUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse::CopyFrom(const CMsgClientGetUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetUserStatsResponse::InternalSwap(CMsgClientGetUserStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  achievement_blocks_.InternalSwap(&other->achievement_blocks_);
  schema_.Swap(&other->schema_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetUserStatsResponse, crc_stats_)
      + sizeof(CMsgClientGetUserStatsResponse::crc_stats_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetUserStatsResponse, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetUserStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStoreUserStatsResponse_Stats_Failed_Validation>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reverted_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}
CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverted_stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(reverted_stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reverted_stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(reverted_stat_value_));
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::~CMsgClientStoreUserStatsResponse_Stats_Failed_Validation() {
  // @@protoc_insertion_point(destructor:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::ArenaDtor(void* object) {
  CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* _this = reinterpret_cast< CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* >(object);
  (void)_this;
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverted_stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(reverted_stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reverted_stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reverted_stat_value(&has_bits);
          reverted_stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 reverted_stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reverted_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  return target;
}

size_t CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_id());
    }

    // optional uint32 reverted_stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reverted_stat_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStoreUserStatsResponse_Stats_Failed_Validation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reverted_stat_value_ = from.reverted_stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InternalSwap(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, reverted_stat_value_)
      + sizeof(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::reverted_stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation, stat_id_)>(
          reinterpret_cast<char*>(&stat_id_),
          reinterpret_cast<char*>(&other->stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStoreUserStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStoreUserStatsResponse>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crc_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stats_out_of_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_failed_validation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStoreUserStatsResponse)
}
CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse(const CMsgClientStoreUserStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_failed_validation_(from.stats_failed_validation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStoreUserStatsResponse)
}

void CMsgClientStoreUserStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stats_out_of_date_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(stats_out_of_date_));
eresult_ = 2;
}

CMsgClientStoreUserStatsResponse::~CMsgClientStoreUserStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientStoreUserStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStoreUserStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStoreUserStatsResponse::ArenaDtor(void* object) {
  CMsgClientStoreUserStatsResponse* _this = reinterpret_cast< CMsgClientStoreUserStatsResponse* >(object);
  (void)_this;
}
void CMsgClientStoreUserStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStoreUserStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStoreUserStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStoreUserStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_failed_validation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stats_out_of_date_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(stats_out_of_date_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStoreUserStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crc_stats(&has_bits);
          crc_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats_failed_validation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool stats_out_of_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stats_out_of_date(&has_bits);
          stats_out_of_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStoreUserStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStoreUserStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crc_stats(), target);
  }

  // repeated .CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_failed_validation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stats_failed_validation(i), target, stream);
  }

  // optional bool stats_out_of_date = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_stats_out_of_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStoreUserStatsResponse)
  return target;
}

size_t CMsgClientStoreUserStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStoreUserStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  total_size += 1UL * this->_internal_stats_failed_validation_size();
  for (const auto& msg : this->stats_failed_validation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc_stats());
    }

    // optional bool stats_out_of_date = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStoreUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStoreUserStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStoreUserStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStoreUserStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const CMsgClientStoreUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStoreUserStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_failed_validation_.MergeFrom(from.stats_failed_validation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000004u) {
      stats_out_of_date_ = from.stats_out_of_date_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStoreUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const CMsgClientStoreUserStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStoreUserStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStatsResponse::InternalSwap(CMsgClientStoreUserStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_failed_validation_.InternalSwap(&other->stats_failed_validation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, stats_out_of_date_)
      + sizeof(CMsgClientStoreUserStatsResponse::stats_out_of_date_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStatsResponse, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStoreUserStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStoreUserStats2_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStoreUserStats2_Stats>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStoreUserStats2.Stats)
}
CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats(const CMsgClientStoreUserStats2_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStoreUserStats2.Stats)
}

void CMsgClientStoreUserStats2_Stats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientStoreUserStats2_Stats::~CMsgClientStoreUserStats2_Stats() {
  // @@protoc_insertion_point(destructor:CMsgClientStoreUserStats2.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStoreUserStats2_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStoreUserStats2_Stats::ArenaDtor(void* object) {
  CMsgClientStoreUserStats2_Stats* _this = reinterpret_cast< CMsgClientStoreUserStats2_Stats* >(object);
  (void)_this;
}
void CMsgClientStoreUserStats2_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStoreUserStats2_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStoreUserStats2_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStoreUserStats2.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStoreUserStats2_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStoreUserStats2_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStoreUserStats2.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStoreUserStats2.Stats)
  return target;
}

size_t CMsgClientStoreUserStats2_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStoreUserStats2.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStoreUserStats2.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats2_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStoreUserStats2_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStoreUserStats2.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStoreUserStats2.Stats)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const CMsgClientStoreUserStats2_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStoreUserStats2.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStoreUserStats2.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const CMsgClientStoreUserStats2_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStoreUserStats2.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2_Stats::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats2_Stats::InternalSwap(CMsgClientStoreUserStats2_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats2_Stats, stat_value_)
      + sizeof(CMsgClientStoreUserStats2_Stats::stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats2_Stats, stat_id_)>(
          reinterpret_cast<char*>(&stat_id_),
          reinterpret_cast<char*>(&other->stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStoreUserStats2_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStoreUserStats2::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStoreUserStats2>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_settor_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_settee_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crc_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_explicit_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientStoreUserStats2::CMsgClientStoreUserStats2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStoreUserStats2)
}
CMsgClientStoreUserStats2::CMsgClientStoreUserStats2(const CMsgClientStoreUserStats2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStoreUserStats2)
}

void CMsgClientStoreUserStats2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
}

CMsgClientStoreUserStats2::~CMsgClientStoreUserStats2() {
  // @@protoc_insertion_point(destructor:CMsgClientStoreUserStats2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStoreUserStats2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStoreUserStats2::ArenaDtor(void* object) {
  CMsgClientStoreUserStats2* _this = reinterpret_cast< CMsgClientStoreUserStats2* >(object);
  (void)_this;
}
void CMsgClientStoreUserStats2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStoreUserStats2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStoreUserStats2::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStoreUserStats2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_reset_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStoreUserStats2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 settor_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_settor_steam_id(&has_bits);
          settor_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 settee_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_settee_steam_id(&has_bits);
          settee_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_crc_stats(&has_bits);
          crc_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool explicit_reset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_explicit_reset(&has_bits);
          explicit_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientStoreUserStats2.Stats stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStoreUserStats2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStoreUserStats2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // optional fixed64 settor_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_settor_steam_id(), target);
  }

  // optional fixed64 settee_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_settee_steam_id(), target);
  }

  // optional uint32 crc_stats = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_crc_stats(), target);
  }

  // optional bool explicit_reset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_explicit_reset(), target);
  }

  // repeated .CMsgClientStoreUserStats2.Stats stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStoreUserStats2)
  return target;
}

size_t CMsgClientStoreUserStats2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStoreUserStats2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientStoreUserStats2.Stats stats = 6;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 settor_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 settee_steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc_stats());
    }

    // optional bool explicit_reset = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStoreUserStats2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStoreUserStats2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStoreUserStats2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStoreUserStats2)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats2::MergeFrom(const CMsgClientStoreUserStats2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStoreUserStats2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      settor_steam_id_ = from.settor_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      settee_steam_id_ = from.settee_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      crc_stats_ = from.crc_stats_;
    }
    if (cached_has_bits & 0x00000010u) {
      explicit_reset_ = from.explicit_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStoreUserStats2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2::CopyFrom(const CMsgClientStoreUserStats2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStoreUserStats2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats2::InternalSwap(CMsgClientStoreUserStats2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats2, explicit_reset_)
      + sizeof(CMsgClientStoreUserStats2::explicit_reset_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats2, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStoreUserStats2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStatsUpdated_Updated_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStatsUpdated_Updated_Stats>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStatsUpdated.Updated_Stats)
}
CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats(const CMsgClientStatsUpdated_Updated_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStatsUpdated.Updated_Stats)
}

void CMsgClientStatsUpdated_Updated_Stats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientStatsUpdated_Updated_Stats::~CMsgClientStatsUpdated_Updated_Stats() {
  // @@protoc_insertion_point(destructor:CMsgClientStatsUpdated.Updated_Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStatsUpdated_Updated_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStatsUpdated_Updated_Stats::ArenaDtor(void* object) {
  CMsgClientStatsUpdated_Updated_Stats* _this = reinterpret_cast< CMsgClientStatsUpdated_Updated_Stats* >(object);
  (void)_this;
}
void CMsgClientStatsUpdated_Updated_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStatsUpdated_Updated_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStatsUpdated_Updated_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStatsUpdated.Updated_Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStatsUpdated_Updated_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStatsUpdated_Updated_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStatsUpdated.Updated_Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStatsUpdated.Updated_Stats)
  return target;
}

size_t CMsgClientStatsUpdated_Updated_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStatsUpdated.Updated_Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStatsUpdated.Updated_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStatsUpdated_Updated_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStatsUpdated_Updated_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStatsUpdated.Updated_Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStatsUpdated.Updated_Stats)
    MergeFrom(*source);
  }
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStatsUpdated.Updated_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStatsUpdated.Updated_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStatsUpdated.Updated_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated_Updated_Stats::IsInitialized() const {
  return true;
}

void CMsgClientStatsUpdated_Updated_Stats::InternalSwap(CMsgClientStatsUpdated_Updated_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStatsUpdated_Updated_Stats, stat_value_)
      + sizeof(CMsgClientStatsUpdated_Updated_Stats::stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStatsUpdated_Updated_Stats, stat_id_)>(
          reinterpret_cast<char*>(&stat_id_),
          reinterpret_cast<char*>(&other->stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStatsUpdated_Updated_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStatsUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStatsUpdated>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientStatsUpdated::CMsgClientStatsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updated_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStatsUpdated)
}
CMsgClientStatsUpdated::CMsgClientStatsUpdated(const CMsgClientStatsUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      updated_stats_(from.updated_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(crc_stats_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStatsUpdated)
}

void CMsgClientStatsUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_stats_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(crc_stats_));
}

CMsgClientStatsUpdated::~CMsgClientStatsUpdated() {
  // @@protoc_insertion_point(destructor:CMsgClientStatsUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStatsUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStatsUpdated::ArenaDtor(void* object) {
  CMsgClientStatsUpdated* _this = reinterpret_cast< CMsgClientStatsUpdated* >(object);
  (void)_this;
}
void CMsgClientStatsUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStatsUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStatsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStatsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_stats_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(crc_stats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStatsUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crc_stats(&has_bits);
          crc_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updated_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStatsUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStatsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // optional uint32 crc_stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crc_stats(), target);
  }

  // repeated .CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updated_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_updated_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStatsUpdated)
  return target;
}

size_t CMsgClientStatsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStatsUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  total_size += 1UL * this->_internal_updated_stats_size();
  for (const auto& msg : this->updated_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc_stats());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStatsUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStatsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStatsUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStatsUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStatsUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStatsUpdated)
    MergeFrom(*source);
  }
}

void CMsgClientStatsUpdated::MergeFrom(const CMsgClientStatsUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStatsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_stats_.MergeFrom(from.updated_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_stats_ = from.crc_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStatsUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStatsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStatsUpdated::CopyFrom(const CMsgClientStatsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStatsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated::IsInitialized() const {
  return true;
}

void CMsgClientStatsUpdated::InternalSwap(CMsgClientStatsUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updated_stats_.InternalSwap(&other->updated_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStatsUpdated, crc_stats_)
      + sizeof(CMsgClientStatsUpdated::crc_stats_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStatsUpdated, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStatsUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStoreUserStats_Stats_To_Store::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStoreUserStats_Stats_To_Store>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStoreUserStats.Stats_To_Store)
}
CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store(const CMsgClientStoreUserStats_Stats_To_Store& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStoreUserStats.Stats_To_Store)
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgClientStoreUserStats_Stats_To_Store::~CMsgClientStoreUserStats_Stats_To_Store() {
  // @@protoc_insertion_point(destructor:CMsgClientStoreUserStats.Stats_To_Store)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStoreUserStats_Stats_To_Store::ArenaDtor(void* object) {
  CMsgClientStoreUserStats_Stats_To_Store* _this = reinterpret_cast< CMsgClientStoreUserStats_Stats_To_Store* >(object);
  (void)_this;
}
void CMsgClientStoreUserStats_Stats_To_Store::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStoreUserStats_Stats_To_Store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStoreUserStats_Stats_To_Store::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStoreUserStats.Stats_To_Store)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStoreUserStats_Stats_To_Store::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStoreUserStats_Stats_To_Store::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStoreUserStats.Stats_To_Store)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStoreUserStats.Stats_To_Store)
  return target;
}

size_t CMsgClientStoreUserStats_Stats_To_Store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStoreUserStats.Stats_To_Store)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStoreUserStats.Stats_To_Store)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats_Stats_To_Store* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStoreUserStats_Stats_To_Store>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStoreUserStats.Stats_To_Store)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStoreUserStats.Stats_To_Store)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStoreUserStats.Stats_To_Store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStoreUserStats.Stats_To_Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStoreUserStats.Stats_To_Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats_Stats_To_Store::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats_Stats_To_Store::InternalSwap(CMsgClientStoreUserStats_Stats_To_Store* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats_Stats_To_Store, stat_value_)
      + sizeof(CMsgClientStoreUserStats_Stats_To_Store::stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats_Stats_To_Store, stat_id_)>(
          reinterpret_cast<char*>(&stat_id_),
          reinterpret_cast<char*>(&other->stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStoreUserStats_Stats_To_Store::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientStoreUserStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStoreUserStats>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_explicit_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientStoreUserStats::CMsgClientStoreUserStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_to_store_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientStoreUserStats)
}
CMsgClientStoreUserStats::CMsgClientStoreUserStats(const CMsgClientStoreUserStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_to_store_(from.stats_to_store_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStoreUserStats)
}

void CMsgClientStoreUserStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&explicit_reset_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
}

CMsgClientStoreUserStats::~CMsgClientStoreUserStats() {
  // @@protoc_insertion_point(destructor:CMsgClientStoreUserStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientStoreUserStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientStoreUserStats::ArenaDtor(void* object) {
  CMsgClientStoreUserStats* _this = reinterpret_cast< CMsgClientStoreUserStats* >(object);
  (void)_this;
}
void CMsgClientStoreUserStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStoreUserStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStoreUserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStoreUserStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_to_store_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_reset_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(explicit_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStoreUserStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool explicit_reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_explicit_reset(&has_bits);
          explicit_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats_to_store(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientStoreUserStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStoreUserStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // optional bool explicit_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_explicit_reset(), target);
  }

  // repeated .CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_to_store_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stats_to_store(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStoreUserStats)
  return target;
}

size_t CMsgClientStoreUserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStoreUserStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  total_size += 1UL * this->_internal_stats_to_store_size();
  for (const auto& msg : this->stats_to_store_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool explicit_reset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientStoreUserStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientStoreUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientStoreUserStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientStoreUserStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientStoreUserStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientStoreUserStats)
    MergeFrom(*source);
  }
}

void CMsgClientStoreUserStats::MergeFrom(const CMsgClientStoreUserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStoreUserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_to_store_.MergeFrom(from.stats_to_store_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      explicit_reset_ = from.explicit_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientStoreUserStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientStoreUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStoreUserStats::CopyFrom(const CMsgClientStoreUserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStoreUserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats::IsInitialized() const {
  return true;
}

void CMsgClientStoreUserStats::InternalSwap(CMsgClientStoreUserStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_to_store_.InternalSwap(&other->stats_to_store_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats, explicit_reset_)
      + sizeof(CMsgClientStoreUserStats::explicit_reset_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStoreUserStats, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStoreUserStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientGetUserStats* Arena::CreateMaybeMessage< ::CMsgClientGetUserStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetUserStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetUserStatsResponse_Stats* Arena::CreateMaybeMessage< ::CMsgClientGetUserStatsResponse_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetUserStatsResponse_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetUserStatsResponse_Achievement_Blocks* Arena::CreateMaybeMessage< ::CMsgClientGetUserStatsResponse_Achievement_Blocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetUserStatsResponse_Achievement_Blocks >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetUserStatsResponse* Arena::CreateMaybeMessage< ::CMsgClientGetUserStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetUserStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* Arena::CreateMaybeMessage< ::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStoreUserStatsResponse* Arena::CreateMaybeMessage< ::CMsgClientStoreUserStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStoreUserStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStoreUserStats2_Stats* Arena::CreateMaybeMessage< ::CMsgClientStoreUserStats2_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStoreUserStats2_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStoreUserStats2* Arena::CreateMaybeMessage< ::CMsgClientStoreUserStats2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStoreUserStats2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStatsUpdated_Updated_Stats* Arena::CreateMaybeMessage< ::CMsgClientStatsUpdated_Updated_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStatsUpdated_Updated_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStatsUpdated* Arena::CreateMaybeMessage< ::CMsgClientStatsUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStatsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStoreUserStats_Stats_To_Store* Arena::CreateMaybeMessage< ::CMsgClientStoreUserStats_Stats_To_Store >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStoreUserStats_Stats_To_Store >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStoreUserStats* Arena::CreateMaybeMessage< ::CMsgClientStoreUserStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStoreUserStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
