// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_video.proto

#include "steammessages_clientserver_video.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgVideoGameRecordingRepresentation::CMsgVideoGameRecordingRepresentation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_info_()
  , representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_rate_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , horizontal_resolution_(0u)
  , vertical_resolution_(0u)
  , frame_rate_(0)
  , bandwidth_(0u)
  , audio_sample_rate_(0u)
  , audio_channel_config_(0u){}
struct CMsgVideoGameRecordingRepresentationDefaultTypeInternal {
  constexpr CMsgVideoGameRecordingRepresentationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVideoGameRecordingRepresentationDefaultTypeInternal() {}
  union {
    CMsgVideoGameRecordingRepresentation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVideoGameRecordingRepresentationDefaultTypeInternal _CMsgVideoGameRecordingRepresentation_default_instance_;
constexpr CMsgVideoGameRecordingComponent::CMsgVideoGameRecordingComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : representations_()
  , component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contents_(0u)
  , segment_size_(0u){}
struct CMsgVideoGameRecordingComponentDefaultTypeInternal {
  constexpr CMsgVideoGameRecordingComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVideoGameRecordingComponentDefaultTypeInternal() {}
  union {
    CMsgVideoGameRecordingComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVideoGameRecordingComponentDefaultTypeInternal _CMsgVideoGameRecordingComponent_default_instance_;
constexpr CMsgVideoGameRecordingDef::CMsgVideoGameRecordingDef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : components_()
  , steamid_(PROTOBUF_ULONGLONG(0))
  , app_id_(0u)
  , num_segments_(0u)
  , length_milliseconds_(0u)
  , segment_duration_timescale_(0u)
  , segment_duration_(0u)
  , start_time_ms_(0u)
  , start_offset_in_timeline_ms_(0u){}
struct CMsgVideoGameRecordingDefDefaultTypeInternal {
  constexpr CMsgVideoGameRecordingDefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVideoGameRecordingDefDefaultTypeInternal() {}
  union {
    CMsgVideoGameRecordingDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVideoGameRecordingDefDefaultTypeInternal _CMsgVideoGameRecordingDef_default_instance_;
constexpr CVideo_GameRecordingSegmentInfo::CVideo_GameRecordingSegmentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , segment_size_bytes_(PROTOBUF_ULONGLONG(0))
  , segment_number_(0u){}
struct CVideo_GameRecordingSegmentInfoDefaultTypeInternal {
  constexpr CVideo_GameRecordingSegmentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingSegmentInfoDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingSegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingSegmentInfoDefaultTypeInternal _CVideo_GameRecordingSegmentInfo_default_instance_;
constexpr CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CVideo_GameRecordingSegmentUploadInfo_HTTPHeadersDefaultTypeInternal {
  constexpr CVideo_GameRecordingSegmentUploadInfo_HTTPHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingSegmentUploadInfo_HTTPHeadersDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingSegmentUploadInfo_HTTPHeadersDefaultTypeInternal _CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders_default_instance_;
constexpr CVideo_GameRecordingSegmentUploadInfo::CVideo_GameRecordingSegmentUploadInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_headers_()
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , segment_info_(nullptr)
  , use_https_(false){}
struct CVideo_GameRecordingSegmentUploadInfoDefaultTypeInternal {
  constexpr CVideo_GameRecordingSegmentUploadInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingSegmentUploadInfoDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingSegmentUploadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingSegmentUploadInfoDefaultTypeInternal _CVideo_GameRecordingSegmentUploadInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fvideo_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5fvideo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fvideo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_5fvideo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, representation_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, horizontal_resolution_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, vertical_resolution_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, audio_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, frame_rate_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, codec_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, audio_channel_config_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingRepresentation, segment_info_),
  0,
  3,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, component_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, contents_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, segment_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, file_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingComponent, representations_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, num_segments_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, length_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, segment_duration_timescale_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, segment_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, components_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, start_time_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgVideoGameRecordingDef, start_offset_in_timeline_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentInfo, segment_number_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentInfo, segment_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentInfo, component_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentInfo, representation_name_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, segment_info_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, url_host_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, url_path_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, use_https_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingSegmentUploadInfo, request_headers_),
  2,
  0,
  1,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::CMsgVideoGameRecordingRepresentation)},
  { 25, 35, sizeof(::CMsgVideoGameRecordingComponent)},
  { 40, 54, sizeof(::CMsgVideoGameRecordingDef)},
  { 63, 72, sizeof(::CVideo_GameRecordingSegmentInfo)},
  { 76, 83, sizeof(::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders)},
  { 85, 95, sizeof(::CVideo_GameRecordingSegmentUploadInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVideoGameRecordingRepresentation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVideoGameRecordingComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVideoGameRecordingDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingSegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingSegmentUploadInfo_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fvideo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&steammessages_clientserver_video.proto"
  "\032 google/protobuf/descriptor.proto\032\030stea"
  "mmessages_base.proto\"\301\002\n$CMsgVideoGameRe"
  "cordingRepresentation\022\033\n\023representation_"
  "name\030\002 \001(\t\022\035\n\025horizontal_resolution\030\003 \001("
  "\r\022\033\n\023vertical_resolution\030\004 \001(\r\022\022\n\nframe_"
  "rate\030\005 \001(\001\022\021\n\tbandwidth\030\006 \001(\r\022\031\n\021audio_s"
  "ample_rate\030\007 \001(\r\022\031\n\021frame_rate_string\030\010 "
  "\001(\t\022\r\n\005codec\030\t \001(\t\022\034\n\024audio_channel_conf"
  "ig\030\n \001(\r\0226\n\014segment_info\030\013 \003(\0132 .CVideo_"
  "GameRecordingSegmentInfo\"\264\001\n\037CMsgVideoGa"
  "meRecordingComponent\022\026\n\016component_name\030\001"
  " \001(\t\022\020\n\010contents\030\002 \001(\r\022\024\n\014segment_size\030\003"
  " \001(\r\022\021\n\tfile_type\030\004 \001(\t\022>\n\017representatio"
  "ns\030\005 \003(\0132%.CMsgVideoGameRecordingReprese"
  "ntation\"\237\002\n\031CMsgVideoGameRecordingDef\022\017\n"
  "\007steamid\030\001 \001(\004\022\016\n\006app_id\030\002 \001(\r\022\024\n\014num_se"
  "gments\030\003 \001(\r\022\033\n\023length_milliseconds\030\004 \001("
  "\r\022\"\n\032segment_duration_timescale\030\005 \001(\r\022\030\n"
  "\020segment_duration\030\006 \001(\r\0224\n\ncomponents\030\007 "
  "\003(\0132 .CMsgVideoGameRecordingComponent\022\025\n"
  "\rstart_time_ms\030\010 \001(\r\022#\n\033start_offset_in_"
  "timeline_ms\030\t \001(\r\"\212\001\n\037CVideo_GameRecordi"
  "ngSegmentInfo\022\026\n\016segment_number\030\001 \001(\r\022\032\n"
  "\022segment_size_bytes\030\002 \001(\004\022\026\n\016component_n"
  "ame\030\003 \001(\t\022\033\n\023representation_name\030\004 \001(\t\"\217"
  "\002\n%CVideo_GameRecordingSegmentUploadInfo"
  "\0226\n\014segment_info\030\001 \001(\0132 .CVideo_GameReco"
  "rdingSegmentInfo\022\020\n\010url_host\030\002 \001(\t\022\020\n\010ur"
  "l_path\030\003 \001(\t\022\021\n\tuse_https\030\004 \001(\010\022K\n\017reque"
  "st_headers\030\005 \003(\01322.CVideo_GameRecordingS"
  "egmentUploadInfo.HTTPHeaders\032*\n\013HTTPHead"
  "ers\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\tB\037H\001\200\001\000\252"
  "\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fvideo_2eproto = {
  false, false, 1345, descriptor_table_protodef_steammessages_5fclientserver_5fvideo_2eproto, "steammessages_clientserver_video.proto", 
  &descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_once, descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fvideo_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fvideo_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fvideo_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fvideo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5fvideo_2eproto);
  return descriptor_table_steammessages_5fclientserver_5fvideo_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fvideo_2eproto(&descriptor_table_steammessages_5fclientserver_5fvideo_2eproto);

// ===================================================================

class CMsgVideoGameRecordingRepresentation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVideoGameRecordingRepresentation>()._has_bits_);
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horizontal_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vertical_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_audio_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_rate_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_audio_channel_config(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgVideoGameRecordingRepresentation::CMsgVideoGameRecordingRepresentation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segment_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVideoGameRecordingRepresentation)
}
CMsgVideoGameRecordingRepresentation::CMsgVideoGameRecordingRepresentation(const CMsgVideoGameRecordingRepresentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segment_info_(from.segment_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArena());
  }
  frame_rate_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame_rate_string()) {
    frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_rate_string(), 
      GetArena());
  }
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_codec()) {
    codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codec(), 
      GetArena());
  }
  ::memcpy(&horizontal_resolution_, &from.horizontal_resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_channel_config_) -
    reinterpret_cast<char*>(&horizontal_resolution_)) + sizeof(audio_channel_config_));
  // @@protoc_insertion_point(copy_constructor:CMsgVideoGameRecordingRepresentation)
}

void CMsgVideoGameRecordingRepresentation::SharedCtor() {
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
frame_rate_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horizontal_resolution_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_channel_config_) -
    reinterpret_cast<char*>(&horizontal_resolution_)) + sizeof(audio_channel_config_));
}

CMsgVideoGameRecordingRepresentation::~CMsgVideoGameRecordingRepresentation() {
  // @@protoc_insertion_point(destructor:CMsgVideoGameRecordingRepresentation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVideoGameRecordingRepresentation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_rate_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgVideoGameRecordingRepresentation::ArenaDtor(void* object) {
  CMsgVideoGameRecordingRepresentation* _this = reinterpret_cast< CMsgVideoGameRecordingRepresentation* >(object);
  (void)_this;
}
void CMsgVideoGameRecordingRepresentation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVideoGameRecordingRepresentation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVideoGameRecordingRepresentation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVideoGameRecordingRepresentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      frame_rate_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      codec_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&horizontal_resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_sample_rate_) -
        reinterpret_cast<char*>(&horizontal_resolution_)) + sizeof(audio_sample_rate_));
  }
  audio_channel_config_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVideoGameRecordingRepresentation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string representation_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVideoGameRecordingRepresentation.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 horizontal_resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_horizontal_resolution(&has_bits);
          horizontal_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vertical_resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vertical_resolution(&has_bits);
          vertical_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double frame_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_frame_rate(&has_bits);
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 bandwidth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audio_sample_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_audio_sample_rate(&has_bits);
          audio_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string frame_rate_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_frame_rate_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVideoGameRecordingRepresentation.frame_rate_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string codec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVideoGameRecordingRepresentation.codec");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audio_channel_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_audio_channel_config(&has_bits);
          audio_channel_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CVideo_GameRecordingSegmentInfo segment_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVideoGameRecordingRepresentation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVideoGameRecordingRepresentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string representation_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVideoGameRecordingRepresentation.representation_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_representation_name(), target);
  }

  // optional uint32 horizontal_resolution = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_horizontal_resolution(), target);
  }

  // optional uint32 vertical_resolution = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vertical_resolution(), target);
  }

  // optional double frame_rate = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_frame_rate(), target);
  }

  // optional uint32 bandwidth = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bandwidth(), target);
  }

  // optional uint32 audio_sample_rate = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_audio_sample_rate(), target);
  }

  // optional string frame_rate_string = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_rate_string().data(), static_cast<int>(this->_internal_frame_rate_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVideoGameRecordingRepresentation.frame_rate_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_frame_rate_string(), target);
  }

  // optional string codec = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVideoGameRecordingRepresentation.codec");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_codec(), target);
  }

  // optional uint32 audio_channel_config = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_audio_channel_config(), target);
  }

  // repeated .CVideo_GameRecordingSegmentInfo segment_info = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_segment_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVideoGameRecordingRepresentation)
  return target;
}

size_t CMsgVideoGameRecordingRepresentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVideoGameRecordingRepresentation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentInfo segment_info = 11;
  total_size += 1UL * this->_internal_segment_info_size();
  for (const auto& msg : this->segment_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string representation_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional string frame_rate_string = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_rate_string());
    }

    // optional string codec = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_codec());
    }

    // optional uint32 horizontal_resolution = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_horizontal_resolution());
    }

    // optional uint32 vertical_resolution = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vertical_resolution());
    }

    // optional double frame_rate = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 bandwidth = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bandwidth());
    }

    // optional uint32 audio_sample_rate = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audio_sample_rate());
    }

  }
  // optional uint32 audio_channel_config = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_audio_channel_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVideoGameRecordingRepresentation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVideoGameRecordingRepresentation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVideoGameRecordingRepresentation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVideoGameRecordingRepresentation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVideoGameRecordingRepresentation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVideoGameRecordingRepresentation)
    MergeFrom(*source);
  }
}

void CMsgVideoGameRecordingRepresentation::MergeFrom(const CMsgVideoGameRecordingRepresentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVideoGameRecordingRepresentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_info_.MergeFrom(from.segment_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_rate_string(from._internal_frame_rate_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_codec(from._internal_codec());
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_resolution_ = from.horizontal_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      vertical_resolution_ = from.vertical_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000080u) {
      audio_sample_rate_ = from.audio_sample_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_audio_channel_config(from._internal_audio_channel_config());
  }
}

void CMsgVideoGameRecordingRepresentation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVideoGameRecordingRepresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVideoGameRecordingRepresentation::CopyFrom(const CMsgVideoGameRecordingRepresentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVideoGameRecordingRepresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVideoGameRecordingRepresentation::IsInitialized() const {
  return true;
}

void CMsgVideoGameRecordingRepresentation::InternalSwap(CMsgVideoGameRecordingRepresentation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_info_.InternalSwap(&other->segment_info_);
  representation_name_.Swap(&other->representation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_rate_string_.Swap(&other->frame_rate_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  codec_.Swap(&other->codec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVideoGameRecordingRepresentation, audio_channel_config_)
      + sizeof(CMsgVideoGameRecordingRepresentation::audio_channel_config_)
      - PROTOBUF_FIELD_OFFSET(CMsgVideoGameRecordingRepresentation, horizontal_resolution_)>(
          reinterpret_cast<char*>(&horizontal_resolution_),
          reinterpret_cast<char*>(&other->horizontal_resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVideoGameRecordingRepresentation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgVideoGameRecordingComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVideoGameRecordingComponent>()._has_bits_);
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgVideoGameRecordingComponent::CMsgVideoGameRecordingComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  representations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVideoGameRecordingComponent)
}
CMsgVideoGameRecordingComponent::CMsgVideoGameRecordingComponent(const CMsgVideoGameRecordingComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      representations_(from.representations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArena());
  }
  file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_type()) {
    file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_type(), 
      GetArena());
  }
  ::memcpy(&contents_, &from.contents_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_size_) -
    reinterpret_cast<char*>(&contents_)) + sizeof(segment_size_));
  // @@protoc_insertion_point(copy_constructor:CMsgVideoGameRecordingComponent)
}

void CMsgVideoGameRecordingComponent::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contents_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_size_) -
    reinterpret_cast<char*>(&contents_)) + sizeof(segment_size_));
}

CMsgVideoGameRecordingComponent::~CMsgVideoGameRecordingComponent() {
  // @@protoc_insertion_point(destructor:CMsgVideoGameRecordingComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVideoGameRecordingComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgVideoGameRecordingComponent::ArenaDtor(void* object) {
  CMsgVideoGameRecordingComponent* _this = reinterpret_cast< CMsgVideoGameRecordingComponent* >(object);
  (void)_this;
}
void CMsgVideoGameRecordingComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVideoGameRecordingComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVideoGameRecordingComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVideoGameRecordingComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  representations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&contents_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_size_) -
        reinterpret_cast<char*>(&contents_)) + sizeof(segment_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVideoGameRecordingComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string component_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVideoGameRecordingComponent.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_contents(&has_bits);
          contents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 segment_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_segment_size(&has_bits);
          segment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVideoGameRecordingComponent.file_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVideoGameRecordingRepresentation representations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_representations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVideoGameRecordingComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVideoGameRecordingComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string component_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVideoGameRecordingComponent.component_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_name(), target);
  }

  // optional uint32 contents = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_contents(), target);
  }

  // optional uint32 segment_size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_segment_size(), target);
  }

  // optional string file_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_type().data(), static_cast<int>(this->_internal_file_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVideoGameRecordingComponent.file_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_type(), target);
  }

  // repeated .CMsgVideoGameRecordingRepresentation representations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_representations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_representations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVideoGameRecordingComponent)
  return target;
}

size_t CMsgVideoGameRecordingComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVideoGameRecordingComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVideoGameRecordingRepresentation representations = 5;
  total_size += 1UL * this->_internal_representations_size();
  for (const auto& msg : this->representations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string component_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string file_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_type());
    }

    // optional uint32 contents = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contents());
    }

    // optional uint32 segment_size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_segment_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVideoGameRecordingComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVideoGameRecordingComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVideoGameRecordingComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVideoGameRecordingComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVideoGameRecordingComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVideoGameRecordingComponent)
    MergeFrom(*source);
  }
}

void CMsgVideoGameRecordingComponent::MergeFrom(const CMsgVideoGameRecordingComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVideoGameRecordingComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  representations_.MergeFrom(from.representations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_type(from._internal_file_type());
    }
    if (cached_has_bits & 0x00000004u) {
      contents_ = from.contents_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_size_ = from.segment_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVideoGameRecordingComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVideoGameRecordingComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVideoGameRecordingComponent::CopyFrom(const CMsgVideoGameRecordingComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVideoGameRecordingComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVideoGameRecordingComponent::IsInitialized() const {
  return true;
}

void CMsgVideoGameRecordingComponent::InternalSwap(CMsgVideoGameRecordingComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  representations_.InternalSwap(&other->representations_);
  component_name_.Swap(&other->component_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_type_.Swap(&other->file_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVideoGameRecordingComponent, segment_size_)
      + sizeof(CMsgVideoGameRecordingComponent::segment_size_)
      - PROTOBUF_FIELD_OFFSET(CMsgVideoGameRecordingComponent, contents_)>(
          reinterpret_cast<char*>(&contents_),
          reinterpret_cast<char*>(&other->contents_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVideoGameRecordingComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgVideoGameRecordingDef::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVideoGameRecordingDef>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_segments(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_segment_duration_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_segment_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_start_offset_in_timeline_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgVideoGameRecordingDef::CMsgVideoGameRecordingDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVideoGameRecordingDef)
}
CMsgVideoGameRecordingDef::CMsgVideoGameRecordingDef(const CMsgVideoGameRecordingDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      components_(from.components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_offset_in_timeline_ms_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(start_offset_in_timeline_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgVideoGameRecordingDef)
}

void CMsgVideoGameRecordingDef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_offset_in_timeline_ms_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(start_offset_in_timeline_ms_));
}

CMsgVideoGameRecordingDef::~CMsgVideoGameRecordingDef() {
  // @@protoc_insertion_point(destructor:CMsgVideoGameRecordingDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVideoGameRecordingDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgVideoGameRecordingDef::ArenaDtor(void* object) {
  CMsgVideoGameRecordingDef* _this = reinterpret_cast< CMsgVideoGameRecordingDef* >(object);
  (void)_this;
}
void CMsgVideoGameRecordingDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVideoGameRecordingDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVideoGameRecordingDef::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVideoGameRecordingDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_offset_in_timeline_ms_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(start_offset_in_timeline_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVideoGameRecordingDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_segments(&has_bits);
          num_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length_milliseconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_length_milliseconds(&has_bits);
          length_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 segment_duration_timescale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_segment_duration_timescale(&has_bits);
          segment_duration_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 segment_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_segment_duration(&has_bits);
          segment_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVideoGameRecordingComponent components = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_start_time_ms(&has_bits);
          start_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_offset_in_timeline_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_start_offset_in_timeline_ms(&has_bits);
          start_offset_in_timeline_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVideoGameRecordingDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVideoGameRecordingDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 num_segments = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_segments(), target);
  }

  // optional uint32 length_milliseconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_length_milliseconds(), target);
  }

  // optional uint32 segment_duration_timescale = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_segment_duration_timescale(), target);
  }

  // optional uint32 segment_duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_segment_duration(), target);
  }

  // repeated .CMsgVideoGameRecordingComponent components = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_components(i), target, stream);
  }

  // optional uint32 start_time_ms = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_start_time_ms(), target);
  }

  // optional uint32 start_offset_in_timeline_ms = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_start_offset_in_timeline_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVideoGameRecordingDef)
  return target;
}

size_t CMsgVideoGameRecordingDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVideoGameRecordingDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVideoGameRecordingComponent components = 7;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steamid());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_app_id());
    }

    // optional uint32 num_segments = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_segments());
    }

    // optional uint32 length_milliseconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_length_milliseconds());
    }

    // optional uint32 segment_duration_timescale = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_segment_duration_timescale());
    }

    // optional uint32 segment_duration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_segment_duration());
    }

    // optional uint32 start_time_ms = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time_ms());
    }

    // optional uint32 start_offset_in_timeline_ms = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_offset_in_timeline_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVideoGameRecordingDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVideoGameRecordingDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVideoGameRecordingDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVideoGameRecordingDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVideoGameRecordingDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVideoGameRecordingDef)
    MergeFrom(*source);
  }
}

void CMsgVideoGameRecordingDef::MergeFrom(const CMsgVideoGameRecordingDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVideoGameRecordingDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_segments_ = from.num_segments_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_milliseconds_ = from.length_milliseconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      segment_duration_timescale_ = from.segment_duration_timescale_;
    }
    if (cached_has_bits & 0x00000020u) {
      segment_duration_ = from.segment_duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_time_ms_ = from.start_time_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_offset_in_timeline_ms_ = from.start_offset_in_timeline_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVideoGameRecordingDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVideoGameRecordingDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVideoGameRecordingDef::CopyFrom(const CMsgVideoGameRecordingDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVideoGameRecordingDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVideoGameRecordingDef::IsInitialized() const {
  return true;
}

void CMsgVideoGameRecordingDef::InternalSwap(CMsgVideoGameRecordingDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  components_.InternalSwap(&other->components_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVideoGameRecordingDef, start_offset_in_timeline_ms_)
      + sizeof(CMsgVideoGameRecordingDef::start_offset_in_timeline_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgVideoGameRecordingDef, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVideoGameRecordingDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingSegmentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameRecordingSegmentInfo>()._has_bits_);
  static void set_has_segment_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_segment_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_GameRecordingSegmentInfo::CVideo_GameRecordingSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingSegmentInfo)
}
CVideo_GameRecordingSegmentInfo::CVideo_GameRecordingSegmentInfo(const CVideo_GameRecordingSegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArena());
  }
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArena());
  }
  ::memcpy(&segment_size_bytes_, &from.segment_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_number_) -
    reinterpret_cast<char*>(&segment_size_bytes_)) + sizeof(segment_number_));
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingSegmentInfo)
}

void CVideo_GameRecordingSegmentInfo::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segment_size_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_number_) -
    reinterpret_cast<char*>(&segment_size_bytes_)) + sizeof(segment_number_));
}

CVideo_GameRecordingSegmentInfo::~CVideo_GameRecordingSegmentInfo() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingSegmentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingSegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_GameRecordingSegmentInfo::ArenaDtor(void* object) {
  CVideo_GameRecordingSegmentInfo* _this = reinterpret_cast< CVideo_GameRecordingSegmentInfo* >(object);
  (void)_this;
}
void CVideo_GameRecordingSegmentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingSegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingSegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&segment_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_number_) -
        reinterpret_cast<char*>(&segment_size_bytes_)) + sizeof(segment_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingSegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 segment_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_segment_number(&has_bits);
          segment_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 segment_size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_segment_size_bytes(&has_bits);
          segment_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string component_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameRecordingSegmentInfo.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string representation_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameRecordingSegmentInfo.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingSegmentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 segment_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_segment_number(), target);
  }

  // optional uint64 segment_size_bytes = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_segment_size_bytes(), target);
  }

  // optional string component_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameRecordingSegmentInfo.component_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_name(), target);
  }

  // optional string representation_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameRecordingSegmentInfo.representation_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_representation_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingSegmentInfo)
  return target;
}

size_t CVideo_GameRecordingSegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingSegmentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string component_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string representation_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional uint64 segment_size_bytes = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_segment_size_bytes());
    }

    // optional uint32 segment_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_segment_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingSegmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingSegmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingSegmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingSegmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingSegmentInfo)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingSegmentInfo::MergeFrom(const CVideo_GameRecordingSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000004u) {
      segment_size_bytes_ = from.segment_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_number_ = from.segment_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_GameRecordingSegmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingSegmentInfo::CopyFrom(const CVideo_GameRecordingSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingSegmentInfo::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingSegmentInfo::InternalSwap(CVideo_GameRecordingSegmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  component_name_.Swap(&other->component_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  representation_name_.Swap(&other->representation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_GameRecordingSegmentInfo, segment_number_)
      + sizeof(CVideo_GameRecordingSegmentInfo::segment_number_)
      - PROTOBUF_FIELD_OFFSET(CVideo_GameRecordingSegmentInfo, segment_size_bytes_)>(
          reinterpret_cast<char*>(&segment_size_bytes_),
          reinterpret_cast<char*>(&other->segment_size_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingSegmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
}
CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::~CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::ArenaDtor(void* object) {
  CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* _this = reinterpret_cast< CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* >(object);
  (void)_this;
}
void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  return target;
}

size_t CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::MergeFrom(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::CopyFrom(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::InternalSwap(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingSegmentUploadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameRecordingSegmentUploadInfo>()._has_bits_);
  static const ::CVideo_GameRecordingSegmentInfo& segment_info(const CVideo_GameRecordingSegmentUploadInfo* msg);
  static void set_has_segment_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CVideo_GameRecordingSegmentInfo&
CVideo_GameRecordingSegmentUploadInfo::_Internal::segment_info(const CVideo_GameRecordingSegmentUploadInfo* msg) {
  return *msg->segment_info_;
}
CVideo_GameRecordingSegmentUploadInfo::CVideo_GameRecordingSegmentUploadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingSegmentUploadInfo)
}
CVideo_GameRecordingSegmentUploadInfo::CVideo_GameRecordingSegmentUploadInfo(const CVideo_GameRecordingSegmentUploadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArena());
  }
  url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url_path()) {
    url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_path(), 
      GetArena());
  }
  if (from._internal_has_segment_info()) {
    segment_info_ = new ::CVideo_GameRecordingSegmentInfo(*from.segment_info_);
  } else {
    segment_info_ = nullptr;
  }
  use_https_ = from.use_https_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingSegmentUploadInfo)
}

void CVideo_GameRecordingSegmentUploadInfo::SharedCtor() {
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segment_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&segment_info_)) + sizeof(use_https_));
}

CVideo_GameRecordingSegmentUploadInfo::~CVideo_GameRecordingSegmentUploadInfo() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingSegmentUploadInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingSegmentUploadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete segment_info_;
}

void CVideo_GameRecordingSegmentUploadInfo::ArenaDtor(void* object) {
  CVideo_GameRecordingSegmentUploadInfo* _this = reinterpret_cast< CVideo_GameRecordingSegmentUploadInfo* >(object);
  (void)_this;
}
void CVideo_GameRecordingSegmentUploadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingSegmentUploadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingSegmentUploadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingSegmentUploadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(segment_info_ != nullptr);
      segment_info_->Clear();
    }
  }
  use_https_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingSegmentUploadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CVideo_GameRecordingSegmentInfo segment_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameRecordingSegmentUploadInfo.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameRecordingSegmentUploadInfo.url_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_https = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders request_headers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingSegmentUploadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingSegmentUploadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CVideo_GameRecordingSegmentInfo segment_info = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::segment_info(this), target, stream);
  }

  // optional string url_host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameRecordingSegmentUploadInfo.url_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_host(), target);
  }

  // optional string url_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_path().data(), static_cast<int>(this->_internal_url_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameRecordingSegmentUploadInfo.url_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url_path(), target);
  }

  // optional bool use_https = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_https(), target);
  }

  // repeated .CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders request_headers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_request_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingSegmentUploadInfo)
  return target;
}

size_t CVideo_GameRecordingSegmentUploadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingSegmentUploadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders request_headers = 5;
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url_host = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional string url_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_path());
    }

    // optional .CVideo_GameRecordingSegmentInfo segment_info = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segment_info_);
    }

    // optional bool use_https = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingSegmentUploadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingSegmentUploadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingSegmentUploadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingSegmentUploadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingSegmentUploadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingSegmentUploadInfo)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingSegmentUploadInfo::MergeFrom(const CVideo_GameRecordingSegmentUploadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingSegmentUploadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_path(from._internal_url_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_segment_info()->::CVideo_GameRecordingSegmentInfo::MergeFrom(from._internal_segment_info());
    }
    if (cached_has_bits & 0x00000008u) {
      use_https_ = from.use_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_GameRecordingSegmentUploadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingSegmentUploadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingSegmentUploadInfo::CopyFrom(const CVideo_GameRecordingSegmentUploadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingSegmentUploadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingSegmentUploadInfo::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingSegmentUploadInfo::InternalSwap(CVideo_GameRecordingSegmentUploadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  url_host_.Swap(&other->url_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_path_.Swap(&other->url_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_GameRecordingSegmentUploadInfo, use_https_)
      + sizeof(CVideo_GameRecordingSegmentUploadInfo::use_https_)
      - PROTOBUF_FIELD_OFFSET(CVideo_GameRecordingSegmentUploadInfo, segment_info_)>(
          reinterpret_cast<char*>(&segment_info_),
          reinterpret_cast<char*>(&other->segment_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingSegmentUploadInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgVideoGameRecordingRepresentation* Arena::CreateMaybeMessage< ::CMsgVideoGameRecordingRepresentation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVideoGameRecordingRepresentation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVideoGameRecordingComponent* Arena::CreateMaybeMessage< ::CMsgVideoGameRecordingComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVideoGameRecordingComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVideoGameRecordingDef* Arena::CreateMaybeMessage< ::CMsgVideoGameRecordingDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVideoGameRecordingDef >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingSegmentInfo* Arena::CreateMaybeMessage< ::CVideo_GameRecordingSegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingSegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* Arena::CreateMaybeMessage< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingSegmentUploadInfo* Arena::CreateMaybeMessage< ::CVideo_GameRecordingSegmentUploadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingSegmentUploadInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
