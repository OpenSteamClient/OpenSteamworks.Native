// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_video.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fvideo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fvideo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5fvideo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_5fvideo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fvideo_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(int index);
class CMsgVideoGameRecordingComponent;
struct CMsgVideoGameRecordingComponentDefaultTypeInternal;
extern CMsgVideoGameRecordingComponentDefaultTypeInternal _CMsgVideoGameRecordingComponent_default_instance_;
class CMsgVideoGameRecordingDef;
struct CMsgVideoGameRecordingDefDefaultTypeInternal;
extern CMsgVideoGameRecordingDefDefaultTypeInternal _CMsgVideoGameRecordingDef_default_instance_;
class CMsgVideoGameRecordingRepresentation;
struct CMsgVideoGameRecordingRepresentationDefaultTypeInternal;
extern CMsgVideoGameRecordingRepresentationDefaultTypeInternal _CMsgVideoGameRecordingRepresentation_default_instance_;
class CVideo_GameRecordingSegmentInfo;
struct CVideo_GameRecordingSegmentInfoDefaultTypeInternal;
extern CVideo_GameRecordingSegmentInfoDefaultTypeInternal _CVideo_GameRecordingSegmentInfo_default_instance_;
class CVideo_GameRecordingSegmentUploadInfo;
struct CVideo_GameRecordingSegmentUploadInfoDefaultTypeInternal;
extern CVideo_GameRecordingSegmentUploadInfoDefaultTypeInternal _CVideo_GameRecordingSegmentUploadInfo_default_instance_;
class CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders;
struct CVideo_GameRecordingSegmentUploadInfo_HTTPHeadersDefaultTypeInternal;
extern CVideo_GameRecordingSegmentUploadInfo_HTTPHeadersDefaultTypeInternal _CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgVideoGameRecordingComponent* Arena::CreateMaybeMessage<::CMsgVideoGameRecordingComponent>(Arena*);
template<> ::CMsgVideoGameRecordingDef* Arena::CreateMaybeMessage<::CMsgVideoGameRecordingDef>(Arena*);
template<> ::CMsgVideoGameRecordingRepresentation* Arena::CreateMaybeMessage<::CMsgVideoGameRecordingRepresentation>(Arena*);
template<> ::CVideo_GameRecordingSegmentInfo* Arena::CreateMaybeMessage<::CVideo_GameRecordingSegmentInfo>(Arena*);
template<> ::CVideo_GameRecordingSegmentUploadInfo* Arena::CreateMaybeMessage<::CVideo_GameRecordingSegmentUploadInfo>(Arena*);
template<> ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* Arena::CreateMaybeMessage<::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgVideoGameRecordingRepresentation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVideoGameRecordingRepresentation) */ {
 public:
  inline CMsgVideoGameRecordingRepresentation() : CMsgVideoGameRecordingRepresentation(nullptr) {}
  virtual ~CMsgVideoGameRecordingRepresentation();
  explicit constexpr CMsgVideoGameRecordingRepresentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVideoGameRecordingRepresentation(const CMsgVideoGameRecordingRepresentation& from);
  CMsgVideoGameRecordingRepresentation(CMsgVideoGameRecordingRepresentation&& from) noexcept
    : CMsgVideoGameRecordingRepresentation() {
    *this = ::std::move(from);
  }

  inline CMsgVideoGameRecordingRepresentation& operator=(const CMsgVideoGameRecordingRepresentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVideoGameRecordingRepresentation& operator=(CMsgVideoGameRecordingRepresentation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgVideoGameRecordingRepresentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVideoGameRecordingRepresentation* internal_default_instance() {
    return reinterpret_cast<const CMsgVideoGameRecordingRepresentation*>(
               &_CMsgVideoGameRecordingRepresentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgVideoGameRecordingRepresentation& a, CMsgVideoGameRecordingRepresentation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVideoGameRecordingRepresentation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVideoGameRecordingRepresentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVideoGameRecordingRepresentation* New() const final {
    return CreateMaybeMessage<CMsgVideoGameRecordingRepresentation>(nullptr);
  }

  CMsgVideoGameRecordingRepresentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVideoGameRecordingRepresentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVideoGameRecordingRepresentation& from);
  void MergeFrom(const CMsgVideoGameRecordingRepresentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVideoGameRecordingRepresentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVideoGameRecordingRepresentation";
  }
  protected:
  explicit CMsgVideoGameRecordingRepresentation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentInfoFieldNumber = 11,
    kRepresentationNameFieldNumber = 2,
    kFrameRateStringFieldNumber = 8,
    kCodecFieldNumber = 9,
    kHorizontalResolutionFieldNumber = 3,
    kVerticalResolutionFieldNumber = 4,
    kFrameRateFieldNumber = 5,
    kBandwidthFieldNumber = 6,
    kAudioSampleRateFieldNumber = 7,
    kAudioChannelConfigFieldNumber = 10,
  };
  // repeated .CVideo_GameRecordingSegmentInfo segment_info = 11;
  int segment_info_size() const;
  private:
  int _internal_segment_info_size() const;
  public:
  void clear_segment_info();
  ::CVideo_GameRecordingSegmentInfo* mutable_segment_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >*
      mutable_segment_info();
  private:
  const ::CVideo_GameRecordingSegmentInfo& _internal_segment_info(int index) const;
  ::CVideo_GameRecordingSegmentInfo* _internal_add_segment_info();
  public:
  const ::CVideo_GameRecordingSegmentInfo& segment_info(int index) const;
  ::CVideo_GameRecordingSegmentInfo* add_segment_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >&
      segment_info() const;

  // optional string representation_name = 2;
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  void set_representation_name(const std::string& value);
  void set_representation_name(std::string&& value);
  void set_representation_name(const char* value);
  void set_representation_name(const char* value, size_t size);
  std::string* mutable_representation_name();
  std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional string frame_rate_string = 8;
  bool has_frame_rate_string() const;
  private:
  bool _internal_has_frame_rate_string() const;
  public:
  void clear_frame_rate_string();
  const std::string& frame_rate_string() const;
  void set_frame_rate_string(const std::string& value);
  void set_frame_rate_string(std::string&& value);
  void set_frame_rate_string(const char* value);
  void set_frame_rate_string(const char* value, size_t size);
  std::string* mutable_frame_rate_string();
  std::string* release_frame_rate_string();
  void set_allocated_frame_rate_string(std::string* frame_rate_string);
  private:
  const std::string& _internal_frame_rate_string() const;
  void _internal_set_frame_rate_string(const std::string& value);
  std::string* _internal_mutable_frame_rate_string();
  public:

  // optional string codec = 9;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const std::string& codec() const;
  void set_codec(const std::string& value);
  void set_codec(std::string&& value);
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  std::string* mutable_codec();
  std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // optional uint32 horizontal_resolution = 3;
  bool has_horizontal_resolution() const;
  private:
  bool _internal_has_horizontal_resolution() const;
  public:
  void clear_horizontal_resolution();
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontal_resolution() const;
  void set_horizontal_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_horizontal_resolution() const;
  void _internal_set_horizontal_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 vertical_resolution = 4;
  bool has_vertical_resolution() const;
  private:
  bool _internal_has_vertical_resolution() const;
  public:
  void clear_vertical_resolution();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertical_resolution() const;
  void set_vertical_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vertical_resolution() const;
  void _internal_set_vertical_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double frame_rate = 5;
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  double frame_rate() const;
  void set_frame_rate(double value);
  private:
  double _internal_frame_rate() const;
  void _internal_set_frame_rate(double value);
  public:

  // optional uint32 bandwidth = 6;
  bool has_bandwidth() const;
  private:
  bool _internal_has_bandwidth() const;
  public:
  void clear_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::uint32 bandwidth() const;
  void set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bandwidth() const;
  void _internal_set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 audio_sample_rate = 7;
  bool has_audio_sample_rate() const;
  private:
  bool _internal_has_audio_sample_rate() const;
  public:
  void clear_audio_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_sample_rate() const;
  void set_audio_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_audio_sample_rate() const;
  void _internal_set_audio_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 audio_channel_config = 10;
  bool has_audio_channel_config() const;
  private:
  bool _internal_has_audio_channel_config() const;
  public:
  void clear_audio_channel_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_channel_config() const;
  void set_audio_channel_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_audio_channel_config() const;
  void _internal_set_audio_channel_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVideoGameRecordingRepresentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo > segment_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_rate_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontal_resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vertical_resolution_;
  double frame_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_channel_config_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class CMsgVideoGameRecordingComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVideoGameRecordingComponent) */ {
 public:
  inline CMsgVideoGameRecordingComponent() : CMsgVideoGameRecordingComponent(nullptr) {}
  virtual ~CMsgVideoGameRecordingComponent();
  explicit constexpr CMsgVideoGameRecordingComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVideoGameRecordingComponent(const CMsgVideoGameRecordingComponent& from);
  CMsgVideoGameRecordingComponent(CMsgVideoGameRecordingComponent&& from) noexcept
    : CMsgVideoGameRecordingComponent() {
    *this = ::std::move(from);
  }

  inline CMsgVideoGameRecordingComponent& operator=(const CMsgVideoGameRecordingComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVideoGameRecordingComponent& operator=(CMsgVideoGameRecordingComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgVideoGameRecordingComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVideoGameRecordingComponent* internal_default_instance() {
    return reinterpret_cast<const CMsgVideoGameRecordingComponent*>(
               &_CMsgVideoGameRecordingComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgVideoGameRecordingComponent& a, CMsgVideoGameRecordingComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVideoGameRecordingComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVideoGameRecordingComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVideoGameRecordingComponent* New() const final {
    return CreateMaybeMessage<CMsgVideoGameRecordingComponent>(nullptr);
  }

  CMsgVideoGameRecordingComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVideoGameRecordingComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVideoGameRecordingComponent& from);
  void MergeFrom(const CMsgVideoGameRecordingComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVideoGameRecordingComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVideoGameRecordingComponent";
  }
  protected:
  explicit CMsgVideoGameRecordingComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepresentationsFieldNumber = 5,
    kComponentNameFieldNumber = 1,
    kFileTypeFieldNumber = 4,
    kContentsFieldNumber = 2,
    kSegmentSizeFieldNumber = 3,
  };
  // repeated .CMsgVideoGameRecordingRepresentation representations = 5;
  int representations_size() const;
  private:
  int _internal_representations_size() const;
  public:
  void clear_representations();
  ::CMsgVideoGameRecordingRepresentation* mutable_representations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingRepresentation >*
      mutable_representations();
  private:
  const ::CMsgVideoGameRecordingRepresentation& _internal_representations(int index) const;
  ::CMsgVideoGameRecordingRepresentation* _internal_add_representations();
  public:
  const ::CMsgVideoGameRecordingRepresentation& representations(int index) const;
  ::CMsgVideoGameRecordingRepresentation* add_representations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingRepresentation >&
      representations() const;

  // optional string component_name = 1;
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string file_type = 4;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  const std::string& file_type() const;
  void set_file_type(const std::string& value);
  void set_file_type(std::string&& value);
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  std::string* mutable_file_type();
  std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // optional uint32 contents = 2;
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  ::PROTOBUF_NAMESPACE_ID::uint32 contents() const;
  void set_contents(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contents() const;
  void _internal_set_contents(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 segment_size = 3;
  bool has_segment_size() const;
  private:
  bool _internal_has_segment_size() const;
  public:
  void clear_segment_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_size() const;
  void set_segment_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_size() const;
  void _internal_set_segment_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVideoGameRecordingComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingRepresentation > representations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class CMsgVideoGameRecordingDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVideoGameRecordingDef) */ {
 public:
  inline CMsgVideoGameRecordingDef() : CMsgVideoGameRecordingDef(nullptr) {}
  virtual ~CMsgVideoGameRecordingDef();
  explicit constexpr CMsgVideoGameRecordingDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVideoGameRecordingDef(const CMsgVideoGameRecordingDef& from);
  CMsgVideoGameRecordingDef(CMsgVideoGameRecordingDef&& from) noexcept
    : CMsgVideoGameRecordingDef() {
    *this = ::std::move(from);
  }

  inline CMsgVideoGameRecordingDef& operator=(const CMsgVideoGameRecordingDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVideoGameRecordingDef& operator=(CMsgVideoGameRecordingDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgVideoGameRecordingDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVideoGameRecordingDef* internal_default_instance() {
    return reinterpret_cast<const CMsgVideoGameRecordingDef*>(
               &_CMsgVideoGameRecordingDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgVideoGameRecordingDef& a, CMsgVideoGameRecordingDef& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVideoGameRecordingDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVideoGameRecordingDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVideoGameRecordingDef* New() const final {
    return CreateMaybeMessage<CMsgVideoGameRecordingDef>(nullptr);
  }

  CMsgVideoGameRecordingDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVideoGameRecordingDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVideoGameRecordingDef& from);
  void MergeFrom(const CMsgVideoGameRecordingDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVideoGameRecordingDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVideoGameRecordingDef";
  }
  protected:
  explicit CMsgVideoGameRecordingDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 7,
    kSteamidFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kNumSegmentsFieldNumber = 3,
    kLengthMillisecondsFieldNumber = 4,
    kSegmentDurationTimescaleFieldNumber = 5,
    kSegmentDurationFieldNumber = 6,
    kStartTimeMsFieldNumber = 8,
    kStartOffsetInTimelineMsFieldNumber = 9,
  };
  // repeated .CMsgVideoGameRecordingComponent components = 7;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::CMsgVideoGameRecordingComponent* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingComponent >*
      mutable_components();
  private:
  const ::CMsgVideoGameRecordingComponent& _internal_components(int index) const;
  ::CMsgVideoGameRecordingComponent* _internal_add_components();
  public:
  const ::CMsgVideoGameRecordingComponent& components(int index) const;
  ::CMsgVideoGameRecordingComponent* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingComponent >&
      components() const;

  // optional uint64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_segments = 3;
  bool has_num_segments() const;
  private:
  bool _internal_has_num_segments() const;
  public:
  void clear_num_segments();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_segments() const;
  void set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_segments() const;
  void _internal_set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 length_milliseconds = 4;
  bool has_length_milliseconds() const;
  private:
  bool _internal_has_length_milliseconds() const;
  public:
  void clear_length_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 length_milliseconds() const;
  void set_length_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length_milliseconds() const;
  void _internal_set_length_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 segment_duration_timescale = 5;
  bool has_segment_duration_timescale() const;
  private:
  bool _internal_has_segment_duration_timescale() const;
  public:
  void clear_segment_duration_timescale();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_duration_timescale() const;
  void set_segment_duration_timescale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_duration_timescale() const;
  void _internal_set_segment_duration_timescale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 segment_duration = 6;
  bool has_segment_duration() const;
  private:
  bool _internal_has_segment_duration() const;
  public:
  void clear_segment_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_duration() const;
  void set_segment_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_duration() const;
  void _internal_set_segment_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_time_ms = 8;
  bool has_start_time_ms() const;
  private:
  bool _internal_has_start_time_ms() const;
  public:
  void clear_start_time_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_ms() const;
  void set_start_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time_ms() const;
  void _internal_set_start_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_offset_in_timeline_ms = 9;
  bool has_start_offset_in_timeline_ms() const;
  private:
  bool _internal_has_start_offset_in_timeline_ms() const;
  public:
  void clear_start_offset_in_timeline_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_offset_in_timeline_ms() const;
  void set_start_offset_in_timeline_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_offset_in_timeline_ms() const;
  void _internal_set_start_offset_in_timeline_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVideoGameRecordingDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingComponent > components_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_segments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_milliseconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_duration_timescale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_offset_in_timeline_ms_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingSegmentInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingSegmentInfo) */ {
 public:
  inline CVideo_GameRecordingSegmentInfo() : CVideo_GameRecordingSegmentInfo(nullptr) {}
  virtual ~CVideo_GameRecordingSegmentInfo();
  explicit constexpr CVideo_GameRecordingSegmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingSegmentInfo(const CVideo_GameRecordingSegmentInfo& from);
  CVideo_GameRecordingSegmentInfo(CVideo_GameRecordingSegmentInfo&& from) noexcept
    : CVideo_GameRecordingSegmentInfo() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingSegmentInfo& operator=(const CVideo_GameRecordingSegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingSegmentInfo& operator=(CVideo_GameRecordingSegmentInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingSegmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingSegmentInfo* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingSegmentInfo*>(
               &_CVideo_GameRecordingSegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CVideo_GameRecordingSegmentInfo& a, CVideo_GameRecordingSegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingSegmentInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingSegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingSegmentInfo* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingSegmentInfo>(nullptr);
  }

  CVideo_GameRecordingSegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingSegmentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingSegmentInfo& from);
  void MergeFrom(const CVideo_GameRecordingSegmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingSegmentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingSegmentInfo";
  }
  protected:
  explicit CVideo_GameRecordingSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 3,
    kRepresentationNameFieldNumber = 4,
    kSegmentSizeBytesFieldNumber = 2,
    kSegmentNumberFieldNumber = 1,
  };
  // optional string component_name = 3;
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string representation_name = 4;
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  void set_representation_name(const std::string& value);
  void set_representation_name(std::string&& value);
  void set_representation_name(const char* value);
  void set_representation_name(const char* value, size_t size);
  std::string* mutable_representation_name();
  std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional uint64 segment_size_bytes = 2;
  bool has_segment_size_bytes() const;
  private:
  bool _internal_has_segment_size_bytes() const;
  public:
  void clear_segment_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_size_bytes() const;
  void set_segment_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_segment_size_bytes() const;
  void _internal_set_segment_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 segment_number = 1;
  bool has_segment_number() const;
  private:
  bool _internal_has_segment_number() const;
  public:
  void clear_segment_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_number() const;
  void set_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_number() const;
  void _internal_set_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingSegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_number_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders) */ {
 public:
  inline CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders() : CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(nullptr) {}
  virtual ~CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders();
  explicit constexpr CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from);
  CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders&& from) noexcept
    : CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& operator=(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& operator=(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders*>(
               &_CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& a, CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders>(nullptr);
  }

  CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from);
  void MergeFrom(const CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders";
  }
  protected:
  explicit CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fvideo_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingSegmentUploadInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingSegmentUploadInfo) */ {
 public:
  inline CVideo_GameRecordingSegmentUploadInfo() : CVideo_GameRecordingSegmentUploadInfo(nullptr) {}
  virtual ~CVideo_GameRecordingSegmentUploadInfo();
  explicit constexpr CVideo_GameRecordingSegmentUploadInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingSegmentUploadInfo(const CVideo_GameRecordingSegmentUploadInfo& from);
  CVideo_GameRecordingSegmentUploadInfo(CVideo_GameRecordingSegmentUploadInfo&& from) noexcept
    : CVideo_GameRecordingSegmentUploadInfo() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingSegmentUploadInfo& operator=(const CVideo_GameRecordingSegmentUploadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingSegmentUploadInfo& operator=(CVideo_GameRecordingSegmentUploadInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingSegmentUploadInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingSegmentUploadInfo* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingSegmentUploadInfo*>(
               &_CVideo_GameRecordingSegmentUploadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CVideo_GameRecordingSegmentUploadInfo& a, CVideo_GameRecordingSegmentUploadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingSegmentUploadInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingSegmentUploadInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingSegmentUploadInfo* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingSegmentUploadInfo>(nullptr);
  }

  CVideo_GameRecordingSegmentUploadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingSegmentUploadInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingSegmentUploadInfo& from);
  void MergeFrom(const CVideo_GameRecordingSegmentUploadInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingSegmentUploadInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingSegmentUploadInfo";
  }
  protected:
  explicit CVideo_GameRecordingSegmentUploadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 5,
    kUrlHostFieldNumber = 2,
    kUrlPathFieldNumber = 3,
    kSegmentInfoFieldNumber = 1,
    kUseHttpsFieldNumber = 4,
  };
  // repeated .CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders request_headers = 5;
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* mutable_request_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders >*
      mutable_request_headers();
  private:
  const ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& _internal_request_headers(int index) const;
  ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* _internal_add_request_headers();
  public:
  const ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& request_headers(int index) const;
  ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* add_request_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 2;
  bool has_url_host() const;
  private:
  bool _internal_has_url_host() const;
  public:
  void clear_url_host();
  const std::string& url_host() const;
  void set_url_host(const std::string& value);
  void set_url_host(std::string&& value);
  void set_url_host(const char* value);
  void set_url_host(const char* value, size_t size);
  std::string* mutable_url_host();
  std::string* release_url_host();
  void set_allocated_url_host(std::string* url_host);
  private:
  const std::string& _internal_url_host() const;
  void _internal_set_url_host(const std::string& value);
  std::string* _internal_mutable_url_host();
  public:

  // optional string url_path = 3;
  bool has_url_path() const;
  private:
  bool _internal_has_url_path() const;
  public:
  void clear_url_path();
  const std::string& url_path() const;
  void set_url_path(const std::string& value);
  void set_url_path(std::string&& value);
  void set_url_path(const char* value);
  void set_url_path(const char* value, size_t size);
  std::string* mutable_url_path();
  std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // optional .CVideo_GameRecordingSegmentInfo segment_info = 1;
  bool has_segment_info() const;
  private:
  bool _internal_has_segment_info() const;
  public:
  void clear_segment_info();
  const ::CVideo_GameRecordingSegmentInfo& segment_info() const;
  ::CVideo_GameRecordingSegmentInfo* release_segment_info();
  ::CVideo_GameRecordingSegmentInfo* mutable_segment_info();
  void set_allocated_segment_info(::CVideo_GameRecordingSegmentInfo* segment_info);
  private:
  const ::CVideo_GameRecordingSegmentInfo& _internal_segment_info() const;
  ::CVideo_GameRecordingSegmentInfo* _internal_mutable_segment_info();
  public:
  void unsafe_arena_set_allocated_segment_info(
      ::CVideo_GameRecordingSegmentInfo* segment_info);
  ::CVideo_GameRecordingSegmentInfo* unsafe_arena_release_segment_info();

  // optional bool use_https = 4;
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingSegmentUploadInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders > request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  ::CVideo_GameRecordingSegmentInfo* segment_info_;
  bool use_https_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fvideo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgVideoGameRecordingRepresentation

// optional string representation_name = 2;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CMsgVideoGameRecordingRepresentation::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgVideoGameRecordingRepresentation::representation_name() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.representation_name)
  return _internal_representation_name();
}
inline void CMsgVideoGameRecordingRepresentation::set_representation_name(const std::string& value) {
  _internal_set_representation_name(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.representation_name)
}
inline std::string* CMsgVideoGameRecordingRepresentation::mutable_representation_name() {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingRepresentation.representation_name)
  return _internal_mutable_representation_name();
}
inline const std::string& CMsgVideoGameRecordingRepresentation::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgVideoGameRecordingRepresentation::set_representation_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  representation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgVideoGameRecordingRepresentation.representation_name)
}
inline void CMsgVideoGameRecordingRepresentation::set_representation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgVideoGameRecordingRepresentation.representation_name)
}
inline void CMsgVideoGameRecordingRepresentation::set_representation_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgVideoGameRecordingRepresentation.representation_name)
}
inline std::string* CMsgVideoGameRecordingRepresentation::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000001u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgVideoGameRecordingRepresentation::release_representation_name() {
  // @@protoc_insertion_point(field_release:CMsgVideoGameRecordingRepresentation.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgVideoGameRecordingRepresentation::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgVideoGameRecordingRepresentation.representation_name)
}

// optional uint32 horizontal_resolution = 3;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_horizontal_resolution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_horizontal_resolution() const {
  return _internal_has_horizontal_resolution();
}
inline void CMsgVideoGameRecordingRepresentation::clear_horizontal_resolution() {
  horizontal_resolution_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::_internal_horizontal_resolution() const {
  return horizontal_resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::horizontal_resolution() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.horizontal_resolution)
  return _internal_horizontal_resolution();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_horizontal_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  horizontal_resolution_ = value;
}
inline void CMsgVideoGameRecordingRepresentation::set_horizontal_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_horizontal_resolution(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.horizontal_resolution)
}

// optional uint32 vertical_resolution = 4;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_vertical_resolution() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_vertical_resolution() const {
  return _internal_has_vertical_resolution();
}
inline void CMsgVideoGameRecordingRepresentation::clear_vertical_resolution() {
  vertical_resolution_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::_internal_vertical_resolution() const {
  return vertical_resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::vertical_resolution() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.vertical_resolution)
  return _internal_vertical_resolution();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_vertical_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  vertical_resolution_ = value;
}
inline void CMsgVideoGameRecordingRepresentation::set_vertical_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vertical_resolution(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.vertical_resolution)
}

// optional double frame_rate = 5;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void CMsgVideoGameRecordingRepresentation::clear_frame_rate() {
  frame_rate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CMsgVideoGameRecordingRepresentation::_internal_frame_rate() const {
  return frame_rate_;
}
inline double CMsgVideoGameRecordingRepresentation::frame_rate() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.frame_rate)
  return _internal_frame_rate();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_frame_rate(double value) {
  _has_bits_[0] |= 0x00000020u;
  frame_rate_ = value;
}
inline void CMsgVideoGameRecordingRepresentation::set_frame_rate(double value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.frame_rate)
}

// optional uint32 bandwidth = 6;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_bandwidth() const {
  return _internal_has_bandwidth();
}
inline void CMsgVideoGameRecordingRepresentation::clear_bandwidth() {
  bandwidth_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::_internal_bandwidth() const {
  return bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::bandwidth() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.bandwidth)
  return _internal_bandwidth();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  bandwidth_ = value;
}
inline void CMsgVideoGameRecordingRepresentation::set_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.bandwidth)
}

// optional uint32 audio_sample_rate = 7;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_audio_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_audio_sample_rate() const {
  return _internal_has_audio_sample_rate();
}
inline void CMsgVideoGameRecordingRepresentation::clear_audio_sample_rate() {
  audio_sample_rate_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::_internal_audio_sample_rate() const {
  return audio_sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::audio_sample_rate() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.audio_sample_rate)
  return _internal_audio_sample_rate();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_audio_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  audio_sample_rate_ = value;
}
inline void CMsgVideoGameRecordingRepresentation::set_audio_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_audio_sample_rate(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.audio_sample_rate)
}

// optional string frame_rate_string = 8;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_frame_rate_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_frame_rate_string() const {
  return _internal_has_frame_rate_string();
}
inline void CMsgVideoGameRecordingRepresentation::clear_frame_rate_string() {
  frame_rate_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgVideoGameRecordingRepresentation::frame_rate_string() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.frame_rate_string)
  return _internal_frame_rate_string();
}
inline void CMsgVideoGameRecordingRepresentation::set_frame_rate_string(const std::string& value) {
  _internal_set_frame_rate_string(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.frame_rate_string)
}
inline std::string* CMsgVideoGameRecordingRepresentation::mutable_frame_rate_string() {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingRepresentation.frame_rate_string)
  return _internal_mutable_frame_rate_string();
}
inline const std::string& CMsgVideoGameRecordingRepresentation::_internal_frame_rate_string() const {
  return frame_rate_string_.Get();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_frame_rate_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgVideoGameRecordingRepresentation::set_frame_rate_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  frame_rate_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgVideoGameRecordingRepresentation.frame_rate_string)
}
inline void CMsgVideoGameRecordingRepresentation::set_frame_rate_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgVideoGameRecordingRepresentation.frame_rate_string)
}
inline void CMsgVideoGameRecordingRepresentation::set_frame_rate_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgVideoGameRecordingRepresentation.frame_rate_string)
}
inline std::string* CMsgVideoGameRecordingRepresentation::_internal_mutable_frame_rate_string() {
  _has_bits_[0] |= 0x00000002u;
  return frame_rate_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgVideoGameRecordingRepresentation::release_frame_rate_string() {
  // @@protoc_insertion_point(field_release:CMsgVideoGameRecordingRepresentation.frame_rate_string)
  if (!_internal_has_frame_rate_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return frame_rate_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgVideoGameRecordingRepresentation::set_allocated_frame_rate_string(std::string* frame_rate_string) {
  if (frame_rate_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_rate_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_rate_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgVideoGameRecordingRepresentation.frame_rate_string)
}

// optional string codec = 9;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_codec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_codec() const {
  return _internal_has_codec();
}
inline void CMsgVideoGameRecordingRepresentation::clear_codec() {
  codec_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgVideoGameRecordingRepresentation::codec() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.codec)
  return _internal_codec();
}
inline void CMsgVideoGameRecordingRepresentation::set_codec(const std::string& value) {
  _internal_set_codec(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.codec)
}
inline std::string* CMsgVideoGameRecordingRepresentation::mutable_codec() {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingRepresentation.codec)
  return _internal_mutable_codec();
}
inline const std::string& CMsgVideoGameRecordingRepresentation::_internal_codec() const {
  return codec_.Get();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgVideoGameRecordingRepresentation::set_codec(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  codec_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgVideoGameRecordingRepresentation.codec)
}
inline void CMsgVideoGameRecordingRepresentation::set_codec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgVideoGameRecordingRepresentation.codec)
}
inline void CMsgVideoGameRecordingRepresentation::set_codec(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgVideoGameRecordingRepresentation.codec)
}
inline std::string* CMsgVideoGameRecordingRepresentation::_internal_mutable_codec() {
  _has_bits_[0] |= 0x00000004u;
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgVideoGameRecordingRepresentation::release_codec() {
  // @@protoc_insertion_point(field_release:CMsgVideoGameRecordingRepresentation.codec)
  if (!_internal_has_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return codec_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgVideoGameRecordingRepresentation::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgVideoGameRecordingRepresentation.codec)
}

// optional uint32 audio_channel_config = 10;
inline bool CMsgVideoGameRecordingRepresentation::_internal_has_audio_channel_config() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingRepresentation::has_audio_channel_config() const {
  return _internal_has_audio_channel_config();
}
inline void CMsgVideoGameRecordingRepresentation::clear_audio_channel_config() {
  audio_channel_config_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::_internal_audio_channel_config() const {
  return audio_channel_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingRepresentation::audio_channel_config() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.audio_channel_config)
  return _internal_audio_channel_config();
}
inline void CMsgVideoGameRecordingRepresentation::_internal_set_audio_channel_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  audio_channel_config_ = value;
}
inline void CMsgVideoGameRecordingRepresentation::set_audio_channel_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_audio_channel_config(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingRepresentation.audio_channel_config)
}

// repeated .CVideo_GameRecordingSegmentInfo segment_info = 11;
inline int CMsgVideoGameRecordingRepresentation::_internal_segment_info_size() const {
  return segment_info_.size();
}
inline int CMsgVideoGameRecordingRepresentation::segment_info_size() const {
  return _internal_segment_info_size();
}
inline void CMsgVideoGameRecordingRepresentation::clear_segment_info() {
  segment_info_.Clear();
}
inline ::CVideo_GameRecordingSegmentInfo* CMsgVideoGameRecordingRepresentation::mutable_segment_info(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingRepresentation.segment_info)
  return segment_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >*
CMsgVideoGameRecordingRepresentation::mutable_segment_info() {
  // @@protoc_insertion_point(field_mutable_list:CMsgVideoGameRecordingRepresentation.segment_info)
  return &segment_info_;
}
inline const ::CVideo_GameRecordingSegmentInfo& CMsgVideoGameRecordingRepresentation::_internal_segment_info(int index) const {
  return segment_info_.Get(index);
}
inline const ::CVideo_GameRecordingSegmentInfo& CMsgVideoGameRecordingRepresentation::segment_info(int index) const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingRepresentation.segment_info)
  return _internal_segment_info(index);
}
inline ::CVideo_GameRecordingSegmentInfo* CMsgVideoGameRecordingRepresentation::_internal_add_segment_info() {
  return segment_info_.Add();
}
inline ::CVideo_GameRecordingSegmentInfo* CMsgVideoGameRecordingRepresentation::add_segment_info() {
  // @@protoc_insertion_point(field_add:CMsgVideoGameRecordingRepresentation.segment_info)
  return _internal_add_segment_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >&
CMsgVideoGameRecordingRepresentation::segment_info() const {
  // @@protoc_insertion_point(field_list:CMsgVideoGameRecordingRepresentation.segment_info)
  return segment_info_;
}

// -------------------------------------------------------------------

// CMsgVideoGameRecordingComponent

// optional string component_name = 1;
inline bool CMsgVideoGameRecordingComponent::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingComponent::has_component_name() const {
  return _internal_has_component_name();
}
inline void CMsgVideoGameRecordingComponent::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgVideoGameRecordingComponent::component_name() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingComponent.component_name)
  return _internal_component_name();
}
inline void CMsgVideoGameRecordingComponent::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingComponent.component_name)
}
inline std::string* CMsgVideoGameRecordingComponent::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingComponent.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& CMsgVideoGameRecordingComponent::_internal_component_name() const {
  return component_name_.Get();
}
inline void CMsgVideoGameRecordingComponent::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgVideoGameRecordingComponent::set_component_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgVideoGameRecordingComponent.component_name)
}
inline void CMsgVideoGameRecordingComponent::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgVideoGameRecordingComponent.component_name)
}
inline void CMsgVideoGameRecordingComponent::set_component_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgVideoGameRecordingComponent.component_name)
}
inline std::string* CMsgVideoGameRecordingComponent::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgVideoGameRecordingComponent::release_component_name() {
  // @@protoc_insertion_point(field_release:CMsgVideoGameRecordingComponent.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgVideoGameRecordingComponent::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgVideoGameRecordingComponent.component_name)
}

// optional uint32 contents = 2;
inline bool CMsgVideoGameRecordingComponent::_internal_has_contents() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingComponent::has_contents() const {
  return _internal_has_contents();
}
inline void CMsgVideoGameRecordingComponent::clear_contents() {
  contents_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingComponent::_internal_contents() const {
  return contents_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingComponent::contents() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingComponent.contents)
  return _internal_contents();
}
inline void CMsgVideoGameRecordingComponent::_internal_set_contents(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  contents_ = value;
}
inline void CMsgVideoGameRecordingComponent::set_contents(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contents(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingComponent.contents)
}

// optional uint32 segment_size = 3;
inline bool CMsgVideoGameRecordingComponent::_internal_has_segment_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingComponent::has_segment_size() const {
  return _internal_has_segment_size();
}
inline void CMsgVideoGameRecordingComponent::clear_segment_size() {
  segment_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingComponent::_internal_segment_size() const {
  return segment_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingComponent::segment_size() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingComponent.segment_size)
  return _internal_segment_size();
}
inline void CMsgVideoGameRecordingComponent::_internal_set_segment_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  segment_size_ = value;
}
inline void CMsgVideoGameRecordingComponent::set_segment_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_size(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingComponent.segment_size)
}

// optional string file_type = 4;
inline bool CMsgVideoGameRecordingComponent::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingComponent::has_file_type() const {
  return _internal_has_file_type();
}
inline void CMsgVideoGameRecordingComponent::clear_file_type() {
  file_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgVideoGameRecordingComponent::file_type() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingComponent.file_type)
  return _internal_file_type();
}
inline void CMsgVideoGameRecordingComponent::set_file_type(const std::string& value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingComponent.file_type)
}
inline std::string* CMsgVideoGameRecordingComponent::mutable_file_type() {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingComponent.file_type)
  return _internal_mutable_file_type();
}
inline const std::string& CMsgVideoGameRecordingComponent::_internal_file_type() const {
  return file_type_.Get();
}
inline void CMsgVideoGameRecordingComponent::_internal_set_file_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgVideoGameRecordingComponent::set_file_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgVideoGameRecordingComponent.file_type)
}
inline void CMsgVideoGameRecordingComponent::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgVideoGameRecordingComponent.file_type)
}
inline void CMsgVideoGameRecordingComponent::set_file_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgVideoGameRecordingComponent.file_type)
}
inline std::string* CMsgVideoGameRecordingComponent::_internal_mutable_file_type() {
  _has_bits_[0] |= 0x00000002u;
  return file_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgVideoGameRecordingComponent::release_file_type() {
  // @@protoc_insertion_point(field_release:CMsgVideoGameRecordingComponent.file_type)
  if (!_internal_has_file_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgVideoGameRecordingComponent::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgVideoGameRecordingComponent.file_type)
}

// repeated .CMsgVideoGameRecordingRepresentation representations = 5;
inline int CMsgVideoGameRecordingComponent::_internal_representations_size() const {
  return representations_.size();
}
inline int CMsgVideoGameRecordingComponent::representations_size() const {
  return _internal_representations_size();
}
inline void CMsgVideoGameRecordingComponent::clear_representations() {
  representations_.Clear();
}
inline ::CMsgVideoGameRecordingRepresentation* CMsgVideoGameRecordingComponent::mutable_representations(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingComponent.representations)
  return representations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingRepresentation >*
CMsgVideoGameRecordingComponent::mutable_representations() {
  // @@protoc_insertion_point(field_mutable_list:CMsgVideoGameRecordingComponent.representations)
  return &representations_;
}
inline const ::CMsgVideoGameRecordingRepresentation& CMsgVideoGameRecordingComponent::_internal_representations(int index) const {
  return representations_.Get(index);
}
inline const ::CMsgVideoGameRecordingRepresentation& CMsgVideoGameRecordingComponent::representations(int index) const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingComponent.representations)
  return _internal_representations(index);
}
inline ::CMsgVideoGameRecordingRepresentation* CMsgVideoGameRecordingComponent::_internal_add_representations() {
  return representations_.Add();
}
inline ::CMsgVideoGameRecordingRepresentation* CMsgVideoGameRecordingComponent::add_representations() {
  // @@protoc_insertion_point(field_add:CMsgVideoGameRecordingComponent.representations)
  return _internal_add_representations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingRepresentation >&
CMsgVideoGameRecordingComponent::representations() const {
  // @@protoc_insertion_point(field_list:CMsgVideoGameRecordingComponent.representations)
  return representations_;
}

// -------------------------------------------------------------------

// CMsgVideoGameRecordingDef

// optional uint64 steamid = 1;
inline bool CMsgVideoGameRecordingDef::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgVideoGameRecordingDef::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgVideoGameRecordingDef::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgVideoGameRecordingDef::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.steamid)
  return _internal_steamid();
}
inline void CMsgVideoGameRecordingDef::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgVideoGameRecordingDef::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.steamid)
}

// optional uint32 app_id = 2;
inline bool CMsgVideoGameRecordingDef::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgVideoGameRecordingDef::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.app_id)
  return _internal_app_id();
}
inline void CMsgVideoGameRecordingDef::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgVideoGameRecordingDef::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.app_id)
}

// optional uint32 num_segments = 3;
inline bool CMsgVideoGameRecordingDef::_internal_has_num_segments() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_num_segments() const {
  return _internal_has_num_segments();
}
inline void CMsgVideoGameRecordingDef::clear_num_segments() {
  num_segments_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_num_segments() const {
  return num_segments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::num_segments() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.num_segments)
  return _internal_num_segments();
}
inline void CMsgVideoGameRecordingDef::_internal_set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_segments_ = value;
}
inline void CMsgVideoGameRecordingDef::set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_segments(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.num_segments)
}

// optional uint32 length_milliseconds = 4;
inline bool CMsgVideoGameRecordingDef::_internal_has_length_milliseconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_length_milliseconds() const {
  return _internal_has_length_milliseconds();
}
inline void CMsgVideoGameRecordingDef::clear_length_milliseconds() {
  length_milliseconds_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_length_milliseconds() const {
  return length_milliseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::length_milliseconds() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.length_milliseconds)
  return _internal_length_milliseconds();
}
inline void CMsgVideoGameRecordingDef::_internal_set_length_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  length_milliseconds_ = value;
}
inline void CMsgVideoGameRecordingDef::set_length_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length_milliseconds(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.length_milliseconds)
}

// optional uint32 segment_duration_timescale = 5;
inline bool CMsgVideoGameRecordingDef::_internal_has_segment_duration_timescale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_segment_duration_timescale() const {
  return _internal_has_segment_duration_timescale();
}
inline void CMsgVideoGameRecordingDef::clear_segment_duration_timescale() {
  segment_duration_timescale_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_segment_duration_timescale() const {
  return segment_duration_timescale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::segment_duration_timescale() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.segment_duration_timescale)
  return _internal_segment_duration_timescale();
}
inline void CMsgVideoGameRecordingDef::_internal_set_segment_duration_timescale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  segment_duration_timescale_ = value;
}
inline void CMsgVideoGameRecordingDef::set_segment_duration_timescale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_duration_timescale(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.segment_duration_timescale)
}

// optional uint32 segment_duration = 6;
inline bool CMsgVideoGameRecordingDef::_internal_has_segment_duration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_segment_duration() const {
  return _internal_has_segment_duration();
}
inline void CMsgVideoGameRecordingDef::clear_segment_duration() {
  segment_duration_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_segment_duration() const {
  return segment_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::segment_duration() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.segment_duration)
  return _internal_segment_duration();
}
inline void CMsgVideoGameRecordingDef::_internal_set_segment_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  segment_duration_ = value;
}
inline void CMsgVideoGameRecordingDef::set_segment_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_duration(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.segment_duration)
}

// repeated .CMsgVideoGameRecordingComponent components = 7;
inline int CMsgVideoGameRecordingDef::_internal_components_size() const {
  return components_.size();
}
inline int CMsgVideoGameRecordingDef::components_size() const {
  return _internal_components_size();
}
inline void CMsgVideoGameRecordingDef::clear_components() {
  components_.Clear();
}
inline ::CMsgVideoGameRecordingComponent* CMsgVideoGameRecordingDef::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgVideoGameRecordingDef.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingComponent >*
CMsgVideoGameRecordingDef::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:CMsgVideoGameRecordingDef.components)
  return &components_;
}
inline const ::CMsgVideoGameRecordingComponent& CMsgVideoGameRecordingDef::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::CMsgVideoGameRecordingComponent& CMsgVideoGameRecordingDef::components(int index) const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.components)
  return _internal_components(index);
}
inline ::CMsgVideoGameRecordingComponent* CMsgVideoGameRecordingDef::_internal_add_components() {
  return components_.Add();
}
inline ::CMsgVideoGameRecordingComponent* CMsgVideoGameRecordingDef::add_components() {
  // @@protoc_insertion_point(field_add:CMsgVideoGameRecordingDef.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingComponent >&
CMsgVideoGameRecordingDef::components() const {
  // @@protoc_insertion_point(field_list:CMsgVideoGameRecordingDef.components)
  return components_;
}

// optional uint32 start_time_ms = 8;
inline bool CMsgVideoGameRecordingDef::_internal_has_start_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_start_time_ms() const {
  return _internal_has_start_time_ms();
}
inline void CMsgVideoGameRecordingDef::clear_start_time_ms() {
  start_time_ms_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_start_time_ms() const {
  return start_time_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::start_time_ms() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.start_time_ms)
  return _internal_start_time_ms();
}
inline void CMsgVideoGameRecordingDef::_internal_set_start_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  start_time_ms_ = value;
}
inline void CMsgVideoGameRecordingDef::set_start_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time_ms(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.start_time_ms)
}

// optional uint32 start_offset_in_timeline_ms = 9;
inline bool CMsgVideoGameRecordingDef::_internal_has_start_offset_in_timeline_ms() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgVideoGameRecordingDef::has_start_offset_in_timeline_ms() const {
  return _internal_has_start_offset_in_timeline_ms();
}
inline void CMsgVideoGameRecordingDef::clear_start_offset_in_timeline_ms() {
  start_offset_in_timeline_ms_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::_internal_start_offset_in_timeline_ms() const {
  return start_offset_in_timeline_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVideoGameRecordingDef::start_offset_in_timeline_ms() const {
  // @@protoc_insertion_point(field_get:CMsgVideoGameRecordingDef.start_offset_in_timeline_ms)
  return _internal_start_offset_in_timeline_ms();
}
inline void CMsgVideoGameRecordingDef::_internal_set_start_offset_in_timeline_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  start_offset_in_timeline_ms_ = value;
}
inline void CMsgVideoGameRecordingDef::set_start_offset_in_timeline_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_offset_in_timeline_ms(value);
  // @@protoc_insertion_point(field_set:CMsgVideoGameRecordingDef.start_offset_in_timeline_ms)
}

// -------------------------------------------------------------------

// CVideo_GameRecordingSegmentInfo

// optional uint32 segment_number = 1;
inline bool CVideo_GameRecordingSegmentInfo::_internal_has_segment_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentInfo::has_segment_number() const {
  return _internal_has_segment_number();
}
inline void CVideo_GameRecordingSegmentInfo::clear_segment_number() {
  segment_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_GameRecordingSegmentInfo::_internal_segment_number() const {
  return segment_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_GameRecordingSegmentInfo::segment_number() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentInfo.segment_number)
  return _internal_segment_number();
}
inline void CVideo_GameRecordingSegmentInfo::_internal_set_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  segment_number_ = value;
}
inline void CVideo_GameRecordingSegmentInfo::set_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_number(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentInfo.segment_number)
}

// optional uint64 segment_size_bytes = 2;
inline bool CVideo_GameRecordingSegmentInfo::_internal_has_segment_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentInfo::has_segment_size_bytes() const {
  return _internal_has_segment_size_bytes();
}
inline void CVideo_GameRecordingSegmentInfo::clear_segment_size_bytes() {
  segment_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_GameRecordingSegmentInfo::_internal_segment_size_bytes() const {
  return segment_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_GameRecordingSegmentInfo::segment_size_bytes() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentInfo.segment_size_bytes)
  return _internal_segment_size_bytes();
}
inline void CVideo_GameRecordingSegmentInfo::_internal_set_segment_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  segment_size_bytes_ = value;
}
inline void CVideo_GameRecordingSegmentInfo::set_segment_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_segment_size_bytes(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentInfo.segment_size_bytes)
}

// optional string component_name = 3;
inline bool CVideo_GameRecordingSegmentInfo::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentInfo::has_component_name() const {
  return _internal_has_component_name();
}
inline void CVideo_GameRecordingSegmentInfo::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameRecordingSegmentInfo::component_name() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentInfo.component_name)
  return _internal_component_name();
}
inline void CVideo_GameRecordingSegmentInfo::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentInfo.component_name)
}
inline std::string* CVideo_GameRecordingSegmentInfo::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentInfo.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& CVideo_GameRecordingSegmentInfo::_internal_component_name() const {
  return component_name_.Get();
}
inline void CVideo_GameRecordingSegmentInfo::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_GameRecordingSegmentInfo::set_component_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_GameRecordingSegmentInfo.component_name)
}
inline void CVideo_GameRecordingSegmentInfo::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_GameRecordingSegmentInfo.component_name)
}
inline void CVideo_GameRecordingSegmentInfo::set_component_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_GameRecordingSegmentInfo.component_name)
}
inline std::string* CVideo_GameRecordingSegmentInfo::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_GameRecordingSegmentInfo::release_component_name() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentInfo.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_GameRecordingSegmentInfo::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentInfo.component_name)
}

// optional string representation_name = 4;
inline bool CVideo_GameRecordingSegmentInfo::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentInfo::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CVideo_GameRecordingSegmentInfo::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameRecordingSegmentInfo::representation_name() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentInfo.representation_name)
  return _internal_representation_name();
}
inline void CVideo_GameRecordingSegmentInfo::set_representation_name(const std::string& value) {
  _internal_set_representation_name(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentInfo.representation_name)
}
inline std::string* CVideo_GameRecordingSegmentInfo::mutable_representation_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentInfo.representation_name)
  return _internal_mutable_representation_name();
}
inline const std::string& CVideo_GameRecordingSegmentInfo::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CVideo_GameRecordingSegmentInfo::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_GameRecordingSegmentInfo::set_representation_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_GameRecordingSegmentInfo.representation_name)
}
inline void CVideo_GameRecordingSegmentInfo::set_representation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_GameRecordingSegmentInfo.representation_name)
}
inline void CVideo_GameRecordingSegmentInfo::set_representation_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_GameRecordingSegmentInfo.representation_name)
}
inline std::string* CVideo_GameRecordingSegmentInfo::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000002u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_GameRecordingSegmentInfo::release_representation_name() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentInfo.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_GameRecordingSegmentInfo::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentInfo.representation_name)
}

// -------------------------------------------------------------------

// CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders

// optional string name = 1;
inline bool CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::has_name() const {
  return _internal_has_name();
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
  return _internal_name();
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
  return _internal_mutable_name();
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_name() const {
  return name_.Get();
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.name)
}

// optional string value = 2;
inline bool CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::has_value() const {
  return _internal_has_value();
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
  return _internal_value();
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
  return _internal_mutable_value();
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_value() const {
  return value_.Get();
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CVideo_GameRecordingSegmentUploadInfo

// optional .CVideo_GameRecordingSegmentInfo segment_info = 1;
inline bool CVideo_GameRecordingSegmentUploadInfo::_internal_has_segment_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || segment_info_ != nullptr);
  return value;
}
inline bool CVideo_GameRecordingSegmentUploadInfo::has_segment_info() const {
  return _internal_has_segment_info();
}
inline void CVideo_GameRecordingSegmentUploadInfo::clear_segment_info() {
  if (segment_info_ != nullptr) segment_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CVideo_GameRecordingSegmentInfo& CVideo_GameRecordingSegmentUploadInfo::_internal_segment_info() const {
  const ::CVideo_GameRecordingSegmentInfo* p = segment_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CVideo_GameRecordingSegmentInfo&>(
      ::_CVideo_GameRecordingSegmentInfo_default_instance_);
}
inline const ::CVideo_GameRecordingSegmentInfo& CVideo_GameRecordingSegmentUploadInfo::segment_info() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.segment_info)
  return _internal_segment_info();
}
inline void CVideo_GameRecordingSegmentUploadInfo::unsafe_arena_set_allocated_segment_info(
    ::CVideo_GameRecordingSegmentInfo* segment_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segment_info_);
  }
  segment_info_ = segment_info;
  if (segment_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CVideo_GameRecordingSegmentUploadInfo.segment_info)
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingSegmentUploadInfo::release_segment_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::CVideo_GameRecordingSegmentInfo* temp = segment_info_;
  segment_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingSegmentUploadInfo::unsafe_arena_release_segment_info() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentUploadInfo.segment_info)
  _has_bits_[0] &= ~0x00000004u;
  ::CVideo_GameRecordingSegmentInfo* temp = segment_info_;
  segment_info_ = nullptr;
  return temp;
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingSegmentUploadInfo::_internal_mutable_segment_info() {
  _has_bits_[0] |= 0x00000004u;
  if (segment_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CVideo_GameRecordingSegmentInfo>(GetArena());
    segment_info_ = p;
  }
  return segment_info_;
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingSegmentUploadInfo::mutable_segment_info() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentUploadInfo.segment_info)
  return _internal_mutable_segment_info();
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_allocated_segment_info(::CVideo_GameRecordingSegmentInfo* segment_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete segment_info_;
  }
  if (segment_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(segment_info);
    if (message_arena != submessage_arena) {
      segment_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  segment_info_ = segment_info;
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentUploadInfo.segment_info)
}

// optional string url_host = 2;
inline bool CVideo_GameRecordingSegmentUploadInfo::_internal_has_url_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentUploadInfo::has_url_host() const {
  return _internal_has_url_host();
}
inline void CVideo_GameRecordingSegmentUploadInfo::clear_url_host() {
  url_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo::url_host() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.url_host)
  return _internal_url_host();
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_host(const std::string& value) {
  _internal_set_url_host(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentUploadInfo.url_host)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo::mutable_url_host() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentUploadInfo.url_host)
  return _internal_mutable_url_host();
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo::_internal_url_host() const {
  return url_host_.Get();
}
inline void CVideo_GameRecordingSegmentUploadInfo::_internal_set_url_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_host(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_GameRecordingSegmentUploadInfo.url_host)
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_GameRecordingSegmentUploadInfo.url_host)
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_host(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_GameRecordingSegmentUploadInfo.url_host)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo::_internal_mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  return url_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo::release_url_host() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentUploadInfo.url_host)
  if (!_internal_has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_allocated_url_host(std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentUploadInfo.url_host)
}

// optional string url_path = 3;
inline bool CVideo_GameRecordingSegmentUploadInfo::_internal_has_url_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentUploadInfo::has_url_path() const {
  return _internal_has_url_path();
}
inline void CVideo_GameRecordingSegmentUploadInfo::clear_url_path() {
  url_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo::url_path() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.url_path)
  return _internal_url_path();
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_path(const std::string& value) {
  _internal_set_url_path(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentUploadInfo.url_path)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo::mutable_url_path() {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentUploadInfo.url_path)
  return _internal_mutable_url_path();
}
inline const std::string& CVideo_GameRecordingSegmentUploadInfo::_internal_url_path() const {
  return url_path_.Get();
}
inline void CVideo_GameRecordingSegmentUploadInfo::_internal_set_url_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_GameRecordingSegmentUploadInfo.url_path)
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_GameRecordingSegmentUploadInfo.url_path)
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_url_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_GameRecordingSegmentUploadInfo.url_path)
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo::_internal_mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_GameRecordingSegmentUploadInfo::release_url_path() {
  // @@protoc_insertion_point(field_release:CVideo_GameRecordingSegmentUploadInfo.url_path)
  if (!_internal_has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameRecordingSegmentUploadInfo.url_path)
}

// optional bool use_https = 4;
inline bool CVideo_GameRecordingSegmentUploadInfo::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_GameRecordingSegmentUploadInfo::has_use_https() const {
  return _internal_has_use_https();
}
inline void CVideo_GameRecordingSegmentUploadInfo::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CVideo_GameRecordingSegmentUploadInfo::_internal_use_https() const {
  return use_https_;
}
inline bool CVideo_GameRecordingSegmentUploadInfo::use_https() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.use_https)
  return _internal_use_https();
}
inline void CVideo_GameRecordingSegmentUploadInfo::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_https_ = value;
}
inline void CVideo_GameRecordingSegmentUploadInfo::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingSegmentUploadInfo.use_https)
}

// repeated .CVideo_GameRecordingSegmentUploadInfo.HTTPHeaders request_headers = 5;
inline int CVideo_GameRecordingSegmentUploadInfo::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int CVideo_GameRecordingSegmentUploadInfo::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void CVideo_GameRecordingSegmentUploadInfo::clear_request_headers() {
  request_headers_.Clear();
}
inline ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* CVideo_GameRecordingSegmentUploadInfo::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingSegmentUploadInfo.request_headers)
  return request_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders >*
CVideo_GameRecordingSegmentUploadInfo::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GameRecordingSegmentUploadInfo.request_headers)
  return &request_headers_;
}
inline const ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& CVideo_GameRecordingSegmentUploadInfo::_internal_request_headers(int index) const {
  return request_headers_.Get(index);
}
inline const ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders& CVideo_GameRecordingSegmentUploadInfo::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingSegmentUploadInfo.request_headers)
  return _internal_request_headers(index);
}
inline ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* CVideo_GameRecordingSegmentUploadInfo::_internal_add_request_headers() {
  return request_headers_.Add();
}
inline ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders* CVideo_GameRecordingSegmentUploadInfo::add_request_headers() {
  // @@protoc_insertion_point(field_add:CVideo_GameRecordingSegmentUploadInfo.request_headers)
  return _internal_add_request_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo_HTTPHeaders >&
CVideo_GameRecordingSegmentUploadInfo::request_headers() const {
  // @@protoc_insertion_point(field_list:CVideo_GameRecordingSegmentUploadInfo.request_headers)
  return request_headers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fvideo_2eproto
