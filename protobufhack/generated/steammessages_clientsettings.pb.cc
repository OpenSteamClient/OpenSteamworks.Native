// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientsettings.proto

#include "steammessages_clientsettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgHotkey::CMsgHotkey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_code_(0u)
  , alt_key_(false)
  , shift_key_(false)
  , ctrl_key_(false)
  , meta_key_(false){}
struct CMsgHotkeyDefaultTypeInternal {
  constexpr CMsgHotkeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHotkeyDefaultTypeInternal() {}
  union {
    CMsgHotkey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHotkeyDefaultTypeInternal _CMsgHotkey_default_instance_;
constexpr CMsgSettingVariant::CMsgSettingVariant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CMsgSettingVariantDefaultTypeInternal {
  constexpr CMsgSettingVariantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSettingVariantDefaultTypeInternal() {}
  union {
    CMsgSettingVariant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSettingVariantDefaultTypeInternal _CMsgSettingVariant_default_instance_;
constexpr CMsgClientSettings::CMsgClientSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferred_monitor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , screenshots_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , web_browser_home_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , voice_mic_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overlay_tabs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_page_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , startup_movie_local_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , g_background_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , g_background_max_keep_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamerecording_video_bitrate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamerecording_export_directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamescope_game_resolution_global_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , setting_validation_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overlay_key_(nullptr)
  , screenshot_key_(nullptr)
  , voice_push_to_talkey_(nullptr)
  , g_background_mk_(nullptr)
  , g_background_tg_(nullptr)
  , gamerecording_hotkey_ic_(nullptr)
  , no_save_personal_info_(false)
  , oobe_test_mode_enabled_(false)
  , in_client_beta_(false)
  , is_steam_sideloaded_(false)
  , steam_cef_gpu_blocklist_disabled_(false)
  , bigpicture_windowed_(false)
  , is_external_display_(false)
  , steam_os_underscan_enabled_(false)
  , steam_os_underscan_level_(0)
  , min_scale_factor_(0)
  , max_scale_factor_(0)
  , auto_scale_factor_(0)
  , small_mode_(false)
  , skip_steamvr_install_dialog_(false)
  , always_show_user_chooser_(false)
  , os_version_unsupported_(false)
  , show_family_sharing_notifications_(false)
  , show_copy_count_in_library_(false)
  , overlay_fps_counter_high_contrast_(false)
  , enable_overlay_(false)
  , overlay_fps_counter_corner_(0)
  , default_ping_rate_(0)
  , enable_screenshot_notification_(false)
  , enable_screenshot_sound_(false)
  , save_uncompressed_screenshots_(false)
  , overlay_toolbar_list_view_(false)
  , server_ping_rate_(0)
  , steam_networking_share_ip_(0)
  , voice_mic_input_gain_(0)
  , voice_speaker_output_gain_(0)
  , voice_push_to_talsetting_(0)
  , always_use_gamepadui_overlay_(false)
  , overlay_scale_interface_(false)
  , overlay_restore_browser_tabs_(false)
  , enable_avif_screenshots_(false)
  , smooth_scroll_webviews_(false)
  , enable_gpu_accelerated_webviews_(false)
  , enable_hardware_video_decoding_(false)
  , run_at_startup_(false)
  , enable_dpi_scaling_(false)
  , enable_marketing_messages_(false)
  , start_in_big_picture_mode_(false)
  , enable_ui_sounds_(false)
  , jumplist_flags_(0u)
  , disable_all_toasts_(false)
  , disable_toasts_in_game_(false)
  , play_sound_on_toast_(false)
  , library_whats_new_show_only_product_updates_(false)
  , library_display_size_(0)
  , show_store_content_on_home_(false)
  , library_low_bandwidth_mode_(false)
  , library_low_perf_mode_(false)
  , library_disable_community_content_(false)
  , library_display_icon_in_game_list_(false)
  , ready_to_play_includes_streaming_(false)
  , show_steam_decinfo_(false)
  , enable_shader_precache_(false)
  , shader_precached_size_(PROTOBUF_ULONGLONG(0))
  , enable_shader_background_processing_(false)
  , needs_steam_service_repair_(false)
  , download_rate_bits_per_s_(false)
  , restrict_auto_updates_(false)
  , download_peer_content_(0)
  , restrict_auto_updates_start_(0)
  , restrict_auto_updates_end_(0)
  , download_region_(0)
  , download_throttle_rate_(0)
  , download_while_app_running_(false)
  , download_throttle_while_streaming_(false)
  , cloud_enabled_(false)
  , show_screenshot_manager_(false)
  , music_volume_(0)
  , music_pause_on_app_start_(false)
  , music_pause_on_voice_chat_(false)
  , music_download_high_quality_(false)
  , music_playlist_notification_(false)
  , broadcast_permissions_(0)

  , broadcast_output_width_(0)
  , broadcast_output_height_(0)
  , broadcast_bitrate_(0)
  , broadcast_encoding_option_(0)

  , broadcast_record_all_video_(false)
  , broadcast_record_all_audio_(false)
  , broadcast_record_microphone_(false)
  , broadcast_show_upload_stats_(false)
  , broadcast_chat_corner_(0)
  , broadcast_show_live_reminder_(false)
  , gamestream_hardware_video_encode_(false)
  , gamestream_enable_video_h265_(false)
  , steam_input_configurator_error_msg_enable_(false)
  , controller_ps_support_(0)
  , controller_guide_button_focus_steam_(false)
  , controller_xbox_support_(false)
  , controller_xbox_driver_(false)
  , controller_switch_support_(false)
  , controller_power_off_timeout_(0)
  , startup_movie_id_(PROTOBUF_ULONGLONG(0))
  , screenshot_items_per_row_(0)
  , g_background_time_resolution_(0)
  , g_background_mode_(0)

  , g_background_audio_(0)

  , g_max_fps_(0)
  , gamerecording_ic_seconds_(0)
  , gamerecording_export_limit_type_(0)

  , gamerecording_export_limit_size_mb_(0)
  , g_background_a_m_(false)
  , g_background_a_s_(false)
  , gamerecording_force_mic_mono_(false)
  , gamerecording_automatic_gain_control_(false)
  , gamerecording_export_limit_bitrate_(0)
  , gamerecording_export_limit_width_(0)
  , gamerecording_export_limit_height_(0)
  , gamerecording_export_limit_frame_rate_(0)
  , gamerecording_export_codec_(0)

  , gamerecording_video_maxheight_(0)
  , override_browser_composer_mode_(0)
  , show_timestamps_in_console_(false)
  , force_oobe_(false)
  , cef_remote_debugging_enabled_(false)
  , force_decperf_tab_(false)
  , force_fake_mandatory_update_(false)
  , hdr_compat_testing_(false)
  , developer_mode_enabled_(false)
  , show_advanced_update_channels_(false)
  , gamescope_hdr_visualization_(0)

  , gamescope_app_target_framerate_(0)
  , gamescope_display_refresh_rate_(0)
  , gamescope_enable_app_target_framerate_(false)
  , gamescope_disable_framelimit_(false)
  , gamescope_use_game_refresh_rate_in_steam_(false)
  , gamescope_disable_mura_correction_(false)
  , gamescope_include_steamui_in_screenshots_(false)
  , gamescope_allow_tearing_(false)
  , gamescope_composite_debug_(false)
  , gamescope_force_composite_(false)
  , steamos_status_led_brightness_(0)
  , steamos_tdp_limit_(0)
  , steamos_tdp_limit_enabled_(false)
  , steamos_cec_enabled_(false)
  , steamos_cec_wake_on_resume_(false)
  , steamos_wifi_debug_(false)
  , steamos_magnifier_scale_(0)
  , setting_validation_enum_(0)

  , steamos_wifi_force_wpa_supplicant_(false)
  , setting_validation_bool_(false)
  , system_bluetooth_enabled_(false)
  , setting_validation_int32_(0)
  , setting_validation_uint64_(PROTOBUF_ULONGLONG(0))
  , setting_validation_uint32_(0u)
  , setting_validation_float_(0)
  , controller_generic_support_(false)
  , turn_off_controller_on_exit_(false)
  , controller_combine_nintendo_joycons_(false)
  , controller_enable_chord_(false)
  , controller_poll_rate_(false)
  , startup_movie_shuffle_(false)
  , startup_movie_used_for_resume_(false)
  , game_notes_enable_spellcheck_(false){}
struct CMsgClientSettingsDefaultTypeInternal {
  constexpr CMsgClientSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSettingsDefaultTypeInternal() {}
  union {
    CMsgClientSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSettingsDefaultTypeInternal _CMsgClientSettings_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientsettings_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientsettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, key_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, alt_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, shift_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, ctrl_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, meta_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, display_name_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSettingVariant, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgSettingVariant, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgSettingVariant, value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, no_save_personal_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, oobe_test_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, in_client_beta_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, is_steam_sideloaded_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, preferred_monitor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_cef_gpu_blocklist_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, bigpicture_windowed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, display_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, is_external_display_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_os_underscan_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_os_underscan_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, min_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, max_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, auto_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, small_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, skip_steamvr_install_dialog_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, always_show_user_chooser_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, os_version_unsupported_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_family_sharing_notifications_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_copy_count_in_library_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_fps_counter_corner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_fps_counter_high_contrast_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, screenshot_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_overlay_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_screenshot_notification_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_screenshot_sound_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, save_uncompressed_screenshots_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, screenshots_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, default_ping_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, server_ping_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_networking_share_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, web_browser_home_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_mic_device_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_mic_input_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_speaker_output_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_push_to_talsetting_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_push_to_talkey_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_toolbar_list_view_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, always_use_gamepadui_overlay_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_tabs_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_scale_interface_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_restore_browser_tabs_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_avif_screenshots_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, smooth_scroll_webviews_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_gpu_accelerated_webviews_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_hardware_video_decoding_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, run_at_startup_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_dpi_scaling_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_marketing_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, start_in_big_picture_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, jumplist_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_ui_sounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, disable_all_toasts_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, disable_toasts_in_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, play_sound_on_toast_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_display_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_whats_new_show_only_product_updates_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_store_content_on_home_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, start_page_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_low_bandwidth_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_low_perf_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_disable_community_content_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_display_icon_in_game_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, ready_to_play_includes_streaming_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_steam_decinfo_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_shader_precache_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_shader_background_processing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, shader_precached_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, needs_steam_service_repair_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_peer_content_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_rate_bits_per_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, restrict_auto_updates_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, restrict_auto_updates_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, restrict_auto_updates_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_while_app_running_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_throttle_while_streaming_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_throttle_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, cloud_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_screenshot_manager_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_volume_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_pause_on_app_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_pause_on_voice_chat_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_download_high_quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_playlist_notification_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_permissions_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_output_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_output_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_bitrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_encoding_option_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_record_all_video_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_record_all_audio_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_record_microphone_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_show_upload_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_show_live_reminder_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_chat_corner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamestream_hardware_video_encode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamestream_enable_video_h265_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_input_configurator_error_msg_enable_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_guide_button_focus_steam_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_ps_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_xbox_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_xbox_driver_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_switch_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_generic_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_power_off_timeout_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, turn_off_controller_on_exit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_combine_nintendo_joycons_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_enable_chord_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_poll_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_local_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_shuffle_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_used_for_resume_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, game_notes_enable_spellcheck_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, screenshot_items_per_row_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_max_keep_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_time_resolution_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_mk_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_tg_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_a_m_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_video_bitrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_a_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_audio_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_max_fps_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_hotkey_ic_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_ic_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_limit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_limit_size_mb_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_limit_bitrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_limit_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_limit_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_limit_frame_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_directory_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_export_codec_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_video_maxheight_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_force_mic_mono_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamerecording_automatic_gain_control_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_timestamps_in_console_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, force_oobe_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, override_browser_composer_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, cef_remote_debugging_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, force_decperf_tab_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, force_fake_mandatory_update_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, hdr_compat_testing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, developer_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_advanced_update_channels_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_hdr_visualization_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_app_target_framerate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_enable_app_target_framerate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_disable_framelimit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_display_refresh_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_use_game_refresh_rate_in_steam_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_disable_mura_correction_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_include_steamui_in_screenshots_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_allow_tearing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_composite_debug_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_force_composite_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, gamescope_game_resolution_global_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_status_led_brightness_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_tdp_limit_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_tdp_limit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_cec_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_cec_wake_on_resume_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_wifi_debug_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_wifi_force_wpa_supplicant_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steamos_magnifier_scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_bool_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_enum_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_int32_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_uint32_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_uint64_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_float_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, setting_validation_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, system_bluetooth_enabled_),
  20,
  21,
  22,
  23,
  0,
  24,
  25,
  1,
  26,
  28,
  27,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  40,
  38,
  14,
  15,
  39,
  42,
  43,
  44,
  2,
  41,
  46,
  47,
  3,
  4,
  48,
  49,
  50,
  16,
  45,
  51,
  5,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  63,
  62,
  64,
  65,
  66,
  68,
  67,
  69,
  6,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  78,
  77,
  79,
  82,
  80,
  81,
  83,
  84,
  85,
  87,
  88,
  86,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  106,
  105,
  107,
  108,
  109,
  111,
  110,
  112,
  113,
  114,
  170,
  115,
  171,
  172,
  173,
  174,
  116,
  7,
  175,
  176,
  177,
  117,
  8,
  9,
  118,
  17,
  18,
  125,
  10,
  126,
  119,
  120,
  121,
  19,
  122,
  123,
  124,
  129,
  130,
  131,
  132,
  11,
  133,
  134,
  127,
  128,
  136,
  137,
  135,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  147,
  148,
  146,
  149,
  150,
  151,
  152,
  153,
  154,
  12,
  155,
  157,
  156,
  158,
  159,
  160,
  163,
  161,
  164,
  162,
  166,
  168,
  167,
  169,
  13,
  165,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CMsgHotkey)},
  { 17, -1, sizeof(::CMsgSettingVariant)},
  { 30, 213, sizeof(::CMsgClientSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHotkey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSettingVariant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSettings_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"steammessages_clientsettings.proto\032 go"
  "ogle/protobuf/descriptor.proto\032\013enums.pr"
  "oto\"|\n\nCMsgHotkey\022\020\n\010key_code\030\001 \001(\r\022\017\n\007a"
  "lt_key\030\002 \001(\010\022\021\n\tshift_key\030\003 \001(\010\022\020\n\010ctrl_"
  "key\030\004 \001(\010\022\020\n\010meta_key\030\005 \001(\010\022\024\n\014display_n"
  "ame\030\006 \001(\t\"\316\001\n\022CMsgSettingVariant\022\024\n\nvalu"
  "e_bool\030\001 \001(\010H\000\022\025\n\013value_int32\030\002 \001(\005H\000\022\026\n"
  "\014value_uint32\030\003 \001(\rH\000\022\026\n\014value_uint64\030\005 "
  "\001(\003H\000\022\025\n\013value_float\030\006 \001(\002H\000\022\026\n\014value_st"
  "ring\030\007 \001(\tH\000\022#\n\014value_hotkey\030\010 \001(\0132\013.CMs"
  "gHotkeyH\000B\007\n\005value\"\257b\n\022CMsgClientSetting"
  "s\022N\n\025no_save_personal_info\030\001 \001(\010B/\200\246\035\001\212\246"
  "\035\'Software\\Valve\\Steam\\NoSavePersonalInf"
  "o\022P\n\026oobe_test_mode_enabled\030\002 \001(\010B0\200\246\035\001\212"
  "\246\035(Software\\Valve\\Steam\\OOBETestModeEnab"
  "led\022 \n\016in_client_beta\030\003 \001(\010B\010\200\246\035\005\220\246\035\001\022%\n"
  "\023is_steam_sideloaded\030\004 \001(\010B\010\200\246\035\005\220\246\035\001\0225\n\021"
  "preferred_monitor\030\005 \001(\tB\032\200\246\035\001\212\246\035\022BigPict"
  "ure/Monitor\022p\n steam_cef_gpu_blocklist_d"
  "isabled\030\006 \001(\010BF\200\246\035\004\212\246\035>HKEY_CURRENT_USER"
  "\\Software\\Valve\\Steam\\CEFGPUBlocklistDis"
  "abled\022<\n\023bigpicture_windowed\030\007 \001(\010B\037\200\246\035\001"
  "\212\246\035\023BigPicture/Windowed\220\246\035\001\0225\n\014display_n"
  "ame\030\010 \001(\tB\037\200\246\035\001\212\246\035\027UI/Display/Current/Na"
  "me\022I\n\023is_external_display\030\t \001(\010B,\200\246\035\001\212\246\035"
  "$UI/Display/Current/IsExternalDisplay\022E\n"
  "\030steam_os_underscan_level\030\n \001(\002B#\200\246\035\001\212\246\035"
  "\033SteamOSScreenUnderscanLevel\022I\n\032steam_os"
  "_underscan_enabled\030\013 \001(\010B%\200\246\035\001\212\246\035\035SteamO"
  "SScreenUnderscanEnabled\022C\n\020min_scale_fac"
  "tor\030\014 \001(\002B)\200\246\035\001\212\246\035!UI/Display/Current/Mi"
  "nScaleFactor\022C\n\020max_scale_factor\030\r \001(\002B)"
  "\200\246\035\001\212\246\035!UI/Display/Current/MaxScaleFacto"
  "r\022E\n\021auto_scale_factor\030\016 \001(\002B*\200\246\035\001\212\246\035\"UI"
  "/Display/Current/AutoScaleFactor\022:\n\nsmal"
  "l_mode\030\020 \001(\010B&\200\246\035\003\212\246\035\036Software\\Valve\\Ste"
  "am\\SmallMode\022I\n\033skip_steamvr_install_dia"
  "log\030\023 \001(\010B$\200\246\035\003\212\246\035\034system\\SteamVRHMDVGUI"
  "Warning\022O\n\030always_show_user_chooser\030\024 \001("
  "\010B-\200\246\035\001\212\246\035%WebStorage\\Auth\\AlwaysShowUse"
  "rChooser\022c\n\026os_version_unsupported\030\025 \001(\010"
  "BC\200\246\035\004\212\246\035;HKEY_CURRENT_USER\\Software\\Val"
  "ve\\Steam\\OSVersionUnsupported\0220\n!show_fa"
  "mily_sharing_notifications\030\270\027 \001(\010B\004\200\246\035\005\022"
  "G\n\032show_copy_count_in_library\030\271\027 \001(\010B\"\200\246"
  "\035\003\212\246\035\026ShowCopyCountInLibrary\230\246\035\001\022N\n\032over"
  "lay_fps_counter_corner\030\240\037 \001(\005B)\200\246\035\003\212\246\035!s"
  "ystem\\InGameOverlayShowFPSCorner\022W\n!over"
  "lay_fps_counter_high_contrast\030\241\037 \001(\010B+\200\246"
  "\035\003\212\246\035#system\\InGameOverlayShowFPSContras"
  "t\022[\n\013overlay_key\030\242\037 \001(\0132\013.CMsgHotkeyB8\200\246"
  "\035\003\212\246\035\037system\\InGameOverlayShortcutKey\272\246\035"
  "\rShift\tKEY_TAB\022]\n\016screenshot_key\030\243\037 \001(\0132"
  "\013.CMsgHotkeyB7\200\246\035\003\212\246\035$system\\InGameOverl"
  "ayScreenshotHotKey\272\246\035\007KEY_F12\022=\n\016enable_"
  "overlay\030\244\037 \001(\010B$\200\246\035\003\212\246\035\030system\\EnableGam"
  "eOverlay\230\246\035\001\022_\n\036enable_screenshot_notifi"
  "cation\030\246\037 \001(\010B6\200\246\035\003\212\246\035*system\\InGameOver"
  "layScreenshotNotification\230\246\035\001\022U\n\027enable_"
  "screenshot_sound\030\247\037 \001(\010B3\200\246\035\003\212\246\035\'system\\"
  "InGameOverlayScreenshotPlaySound\230\246\035\001\022^\n\035"
  "save_uncompressed_screenshots\030\250\037 \001(\010B6\200\246"
  "\035\003\212\246\035.system\\InGameOverlayScreenshotSave"
  "Uncompressed\022\037\n\020screenshots_path\030\251\037 \001(\tB"
  "\004\200\246\035\005\022l\n\021default_ping_rate\030\252\037 \001(\005BP\200\246\035\005\300"
  "\246\035\001\312\246\035DComputed default (automatic) serv"
  "er ping rate based on network speed\022\037\n\020s"
  "erver_ping_rate\030\253\037 \001(\005B\004\200\246\035\005\022(\n\031steam_ne"
  "tworking_share_ip\030\254\037 \001(\005B\004\200\246\035\005\022\037\n\020web_br"
  "owser_home\030\255\037 \001(\tB\004\200\246\035\005\022$\n\025voice_mic_dev"
  "ice_name\030\256\037 \001(\tB\004\200\246\035\005\022#\n\024voice_mic_input"
  "_gain\030\257\037 \001(\002B\004\200\246\035\005\022(\n\031voice_speaker_outp"
  "ut_gain\030\260\037 \001(\002B\004\200\246\035\005\022\'\n\030voice_push_to_ta"
  "lsetting\030\261\037 \001(\005B\004\200\246\035\005\0220\n\024voice_push_to_t"
  "alkey\030\262\037 \001(\0132\013.CMsgHotkeyB\004\200\246\035\005\022B\n\031overl"
  "ay_toolbar_list_view\030\263\037 \001(\010B\036\200\246\035\003\212\246\035\026Ove"
  "rlayToolBarListView\022T\n\034always_use_gamepa"
  "dui_overlay\030\264\037 \001(\010B-\200\246\035\003\212\246\035%system\\Enabl"
  "eSCTenFootOverlayCheckNew\022*\n\014overlay_tab"
  "s\030\265\037 \001(\tB\023\200\246\035\002\212\246\035\013OverlayTabs\022j\n\027overlay"
  "_scale_interface\030\266\037 \001(\010BH\200\246\035\004\212\246\035<HKEY_CU"
  "RRENT_USER\\Software\\Valve\\Steam\\OverlayS"
  "caleInterface\230\246\035\001\022Y\n\034overlay_restore_bro"
  "wser_tabs\030\267\037 \001(\010B2\200\246\035\003\212\246\035&system\\InGameO"
  "verlayRestoreBrowserTabs\230\246\035\001\022R\n\027enable_a"
  "vif_screenshots\030\270\037 \001(\010B0\200\246\035\003\212\246\035(system\\I"
  "nGameOverlayScreenshotEnableAVIF\022%\n\026smoo"
  "th_scroll_webviews\030\210\' \001(\010B\004\200\246\035\005\022.\n\037enabl"
  "e_gpu_accelerated_webviews\030\211\' \001(\010B\004\200\246\035\005\022"
  "-\n\036enable_hardware_video_decoding\030\213\' \001(\010"
  "B\004\200\246\035\005\022\035\n\016run_at_startup\030\214\' \001(\010B\004\200\246\035\005\022!\n"
  "\022enable_dpi_scaling\030\215\' \001(\010B\004\200\246\035\005\022I\n\031enab"
  "le_marketing_messages\030\216\' \001(\010B%\200\246\035\003\212\246\035\031ne"
  "ws\\NotifyAvailableGames\230\246\035\001\022(\n\031start_in_"
  "big_picture_mode\030\217\' \001(\010B\004\200\246\035\005\022>\n\016jumplis"
  "t_flags\030\220\' \001(\rB%\200\246\035\003\212\246\035\027system\\JumplistS"
  "ettings\250\246\035\360\336\004\022<\n\020enable_ui_sounds\030\221\' \001(\010"
  "B!\200\246\035\003\212\246\035\025system\\EnableUISounds\230\246\035\001\0225\n\022d"
  "isable_all_toasts\030\360. \001(\010B\030\200\246\035\002\212\246\035\020Disabl"
  "eAllToasts\022<\n\026disable_toasts_in_game\030\361. "
  "\001(\010B\033\200\246\035\002\212\246\035\023DisableToastsInGame\022:\n\023play"
  "_sound_on_toast\030\362. \001(\010B\034\200\246\035\002\212\246\035\020PlaySoun"
  "dOnToast\230\246\035\001\0229\n\024library_display_size\030\3306 "
  "\001(\005B\032\200\246\035\003\212\246\035\022LibraryDisplaySize\022c\n+libra"
  "ry_whats_new_show_only_product_updates\030\331"
  "6 \001(\010B-\200\246\035\002\212\246\035%LibraryWhatsNewShowOnlyPr"
  "oductUpdates\022G\n\032show_store_content_on_ho"
  "me\030\3326 \001(\010B\"\200\246\035\002\212\246\035\026ShowStoreContentOnHom"
  "e\230\246\035\001\022\031\n\nstart_page\030\3336 \001(\tB\004\200\246\035\005\022D\n\032libr"
  "ary_low_bandwidth_mode\030\3346 \001(\010B\037\200\246\035\003\212\246\035\027L"
  "ibraryLowBandwidthMode\022:\n\025library_low_pe"
  "rf_mode\030\3356 \001(\010B\032\200\246\035\003\212\246\035\022LibraryLowPerfMo"
  "de\022R\n!library_disable_community_content\030"
  "\3366 \001(\010B&\200\246\035\003\212\246\035\036LibraryDisableCommunityC"
  "ontent\022T\n!library_display_icon_in_game_l"
  "ist\030\3376 \001(\010B(\200\246\035\003\212\246\035\034LibraryDisplayIconIn"
  "GameList\230\246\035\001\022O\n ready_to_play_includes_s"
  "treaming\030\3406 \001(\010B$\200\246\035\005\212\246\035\034ReadyToPlayIncl"
  "udesStreaming\022\?\n\022show_steam_decinfo\030\3416 \001"
  "(\010B\"\200\246\035\003\212\246\035\032ShowSteamDeckInfoInLibrary\022%"
  "\n\026enable_shader_precache\030\300> \001(\010B\004\200\246\035\005\0222\n"
  "#enable_shader_background_processing\030\301> "
  "\001(\010B\004\200\246\035\005\022(\n\025shader_precached_size\030\302> \001("
  "\004B\010\200\246\035\005\300\246\035\001\022-\n\032needs_steam_service_repai"
  "r\030\303> \001(\010B\010\200\246\035\005\300\246\035\001\022$\n\025download_peer_cont"
  "ent\030\304> \001(\005B\004\200\246\035\005\022\'\n\030download_rate_bits_p"
  "er_s\030\305> \001(\010B\004\200\246\035\005\022$\n\025restrict_auto_updat"
  "es\030\306> \001(\010B\004\200\246\035\005\022*\n\033restrict_auto_updates"
  "_start\030\307> \001(\005B\004\200\246\035\005\022(\n\031restrict_auto_upd"
  "ates_end\030\310> \001(\005B\004\200\246\035\005\022\036\n\017download_region"
  "\030\311> \001(\005B\004\200\246\035\005\022)\n\032download_while_app_runn"
  "ing\030\312> \001(\010B\004\200\246\035\005\0220\n!download_throttle_wh"
  "ile_streaming\030\313> \001(\010B\004\200\246\035\005\022%\n\026download_t"
  "hrottle_rate\030\314> \001(\005B\004\200\246\035\005\022\034\n\rcloud_enabl"
  "ed\030\220N \001(\010B\004\200\246\035\005\022T\n\027show_screenshot_manag"
  "er\030\221N \001(\010B2\200\246\035\002\212\246\035*Software\\Valve\\Steam\\"
  "ShowScreenshotManager\022\033\n\014music_volume\030\370U"
  " \001(\005B\004\200\246\035\005\022I\n\030music_pause_on_app_start\030\371"
  "U \001(\010B&\200\246\035\001\212\246\035\036Music\\PauseOnAppStartedPr"
  "ocess\022B\n\031music_pause_on_voice_chat\030\372U \001("
  "\010B\036\200\246\035\001\212\246\035\026Music\\PauseOnVoiceChat\022W\n\033mus"
  "ic_download_high_quality\030\373U \001(\010B1\200\246\035\001\212\246\035"
  ")Music\\DownloadHighQualityAudioSoundtrac"
  "ks\022R\n\033music_playlist_notification\030\374U \001(\010"
  "B,\200\246\035\001\212\246\035$Music\\PlaylistNowPlayingNotifi"
  "cation\022v\n\025broadcast_permissions\030\340] \001(\0162\025"
  ".EBroadcastPermission:\034EBroadcastPermiss"
  "ionDisabledB!\200\246\035\003\212\246\035\025Broadcast\\Permissio"
  "ns\240\246\035\001\022>\n\026broadcast_output_width\030\341] \001(\005B"
  "\035\200\246\035\003\212\246\035\025Broadcast\\OutputWidth\022E\n\027broadc"
  "ast_output_height\030\342] \001(\005B#\200\246\035\003\212\246\035\026Broadc"
  "ast\\OutputHeight\240\246\035\320\005\022:\n\021broadcast_bitra"
  "te\030\343] \001(\005B\036\200\246\035\003\212\246\035\021Broadcast\\MaxKbps\240\246\035\304"
  "\023\022}\n\031broadcast_encoding_option\030\344] \001(\0162\031."
  "EBroadcastEncoderSetting:\034EBroadcastEnco"
  "derBestQualityB \200\246\035\003\212\246\035\030Broadcast\\Encode"
  "rSetting\022E\n\032broadcast_record_all_video\030\345"
  "] \001(\010B \200\246\035\003\212\246\035\030Broadcast\\IncludeDesktop\022"
  "H\n\032broadcast_record_all_audio\030\346] \001(\010B#\200\246"
  "\035\003\212\246\035\033Broadcast\\RecordSystemAudio\022A\n\033bro"
  "adcast_record_microphone\030\347] \001(\010B\033\200\246\035\003\212\246\035"
  "\023Broadcast\\RecordMic\022E\n\033broadcast_show_u"
  "pload_stats\030\350] \001(\010B\037\200\246\035\003\212\246\035\027Broadcast\\Sh"
  "owDebugInfo\022I\n\034broadcast_show_live_remin"
  "der\030\351] \001(\010B\"\200\246\035\003\212\246\035\026Broadcast\\ShowRemind"
  "er\230\246\035\001\022>\n\025broadcast_chat_corner\030\352] \001(\005B\036"
  "\200\246\035\003\212\246\035\022Broadcast\\ShowChat\240\246\035\001\022U\n gamest"
  "ream_hardware_video_encode\030\310e \001(\010B*\200\246\035\003\212"
  "\246\035\036GameStream\\HardwareVideoEncode\230\246\035\001\022M\n"
  "\034gamestream_enable_video_h265\030\311e \001(\010B&\200\246"
  "\035\003\212\246\035\032GameStream\\EnableVideoH265\230\246\035\001\022c\n)"
  "steam_input_configurator_error_msg_enabl"
  "e\030\261m \001(\010B/\200\246\035\001\212\246\035\'SteamInput/Configurato"
  "r/ErrorMsgEnabled\022U\n#controller_guide_bu"
  "tton_focus_steam\030\262m \001(\010B\'\200\246\035\003\212\246\035\033Control"
  "ler_CheckGuideButton\230\246\035\001\022E\n\025controller_p"
  "s_support\030\263m \001(\005B%\200\246\035\003\212\246\035\031SteamControlle"
  "r_PSSupport\240\246\035\001\022E\n\027controller_xbox_suppo"
  "rt\030\264m \001(\010B#\200\246\035\003\212\246\035\033SteamController_XBoxS"
  "upport\022C\n\026controller_xbox_driver\030\265m \001(\010B"
  "\"\200\246\035\003\212\246\035\032SteamController_XBoxDriver\022I\n\031c"
  "ontroller_switch_support\030\266m \001(\010B%\200\246\035\003\212\246\035"
  "\035SteamController_SwitchSupport\022R\n\032contro"
  "ller_generic_support\030\267m \001(\010B-\200\246\035\003\212\246\035%Ste"
  "amController_GenericGamepadSupport\022W\n\034co"
  "ntroller_power_off_timeout\030\270m \001(\005B0\200\246\035\003\212"
  "\246\035$CSettingsPanelGameController.Timeout\240"
  "\246\035\017\022R\n\033turn_off_controller_on_exit\030\271m \001("
  "\010B,\200\246\035\003\212\246\035$CSettingsPanelGameController."
  "TurnOff\0222\n#controller_combine_nintendo_j"
  "oycons\030\272m \001(\010B\004\200\246\035\005\022K\n\027controller_enable"
  "_chord\030\353\305\010 \001(\010B(\200\246\035\003\212\246\035\034SteamController_"
  "Enable_Chord\230\246\035\001\022E\n\024controller_poll_rate"
  "\030\354\305\010 \001(\010B%\200\246\035\003\212\246\035\031SteamController_Poll_R"
  "ate\240\246\035\002\022I\n\020startup_movie_id\030\200} \001(\004B.\200\246\035\001"
  "\212\246\035\"Customization/StartupMovie/MovieID\220\246"
  "\035\001\022S\n\030startup_movie_local_path\030\201} \001(\tB0\200"
  "\246\035\001\212\246\035$Customization/StartupMovie/LocalP"
  "ath\220\246\035\001\022N\n\025startup_movie_shuffle\030\202} \001(\010B"
  ".\200\246\035\001\212\246\035\"Customization/StartupMovie/Shuf"
  "fle\220\246\035\001\022X\n\035startup_movie_used_for_resume"
  "\030\203} \001(\010B0\200\246\035\003\212\246\035(Customization/StartupMo"
  "vie/UsedForResume\022M\n\034game_notes_enable_s"
  "pellcheck\030\351\204\001 \001(\010B%\200\246\035\002\212\246\035\031GameNotesEnab"
  "leSpellcheck\230\246\035\001\022I\n\030screenshot_items_per"
  "_row\030\320\214\001 \001(\005B%\200\246\035\002\212\246\035\031ScreenshotViewItem"
  "sPerRow\240\246\035\001\022!\n\021g_background_path\030\231\216\001 \001(\t"
  "B\004\200\246\035\005\022/\n\025g_background_max_keep\030\232\216\001 \001(\tB"
  "\016\200\246\035\005\272\246\035\006120min\022,\n\034g_background_time_res"
  "olution\030\233\216\001 \001(\005B\004\200\246\035\005\022,\n\017g_background_mk"
  "\030\237\216\001 \001(\0132\013.CMsgHotkeyB\004\200\246\035\005\022,\n\017g_backgro"
  "und_tg\030\240\216\001 \001(\0132\013.CMsgHotkeyB\004\200\246\035\005\022 \n\020g_b"
  "ackground_a_m\030\241\216\001 \001(\010B\004\200\246\035\005\022[\n\033gamerecor"
  "ding_video_bitrate\030\242\216\001 \001(\tB4\200\246\035\003\212\246\035\032Game"
  "Recording\\VideoBitRate\272\246\035\016preset_default"
  "\022 \n\020g_background_a_s\030\243\216\001 \001(\010B\004\200\246\035\005\022:\n\021g_"
  "background_mode\030\244\216\001 \001(\0162\010.EGRMode:\rEGRMo"
  "de_NeverB\004\200\246\035\005\022<\n\022g_background_audio\030\245\216\001"
  " \001(\0162\t.EGRAudio:\rEGRAudio_GameB\004\200\246\035\005\022=\n\t"
  "g_max_fps\030\246\216\001 \001(\005B(\200\246\035\003\212\246\035\024GameRecording"
  "\\MaxFPS\240\246\035<\330\246\035\030\340\246\035x\022\\\n\027gamerecording_hot"
  "key_ic\030\247\216\001 \001(\0132\013.CMsgHotkeyB,\200\246\035\003\212\246\035\034Gam"
  "eRecording\\InstantClipKey\272\246\035\004None\022T\n\030gam"
  "erecording_ic_seconds\030\250\216\001 \001(\002B0\200\246\035\003\212\246\035!G"
  "ameRecording\\InstantClipDuration\265\246\035\000\000 A\022"
  "\200\001\n\037gamerecording_export_limit_type\030\251\216\001 "
  "\001(\0162\023.EGRExportLimitType:\031EGRExportLimit"
  "Type_NativeB%\200\246\035\003\212\246\035\035GameRecording\\Expor"
  "tLimitType\022W\n\"gamerecording_export_limit"
  "_size_mb\030\252\216\001 \001(\005B)\200\246\035\003\212\246\035\035GameRecording\\"
  "ExportLimitSize\240\246\035d\022Z\n\"gamerecording_exp"
  "ort_limit_bitrate\030\253\216\001 \001(\005B,\200\246\035\003\212\246\035 GameR"
  "ecording\\ExportLimitBitrate\240\246\035\001\022W\n gamer"
  "ecording_export_limit_width\030\254\216\001 \001(\005B+\200\246\035"
  "\003\212\246\035\036GameRecording\\ExportLimitWidth\240\246\035\200\036"
  "\022Y\n!gamerecording_export_limit_height\030\255\216"
  "\001 \001(\005B,\200\246\035\003\212\246\035\037GameRecording\\ExportLimit"
  "Height\240\246\035\360\020\022_\n%gamerecording_export_limi"
  "t_frame_rate\030\256\216\001 \001(\005B.\200\246\035\003\212\246\035\"GameRecord"
  "ing\\ExportLimitFrameRate\240\246\035<\022O\n\036gamereco"
  "rding_export_directory\030\257\216\001 \001(\tB%\200\246\035\005\212\246\035\035"
  "GameRecording\\ExportDirectory\022l\n\032gamerec"
  "ording_export_codec\030\260\216\001 \001(\0162\r.EExportCod"
  "ec:\024EExportCodec_DefaultB!\200\246\035\003\212\246\035\031GameRe"
  "cording\\ExportCodec\022Z\n\035gamerecording_vid"
  "eo_maxheight\030\261\216\001 \001(\005B1\200\246\035\003\212\246\035\034GameRecord"
  "ing\\VideoMaxHeight\240\246\035\000\330\246\035\000\340\246\035\360\020\022N\n\034gamer"
  "ecording_force_mic_mono\030\262\216\001 \001(\010B&\200\246\035\003\212\246\035"
  "\032GameRecording\\ForceMicMono\230\246\035\000\022^\n$gamer"
  "ecording_automatic_gain_control\030\263\216\001 \001(\010B"
  ".\200\246\035\003\212\246\035\"GameRecording\\AutomaticGainCont"
  "rol\230\246\035\001\022O\n\032show_timestamps_in_console\030\240\234"
  "\001 \001(\010B)\200\246\035\003\212\246\035!Developer\\ShowTimestampsI"
  "nConsole\022N\n\nforce_oobe\030\241\234\001 \001(\010B8\200\246\035\004\212\246\0350"
  "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\F"
  "orceOOBE\022.\n\036override_browser_composer_mo"
  "de\030\242\234\001 \001(\005B\004\200\246\035\005\022,\n\034cef_remote_debugging"
  "_enabled\030\243\234\001 \001(\010B\004\200\246\035\005\022\?\n\021force_decperf_"
  "tab\030\244\234\001 \001(\010B\"\200\246\035\001\212\246\035\032Developer/ForceDeck"
  "PerfTab\022L\n\033force_fake_mandatory_update\030\245"
  "\234\001 \001(\010B%\200\246\035\001\212\246\035\035Developer/FakeMandatoryU"
  "pdate\022@\n\022hdr_compat_testing\030\246\234\001 \001(\010B\"\200\246\035"
  "\001\212\246\035\032Developer/HDRCompatTesting\022B\n\026devel"
  "oper_mode_enabled\030\247\234\001 \001(\010B \200\246\035\001\212\246\035\030Devel"
  "oper/DevModeEnabled\022U\n\035show_advanced_upd"
  "ate_channels\030\250\234\001 \001(\010B,\200\246\035\001\212\246\035$Developer/"
  "ShowAdvancedUpdateChannels\022v\n\033gamescope_"
  "hdr_visualization\030\211\244\001 \001(\0162\022.EHDRVisualiz"
  "ation:\026EHDRVisualization_NoneB#\200\246\035\003\212\246\035\033G"
  "amescope/HDRVisualization2\022V\n\036gamescope_"
  "app_target_framerate\030\212\244\001 \001(\005B,\200\246\035\003\212\246\035\034Ga"
  "mescope/AppTargetFrameRate\240\246\035\000\320\246\035\002\022\210\001\n%g"
  "amescope_enable_app_target_framerate\030\213\244\001"
  " \001(\010BW\200\246\035\004\212\246\035KHKEY_CURRENT_USER\\Software"
  "\\Valve\\Steam\\GamescopeEnableAppTargetRef"
  "reshRate2\230\246\035\001\022S\n\034gamescope_disable_frame"
  "limit\030\214\244\001 \001(\010B+\200\246\035\003\212\246\035\033Gamescope/Disable"
  "FrameLimit\230\246\035\000\320\246\035\002\022O\n\036gamescope_display_"
  "refresh_rate\030\215\244\001 \001(\005B%\200\246\035\003\212\246\035\025Gamescope/"
  "RefreshRate\240\246\035\000\320\246\035\002\022c\n(gamescope_use_gam"
  "e_refresh_rate_in_steam\030\216\244\001 \001(\010B/\200\246\035\003\212\246\035"
  "#Developer/DynamicRefreshRateInSteam\230\246\035\001"
  "\022Y\n!gamescope_disable_mura_correction\030\217\244"
  "\001 \001(\010B,\200\246\035\003\212\246\035 Gamescope/MuraCorrectionD"
  "isabled\230\246\035\000\022e\n(gamescope_include_steamui"
  "_in_screenshots\030\220\244\001 \001(\010B1\200\246\035\003\212\246\035%Gamesco"
  "pe/IncludeSteamUIInScreenshots\230\246\035\001\022I\n\027ga"
  "mescope_allow_tearing\030\221\244\001 \001(\010B&\200\246\035\003\212\246\035\026G"
  "amescope/AllowTearing\230\246\035\000\320\246\035\001\022I\n\031gamesco"
  "pe_composite_debug\030\222\244\001 \001(\010B$\200\246\035\003\212\246\035\030Game"
  "scope/CompositeDebug\230\246\035\000\022I\n\031gamescope_fo"
  "rce_composite\030\223\244\001 \001(\010B$\200\246\035\003\212\246\035\030Gamescope"
  "/ForceComposite\230\246\035\000\022]\n gamescope_game_re"
  "solution_global\030\224\244\001 \001(\tB1\200\246\035\003\212\246\035\036Gamesco"
  "pe/GameResolutionGlobal\272\246\035\007Default\022P\n\035st"
  "eamos_status_led_brightness\030\360\253\001 \001(\005B\'\200\246\035"
  "\003\212\246\035\033SteamOS/StatusLEDBrightness\240\246\035d\022L\n\031"
  "steamos_tdp_limit_enabled\030\361\253\001 \001(\010B\'\200\246\035\001\212"
  "\246\035\027SteamOS/TDPLimitEnabled\230\246\035\000\320\246\035\001\022=\n\021st"
  "eamos_tdp_limit\030\362\253\001 \001(\005B \200\246\035\001\212\246\035\020SteamOS"
  "/TDPLimit\240\246\035\000\320\246\035\001\022=\n\023steamos_cec_enabled"
  "\030\363\253\001 \001(\010B\036\200\246\035\001\212\246\035\022SteamOS/CECEnabled\230\246\035\001"
  "\022F\n\032steamos_cec_wake_on_resume\030\364\253\001 \001(\010B "
  "\200\246\035\001\212\246\035\024SteamOS/WakeOnResume\230\246\035\001\022;\n\022stea"
  "mos_wifi_debug\030\365\253\001 \001(\010B\035\200\246\035\001\212\246\035\021SteamOS/"
  "WifiDebug\230\246\035\000\022W\n!steamos_wifi_force_wpa_"
  "supplicant\030\366\253\001 \001(\010B*\200\246\035\001\212\246\035\036SteamOS/Wifi"
  "ForceWPASupplicant\230\246\035\000\022F\n\027steamos_magnif"
  "ier_scale\030\367\253\001 \001(\005B#\200\246\035\003\212\246\035\026SteamOS/Magni"
  "fierScale\240\246\035\226\001\022F\n\027setting_validation_boo"
  "l\030\331\263\001 \001(\010B#\200\246\035\001\212\246\035\033SettingValidation/Dum"
  "myBool\022r\n\027setting_validation_enum\030\332\263\001 \001("
  "\0162\022.EHDRVisualization:\026EHDRVisualization"
  "_NoneB#\200\246\035\001\212\246\035\033SettingValidation/DummyEn"
  "um\022H\n\030setting_validation_int32\030\333\263\001 \001(\005B$"
  "\200\246\035\001\212\246\035\034SettingValidation/DummyInt32\022J\n\031"
  "setting_validation_uint32\030\334\263\001 \001(\rB%\200\246\035\001\212"
  "\246\035\035SettingValidation/DummyUInt32\022J\n\031sett"
  "ing_validation_uint64\030\335\263\001 \001(\004B%\200\246\035\001\212\246\035\035S"
  "ettingValidation/DummyUInt64\022H\n\030setting_"
  "validation_float\030\336\263\001 \001(\002B$\200\246\035\001\212\246\035\034Settin"
  "gValidation/DummyFloat\022J\n\031setting_valida"
  "tion_string\030\337\263\001 \001(\tB%\200\246\035\001\212\246\035\035SettingVali"
  "dation/DummyString\022H\n\030system_bluetooth_e"
  "nabled\030\300\273\001 \001(\010B$\200\246\035\001\212\246\035\030System/Bluetooth"
  "/Enabled\230\246\035\000*\211\002\n\023EClientSettingStore\022\037\n\033"
  "EClientSettingStore_Invalid\020\000\022+\n\'EClient"
  "SettingStore_ConfigStore_Install\020\001\022/\n+EC"
  "lientSettingStore_ConfigStore_UserRoamin"
  "g\020\002\022-\n)EClientSettingStore_ConfigStore_U"
  "serLocal\020\003\022 \n\034EClientSettingStore_Regist"
  "ry\020\004\022\"\n\036EClientSettingStore_CustomFunc\020\005"
  "*\255\001\n\031EOverlayToggleBarLocation\022$\n EOverl"
  "ayToggleBarLocation_Bottom\020\000\022\"\n\036EOverlay"
  "ToggleBarLocation_Left\020\001\022#\n\037EOverlayTogg"
  "leBarLocation_Right\020\002\022!\n\035EOverlayToggleB"
  "arLocation_Top\020\003*\243\001\n\023ESettingProfileMode"
  "\022\034\n\030ESettingProfileMode_None\020\000\022\037\n\033ESetti"
  "ngProfileMode_PerGame\020\001\022)\n%ESettingProfi"
  "leMode_PerGamePerDisplay\020\002\022\"\n\036ESettingPr"
  "ofileMode_PerDisplay\020\003*D\n\007EGRMode\022\021\n\rEGR"
  "Mode_Never\020\000\022\022\n\016EGRMode_Always\020\001\022\022\n\016EGRM"
  "ode_Manual\020\002*G\n\010EGRAudio\022\021\n\rEGRAudio_Gam"
  "e\020\000\022\023\n\017EGRAudio_System\020\001\022\023\n\017EGRAudio_Sel"
  "ect\020\002*u\n\022EGRExportLimitType\022\035\n\031EGRExport"
  "LimitType_Native\020\000\022\037\n\033EGRExportLimitType"
  "_FileSize\020\001\022\037\n\033EGRExportLimitType_Advanc"
  "ed\020\002:i\n\rsetting_store\022\035.google.protobuf."
  "FieldOptions\030\340\324\003 \001(\0162\024.EClientSettingSto"
  "re:\033EClientSettingStore_Invalid:5\n\014setti"
  "ng_name\022\035.google.protobuf.FieldOptions\030\341"
  "\324\003 \001(\t::\n\021setting_pre_login\022\035.google.pro"
  "tobuf.FieldOptions\030\342\324\003 \001(\010:=\n\024setting_de"
  "fault_bool\022\035.google.protobuf.FieldOption"
  "s\030\343\324\003 \001(\010:<\n\023setting_default_int\022\035.googl"
  "e.protobuf.FieldOptions\030\344\324\003 \001(\005:=\n\024setti"
  "ng_default_uint\022\035.google.protobuf.FieldO"
  "ptions\030\345\324\003 \001(\r:>\n\025setting_default_float\022"
  "\035.google.protobuf.FieldOptions\030\346\324\003 \001(\002:\?"
  "\n\026setting_default_string\022\035.google.protob"
  "uf.FieldOptions\030\347\324\003 \001(\t:9\n\020setting_reado"
  "nly\022\035.google.protobuf.FieldOptions\030\350\324\003 \001"
  "(\010:<\n\023setting_description\022\035.google.proto"
  "buf.FieldOptions\030\351\324\003 \001(\t:m\n\024setting_prof"
  "ile_mode\022\035.google.protobuf.FieldOptions\030"
  "\352\324\003 \001(\0162\024.ESettingProfileMode:\030ESettingP"
  "rofileMode_None::\n\021setting_clamp_min\022\035.g"
  "oogle.protobuf.FieldOptions\030\353\324\003 \001(\003::\n\021s"
  "etting_clamp_max\022\035.google.protobuf.Field"
  "Options\030\354\324\003 \001(\003B\037H\001\200\001\001\252\002\027OpenSteamworks."
  "Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientsettings_2eproto_deps[2] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientsettings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientsettings_2eproto = {
  false, false, 14808, descriptor_table_protodef_steammessages_5fclientsettings_2eproto, "steammessages_clientsettings.proto", 
  &descriptor_table_steammessages_5fclientsettings_2eproto_once, descriptor_table_steammessages_5fclientsettings_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_steammessages_5fclientsettings_2eproto::offsets,
  file_level_metadata_steammessages_5fclientsettings_2eproto, file_level_enum_descriptors_steammessages_5fclientsettings_2eproto, file_level_service_descriptors_steammessages_5fclientsettings_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientsettings_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return descriptor_table_steammessages_5fclientsettings_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientsettings_2eproto(&descriptor_table_steammessages_5fclientsettings_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientSettingStore_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[0];
}
bool EClientSettingStore_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOverlayToggleBarLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[1];
}
bool EOverlayToggleBarLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESettingProfileMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[2];
}
bool ESettingProfileMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGRMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[3];
}
bool EGRMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGRAudio_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[4];
}
bool EGRAudio_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGRExportLimitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[5];
}
bool EGRExportLimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgHotkey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHotkey>()._has_bits_);
  static void set_has_key_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alt_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ctrl_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_meta_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHotkey::CMsgHotkey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHotkey)
}
CMsgHotkey::CMsgHotkey(const CMsgHotkey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&meta_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(meta_key_));
  // @@protoc_insertion_point(copy_constructor:CMsgHotkey)
}

void CMsgHotkey::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&meta_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(meta_key_));
}

CMsgHotkey::~CMsgHotkey() {
  // @@protoc_insertion_point(destructor:CMsgHotkey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHotkey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHotkey::ArenaDtor(void* object) {
  CMsgHotkey* _this = reinterpret_cast< CMsgHotkey* >(object);
  (void)_this;
}
void CMsgHotkey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHotkey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHotkey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHotkey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    display_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&key_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&meta_key_) -
        reinterpret_cast<char*>(&key_code_)) + sizeof(meta_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHotkey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 key_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key_code(&has_bits);
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool alt_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_alt_key(&has_bits);
          alt_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shift_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shift_key(&has_bits);
          shift_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ctrl_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ctrl_key(&has_bits);
          ctrl_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool meta_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_meta_key(&has_bits);
          meta_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHotkey.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHotkey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHotkey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_code(), target);
  }

  // optional bool alt_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_alt_key(), target);
  }

  // optional bool shift_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shift_key(), target);
  }

  // optional bool ctrl_key = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ctrl_key(), target);
  }

  // optional bool meta_key = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_meta_key(), target);
  }

  // optional string display_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHotkey.display_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHotkey)
  return target;
}

size_t CMsgHotkey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHotkey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string display_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional uint32 key_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_key_code());
    }

    // optional bool alt_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool shift_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_key = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool meta_key = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHotkey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHotkey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHotkey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHotkey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHotkey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHotkey)
    MergeFrom(*source);
  }
}

void CMsgHotkey::MergeFrom(const CMsgHotkey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHotkey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      key_code_ = from.key_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      alt_key_ = from.alt_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      shift_key_ = from.shift_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      ctrl_key_ = from.ctrl_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      meta_key_ = from.meta_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHotkey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHotkey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHotkey::CopyFrom(const CMsgHotkey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHotkey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHotkey::IsInitialized() const {
  return true;
}

void CMsgHotkey::InternalSwap(CMsgHotkey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHotkey, meta_key_)
      + sizeof(CMsgHotkey::meta_key_)
      - PROTOBUF_FIELD_OFFSET(CMsgHotkey, key_code_)>(
          reinterpret_cast<char*>(&key_code_),
          reinterpret_cast<char*>(&other->key_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHotkey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSettingVariant::_Internal {
 public:
  static const ::CMsgHotkey& value_hotkey(const CMsgSettingVariant* msg);
};

const ::CMsgHotkey&
CMsgSettingVariant::_Internal::value_hotkey(const CMsgSettingVariant* msg) {
  return *msg->value_.value_hotkey_;
}
void CMsgSettingVariant::set_allocated_value_hotkey(::CMsgHotkey* value_hotkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (value_hotkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value_hotkey);
    if (message_arena != submessage_arena) {
      value_hotkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_hotkey, submessage_arena);
    }
    set_has_value_hotkey();
    value_.value_hotkey_ = value_hotkey;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSettingVariant.value_hotkey)
}
CMsgSettingVariant::CMsgSettingVariant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSettingVariant)
}
CMsgSettingVariant::CMsgSettingVariant(const CMsgSettingVariant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kValueBool: {
      _internal_set_value_bool(from._internal_value_bool());
      break;
    }
    case kValueInt32: {
      _internal_set_value_int32(from._internal_value_int32());
      break;
    }
    case kValueUint32: {
      _internal_set_value_uint32(from._internal_value_uint32());
      break;
    }
    case kValueUint64: {
      _internal_set_value_uint64(from._internal_value_uint64());
      break;
    }
    case kValueFloat: {
      _internal_set_value_float(from._internal_value_float());
      break;
    }
    case kValueString: {
      _internal_set_value_string(from._internal_value_string());
      break;
    }
    case kValueHotkey: {
      _internal_mutable_value_hotkey()->::CMsgHotkey::MergeFrom(from._internal_value_hotkey());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSettingVariant)
}

void CMsgSettingVariant::SharedCtor() {
clear_has_value();
}

CMsgSettingVariant::~CMsgSettingVariant() {
  // @@protoc_insertion_point(destructor:CMsgSettingVariant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSettingVariant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void CMsgSettingVariant::ArenaDtor(void* object) {
  CMsgSettingVariant* _this = reinterpret_cast< CMsgSettingVariant* >(object);
  (void)_this;
}
void CMsgSettingVariant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSettingVariant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSettingVariant::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CMsgSettingVariant)
  switch (value_case()) {
    case kValueBool: {
      // No need to clear
      break;
    }
    case kValueInt32: {
      // No need to clear
      break;
    }
    case kValueUint32: {
      // No need to clear
      break;
    }
    case kValueUint64: {
      // No need to clear
      break;
    }
    case kValueFloat: {
      // No need to clear
      break;
    }
    case kValueString: {
      value_.value_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kValueHotkey: {
      if (GetArena() == nullptr) {
        delete value_.value_hotkey_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void CMsgSettingVariant::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSettingVariant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSettingVariant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_value_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_value_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_value_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value_uint64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_value_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value_float = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _internal_set_value_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string value_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_value_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSettingVariant.value_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgHotkey value_hotkey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_hotkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSettingVariant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSettingVariant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kValueBool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value_bool(), target);
      break;
    }
    case kValueInt32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value_int32(), target);
      break;
    }
    case kValueUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value_uint32(), target);
      break;
    }
    case kValueUint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_value_uint64(), target);
      break;
    }
    case kValueFloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_value_float(), target);
      break;
    }
    case kValueString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_value_string().data(), static_cast<int>(this->_internal_value_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "CMsgSettingVariant.value_string");
      target = stream->WriteStringMaybeAliased(
          7, this->_internal_value_string(), target);
      break;
    }
    case kValueHotkey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::value_hotkey(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSettingVariant)
  return target;
}

size_t CMsgSettingVariant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSettingVariant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bool value_bool = 1;
    case kValueBool: {
      total_size += 1 + 1;
      break;
    }
    // int32 value_int32 = 2;
    case kValueInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value_int32());
      break;
    }
    // uint32 value_uint32 = 3;
    case kValueUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value_uint32());
      break;
    }
    // int64 value_uint64 = 5;
    case kValueUint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_value_uint64());
      break;
    }
    // float value_float = 6;
    case kValueFloat: {
      total_size += 1 + 4;
      break;
    }
    // string value_string = 7;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_string());
      break;
    }
    // .CMsgHotkey value_hotkey = 8;
    case kValueHotkey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.value_hotkey_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSettingVariant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSettingVariant)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSettingVariant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSettingVariant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSettingVariant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSettingVariant)
    MergeFrom(*source);
  }
}

void CMsgSettingVariant::MergeFrom(const CMsgSettingVariant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSettingVariant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kValueBool: {
      _internal_set_value_bool(from._internal_value_bool());
      break;
    }
    case kValueInt32: {
      _internal_set_value_int32(from._internal_value_int32());
      break;
    }
    case kValueUint32: {
      _internal_set_value_uint32(from._internal_value_uint32());
      break;
    }
    case kValueUint64: {
      _internal_set_value_uint64(from._internal_value_uint64());
      break;
    }
    case kValueFloat: {
      _internal_set_value_float(from._internal_value_float());
      break;
    }
    case kValueString: {
      _internal_set_value_string(from._internal_value_string());
      break;
    }
    case kValueHotkey: {
      _internal_mutable_value_hotkey()->::CMsgHotkey::MergeFrom(from._internal_value_hotkey());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void CMsgSettingVariant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSettingVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSettingVariant::CopyFrom(const CMsgSettingVariant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSettingVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSettingVariant::IsInitialized() const {
  return true;
}

void CMsgSettingVariant::InternalSwap(CMsgSettingVariant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSettingVariant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSettings>()._has_bits_);
  static void set_has_no_save_personal_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_oobe_test_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_in_client_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_is_steam_sideloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_preferred_monitor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_cef_gpu_blocklist_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_bigpicture_windowed(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_external_display(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_steam_os_underscan_level(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_steam_os_underscan_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_min_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_max_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_auto_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_small_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_skip_steamvr_install_dialog(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_always_show_user_chooser(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_os_version_unsupported(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_show_family_sharing_notifications(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_show_copy_count_in_library(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_overlay_fps_counter_corner(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_overlay_fps_counter_high_contrast(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::CMsgHotkey& overlay_key(const CMsgClientSettings* msg);
  static void set_has_overlay_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::CMsgHotkey& screenshot_key(const CMsgClientSettings* msg);
  static void set_has_screenshot_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_overlay(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_enable_screenshot_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_enable_screenshot_sound(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_save_uncompressed_screenshots(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_screenshots_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_ping_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_server_ping_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_steam_networking_share_ip(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_web_browser_home(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_voice_mic_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voice_mic_input_gain(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_voice_speaker_output_gain(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_voice_push_to_talsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::CMsgHotkey& voice_push_to_talkey(const CMsgClientSettings* msg);
  static void set_has_voice_push_to_talkey(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_overlay_toolbar_list_view(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_always_use_gamepadui_overlay(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_overlay_tabs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_overlay_scale_interface(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_overlay_restore_browser_tabs(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_enable_avif_screenshots(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_smooth_scroll_webviews(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_enable_gpu_accelerated_webviews(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_enable_hardware_video_decoding(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_run_at_startup(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_enable_dpi_scaling(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_enable_marketing_messages(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_start_in_big_picture_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_jumplist_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_enable_ui_sounds(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_disable_all_toasts(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_disable_toasts_in_game(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_play_sound_on_toast(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_library_display_size(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_library_whats_new_show_only_product_updates(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_show_store_content_on_home(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_start_page(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_library_low_bandwidth_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_library_low_perf_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_library_disable_community_content(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_library_display_icon_in_game_list(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_ready_to_play_includes_streaming(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_show_steam_decinfo(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_enable_shader_precache(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_enable_shader_background_processing(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_shader_precached_size(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_needs_steam_service_repair(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_download_peer_content(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_download_rate_bits_per_s(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_restrict_auto_updates(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_restrict_auto_updates_start(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_restrict_auto_updates_end(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_download_region(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_download_while_app_running(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_download_throttle_while_streaming(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_download_throttle_rate(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_cloud_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_show_screenshot_manager(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_music_volume(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_music_pause_on_app_start(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_music_pause_on_voice_chat(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_music_download_high_quality(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_music_playlist_notification(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_broadcast_permissions(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_broadcast_output_width(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_broadcast_output_height(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_broadcast_bitrate(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_broadcast_encoding_option(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_broadcast_record_all_video(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_broadcast_record_all_audio(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_broadcast_record_microphone(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_broadcast_show_upload_stats(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_broadcast_show_live_reminder(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_broadcast_chat_corner(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_gamestream_hardware_video_encode(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_gamestream_enable_video_h265(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_steam_input_configurator_error_msg_enable(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_controller_guide_button_focus_steam(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_controller_ps_support(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_controller_xbox_support(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_controller_xbox_driver(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_controller_switch_support(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static void set_has_controller_generic_support(HasBits* has_bits) {
    (*has_bits)[5] |= 1024u;
  }
  static void set_has_controller_power_off_timeout(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_turn_off_controller_on_exit(HasBits* has_bits) {
    (*has_bits)[5] |= 2048u;
  }
  static void set_has_controller_combine_nintendo_joycons(HasBits* has_bits) {
    (*has_bits)[5] |= 4096u;
  }
  static void set_has_controller_enable_chord(HasBits* has_bits) {
    (*has_bits)[5] |= 8192u;
  }
  static void set_has_controller_poll_rate(HasBits* has_bits) {
    (*has_bits)[5] |= 16384u;
  }
  static void set_has_startup_movie_id(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_startup_movie_local_path(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_startup_movie_shuffle(HasBits* has_bits) {
    (*has_bits)[5] |= 32768u;
  }
  static void set_has_startup_movie_used_for_resume(HasBits* has_bits) {
    (*has_bits)[5] |= 65536u;
  }
  static void set_has_game_notes_enable_spellcheck(HasBits* has_bits) {
    (*has_bits)[5] |= 131072u;
  }
  static void set_has_screenshot_items_per_row(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_g_background_path(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_g_background_max_keep(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_g_background_time_resolution(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static const ::CMsgHotkey& g_background_mk(const CMsgClientSettings* msg);
  static void set_has_g_background_mk(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CMsgHotkey& g_background_tg(const CMsgClientSettings* msg);
  static void set_has_g_background_tg(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_g_background_a_m(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static void set_has_gamerecording_video_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_g_background_a_s(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static void set_has_g_background_mode(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static void set_has_g_background_audio(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static void set_has_g_max_fps(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static const ::CMsgHotkey& gamerecording_hotkey_ic(const CMsgClientSettings* msg);
  static void set_has_gamerecording_hotkey_ic(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gamerecording_ic_seconds(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static void set_has_gamerecording_export_limit_type(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static void set_has_gamerecording_export_limit_size_mb(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static void set_has_gamerecording_export_limit_bitrate(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static void set_has_gamerecording_export_limit_width(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static void set_has_gamerecording_export_limit_height(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static void set_has_gamerecording_export_limit_frame_rate(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static void set_has_gamerecording_export_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gamerecording_export_codec(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static void set_has_gamerecording_video_maxheight(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static void set_has_gamerecording_force_mic_mono(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static void set_has_gamerecording_automatic_gain_control(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static void set_has_show_timestamps_in_console(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static void set_has_force_oobe(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
  static void set_has_override_browser_composer_mode(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static void set_has_cef_remote_debugging_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static void set_has_force_decperf_tab(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static void set_has_force_fake_mandatory_update(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static void set_has_hdr_compat_testing(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static void set_has_developer_mode_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 16384u;
  }
  static void set_has_show_advanced_update_channels(HasBits* has_bits) {
    (*has_bits)[4] |= 32768u;
  }
  static void set_has_gamescope_hdr_visualization(HasBits* has_bits) {
    (*has_bits)[4] |= 65536u;
  }
  static void set_has_gamescope_app_target_framerate(HasBits* has_bits) {
    (*has_bits)[4] |= 131072u;
  }
  static void set_has_gamescope_enable_app_target_framerate(HasBits* has_bits) {
    (*has_bits)[4] |= 524288u;
  }
  static void set_has_gamescope_disable_framelimit(HasBits* has_bits) {
    (*has_bits)[4] |= 1048576u;
  }
  static void set_has_gamescope_display_refresh_rate(HasBits* has_bits) {
    (*has_bits)[4] |= 262144u;
  }
  static void set_has_gamescope_use_game_refresh_rate_in_steam(HasBits* has_bits) {
    (*has_bits)[4] |= 2097152u;
  }
  static void set_has_gamescope_disable_mura_correction(HasBits* has_bits) {
    (*has_bits)[4] |= 4194304u;
  }
  static void set_has_gamescope_include_steamui_in_screenshots(HasBits* has_bits) {
    (*has_bits)[4] |= 8388608u;
  }
  static void set_has_gamescope_allow_tearing(HasBits* has_bits) {
    (*has_bits)[4] |= 16777216u;
  }
  static void set_has_gamescope_composite_debug(HasBits* has_bits) {
    (*has_bits)[4] |= 33554432u;
  }
  static void set_has_gamescope_force_composite(HasBits* has_bits) {
    (*has_bits)[4] |= 67108864u;
  }
  static void set_has_gamescope_game_resolution_global(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steamos_status_led_brightness(HasBits* has_bits) {
    (*has_bits)[4] |= 134217728u;
  }
  static void set_has_steamos_tdp_limit_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 536870912u;
  }
  static void set_has_steamos_tdp_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 268435456u;
  }
  static void set_has_steamos_cec_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 1073741824u;
  }
  static void set_has_steamos_cec_wake_on_resume(HasBits* has_bits) {
    (*has_bits)[4] |= 2147483648u;
  }
  static void set_has_steamos_wifi_debug(HasBits* has_bits) {
    (*has_bits)[5] |= 1u;
  }
  static void set_has_steamos_wifi_force_wpa_supplicant(HasBits* has_bits) {
    (*has_bits)[5] |= 8u;
  }
  static void set_has_steamos_magnifier_scale(HasBits* has_bits) {
    (*has_bits)[5] |= 2u;
  }
  static void set_has_setting_validation_bool(HasBits* has_bits) {
    (*has_bits)[5] |= 16u;
  }
  static void set_has_setting_validation_enum(HasBits* has_bits) {
    (*has_bits)[5] |= 4u;
  }
  static void set_has_setting_validation_int32(HasBits* has_bits) {
    (*has_bits)[5] |= 64u;
  }
  static void set_has_setting_validation_uint32(HasBits* has_bits) {
    (*has_bits)[5] |= 256u;
  }
  static void set_has_setting_validation_uint64(HasBits* has_bits) {
    (*has_bits)[5] |= 128u;
  }
  static void set_has_setting_validation_float(HasBits* has_bits) {
    (*has_bits)[5] |= 512u;
  }
  static void set_has_setting_validation_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_system_bluetooth_enabled(HasBits* has_bits) {
    (*has_bits)[5] |= 32u;
  }
};

const ::CMsgHotkey&
CMsgClientSettings::_Internal::overlay_key(const CMsgClientSettings* msg) {
  return *msg->overlay_key_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::screenshot_key(const CMsgClientSettings* msg) {
  return *msg->screenshot_key_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::voice_push_to_talkey(const CMsgClientSettings* msg) {
  return *msg->voice_push_to_talkey_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::g_background_mk(const CMsgClientSettings* msg) {
  return *msg->g_background_mk_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::g_background_tg(const CMsgClientSettings* msg) {
  return *msg->g_background_tg_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::gamerecording_hotkey_ic(const CMsgClientSettings* msg) {
  return *msg->gamerecording_hotkey_ic_;
}
CMsgClientSettings::CMsgClientSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientSettings)
}
CMsgClientSettings::CMsgClientSettings(const CMsgClientSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preferred_monitor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferred_monitor()) {
    preferred_monitor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_monitor(), 
      GetArena());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  screenshots_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_screenshots_path()) {
    screenshots_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_screenshots_path(), 
      GetArena());
  }
  web_browser_home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_web_browser_home()) {
    web_browser_home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_web_browser_home(), 
      GetArena());
  }
  voice_mic_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_voice_mic_device_name()) {
    voice_mic_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voice_mic_device_name(), 
      GetArena());
  }
  overlay_tabs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_overlay_tabs()) {
    overlay_tabs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_overlay_tabs(), 
      GetArena());
  }
  start_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_page()) {
    start_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_page(), 
      GetArena());
  }
  startup_movie_local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_startup_movie_local_path()) {
    startup_movie_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_startup_movie_local_path(), 
      GetArena());
  }
  g_background_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_g_background_path()) {
    g_background_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g_background_path(), 
      GetArena());
  }
  g_background_max_keep_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_g_background_max_keep()) {
    g_background_max_keep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g_background_max_keep(), 
      GetArena());
  }
  gamerecording_video_bitrate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamerecording_video_bitrate()) {
    gamerecording_video_bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamerecording_video_bitrate(), 
      GetArena());
  }
  gamerecording_export_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamerecording_export_directory()) {
    gamerecording_export_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamerecording_export_directory(), 
      GetArena());
  }
  gamescope_game_resolution_global_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamescope_game_resolution_global()) {
    gamescope_game_resolution_global_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamescope_game_resolution_global(), 
      GetArena());
  }
  setting_validation_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_setting_validation_string()) {
    setting_validation_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_setting_validation_string(), 
      GetArena());
  }
  if (from._internal_has_overlay_key()) {
    overlay_key_ = new ::CMsgHotkey(*from.overlay_key_);
  } else {
    overlay_key_ = nullptr;
  }
  if (from._internal_has_screenshot_key()) {
    screenshot_key_ = new ::CMsgHotkey(*from.screenshot_key_);
  } else {
    screenshot_key_ = nullptr;
  }
  if (from._internal_has_voice_push_to_talkey()) {
    voice_push_to_talkey_ = new ::CMsgHotkey(*from.voice_push_to_talkey_);
  } else {
    voice_push_to_talkey_ = nullptr;
  }
  if (from._internal_has_g_background_mk()) {
    g_background_mk_ = new ::CMsgHotkey(*from.g_background_mk_);
  } else {
    g_background_mk_ = nullptr;
  }
  if (from._internal_has_g_background_tg()) {
    g_background_tg_ = new ::CMsgHotkey(*from.g_background_tg_);
  } else {
    g_background_tg_ = nullptr;
  }
  if (from._internal_has_gamerecording_hotkey_ic()) {
    gamerecording_hotkey_ic_ = new ::CMsgHotkey(*from.gamerecording_hotkey_ic_);
  } else {
    gamerecording_hotkey_ic_ = nullptr;
  }
  ::memcpy(&no_save_personal_info_, &from.no_save_personal_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_notes_enable_spellcheck_) -
    reinterpret_cast<char*>(&no_save_personal_info_)) + sizeof(game_notes_enable_spellcheck_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSettings)
}

void CMsgClientSettings::SharedCtor() {
preferred_monitor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
screenshots_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
web_browser_home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
voice_mic_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
overlay_tabs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
startup_movie_local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
g_background_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
g_background_max_keep_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gamerecording_video_bitrate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gamerecording_export_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gamescope_game_resolution_global_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
setting_validation_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&overlay_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_notes_enable_spellcheck_) -
    reinterpret_cast<char*>(&overlay_key_)) + sizeof(game_notes_enable_spellcheck_));
}

CMsgClientSettings::~CMsgClientSettings() {
  // @@protoc_insertion_point(destructor:CMsgClientSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  preferred_monitor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshots_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  web_browser_home_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voice_mic_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overlay_tabs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startup_movie_local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_background_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_background_max_keep_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamerecording_video_bitrate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamerecording_export_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamescope_game_resolution_global_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  setting_validation_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overlay_key_;
  if (this != internal_default_instance()) delete screenshot_key_;
  if (this != internal_default_instance()) delete voice_push_to_talkey_;
  if (this != internal_default_instance()) delete g_background_mk_;
  if (this != internal_default_instance()) delete g_background_tg_;
  if (this != internal_default_instance()) delete gamerecording_hotkey_ic_;
}

void CMsgClientSettings::ArenaDtor(void* object) {
  CMsgClientSettings* _this = reinterpret_cast< CMsgClientSettings* >(object);
  (void)_this;
}
void CMsgClientSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      preferred_monitor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      screenshots_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      web_browser_home_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      voice_mic_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      overlay_tabs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      start_page_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      startup_movie_local_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      g_background_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      g_background_max_keep_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      gamerecording_video_bitrate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      gamerecording_export_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      gamescope_game_resolution_global_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      setting_validation_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(overlay_key_ != nullptr);
      overlay_key_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(screenshot_key_ != nullptr);
      screenshot_key_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(voice_push_to_talkey_ != nullptr);
      voice_push_to_talkey_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(g_background_mk_ != nullptr);
      g_background_mk_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(g_background_tg_ != nullptr);
      g_background_tg_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(gamerecording_hotkey_ic_ != nullptr);
      gamerecording_hotkey_ic_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&no_save_personal_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_steam_sideloaded_) -
        reinterpret_cast<char*>(&no_save_personal_info_)) + sizeof(is_steam_sideloaded_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&steam_cef_gpu_blocklist_disabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_scale_factor_) -
        reinterpret_cast<char*>(&steam_cef_gpu_blocklist_disabled_)) + sizeof(auto_scale_factor_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&small_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_overlay_) -
        reinterpret_cast<char*>(&small_mode_)) + sizeof(enable_overlay_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&overlay_fps_counter_corner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_networking_share_ip_) -
        reinterpret_cast<char*>(&overlay_fps_counter_corner_)) + sizeof(steam_networking_share_ip_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&voice_mic_input_gain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&smooth_scroll_webviews_) -
        reinterpret_cast<char*>(&voice_mic_input_gain_)) + sizeof(smooth_scroll_webviews_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&enable_gpu_accelerated_webviews_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jumplist_flags_) -
        reinterpret_cast<char*>(&enable_gpu_accelerated_webviews_)) + sizeof(jumplist_flags_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&disable_all_toasts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&library_low_perf_mode_) -
        reinterpret_cast<char*>(&disable_all_toasts_)) + sizeof(library_low_perf_mode_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&library_disable_community_content_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_steam_service_repair_) -
        reinterpret_cast<char*>(&library_disable_community_content_)) + sizeof(needs_steam_service_repair_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&download_rate_bits_per_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_while_app_running_) -
        reinterpret_cast<char*>(&download_rate_bits_per_s_)) + sizeof(download_while_app_running_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&download_throttle_while_streaming_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&music_playlist_notification_) -
        reinterpret_cast<char*>(&download_throttle_while_streaming_)) + sizeof(music_playlist_notification_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&broadcast_permissions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_record_microphone_) -
        reinterpret_cast<char*>(&broadcast_permissions_)) + sizeof(broadcast_record_microphone_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&broadcast_show_upload_stats_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_guide_button_focus_steam_) -
        reinterpret_cast<char*>(&broadcast_show_upload_stats_)) + sizeof(controller_guide_button_focus_steam_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&controller_xbox_support_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&g_background_mode_) -
        reinterpret_cast<char*>(&controller_xbox_support_)) + sizeof(g_background_mode_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&g_background_audio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamerecording_force_mic_mono_) -
        reinterpret_cast<char*>(&g_background_audio_)) + sizeof(gamerecording_force_mic_mono_));
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gamerecording_automatic_gain_control_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&override_browser_composer_mode_) -
        reinterpret_cast<char*>(&gamerecording_automatic_gain_control_)) + sizeof(override_browser_composer_mode_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&show_timestamps_in_console_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_advanced_update_channels_) -
        reinterpret_cast<char*>(&show_timestamps_in_console_)) + sizeof(show_advanced_update_channels_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&gamescope_hdr_visualization_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamescope_include_steamui_in_screenshots_) -
        reinterpret_cast<char*>(&gamescope_hdr_visualization_)) + sizeof(gamescope_include_steamui_in_screenshots_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&gamescope_allow_tearing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamos_cec_wake_on_resume_) -
        reinterpret_cast<char*>(&gamescope_allow_tearing_)) + sizeof(steamos_cec_wake_on_resume_));
  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamos_wifi_debug_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_validation_uint64_) -
        reinterpret_cast<char*>(&steamos_wifi_debug_)) + sizeof(setting_validation_uint64_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&setting_validation_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startup_movie_shuffle_) -
        reinterpret_cast<char*>(&setting_validation_uint32_)) + sizeof(startup_movie_shuffle_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&startup_movie_used_for_resume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_notes_enable_spellcheck_) -
        reinterpret_cast<char*>(&startup_movie_used_for_resume_)) + sizeof(game_notes_enable_spellcheck_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool no_save_personal_info = 1 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_no_save_personal_info(&_has_bits_);
          no_save_personal_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_oobe_test_mode_enabled(&_has_bits_);
          oobe_test_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_client_beta = 3 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_client_beta(&_has_bits_);
          in_client_beta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_sideloaded = 4 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_steam_sideloaded(&_has_bits_);
          is_steam_sideloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preferred_monitor = 5 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_preferred_monitor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.preferred_monitor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_steam_cef_gpu_blocklist_disabled(&_has_bits_);
          steam_cef_gpu_blocklist_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bigpicture_windowed = 7 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bigpicture_windowed(&_has_bits_);
          bigpicture_windowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 8 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_external_display = 9 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_external_display(&_has_bits_);
          is_external_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steam_os_underscan_level = 10 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_steam_os_underscan_level(&_has_bits_);
          steam_os_underscan_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_steam_os_underscan_enabled(&_has_bits_);
          steam_os_underscan_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_scale_factor = 12 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_min_scale_factor(&_has_bits_);
          min_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_scale_factor = 13 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_max_scale_factor(&_has_bits_);
          max_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float auto_scale_factor = 14 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_auto_scale_factor(&_has_bits_);
          auto_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool small_mode = 16 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_small_mode(&_has_bits_);
          small_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_skip_steamvr_install_dialog(&_has_bits_);
          skip_steamvr_install_dialog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_show_user_chooser = 20 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_always_show_user_chooser(&_has_bits_);
          always_show_user_chooser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool os_version_unsupported = 21 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OSVersionUnsupported"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_os_version_unsupported(&_has_bits_);
          os_version_unsupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 3000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_show_family_sharing_notifications(&_has_bits_);
          show_family_sharing_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_copy_count_in_library = 3001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowCopyCountInLibrary", (.setting_default_bool) = true];
      case 3001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_show_copy_count_in_library(&_has_bits_);
          show_copy_count_in_library_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
      case 4000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_overlay_fps_counter_corner(&_has_bits_);
          overlay_fps_counter_corner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
      case 4001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_overlay_fps_counter_high_contrast(&_has_bits_);
          overlay_fps_counter_high_contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
      case 4002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
      case 4003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_overlay = 4004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay", (.setting_default_bool) = true];
      case 4004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_overlay(&_has_bits_);
          enable_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_screenshot_notification = 4006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification", (.setting_default_bool) = true];
      case 4006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_screenshot_notification(&_has_bits_);
          enable_screenshot_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_screenshot_sound = 4007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];
      case 4007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enable_screenshot_sound(&_has_bits_);
          enable_screenshot_sound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
      case 4008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_save_uncompressed_screenshots(&_has_bits_);
          save_uncompressed_screenshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string screenshots_path = 4009 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_screenshots_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.screenshots_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 default_ping_rate = 4010 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
      case 4010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_default_ping_rate(&_has_bits_);
          default_ping_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 server_ping_rate = 4011 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_server_ping_rate(&_has_bits_);
          server_ping_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_steam_networking_share_ip(&_has_bits_);
          steam_networking_share_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string web_browser_home = 4013 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4013:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_web_browser_home();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.web_browser_home");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string voice_mic_device_name = 4014 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_voice_mic_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.voice_mic_device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float voice_mic_input_gain = 4015 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_voice_mic_input_gain(&_has_bits_);
          voice_mic_input_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float voice_speaker_output_gain = 4016 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4016:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_voice_speaker_output_gain(&_has_bits_);
          voice_speaker_output_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 voice_push_to_talsetting = 4017 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4017:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_voice_push_to_talsetting(&_has_bits_);
          voice_push_to_talsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgHotkey voice_push_to_talkey = 4018 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 4018:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice_push_to_talkey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
      case 4019:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_overlay_toolbar_list_view(&_has_bits_);
          overlay_toolbar_list_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
      case 4020:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_always_use_gamepadui_overlay(&_has_bits_);
          always_use_gamepadui_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string overlay_tabs = 4021 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
      case 4021:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_overlay_tabs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.overlay_tabs");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool overlay_scale_interface = 4022 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
      case 4022:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_overlay_scale_interface(&_has_bits_);
          overlay_scale_interface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];
      case 4023:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_overlay_restore_browser_tabs(&_has_bits_);
          overlay_restore_browser_tabs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_avif_screenshots = 4024 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotEnableAVIF"];
      case 4024:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_enable_avif_screenshots(&_has_bits_);
          enable_avif_screenshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 5000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_smooth_scroll_webviews(&_has_bits_);
          smooth_scroll_webviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 5001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enable_gpu_accelerated_webviews(&_has_bits_);
          enable_gpu_accelerated_webviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 5003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_enable_hardware_video_decoding(&_has_bits_);
          enable_hardware_video_decoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool run_at_startup = 5004 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 5004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_run_at_startup(&_has_bits_);
          run_at_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_dpi_scaling = 5005 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 5005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_enable_dpi_scaling(&_has_bits_);
          enable_dpi_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_marketing_messages = 5006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
      case 5006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enable_marketing_messages(&_has_bits_);
          enable_marketing_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 5007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_start_in_big_picture_mode(&_has_bits_);
          start_in_big_picture_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jumplist_flags = 5008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
      case 5008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_jumplist_flags(&_has_bits_);
          jumplist_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_ui_sounds = 5009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
      case 5009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_enable_ui_sounds(&_has_bits_);
          enable_ui_sounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_all_toasts = 6000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
      case 6000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_disable_all_toasts(&_has_bits_);
          disable_all_toasts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_toasts_in_game = 6001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
      case 6001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_disable_toasts_in_game(&_has_bits_);
          disable_toasts_in_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool play_sound_on_toast = 6002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
      case 6002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_play_sound_on_toast(&_has_bits_);
          play_sound_on_toast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 library_display_size = 7000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
      case 7000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_library_display_size(&_has_bits_);
          library_display_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
      case 7001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_library_whats_new_show_only_product_updates(&_has_bits_);
          library_whats_new_show_only_product_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_store_content_on_home = 7002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
      case 7002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_show_store_content_on_home(&_has_bits_);
          show_store_content_on_home_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_page = 7003 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 7003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_start_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.start_page");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
      case 7004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_library_low_bandwidth_mode(&_has_bits_);
          library_low_bandwidth_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool library_low_perf_mode = 7005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
      case 7005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_library_low_perf_mode(&_has_bits_);
          library_low_perf_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool library_disable_community_content = 7006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
      case 7006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_library_disable_community_content(&_has_bits_);
          library_disable_community_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
      case 7007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_library_display_icon_in_game_list(&_has_bits_);
          library_display_icon_in_game_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
      case 7008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ready_to_play_includes_streaming(&_has_bits_);
          ready_to_play_includes_streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_steam_decinfo = 7009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
      case 7009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_steam_decinfo(&_has_bits_);
          show_steam_decinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_shader_precache = 8000 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_enable_shader_precache(&_has_bits_);
          enable_shader_precache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_shader_background_processing = 8001 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_shader_background_processing(&_has_bits_);
          enable_shader_background_processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 shader_precached_size = 8002 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
      case 8002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shader_precached_size(&_has_bits_);
          shader_precached_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_steam_service_repair = 8003 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
      case 8003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_needs_steam_service_repair(&_has_bits_);
          needs_steam_service_repair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 download_peer_content = 8004 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_download_peer_content(&_has_bits_);
          download_peer_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_download_rate_bits_per_s(&_has_bits_);
          download_rate_bits_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool restrict_auto_updates = 8006 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_restrict_auto_updates(&_has_bits_);
          restrict_auto_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_restrict_auto_updates_start(&_has_bits_);
          restrict_auto_updates_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_restrict_auto_updates_end(&_has_bits_);
          restrict_auto_updates_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 download_region = 8009 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_download_region(&_has_bits_);
          download_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool download_while_app_running = 8010 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_download_while_app_running(&_has_bits_);
          download_while_app_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_download_throttle_while_streaming(&_has_bits_);
          download_throttle_while_streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 download_throttle_rate = 8012 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 8012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_download_throttle_rate(&_has_bits_);
          download_throttle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cloud_enabled = 10000 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 10000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_cloud_enabled(&_has_bits_);
          cloud_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_screenshot_manager = 10001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
      case 10001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_show_screenshot_manager(&_has_bits_);
          show_screenshot_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 music_volume = 11000 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 11000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_music_volume(&_has_bits_);
          music_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool music_pause_on_app_start = 11001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
      case 11001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_music_pause_on_app_start(&_has_bits_);
          music_pause_on_app_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
      case 11002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_music_pause_on_voice_chat(&_has_bits_);
          music_pause_on_voice_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool music_download_high_quality = 11003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
      case 11003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_music_download_high_quality(&_has_bits_);
          music_download_high_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool music_playlist_notification = 11004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
      case 11004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_music_playlist_notification(&_has_bits_);
          music_playlist_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EBroadcastPermission broadcast_permissions = 12000 [default = EBroadcastPermissionDisabled, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
      case 12000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastPermission_IsValid(val))) {
            _internal_set_broadcast_permissions(static_cast<::EBroadcastPermission>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12000, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 broadcast_output_width = 12001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
      case 12001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_broadcast_output_width(&_has_bits_);
          broadcast_output_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 broadcast_output_height = 12002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight", (.setting_default_int) = 720];
      case 12002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_broadcast_output_height(&_has_bits_);
          broadcast_output_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 broadcast_bitrate = 12003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps", (.setting_default_int) = 2500];
      case 12003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_broadcast_bitrate(&_has_bits_);
          broadcast_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = EBroadcastEncoderBestQuality, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
      case 12004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastEncoderSetting_IsValid(val))) {
            _internal_set_broadcast_encoding_option(static_cast<::EBroadcastEncoderSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12004, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool broadcast_record_all_video = 12005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
      case 12005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_broadcast_record_all_video(&_has_bits_);
          broadcast_record_all_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
      case 12006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_broadcast_record_all_audio(&_has_bits_);
          broadcast_record_all_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast_record_microphone = 12007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
      case 12007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_broadcast_record_microphone(&_has_bits_);
          broadcast_record_microphone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
      case 12008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_broadcast_show_upload_stats(&_has_bits_);
          broadcast_show_upload_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
      case 12009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_broadcast_show_live_reminder(&_has_bits_);
          broadcast_show_live_reminder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
      case 12010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_broadcast_chat_corner(&_has_bits_);
          broadcast_chat_corner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamestream_hardware_video_encode = 13000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\HardwareVideoEncode", (.setting_default_bool) = true];
      case 13000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gamestream_hardware_video_encode(&_has_bits_);
          gamestream_hardware_video_encode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamestream_enable_video_h265 = 13001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\EnableVideoH265", (.setting_default_bool) = true];
      case 13001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_gamestream_enable_video_h265(&_has_bits_);
          gamestream_enable_video_h265_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
      case 14001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_steam_input_configurator_error_msg_enable(&_has_bits_);
          steam_input_configurator_error_msg_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton", (.setting_default_bool) = true];
      case 14002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_controller_guide_button_focus_steam(&_has_bits_);
          controller_guide_button_focus_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 controller_ps_support = 14003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];
      case 14003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_controller_ps_support(&_has_bits_);
          controller_ps_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_xbox_support = 14004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
      case 14004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_controller_xbox_support(&_has_bits_);
          controller_xbox_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_xbox_driver = 14005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
      case 14005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_controller_xbox_driver(&_has_bits_);
          controller_xbox_driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_switch_support = 14006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
      case 14006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_controller_switch_support(&_has_bits_);
          controller_switch_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_generic_support = 14007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
      case 14007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_controller_generic_support(&_has_bits_);
          controller_generic_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
      case 14008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_controller_power_off_timeout(&_has_bits_);
          controller_power_off_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
      case 14009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_turn_off_controller_on_exit(&_has_bits_);
          turn_off_controller_on_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 14010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_controller_combine_nintendo_joycons(&_has_bits_);
          controller_combine_nintendo_joycons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 startup_movie_id = 16000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
      case 16000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_startup_movie_id(&_has_bits_);
          startup_movie_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string startup_movie_local_path = 16001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
      case 16001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_startup_movie_local_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.startup_movie_local_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool startup_movie_shuffle = 16002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
      case 16002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_startup_movie_shuffle(&_has_bits_);
          startup_movie_shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
      case 16003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_startup_movie_used_for_resume(&_has_bits_);
          startup_movie_used_for_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
      case 17001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_game_notes_enable_spellcheck(&_has_bits_);
          game_notes_enable_spellcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
      case 18000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_screenshot_items_per_row(&_has_bits_);
          screenshot_items_per_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string g_background_path = 18201 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 18201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_g_background_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.g_background_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string g_background_max_keep = 18202 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_default_string) = "120min"];
      case 18202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_g_background_max_keep();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.g_background_max_keep");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 g_background_time_resolution = 18203 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 18203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_g_background_time_resolution(&_has_bits_);
          g_background_time_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 18207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_background_mk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 18208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_background_tg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool g_background_a_m = 18209 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 18209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_g_background_a_m(&_has_bits_);
          g_background_a_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamerecording_video_bitrate = 18210 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoBitRate", (.setting_default_string) = "preset_default"];
      case 18210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gamerecording_video_bitrate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.gamerecording_video_bitrate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool g_background_a_s = 18211 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 18211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_g_background_a_s(&_has_bits_);
          g_background_a_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGRMode g_background_mode = 18212 [default = EGRMode_Never, (.setting_store) = EClientSettingStore_CustomFunc];
      case 18212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGRMode_IsValid(val))) {
            _internal_set_g_background_mode(static_cast<::EGRMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18212, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .EGRAudio g_background_audio = 18213 [default = EGRAudio_Game, (.setting_store) = EClientSettingStore_CustomFunc];
      case 18213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGRAudio_IsValid(val))) {
            _internal_set_g_background_audio(static_cast<::EGRAudio>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18213, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 g_max_fps = 18214 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\MaxFPS", (.setting_default_int) = 60, (.setting_clamp_min) = 24, (.setting_clamp_max) = 120];
      case 18214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_g_max_fps(&_has_bits_);
          g_max_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgHotkey gamerecording_hotkey_ic = 18215 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipKey", (.setting_default_string) = "None"];
      case 18215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamerecording_hotkey_ic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gamerecording_ic_seconds = 18216 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipDuration", (.setting_default_float) = 10];
      case 18216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_gamerecording_ic_seconds(&_has_bits_);
          gamerecording_ic_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .EGRExportLimitType gamerecording_export_limit_type = 18217 [default = EGRExportLimitType_Native, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitType"];
      case 18217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGRExportLimitType_IsValid(val))) {
            _internal_set_gamerecording_export_limit_type(static_cast<::EGRExportLimitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18217, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 gamerecording_export_limit_size_mb = 18218 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitSize", (.setting_default_int) = 100];
      case 18218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gamerecording_export_limit_size_mb(&_has_bits_);
          gamerecording_export_limit_size_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gamerecording_export_limit_bitrate = 18219 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitBitrate", (.setting_default_int) = 1];
      case 18219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_gamerecording_export_limit_bitrate(&_has_bits_);
          gamerecording_export_limit_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gamerecording_export_limit_width = 18220 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitWidth", (.setting_default_int) = 3840];
      case 18220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gamerecording_export_limit_width(&_has_bits_);
          gamerecording_export_limit_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gamerecording_export_limit_height = 18221 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitHeight", (.setting_default_int) = 2160];
      case 18221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gamerecording_export_limit_height(&_has_bits_);
          gamerecording_export_limit_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gamerecording_export_limit_frame_rate = 18222 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitFrameRate", (.setting_default_int) = 60];
      case 18222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_gamerecording_export_limit_frame_rate(&_has_bits_);
          gamerecording_export_limit_frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamerecording_export_directory = 18223 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "GameRecording\\ExportDirectory"];
      case 18223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_gamerecording_export_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.gamerecording_export_directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EExportCodec gamerecording_export_codec = 18224 [default = EExportCodec_Default, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportCodec"];
      case 18224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EExportCodec_IsValid(val))) {
            _internal_set_gamerecording_export_codec(static_cast<::EExportCodec>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18224, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 gamerecording_video_maxheight = 18225 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoMaxHeight", (.setting_default_int) = 0, (.setting_clamp_min) = 0, (.setting_clamp_max) = 2160];
      case 18225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_gamerecording_video_maxheight(&_has_bits_);
          gamerecording_video_maxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamerecording_force_mic_mono = 18226 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ForceMicMono", (.setting_default_bool) = false];
      case 18226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_gamerecording_force_mic_mono(&_has_bits_);
          gamerecording_force_mic_mono_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamerecording_automatic_gain_control = 18227 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\AutomaticGainControl", (.setting_default_bool) = true];
      case 18227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_gamerecording_automatic_gain_control(&_has_bits_);
          gamerecording_automatic_gain_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_timestamps_in_console = 20000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
      case 20000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_show_timestamps_in_console(&_has_bits_);
          show_timestamps_in_console_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_oobe = 20001 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\ForceOOBE"];
      case 20001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_force_oobe(&_has_bits_);
          force_oobe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 override_browser_composer_mode = 20002 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 20002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_override_browser_composer_mode(&_has_bits_);
          override_browser_composer_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = EClientSettingStore_CustomFunc];
      case 20003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cef_remote_debugging_enabled(&_has_bits_);
          cef_remote_debugging_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_decperf_tab = 20004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];
      case 20004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_force_decperf_tab(&_has_bits_);
          force_decperf_tab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_fake_mandatory_update = 20005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];
      case 20005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_force_fake_mandatory_update(&_has_bits_);
          force_fake_mandatory_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hdr_compat_testing = 20006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/HDRCompatTesting"];
      case 20006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hdr_compat_testing(&_has_bits_);
          hdr_compat_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool developer_mode_enabled = 20007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/DevModeEnabled"];
      case 20007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_developer_mode_enabled(&_has_bits_);
          developer_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_advanced_update_channels = 20008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ShowAdvancedUpdateChannels"];
      case 20008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_show_advanced_update_channels(&_has_bits_);
          show_advanced_update_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];
      case 21001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHDRVisualization_IsValid(val))) {
            _internal_set_gamescope_hdr_visualization(static_cast<::EHDRVisualization>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21001, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
      case 21002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gamescope_app_target_framerate(&_has_bits_);
          gamescope_app_target_framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];
      case 21003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_gamescope_enable_app_target_framerate(&_has_bits_);
          gamescope_enable_app_target_framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
      case 21004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gamescope_disable_framelimit(&_has_bits_);
          gamescope_disable_framelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
      case 21005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gamescope_display_refresh_rate(&_has_bits_);
          gamescope_display_refresh_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];
      case 21006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_gamescope_use_game_refresh_rate_in_steam(&_has_bits_);
          gamescope_use_game_refresh_rate_in_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_disable_mura_correction = 21007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/MuraCorrectionDisabled", (.setting_default_bool) = false];
      case 21007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_gamescope_disable_mura_correction(&_has_bits_);
          gamescope_disable_mura_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_include_steamui_in_screenshots = 21008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/IncludeSteamUIInScreenshots", (.setting_default_bool) = true];
      case 21008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_gamescope_include_steamui_in_screenshots(&_has_bits_);
          gamescope_include_steamui_in_screenshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_allow_tearing = 21009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AllowTearing", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
      case 21009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_gamescope_allow_tearing(&_has_bits_);
          gamescope_allow_tearing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_composite_debug = 21010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/CompositeDebug", (.setting_default_bool) = false];
      case 21010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_gamescope_composite_debug(&_has_bits_);
          gamescope_composite_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gamescope_force_composite = 21011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/ForceComposite", (.setting_default_bool) = false];
      case 21011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_gamescope_force_composite(&_has_bits_);
          gamescope_force_composite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamescope_game_resolution_global = 21012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GameResolutionGlobal", (.setting_default_string) = "Default"];
      case 21012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_gamescope_game_resolution_global();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.gamescope_game_resolution_global");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];
      case 22000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_steamos_status_led_brightness(&_has_bits_);
          steamos_status_led_brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamos_tdp_limit_enabled = 22001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimitEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
      case 22001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_steamos_tdp_limit_enabled(&_has_bits_);
          steamos_tdp_limit_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 steamos_tdp_limit = 22002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimit", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGame];
      case 22002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_steamos_tdp_limit(&_has_bits_);
          steamos_tdp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamos_cec_enabled = 22003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/CECEnabled", (.setting_default_bool) = true];
      case 22003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_steamos_cec_enabled(&_has_bits_);
          steamos_cec_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamos_cec_wake_on_resume = 22004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WakeOnResume", (.setting_default_bool) = true];
      case 22004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_steamos_cec_wake_on_resume(&_has_bits_);
          steamos_cec_wake_on_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamos_wifi_debug = 22005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiDebug", (.setting_default_bool) = false];
      case 22005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_steamos_wifi_debug(&_has_bits_);
          steamos_wifi_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamos_wifi_force_wpa_supplicant = 22006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiForceWPASupplicant", (.setting_default_bool) = false];
      case 22006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_steamos_wifi_force_wpa_supplicant(&_has_bits_);
          steamos_wifi_force_wpa_supplicant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 steamos_magnifier_scale = 22007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/MagnifierScale", (.setting_default_int) = 150];
      case 22007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_steamos_magnifier_scale(&_has_bits_);
          steamos_magnifier_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool setting_validation_bool = 23001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyBool"];
      case 23001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_setting_validation_bool(&_has_bits_);
          setting_validation_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EHDRVisualization setting_validation_enum = 23002 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyEnum"];
      case 23002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHDRVisualization_IsValid(val))) {
            _internal_set_setting_validation_enum(static_cast<::EHDRVisualization>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23002, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 setting_validation_int32 = 23003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyInt32"];
      case 23003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_setting_validation_int32(&_has_bits_);
          setting_validation_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 setting_validation_uint32 = 23004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt32"];
      case 23004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_setting_validation_uint32(&_has_bits_);
          setting_validation_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 setting_validation_uint64 = 23005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt64"];
      case 23005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_setting_validation_uint64(&_has_bits_);
          setting_validation_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float setting_validation_float = 23006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyFloat"];
      case 23006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_setting_validation_float(&_has_bits_);
          setting_validation_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string setting_validation_string = 23007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyString"];
      case 23007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_setting_validation_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.setting_validation_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool system_bluetooth_enabled = 24000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/Bluetooth/Enabled", (.setting_default_bool) = false];
      case 24000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_system_bluetooth_enabled(&_has_bits_);
          system_bluetooth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_enable_chord = 140011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Enable_Chord", (.setting_default_bool) = true];
      case 140011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_controller_enable_chord(&_has_bits_);
          controller_enable_chord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool controller_poll_rate = 140012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Poll_Rate", (.setting_default_int) = 2];
      case 140012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_controller_poll_rate(&_has_bits_);
          controller_poll_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool no_save_personal_info = 1 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_no_save_personal_info(), target);
  }

  // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_oobe_test_mode_enabled(), target);
  }

  // optional bool in_client_beta = 3 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_in_client_beta(), target);
  }

  // optional bool is_steam_sideloaded = 4 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_steam_sideloaded(), target);
  }

  // optional string preferred_monitor = 5 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_monitor().data(), static_cast<int>(this->_internal_preferred_monitor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.preferred_monitor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_preferred_monitor(), target);
  }

  // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_steam_cef_gpu_blocklist_disabled(), target);
  }

  // optional bool bigpicture_windowed = 7 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bigpicture_windowed(), target);
  }

  // optional string display_name = 8 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.display_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_display_name(), target);
  }

  // optional bool is_external_display = 9 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_external_display(), target);
  }

  // optional float steam_os_underscan_level = 10 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_steam_os_underscan_level(), target);
  }

  // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_steam_os_underscan_enabled(), target);
  }

  // optional float min_scale_factor = 12 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_min_scale_factor(), target);
  }

  // optional float max_scale_factor = 13 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_max_scale_factor(), target);
  }

  // optional float auto_scale_factor = 14 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_auto_scale_factor(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool small_mode = 16 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_small_mode(), target);
  }

  // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_skip_steamvr_install_dialog(), target);
  }

  // optional bool always_show_user_chooser = 20 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_always_show_user_chooser(), target);
  }

  // optional bool os_version_unsupported = 21 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OSVersionUnsupported"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_os_version_unsupported(), target);
  }

  // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3000, this->_internal_show_family_sharing_notifications(), target);
  }

  // optional bool show_copy_count_in_library = 3001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowCopyCountInLibrary", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3001, this->_internal_show_copy_count_in_library(), target);
  }

  // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4000, this->_internal_overlay_fps_counter_corner(), target);
  }

  // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4001, this->_internal_overlay_fps_counter_high_contrast(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4002, _Internal::overlay_key(this), target, stream);
  }

  // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4003, _Internal::screenshot_key(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool enable_overlay = 4004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4004, this->_internal_enable_overlay(), target);
  }

  // optional bool enable_screenshot_notification = 4006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4006, this->_internal_enable_screenshot_notification(), target);
  }

  // optional bool enable_screenshot_sound = 4007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4007, this->_internal_enable_screenshot_sound(), target);
  }

  // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4008, this->_internal_save_uncompressed_screenshots(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string screenshots_path = 4009 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_screenshots_path().data(), static_cast<int>(this->_internal_screenshots_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.screenshots_path");
    target = stream->WriteStringMaybeAliased(
        4009, this->_internal_screenshots_path(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 default_ping_rate = 4010 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4010, this->_internal_default_ping_rate(), target);
  }

  // optional int32 server_ping_rate = 4011 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4011, this->_internal_server_ping_rate(), target);
  }

  // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4012, this->_internal_steam_networking_share_ip(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_browser_home = 4013 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_web_browser_home().data(), static_cast<int>(this->_internal_web_browser_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.web_browser_home");
    target = stream->WriteStringMaybeAliased(
        4013, this->_internal_web_browser_home(), target);
  }

  // optional string voice_mic_device_name = 4014 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_voice_mic_device_name().data(), static_cast<int>(this->_internal_voice_mic_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.voice_mic_device_name");
    target = stream->WriteStringMaybeAliased(
        4014, this->_internal_voice_mic_device_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float voice_mic_input_gain = 4015 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4015, this->_internal_voice_mic_input_gain(), target);
  }

  // optional float voice_speaker_output_gain = 4016 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4016, this->_internal_voice_speaker_output_gain(), target);
  }

  // optional int32 voice_push_to_talsetting = 4017 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4017, this->_internal_voice_push_to_talsetting(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgHotkey voice_push_to_talkey = 4018 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4018, _Internal::voice_push_to_talkey(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4019, this->_internal_overlay_toolbar_list_view(), target);
  }

  // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4020, this->_internal_always_use_gamepadui_overlay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string overlay_tabs = 4021 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_overlay_tabs().data(), static_cast<int>(this->_internal_overlay_tabs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.overlay_tabs");
    target = stream->WriteStringMaybeAliased(
        4021, this->_internal_overlay_tabs(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool overlay_scale_interface = 4022 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4022, this->_internal_overlay_scale_interface(), target);
  }

  // optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4023, this->_internal_overlay_restore_browser_tabs(), target);
  }

  // optional bool enable_avif_screenshots = 4024 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotEnableAVIF"];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4024, this->_internal_enable_avif_screenshots(), target);
  }

  // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5000, this->_internal_smooth_scroll_webviews(), target);
  }

  // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5001, this->_internal_enable_gpu_accelerated_webviews(), target);
  }

  // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5003, this->_internal_enable_hardware_video_decoding(), target);
  }

  // optional bool run_at_startup = 5004 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5004, this->_internal_run_at_startup(), target);
  }

  // optional bool enable_dpi_scaling = 5005 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5005, this->_internal_enable_dpi_scaling(), target);
  }

  // optional bool enable_marketing_messages = 5006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5006, this->_internal_enable_marketing_messages(), target);
  }

  // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5007, this->_internal_start_in_big_picture_mode(), target);
  }

  // optional uint32 jumplist_flags = 5008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5008, this->_internal_jumplist_flags(), target);
  }

  // optional bool enable_ui_sounds = 5009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5009, this->_internal_enable_ui_sounds(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool disable_all_toasts = 6000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6000, this->_internal_disable_all_toasts(), target);
  }

  // optional bool disable_toasts_in_game = 6001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6001, this->_internal_disable_toasts_in_game(), target);
  }

  // optional bool play_sound_on_toast = 6002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6002, this->_internal_play_sound_on_toast(), target);
  }

  // optional int32 library_display_size = 7000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7000, this->_internal_library_display_size(), target);
  }

  // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7001, this->_internal_library_whats_new_show_only_product_updates(), target);
  }

  // optional bool show_store_content_on_home = 7002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7002, this->_internal_show_store_content_on_home(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string start_page = 7003 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_page().data(), static_cast<int>(this->_internal_start_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.start_page");
    target = stream->WriteStringMaybeAliased(
        7003, this->_internal_start_page(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7004, this->_internal_library_low_bandwidth_mode(), target);
  }

  // optional bool library_low_perf_mode = 7005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7005, this->_internal_library_low_perf_mode(), target);
  }

  // optional bool library_disable_community_content = 7006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7006, this->_internal_library_disable_community_content(), target);
  }

  // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7007, this->_internal_library_display_icon_in_game_list(), target);
  }

  // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7008, this->_internal_ready_to_play_includes_streaming(), target);
  }

  // optional bool show_steam_decinfo = 7009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7009, this->_internal_show_steam_decinfo(), target);
  }

  // optional bool enable_shader_precache = 8000 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8000, this->_internal_enable_shader_precache(), target);
  }

  // optional bool enable_shader_background_processing = 8001 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8001, this->_internal_enable_shader_background_processing(), target);
  }

  // optional uint64 shader_precached_size = 8002 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8002, this->_internal_shader_precached_size(), target);
  }

  // optional bool needs_steam_service_repair = 8003 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8003, this->_internal_needs_steam_service_repair(), target);
  }

  // optional int32 download_peer_content = 8004 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8004, this->_internal_download_peer_content(), target);
  }

  // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8005, this->_internal_download_rate_bits_per_s(), target);
  }

  // optional bool restrict_auto_updates = 8006 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8006, this->_internal_restrict_auto_updates(), target);
  }

  // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8007, this->_internal_restrict_auto_updates_start(), target);
  }

  // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8008, this->_internal_restrict_auto_updates_end(), target);
  }

  // optional int32 download_region = 8009 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8009, this->_internal_download_region(), target);
  }

  // optional bool download_while_app_running = 8010 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8010, this->_internal_download_while_app_running(), target);
  }

  // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8011, this->_internal_download_throttle_while_streaming(), target);
  }

  // optional int32 download_throttle_rate = 8012 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8012, this->_internal_download_throttle_rate(), target);
  }

  // optional bool cloud_enabled = 10000 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10000, this->_internal_cloud_enabled(), target);
  }

  // optional bool show_screenshot_manager = 10001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10001, this->_internal_show_screenshot_manager(), target);
  }

  // optional int32 music_volume = 11000 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11000, this->_internal_music_volume(), target);
  }

  // optional bool music_pause_on_app_start = 11001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11001, this->_internal_music_pause_on_app_start(), target);
  }

  // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11002, this->_internal_music_pause_on_voice_chat(), target);
  }

  // optional bool music_download_high_quality = 11003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11003, this->_internal_music_download_high_quality(), target);
  }

  // optional bool music_playlist_notification = 11004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11004, this->_internal_music_playlist_notification(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional .EBroadcastPermission broadcast_permissions = 12000 [default = EBroadcastPermissionDisabled, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12000, this->_internal_broadcast_permissions(), target);
  }

  // optional int32 broadcast_output_width = 12001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12001, this->_internal_broadcast_output_width(), target);
  }

  // optional int32 broadcast_output_height = 12002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight", (.setting_default_int) = 720];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12002, this->_internal_broadcast_output_height(), target);
  }

  // optional int32 broadcast_bitrate = 12003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps", (.setting_default_int) = 2500];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12003, this->_internal_broadcast_bitrate(), target);
  }

  // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = EBroadcastEncoderBestQuality, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12004, this->_internal_broadcast_encoding_option(), target);
  }

  // optional bool broadcast_record_all_video = 12005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12005, this->_internal_broadcast_record_all_video(), target);
  }

  // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12006, this->_internal_broadcast_record_all_audio(), target);
  }

  // optional bool broadcast_record_microphone = 12007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12007, this->_internal_broadcast_record_microphone(), target);
  }

  // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12008, this->_internal_broadcast_show_upload_stats(), target);
  }

  // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12009, this->_internal_broadcast_show_live_reminder(), target);
  }

  // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12010, this->_internal_broadcast_chat_corner(), target);
  }

  // optional bool gamestream_hardware_video_encode = 13000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\HardwareVideoEncode", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13000, this->_internal_gamestream_hardware_video_encode(), target);
  }

  // optional bool gamestream_enable_video_h265 = 13001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\EnableVideoH265", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13001, this->_internal_gamestream_enable_video_h265(), target);
  }

  // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14001, this->_internal_steam_input_configurator_error_msg_enable(), target);
  }

  // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14002, this->_internal_controller_guide_button_focus_steam(), target);
  }

  // optional int32 controller_ps_support = 14003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14003, this->_internal_controller_ps_support(), target);
  }

  // optional bool controller_xbox_support = 14004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14004, this->_internal_controller_xbox_support(), target);
  }

  // optional bool controller_xbox_driver = 14005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14005, this->_internal_controller_xbox_driver(), target);
  }

  // optional bool controller_switch_support = 14006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14006, this->_internal_controller_switch_support(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool controller_generic_support = 14007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14007, this->_internal_controller_generic_support(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14008, this->_internal_controller_power_off_timeout(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14009, this->_internal_turn_off_controller_on_exit(), target);
  }

  // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14010, this->_internal_controller_combine_nintendo_joycons(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional uint64 startup_movie_id = 16000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16000, this->_internal_startup_movie_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string startup_movie_local_path = 16001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_startup_movie_local_path().data(), static_cast<int>(this->_internal_startup_movie_local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.startup_movie_local_path");
    target = stream->WriteStringMaybeAliased(
        16001, this->_internal_startup_movie_local_path(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool startup_movie_shuffle = 16002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16002, this->_internal_startup_movie_shuffle(), target);
  }

  // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16003, this->_internal_startup_movie_used_for_resume(), target);
  }

  // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17001, this->_internal_game_notes_enable_spellcheck(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18000, this->_internal_screenshot_items_per_row(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string g_background_path = 18201 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_background_path().data(), static_cast<int>(this->_internal_g_background_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.g_background_path");
    target = stream->WriteStringMaybeAliased(
        18201, this->_internal_g_background_path(), target);
  }

  // optional string g_background_max_keep = 18202 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_default_string) = "120min"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_background_max_keep().data(), static_cast<int>(this->_internal_g_background_max_keep().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.g_background_max_keep");
    target = stream->WriteStringMaybeAliased(
        18202, this->_internal_g_background_max_keep(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 g_background_time_resolution = 18203 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18203, this->_internal_g_background_time_resolution(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18207, _Internal::g_background_mk(this), target, stream);
  }

  // optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18208, _Internal::g_background_tg(this), target, stream);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool g_background_a_m = 18209 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18209, this->_internal_g_background_a_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string gamerecording_video_bitrate = 18210 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoBitRate", (.setting_default_string) = "preset_default"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamerecording_video_bitrate().data(), static_cast<int>(this->_internal_gamerecording_video_bitrate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.gamerecording_video_bitrate");
    target = stream->WriteStringMaybeAliased(
        18210, this->_internal_gamerecording_video_bitrate(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool g_background_a_s = 18211 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18211, this->_internal_g_background_a_s(), target);
  }

  // optional .EGRMode g_background_mode = 18212 [default = EGRMode_Never, (.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18212, this->_internal_g_background_mode(), target);
  }

  // optional .EGRAudio g_background_audio = 18213 [default = EGRAudio_Game, (.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18213, this->_internal_g_background_audio(), target);
  }

  // optional int32 g_max_fps = 18214 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\MaxFPS", (.setting_default_int) = 60, (.setting_clamp_min) = 24, (.setting_clamp_max) = 120];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18214, this->_internal_g_max_fps(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgHotkey gamerecording_hotkey_ic = 18215 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipKey", (.setting_default_string) = "None"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18215, _Internal::gamerecording_hotkey_ic(this), target, stream);
  }

  cached_has_bits = _has_bits_[3];
  // optional float gamerecording_ic_seconds = 18216 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipDuration", (.setting_default_float) = 10];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18216, this->_internal_gamerecording_ic_seconds(), target);
  }

  // optional .EGRExportLimitType gamerecording_export_limit_type = 18217 [default = EGRExportLimitType_Native, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitType"];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18217, this->_internal_gamerecording_export_limit_type(), target);
  }

  // optional int32 gamerecording_export_limit_size_mb = 18218 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitSize", (.setting_default_int) = 100];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18218, this->_internal_gamerecording_export_limit_size_mb(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional int32 gamerecording_export_limit_bitrate = 18219 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitBitrate", (.setting_default_int) = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18219, this->_internal_gamerecording_export_limit_bitrate(), target);
  }

  // optional int32 gamerecording_export_limit_width = 18220 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitWidth", (.setting_default_int) = 3840];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18220, this->_internal_gamerecording_export_limit_width(), target);
  }

  // optional int32 gamerecording_export_limit_height = 18221 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitHeight", (.setting_default_int) = 2160];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18221, this->_internal_gamerecording_export_limit_height(), target);
  }

  // optional int32 gamerecording_export_limit_frame_rate = 18222 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitFrameRate", (.setting_default_int) = 60];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18222, this->_internal_gamerecording_export_limit_frame_rate(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string gamerecording_export_directory = 18223 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "GameRecording\\ExportDirectory"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamerecording_export_directory().data(), static_cast<int>(this->_internal_gamerecording_export_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.gamerecording_export_directory");
    target = stream->WriteStringMaybeAliased(
        18223, this->_internal_gamerecording_export_directory(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional .EExportCodec gamerecording_export_codec = 18224 [default = EExportCodec_Default, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportCodec"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18224, this->_internal_gamerecording_export_codec(), target);
  }

  // optional int32 gamerecording_video_maxheight = 18225 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoMaxHeight", (.setting_default_int) = 0, (.setting_clamp_min) = 0, (.setting_clamp_max) = 2160];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18225, this->_internal_gamerecording_video_maxheight(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool gamerecording_force_mic_mono = 18226 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ForceMicMono", (.setting_default_bool) = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18226, this->_internal_gamerecording_force_mic_mono(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool gamerecording_automatic_gain_control = 18227 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\AutomaticGainControl", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18227, this->_internal_gamerecording_automatic_gain_control(), target);
  }

  // optional bool show_timestamps_in_console = 20000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20000, this->_internal_show_timestamps_in_console(), target);
  }

  // optional bool force_oobe = 20001 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\ForceOOBE"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20001, this->_internal_force_oobe(), target);
  }

  // optional int32 override_browser_composer_mode = 20002 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20002, this->_internal_override_browser_composer_mode(), target);
  }

  // optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20003, this->_internal_cef_remote_debugging_enabled(), target);
  }

  // optional bool force_decperf_tab = 20004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20004, this->_internal_force_decperf_tab(), target);
  }

  // optional bool force_fake_mandatory_update = 20005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20005, this->_internal_force_fake_mandatory_update(), target);
  }

  // optional bool hdr_compat_testing = 20006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/HDRCompatTesting"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20006, this->_internal_hdr_compat_testing(), target);
  }

  // optional bool developer_mode_enabled = 20007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/DevModeEnabled"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20007, this->_internal_developer_mode_enabled(), target);
  }

  // optional bool show_advanced_update_channels = 20008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ShowAdvancedUpdateChannels"];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20008, this->_internal_show_advanced_update_channels(), target);
  }

  // optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21001, this->_internal_gamescope_hdr_visualization(), target);
  }

  // optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21002, this->_internal_gamescope_app_target_framerate(), target);
  }

  // optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21003, this->_internal_gamescope_enable_app_target_framerate(), target);
  }

  // optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21004, this->_internal_gamescope_disable_framelimit(), target);
  }

  // optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21005, this->_internal_gamescope_display_refresh_rate(), target);
  }

  // optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21006, this->_internal_gamescope_use_game_refresh_rate_in_steam(), target);
  }

  // optional bool gamescope_disable_mura_correction = 21007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/MuraCorrectionDisabled", (.setting_default_bool) = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21007, this->_internal_gamescope_disable_mura_correction(), target);
  }

  // optional bool gamescope_include_steamui_in_screenshots = 21008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/IncludeSteamUIInScreenshots", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21008, this->_internal_gamescope_include_steamui_in_screenshots(), target);
  }

  // optional bool gamescope_allow_tearing = 21009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AllowTearing", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21009, this->_internal_gamescope_allow_tearing(), target);
  }

  // optional bool gamescope_composite_debug = 21010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/CompositeDebug", (.setting_default_bool) = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21010, this->_internal_gamescope_composite_debug(), target);
  }

  // optional bool gamescope_force_composite = 21011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/ForceComposite", (.setting_default_bool) = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21011, this->_internal_gamescope_force_composite(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string gamescope_game_resolution_global = 21012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GameResolutionGlobal", (.setting_default_string) = "Default"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamescope_game_resolution_global().data(), static_cast<int>(this->_internal_gamescope_game_resolution_global().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.gamescope_game_resolution_global");
    target = stream->WriteStringMaybeAliased(
        21012, this->_internal_gamescope_game_resolution_global(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22000, this->_internal_steamos_status_led_brightness(), target);
  }

  // optional bool steamos_tdp_limit_enabled = 22001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimitEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22001, this->_internal_steamos_tdp_limit_enabled(), target);
  }

  // optional int32 steamos_tdp_limit = 22002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimit", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22002, this->_internal_steamos_tdp_limit(), target);
  }

  // optional bool steamos_cec_enabled = 22003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/CECEnabled", (.setting_default_bool) = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22003, this->_internal_steamos_cec_enabled(), target);
  }

  // optional bool steamos_cec_wake_on_resume = 22004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WakeOnResume", (.setting_default_bool) = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22004, this->_internal_steamos_cec_wake_on_resume(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool steamos_wifi_debug = 22005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiDebug", (.setting_default_bool) = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22005, this->_internal_steamos_wifi_debug(), target);
  }

  // optional bool steamos_wifi_force_wpa_supplicant = 22006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiForceWPASupplicant", (.setting_default_bool) = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22006, this->_internal_steamos_wifi_force_wpa_supplicant(), target);
  }

  // optional int32 steamos_magnifier_scale = 22007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/MagnifierScale", (.setting_default_int) = 150];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22007, this->_internal_steamos_magnifier_scale(), target);
  }

  // optional bool setting_validation_bool = 23001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyBool"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23001, this->_internal_setting_validation_bool(), target);
  }

  // optional .EHDRVisualization setting_validation_enum = 23002 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyEnum"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23002, this->_internal_setting_validation_enum(), target);
  }

  // optional int32 setting_validation_int32 = 23003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyInt32"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23003, this->_internal_setting_validation_int32(), target);
  }

  // optional uint32 setting_validation_uint32 = 23004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt32"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23004, this->_internal_setting_validation_uint32(), target);
  }

  // optional uint64 setting_validation_uint64 = 23005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt64"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23005, this->_internal_setting_validation_uint64(), target);
  }

  // optional float setting_validation_float = 23006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyFloat"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23006, this->_internal_setting_validation_float(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string setting_validation_string = 23007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyString"];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_setting_validation_string().data(), static_cast<int>(this->_internal_setting_validation_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.setting_validation_string");
    target = stream->WriteStringMaybeAliased(
        23007, this->_internal_setting_validation_string(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool system_bluetooth_enabled = 24000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/Bluetooth/Enabled", (.setting_default_bool) = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24000, this->_internal_system_bluetooth_enabled(), target);
  }

  // optional bool controller_enable_chord = 140011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Enable_Chord", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(140011, this->_internal_controller_enable_chord(), target);
  }

  // optional bool controller_poll_rate = 140012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Poll_Rate", (.setting_default_int) = 2];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(140012, this->_internal_controller_poll_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSettings)
  return target;
}

size_t CMsgClientSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string preferred_monitor = 5 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_monitor());
    }

    // optional string display_name = 8 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string screenshots_path = 4009 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_screenshots_path());
    }

    // optional string web_browser_home = 4013 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_web_browser_home());
    }

    // optional string voice_mic_device_name = 4014 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_voice_mic_device_name());
    }

    // optional string overlay_tabs = 4021 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_overlay_tabs());
    }

    // optional string start_page = 7003 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_page());
    }

    // optional string startup_movie_local_path = 16001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_startup_movie_local_path());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string g_background_path = 18201 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_background_path());
    }

    // optional string g_background_max_keep = 18202 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_default_string) = "120min"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_background_max_keep());
    }

    // optional string gamerecording_video_bitrate = 18210 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoBitRate", (.setting_default_string) = "preset_default"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamerecording_video_bitrate());
    }

    // optional string gamerecording_export_directory = 18223 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "GameRecording\\ExportDirectory"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamerecording_export_directory());
    }

    // optional string gamescope_game_resolution_global = 21012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GameResolutionGlobal", (.setting_default_string) = "Default"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamescope_game_resolution_global());
    }

    // optional string setting_validation_string = 23007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyString"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_setting_validation_string());
    }

    // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlay_key_);
    }

    // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screenshot_key_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .CMsgHotkey voice_push_to_talkey = 4018 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_push_to_talkey_);
    }

    // optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *g_background_mk_);
    }

    // optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *g_background_tg_);
    }

    // optional .CMsgHotkey gamerecording_hotkey_ic = 18215 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipKey", (.setting_default_string) = "None"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamerecording_hotkey_ic_);
    }

    // optional bool no_save_personal_info = 1 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool in_client_beta = 3 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool is_steam_sideloaded = 4 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool bigpicture_windowed = 7 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool is_external_display = 9 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 1;
    }

    // optional float steam_os_underscan_level = 10 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 4;
    }

    // optional float min_scale_factor = 12 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional float max_scale_factor = 13 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 4;
    }

    // optional float auto_scale_factor = 14 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool small_mode = 16 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool always_show_user_chooser = 20 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool os_version_unsupported = 21 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OSVersionUnsupported"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool show_copy_count_in_library = 3001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowCopyCountInLibrary", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional bool enable_overlay = 4004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overlay_fps_counter_corner());
    }

    // optional int32 default_ping_rate = 4010 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_default_ping_rate());
    }

    // optional bool enable_screenshot_notification = 4006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool enable_screenshot_sound = 4007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional int32 server_ping_rate = 4011 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_server_ping_rate());
    }

    // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_steam_networking_share_ip());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float voice_mic_input_gain = 4015 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float voice_speaker_output_gain = 4016 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional int32 voice_push_to_talsetting = 4017 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_voice_push_to_talsetting());
    }

    // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_scale_interface = 4022 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_avif_screenshots = 4024 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotEnableAVIF"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool run_at_startup = 5004 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_dpi_scaling = 5005 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_marketing_messages = 5006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 1;
    }

    // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_ui_sounds = 5009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional uint32 jumplist_flags = 5008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jumplist_flags());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool disable_all_toasts = 6000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional bool disable_toasts_in_game = 6001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool play_sound_on_toast = 6002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional int32 library_display_size = 7000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_library_display_size());
    }

    // optional bool show_store_content_on_home = 7002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional bool library_low_perf_mode = 7005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool library_disable_community_content = 7006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool show_steam_decinfo = 7009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool enable_shader_precache = 8000 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional uint64 shader_precached_size = 8002 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shader_precached_size());
    }

    // optional bool enable_shader_background_processing = 8001 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool needs_steam_service_repair = 8003 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional bool restrict_auto_updates = 8006 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional int32 download_peer_content = 8004 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_peer_content());
    }

    // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_restrict_auto_updates_start());
    }

    // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_restrict_auto_updates_end());
    }

    // optional int32 download_region = 8009 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_region());
    }

    // optional int32 download_throttle_rate = 8012 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_throttle_rate());
    }

    // optional bool download_while_app_running = 8010 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool cloud_enabled = 10000 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool show_screenshot_manager = 10001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional int32 music_volume = 11000 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_music_volume());
    }

    // optional bool music_pause_on_app_start = 11001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 1;
    }

    // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool music_download_high_quality = 11003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool music_playlist_notification = 11004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional .EBroadcastPermission broadcast_permissions = 12000 [default = EBroadcastPermissionDisabled, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_permissions());
    }

    // optional int32 broadcast_output_width = 12001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_output_width());
    }

    // optional int32 broadcast_output_height = 12002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight", (.setting_default_int) = 720];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_output_height());
    }

    // optional int32 broadcast_bitrate = 12003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps", (.setting_default_int) = 2500];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_bitrate());
    }

    // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = EBroadcastEncoderBestQuality, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_encoding_option());
    }

    // optional bool broadcast_record_all_video = 12005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional bool broadcast_record_microphone = 12007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_chat_corner());
    }

    // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool gamestream_hardware_video_encode = 13000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\HardwareVideoEncode", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool gamestream_enable_video_h265 = 13001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\EnableVideoH265", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional int32 controller_ps_support = 14003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_controller_ps_support());
    }

    // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool controller_xbox_support = 14004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional bool controller_xbox_driver = 14005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional bool controller_switch_support = 14006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_controller_power_off_timeout());
    }

    // optional uint64 startup_movie_id = 16000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_startup_movie_id());
    }

    // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_screenshot_items_per_row());
    }

    // optional int32 g_background_time_resolution = 18203 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_g_background_time_resolution());
    }

    // optional .EGRMode g_background_mode = 18212 [default = EGRMode_Never, (.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_g_background_mode());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .EGRAudio g_background_audio = 18213 [default = EGRAudio_Game, (.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_g_background_audio());
    }

    // optional int32 g_max_fps = 18214 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\MaxFPS", (.setting_default_int) = 60, (.setting_clamp_min) = 24, (.setting_clamp_max) = 120];
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_g_max_fps());
    }

    // optional float gamerecording_ic_seconds = 18216 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipDuration", (.setting_default_float) = 10];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional .EGRExportLimitType gamerecording_export_limit_type = 18217 [default = EGRExportLimitType_Native, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitType"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamerecording_export_limit_type());
    }

    // optional int32 gamerecording_export_limit_size_mb = 18218 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitSize", (.setting_default_int) = 100];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamerecording_export_limit_size_mb());
    }

    // optional bool g_background_a_m = 18209 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool g_background_a_s = 18211 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool gamerecording_force_mic_mono = 18226 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ForceMicMono", (.setting_default_bool) = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool gamerecording_automatic_gain_control = 18227 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\AutomaticGainControl", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional int32 gamerecording_export_limit_bitrate = 18219 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitBitrate", (.setting_default_int) = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamerecording_export_limit_bitrate());
    }

    // optional int32 gamerecording_export_limit_width = 18220 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitWidth", (.setting_default_int) = 3840];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamerecording_export_limit_width());
    }

    // optional int32 gamerecording_export_limit_height = 18221 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitHeight", (.setting_default_int) = 2160];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamerecording_export_limit_height());
    }

    // optional int32 gamerecording_export_limit_frame_rate = 18222 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitFrameRate", (.setting_default_int) = 60];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamerecording_export_limit_frame_rate());
    }

    // optional .EExportCodec gamerecording_export_codec = 18224 [default = EExportCodec_Default, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportCodec"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamerecording_export_codec());
    }

    // optional int32 gamerecording_video_maxheight = 18225 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoMaxHeight", (.setting_default_int) = 0, (.setting_clamp_min) = 0, (.setting_clamp_max) = 2160];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamerecording_video_maxheight());
    }

    // optional int32 override_browser_composer_mode = 20002 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_override_browser_composer_mode());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool show_timestamps_in_console = 20000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional bool force_oobe = 20001 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\ForceOOBE"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool force_decperf_tab = 20004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool force_fake_mandatory_update = 20005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool hdr_compat_testing = 20006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/HDRCompatTesting"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional bool developer_mode_enabled = 20007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/DevModeEnabled"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool show_advanced_update_channels = 20008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ShowAdvancedUpdateChannels"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamescope_hdr_visualization());
    }

    // optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamescope_app_target_framerate());
    }

    // optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gamescope_display_refresh_rate());
    }

    // optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional bool gamescope_disable_mura_correction = 21007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/MuraCorrectionDisabled", (.setting_default_bool) = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool gamescope_include_steamui_in_screenshots = 21008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/IncludeSteamUIInScreenshots", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool gamescope_allow_tearing = 21009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AllowTearing", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool gamescope_composite_debug = 21010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/CompositeDebug", (.setting_default_bool) = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool gamescope_force_composite = 21011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/ForceComposite", (.setting_default_bool) = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_steamos_status_led_brightness());
    }

    // optional int32 steamos_tdp_limit = 22002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimit", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGame];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_steamos_tdp_limit());
    }

    // optional bool steamos_tdp_limit_enabled = 22001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimitEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool steamos_cec_enabled = 22003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/CECEnabled", (.setting_default_bool) = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool steamos_cec_wake_on_resume = 22004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WakeOnResume", (.setting_default_bool) = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool steamos_wifi_debug = 22005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiDebug", (.setting_default_bool) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional int32 steamos_magnifier_scale = 22007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/MagnifierScale", (.setting_default_int) = 150];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_steamos_magnifier_scale());
    }

    // optional .EHDRVisualization setting_validation_enum = 23002 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyEnum"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_setting_validation_enum());
    }

    // optional bool steamos_wifi_force_wpa_supplicant = 22006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiForceWPASupplicant", (.setting_default_bool) = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool setting_validation_bool = 23001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyBool"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool system_bluetooth_enabled = 24000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/Bluetooth/Enabled", (.setting_default_bool) = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional int32 setting_validation_int32 = 23003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyInt32"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_setting_validation_int32());
    }

    // optional uint64 setting_validation_uint64 = 23005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt64"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_setting_validation_uint64());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 setting_validation_uint32 = 23004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt32"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_setting_validation_uint32());
    }

    // optional float setting_validation_float = 23006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyFloat"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional bool controller_generic_support = 14007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool controller_enable_chord = 140011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Enable_Chord", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional bool controller_poll_rate = 140012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Poll_Rate", (.setting_default_int) = 2];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool startup_movie_shuffle = 16002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSettings)
    MergeFrom(*source);
  }
}

void CMsgClientSettings::MergeFrom(const CMsgClientSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preferred_monitor(from._internal_preferred_monitor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_screenshots_path(from._internal_screenshots_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_web_browser_home(from._internal_web_browser_home());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_voice_mic_device_name(from._internal_voice_mic_device_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_overlay_tabs(from._internal_overlay_tabs());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_start_page(from._internal_start_page());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_startup_movie_local_path(from._internal_startup_movie_local_path());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_g_background_path(from._internal_g_background_path());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_g_background_max_keep(from._internal_g_background_max_keep());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_gamerecording_video_bitrate(from._internal_gamerecording_video_bitrate());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_gamerecording_export_directory(from._internal_gamerecording_export_directory());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_gamescope_game_resolution_global(from._internal_gamescope_game_resolution_global());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_setting_validation_string(from._internal_setting_validation_string());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_overlay_key()->::CMsgHotkey::MergeFrom(from._internal_overlay_key());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_screenshot_key()->::CMsgHotkey::MergeFrom(from._internal_screenshot_key());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_voice_push_to_talkey()->::CMsgHotkey::MergeFrom(from._internal_voice_push_to_talkey());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_g_background_mk()->::CMsgHotkey::MergeFrom(from._internal_g_background_mk());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_g_background_tg()->::CMsgHotkey::MergeFrom(from._internal_g_background_tg());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_gamerecording_hotkey_ic()->::CMsgHotkey::MergeFrom(from._internal_gamerecording_hotkey_ic());
    }
    if (cached_has_bits & 0x00100000u) {
      no_save_personal_info_ = from.no_save_personal_info_;
    }
    if (cached_has_bits & 0x00200000u) {
      oobe_test_mode_enabled_ = from.oobe_test_mode_enabled_;
    }
    if (cached_has_bits & 0x00400000u) {
      in_client_beta_ = from.in_client_beta_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_steam_sideloaded_ = from.is_steam_sideloaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      steam_cef_gpu_blocklist_disabled_ = from.steam_cef_gpu_blocklist_disabled_;
    }
    if (cached_has_bits & 0x02000000u) {
      bigpicture_windowed_ = from.bigpicture_windowed_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_external_display_ = from.is_external_display_;
    }
    if (cached_has_bits & 0x08000000u) {
      steam_os_underscan_enabled_ = from.steam_os_underscan_enabled_;
    }
    if (cached_has_bits & 0x10000000u) {
      steam_os_underscan_level_ = from.steam_os_underscan_level_;
    }
    if (cached_has_bits & 0x20000000u) {
      min_scale_factor_ = from.min_scale_factor_;
    }
    if (cached_has_bits & 0x40000000u) {
      max_scale_factor_ = from.max_scale_factor_;
    }
    if (cached_has_bits & 0x80000000u) {
      auto_scale_factor_ = from.auto_scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      small_mode_ = from.small_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      skip_steamvr_install_dialog_ = from.skip_steamvr_install_dialog_;
    }
    if (cached_has_bits & 0x00000004u) {
      always_show_user_chooser_ = from.always_show_user_chooser_;
    }
    if (cached_has_bits & 0x00000008u) {
      os_version_unsupported_ = from.os_version_unsupported_;
    }
    if (cached_has_bits & 0x00000010u) {
      show_family_sharing_notifications_ = from.show_family_sharing_notifications_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_copy_count_in_library_ = from.show_copy_count_in_library_;
    }
    if (cached_has_bits & 0x00000040u) {
      overlay_fps_counter_high_contrast_ = from.overlay_fps_counter_high_contrast_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_overlay_ = from.enable_overlay_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      overlay_fps_counter_corner_ = from.overlay_fps_counter_corner_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_ping_rate_ = from.default_ping_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_screenshot_notification_ = from.enable_screenshot_notification_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_screenshot_sound_ = from.enable_screenshot_sound_;
    }
    if (cached_has_bits & 0x00001000u) {
      save_uncompressed_screenshots_ = from.save_uncompressed_screenshots_;
    }
    if (cached_has_bits & 0x00002000u) {
      overlay_toolbar_list_view_ = from.overlay_toolbar_list_view_;
    }
    if (cached_has_bits & 0x00004000u) {
      server_ping_rate_ = from.server_ping_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      steam_networking_share_ip_ = from.steam_networking_share_ip_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      voice_mic_input_gain_ = from.voice_mic_input_gain_;
    }
    if (cached_has_bits & 0x00020000u) {
      voice_speaker_output_gain_ = from.voice_speaker_output_gain_;
    }
    if (cached_has_bits & 0x00040000u) {
      voice_push_to_talsetting_ = from.voice_push_to_talsetting_;
    }
    if (cached_has_bits & 0x00080000u) {
      always_use_gamepadui_overlay_ = from.always_use_gamepadui_overlay_;
    }
    if (cached_has_bits & 0x00100000u) {
      overlay_scale_interface_ = from.overlay_scale_interface_;
    }
    if (cached_has_bits & 0x00200000u) {
      overlay_restore_browser_tabs_ = from.overlay_restore_browser_tabs_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_avif_screenshots_ = from.enable_avif_screenshots_;
    }
    if (cached_has_bits & 0x00800000u) {
      smooth_scroll_webviews_ = from.smooth_scroll_webviews_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      enable_gpu_accelerated_webviews_ = from.enable_gpu_accelerated_webviews_;
    }
    if (cached_has_bits & 0x02000000u) {
      enable_hardware_video_decoding_ = from.enable_hardware_video_decoding_;
    }
    if (cached_has_bits & 0x04000000u) {
      run_at_startup_ = from.run_at_startup_;
    }
    if (cached_has_bits & 0x08000000u) {
      enable_dpi_scaling_ = from.enable_dpi_scaling_;
    }
    if (cached_has_bits & 0x10000000u) {
      enable_marketing_messages_ = from.enable_marketing_messages_;
    }
    if (cached_has_bits & 0x20000000u) {
      start_in_big_picture_mode_ = from.start_in_big_picture_mode_;
    }
    if (cached_has_bits & 0x40000000u) {
      enable_ui_sounds_ = from.enable_ui_sounds_;
    }
    if (cached_has_bits & 0x80000000u) {
      jumplist_flags_ = from.jumplist_flags_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      disable_all_toasts_ = from.disable_all_toasts_;
    }
    if (cached_has_bits & 0x00000002u) {
      disable_toasts_in_game_ = from.disable_toasts_in_game_;
    }
    if (cached_has_bits & 0x00000004u) {
      play_sound_on_toast_ = from.play_sound_on_toast_;
    }
    if (cached_has_bits & 0x00000008u) {
      library_whats_new_show_only_product_updates_ = from.library_whats_new_show_only_product_updates_;
    }
    if (cached_has_bits & 0x00000010u) {
      library_display_size_ = from.library_display_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_store_content_on_home_ = from.show_store_content_on_home_;
    }
    if (cached_has_bits & 0x00000040u) {
      library_low_bandwidth_mode_ = from.library_low_bandwidth_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      library_low_perf_mode_ = from.library_low_perf_mode_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      library_disable_community_content_ = from.library_disable_community_content_;
    }
    if (cached_has_bits & 0x00000200u) {
      library_display_icon_in_game_list_ = from.library_display_icon_in_game_list_;
    }
    if (cached_has_bits & 0x00000400u) {
      ready_to_play_includes_streaming_ = from.ready_to_play_includes_streaming_;
    }
    if (cached_has_bits & 0x00000800u) {
      show_steam_decinfo_ = from.show_steam_decinfo_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_shader_precache_ = from.enable_shader_precache_;
    }
    if (cached_has_bits & 0x00002000u) {
      shader_precached_size_ = from.shader_precached_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      enable_shader_background_processing_ = from.enable_shader_background_processing_;
    }
    if (cached_has_bits & 0x00008000u) {
      needs_steam_service_repair_ = from.needs_steam_service_repair_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      download_rate_bits_per_s_ = from.download_rate_bits_per_s_;
    }
    if (cached_has_bits & 0x00020000u) {
      restrict_auto_updates_ = from.restrict_auto_updates_;
    }
    if (cached_has_bits & 0x00040000u) {
      download_peer_content_ = from.download_peer_content_;
    }
    if (cached_has_bits & 0x00080000u) {
      restrict_auto_updates_start_ = from.restrict_auto_updates_start_;
    }
    if (cached_has_bits & 0x00100000u) {
      restrict_auto_updates_end_ = from.restrict_auto_updates_end_;
    }
    if (cached_has_bits & 0x00200000u) {
      download_region_ = from.download_region_;
    }
    if (cached_has_bits & 0x00400000u) {
      download_throttle_rate_ = from.download_throttle_rate_;
    }
    if (cached_has_bits & 0x00800000u) {
      download_while_app_running_ = from.download_while_app_running_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      download_throttle_while_streaming_ = from.download_throttle_while_streaming_;
    }
    if (cached_has_bits & 0x02000000u) {
      cloud_enabled_ = from.cloud_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      show_screenshot_manager_ = from.show_screenshot_manager_;
    }
    if (cached_has_bits & 0x08000000u) {
      music_volume_ = from.music_volume_;
    }
    if (cached_has_bits & 0x10000000u) {
      music_pause_on_app_start_ = from.music_pause_on_app_start_;
    }
    if (cached_has_bits & 0x20000000u) {
      music_pause_on_voice_chat_ = from.music_pause_on_voice_chat_;
    }
    if (cached_has_bits & 0x40000000u) {
      music_download_high_quality_ = from.music_download_high_quality_;
    }
    if (cached_has_bits & 0x80000000u) {
      music_playlist_notification_ = from.music_playlist_notification_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_permissions_ = from.broadcast_permissions_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_output_width_ = from.broadcast_output_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_output_height_ = from.broadcast_output_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_bitrate_ = from.broadcast_bitrate_;
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_encoding_option_ = from.broadcast_encoding_option_;
    }
    if (cached_has_bits & 0x00000020u) {
      broadcast_record_all_video_ = from.broadcast_record_all_video_;
    }
    if (cached_has_bits & 0x00000040u) {
      broadcast_record_all_audio_ = from.broadcast_record_all_audio_;
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_record_microphone_ = from.broadcast_record_microphone_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      broadcast_show_upload_stats_ = from.broadcast_show_upload_stats_;
    }
    if (cached_has_bits & 0x00000200u) {
      broadcast_chat_corner_ = from.broadcast_chat_corner_;
    }
    if (cached_has_bits & 0x00000400u) {
      broadcast_show_live_reminder_ = from.broadcast_show_live_reminder_;
    }
    if (cached_has_bits & 0x00000800u) {
      gamestream_hardware_video_encode_ = from.gamestream_hardware_video_encode_;
    }
    if (cached_has_bits & 0x00001000u) {
      gamestream_enable_video_h265_ = from.gamestream_enable_video_h265_;
    }
    if (cached_has_bits & 0x00002000u) {
      steam_input_configurator_error_msg_enable_ = from.steam_input_configurator_error_msg_enable_;
    }
    if (cached_has_bits & 0x00004000u) {
      controller_ps_support_ = from.controller_ps_support_;
    }
    if (cached_has_bits & 0x00008000u) {
      controller_guide_button_focus_steam_ = from.controller_guide_button_focus_steam_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      controller_xbox_support_ = from.controller_xbox_support_;
    }
    if (cached_has_bits & 0x00020000u) {
      controller_xbox_driver_ = from.controller_xbox_driver_;
    }
    if (cached_has_bits & 0x00040000u) {
      controller_switch_support_ = from.controller_switch_support_;
    }
    if (cached_has_bits & 0x00080000u) {
      controller_power_off_timeout_ = from.controller_power_off_timeout_;
    }
    if (cached_has_bits & 0x00100000u) {
      startup_movie_id_ = from.startup_movie_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      screenshot_items_per_row_ = from.screenshot_items_per_row_;
    }
    if (cached_has_bits & 0x00400000u) {
      g_background_time_resolution_ = from.g_background_time_resolution_;
    }
    if (cached_has_bits & 0x00800000u) {
      g_background_mode_ = from.g_background_mode_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      g_background_audio_ = from.g_background_audio_;
    }
    if (cached_has_bits & 0x02000000u) {
      g_max_fps_ = from.g_max_fps_;
    }
    if (cached_has_bits & 0x04000000u) {
      gamerecording_ic_seconds_ = from.gamerecording_ic_seconds_;
    }
    if (cached_has_bits & 0x08000000u) {
      gamerecording_export_limit_type_ = from.gamerecording_export_limit_type_;
    }
    if (cached_has_bits & 0x10000000u) {
      gamerecording_export_limit_size_mb_ = from.gamerecording_export_limit_size_mb_;
    }
    if (cached_has_bits & 0x20000000u) {
      g_background_a_m_ = from.g_background_a_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      g_background_a_s_ = from.g_background_a_s_;
    }
    if (cached_has_bits & 0x80000000u) {
      gamerecording_force_mic_mono_ = from.gamerecording_force_mic_mono_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gamerecording_automatic_gain_control_ = from.gamerecording_automatic_gain_control_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamerecording_export_limit_bitrate_ = from.gamerecording_export_limit_bitrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamerecording_export_limit_width_ = from.gamerecording_export_limit_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      gamerecording_export_limit_height_ = from.gamerecording_export_limit_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      gamerecording_export_limit_frame_rate_ = from.gamerecording_export_limit_frame_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      gamerecording_export_codec_ = from.gamerecording_export_codec_;
    }
    if (cached_has_bits & 0x00000040u) {
      gamerecording_video_maxheight_ = from.gamerecording_video_maxheight_;
    }
    if (cached_has_bits & 0x00000080u) {
      override_browser_composer_mode_ = from.override_browser_composer_mode_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      show_timestamps_in_console_ = from.show_timestamps_in_console_;
    }
    if (cached_has_bits & 0x00000200u) {
      force_oobe_ = from.force_oobe_;
    }
    if (cached_has_bits & 0x00000400u) {
      cef_remote_debugging_enabled_ = from.cef_remote_debugging_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      force_decperf_tab_ = from.force_decperf_tab_;
    }
    if (cached_has_bits & 0x00001000u) {
      force_fake_mandatory_update_ = from.force_fake_mandatory_update_;
    }
    if (cached_has_bits & 0x00002000u) {
      hdr_compat_testing_ = from.hdr_compat_testing_;
    }
    if (cached_has_bits & 0x00004000u) {
      developer_mode_enabled_ = from.developer_mode_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      show_advanced_update_channels_ = from.show_advanced_update_channels_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      gamescope_hdr_visualization_ = from.gamescope_hdr_visualization_;
    }
    if (cached_has_bits & 0x00020000u) {
      gamescope_app_target_framerate_ = from.gamescope_app_target_framerate_;
    }
    if (cached_has_bits & 0x00040000u) {
      gamescope_display_refresh_rate_ = from.gamescope_display_refresh_rate_;
    }
    if (cached_has_bits & 0x00080000u) {
      gamescope_enable_app_target_framerate_ = from.gamescope_enable_app_target_framerate_;
    }
    if (cached_has_bits & 0x00100000u) {
      gamescope_disable_framelimit_ = from.gamescope_disable_framelimit_;
    }
    if (cached_has_bits & 0x00200000u) {
      gamescope_use_game_refresh_rate_in_steam_ = from.gamescope_use_game_refresh_rate_in_steam_;
    }
    if (cached_has_bits & 0x00400000u) {
      gamescope_disable_mura_correction_ = from.gamescope_disable_mura_correction_;
    }
    if (cached_has_bits & 0x00800000u) {
      gamescope_include_steamui_in_screenshots_ = from.gamescope_include_steamui_in_screenshots_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      gamescope_allow_tearing_ = from.gamescope_allow_tearing_;
    }
    if (cached_has_bits & 0x02000000u) {
      gamescope_composite_debug_ = from.gamescope_composite_debug_;
    }
    if (cached_has_bits & 0x04000000u) {
      gamescope_force_composite_ = from.gamescope_force_composite_;
    }
    if (cached_has_bits & 0x08000000u) {
      steamos_status_led_brightness_ = from.steamos_status_led_brightness_;
    }
    if (cached_has_bits & 0x10000000u) {
      steamos_tdp_limit_ = from.steamos_tdp_limit_;
    }
    if (cached_has_bits & 0x20000000u) {
      steamos_tdp_limit_enabled_ = from.steamos_tdp_limit_enabled_;
    }
    if (cached_has_bits & 0x40000000u) {
      steamos_cec_enabled_ = from.steamos_cec_enabled_;
    }
    if (cached_has_bits & 0x80000000u) {
      steamos_cec_wake_on_resume_ = from.steamos_cec_wake_on_resume_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamos_wifi_debug_ = from.steamos_wifi_debug_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamos_magnifier_scale_ = from.steamos_magnifier_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      setting_validation_enum_ = from.setting_validation_enum_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamos_wifi_force_wpa_supplicant_ = from.steamos_wifi_force_wpa_supplicant_;
    }
    if (cached_has_bits & 0x00000010u) {
      setting_validation_bool_ = from.setting_validation_bool_;
    }
    if (cached_has_bits & 0x00000020u) {
      system_bluetooth_enabled_ = from.system_bluetooth_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      setting_validation_int32_ = from.setting_validation_int32_;
    }
    if (cached_has_bits & 0x00000080u) {
      setting_validation_uint64_ = from.setting_validation_uint64_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      setting_validation_uint32_ = from.setting_validation_uint32_;
    }
    if (cached_has_bits & 0x00000200u) {
      setting_validation_float_ = from.setting_validation_float_;
    }
    if (cached_has_bits & 0x00000400u) {
      controller_generic_support_ = from.controller_generic_support_;
    }
    if (cached_has_bits & 0x00000800u) {
      turn_off_controller_on_exit_ = from.turn_off_controller_on_exit_;
    }
    if (cached_has_bits & 0x00001000u) {
      controller_combine_nintendo_joycons_ = from.controller_combine_nintendo_joycons_;
    }
    if (cached_has_bits & 0x00002000u) {
      controller_enable_chord_ = from.controller_enable_chord_;
    }
    if (cached_has_bits & 0x00004000u) {
      controller_poll_rate_ = from.controller_poll_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      startup_movie_shuffle_ = from.startup_movie_shuffle_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      startup_movie_used_for_resume_ = from.startup_movie_used_for_resume_;
    }
    if (cached_has_bits & 0x00020000u) {
      game_notes_enable_spellcheck_ = from.game_notes_enable_spellcheck_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
}

void CMsgClientSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSettings::CopyFrom(const CMsgClientSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSettings::IsInitialized() const {
  return true;
}

void CMsgClientSettings::InternalSwap(CMsgClientSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  swap(_has_bits_[5], other->_has_bits_[5]);
  preferred_monitor_.Swap(&other->preferred_monitor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  screenshots_path_.Swap(&other->screenshots_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  web_browser_home_.Swap(&other->web_browser_home_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  voice_mic_device_name_.Swap(&other->voice_mic_device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  overlay_tabs_.Swap(&other->overlay_tabs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_page_.Swap(&other->start_page_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  startup_movie_local_path_.Swap(&other->startup_movie_local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  g_background_path_.Swap(&other->g_background_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  g_background_max_keep_.Swap(&other->g_background_max_keep_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamerecording_video_bitrate_.Swap(&other->gamerecording_video_bitrate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamerecording_export_directory_.Swap(&other->gamerecording_export_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gamescope_game_resolution_global_.Swap(&other->gamescope_game_resolution_global_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  setting_validation_string_.Swap(&other->setting_validation_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSettings, game_notes_enable_spellcheck_)
      + sizeof(CMsgClientSettings::game_notes_enable_spellcheck_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSettings, overlay_key_)>(
          reinterpret_cast<char*>(&overlay_key_),
          reinterpret_cast<char*>(&other->overlay_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSettings::GetMetadata() const {
  return GetMetadataStatic();
}

PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::EClientSettingStore, ::EClientSettingStore_IsValid>, 14, false >
  setting_store(kSettingStoreFieldNumber, static_cast< ::EClientSettingStore >(0));
const std::string setting_name_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_name(kSettingNameFieldNumber, setting_name_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_pre_login(kSettingPreLoginFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_default_bool(kSettingDefaultBoolFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  setting_default_int(kSettingDefaultIntFieldNumber, 0);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  setting_default_uint(kSettingDefaultUintFieldNumber, 0u);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  setting_default_float(kSettingDefaultFloatFieldNumber, 0);
const std::string setting_default_string_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_default_string(kSettingDefaultStringFieldNumber, setting_default_string_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_readonly(kSettingReadonlyFieldNumber, false);
const std::string setting_description_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_description(kSettingDescriptionFieldNumber, setting_description_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::ESettingProfileMode, ::ESettingProfileMode_IsValid>, 14, false >
  setting_profile_mode(kSettingProfileModeFieldNumber, static_cast< ::ESettingProfileMode >(0));
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  setting_clamp_min(kSettingClampMinFieldNumber, PROTOBUF_LONGLONG(0));
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  setting_clamp_max(kSettingClampMaxFieldNumber, PROTOBUF_LONGLONG(0));

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgHotkey* Arena::CreateMaybeMessage< ::CMsgHotkey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHotkey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSettingVariant* Arena::CreateMaybeMessage< ::CMsgSettingVariant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSettingVariant >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSettings* Arena::CreateMaybeMessage< ::CMsgClientSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
