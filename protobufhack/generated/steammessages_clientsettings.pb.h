// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientsettings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientsettings_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fclientsettings_2eproto_metadata_getter(int index);
class CMsgClientSettings;
struct CMsgClientSettingsDefaultTypeInternal;
extern CMsgClientSettingsDefaultTypeInternal _CMsgClientSettings_default_instance_;
class CMsgHotkey;
struct CMsgHotkeyDefaultTypeInternal;
extern CMsgHotkeyDefaultTypeInternal _CMsgHotkey_default_instance_;
class CMsgSettingVariant;
struct CMsgSettingVariantDefaultTypeInternal;
extern CMsgSettingVariantDefaultTypeInternal _CMsgSettingVariant_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientSettings* Arena::CreateMaybeMessage<::CMsgClientSettings>(Arena*);
template<> ::CMsgHotkey* Arena::CreateMaybeMessage<::CMsgHotkey>(Arena*);
template<> ::CMsgSettingVariant* Arena::CreateMaybeMessage<::CMsgSettingVariant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EClientSettingStore : int {
  EClientSettingStore_Invalid = 0,
  EClientSettingStore_ConfigStore_Install = 1,
  EClientSettingStore_ConfigStore_UserRoaming = 2,
  EClientSettingStore_ConfigStore_UserLocal = 3,
  EClientSettingStore_Registry = 4,
  EClientSettingStore_CustomFunc = 5
};
bool EClientSettingStore_IsValid(int value);
constexpr EClientSettingStore EClientSettingStore_MIN = EClientSettingStore_Invalid;
constexpr EClientSettingStore EClientSettingStore_MAX = EClientSettingStore_CustomFunc;
constexpr int EClientSettingStore_ARRAYSIZE = EClientSettingStore_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientSettingStore_descriptor();
template<typename T>
inline const std::string& EClientSettingStore_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EClientSettingStore>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EClientSettingStore_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EClientSettingStore_descriptor(), enum_t_value);
}
inline bool EClientSettingStore_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EClientSettingStore* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EClientSettingStore>(
    EClientSettingStore_descriptor(), name, value);
}
enum EOverlayToggleBarLocation : int {
  EOverlayToggleBarLocation_Bottom = 0,
  EOverlayToggleBarLocation_Left = 1,
  EOverlayToggleBarLocation_Right = 2,
  EOverlayToggleBarLocation_Top = 3
};
bool EOverlayToggleBarLocation_IsValid(int value);
constexpr EOverlayToggleBarLocation EOverlayToggleBarLocation_MIN = EOverlayToggleBarLocation_Bottom;
constexpr EOverlayToggleBarLocation EOverlayToggleBarLocation_MAX = EOverlayToggleBarLocation_Top;
constexpr int EOverlayToggleBarLocation_ARRAYSIZE = EOverlayToggleBarLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOverlayToggleBarLocation_descriptor();
template<typename T>
inline const std::string& EOverlayToggleBarLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EOverlayToggleBarLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EOverlayToggleBarLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EOverlayToggleBarLocation_descriptor(), enum_t_value);
}
inline bool EOverlayToggleBarLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EOverlayToggleBarLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EOverlayToggleBarLocation>(
    EOverlayToggleBarLocation_descriptor(), name, value);
}
enum ESettingProfileMode : int {
  ESettingProfileMode_None = 0,
  ESettingProfileMode_PerGame = 1,
  ESettingProfileMode_PerGamePerDisplay = 2,
  ESettingProfileMode_PerDisplay = 3
};
bool ESettingProfileMode_IsValid(int value);
constexpr ESettingProfileMode ESettingProfileMode_MIN = ESettingProfileMode_None;
constexpr ESettingProfileMode ESettingProfileMode_MAX = ESettingProfileMode_PerDisplay;
constexpr int ESettingProfileMode_ARRAYSIZE = ESettingProfileMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESettingProfileMode_descriptor();
template<typename T>
inline const std::string& ESettingProfileMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESettingProfileMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESettingProfileMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESettingProfileMode_descriptor(), enum_t_value);
}
inline bool ESettingProfileMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESettingProfileMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESettingProfileMode>(
    ESettingProfileMode_descriptor(), name, value);
}
enum EGRMode : int {
  EGRMode_Never = 0,
  EGRMode_Always = 1,
  EGRMode_Manual = 2
};
bool EGRMode_IsValid(int value);
constexpr EGRMode EGRMode_MIN = EGRMode_Never;
constexpr EGRMode EGRMode_MAX = EGRMode_Manual;
constexpr int EGRMode_ARRAYSIZE = EGRMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGRMode_descriptor();
template<typename T>
inline const std::string& EGRMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGRMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGRMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGRMode_descriptor(), enum_t_value);
}
inline bool EGRMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGRMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGRMode>(
    EGRMode_descriptor(), name, value);
}
enum EGRAudio : int {
  EGRAudio_Game = 0,
  EGRAudio_System = 1,
  EGRAudio_Select = 2
};
bool EGRAudio_IsValid(int value);
constexpr EGRAudio EGRAudio_MIN = EGRAudio_Game;
constexpr EGRAudio EGRAudio_MAX = EGRAudio_Select;
constexpr int EGRAudio_ARRAYSIZE = EGRAudio_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGRAudio_descriptor();
template<typename T>
inline const std::string& EGRAudio_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGRAudio>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGRAudio_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGRAudio_descriptor(), enum_t_value);
}
inline bool EGRAudio_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGRAudio* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGRAudio>(
    EGRAudio_descriptor(), name, value);
}
enum EGRExportLimitType : int {
  EGRExportLimitType_Native = 0,
  EGRExportLimitType_FileSize = 1,
  EGRExportLimitType_Advanced = 2
};
bool EGRExportLimitType_IsValid(int value);
constexpr EGRExportLimitType EGRExportLimitType_MIN = EGRExportLimitType_Native;
constexpr EGRExportLimitType EGRExportLimitType_MAX = EGRExportLimitType_Advanced;
constexpr int EGRExportLimitType_ARRAYSIZE = EGRExportLimitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGRExportLimitType_descriptor();
template<typename T>
inline const std::string& EGRExportLimitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGRExportLimitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGRExportLimitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGRExportLimitType_descriptor(), enum_t_value);
}
inline bool EGRExportLimitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGRExportLimitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGRExportLimitType>(
    EGRExportLimitType_descriptor(), name, value);
}
// ===================================================================

class CMsgHotkey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHotkey) */ {
 public:
  inline CMsgHotkey() : CMsgHotkey(nullptr) {}
  virtual ~CMsgHotkey();
  explicit constexpr CMsgHotkey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHotkey(const CMsgHotkey& from);
  CMsgHotkey(CMsgHotkey&& from) noexcept
    : CMsgHotkey() {
    *this = ::std::move(from);
  }

  inline CMsgHotkey& operator=(const CMsgHotkey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHotkey& operator=(CMsgHotkey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgHotkey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHotkey* internal_default_instance() {
    return reinterpret_cast<const CMsgHotkey*>(
               &_CMsgHotkey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgHotkey& a, CMsgHotkey& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHotkey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHotkey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgHotkey* New() const final {
    return CreateMaybeMessage<CMsgHotkey>(nullptr);
  }

  CMsgHotkey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgHotkey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgHotkey& from);
  void MergeFrom(const CMsgHotkey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHotkey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHotkey";
  }
  protected:
  explicit CMsgHotkey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientsettings_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 6,
    kKeyCodeFieldNumber = 1,
    kAltKeyFieldNumber = 2,
    kShiftKeyFieldNumber = 3,
    kCtrlKeyFieldNumber = 4,
    kMetaKeyFieldNumber = 5,
  };
  // optional string display_name = 6;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional uint32 key_code = 1;
  bool has_key_code() const;
  private:
  bool _internal_has_key_code() const;
  public:
  void clear_key_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_code() const;
  void set_key_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_code() const;
  void _internal_set_key_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool alt_key = 2;
  bool has_alt_key() const;
  private:
  bool _internal_has_alt_key() const;
  public:
  void clear_alt_key();
  bool alt_key() const;
  void set_alt_key(bool value);
  private:
  bool _internal_alt_key() const;
  void _internal_set_alt_key(bool value);
  public:

  // optional bool shift_key = 3;
  bool has_shift_key() const;
  private:
  bool _internal_has_shift_key() const;
  public:
  void clear_shift_key();
  bool shift_key() const;
  void set_shift_key(bool value);
  private:
  bool _internal_shift_key() const;
  void _internal_set_shift_key(bool value);
  public:

  // optional bool ctrl_key = 4;
  bool has_ctrl_key() const;
  private:
  bool _internal_has_ctrl_key() const;
  public:
  void clear_ctrl_key();
  bool ctrl_key() const;
  void set_ctrl_key(bool value);
  private:
  bool _internal_ctrl_key() const;
  void _internal_set_ctrl_key(bool value);
  public:

  // optional bool meta_key = 5;
  bool has_meta_key() const;
  private:
  bool _internal_has_meta_key() const;
  public:
  void clear_meta_key();
  bool meta_key() const;
  void set_meta_key(bool value);
  private:
  bool _internal_meta_key() const;
  void _internal_set_meta_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHotkey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_code_;
  bool alt_key_;
  bool shift_key_;
  bool ctrl_key_;
  bool meta_key_;
  friend struct ::TableStruct_steammessages_5fclientsettings_2eproto;
};
// -------------------------------------------------------------------

class CMsgSettingVariant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSettingVariant) */ {
 public:
  inline CMsgSettingVariant() : CMsgSettingVariant(nullptr) {}
  virtual ~CMsgSettingVariant();
  explicit constexpr CMsgSettingVariant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSettingVariant(const CMsgSettingVariant& from);
  CMsgSettingVariant(CMsgSettingVariant&& from) noexcept
    : CMsgSettingVariant() {
    *this = ::std::move(from);
  }

  inline CMsgSettingVariant& operator=(const CMsgSettingVariant& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSettingVariant& operator=(CMsgSettingVariant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSettingVariant& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueBool = 1,
    kValueInt32 = 2,
    kValueUint32 = 3,
    kValueUint64 = 5,
    kValueFloat = 6,
    kValueString = 7,
    kValueHotkey = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const CMsgSettingVariant* internal_default_instance() {
    return reinterpret_cast<const CMsgSettingVariant*>(
               &_CMsgSettingVariant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgSettingVariant& a, CMsgSettingVariant& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSettingVariant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSettingVariant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSettingVariant* New() const final {
    return CreateMaybeMessage<CMsgSettingVariant>(nullptr);
  }

  CMsgSettingVariant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSettingVariant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSettingVariant& from);
  void MergeFrom(const CMsgSettingVariant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSettingVariant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSettingVariant";
  }
  protected:
  explicit CMsgSettingVariant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientsettings_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueBoolFieldNumber = 1,
    kValueInt32FieldNumber = 2,
    kValueUint32FieldNumber = 3,
    kValueUint64FieldNumber = 5,
    kValueFloatFieldNumber = 6,
    kValueStringFieldNumber = 7,
    kValueHotkeyFieldNumber = 8,
  };
  // bool value_bool = 1;
  bool has_value_bool() const;
  private:
  bool _internal_has_value_bool() const;
  public:
  void clear_value_bool();
  bool value_bool() const;
  void set_value_bool(bool value);
  private:
  bool _internal_value_bool() const;
  void _internal_set_value_bool(bool value);
  public:

  // int32 value_int32 = 2;
  bool has_value_int32() const;
  private:
  bool _internal_has_value_int32() const;
  public:
  void clear_value_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 value_int32() const;
  void set_value_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_int32() const;
  void _internal_set_value_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 value_uint32 = 3;
  bool has_value_uint32() const;
  private:
  bool _internal_has_value_uint32() const;
  public:
  void clear_value_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_uint32() const;
  void set_value_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value_uint32() const;
  void _internal_set_value_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 value_uint64 = 5;
  bool has_value_uint64() const;
  private:
  bool _internal_has_value_uint64() const;
  public:
  void clear_value_uint64();
  ::PROTOBUF_NAMESPACE_ID::int64 value_uint64() const;
  void set_value_uint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value_uint64() const;
  void _internal_set_value_uint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float value_float = 6;
  bool has_value_float() const;
  private:
  bool _internal_has_value_float() const;
  public:
  void clear_value_float();
  float value_float() const;
  void set_value_float(float value);
  private:
  float _internal_value_float() const;
  void _internal_set_value_float(float value);
  public:

  // string value_string = 7;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const std::string& value_string() const;
  void set_value_string(const std::string& value);
  void set_value_string(std::string&& value);
  void set_value_string(const char* value);
  void set_value_string(const char* value, size_t size);
  std::string* mutable_value_string();
  std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  // .CMsgHotkey value_hotkey = 8;
  bool has_value_hotkey() const;
  private:
  bool _internal_has_value_hotkey() const;
  public:
  void clear_value_hotkey();
  const ::CMsgHotkey& value_hotkey() const;
  ::CMsgHotkey* release_value_hotkey();
  ::CMsgHotkey* mutable_value_hotkey();
  void set_allocated_value_hotkey(::CMsgHotkey* value_hotkey);
  private:
  const ::CMsgHotkey& _internal_value_hotkey() const;
  ::CMsgHotkey* _internal_mutable_value_hotkey();
  public:
  void unsafe_arena_set_allocated_value_hotkey(
      ::CMsgHotkey* value_hotkey);
  ::CMsgHotkey* unsafe_arena_release_value_hotkey();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:CMsgSettingVariant)
 private:
  class _Internal;
  void set_has_value_bool();
  void set_has_value_int32();
  void set_has_value_uint32();
  void set_has_value_uint64();
  void set_has_value_float();
  void set_has_value_string();
  void set_has_value_hotkey();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool value_bool_;
    ::PROTOBUF_NAMESPACE_ID::int32 value_int32_;
    ::PROTOBUF_NAMESPACE_ID::uint32 value_uint32_;
    ::PROTOBUF_NAMESPACE_ID::int64 value_uint64_;
    float value_float_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
    ::CMsgHotkey* value_hotkey_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fclientsettings_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSettings) */ {
 public:
  inline CMsgClientSettings() : CMsgClientSettings(nullptr) {}
  virtual ~CMsgClientSettings();
  explicit constexpr CMsgClientSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSettings(const CMsgClientSettings& from);
  CMsgClientSettings(CMsgClientSettings&& from) noexcept
    : CMsgClientSettings() {
    *this = ::std::move(from);
  }

  inline CMsgClientSettings& operator=(const CMsgClientSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSettings& operator=(CMsgClientSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSettings* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSettings*>(
               &_CMsgClientSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientSettings& a, CMsgClientSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSettings* New() const final {
    return CreateMaybeMessage<CMsgClientSettings>(nullptr);
  }

  CMsgClientSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSettings& from);
  void MergeFrom(const CMsgClientSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSettings";
  }
  protected:
  explicit CMsgClientSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientsettings_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferredMonitorFieldNumber = 5,
    kDisplayNameFieldNumber = 8,
    kScreenshotsPathFieldNumber = 4009,
    kWebBrowserHomeFieldNumber = 4013,
    kVoiceMicDeviceNameFieldNumber = 4014,
    kOverlayTabsFieldNumber = 4021,
    kStartPageFieldNumber = 7003,
    kStartupMovieLocalPathFieldNumber = 16001,
    kGBackgroundPathFieldNumber = 18201,
    kGBackgroundMaxKeepFieldNumber = 18202,
    kGamerecordingVideoBitrateFieldNumber = 18210,
    kGamerecordingExportDirectoryFieldNumber = 18223,
    kGamescopeGameResolutionGlobalFieldNumber = 21012,
    kSettingValidationStringFieldNumber = 23007,
    kOverlayKeyFieldNumber = 4002,
    kScreenshotKeyFieldNumber = 4003,
    kVoicePushToTalkeyFieldNumber = 4018,
    kGBackgroundMkFieldNumber = 18207,
    kGBackgroundTgFieldNumber = 18208,
    kGamerecordingHotkeyIcFieldNumber = 18215,
    kGamescopeGuideHotkeyFieldNumber = 21013,
    kGamescopeQamHotkeyFieldNumber = 21014,
    kSettingValidationHotkeyFieldNumber = 23008,
    kNoSavePersonalInfoFieldNumber = 1,
    kOobeTestModeEnabledFieldNumber = 2,
    kInClientBetaFieldNumber = 3,
    kIsSteamSideloadedFieldNumber = 4,
    kSteamCefGpuBlocklistDisabledFieldNumber = 6,
    kBigpictureWindowedFieldNumber = 7,
    kIsExternalDisplayFieldNumber = 9,
    kSteamOsUnderscanEnabledFieldNumber = 11,
    kSteamOsUnderscanLevelFieldNumber = 10,
    kMinScaleFactorFieldNumber = 12,
    kMaxScaleFactorFieldNumber = 13,
    kAutoScaleFactorFieldNumber = 14,
    kControllerPollRateFieldNumber = 140012,
    kStartupMovieShuffleFieldNumber = 16002,
    kStartupMovieUsedForResumeFieldNumber = 16003,
    kGameNotesEnableSpellcheckFieldNumber = 17001,
    kSmallModeFieldNumber = 16,
    kSkipSteamvrInstallDialogFieldNumber = 19,
    kAlwaysShowUserChooserFieldNumber = 20,
    kOsVersionUnsupportedFieldNumber = 21,
    kShowFamilySharingNotificationsFieldNumber = 3000,
    kShowCopyCountInLibraryFieldNumber = 3001,
    kOverlayFpsCounterHighContrastFieldNumber = 4001,
    kEnableOverlayFieldNumber = 4004,
    kOverlayFpsCounterCornerFieldNumber = 4000,
    kDefaultPingRateFieldNumber = 4010,
    kEnableScreenshotNotificationFieldNumber = 4006,
    kEnableScreenshotSoundFieldNumber = 4007,
    kSaveUncompressedScreenshotsFieldNumber = 4008,
    kOverlayToolbarListViewFieldNumber = 4019,
    kServerPingRateFieldNumber = 4011,
    kSteamNetworkingShareIpFieldNumber = 4012,
    kVoiceMicInputGainFieldNumber = 4015,
    kVoiceSpeakerOutputGainFieldNumber = 4016,
    kVoicePushToTalsettingFieldNumber = 4017,
    kAlwaysUseGamepaduiOverlayFieldNumber = 4020,
    kOverlayScaleInterfaceFieldNumber = 4022,
    kOverlayRestoreBrowserTabsFieldNumber = 4023,
    kEnableAvifScreenshotsFieldNumber = 4024,
    kSmoothScrollWebviewsFieldNumber = 5000,
    kEnableGpuAcceleratedWebviewsFieldNumber = 5001,
    kEnableHardwareVideoDecodingFieldNumber = 5003,
    kRunAtStartupFieldNumber = 5004,
    kEnableDpiScalingFieldNumber = 5005,
    kEnableMarketingMessagesFieldNumber = 5006,
    kStartInBigPictureModeFieldNumber = 5007,
    kEnableUiSoundsFieldNumber = 5009,
    kJumplistFlagsFieldNumber = 5008,
    kDisableAllToastsFieldNumber = 6000,
    kDisableToastsInGameFieldNumber = 6001,
    kPlaySoundOnToastFieldNumber = 6002,
    kLibraryWhatsNewShowOnlyProductUpdatesFieldNumber = 7001,
    kLibraryDisplaySizeFieldNumber = 7000,
    kShowStoreContentOnHomeFieldNumber = 7002,
    kLibraryLowBandwidthModeFieldNumber = 7004,
    kLibraryLowPerfModeFieldNumber = 7005,
    kLibraryDisableCommunityContentFieldNumber = 7006,
    kLibraryDisplayIconInGameListFieldNumber = 7007,
    kReadyToPlayIncludesStreamingFieldNumber = 7008,
    kShowSteamDecinfoFieldNumber = 7009,
    kEnableShaderPrecacheFieldNumber = 8000,
    kShaderPrecachedSizeFieldNumber = 8002,
    kEnableShaderBackgroundProcessingFieldNumber = 8001,
    kNeedsSteamServiceRepairFieldNumber = 8003,
    kDownloadRateBitsPerSFieldNumber = 8005,
    kRestrictAutoUpdatesFieldNumber = 8006,
    kDownloadPeerContentFieldNumber = 8004,
    kRestrictAutoUpdatesStartFieldNumber = 8007,
    kRestrictAutoUpdatesEndFieldNumber = 8008,
    kDownloadRegionFieldNumber = 8009,
    kDownloadThrottleRateFieldNumber = 8012,
    kDefaultAppUpdateBehaviorFieldNumber = 8013,
    kDownloadWhileAppRunningFieldNumber = 8010,
    kDownloadThrottleWhileStreamingFieldNumber = 8011,
    kCloudEnabledFieldNumber = 10000,
    kShowScreenshotManagerFieldNumber = 10001,
    kMusicVolumeFieldNumber = 11000,
    kMusicPauseOnAppStartFieldNumber = 11001,
    kMusicPauseOnVoiceChatFieldNumber = 11002,
    kMusicDownloadHighQualityFieldNumber = 11003,
    kMusicPlaylistNotificationFieldNumber = 11004,
    kBroadcastPermissionsFieldNumber = 12000,
    kBroadcastOutputWidthFieldNumber = 12001,
    kBroadcastOutputHeightFieldNumber = 12002,
    kBroadcastBitrateFieldNumber = 12003,
    kBroadcastEncodingOptionFieldNumber = 12004,
    kBroadcastRecordAllVideoFieldNumber = 12005,
    kBroadcastRecordAllAudioFieldNumber = 12006,
    kBroadcastRecordMicrophoneFieldNumber = 12007,
    kBroadcastShowUploadStatsFieldNumber = 12008,
    kBroadcastChatCornerFieldNumber = 12010,
    kBroadcastShowLiveReminderFieldNumber = 12009,
    kGamestreamHardwareVideoEncodeFieldNumber = 13000,
    kGamestreamEnableVideoH265FieldNumber = 13001,
    kSteamInputConfiguratorErrorMsgEnableFieldNumber = 14001,
    kControllerPsSupportFieldNumber = 14003,
    kControllerGuideButtonFocusSteamFieldNumber = 14002,
    kControllerXboxSupportFieldNumber = 14004,
    kControllerXboxDriverFieldNumber = 14005,
    kControllerSwitchSupportFieldNumber = 14006,
    kStartupMovieIdFieldNumber = 16000,
    kControllerPowerOffTimeoutFieldNumber = 14008,
    kScreenshotItemsPerRowFieldNumber = 18000,
    kGBackgroundTimeResolutionFieldNumber = 18203,
    kGBackgroundModeFieldNumber = 18212,
    kGBackgroundAudioFieldNumber = 18213,
    kGMaxFpsFieldNumber = 18214,
    kGamerecordingIcSecondsFieldNumber = 18216,
    kGamerecordingExportLimitTypeFieldNumber = 18217,
    kGamerecordingExportLimitSizeMbFieldNumber = 18218,
    kGBackgroundAMFieldNumber = 18209,
    kGBackgroundASFieldNumber = 18211,
    kGamerecordingForceMicMonoFieldNumber = 18226,
    kGamerecordingAutomaticGainControlFieldNumber = 18227,
    kGamerecordingExportLimitBitrateFieldNumber = 18219,
    kGamerecordingExportLimitWidthFieldNumber = 18220,
    kGamerecordingExportLimitHeightFieldNumber = 18221,
    kGamerecordingExportLimitFrameRateFieldNumber = 18222,
    kGamerecordingExportCodecFieldNumber = 18224,
    kGamerecordingVideoMaxheightFieldNumber = 18225,
    kOverrideBrowserComposerModeFieldNumber = 20002,
    kShowTimestampsInConsoleFieldNumber = 20000,
    kForceOobeFieldNumber = 20001,
    kCefRemoteDebuggingEnabledFieldNumber = 20003,
    kForceDecperfTabFieldNumber = 20004,
    kForceFakeMandatoryUpdateFieldNumber = 20005,
    kHdrCompatTestingFieldNumber = 20006,
    kDeveloperModeEnabledFieldNumber = 20007,
    kShowAdvancedUpdateChannelsFieldNumber = 20008,
    kGamescopeHdrVisualizationFieldNumber = 21001,
    kGamescopeAppTargetFramerateFieldNumber = 21002,
    kGamescopeDisplayRefreshRateFieldNumber = 21005,
    kGamescopeEnableAppTargetFramerateFieldNumber = 21003,
    kGamescopeDisableFramelimitFieldNumber = 21004,
    kGamescopeUseGameRefreshRateInSteamFieldNumber = 21006,
    kGamescopeDisableMuraCorrectionFieldNumber = 21007,
    kGamescopeIncludeSteamuiInScreenshotsFieldNumber = 21008,
    kGamescopeAllowTearingFieldNumber = 21009,
    kGamescopeCompositeDebugFieldNumber = 21010,
    kGamescopeForceCompositeFieldNumber = 21011,
    kGamescopeHdrEnabledFieldNumber = 21015,
    kGamescopeNativeExternalResInSteamFieldNumber = 21016,
    kSteamosTdpLimitEnabledFieldNumber = 22001,
    kSteamosCecEnabledFieldNumber = 22003,
    kSteamosStatusLedBrightnessFieldNumber = 22000,
    kSteamosTdpLimitFieldNumber = 22002,
    kSteamosCecWakeOnResumeFieldNumber = 22004,
    kSteamosWifiDebugFieldNumber = 22005,
    kSteamosWifiForceWpaSupplicantFieldNumber = 22006,
    kSteamosManualGpuClocenabledFieldNumber = 22008,
    kSteamosMagnifierScaleFieldNumber = 22007,
    kSteamosManualGpuClochzFieldNumber = 22009,
    kSettingValidationEnumFieldNumber = 23002,
    kSettingValidationInt32FieldNumber = 23003,
    kSettingValidationUint64FieldNumber = 23005,
    kSettingValidationUint32FieldNumber = 23004,
    kSettingValidationFloatFieldNumber = 23006,
    kSettingValidationBoolFieldNumber = 23001,
    kSystemBluetoothEnabledFieldNumber = 24000,
    kHardwareUpdaterEnabledFieldNumber = 24001,
    kVrShowPerfGraphInHmdFieldNumber = 25000,
    kControllerGenericSupportFieldNumber = 14007,
    kTurnOffControllerOnExitFieldNumber = 14009,
    kControllerCombineNintendoJoyconsFieldNumber = 14010,
    kControllerEnableChordFieldNumber = 140011,
  };
  // optional string preferred_monitor = 5 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
  bool has_preferred_monitor() const;
  private:
  bool _internal_has_preferred_monitor() const;
  public:
  void clear_preferred_monitor();
  const std::string& preferred_monitor() const;
  void set_preferred_monitor(const std::string& value);
  void set_preferred_monitor(std::string&& value);
  void set_preferred_monitor(const char* value);
  void set_preferred_monitor(const char* value, size_t size);
  std::string* mutable_preferred_monitor();
  std::string* release_preferred_monitor();
  void set_allocated_preferred_monitor(std::string* preferred_monitor);
  private:
  const std::string& _internal_preferred_monitor() const;
  void _internal_set_preferred_monitor(const std::string& value);
  std::string* _internal_mutable_preferred_monitor();
  public:

  // optional string display_name = 8 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string screenshots_path = 4009 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_screenshots_path() const;
  private:
  bool _internal_has_screenshots_path() const;
  public:
  void clear_screenshots_path();
  const std::string& screenshots_path() const;
  void set_screenshots_path(const std::string& value);
  void set_screenshots_path(std::string&& value);
  void set_screenshots_path(const char* value);
  void set_screenshots_path(const char* value, size_t size);
  std::string* mutable_screenshots_path();
  std::string* release_screenshots_path();
  void set_allocated_screenshots_path(std::string* screenshots_path);
  private:
  const std::string& _internal_screenshots_path() const;
  void _internal_set_screenshots_path(const std::string& value);
  std::string* _internal_mutable_screenshots_path();
  public:

  // optional string web_browser_home = 4013 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_web_browser_home() const;
  private:
  bool _internal_has_web_browser_home() const;
  public:
  void clear_web_browser_home();
  const std::string& web_browser_home() const;
  void set_web_browser_home(const std::string& value);
  void set_web_browser_home(std::string&& value);
  void set_web_browser_home(const char* value);
  void set_web_browser_home(const char* value, size_t size);
  std::string* mutable_web_browser_home();
  std::string* release_web_browser_home();
  void set_allocated_web_browser_home(std::string* web_browser_home);
  private:
  const std::string& _internal_web_browser_home() const;
  void _internal_set_web_browser_home(const std::string& value);
  std::string* _internal_mutable_web_browser_home();
  public:

  // optional string voice_mic_device_name = 4014 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_voice_mic_device_name() const;
  private:
  bool _internal_has_voice_mic_device_name() const;
  public:
  void clear_voice_mic_device_name();
  const std::string& voice_mic_device_name() const;
  void set_voice_mic_device_name(const std::string& value);
  void set_voice_mic_device_name(std::string&& value);
  void set_voice_mic_device_name(const char* value);
  void set_voice_mic_device_name(const char* value, size_t size);
  std::string* mutable_voice_mic_device_name();
  std::string* release_voice_mic_device_name();
  void set_allocated_voice_mic_device_name(std::string* voice_mic_device_name);
  private:
  const std::string& _internal_voice_mic_device_name() const;
  void _internal_set_voice_mic_device_name(const std::string& value);
  std::string* _internal_mutable_voice_mic_device_name();
  public:

  // optional string overlay_tabs = 4021 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
  bool has_overlay_tabs() const;
  private:
  bool _internal_has_overlay_tabs() const;
  public:
  void clear_overlay_tabs();
  const std::string& overlay_tabs() const;
  void set_overlay_tabs(const std::string& value);
  void set_overlay_tabs(std::string&& value);
  void set_overlay_tabs(const char* value);
  void set_overlay_tabs(const char* value, size_t size);
  std::string* mutable_overlay_tabs();
  std::string* release_overlay_tabs();
  void set_allocated_overlay_tabs(std::string* overlay_tabs);
  private:
  const std::string& _internal_overlay_tabs() const;
  void _internal_set_overlay_tabs(const std::string& value);
  std::string* _internal_mutable_overlay_tabs();
  public:

  // optional string start_page = 7003 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_start_page() const;
  private:
  bool _internal_has_start_page() const;
  public:
  void clear_start_page();
  const std::string& start_page() const;
  void set_start_page(const std::string& value);
  void set_start_page(std::string&& value);
  void set_start_page(const char* value);
  void set_start_page(const char* value, size_t size);
  std::string* mutable_start_page();
  std::string* release_start_page();
  void set_allocated_start_page(std::string* start_page);
  private:
  const std::string& _internal_start_page() const;
  void _internal_set_start_page(const std::string& value);
  std::string* _internal_mutable_start_page();
  public:

  // optional string startup_movie_local_path = 16001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
  bool has_startup_movie_local_path() const;
  private:
  bool _internal_has_startup_movie_local_path() const;
  public:
  void clear_startup_movie_local_path();
  const std::string& startup_movie_local_path() const;
  void set_startup_movie_local_path(const std::string& value);
  void set_startup_movie_local_path(std::string&& value);
  void set_startup_movie_local_path(const char* value);
  void set_startup_movie_local_path(const char* value, size_t size);
  std::string* mutable_startup_movie_local_path();
  std::string* release_startup_movie_local_path();
  void set_allocated_startup_movie_local_path(std::string* startup_movie_local_path);
  private:
  const std::string& _internal_startup_movie_local_path() const;
  void _internal_set_startup_movie_local_path(const std::string& value);
  std::string* _internal_mutable_startup_movie_local_path();
  public:

  // optional string g_background_path = 18201 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_path() const;
  private:
  bool _internal_has_g_background_path() const;
  public:
  void clear_g_background_path();
  const std::string& g_background_path() const;
  void set_g_background_path(const std::string& value);
  void set_g_background_path(std::string&& value);
  void set_g_background_path(const char* value);
  void set_g_background_path(const char* value, size_t size);
  std::string* mutable_g_background_path();
  std::string* release_g_background_path();
  void set_allocated_g_background_path(std::string* g_background_path);
  private:
  const std::string& _internal_g_background_path() const;
  void _internal_set_g_background_path(const std::string& value);
  std::string* _internal_mutable_g_background_path();
  public:

  // optional string g_background_max_keep = 18202 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_default_string) = "120min"];
  bool has_g_background_max_keep() const;
  private:
  bool _internal_has_g_background_max_keep() const;
  public:
  void clear_g_background_max_keep();
  const std::string& g_background_max_keep() const;
  void set_g_background_max_keep(const std::string& value);
  void set_g_background_max_keep(std::string&& value);
  void set_g_background_max_keep(const char* value);
  void set_g_background_max_keep(const char* value, size_t size);
  std::string* mutable_g_background_max_keep();
  std::string* release_g_background_max_keep();
  void set_allocated_g_background_max_keep(std::string* g_background_max_keep);
  private:
  const std::string& _internal_g_background_max_keep() const;
  void _internal_set_g_background_max_keep(const std::string& value);
  std::string* _internal_mutable_g_background_max_keep();
  public:

  // optional string gamerecording_video_bitrate = 18210 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoBitRate", (.setting_default_string) = "preset_default"];
  bool has_gamerecording_video_bitrate() const;
  private:
  bool _internal_has_gamerecording_video_bitrate() const;
  public:
  void clear_gamerecording_video_bitrate();
  const std::string& gamerecording_video_bitrate() const;
  void set_gamerecording_video_bitrate(const std::string& value);
  void set_gamerecording_video_bitrate(std::string&& value);
  void set_gamerecording_video_bitrate(const char* value);
  void set_gamerecording_video_bitrate(const char* value, size_t size);
  std::string* mutable_gamerecording_video_bitrate();
  std::string* release_gamerecording_video_bitrate();
  void set_allocated_gamerecording_video_bitrate(std::string* gamerecording_video_bitrate);
  private:
  const std::string& _internal_gamerecording_video_bitrate() const;
  void _internal_set_gamerecording_video_bitrate(const std::string& value);
  std::string* _internal_mutable_gamerecording_video_bitrate();
  public:

  // optional string gamerecording_export_directory = 18223 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "GameRecording\\ExportDirectory"];
  bool has_gamerecording_export_directory() const;
  private:
  bool _internal_has_gamerecording_export_directory() const;
  public:
  void clear_gamerecording_export_directory();
  const std::string& gamerecording_export_directory() const;
  void set_gamerecording_export_directory(const std::string& value);
  void set_gamerecording_export_directory(std::string&& value);
  void set_gamerecording_export_directory(const char* value);
  void set_gamerecording_export_directory(const char* value, size_t size);
  std::string* mutable_gamerecording_export_directory();
  std::string* release_gamerecording_export_directory();
  void set_allocated_gamerecording_export_directory(std::string* gamerecording_export_directory);
  private:
  const std::string& _internal_gamerecording_export_directory() const;
  void _internal_set_gamerecording_export_directory(const std::string& value);
  std::string* _internal_mutable_gamerecording_export_directory();
  public:

  // optional string gamescope_game_resolution_global = 21012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GameResolutionGlobal", (.setting_default_string) = "Default"];
  bool has_gamescope_game_resolution_global() const;
  private:
  bool _internal_has_gamescope_game_resolution_global() const;
  public:
  void clear_gamescope_game_resolution_global();
  const std::string& gamescope_game_resolution_global() const;
  void set_gamescope_game_resolution_global(const std::string& value);
  void set_gamescope_game_resolution_global(std::string&& value);
  void set_gamescope_game_resolution_global(const char* value);
  void set_gamescope_game_resolution_global(const char* value, size_t size);
  std::string* mutable_gamescope_game_resolution_global();
  std::string* release_gamescope_game_resolution_global();
  void set_allocated_gamescope_game_resolution_global(std::string* gamescope_game_resolution_global);
  private:
  const std::string& _internal_gamescope_game_resolution_global() const;
  void _internal_set_gamescope_game_resolution_global(const std::string& value);
  std::string* _internal_mutable_gamescope_game_resolution_global();
  public:

  // optional string setting_validation_string = 23007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyString"];
  bool has_setting_validation_string() const;
  private:
  bool _internal_has_setting_validation_string() const;
  public:
  void clear_setting_validation_string();
  const std::string& setting_validation_string() const;
  void set_setting_validation_string(const std::string& value);
  void set_setting_validation_string(std::string&& value);
  void set_setting_validation_string(const char* value);
  void set_setting_validation_string(const char* value, size_t size);
  std::string* mutable_setting_validation_string();
  std::string* release_setting_validation_string();
  void set_allocated_setting_validation_string(std::string* setting_validation_string);
  private:
  const std::string& _internal_setting_validation_string() const;
  void _internal_set_setting_validation_string(const std::string& value);
  std::string* _internal_mutable_setting_validation_string();
  public:

  // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
  bool has_overlay_key() const;
  private:
  bool _internal_has_overlay_key() const;
  public:
  void clear_overlay_key();
  const ::CMsgHotkey& overlay_key() const;
  ::CMsgHotkey* release_overlay_key();
  ::CMsgHotkey* mutable_overlay_key();
  void set_allocated_overlay_key(::CMsgHotkey* overlay_key);
  private:
  const ::CMsgHotkey& _internal_overlay_key() const;
  ::CMsgHotkey* _internal_mutable_overlay_key();
  public:
  void unsafe_arena_set_allocated_overlay_key(
      ::CMsgHotkey* overlay_key);
  ::CMsgHotkey* unsafe_arena_release_overlay_key();

  // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
  bool has_screenshot_key() const;
  private:
  bool _internal_has_screenshot_key() const;
  public:
  void clear_screenshot_key();
  const ::CMsgHotkey& screenshot_key() const;
  ::CMsgHotkey* release_screenshot_key();
  ::CMsgHotkey* mutable_screenshot_key();
  void set_allocated_screenshot_key(::CMsgHotkey* screenshot_key);
  private:
  const ::CMsgHotkey& _internal_screenshot_key() const;
  ::CMsgHotkey* _internal_mutable_screenshot_key();
  public:
  void unsafe_arena_set_allocated_screenshot_key(
      ::CMsgHotkey* screenshot_key);
  ::CMsgHotkey* unsafe_arena_release_screenshot_key();

  // optional .CMsgHotkey voice_push_to_talkey = 4018 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_voice_push_to_talkey() const;
  private:
  bool _internal_has_voice_push_to_talkey() const;
  public:
  void clear_voice_push_to_talkey();
  const ::CMsgHotkey& voice_push_to_talkey() const;
  ::CMsgHotkey* release_voice_push_to_talkey();
  ::CMsgHotkey* mutable_voice_push_to_talkey();
  void set_allocated_voice_push_to_talkey(::CMsgHotkey* voice_push_to_talkey);
  private:
  const ::CMsgHotkey& _internal_voice_push_to_talkey() const;
  ::CMsgHotkey* _internal_mutable_voice_push_to_talkey();
  public:
  void unsafe_arena_set_allocated_voice_push_to_talkey(
      ::CMsgHotkey* voice_push_to_talkey);
  ::CMsgHotkey* unsafe_arena_release_voice_push_to_talkey();

  // optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_mk() const;
  private:
  bool _internal_has_g_background_mk() const;
  public:
  void clear_g_background_mk();
  const ::CMsgHotkey& g_background_mk() const;
  ::CMsgHotkey* release_g_background_mk();
  ::CMsgHotkey* mutable_g_background_mk();
  void set_allocated_g_background_mk(::CMsgHotkey* g_background_mk);
  private:
  const ::CMsgHotkey& _internal_g_background_mk() const;
  ::CMsgHotkey* _internal_mutable_g_background_mk();
  public:
  void unsafe_arena_set_allocated_g_background_mk(
      ::CMsgHotkey* g_background_mk);
  ::CMsgHotkey* unsafe_arena_release_g_background_mk();

  // optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_tg() const;
  private:
  bool _internal_has_g_background_tg() const;
  public:
  void clear_g_background_tg();
  const ::CMsgHotkey& g_background_tg() const;
  ::CMsgHotkey* release_g_background_tg();
  ::CMsgHotkey* mutable_g_background_tg();
  void set_allocated_g_background_tg(::CMsgHotkey* g_background_tg);
  private:
  const ::CMsgHotkey& _internal_g_background_tg() const;
  ::CMsgHotkey* _internal_mutable_g_background_tg();
  public:
  void unsafe_arena_set_allocated_g_background_tg(
      ::CMsgHotkey* g_background_tg);
  ::CMsgHotkey* unsafe_arena_release_g_background_tg();

  // optional .CMsgHotkey gamerecording_hotkey_ic = 18215 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipKey", (.setting_default_string) = "None"];
  bool has_gamerecording_hotkey_ic() const;
  private:
  bool _internal_has_gamerecording_hotkey_ic() const;
  public:
  void clear_gamerecording_hotkey_ic();
  const ::CMsgHotkey& gamerecording_hotkey_ic() const;
  ::CMsgHotkey* release_gamerecording_hotkey_ic();
  ::CMsgHotkey* mutable_gamerecording_hotkey_ic();
  void set_allocated_gamerecording_hotkey_ic(::CMsgHotkey* gamerecording_hotkey_ic);
  private:
  const ::CMsgHotkey& _internal_gamerecording_hotkey_ic() const;
  ::CMsgHotkey* _internal_mutable_gamerecording_hotkey_ic();
  public:
  void unsafe_arena_set_allocated_gamerecording_hotkey_ic(
      ::CMsgHotkey* gamerecording_hotkey_ic);
  ::CMsgHotkey* unsafe_arena_release_gamerecording_hotkey_ic();

  // optional .CMsgHotkey gamescope_guide_hotkey = 21013 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GuideKeyboardHotkey"];
  bool has_gamescope_guide_hotkey() const;
  private:
  bool _internal_has_gamescope_guide_hotkey() const;
  public:
  void clear_gamescope_guide_hotkey();
  const ::CMsgHotkey& gamescope_guide_hotkey() const;
  ::CMsgHotkey* release_gamescope_guide_hotkey();
  ::CMsgHotkey* mutable_gamescope_guide_hotkey();
  void set_allocated_gamescope_guide_hotkey(::CMsgHotkey* gamescope_guide_hotkey);
  private:
  const ::CMsgHotkey& _internal_gamescope_guide_hotkey() const;
  ::CMsgHotkey* _internal_mutable_gamescope_guide_hotkey();
  public:
  void unsafe_arena_set_allocated_gamescope_guide_hotkey(
      ::CMsgHotkey* gamescope_guide_hotkey);
  ::CMsgHotkey* unsafe_arena_release_gamescope_guide_hotkey();

  // optional .CMsgHotkey gamescope_qam_hotkey = 21014 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/QAMKeyboardHotkey"];
  bool has_gamescope_qam_hotkey() const;
  private:
  bool _internal_has_gamescope_qam_hotkey() const;
  public:
  void clear_gamescope_qam_hotkey();
  const ::CMsgHotkey& gamescope_qam_hotkey() const;
  ::CMsgHotkey* release_gamescope_qam_hotkey();
  ::CMsgHotkey* mutable_gamescope_qam_hotkey();
  void set_allocated_gamescope_qam_hotkey(::CMsgHotkey* gamescope_qam_hotkey);
  private:
  const ::CMsgHotkey& _internal_gamescope_qam_hotkey() const;
  ::CMsgHotkey* _internal_mutable_gamescope_qam_hotkey();
  public:
  void unsafe_arena_set_allocated_gamescope_qam_hotkey(
      ::CMsgHotkey* gamescope_qam_hotkey);
  ::CMsgHotkey* unsafe_arena_release_gamescope_qam_hotkey();

  // optional .CMsgHotkey setting_validation_hotkey = 23008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyHotkey"];
  bool has_setting_validation_hotkey() const;
  private:
  bool _internal_has_setting_validation_hotkey() const;
  public:
  void clear_setting_validation_hotkey();
  const ::CMsgHotkey& setting_validation_hotkey() const;
  ::CMsgHotkey* release_setting_validation_hotkey();
  ::CMsgHotkey* mutable_setting_validation_hotkey();
  void set_allocated_setting_validation_hotkey(::CMsgHotkey* setting_validation_hotkey);
  private:
  const ::CMsgHotkey& _internal_setting_validation_hotkey() const;
  ::CMsgHotkey* _internal_mutable_setting_validation_hotkey();
  public:
  void unsafe_arena_set_allocated_setting_validation_hotkey(
      ::CMsgHotkey* setting_validation_hotkey);
  ::CMsgHotkey* unsafe_arena_release_setting_validation_hotkey();

  // optional bool no_save_personal_info = 1 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
  bool has_no_save_personal_info() const;
  private:
  bool _internal_has_no_save_personal_info() const;
  public:
  void clear_no_save_personal_info();
  bool no_save_personal_info() const;
  void set_no_save_personal_info(bool value);
  private:
  bool _internal_no_save_personal_info() const;
  void _internal_set_no_save_personal_info(bool value);
  public:

  // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
  bool has_oobe_test_mode_enabled() const;
  private:
  bool _internal_has_oobe_test_mode_enabled() const;
  public:
  void clear_oobe_test_mode_enabled();
  bool oobe_test_mode_enabled() const;
  void set_oobe_test_mode_enabled(bool value);
  private:
  bool _internal_oobe_test_mode_enabled() const;
  void _internal_set_oobe_test_mode_enabled(bool value);
  public:

  // optional bool in_client_beta = 3 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
  bool has_in_client_beta() const;
  private:
  bool _internal_has_in_client_beta() const;
  public:
  void clear_in_client_beta();
  bool in_client_beta() const;
  void set_in_client_beta(bool value);
  private:
  bool _internal_in_client_beta() const;
  void _internal_set_in_client_beta(bool value);
  public:

  // optional bool is_steam_sideloaded = 4 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
  bool has_is_steam_sideloaded() const;
  private:
  bool _internal_has_is_steam_sideloaded() const;
  public:
  void clear_is_steam_sideloaded();
  bool is_steam_sideloaded() const;
  void set_is_steam_sideloaded(bool value);
  private:
  bool _internal_is_steam_sideloaded() const;
  void _internal_set_is_steam_sideloaded(bool value);
  public:

  // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
  bool has_steam_cef_gpu_blocklist_disabled() const;
  private:
  bool _internal_has_steam_cef_gpu_blocklist_disabled() const;
  public:
  void clear_steam_cef_gpu_blocklist_disabled();
  bool steam_cef_gpu_blocklist_disabled() const;
  void set_steam_cef_gpu_blocklist_disabled(bool value);
  private:
  bool _internal_steam_cef_gpu_blocklist_disabled() const;
  void _internal_set_steam_cef_gpu_blocklist_disabled(bool value);
  public:

  // optional bool bigpicture_windowed = 7 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
  bool has_bigpicture_windowed() const;
  private:
  bool _internal_has_bigpicture_windowed() const;
  public:
  void clear_bigpicture_windowed();
  bool bigpicture_windowed() const;
  void set_bigpicture_windowed(bool value);
  private:
  bool _internal_bigpicture_windowed() const;
  void _internal_set_bigpicture_windowed(bool value);
  public:

  // optional bool is_external_display = 9 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
  bool has_is_external_display() const;
  private:
  bool _internal_has_is_external_display() const;
  public:
  void clear_is_external_display();
  bool is_external_display() const;
  void set_is_external_display(bool value);
  private:
  bool _internal_is_external_display() const;
  void _internal_set_is_external_display(bool value);
  public:

  // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
  bool has_steam_os_underscan_enabled() const;
  private:
  bool _internal_has_steam_os_underscan_enabled() const;
  public:
  void clear_steam_os_underscan_enabled();
  bool steam_os_underscan_enabled() const;
  void set_steam_os_underscan_enabled(bool value);
  private:
  bool _internal_steam_os_underscan_enabled() const;
  void _internal_set_steam_os_underscan_enabled(bool value);
  public:

  // optional float steam_os_underscan_level = 10 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
  bool has_steam_os_underscan_level() const;
  private:
  bool _internal_has_steam_os_underscan_level() const;
  public:
  void clear_steam_os_underscan_level();
  float steam_os_underscan_level() const;
  void set_steam_os_underscan_level(float value);
  private:
  float _internal_steam_os_underscan_level() const;
  void _internal_set_steam_os_underscan_level(float value);
  public:

  // optional float min_scale_factor = 12 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
  bool has_min_scale_factor() const;
  private:
  bool _internal_has_min_scale_factor() const;
  public:
  void clear_min_scale_factor();
  float min_scale_factor() const;
  void set_min_scale_factor(float value);
  private:
  float _internal_min_scale_factor() const;
  void _internal_set_min_scale_factor(float value);
  public:

  // optional float max_scale_factor = 13 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
  bool has_max_scale_factor() const;
  private:
  bool _internal_has_max_scale_factor() const;
  public:
  void clear_max_scale_factor();
  float max_scale_factor() const;
  void set_max_scale_factor(float value);
  private:
  float _internal_max_scale_factor() const;
  void _internal_set_max_scale_factor(float value);
  public:

  // optional float auto_scale_factor = 14 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
  bool has_auto_scale_factor() const;
  private:
  bool _internal_has_auto_scale_factor() const;
  public:
  void clear_auto_scale_factor();
  float auto_scale_factor() const;
  void set_auto_scale_factor(float value);
  private:
  float _internal_auto_scale_factor() const;
  void _internal_set_auto_scale_factor(float value);
  public:

  // optional bool controller_poll_rate = 140012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Poll_Rate", (.setting_default_int) = 2];
  bool has_controller_poll_rate() const;
  private:
  bool _internal_has_controller_poll_rate() const;
  public:
  void clear_controller_poll_rate();
  bool controller_poll_rate() const;
  void set_controller_poll_rate(bool value);
  private:
  bool _internal_controller_poll_rate() const;
  void _internal_set_controller_poll_rate(bool value);
  public:

  // optional bool startup_movie_shuffle = 16002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
  bool has_startup_movie_shuffle() const;
  private:
  bool _internal_has_startup_movie_shuffle() const;
  public:
  void clear_startup_movie_shuffle();
  bool startup_movie_shuffle() const;
  void set_startup_movie_shuffle(bool value);
  private:
  bool _internal_startup_movie_shuffle() const;
  void _internal_set_startup_movie_shuffle(bool value);
  public:

  // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
  bool has_startup_movie_used_for_resume() const;
  private:
  bool _internal_has_startup_movie_used_for_resume() const;
  public:
  void clear_startup_movie_used_for_resume();
  bool startup_movie_used_for_resume() const;
  void set_startup_movie_used_for_resume(bool value);
  private:
  bool _internal_startup_movie_used_for_resume() const;
  void _internal_set_startup_movie_used_for_resume(bool value);
  public:

  // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
  bool has_game_notes_enable_spellcheck() const;
  private:
  bool _internal_has_game_notes_enable_spellcheck() const;
  public:
  void clear_game_notes_enable_spellcheck();
  bool game_notes_enable_spellcheck() const;
  void set_game_notes_enable_spellcheck(bool value);
  private:
  bool _internal_game_notes_enable_spellcheck() const;
  void _internal_set_game_notes_enable_spellcheck(bool value);
  public:

  // optional bool small_mode = 16 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
  bool has_small_mode() const;
  private:
  bool _internal_has_small_mode() const;
  public:
  void clear_small_mode();
  bool small_mode() const;
  void set_small_mode(bool value);
  private:
  bool _internal_small_mode() const;
  void _internal_set_small_mode(bool value);
  public:

  // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
  bool has_skip_steamvr_install_dialog() const;
  private:
  bool _internal_has_skip_steamvr_install_dialog() const;
  public:
  void clear_skip_steamvr_install_dialog();
  bool skip_steamvr_install_dialog() const;
  void set_skip_steamvr_install_dialog(bool value);
  private:
  bool _internal_skip_steamvr_install_dialog() const;
  void _internal_set_skip_steamvr_install_dialog(bool value);
  public:

  // optional bool always_show_user_chooser = 20 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
  bool has_always_show_user_chooser() const;
  private:
  bool _internal_has_always_show_user_chooser() const;
  public:
  void clear_always_show_user_chooser();
  bool always_show_user_chooser() const;
  void set_always_show_user_chooser(bool value);
  private:
  bool _internal_always_show_user_chooser() const;
  void _internal_set_always_show_user_chooser(bool value);
  public:

  // optional bool os_version_unsupported = 21 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OSVersionUnsupported"];
  bool has_os_version_unsupported() const;
  private:
  bool _internal_has_os_version_unsupported() const;
  public:
  void clear_os_version_unsupported();
  bool os_version_unsupported() const;
  void set_os_version_unsupported(bool value);
  private:
  bool _internal_os_version_unsupported() const;
  void _internal_set_os_version_unsupported(bool value);
  public:

  // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_show_family_sharing_notifications() const;
  private:
  bool _internal_has_show_family_sharing_notifications() const;
  public:
  void clear_show_family_sharing_notifications();
  bool show_family_sharing_notifications() const;
  void set_show_family_sharing_notifications(bool value);
  private:
  bool _internal_show_family_sharing_notifications() const;
  void _internal_set_show_family_sharing_notifications(bool value);
  public:

  // optional bool show_copy_count_in_library = 3001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowCopyCountInLibrary", (.setting_default_bool) = true];
  bool has_show_copy_count_in_library() const;
  private:
  bool _internal_has_show_copy_count_in_library() const;
  public:
  void clear_show_copy_count_in_library();
  bool show_copy_count_in_library() const;
  void set_show_copy_count_in_library(bool value);
  private:
  bool _internal_show_copy_count_in_library() const;
  void _internal_set_show_copy_count_in_library(bool value);
  public:

  // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
  bool has_overlay_fps_counter_high_contrast() const;
  private:
  bool _internal_has_overlay_fps_counter_high_contrast() const;
  public:
  void clear_overlay_fps_counter_high_contrast();
  bool overlay_fps_counter_high_contrast() const;
  void set_overlay_fps_counter_high_contrast(bool value);
  private:
  bool _internal_overlay_fps_counter_high_contrast() const;
  void _internal_set_overlay_fps_counter_high_contrast(bool value);
  public:

  // optional bool enable_overlay = 4004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay", (.setting_default_bool) = true];
  bool has_enable_overlay() const;
  private:
  bool _internal_has_enable_overlay() const;
  public:
  void clear_enable_overlay();
  bool enable_overlay() const;
  void set_enable_overlay(bool value);
  private:
  bool _internal_enable_overlay() const;
  void _internal_set_enable_overlay(bool value);
  public:

  // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
  bool has_overlay_fps_counter_corner() const;
  private:
  bool _internal_has_overlay_fps_counter_corner() const;
  public:
  void clear_overlay_fps_counter_corner();
  ::PROTOBUF_NAMESPACE_ID::int32 overlay_fps_counter_corner() const;
  void set_overlay_fps_counter_corner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overlay_fps_counter_corner() const;
  void _internal_set_overlay_fps_counter_corner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 default_ping_rate = 4010 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
  bool has_default_ping_rate() const;
  private:
  bool _internal_has_default_ping_rate() const;
  public:
  void clear_default_ping_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 default_ping_rate() const;
  void set_default_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_ping_rate() const;
  void _internal_set_default_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool enable_screenshot_notification = 4006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification", (.setting_default_bool) = true];
  bool has_enable_screenshot_notification() const;
  private:
  bool _internal_has_enable_screenshot_notification() const;
  public:
  void clear_enable_screenshot_notification();
  bool enable_screenshot_notification() const;
  void set_enable_screenshot_notification(bool value);
  private:
  bool _internal_enable_screenshot_notification() const;
  void _internal_set_enable_screenshot_notification(bool value);
  public:

  // optional bool enable_screenshot_sound = 4007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];
  bool has_enable_screenshot_sound() const;
  private:
  bool _internal_has_enable_screenshot_sound() const;
  public:
  void clear_enable_screenshot_sound();
  bool enable_screenshot_sound() const;
  void set_enable_screenshot_sound(bool value);
  private:
  bool _internal_enable_screenshot_sound() const;
  void _internal_set_enable_screenshot_sound(bool value);
  public:

  // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
  bool has_save_uncompressed_screenshots() const;
  private:
  bool _internal_has_save_uncompressed_screenshots() const;
  public:
  void clear_save_uncompressed_screenshots();
  bool save_uncompressed_screenshots() const;
  void set_save_uncompressed_screenshots(bool value);
  private:
  bool _internal_save_uncompressed_screenshots() const;
  void _internal_set_save_uncompressed_screenshots(bool value);
  public:

  // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
  bool has_overlay_toolbar_list_view() const;
  private:
  bool _internal_has_overlay_toolbar_list_view() const;
  public:
  void clear_overlay_toolbar_list_view();
  bool overlay_toolbar_list_view() const;
  void set_overlay_toolbar_list_view(bool value);
  private:
  bool _internal_overlay_toolbar_list_view() const;
  void _internal_set_overlay_toolbar_list_view(bool value);
  public:

  // optional int32 server_ping_rate = 4011 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_server_ping_rate() const;
  private:
  bool _internal_has_server_ping_rate() const;
  public:
  void clear_server_ping_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 server_ping_rate() const;
  void set_server_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_ping_rate() const;
  void _internal_set_server_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_steam_networking_share_ip() const;
  private:
  bool _internal_has_steam_networking_share_ip() const;
  public:
  void clear_steam_networking_share_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 steam_networking_share_ip() const;
  void set_steam_networking_share_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steam_networking_share_ip() const;
  void _internal_set_steam_networking_share_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float voice_mic_input_gain = 4015 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_voice_mic_input_gain() const;
  private:
  bool _internal_has_voice_mic_input_gain() const;
  public:
  void clear_voice_mic_input_gain();
  float voice_mic_input_gain() const;
  void set_voice_mic_input_gain(float value);
  private:
  float _internal_voice_mic_input_gain() const;
  void _internal_set_voice_mic_input_gain(float value);
  public:

  // optional float voice_speaker_output_gain = 4016 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_voice_speaker_output_gain() const;
  private:
  bool _internal_has_voice_speaker_output_gain() const;
  public:
  void clear_voice_speaker_output_gain();
  float voice_speaker_output_gain() const;
  void set_voice_speaker_output_gain(float value);
  private:
  float _internal_voice_speaker_output_gain() const;
  void _internal_set_voice_speaker_output_gain(float value);
  public:

  // optional int32 voice_push_to_talsetting = 4017 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_voice_push_to_talsetting() const;
  private:
  bool _internal_has_voice_push_to_talsetting() const;
  public:
  void clear_voice_push_to_talsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 voice_push_to_talsetting() const;
  void set_voice_push_to_talsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voice_push_to_talsetting() const;
  void _internal_set_voice_push_to_talsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
  bool has_always_use_gamepadui_overlay() const;
  private:
  bool _internal_has_always_use_gamepadui_overlay() const;
  public:
  void clear_always_use_gamepadui_overlay();
  bool always_use_gamepadui_overlay() const;
  void set_always_use_gamepadui_overlay(bool value);
  private:
  bool _internal_always_use_gamepadui_overlay() const;
  void _internal_set_always_use_gamepadui_overlay(bool value);
  public:

  // optional bool overlay_scale_interface = 4022 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
  bool has_overlay_scale_interface() const;
  private:
  bool _internal_has_overlay_scale_interface() const;
  public:
  void clear_overlay_scale_interface();
  bool overlay_scale_interface() const;
  void set_overlay_scale_interface(bool value);
  private:
  bool _internal_overlay_scale_interface() const;
  void _internal_set_overlay_scale_interface(bool value);
  public:

  // optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];
  bool has_overlay_restore_browser_tabs() const;
  private:
  bool _internal_has_overlay_restore_browser_tabs() const;
  public:
  void clear_overlay_restore_browser_tabs();
  bool overlay_restore_browser_tabs() const;
  void set_overlay_restore_browser_tabs(bool value);
  private:
  bool _internal_overlay_restore_browser_tabs() const;
  void _internal_set_overlay_restore_browser_tabs(bool value);
  public:

  // optional bool enable_avif_screenshots = 4024 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotEnableAVIF"];
  bool has_enable_avif_screenshots() const;
  private:
  bool _internal_has_enable_avif_screenshots() const;
  public:
  void clear_enable_avif_screenshots();
  bool enable_avif_screenshots() const;
  void set_enable_avif_screenshots(bool value);
  private:
  bool _internal_enable_avif_screenshots() const;
  void _internal_set_enable_avif_screenshots(bool value);
  public:

  // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_smooth_scroll_webviews() const;
  private:
  bool _internal_has_smooth_scroll_webviews() const;
  public:
  void clear_smooth_scroll_webviews();
  bool smooth_scroll_webviews() const;
  void set_smooth_scroll_webviews(bool value);
  private:
  bool _internal_smooth_scroll_webviews() const;
  void _internal_set_smooth_scroll_webviews(bool value);
  public:

  // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_enable_gpu_accelerated_webviews() const;
  private:
  bool _internal_has_enable_gpu_accelerated_webviews() const;
  public:
  void clear_enable_gpu_accelerated_webviews();
  bool enable_gpu_accelerated_webviews() const;
  void set_enable_gpu_accelerated_webviews(bool value);
  private:
  bool _internal_enable_gpu_accelerated_webviews() const;
  void _internal_set_enable_gpu_accelerated_webviews(bool value);
  public:

  // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_enable_hardware_video_decoding() const;
  private:
  bool _internal_has_enable_hardware_video_decoding() const;
  public:
  void clear_enable_hardware_video_decoding();
  bool enable_hardware_video_decoding() const;
  void set_enable_hardware_video_decoding(bool value);
  private:
  bool _internal_enable_hardware_video_decoding() const;
  void _internal_set_enable_hardware_video_decoding(bool value);
  public:

  // optional bool run_at_startup = 5004 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_run_at_startup() const;
  private:
  bool _internal_has_run_at_startup() const;
  public:
  void clear_run_at_startup();
  bool run_at_startup() const;
  void set_run_at_startup(bool value);
  private:
  bool _internal_run_at_startup() const;
  void _internal_set_run_at_startup(bool value);
  public:

  // optional bool enable_dpi_scaling = 5005 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_enable_dpi_scaling() const;
  private:
  bool _internal_has_enable_dpi_scaling() const;
  public:
  void clear_enable_dpi_scaling();
  bool enable_dpi_scaling() const;
  void set_enable_dpi_scaling(bool value);
  private:
  bool _internal_enable_dpi_scaling() const;
  void _internal_set_enable_dpi_scaling(bool value);
  public:

  // optional bool enable_marketing_messages = 5006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
  bool has_enable_marketing_messages() const;
  private:
  bool _internal_has_enable_marketing_messages() const;
  public:
  void clear_enable_marketing_messages();
  bool enable_marketing_messages() const;
  void set_enable_marketing_messages(bool value);
  private:
  bool _internal_enable_marketing_messages() const;
  void _internal_set_enable_marketing_messages(bool value);
  public:

  // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_start_in_big_picture_mode() const;
  private:
  bool _internal_has_start_in_big_picture_mode() const;
  public:
  void clear_start_in_big_picture_mode();
  bool start_in_big_picture_mode() const;
  void set_start_in_big_picture_mode(bool value);
  private:
  bool _internal_start_in_big_picture_mode() const;
  void _internal_set_start_in_big_picture_mode(bool value);
  public:

  // optional bool enable_ui_sounds = 5009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
  bool has_enable_ui_sounds() const;
  private:
  bool _internal_has_enable_ui_sounds() const;
  public:
  void clear_enable_ui_sounds();
  bool enable_ui_sounds() const;
  void set_enable_ui_sounds(bool value);
  private:
  bool _internal_enable_ui_sounds() const;
  void _internal_set_enable_ui_sounds(bool value);
  public:

  // optional uint32 jumplist_flags = 5008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
  bool has_jumplist_flags() const;
  private:
  bool _internal_has_jumplist_flags() const;
  public:
  void clear_jumplist_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 jumplist_flags() const;
  void set_jumplist_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jumplist_flags() const;
  void _internal_set_jumplist_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool disable_all_toasts = 6000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
  bool has_disable_all_toasts() const;
  private:
  bool _internal_has_disable_all_toasts() const;
  public:
  void clear_disable_all_toasts();
  bool disable_all_toasts() const;
  void set_disable_all_toasts(bool value);
  private:
  bool _internal_disable_all_toasts() const;
  void _internal_set_disable_all_toasts(bool value);
  public:

  // optional bool disable_toasts_in_game = 6001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
  bool has_disable_toasts_in_game() const;
  private:
  bool _internal_has_disable_toasts_in_game() const;
  public:
  void clear_disable_toasts_in_game();
  bool disable_toasts_in_game() const;
  void set_disable_toasts_in_game(bool value);
  private:
  bool _internal_disable_toasts_in_game() const;
  void _internal_set_disable_toasts_in_game(bool value);
  public:

  // optional bool play_sound_on_toast = 6002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
  bool has_play_sound_on_toast() const;
  private:
  bool _internal_has_play_sound_on_toast() const;
  public:
  void clear_play_sound_on_toast();
  bool play_sound_on_toast() const;
  void set_play_sound_on_toast(bool value);
  private:
  bool _internal_play_sound_on_toast() const;
  void _internal_set_play_sound_on_toast(bool value);
  public:

  // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
  bool has_library_whats_new_show_only_product_updates() const;
  private:
  bool _internal_has_library_whats_new_show_only_product_updates() const;
  public:
  void clear_library_whats_new_show_only_product_updates();
  bool library_whats_new_show_only_product_updates() const;
  void set_library_whats_new_show_only_product_updates(bool value);
  private:
  bool _internal_library_whats_new_show_only_product_updates() const;
  void _internal_set_library_whats_new_show_only_product_updates(bool value);
  public:

  // optional int32 library_display_size = 7000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
  bool has_library_display_size() const;
  private:
  bool _internal_has_library_display_size() const;
  public:
  void clear_library_display_size();
  ::PROTOBUF_NAMESPACE_ID::int32 library_display_size() const;
  void set_library_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_library_display_size() const;
  void _internal_set_library_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool show_store_content_on_home = 7002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
  bool has_show_store_content_on_home() const;
  private:
  bool _internal_has_show_store_content_on_home() const;
  public:
  void clear_show_store_content_on_home();
  bool show_store_content_on_home() const;
  void set_show_store_content_on_home(bool value);
  private:
  bool _internal_show_store_content_on_home() const;
  void _internal_set_show_store_content_on_home(bool value);
  public:

  // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
  bool has_library_low_bandwidth_mode() const;
  private:
  bool _internal_has_library_low_bandwidth_mode() const;
  public:
  void clear_library_low_bandwidth_mode();
  bool library_low_bandwidth_mode() const;
  void set_library_low_bandwidth_mode(bool value);
  private:
  bool _internal_library_low_bandwidth_mode() const;
  void _internal_set_library_low_bandwidth_mode(bool value);
  public:

  // optional bool library_low_perf_mode = 7005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
  bool has_library_low_perf_mode() const;
  private:
  bool _internal_has_library_low_perf_mode() const;
  public:
  void clear_library_low_perf_mode();
  bool library_low_perf_mode() const;
  void set_library_low_perf_mode(bool value);
  private:
  bool _internal_library_low_perf_mode() const;
  void _internal_set_library_low_perf_mode(bool value);
  public:

  // optional bool library_disable_community_content = 7006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
  bool has_library_disable_community_content() const;
  private:
  bool _internal_has_library_disable_community_content() const;
  public:
  void clear_library_disable_community_content();
  bool library_disable_community_content() const;
  void set_library_disable_community_content(bool value);
  private:
  bool _internal_library_disable_community_content() const;
  void _internal_set_library_disable_community_content(bool value);
  public:

  // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
  bool has_library_display_icon_in_game_list() const;
  private:
  bool _internal_has_library_display_icon_in_game_list() const;
  public:
  void clear_library_display_icon_in_game_list();
  bool library_display_icon_in_game_list() const;
  void set_library_display_icon_in_game_list(bool value);
  private:
  bool _internal_library_display_icon_in_game_list() const;
  void _internal_set_library_display_icon_in_game_list(bool value);
  public:

  // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
  bool has_ready_to_play_includes_streaming() const;
  private:
  bool _internal_has_ready_to_play_includes_streaming() const;
  public:
  void clear_ready_to_play_includes_streaming();
  bool ready_to_play_includes_streaming() const;
  void set_ready_to_play_includes_streaming(bool value);
  private:
  bool _internal_ready_to_play_includes_streaming() const;
  void _internal_set_ready_to_play_includes_streaming(bool value);
  public:

  // optional bool show_steam_decinfo = 7009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
  bool has_show_steam_decinfo() const;
  private:
  bool _internal_has_show_steam_decinfo() const;
  public:
  void clear_show_steam_decinfo();
  bool show_steam_decinfo() const;
  void set_show_steam_decinfo(bool value);
  private:
  bool _internal_show_steam_decinfo() const;
  void _internal_set_show_steam_decinfo(bool value);
  public:

  // optional bool enable_shader_precache = 8000 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_enable_shader_precache() const;
  private:
  bool _internal_has_enable_shader_precache() const;
  public:
  void clear_enable_shader_precache();
  bool enable_shader_precache() const;
  void set_enable_shader_precache(bool value);
  private:
  bool _internal_enable_shader_precache() const;
  void _internal_set_enable_shader_precache(bool value);
  public:

  // optional uint64 shader_precached_size = 8002 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
  bool has_shader_precached_size() const;
  private:
  bool _internal_has_shader_precached_size() const;
  public:
  void clear_shader_precached_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 shader_precached_size() const;
  void set_shader_precached_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shader_precached_size() const;
  void _internal_set_shader_precached_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool enable_shader_background_processing = 8001 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_enable_shader_background_processing() const;
  private:
  bool _internal_has_enable_shader_background_processing() const;
  public:
  void clear_enable_shader_background_processing();
  bool enable_shader_background_processing() const;
  void set_enable_shader_background_processing(bool value);
  private:
  bool _internal_enable_shader_background_processing() const;
  void _internal_set_enable_shader_background_processing(bool value);
  public:

  // optional bool needs_steam_service_repair = 8003 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
  bool has_needs_steam_service_repair() const;
  private:
  bool _internal_has_needs_steam_service_repair() const;
  public:
  void clear_needs_steam_service_repair();
  bool needs_steam_service_repair() const;
  void set_needs_steam_service_repair(bool value);
  private:
  bool _internal_needs_steam_service_repair() const;
  void _internal_set_needs_steam_service_repair(bool value);
  public:

  // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_download_rate_bits_per_s() const;
  private:
  bool _internal_has_download_rate_bits_per_s() const;
  public:
  void clear_download_rate_bits_per_s();
  bool download_rate_bits_per_s() const;
  void set_download_rate_bits_per_s(bool value);
  private:
  bool _internal_download_rate_bits_per_s() const;
  void _internal_set_download_rate_bits_per_s(bool value);
  public:

  // optional bool restrict_auto_updates = 8006 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_restrict_auto_updates() const;
  private:
  bool _internal_has_restrict_auto_updates() const;
  public:
  void clear_restrict_auto_updates();
  bool restrict_auto_updates() const;
  void set_restrict_auto_updates(bool value);
  private:
  bool _internal_restrict_auto_updates() const;
  void _internal_set_restrict_auto_updates(bool value);
  public:

  // optional int32 download_peer_content = 8004 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_download_peer_content() const;
  private:
  bool _internal_has_download_peer_content() const;
  public:
  void clear_download_peer_content();
  ::PROTOBUF_NAMESPACE_ID::int32 download_peer_content() const;
  void set_download_peer_content(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_download_peer_content() const;
  void _internal_set_download_peer_content(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_restrict_auto_updates_start() const;
  private:
  bool _internal_has_restrict_auto_updates_start() const;
  public:
  void clear_restrict_auto_updates_start();
  ::PROTOBUF_NAMESPACE_ID::int32 restrict_auto_updates_start() const;
  void set_restrict_auto_updates_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restrict_auto_updates_start() const;
  void _internal_set_restrict_auto_updates_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_restrict_auto_updates_end() const;
  private:
  bool _internal_has_restrict_auto_updates_end() const;
  public:
  void clear_restrict_auto_updates_end();
  ::PROTOBUF_NAMESPACE_ID::int32 restrict_auto_updates_end() const;
  void set_restrict_auto_updates_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_restrict_auto_updates_end() const;
  void _internal_set_restrict_auto_updates_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 download_region = 8009 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_download_region() const;
  private:
  bool _internal_has_download_region() const;
  public:
  void clear_download_region();
  ::PROTOBUF_NAMESPACE_ID::int32 download_region() const;
  void set_download_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_download_region() const;
  void _internal_set_download_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 download_throttle_rate = 8012 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_download_throttle_rate() const;
  private:
  bool _internal_has_download_throttle_rate() const;
  public:
  void clear_download_throttle_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 download_throttle_rate() const;
  void set_download_throttle_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_download_throttle_rate() const;
  void _internal_set_download_throttle_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 default_app_update_behavior = 8013 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_default_app_update_behavior() const;
  private:
  bool _internal_has_default_app_update_behavior() const;
  public:
  void clear_default_app_update_behavior();
  ::PROTOBUF_NAMESPACE_ID::int32 default_app_update_behavior() const;
  void set_default_app_update_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_app_update_behavior() const;
  void _internal_set_default_app_update_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool download_while_app_running = 8010 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_download_while_app_running() const;
  private:
  bool _internal_has_download_while_app_running() const;
  public:
  void clear_download_while_app_running();
  bool download_while_app_running() const;
  void set_download_while_app_running(bool value);
  private:
  bool _internal_download_while_app_running() const;
  void _internal_set_download_while_app_running(bool value);
  public:

  // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_download_throttle_while_streaming() const;
  private:
  bool _internal_has_download_throttle_while_streaming() const;
  public:
  void clear_download_throttle_while_streaming();
  bool download_throttle_while_streaming() const;
  void set_download_throttle_while_streaming(bool value);
  private:
  bool _internal_download_throttle_while_streaming() const;
  void _internal_set_download_throttle_while_streaming(bool value);
  public:

  // optional bool cloud_enabled = 10000 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_cloud_enabled() const;
  private:
  bool _internal_has_cloud_enabled() const;
  public:
  void clear_cloud_enabled();
  bool cloud_enabled() const;
  void set_cloud_enabled(bool value);
  private:
  bool _internal_cloud_enabled() const;
  void _internal_set_cloud_enabled(bool value);
  public:

  // optional bool show_screenshot_manager = 10001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
  bool has_show_screenshot_manager() const;
  private:
  bool _internal_has_show_screenshot_manager() const;
  public:
  void clear_show_screenshot_manager();
  bool show_screenshot_manager() const;
  void set_show_screenshot_manager(bool value);
  private:
  bool _internal_show_screenshot_manager() const;
  void _internal_set_show_screenshot_manager(bool value);
  public:

  // optional int32 music_volume = 11000 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_music_volume() const;
  private:
  bool _internal_has_music_volume() const;
  public:
  void clear_music_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 music_volume() const;
  void set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_music_volume() const;
  void _internal_set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool music_pause_on_app_start = 11001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
  bool has_music_pause_on_app_start() const;
  private:
  bool _internal_has_music_pause_on_app_start() const;
  public:
  void clear_music_pause_on_app_start();
  bool music_pause_on_app_start() const;
  void set_music_pause_on_app_start(bool value);
  private:
  bool _internal_music_pause_on_app_start() const;
  void _internal_set_music_pause_on_app_start(bool value);
  public:

  // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
  bool has_music_pause_on_voice_chat() const;
  private:
  bool _internal_has_music_pause_on_voice_chat() const;
  public:
  void clear_music_pause_on_voice_chat();
  bool music_pause_on_voice_chat() const;
  void set_music_pause_on_voice_chat(bool value);
  private:
  bool _internal_music_pause_on_voice_chat() const;
  void _internal_set_music_pause_on_voice_chat(bool value);
  public:

  // optional bool music_download_high_quality = 11003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
  bool has_music_download_high_quality() const;
  private:
  bool _internal_has_music_download_high_quality() const;
  public:
  void clear_music_download_high_quality();
  bool music_download_high_quality() const;
  void set_music_download_high_quality(bool value);
  private:
  bool _internal_music_download_high_quality() const;
  void _internal_set_music_download_high_quality(bool value);
  public:

  // optional bool music_playlist_notification = 11004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
  bool has_music_playlist_notification() const;
  private:
  bool _internal_has_music_playlist_notification() const;
  public:
  void clear_music_playlist_notification();
  bool music_playlist_notification() const;
  void set_music_playlist_notification(bool value);
  private:
  bool _internal_music_playlist_notification() const;
  void _internal_set_music_playlist_notification(bool value);
  public:

  // optional .EBroadcastPermission broadcast_permissions = 12000 [default = EBroadcastPermissionDisabled, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
  bool has_broadcast_permissions() const;
  private:
  bool _internal_has_broadcast_permissions() const;
  public:
  void clear_broadcast_permissions();
  ::EBroadcastPermission broadcast_permissions() const;
  void set_broadcast_permissions(::EBroadcastPermission value);
  private:
  ::EBroadcastPermission _internal_broadcast_permissions() const;
  void _internal_set_broadcast_permissions(::EBroadcastPermission value);
  public:

  // optional int32 broadcast_output_width = 12001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
  bool has_broadcast_output_width() const;
  private:
  bool _internal_has_broadcast_output_width() const;
  public:
  void clear_broadcast_output_width();
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_output_width() const;
  void set_broadcast_output_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_broadcast_output_width() const;
  void _internal_set_broadcast_output_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 broadcast_output_height = 12002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight", (.setting_default_int) = 720];
  bool has_broadcast_output_height() const;
  private:
  bool _internal_has_broadcast_output_height() const;
  public:
  void clear_broadcast_output_height();
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_output_height() const;
  void set_broadcast_output_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_broadcast_output_height() const;
  void _internal_set_broadcast_output_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 broadcast_bitrate = 12003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps", (.setting_default_int) = 2500];
  bool has_broadcast_bitrate() const;
  private:
  bool _internal_has_broadcast_bitrate() const;
  public:
  void clear_broadcast_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_bitrate() const;
  void set_broadcast_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_broadcast_bitrate() const;
  void _internal_set_broadcast_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = EBroadcastEncoderBestQuality, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
  bool has_broadcast_encoding_option() const;
  private:
  bool _internal_has_broadcast_encoding_option() const;
  public:
  void clear_broadcast_encoding_option();
  ::EBroadcastEncoderSetting broadcast_encoding_option() const;
  void set_broadcast_encoding_option(::EBroadcastEncoderSetting value);
  private:
  ::EBroadcastEncoderSetting _internal_broadcast_encoding_option() const;
  void _internal_set_broadcast_encoding_option(::EBroadcastEncoderSetting value);
  public:

  // optional bool broadcast_record_all_video = 12005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
  bool has_broadcast_record_all_video() const;
  private:
  bool _internal_has_broadcast_record_all_video() const;
  public:
  void clear_broadcast_record_all_video();
  bool broadcast_record_all_video() const;
  void set_broadcast_record_all_video(bool value);
  private:
  bool _internal_broadcast_record_all_video() const;
  void _internal_set_broadcast_record_all_video(bool value);
  public:

  // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
  bool has_broadcast_record_all_audio() const;
  private:
  bool _internal_has_broadcast_record_all_audio() const;
  public:
  void clear_broadcast_record_all_audio();
  bool broadcast_record_all_audio() const;
  void set_broadcast_record_all_audio(bool value);
  private:
  bool _internal_broadcast_record_all_audio() const;
  void _internal_set_broadcast_record_all_audio(bool value);
  public:

  // optional bool broadcast_record_microphone = 12007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
  bool has_broadcast_record_microphone() const;
  private:
  bool _internal_has_broadcast_record_microphone() const;
  public:
  void clear_broadcast_record_microphone();
  bool broadcast_record_microphone() const;
  void set_broadcast_record_microphone(bool value);
  private:
  bool _internal_broadcast_record_microphone() const;
  void _internal_set_broadcast_record_microphone(bool value);
  public:

  // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
  bool has_broadcast_show_upload_stats() const;
  private:
  bool _internal_has_broadcast_show_upload_stats() const;
  public:
  void clear_broadcast_show_upload_stats();
  bool broadcast_show_upload_stats() const;
  void set_broadcast_show_upload_stats(bool value);
  private:
  bool _internal_broadcast_show_upload_stats() const;
  void _internal_set_broadcast_show_upload_stats(bool value);
  public:

  // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
  bool has_broadcast_chat_corner() const;
  private:
  bool _internal_has_broadcast_chat_corner() const;
  public:
  void clear_broadcast_chat_corner();
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_chat_corner() const;
  void set_broadcast_chat_corner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_broadcast_chat_corner() const;
  void _internal_set_broadcast_chat_corner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
  bool has_broadcast_show_live_reminder() const;
  private:
  bool _internal_has_broadcast_show_live_reminder() const;
  public:
  void clear_broadcast_show_live_reminder();
  bool broadcast_show_live_reminder() const;
  void set_broadcast_show_live_reminder(bool value);
  private:
  bool _internal_broadcast_show_live_reminder() const;
  void _internal_set_broadcast_show_live_reminder(bool value);
  public:

  // optional bool gamestream_hardware_video_encode = 13000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\HardwareVideoEncode", (.setting_default_bool) = true];
  bool has_gamestream_hardware_video_encode() const;
  private:
  bool _internal_has_gamestream_hardware_video_encode() const;
  public:
  void clear_gamestream_hardware_video_encode();
  bool gamestream_hardware_video_encode() const;
  void set_gamestream_hardware_video_encode(bool value);
  private:
  bool _internal_gamestream_hardware_video_encode() const;
  void _internal_set_gamestream_hardware_video_encode(bool value);
  public:

  // optional bool gamestream_enable_video_h265 = 13001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\EnableVideoH265", (.setting_default_bool) = true];
  bool has_gamestream_enable_video_h265() const;
  private:
  bool _internal_has_gamestream_enable_video_h265() const;
  public:
  void clear_gamestream_enable_video_h265();
  bool gamestream_enable_video_h265() const;
  void set_gamestream_enable_video_h265(bool value);
  private:
  bool _internal_gamestream_enable_video_h265() const;
  void _internal_set_gamestream_enable_video_h265(bool value);
  public:

  // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
  bool has_steam_input_configurator_error_msg_enable() const;
  private:
  bool _internal_has_steam_input_configurator_error_msg_enable() const;
  public:
  void clear_steam_input_configurator_error_msg_enable();
  bool steam_input_configurator_error_msg_enable() const;
  void set_steam_input_configurator_error_msg_enable(bool value);
  private:
  bool _internal_steam_input_configurator_error_msg_enable() const;
  void _internal_set_steam_input_configurator_error_msg_enable(bool value);
  public:

  // optional int32 controller_ps_support = 14003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];
  bool has_controller_ps_support() const;
  private:
  bool _internal_has_controller_ps_support() const;
  public:
  void clear_controller_ps_support();
  ::PROTOBUF_NAMESPACE_ID::int32 controller_ps_support() const;
  void set_controller_ps_support(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_controller_ps_support() const;
  void _internal_set_controller_ps_support(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton", (.setting_default_bool) = true];
  bool has_controller_guide_button_focus_steam() const;
  private:
  bool _internal_has_controller_guide_button_focus_steam() const;
  public:
  void clear_controller_guide_button_focus_steam();
  bool controller_guide_button_focus_steam() const;
  void set_controller_guide_button_focus_steam(bool value);
  private:
  bool _internal_controller_guide_button_focus_steam() const;
  void _internal_set_controller_guide_button_focus_steam(bool value);
  public:

  // optional bool controller_xbox_support = 14004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
  bool has_controller_xbox_support() const;
  private:
  bool _internal_has_controller_xbox_support() const;
  public:
  void clear_controller_xbox_support();
  bool controller_xbox_support() const;
  void set_controller_xbox_support(bool value);
  private:
  bool _internal_controller_xbox_support() const;
  void _internal_set_controller_xbox_support(bool value);
  public:

  // optional bool controller_xbox_driver = 14005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
  bool has_controller_xbox_driver() const;
  private:
  bool _internal_has_controller_xbox_driver() const;
  public:
  void clear_controller_xbox_driver();
  bool controller_xbox_driver() const;
  void set_controller_xbox_driver(bool value);
  private:
  bool _internal_controller_xbox_driver() const;
  void _internal_set_controller_xbox_driver(bool value);
  public:

  // optional bool controller_switch_support = 14006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
  bool has_controller_switch_support() const;
  private:
  bool _internal_has_controller_switch_support() const;
  public:
  void clear_controller_switch_support();
  bool controller_switch_support() const;
  void set_controller_switch_support(bool value);
  private:
  bool _internal_controller_switch_support() const;
  void _internal_set_controller_switch_support(bool value);
  public:

  // optional uint64 startup_movie_id = 16000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
  bool has_startup_movie_id() const;
  private:
  bool _internal_has_startup_movie_id() const;
  public:
  void clear_startup_movie_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 startup_movie_id() const;
  void set_startup_movie_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_startup_movie_id() const;
  void _internal_set_startup_movie_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
  bool has_controller_power_off_timeout() const;
  private:
  bool _internal_has_controller_power_off_timeout() const;
  public:
  void clear_controller_power_off_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 controller_power_off_timeout() const;
  void set_controller_power_off_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_controller_power_off_timeout() const;
  void _internal_set_controller_power_off_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
  bool has_screenshot_items_per_row() const;
  private:
  bool _internal_has_screenshot_items_per_row() const;
  public:
  void clear_screenshot_items_per_row();
  ::PROTOBUF_NAMESPACE_ID::int32 screenshot_items_per_row() const;
  void set_screenshot_items_per_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screenshot_items_per_row() const;
  void _internal_set_screenshot_items_per_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 g_background_time_resolution = 18203 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_time_resolution() const;
  private:
  bool _internal_has_g_background_time_resolution() const;
  public:
  void clear_g_background_time_resolution();
  ::PROTOBUF_NAMESPACE_ID::int32 g_background_time_resolution() const;
  void set_g_background_time_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g_background_time_resolution() const;
  void _internal_set_g_background_time_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .EGRMode g_background_mode = 18212 [default = EGRMode_Never, (.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_mode() const;
  private:
  bool _internal_has_g_background_mode() const;
  public:
  void clear_g_background_mode();
  ::EGRMode g_background_mode() const;
  void set_g_background_mode(::EGRMode value);
  private:
  ::EGRMode _internal_g_background_mode() const;
  void _internal_set_g_background_mode(::EGRMode value);
  public:

  // optional .EGRAudio g_background_audio = 18213 [default = EGRAudio_Game, (.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_audio() const;
  private:
  bool _internal_has_g_background_audio() const;
  public:
  void clear_g_background_audio();
  ::EGRAudio g_background_audio() const;
  void set_g_background_audio(::EGRAudio value);
  private:
  ::EGRAudio _internal_g_background_audio() const;
  void _internal_set_g_background_audio(::EGRAudio value);
  public:

  // optional int32 g_max_fps = 18214 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\MaxFPS", (.setting_default_int) = 60, (.setting_clamp_min) = 24, (.setting_clamp_max) = 120];
  bool has_g_max_fps() const;
  private:
  bool _internal_has_g_max_fps() const;
  public:
  void clear_g_max_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 g_max_fps() const;
  void set_g_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g_max_fps() const;
  void _internal_set_g_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float gamerecording_ic_seconds = 18216 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipDuration", (.setting_default_float) = 30];
  bool has_gamerecording_ic_seconds() const;
  private:
  bool _internal_has_gamerecording_ic_seconds() const;
  public:
  void clear_gamerecording_ic_seconds();
  float gamerecording_ic_seconds() const;
  void set_gamerecording_ic_seconds(float value);
  private:
  float _internal_gamerecording_ic_seconds() const;
  void _internal_set_gamerecording_ic_seconds(float value);
  public:

  // optional .EGRExportLimitType gamerecording_export_limit_type = 18217 [default = EGRExportLimitType_Native, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitType"];
  bool has_gamerecording_export_limit_type() const;
  private:
  bool _internal_has_gamerecording_export_limit_type() const;
  public:
  void clear_gamerecording_export_limit_type();
  ::EGRExportLimitType gamerecording_export_limit_type() const;
  void set_gamerecording_export_limit_type(::EGRExportLimitType value);
  private:
  ::EGRExportLimitType _internal_gamerecording_export_limit_type() const;
  void _internal_set_gamerecording_export_limit_type(::EGRExportLimitType value);
  public:

  // optional int32 gamerecording_export_limit_size_mb = 18218 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitSize", (.setting_default_int) = 100];
  bool has_gamerecording_export_limit_size_mb() const;
  private:
  bool _internal_has_gamerecording_export_limit_size_mb() const;
  public:
  void clear_gamerecording_export_limit_size_mb();
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_size_mb() const;
  void set_gamerecording_export_limit_size_mb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamerecording_export_limit_size_mb() const;
  void _internal_set_gamerecording_export_limit_size_mb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool g_background_a_m = 18209 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_a_m() const;
  private:
  bool _internal_has_g_background_a_m() const;
  public:
  void clear_g_background_a_m();
  bool g_background_a_m() const;
  void set_g_background_a_m(bool value);
  private:
  bool _internal_g_background_a_m() const;
  void _internal_set_g_background_a_m(bool value);
  public:

  // optional bool g_background_a_s = 18211 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_g_background_a_s() const;
  private:
  bool _internal_has_g_background_a_s() const;
  public:
  void clear_g_background_a_s();
  bool g_background_a_s() const;
  void set_g_background_a_s(bool value);
  private:
  bool _internal_g_background_a_s() const;
  void _internal_set_g_background_a_s(bool value);
  public:

  // optional bool gamerecording_force_mic_mono = 18226 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ForceMicMono", (.setting_default_bool) = false];
  bool has_gamerecording_force_mic_mono() const;
  private:
  bool _internal_has_gamerecording_force_mic_mono() const;
  public:
  void clear_gamerecording_force_mic_mono();
  bool gamerecording_force_mic_mono() const;
  void set_gamerecording_force_mic_mono(bool value);
  private:
  bool _internal_gamerecording_force_mic_mono() const;
  void _internal_set_gamerecording_force_mic_mono(bool value);
  public:

  // optional bool gamerecording_automatic_gain_control = 18227 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\AutomaticGainControl", (.setting_default_bool) = true];
  bool has_gamerecording_automatic_gain_control() const;
  private:
  bool _internal_has_gamerecording_automatic_gain_control() const;
  public:
  void clear_gamerecording_automatic_gain_control();
  bool gamerecording_automatic_gain_control() const;
  void set_gamerecording_automatic_gain_control(bool value);
  private:
  bool _internal_gamerecording_automatic_gain_control() const;
  void _internal_set_gamerecording_automatic_gain_control(bool value);
  public:

  // optional int32 gamerecording_export_limit_bitrate = 18219 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitBitrate", (.setting_default_int) = 1];
  bool has_gamerecording_export_limit_bitrate() const;
  private:
  bool _internal_has_gamerecording_export_limit_bitrate() const;
  public:
  void clear_gamerecording_export_limit_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_bitrate() const;
  void set_gamerecording_export_limit_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamerecording_export_limit_bitrate() const;
  void _internal_set_gamerecording_export_limit_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gamerecording_export_limit_width = 18220 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitWidth", (.setting_default_int) = 3840];
  bool has_gamerecording_export_limit_width() const;
  private:
  bool _internal_has_gamerecording_export_limit_width() const;
  public:
  void clear_gamerecording_export_limit_width();
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_width() const;
  void set_gamerecording_export_limit_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamerecording_export_limit_width() const;
  void _internal_set_gamerecording_export_limit_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gamerecording_export_limit_height = 18221 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitHeight", (.setting_default_int) = 2160];
  bool has_gamerecording_export_limit_height() const;
  private:
  bool _internal_has_gamerecording_export_limit_height() const;
  public:
  void clear_gamerecording_export_limit_height();
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_height() const;
  void set_gamerecording_export_limit_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamerecording_export_limit_height() const;
  void _internal_set_gamerecording_export_limit_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gamerecording_export_limit_frame_rate = 18222 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitFrameRate", (.setting_default_int) = 60];
  bool has_gamerecording_export_limit_frame_rate() const;
  private:
  bool _internal_has_gamerecording_export_limit_frame_rate() const;
  public:
  void clear_gamerecording_export_limit_frame_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_frame_rate() const;
  void set_gamerecording_export_limit_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamerecording_export_limit_frame_rate() const;
  void _internal_set_gamerecording_export_limit_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .EExportCodec gamerecording_export_codec = 18224 [default = EExportCodec_Default, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportCodec"];
  bool has_gamerecording_export_codec() const;
  private:
  bool _internal_has_gamerecording_export_codec() const;
  public:
  void clear_gamerecording_export_codec();
  ::EExportCodec gamerecording_export_codec() const;
  void set_gamerecording_export_codec(::EExportCodec value);
  private:
  ::EExportCodec _internal_gamerecording_export_codec() const;
  void _internal_set_gamerecording_export_codec(::EExportCodec value);
  public:

  // optional int32 gamerecording_video_maxheight = 18225 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoMaxHeight", (.setting_default_int) = 0, (.setting_clamp_min) = 0, (.setting_clamp_max) = 2160];
  bool has_gamerecording_video_maxheight() const;
  private:
  bool _internal_has_gamerecording_video_maxheight() const;
  public:
  void clear_gamerecording_video_maxheight();
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_video_maxheight() const;
  void set_gamerecording_video_maxheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamerecording_video_maxheight() const;
  void _internal_set_gamerecording_video_maxheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 override_browser_composer_mode = 20002 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_override_browser_composer_mode() const;
  private:
  bool _internal_has_override_browser_composer_mode() const;
  public:
  void clear_override_browser_composer_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 override_browser_composer_mode() const;
  void set_override_browser_composer_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_override_browser_composer_mode() const;
  void _internal_set_override_browser_composer_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool show_timestamps_in_console = 20000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
  bool has_show_timestamps_in_console() const;
  private:
  bool _internal_has_show_timestamps_in_console() const;
  public:
  void clear_show_timestamps_in_console();
  bool show_timestamps_in_console() const;
  void set_show_timestamps_in_console(bool value);
  private:
  bool _internal_show_timestamps_in_console() const;
  void _internal_set_show_timestamps_in_console(bool value);
  public:

  // optional bool force_oobe = 20001 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\ForceOOBE"];
  bool has_force_oobe() const;
  private:
  bool _internal_has_force_oobe() const;
  public:
  void clear_force_oobe();
  bool force_oobe() const;
  void set_force_oobe(bool value);
  private:
  bool _internal_force_oobe() const;
  void _internal_set_force_oobe(bool value);
  public:

  // optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_cef_remote_debugging_enabled() const;
  private:
  bool _internal_has_cef_remote_debugging_enabled() const;
  public:
  void clear_cef_remote_debugging_enabled();
  bool cef_remote_debugging_enabled() const;
  void set_cef_remote_debugging_enabled(bool value);
  private:
  bool _internal_cef_remote_debugging_enabled() const;
  void _internal_set_cef_remote_debugging_enabled(bool value);
  public:

  // optional bool force_decperf_tab = 20004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];
  bool has_force_decperf_tab() const;
  private:
  bool _internal_has_force_decperf_tab() const;
  public:
  void clear_force_decperf_tab();
  bool force_decperf_tab() const;
  void set_force_decperf_tab(bool value);
  private:
  bool _internal_force_decperf_tab() const;
  void _internal_set_force_decperf_tab(bool value);
  public:

  // optional bool force_fake_mandatory_update = 20005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];
  bool has_force_fake_mandatory_update() const;
  private:
  bool _internal_has_force_fake_mandatory_update() const;
  public:
  void clear_force_fake_mandatory_update();
  bool force_fake_mandatory_update() const;
  void set_force_fake_mandatory_update(bool value);
  private:
  bool _internal_force_fake_mandatory_update() const;
  void _internal_set_force_fake_mandatory_update(bool value);
  public:

  // optional bool hdr_compat_testing = 20006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/HDRCompatTesting"];
  bool has_hdr_compat_testing() const;
  private:
  bool _internal_has_hdr_compat_testing() const;
  public:
  void clear_hdr_compat_testing();
  bool hdr_compat_testing() const;
  void set_hdr_compat_testing(bool value);
  private:
  bool _internal_hdr_compat_testing() const;
  void _internal_set_hdr_compat_testing(bool value);
  public:

  // optional bool developer_mode_enabled = 20007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/DevModeEnabled"];
  bool has_developer_mode_enabled() const;
  private:
  bool _internal_has_developer_mode_enabled() const;
  public:
  void clear_developer_mode_enabled();
  bool developer_mode_enabled() const;
  void set_developer_mode_enabled(bool value);
  private:
  bool _internal_developer_mode_enabled() const;
  void _internal_set_developer_mode_enabled(bool value);
  public:

  // optional bool show_advanced_update_channels = 20008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ShowAdvancedUpdateChannels"];
  bool has_show_advanced_update_channels() const;
  private:
  bool _internal_has_show_advanced_update_channels() const;
  public:
  void clear_show_advanced_update_channels();
  bool show_advanced_update_channels() const;
  void set_show_advanced_update_channels(bool value);
  private:
  bool _internal_show_advanced_update_channels() const;
  void _internal_set_show_advanced_update_channels(bool value);
  public:

  // optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];
  bool has_gamescope_hdr_visualization() const;
  private:
  bool _internal_has_gamescope_hdr_visualization() const;
  public:
  void clear_gamescope_hdr_visualization();
  ::EHDRVisualization gamescope_hdr_visualization() const;
  void set_gamescope_hdr_visualization(::EHDRVisualization value);
  private:
  ::EHDRVisualization _internal_gamescope_hdr_visualization() const;
  void _internal_set_gamescope_hdr_visualization(::EHDRVisualization value);
  public:

  // optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
  bool has_gamescope_app_target_framerate() const;
  private:
  bool _internal_has_gamescope_app_target_framerate() const;
  public:
  void clear_gamescope_app_target_framerate();
  ::PROTOBUF_NAMESPACE_ID::int32 gamescope_app_target_framerate() const;
  void set_gamescope_app_target_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamescope_app_target_framerate() const;
  void _internal_set_gamescope_app_target_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
  bool has_gamescope_display_refresh_rate() const;
  private:
  bool _internal_has_gamescope_display_refresh_rate() const;
  public:
  void clear_gamescope_display_refresh_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 gamescope_display_refresh_rate() const;
  void set_gamescope_display_refresh_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamescope_display_refresh_rate() const;
  void _internal_set_gamescope_display_refresh_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];
  bool has_gamescope_enable_app_target_framerate() const;
  private:
  bool _internal_has_gamescope_enable_app_target_framerate() const;
  public:
  void clear_gamescope_enable_app_target_framerate();
  bool gamescope_enable_app_target_framerate() const;
  void set_gamescope_enable_app_target_framerate(bool value);
  private:
  bool _internal_gamescope_enable_app_target_framerate() const;
  void _internal_set_gamescope_enable_app_target_framerate(bool value);
  public:

  // optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
  bool has_gamescope_disable_framelimit() const;
  private:
  bool _internal_has_gamescope_disable_framelimit() const;
  public:
  void clear_gamescope_disable_framelimit();
  bool gamescope_disable_framelimit() const;
  void set_gamescope_disable_framelimit(bool value);
  private:
  bool _internal_gamescope_disable_framelimit() const;
  void _internal_set_gamescope_disable_framelimit(bool value);
  public:

  // optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];
  bool has_gamescope_use_game_refresh_rate_in_steam() const;
  private:
  bool _internal_has_gamescope_use_game_refresh_rate_in_steam() const;
  public:
  void clear_gamescope_use_game_refresh_rate_in_steam();
  bool gamescope_use_game_refresh_rate_in_steam() const;
  void set_gamescope_use_game_refresh_rate_in_steam(bool value);
  private:
  bool _internal_gamescope_use_game_refresh_rate_in_steam() const;
  void _internal_set_gamescope_use_game_refresh_rate_in_steam(bool value);
  public:

  // optional bool gamescope_disable_mura_correction = 21007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/MuraCorrectionDisabled", (.setting_default_bool) = false];
  bool has_gamescope_disable_mura_correction() const;
  private:
  bool _internal_has_gamescope_disable_mura_correction() const;
  public:
  void clear_gamescope_disable_mura_correction();
  bool gamescope_disable_mura_correction() const;
  void set_gamescope_disable_mura_correction(bool value);
  private:
  bool _internal_gamescope_disable_mura_correction() const;
  void _internal_set_gamescope_disable_mura_correction(bool value);
  public:

  // optional bool gamescope_include_steamui_in_screenshots = 21008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/IncludeSteamUIInScreenshots", (.setting_default_bool) = true];
  bool has_gamescope_include_steamui_in_screenshots() const;
  private:
  bool _internal_has_gamescope_include_steamui_in_screenshots() const;
  public:
  void clear_gamescope_include_steamui_in_screenshots();
  bool gamescope_include_steamui_in_screenshots() const;
  void set_gamescope_include_steamui_in_screenshots(bool value);
  private:
  bool _internal_gamescope_include_steamui_in_screenshots() const;
  void _internal_set_gamescope_include_steamui_in_screenshots(bool value);
  public:

  // optional bool gamescope_allow_tearing = 21009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AllowTearing", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  bool has_gamescope_allow_tearing() const;
  private:
  bool _internal_has_gamescope_allow_tearing() const;
  public:
  void clear_gamescope_allow_tearing();
  bool gamescope_allow_tearing() const;
  void set_gamescope_allow_tearing(bool value);
  private:
  bool _internal_gamescope_allow_tearing() const;
  void _internal_set_gamescope_allow_tearing(bool value);
  public:

  // optional bool gamescope_composite_debug = 21010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/CompositeDebug", (.setting_default_bool) = false];
  bool has_gamescope_composite_debug() const;
  private:
  bool _internal_has_gamescope_composite_debug() const;
  public:
  void clear_gamescope_composite_debug();
  bool gamescope_composite_debug() const;
  void set_gamescope_composite_debug(bool value);
  private:
  bool _internal_gamescope_composite_debug() const;
  void _internal_set_gamescope_composite_debug(bool value);
  public:

  // optional bool gamescope_force_composite = 21011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/ForceComposite", (.setting_default_bool) = false];
  bool has_gamescope_force_composite() const;
  private:
  bool _internal_has_gamescope_force_composite() const;
  public:
  void clear_gamescope_force_composite();
  bool gamescope_force_composite() const;
  void set_gamescope_force_composite(bool value);
  private:
  bool _internal_gamescope_force_composite() const;
  void _internal_set_gamescope_force_composite(bool value);
  public:

  // optional bool gamescope_hdr_enabled = 21015 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Gamescope/HDREnabled", (.setting_default_bool) = true, (.setting_profile_mode) = ESettingProfileMode_PerDisplay];
  bool has_gamescope_hdr_enabled() const;
  private:
  bool _internal_has_gamescope_hdr_enabled() const;
  public:
  void clear_gamescope_hdr_enabled();
  bool gamescope_hdr_enabled() const;
  void set_gamescope_hdr_enabled(bool value);
  private:
  bool _internal_gamescope_hdr_enabled() const;
  void _internal_set_gamescope_hdr_enabled(bool value);
  public:

  // optional bool gamescope_native_external_res_in_steam = 21016 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Gamescope/EnableSteamNativeExternalResolution"];
  bool has_gamescope_native_external_res_in_steam() const;
  private:
  bool _internal_has_gamescope_native_external_res_in_steam() const;
  public:
  void clear_gamescope_native_external_res_in_steam();
  bool gamescope_native_external_res_in_steam() const;
  void set_gamescope_native_external_res_in_steam(bool value);
  private:
  bool _internal_gamescope_native_external_res_in_steam() const;
  void _internal_set_gamescope_native_external_res_in_steam(bool value);
  public:

  // optional bool steamos_tdp_limit_enabled = 22001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimitEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  bool has_steamos_tdp_limit_enabled() const;
  private:
  bool _internal_has_steamos_tdp_limit_enabled() const;
  public:
  void clear_steamos_tdp_limit_enabled();
  bool steamos_tdp_limit_enabled() const;
  void set_steamos_tdp_limit_enabled(bool value);
  private:
  bool _internal_steamos_tdp_limit_enabled() const;
  void _internal_set_steamos_tdp_limit_enabled(bool value);
  public:

  // optional bool steamos_cec_enabled = 22003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/CECEnabled", (.setting_default_bool) = true];
  bool has_steamos_cec_enabled() const;
  private:
  bool _internal_has_steamos_cec_enabled() const;
  public:
  void clear_steamos_cec_enabled();
  bool steamos_cec_enabled() const;
  void set_steamos_cec_enabled(bool value);
  private:
  bool _internal_steamos_cec_enabled() const;
  void _internal_set_steamos_cec_enabled(bool value);
  public:

  // optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];
  bool has_steamos_status_led_brightness() const;
  private:
  bool _internal_has_steamos_status_led_brightness() const;
  public:
  void clear_steamos_status_led_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_status_led_brightness() const;
  void set_steamos_status_led_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steamos_status_led_brightness() const;
  void _internal_set_steamos_status_led_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 steamos_tdp_limit = 22002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimit", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  bool has_steamos_tdp_limit() const;
  private:
  bool _internal_has_steamos_tdp_limit() const;
  public:
  void clear_steamos_tdp_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_tdp_limit() const;
  void set_steamos_tdp_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steamos_tdp_limit() const;
  void _internal_set_steamos_tdp_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool steamos_cec_wake_on_resume = 22004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WakeOnResume", (.setting_default_bool) = true];
  bool has_steamos_cec_wake_on_resume() const;
  private:
  bool _internal_has_steamos_cec_wake_on_resume() const;
  public:
  void clear_steamos_cec_wake_on_resume();
  bool steamos_cec_wake_on_resume() const;
  void set_steamos_cec_wake_on_resume(bool value);
  private:
  bool _internal_steamos_cec_wake_on_resume() const;
  void _internal_set_steamos_cec_wake_on_resume(bool value);
  public:

  // optional bool steamos_wifi_debug = 22005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiDebug", (.setting_default_bool) = false];
  bool has_steamos_wifi_debug() const;
  private:
  bool _internal_has_steamos_wifi_debug() const;
  public:
  void clear_steamos_wifi_debug();
  bool steamos_wifi_debug() const;
  void set_steamos_wifi_debug(bool value);
  private:
  bool _internal_steamos_wifi_debug() const;
  void _internal_set_steamos_wifi_debug(bool value);
  public:

  // optional bool steamos_wifi_force_wpa_supplicant = 22006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiForceWPASupplicant", (.setting_default_bool) = false];
  bool has_steamos_wifi_force_wpa_supplicant() const;
  private:
  bool _internal_has_steamos_wifi_force_wpa_supplicant() const;
  public:
  void clear_steamos_wifi_force_wpa_supplicant();
  bool steamos_wifi_force_wpa_supplicant() const;
  void set_steamos_wifi_force_wpa_supplicant(bool value);
  private:
  bool _internal_steamos_wifi_force_wpa_supplicant() const;
  void _internal_set_steamos_wifi_force_wpa_supplicant(bool value);
  public:

  // optional bool steamos_manual_gpu_clocenabled = 22008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/ManualGPUClockEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  bool has_steamos_manual_gpu_clocenabled() const;
  private:
  bool _internal_has_steamos_manual_gpu_clocenabled() const;
  public:
  void clear_steamos_manual_gpu_clocenabled();
  bool steamos_manual_gpu_clocenabled() const;
  void set_steamos_manual_gpu_clocenabled(bool value);
  private:
  bool _internal_steamos_manual_gpu_clocenabled() const;
  void _internal_set_steamos_manual_gpu_clocenabled(bool value);
  public:

  // optional int32 steamos_magnifier_scale = 22007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/MagnifierScale", (.setting_default_int) = 150];
  bool has_steamos_magnifier_scale() const;
  private:
  bool _internal_has_steamos_magnifier_scale() const;
  public:
  void clear_steamos_magnifier_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_magnifier_scale() const;
  void set_steamos_magnifier_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steamos_magnifier_scale() const;
  void _internal_set_steamos_magnifier_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 steamos_manual_gpu_clochz = 22009 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/ManualGPUClockHz", (.setting_default_int) = 1000, (.setting_profile_mode) = ESettingProfileMode_PerGame];
  bool has_steamos_manual_gpu_clochz() const;
  private:
  bool _internal_has_steamos_manual_gpu_clochz() const;
  public:
  void clear_steamos_manual_gpu_clochz();
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_manual_gpu_clochz() const;
  void set_steamos_manual_gpu_clochz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steamos_manual_gpu_clochz() const;
  void _internal_set_steamos_manual_gpu_clochz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .EHDRVisualization setting_validation_enum = 23002 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyEnum"];
  bool has_setting_validation_enum() const;
  private:
  bool _internal_has_setting_validation_enum() const;
  public:
  void clear_setting_validation_enum();
  ::EHDRVisualization setting_validation_enum() const;
  void set_setting_validation_enum(::EHDRVisualization value);
  private:
  ::EHDRVisualization _internal_setting_validation_enum() const;
  void _internal_set_setting_validation_enum(::EHDRVisualization value);
  public:

  // optional int32 setting_validation_int32 = 23003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyInt32"];
  bool has_setting_validation_int32() const;
  private:
  bool _internal_has_setting_validation_int32() const;
  public:
  void clear_setting_validation_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 setting_validation_int32() const;
  void set_setting_validation_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setting_validation_int32() const;
  void _internal_set_setting_validation_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 setting_validation_uint64 = 23005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt64"];
  bool has_setting_validation_uint64() const;
  private:
  bool _internal_has_setting_validation_uint64() const;
  public:
  void clear_setting_validation_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 setting_validation_uint64() const;
  void set_setting_validation_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_setting_validation_uint64() const;
  void _internal_set_setting_validation_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 setting_validation_uint32 = 23004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt32"];
  bool has_setting_validation_uint32() const;
  private:
  bool _internal_has_setting_validation_uint32() const;
  public:
  void clear_setting_validation_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 setting_validation_uint32() const;
  void set_setting_validation_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setting_validation_uint32() const;
  void _internal_set_setting_validation_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float setting_validation_float = 23006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyFloat"];
  bool has_setting_validation_float() const;
  private:
  bool _internal_has_setting_validation_float() const;
  public:
  void clear_setting_validation_float();
  float setting_validation_float() const;
  void set_setting_validation_float(float value);
  private:
  float _internal_setting_validation_float() const;
  void _internal_set_setting_validation_float(float value);
  public:

  // optional bool setting_validation_bool = 23001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyBool"];
  bool has_setting_validation_bool() const;
  private:
  bool _internal_has_setting_validation_bool() const;
  public:
  void clear_setting_validation_bool();
  bool setting_validation_bool() const;
  void set_setting_validation_bool(bool value);
  private:
  bool _internal_setting_validation_bool() const;
  void _internal_set_setting_validation_bool(bool value);
  public:

  // optional bool system_bluetooth_enabled = 24000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/Bluetooth/Enabled", (.setting_default_bool) = false];
  bool has_system_bluetooth_enabled() const;
  private:
  bool _internal_has_system_bluetooth_enabled() const;
  public:
  void clear_system_bluetooth_enabled();
  bool system_bluetooth_enabled() const;
  void set_system_bluetooth_enabled(bool value);
  private:
  bool _internal_system_bluetooth_enabled() const;
  void _internal_set_system_bluetooth_enabled(bool value);
  public:

  // optional bool hardware_updater_enabled = 24001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/HardwareUpdater/Enabled", (.setting_default_bool) = false];
  bool has_hardware_updater_enabled() const;
  private:
  bool _internal_has_hardware_updater_enabled() const;
  public:
  void clear_hardware_updater_enabled();
  bool hardware_updater_enabled() const;
  void set_hardware_updater_enabled(bool value);
  private:
  bool _internal_hardware_updater_enabled() const;
  void _internal_set_hardware_updater_enabled(bool value);
  public:

  // optional bool vr_show_perf_graph_in_hmd = 25000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "VR/ShowPerfGraphInHMD", (.setting_default_bool) = false];
  bool has_vr_show_perf_graph_in_hmd() const;
  private:
  bool _internal_has_vr_show_perf_graph_in_hmd() const;
  public:
  void clear_vr_show_perf_graph_in_hmd();
  bool vr_show_perf_graph_in_hmd() const;
  void set_vr_show_perf_graph_in_hmd(bool value);
  private:
  bool _internal_vr_show_perf_graph_in_hmd() const;
  void _internal_set_vr_show_perf_graph_in_hmd(bool value);
  public:

  // optional bool controller_generic_support = 14007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
  bool has_controller_generic_support() const;
  private:
  bool _internal_has_controller_generic_support() const;
  public:
  void clear_controller_generic_support();
  bool controller_generic_support() const;
  void set_controller_generic_support(bool value);
  private:
  bool _internal_controller_generic_support() const;
  void _internal_set_controller_generic_support(bool value);
  public:

  // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
  bool has_turn_off_controller_on_exit() const;
  private:
  bool _internal_has_turn_off_controller_on_exit() const;
  public:
  void clear_turn_off_controller_on_exit();
  bool turn_off_controller_on_exit() const;
  void set_turn_off_controller_on_exit(bool value);
  private:
  bool _internal_turn_off_controller_on_exit() const;
  void _internal_set_turn_off_controller_on_exit(bool value);
  public:

  // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = EClientSettingStore_CustomFunc];
  bool has_controller_combine_nintendo_joycons() const;
  private:
  bool _internal_has_controller_combine_nintendo_joycons() const;
  public:
  void clear_controller_combine_nintendo_joycons();
  bool controller_combine_nintendo_joycons() const;
  void set_controller_combine_nintendo_joycons(bool value);
  private:
  bool _internal_controller_combine_nintendo_joycons() const;
  void _internal_set_controller_combine_nintendo_joycons(bool value);
  public:

  // optional bool controller_enable_chord = 140011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Enable_Chord", (.setting_default_bool) = true];
  bool has_controller_enable_chord() const;
  private:
  bool _internal_has_controller_enable_chord() const;
  public:
  void clear_controller_enable_chord();
  bool controller_enable_chord() const;
  void set_controller_enable_chord(bool value);
  private:
  bool _internal_controller_enable_chord() const;
  void _internal_set_controller_enable_chord(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<6> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_monitor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenshots_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr web_browser_home_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_mic_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overlay_tabs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startup_movie_local_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_background_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_background_max_keep_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamerecording_video_bitrate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamerecording_export_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamescope_game_resolution_global_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_validation_string_;
  ::CMsgHotkey* overlay_key_;
  ::CMsgHotkey* screenshot_key_;
  ::CMsgHotkey* voice_push_to_talkey_;
  ::CMsgHotkey* g_background_mk_;
  ::CMsgHotkey* g_background_tg_;
  ::CMsgHotkey* gamerecording_hotkey_ic_;
  ::CMsgHotkey* gamescope_guide_hotkey_;
  ::CMsgHotkey* gamescope_qam_hotkey_;
  ::CMsgHotkey* setting_validation_hotkey_;
  bool no_save_personal_info_;
  bool oobe_test_mode_enabled_;
  bool in_client_beta_;
  bool is_steam_sideloaded_;
  bool steam_cef_gpu_blocklist_disabled_;
  bool bigpicture_windowed_;
  bool is_external_display_;
  bool steam_os_underscan_enabled_;
  float steam_os_underscan_level_;
  float min_scale_factor_;
  float max_scale_factor_;
  float auto_scale_factor_;
  bool controller_poll_rate_;
  bool startup_movie_shuffle_;
  bool startup_movie_used_for_resume_;
  bool game_notes_enable_spellcheck_;
  bool small_mode_;
  bool skip_steamvr_install_dialog_;
  bool always_show_user_chooser_;
  bool os_version_unsupported_;
  bool show_family_sharing_notifications_;
  bool show_copy_count_in_library_;
  bool overlay_fps_counter_high_contrast_;
  bool enable_overlay_;
  ::PROTOBUF_NAMESPACE_ID::int32 overlay_fps_counter_corner_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_ping_rate_;
  bool enable_screenshot_notification_;
  bool enable_screenshot_sound_;
  bool save_uncompressed_screenshots_;
  bool overlay_toolbar_list_view_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_ping_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 steam_networking_share_ip_;
  float voice_mic_input_gain_;
  float voice_speaker_output_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 voice_push_to_talsetting_;
  bool always_use_gamepadui_overlay_;
  bool overlay_scale_interface_;
  bool overlay_restore_browser_tabs_;
  bool enable_avif_screenshots_;
  bool smooth_scroll_webviews_;
  bool enable_gpu_accelerated_webviews_;
  bool enable_hardware_video_decoding_;
  bool run_at_startup_;
  bool enable_dpi_scaling_;
  bool enable_marketing_messages_;
  bool start_in_big_picture_mode_;
  bool enable_ui_sounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jumplist_flags_;
  bool disable_all_toasts_;
  bool disable_toasts_in_game_;
  bool play_sound_on_toast_;
  bool library_whats_new_show_only_product_updates_;
  ::PROTOBUF_NAMESPACE_ID::int32 library_display_size_;
  bool show_store_content_on_home_;
  bool library_low_bandwidth_mode_;
  bool library_low_perf_mode_;
  bool library_disable_community_content_;
  bool library_display_icon_in_game_list_;
  bool ready_to_play_includes_streaming_;
  bool show_steam_decinfo_;
  bool enable_shader_precache_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shader_precached_size_;
  bool enable_shader_background_processing_;
  bool needs_steam_service_repair_;
  bool download_rate_bits_per_s_;
  bool restrict_auto_updates_;
  ::PROTOBUF_NAMESPACE_ID::int32 download_peer_content_;
  ::PROTOBUF_NAMESPACE_ID::int32 restrict_auto_updates_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 restrict_auto_updates_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 download_region_;
  ::PROTOBUF_NAMESPACE_ID::int32 download_throttle_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_app_update_behavior_;
  bool download_while_app_running_;
  bool download_throttle_while_streaming_;
  bool cloud_enabled_;
  bool show_screenshot_manager_;
  ::PROTOBUF_NAMESPACE_ID::int32 music_volume_;
  bool music_pause_on_app_start_;
  bool music_pause_on_voice_chat_;
  bool music_download_high_quality_;
  bool music_playlist_notification_;
  int broadcast_permissions_;
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_output_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_output_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_bitrate_;
  int broadcast_encoding_option_;
  bool broadcast_record_all_video_;
  bool broadcast_record_all_audio_;
  bool broadcast_record_microphone_;
  bool broadcast_show_upload_stats_;
  ::PROTOBUF_NAMESPACE_ID::int32 broadcast_chat_corner_;
  bool broadcast_show_live_reminder_;
  bool gamestream_hardware_video_encode_;
  bool gamestream_enable_video_h265_;
  bool steam_input_configurator_error_msg_enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 controller_ps_support_;
  bool controller_guide_button_focus_steam_;
  bool controller_xbox_support_;
  bool controller_xbox_driver_;
  bool controller_switch_support_;
  ::PROTOBUF_NAMESPACE_ID::uint64 startup_movie_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 controller_power_off_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 screenshot_items_per_row_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_background_time_resolution_;
  int g_background_mode_;
  int g_background_audio_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_max_fps_;
  float gamerecording_ic_seconds_;
  int gamerecording_export_limit_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_size_mb_;
  bool g_background_a_m_;
  bool g_background_a_s_;
  bool gamerecording_force_mic_mono_;
  bool gamerecording_automatic_gain_control_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_bitrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_export_limit_frame_rate_;
  int gamerecording_export_codec_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamerecording_video_maxheight_;
  ::PROTOBUF_NAMESPACE_ID::int32 override_browser_composer_mode_;
  bool show_timestamps_in_console_;
  bool force_oobe_;
  bool cef_remote_debugging_enabled_;
  bool force_decperf_tab_;
  bool force_fake_mandatory_update_;
  bool hdr_compat_testing_;
  bool developer_mode_enabled_;
  bool show_advanced_update_channels_;
  int gamescope_hdr_visualization_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamescope_app_target_framerate_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamescope_display_refresh_rate_;
  bool gamescope_enable_app_target_framerate_;
  bool gamescope_disable_framelimit_;
  bool gamescope_use_game_refresh_rate_in_steam_;
  bool gamescope_disable_mura_correction_;
  bool gamescope_include_steamui_in_screenshots_;
  bool gamescope_allow_tearing_;
  bool gamescope_composite_debug_;
  bool gamescope_force_composite_;
  bool gamescope_hdr_enabled_;
  bool gamescope_native_external_res_in_steam_;
  bool steamos_tdp_limit_enabled_;
  bool steamos_cec_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_status_led_brightness_;
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_tdp_limit_;
  bool steamos_cec_wake_on_resume_;
  bool steamos_wifi_debug_;
  bool steamos_wifi_force_wpa_supplicant_;
  bool steamos_manual_gpu_clocenabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_magnifier_scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 steamos_manual_gpu_clochz_;
  int setting_validation_enum_;
  ::PROTOBUF_NAMESPACE_ID::int32 setting_validation_int32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 setting_validation_uint64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 setting_validation_uint32_;
  float setting_validation_float_;
  bool setting_validation_bool_;
  bool system_bluetooth_enabled_;
  bool hardware_updater_enabled_;
  bool vr_show_perf_graph_in_hmd_;
  bool controller_generic_support_;
  bool turn_off_controller_on_exit_;
  bool controller_combine_nintendo_joycons_;
  bool controller_enable_chord_;
  friend struct ::TableStruct_steammessages_5fclientsettings_2eproto;
};
// ===================================================================

static const int kSettingStoreFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::EClientSettingStore, ::EClientSettingStore_IsValid>, 14, false >
  setting_store;
static const int kSettingNameFieldNumber = 60001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_name;
static const int kSettingPreLoginFieldNumber = 60002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_pre_login;
static const int kSettingDefaultBoolFieldNumber = 60003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_default_bool;
static const int kSettingDefaultIntFieldNumber = 60004;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  setting_default_int;
static const int kSettingDefaultUintFieldNumber = 60005;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  setting_default_uint;
static const int kSettingDefaultFloatFieldNumber = 60006;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  setting_default_float;
static const int kSettingDefaultStringFieldNumber = 60007;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_default_string;
static const int kSettingReadonlyFieldNumber = 60008;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_readonly;
static const int kSettingDescriptionFieldNumber = 60009;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_description;
static const int kSettingProfileModeFieldNumber = 60010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::ESettingProfileMode, ::ESettingProfileMode_IsValid>, 14, false >
  setting_profile_mode;
static const int kSettingClampMinFieldNumber = 60011;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  setting_clamp_min;
static const int kSettingClampMaxFieldNumber = 60012;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  setting_clamp_max;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgHotkey

// optional uint32 key_code = 1;
inline bool CMsgHotkey::_internal_has_key_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHotkey::has_key_code() const {
  return _internal_has_key_code();
}
inline void CMsgHotkey::clear_key_code() {
  key_code_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHotkey::_internal_key_code() const {
  return key_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgHotkey::key_code() const {
  // @@protoc_insertion_point(field_get:CMsgHotkey.key_code)
  return _internal_key_code();
}
inline void CMsgHotkey::_internal_set_key_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_code_ = value;
}
inline void CMsgHotkey::set_key_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_code(value);
  // @@protoc_insertion_point(field_set:CMsgHotkey.key_code)
}

// optional bool alt_key = 2;
inline bool CMsgHotkey::_internal_has_alt_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgHotkey::has_alt_key() const {
  return _internal_has_alt_key();
}
inline void CMsgHotkey::clear_alt_key() {
  alt_key_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgHotkey::_internal_alt_key() const {
  return alt_key_;
}
inline bool CMsgHotkey::alt_key() const {
  // @@protoc_insertion_point(field_get:CMsgHotkey.alt_key)
  return _internal_alt_key();
}
inline void CMsgHotkey::_internal_set_alt_key(bool value) {
  _has_bits_[0] |= 0x00000004u;
  alt_key_ = value;
}
inline void CMsgHotkey::set_alt_key(bool value) {
  _internal_set_alt_key(value);
  // @@protoc_insertion_point(field_set:CMsgHotkey.alt_key)
}

// optional bool shift_key = 3;
inline bool CMsgHotkey::_internal_has_shift_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgHotkey::has_shift_key() const {
  return _internal_has_shift_key();
}
inline void CMsgHotkey::clear_shift_key() {
  shift_key_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgHotkey::_internal_shift_key() const {
  return shift_key_;
}
inline bool CMsgHotkey::shift_key() const {
  // @@protoc_insertion_point(field_get:CMsgHotkey.shift_key)
  return _internal_shift_key();
}
inline void CMsgHotkey::_internal_set_shift_key(bool value) {
  _has_bits_[0] |= 0x00000008u;
  shift_key_ = value;
}
inline void CMsgHotkey::set_shift_key(bool value) {
  _internal_set_shift_key(value);
  // @@protoc_insertion_point(field_set:CMsgHotkey.shift_key)
}

// optional bool ctrl_key = 4;
inline bool CMsgHotkey::_internal_has_ctrl_key() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgHotkey::has_ctrl_key() const {
  return _internal_has_ctrl_key();
}
inline void CMsgHotkey::clear_ctrl_key() {
  ctrl_key_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgHotkey::_internal_ctrl_key() const {
  return ctrl_key_;
}
inline bool CMsgHotkey::ctrl_key() const {
  // @@protoc_insertion_point(field_get:CMsgHotkey.ctrl_key)
  return _internal_ctrl_key();
}
inline void CMsgHotkey::_internal_set_ctrl_key(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ctrl_key_ = value;
}
inline void CMsgHotkey::set_ctrl_key(bool value) {
  _internal_set_ctrl_key(value);
  // @@protoc_insertion_point(field_set:CMsgHotkey.ctrl_key)
}

// optional bool meta_key = 5;
inline bool CMsgHotkey::_internal_has_meta_key() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgHotkey::has_meta_key() const {
  return _internal_has_meta_key();
}
inline void CMsgHotkey::clear_meta_key() {
  meta_key_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgHotkey::_internal_meta_key() const {
  return meta_key_;
}
inline bool CMsgHotkey::meta_key() const {
  // @@protoc_insertion_point(field_get:CMsgHotkey.meta_key)
  return _internal_meta_key();
}
inline void CMsgHotkey::_internal_set_meta_key(bool value) {
  _has_bits_[0] |= 0x00000020u;
  meta_key_ = value;
}
inline void CMsgHotkey::set_meta_key(bool value) {
  _internal_set_meta_key(value);
  // @@protoc_insertion_point(field_set:CMsgHotkey.meta_key)
}

// optional string display_name = 6;
inline bool CMsgHotkey::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHotkey::has_display_name() const {
  return _internal_has_display_name();
}
inline void CMsgHotkey::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgHotkey::display_name() const {
  // @@protoc_insertion_point(field_get:CMsgHotkey.display_name)
  return _internal_display_name();
}
inline void CMsgHotkey::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:CMsgHotkey.display_name)
}
inline std::string* CMsgHotkey::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:CMsgHotkey.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& CMsgHotkey::_internal_display_name() const {
  return display_name_.Get();
}
inline void CMsgHotkey::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgHotkey::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgHotkey.display_name)
}
inline void CMsgHotkey::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgHotkey.display_name)
}
inline void CMsgHotkey::set_display_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgHotkey.display_name)
}
inline std::string* CMsgHotkey::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgHotkey::release_display_name() {
  // @@protoc_insertion_point(field_release:CMsgHotkey.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgHotkey::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgHotkey.display_name)
}

// -------------------------------------------------------------------

// CMsgSettingVariant

// bool value_bool = 1;
inline bool CMsgSettingVariant::_internal_has_value_bool() const {
  return value_case() == kValueBool;
}
inline bool CMsgSettingVariant::has_value_bool() const {
  return _internal_has_value_bool();
}
inline void CMsgSettingVariant::set_has_value_bool() {
  _oneof_case_[0] = kValueBool;
}
inline void CMsgSettingVariant::clear_value_bool() {
  if (_internal_has_value_bool()) {
    value_.value_bool_ = false;
    clear_has_value();
  }
}
inline bool CMsgSettingVariant::_internal_value_bool() const {
  if (_internal_has_value_bool()) {
    return value_.value_bool_;
  }
  return false;
}
inline void CMsgSettingVariant::_internal_set_value_bool(bool value) {
  if (!_internal_has_value_bool()) {
    clear_value();
    set_has_value_bool();
  }
  value_.value_bool_ = value;
}
inline bool CMsgSettingVariant::value_bool() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_bool)
  return _internal_value_bool();
}
inline void CMsgSettingVariant::set_value_bool(bool value) {
  _internal_set_value_bool(value);
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_bool)
}

// int32 value_int32 = 2;
inline bool CMsgSettingVariant::_internal_has_value_int32() const {
  return value_case() == kValueInt32;
}
inline bool CMsgSettingVariant::has_value_int32() const {
  return _internal_has_value_int32();
}
inline void CMsgSettingVariant::set_has_value_int32() {
  _oneof_case_[0] = kValueInt32;
}
inline void CMsgSettingVariant::clear_value_int32() {
  if (_internal_has_value_int32()) {
    value_.value_int32_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSettingVariant::_internal_value_int32() const {
  if (_internal_has_value_int32()) {
    return value_.value_int32_;
  }
  return 0;
}
inline void CMsgSettingVariant::_internal_set_value_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_value_int32()) {
    clear_value();
    set_has_value_int32();
  }
  value_.value_int32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgSettingVariant::value_int32() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_int32)
  return _internal_value_int32();
}
inline void CMsgSettingVariant::set_value_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_int32(value);
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_int32)
}

// uint32 value_uint32 = 3;
inline bool CMsgSettingVariant::_internal_has_value_uint32() const {
  return value_case() == kValueUint32;
}
inline bool CMsgSettingVariant::has_value_uint32() const {
  return _internal_has_value_uint32();
}
inline void CMsgSettingVariant::set_has_value_uint32() {
  _oneof_case_[0] = kValueUint32;
}
inline void CMsgSettingVariant::clear_value_uint32() {
  if (_internal_has_value_uint32()) {
    value_.value_uint32_ = 0u;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSettingVariant::_internal_value_uint32() const {
  if (_internal_has_value_uint32()) {
    return value_.value_uint32_;
  }
  return 0u;
}
inline void CMsgSettingVariant::_internal_set_value_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_value_uint32()) {
    clear_value();
    set_has_value_uint32();
  }
  value_.value_uint32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSettingVariant::value_uint32() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_uint32)
  return _internal_value_uint32();
}
inline void CMsgSettingVariant::set_value_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value_uint32(value);
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_uint32)
}

// int64 value_uint64 = 5;
inline bool CMsgSettingVariant::_internal_has_value_uint64() const {
  return value_case() == kValueUint64;
}
inline bool CMsgSettingVariant::has_value_uint64() const {
  return _internal_has_value_uint64();
}
inline void CMsgSettingVariant::set_has_value_uint64() {
  _oneof_case_[0] = kValueUint64;
}
inline void CMsgSettingVariant::clear_value_uint64() {
  if (_internal_has_value_uint64()) {
    value_.value_uint64_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMsgSettingVariant::_internal_value_uint64() const {
  if (_internal_has_value_uint64()) {
    return value_.value_uint64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void CMsgSettingVariant::_internal_set_value_uint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_value_uint64()) {
    clear_value();
    set_has_value_uint64();
  }
  value_.value_uint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMsgSettingVariant::value_uint64() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_uint64)
  return _internal_value_uint64();
}
inline void CMsgSettingVariant::set_value_uint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value_uint64(value);
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_uint64)
}

// float value_float = 6;
inline bool CMsgSettingVariant::_internal_has_value_float() const {
  return value_case() == kValueFloat;
}
inline bool CMsgSettingVariant::has_value_float() const {
  return _internal_has_value_float();
}
inline void CMsgSettingVariant::set_has_value_float() {
  _oneof_case_[0] = kValueFloat;
}
inline void CMsgSettingVariant::clear_value_float() {
  if (_internal_has_value_float()) {
    value_.value_float_ = 0;
    clear_has_value();
  }
}
inline float CMsgSettingVariant::_internal_value_float() const {
  if (_internal_has_value_float()) {
    return value_.value_float_;
  }
  return 0;
}
inline void CMsgSettingVariant::_internal_set_value_float(float value) {
  if (!_internal_has_value_float()) {
    clear_value();
    set_has_value_float();
  }
  value_.value_float_ = value;
}
inline float CMsgSettingVariant::value_float() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_float)
  return _internal_value_float();
}
inline void CMsgSettingVariant::set_value_float(float value) {
  _internal_set_value_float(value);
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_float)
}

// string value_string = 7;
inline bool CMsgSettingVariant::_internal_has_value_string() const {
  return value_case() == kValueString;
}
inline bool CMsgSettingVariant::has_value_string() const {
  return _internal_has_value_string();
}
inline void CMsgSettingVariant::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
inline void CMsgSettingVariant::clear_value_string() {
  if (_internal_has_value_string()) {
    value_.value_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_value();
  }
}
inline const std::string& CMsgSettingVariant::value_string() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_string)
  return _internal_value_string();
}
inline void CMsgSettingVariant::set_value_string(const std::string& value) {
  _internal_set_value_string(value);
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_string)
}
inline std::string* CMsgSettingVariant::mutable_value_string() {
  // @@protoc_insertion_point(field_mutable:CMsgSettingVariant.value_string)
  return _internal_mutable_value_string();
}
inline const std::string& CMsgSettingVariant::_internal_value_string() const {
  if (_internal_has_value_string()) {
    return value_.value_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgSettingVariant::_internal_set_value_string(const std::string& value) {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSettingVariant::set_value_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgSettingVariant.value_string)
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSettingVariant.value_string)
}
inline void CMsgSettingVariant::set_value_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSettingVariant.value_string)
}
inline void CMsgSettingVariant::set_value_string(const char* value,
                             size_t size) {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSettingVariant.value_string)
}
inline std::string* CMsgSettingVariant::_internal_mutable_value_string() {
  if (!_internal_has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.value_string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSettingVariant::release_value_string() {
  // @@protoc_insertion_point(field_release:CMsgSettingVariant.value_string)
  if (_internal_has_value_string()) {
    clear_has_value();
    return value_.value_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CMsgSettingVariant::set_allocated_value_string(std::string* value_string) {
  if (has_value()) {
    clear_value();
  }
  if (value_string != nullptr) {
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(value_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(value_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSettingVariant.value_string)
}

// .CMsgHotkey value_hotkey = 8;
inline bool CMsgSettingVariant::_internal_has_value_hotkey() const {
  return value_case() == kValueHotkey;
}
inline bool CMsgSettingVariant::has_value_hotkey() const {
  return _internal_has_value_hotkey();
}
inline void CMsgSettingVariant::set_has_value_hotkey() {
  _oneof_case_[0] = kValueHotkey;
}
inline void CMsgSettingVariant::clear_value_hotkey() {
  if (_internal_has_value_hotkey()) {
    if (GetArena() == nullptr) {
      delete value_.value_hotkey_;
    }
    clear_has_value();
  }
}
inline ::CMsgHotkey* CMsgSettingVariant::release_value_hotkey() {
  // @@protoc_insertion_point(field_release:CMsgSettingVariant.value_hotkey)
  if (_internal_has_value_hotkey()) {
    clear_has_value();
      ::CMsgHotkey* temp = value_.value_hotkey_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_hotkey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgHotkey& CMsgSettingVariant::_internal_value_hotkey() const {
  return _internal_has_value_hotkey()
      ? *value_.value_hotkey_
      : reinterpret_cast< ::CMsgHotkey&>(::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgSettingVariant::value_hotkey() const {
  // @@protoc_insertion_point(field_get:CMsgSettingVariant.value_hotkey)
  return _internal_value_hotkey();
}
inline ::CMsgHotkey* CMsgSettingVariant::unsafe_arena_release_value_hotkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgSettingVariant.value_hotkey)
  if (_internal_has_value_hotkey()) {
    clear_has_value();
    ::CMsgHotkey* temp = value_.value_hotkey_;
    value_.value_hotkey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgSettingVariant::unsafe_arena_set_allocated_value_hotkey(::CMsgHotkey* value_hotkey) {
  clear_value();
  if (value_hotkey) {
    set_has_value_hotkey();
    value_.value_hotkey_ = value_hotkey;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSettingVariant.value_hotkey)
}
inline ::CMsgHotkey* CMsgSettingVariant::_internal_mutable_value_hotkey() {
  if (!_internal_has_value_hotkey()) {
    clear_value();
    set_has_value_hotkey();
    value_.value_hotkey_ = CreateMaybeMessage< ::CMsgHotkey >(GetArena());
  }
  return value_.value_hotkey_;
}
inline ::CMsgHotkey* CMsgSettingVariant::mutable_value_hotkey() {
  // @@protoc_insertion_point(field_mutable:CMsgSettingVariant.value_hotkey)
  return _internal_mutable_value_hotkey();
}

inline bool CMsgSettingVariant::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CMsgSettingVariant::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CMsgSettingVariant::ValueCase CMsgSettingVariant::value_case() const {
  return CMsgSettingVariant::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgClientSettings

// optional bool no_save_personal_info = 1 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
inline bool CMsgClientSettings::_internal_has_no_save_personal_info() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_no_save_personal_info() const {
  return _internal_has_no_save_personal_info();
}
inline void CMsgClientSettings::clear_no_save_personal_info() {
  no_save_personal_info_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool CMsgClientSettings::_internal_no_save_personal_info() const {
  return no_save_personal_info_;
}
inline bool CMsgClientSettings::no_save_personal_info() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.no_save_personal_info)
  return _internal_no_save_personal_info();
}
inline void CMsgClientSettings::_internal_set_no_save_personal_info(bool value) {
  _has_bits_[0] |= 0x00800000u;
  no_save_personal_info_ = value;
}
inline void CMsgClientSettings::set_no_save_personal_info(bool value) {
  _internal_set_no_save_personal_info(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.no_save_personal_info)
}

// optional bool oobe_test_mode_enabled = 2 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
inline bool CMsgClientSettings::_internal_has_oobe_test_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_oobe_test_mode_enabled() const {
  return _internal_has_oobe_test_mode_enabled();
}
inline void CMsgClientSettings::clear_oobe_test_mode_enabled() {
  oobe_test_mode_enabled_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CMsgClientSettings::_internal_oobe_test_mode_enabled() const {
  return oobe_test_mode_enabled_;
}
inline bool CMsgClientSettings::oobe_test_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.oobe_test_mode_enabled)
  return _internal_oobe_test_mode_enabled();
}
inline void CMsgClientSettings::_internal_set_oobe_test_mode_enabled(bool value) {
  _has_bits_[0] |= 0x01000000u;
  oobe_test_mode_enabled_ = value;
}
inline void CMsgClientSettings::set_oobe_test_mode_enabled(bool value) {
  _internal_set_oobe_test_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.oobe_test_mode_enabled)
}

// optional bool in_client_beta = 3 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
inline bool CMsgClientSettings::_internal_has_in_client_beta() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_in_client_beta() const {
  return _internal_has_in_client_beta();
}
inline void CMsgClientSettings::clear_in_client_beta() {
  in_client_beta_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CMsgClientSettings::_internal_in_client_beta() const {
  return in_client_beta_;
}
inline bool CMsgClientSettings::in_client_beta() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.in_client_beta)
  return _internal_in_client_beta();
}
inline void CMsgClientSettings::_internal_set_in_client_beta(bool value) {
  _has_bits_[0] |= 0x02000000u;
  in_client_beta_ = value;
}
inline void CMsgClientSettings::set_in_client_beta(bool value) {
  _internal_set_in_client_beta(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.in_client_beta)
}

// optional bool is_steam_sideloaded = 4 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
inline bool CMsgClientSettings::_internal_has_is_steam_sideloaded() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_is_steam_sideloaded() const {
  return _internal_has_is_steam_sideloaded();
}
inline void CMsgClientSettings::clear_is_steam_sideloaded() {
  is_steam_sideloaded_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool CMsgClientSettings::_internal_is_steam_sideloaded() const {
  return is_steam_sideloaded_;
}
inline bool CMsgClientSettings::is_steam_sideloaded() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.is_steam_sideloaded)
  return _internal_is_steam_sideloaded();
}
inline void CMsgClientSettings::_internal_set_is_steam_sideloaded(bool value) {
  _has_bits_[0] |= 0x04000000u;
  is_steam_sideloaded_ = value;
}
inline void CMsgClientSettings::set_is_steam_sideloaded(bool value) {
  _internal_set_is_steam_sideloaded(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.is_steam_sideloaded)
}

// optional string preferred_monitor = 5 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
inline bool CMsgClientSettings::_internal_has_preferred_monitor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_preferred_monitor() const {
  return _internal_has_preferred_monitor();
}
inline void CMsgClientSettings::clear_preferred_monitor() {
  preferred_monitor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientSettings::preferred_monitor() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.preferred_monitor)
  return _internal_preferred_monitor();
}
inline void CMsgClientSettings::set_preferred_monitor(const std::string& value) {
  _internal_set_preferred_monitor(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.preferred_monitor)
}
inline std::string* CMsgClientSettings::mutable_preferred_monitor() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.preferred_monitor)
  return _internal_mutable_preferred_monitor();
}
inline const std::string& CMsgClientSettings::_internal_preferred_monitor() const {
  return preferred_monitor_.Get();
}
inline void CMsgClientSettings::_internal_set_preferred_monitor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  preferred_monitor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_preferred_monitor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  preferred_monitor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.preferred_monitor)
}
inline void CMsgClientSettings::set_preferred_monitor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  preferred_monitor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.preferred_monitor)
}
inline void CMsgClientSettings::set_preferred_monitor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  preferred_monitor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.preferred_monitor)
}
inline std::string* CMsgClientSettings::_internal_mutable_preferred_monitor() {
  _has_bits_[0] |= 0x00000001u;
  return preferred_monitor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_preferred_monitor() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.preferred_monitor)
  if (!_internal_has_preferred_monitor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return preferred_monitor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_preferred_monitor(std::string* preferred_monitor) {
  if (preferred_monitor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferred_monitor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_monitor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.preferred_monitor)
}

// optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
inline bool CMsgClientSettings::_internal_has_steam_cef_gpu_blocklist_disabled() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steam_cef_gpu_blocklist_disabled() const {
  return _internal_has_steam_cef_gpu_blocklist_disabled();
}
inline void CMsgClientSettings::clear_steam_cef_gpu_blocklist_disabled() {
  steam_cef_gpu_blocklist_disabled_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool CMsgClientSettings::_internal_steam_cef_gpu_blocklist_disabled() const {
  return steam_cef_gpu_blocklist_disabled_;
}
inline bool CMsgClientSettings::steam_cef_gpu_blocklist_disabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steam_cef_gpu_blocklist_disabled)
  return _internal_steam_cef_gpu_blocklist_disabled();
}
inline void CMsgClientSettings::_internal_set_steam_cef_gpu_blocklist_disabled(bool value) {
  _has_bits_[0] |= 0x08000000u;
  steam_cef_gpu_blocklist_disabled_ = value;
}
inline void CMsgClientSettings::set_steam_cef_gpu_blocklist_disabled(bool value) {
  _internal_set_steam_cef_gpu_blocklist_disabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steam_cef_gpu_blocklist_disabled)
}

// optional bool bigpicture_windowed = 7 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
inline bool CMsgClientSettings::_internal_has_bigpicture_windowed() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_bigpicture_windowed() const {
  return _internal_has_bigpicture_windowed();
}
inline void CMsgClientSettings::clear_bigpicture_windowed() {
  bigpicture_windowed_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool CMsgClientSettings::_internal_bigpicture_windowed() const {
  return bigpicture_windowed_;
}
inline bool CMsgClientSettings::bigpicture_windowed() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.bigpicture_windowed)
  return _internal_bigpicture_windowed();
}
inline void CMsgClientSettings::_internal_set_bigpicture_windowed(bool value) {
  _has_bits_[0] |= 0x10000000u;
  bigpicture_windowed_ = value;
}
inline void CMsgClientSettings::set_bigpicture_windowed(bool value) {
  _internal_set_bigpicture_windowed(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.bigpicture_windowed)
}

// optional string display_name = 8 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
inline bool CMsgClientSettings::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_display_name() const {
  return _internal_has_display_name();
}
inline void CMsgClientSettings::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientSettings::display_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.display_name)
  return _internal_display_name();
}
inline void CMsgClientSettings::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.display_name)
}
inline std::string* CMsgClientSettings::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& CMsgClientSettings::_internal_display_name() const {
  return display_name_.Get();
}
inline void CMsgClientSettings::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.display_name)
}
inline void CMsgClientSettings::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.display_name)
}
inline void CMsgClientSettings::set_display_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.display_name)
}
inline std::string* CMsgClientSettings::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000002u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_display_name() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.display_name)
}

// optional bool is_external_display = 9 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
inline bool CMsgClientSettings::_internal_has_is_external_display() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_is_external_display() const {
  return _internal_has_is_external_display();
}
inline void CMsgClientSettings::clear_is_external_display() {
  is_external_display_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool CMsgClientSettings::_internal_is_external_display() const {
  return is_external_display_;
}
inline bool CMsgClientSettings::is_external_display() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.is_external_display)
  return _internal_is_external_display();
}
inline void CMsgClientSettings::_internal_set_is_external_display(bool value) {
  _has_bits_[0] |= 0x20000000u;
  is_external_display_ = value;
}
inline void CMsgClientSettings::set_is_external_display(bool value) {
  _internal_set_is_external_display(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.is_external_display)
}

// optional float steam_os_underscan_level = 10 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
inline bool CMsgClientSettings::_internal_has_steam_os_underscan_level() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steam_os_underscan_level() const {
  return _internal_has_steam_os_underscan_level();
}
inline void CMsgClientSettings::clear_steam_os_underscan_level() {
  steam_os_underscan_level_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float CMsgClientSettings::_internal_steam_os_underscan_level() const {
  return steam_os_underscan_level_;
}
inline float CMsgClientSettings::steam_os_underscan_level() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steam_os_underscan_level)
  return _internal_steam_os_underscan_level();
}
inline void CMsgClientSettings::_internal_set_steam_os_underscan_level(float value) {
  _has_bits_[0] |= 0x80000000u;
  steam_os_underscan_level_ = value;
}
inline void CMsgClientSettings::set_steam_os_underscan_level(float value) {
  _internal_set_steam_os_underscan_level(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steam_os_underscan_level)
}

// optional bool steam_os_underscan_enabled = 11 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
inline bool CMsgClientSettings::_internal_has_steam_os_underscan_enabled() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steam_os_underscan_enabled() const {
  return _internal_has_steam_os_underscan_enabled();
}
inline void CMsgClientSettings::clear_steam_os_underscan_enabled() {
  steam_os_underscan_enabled_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool CMsgClientSettings::_internal_steam_os_underscan_enabled() const {
  return steam_os_underscan_enabled_;
}
inline bool CMsgClientSettings::steam_os_underscan_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steam_os_underscan_enabled)
  return _internal_steam_os_underscan_enabled();
}
inline void CMsgClientSettings::_internal_set_steam_os_underscan_enabled(bool value) {
  _has_bits_[0] |= 0x40000000u;
  steam_os_underscan_enabled_ = value;
}
inline void CMsgClientSettings::set_steam_os_underscan_enabled(bool value) {
  _internal_set_steam_os_underscan_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steam_os_underscan_enabled)
}

// optional float min_scale_factor = 12 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
inline bool CMsgClientSettings::_internal_has_min_scale_factor() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_min_scale_factor() const {
  return _internal_has_min_scale_factor();
}
inline void CMsgClientSettings::clear_min_scale_factor() {
  min_scale_factor_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float CMsgClientSettings::_internal_min_scale_factor() const {
  return min_scale_factor_;
}
inline float CMsgClientSettings::min_scale_factor() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.min_scale_factor)
  return _internal_min_scale_factor();
}
inline void CMsgClientSettings::_internal_set_min_scale_factor(float value) {
  _has_bits_[1] |= 0x00000001u;
  min_scale_factor_ = value;
}
inline void CMsgClientSettings::set_min_scale_factor(float value) {
  _internal_set_min_scale_factor(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.min_scale_factor)
}

// optional float max_scale_factor = 13 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
inline bool CMsgClientSettings::_internal_has_max_scale_factor() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_max_scale_factor() const {
  return _internal_has_max_scale_factor();
}
inline void CMsgClientSettings::clear_max_scale_factor() {
  max_scale_factor_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float CMsgClientSettings::_internal_max_scale_factor() const {
  return max_scale_factor_;
}
inline float CMsgClientSettings::max_scale_factor() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.max_scale_factor)
  return _internal_max_scale_factor();
}
inline void CMsgClientSettings::_internal_set_max_scale_factor(float value) {
  _has_bits_[1] |= 0x00000002u;
  max_scale_factor_ = value;
}
inline void CMsgClientSettings::set_max_scale_factor(float value) {
  _internal_set_max_scale_factor(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.max_scale_factor)
}

// optional float auto_scale_factor = 14 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
inline bool CMsgClientSettings::_internal_has_auto_scale_factor() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_auto_scale_factor() const {
  return _internal_has_auto_scale_factor();
}
inline void CMsgClientSettings::clear_auto_scale_factor() {
  auto_scale_factor_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline float CMsgClientSettings::_internal_auto_scale_factor() const {
  return auto_scale_factor_;
}
inline float CMsgClientSettings::auto_scale_factor() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.auto_scale_factor)
  return _internal_auto_scale_factor();
}
inline void CMsgClientSettings::_internal_set_auto_scale_factor(float value) {
  _has_bits_[1] |= 0x00000004u;
  auto_scale_factor_ = value;
}
inline void CMsgClientSettings::set_auto_scale_factor(float value) {
  _internal_set_auto_scale_factor(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.auto_scale_factor)
}

// optional bool small_mode = 16 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
inline bool CMsgClientSettings::_internal_has_small_mode() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_small_mode() const {
  return _internal_has_small_mode();
}
inline void CMsgClientSettings::clear_small_mode() {
  small_mode_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool CMsgClientSettings::_internal_small_mode() const {
  return small_mode_;
}
inline bool CMsgClientSettings::small_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.small_mode)
  return _internal_small_mode();
}
inline void CMsgClientSettings::_internal_set_small_mode(bool value) {
  _has_bits_[1] |= 0x00000080u;
  small_mode_ = value;
}
inline void CMsgClientSettings::set_small_mode(bool value) {
  _internal_set_small_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.small_mode)
}

// optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
inline bool CMsgClientSettings::_internal_has_skip_steamvr_install_dialog() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_skip_steamvr_install_dialog() const {
  return _internal_has_skip_steamvr_install_dialog();
}
inline void CMsgClientSettings::clear_skip_steamvr_install_dialog() {
  skip_steamvr_install_dialog_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool CMsgClientSettings::_internal_skip_steamvr_install_dialog() const {
  return skip_steamvr_install_dialog_;
}
inline bool CMsgClientSettings::skip_steamvr_install_dialog() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.skip_steamvr_install_dialog)
  return _internal_skip_steamvr_install_dialog();
}
inline void CMsgClientSettings::_internal_set_skip_steamvr_install_dialog(bool value) {
  _has_bits_[1] |= 0x00000100u;
  skip_steamvr_install_dialog_ = value;
}
inline void CMsgClientSettings::set_skip_steamvr_install_dialog(bool value) {
  _internal_set_skip_steamvr_install_dialog(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.skip_steamvr_install_dialog)
}

// optional bool always_show_user_chooser = 20 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
inline bool CMsgClientSettings::_internal_has_always_show_user_chooser() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_always_show_user_chooser() const {
  return _internal_has_always_show_user_chooser();
}
inline void CMsgClientSettings::clear_always_show_user_chooser() {
  always_show_user_chooser_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CMsgClientSettings::_internal_always_show_user_chooser() const {
  return always_show_user_chooser_;
}
inline bool CMsgClientSettings::always_show_user_chooser() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.always_show_user_chooser)
  return _internal_always_show_user_chooser();
}
inline void CMsgClientSettings::_internal_set_always_show_user_chooser(bool value) {
  _has_bits_[1] |= 0x00000200u;
  always_show_user_chooser_ = value;
}
inline void CMsgClientSettings::set_always_show_user_chooser(bool value) {
  _internal_set_always_show_user_chooser(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.always_show_user_chooser)
}

// optional bool os_version_unsupported = 21 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OSVersionUnsupported"];
inline bool CMsgClientSettings::_internal_has_os_version_unsupported() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_os_version_unsupported() const {
  return _internal_has_os_version_unsupported();
}
inline void CMsgClientSettings::clear_os_version_unsupported() {
  os_version_unsupported_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool CMsgClientSettings::_internal_os_version_unsupported() const {
  return os_version_unsupported_;
}
inline bool CMsgClientSettings::os_version_unsupported() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.os_version_unsupported)
  return _internal_os_version_unsupported();
}
inline void CMsgClientSettings::_internal_set_os_version_unsupported(bool value) {
  _has_bits_[1] |= 0x00000400u;
  os_version_unsupported_ = value;
}
inline void CMsgClientSettings::set_os_version_unsupported(bool value) {
  _internal_set_os_version_unsupported(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.os_version_unsupported)
}

// optional bool show_family_sharing_notifications = 3000 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_show_family_sharing_notifications() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_family_sharing_notifications() const {
  return _internal_has_show_family_sharing_notifications();
}
inline void CMsgClientSettings::clear_show_family_sharing_notifications() {
  show_family_sharing_notifications_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool CMsgClientSettings::_internal_show_family_sharing_notifications() const {
  return show_family_sharing_notifications_;
}
inline bool CMsgClientSettings::show_family_sharing_notifications() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_family_sharing_notifications)
  return _internal_show_family_sharing_notifications();
}
inline void CMsgClientSettings::_internal_set_show_family_sharing_notifications(bool value) {
  _has_bits_[1] |= 0x00000800u;
  show_family_sharing_notifications_ = value;
}
inline void CMsgClientSettings::set_show_family_sharing_notifications(bool value) {
  _internal_set_show_family_sharing_notifications(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_family_sharing_notifications)
}

// optional bool show_copy_count_in_library = 3001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowCopyCountInLibrary", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_show_copy_count_in_library() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_copy_count_in_library() const {
  return _internal_has_show_copy_count_in_library();
}
inline void CMsgClientSettings::clear_show_copy_count_in_library() {
  show_copy_count_in_library_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool CMsgClientSettings::_internal_show_copy_count_in_library() const {
  return show_copy_count_in_library_;
}
inline bool CMsgClientSettings::show_copy_count_in_library() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_copy_count_in_library)
  return _internal_show_copy_count_in_library();
}
inline void CMsgClientSettings::_internal_set_show_copy_count_in_library(bool value) {
  _has_bits_[1] |= 0x00001000u;
  show_copy_count_in_library_ = value;
}
inline void CMsgClientSettings::set_show_copy_count_in_library(bool value) {
  _internal_set_show_copy_count_in_library(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_copy_count_in_library)
}

// optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
inline bool CMsgClientSettings::_internal_has_overlay_fps_counter_corner() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_overlay_fps_counter_corner() const {
  return _internal_has_overlay_fps_counter_corner();
}
inline void CMsgClientSettings::clear_overlay_fps_counter_corner() {
  overlay_fps_counter_corner_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_overlay_fps_counter_corner() const {
  return overlay_fps_counter_corner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::overlay_fps_counter_corner() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_fps_counter_corner)
  return _internal_overlay_fps_counter_corner();
}
inline void CMsgClientSettings::_internal_set_overlay_fps_counter_corner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  overlay_fps_counter_corner_ = value;
}
inline void CMsgClientSettings::set_overlay_fps_counter_corner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overlay_fps_counter_corner(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.overlay_fps_counter_corner)
}

// optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
inline bool CMsgClientSettings::_internal_has_overlay_fps_counter_high_contrast() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_overlay_fps_counter_high_contrast() const {
  return _internal_has_overlay_fps_counter_high_contrast();
}
inline void CMsgClientSettings::clear_overlay_fps_counter_high_contrast() {
  overlay_fps_counter_high_contrast_ = false;
  _has_bits_[1] &= ~0x00002000u;
}
inline bool CMsgClientSettings::_internal_overlay_fps_counter_high_contrast() const {
  return overlay_fps_counter_high_contrast_;
}
inline bool CMsgClientSettings::overlay_fps_counter_high_contrast() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_fps_counter_high_contrast)
  return _internal_overlay_fps_counter_high_contrast();
}
inline void CMsgClientSettings::_internal_set_overlay_fps_counter_high_contrast(bool value) {
  _has_bits_[1] |= 0x00002000u;
  overlay_fps_counter_high_contrast_ = value;
}
inline void CMsgClientSettings::set_overlay_fps_counter_high_contrast(bool value) {
  _internal_set_overlay_fps_counter_high_contrast(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.overlay_fps_counter_high_contrast)
}

// optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
inline bool CMsgClientSettings::_internal_has_overlay_key() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || overlay_key_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_overlay_key() const {
  return _internal_has_overlay_key();
}
inline void CMsgClientSettings::clear_overlay_key() {
  if (overlay_key_ != nullptr) overlay_key_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_overlay_key() const {
  const ::CMsgHotkey* p = overlay_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::overlay_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_key)
  return _internal_overlay_key();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_overlay_key(
    ::CMsgHotkey* overlay_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overlay_key_);
  }
  overlay_key_ = overlay_key;
  if (overlay_key) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.overlay_key)
}
inline ::CMsgHotkey* CMsgClientSettings::release_overlay_key() {
  _has_bits_[0] &= ~0x00004000u;
  ::CMsgHotkey* temp = overlay_key_;
  overlay_key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_overlay_key() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.overlay_key)
  _has_bits_[0] &= ~0x00004000u;
  ::CMsgHotkey* temp = overlay_key_;
  overlay_key_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_overlay_key() {
  _has_bits_[0] |= 0x00004000u;
  if (overlay_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    overlay_key_ = p;
  }
  return overlay_key_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_overlay_key() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.overlay_key)
  return _internal_mutable_overlay_key();
}
inline void CMsgClientSettings::set_allocated_overlay_key(::CMsgHotkey* overlay_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overlay_key_;
  }
  if (overlay_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overlay_key);
    if (message_arena != submessage_arena) {
      overlay_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  overlay_key_ = overlay_key;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.overlay_key)
}

// optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
inline bool CMsgClientSettings::_internal_has_screenshot_key() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || screenshot_key_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_screenshot_key() const {
  return _internal_has_screenshot_key();
}
inline void CMsgClientSettings::clear_screenshot_key() {
  if (screenshot_key_ != nullptr) screenshot_key_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_screenshot_key() const {
  const ::CMsgHotkey* p = screenshot_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::screenshot_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.screenshot_key)
  return _internal_screenshot_key();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_screenshot_key(
    ::CMsgHotkey* screenshot_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screenshot_key_);
  }
  screenshot_key_ = screenshot_key;
  if (screenshot_key) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.screenshot_key)
}
inline ::CMsgHotkey* CMsgClientSettings::release_screenshot_key() {
  _has_bits_[0] &= ~0x00008000u;
  ::CMsgHotkey* temp = screenshot_key_;
  screenshot_key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_screenshot_key() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.screenshot_key)
  _has_bits_[0] &= ~0x00008000u;
  ::CMsgHotkey* temp = screenshot_key_;
  screenshot_key_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_screenshot_key() {
  _has_bits_[0] |= 0x00008000u;
  if (screenshot_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    screenshot_key_ = p;
  }
  return screenshot_key_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_screenshot_key() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.screenshot_key)
  return _internal_mutable_screenshot_key();
}
inline void CMsgClientSettings::set_allocated_screenshot_key(::CMsgHotkey* screenshot_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete screenshot_key_;
  }
  if (screenshot_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(screenshot_key);
    if (message_arena != submessage_arena) {
      screenshot_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  screenshot_key_ = screenshot_key;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.screenshot_key)
}

// optional bool enable_overlay = 4004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_enable_overlay() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_overlay() const {
  return _internal_has_enable_overlay();
}
inline void CMsgClientSettings::clear_enable_overlay() {
  enable_overlay_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool CMsgClientSettings::_internal_enable_overlay() const {
  return enable_overlay_;
}
inline bool CMsgClientSettings::enable_overlay() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_overlay)
  return _internal_enable_overlay();
}
inline void CMsgClientSettings::_internal_set_enable_overlay(bool value) {
  _has_bits_[1] |= 0x00004000u;
  enable_overlay_ = value;
}
inline void CMsgClientSettings::set_enable_overlay(bool value) {
  _internal_set_enable_overlay(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_overlay)
}

// optional bool enable_screenshot_notification = 4006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_enable_screenshot_notification() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_screenshot_notification() const {
  return _internal_has_enable_screenshot_notification();
}
inline void CMsgClientSettings::clear_enable_screenshot_notification() {
  enable_screenshot_notification_ = false;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool CMsgClientSettings::_internal_enable_screenshot_notification() const {
  return enable_screenshot_notification_;
}
inline bool CMsgClientSettings::enable_screenshot_notification() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_screenshot_notification)
  return _internal_enable_screenshot_notification();
}
inline void CMsgClientSettings::_internal_set_enable_screenshot_notification(bool value) {
  _has_bits_[1] |= 0x00020000u;
  enable_screenshot_notification_ = value;
}
inline void CMsgClientSettings::set_enable_screenshot_notification(bool value) {
  _internal_set_enable_screenshot_notification(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_screenshot_notification)
}

// optional bool enable_screenshot_sound = 4007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_enable_screenshot_sound() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_screenshot_sound() const {
  return _internal_has_enable_screenshot_sound();
}
inline void CMsgClientSettings::clear_enable_screenshot_sound() {
  enable_screenshot_sound_ = false;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool CMsgClientSettings::_internal_enable_screenshot_sound() const {
  return enable_screenshot_sound_;
}
inline bool CMsgClientSettings::enable_screenshot_sound() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_screenshot_sound)
  return _internal_enable_screenshot_sound();
}
inline void CMsgClientSettings::_internal_set_enable_screenshot_sound(bool value) {
  _has_bits_[1] |= 0x00040000u;
  enable_screenshot_sound_ = value;
}
inline void CMsgClientSettings::set_enable_screenshot_sound(bool value) {
  _internal_set_enable_screenshot_sound(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_screenshot_sound)
}

// optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
inline bool CMsgClientSettings::_internal_has_save_uncompressed_screenshots() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_save_uncompressed_screenshots() const {
  return _internal_has_save_uncompressed_screenshots();
}
inline void CMsgClientSettings::clear_save_uncompressed_screenshots() {
  save_uncompressed_screenshots_ = false;
  _has_bits_[1] &= ~0x00080000u;
}
inline bool CMsgClientSettings::_internal_save_uncompressed_screenshots() const {
  return save_uncompressed_screenshots_;
}
inline bool CMsgClientSettings::save_uncompressed_screenshots() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.save_uncompressed_screenshots)
  return _internal_save_uncompressed_screenshots();
}
inline void CMsgClientSettings::_internal_set_save_uncompressed_screenshots(bool value) {
  _has_bits_[1] |= 0x00080000u;
  save_uncompressed_screenshots_ = value;
}
inline void CMsgClientSettings::set_save_uncompressed_screenshots(bool value) {
  _internal_set_save_uncompressed_screenshots(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.save_uncompressed_screenshots)
}

// optional string screenshots_path = 4009 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_screenshots_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_screenshots_path() const {
  return _internal_has_screenshots_path();
}
inline void CMsgClientSettings::clear_screenshots_path() {
  screenshots_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientSettings::screenshots_path() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.screenshots_path)
  return _internal_screenshots_path();
}
inline void CMsgClientSettings::set_screenshots_path(const std::string& value) {
  _internal_set_screenshots_path(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.screenshots_path)
}
inline std::string* CMsgClientSettings::mutable_screenshots_path() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.screenshots_path)
  return _internal_mutable_screenshots_path();
}
inline const std::string& CMsgClientSettings::_internal_screenshots_path() const {
  return screenshots_path_.Get();
}
inline void CMsgClientSettings::_internal_set_screenshots_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  screenshots_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_screenshots_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  screenshots_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.screenshots_path)
}
inline void CMsgClientSettings::set_screenshots_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  screenshots_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.screenshots_path)
}
inline void CMsgClientSettings::set_screenshots_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  screenshots_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.screenshots_path)
}
inline std::string* CMsgClientSettings::_internal_mutable_screenshots_path() {
  _has_bits_[0] |= 0x00000004u;
  return screenshots_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_screenshots_path() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.screenshots_path)
  if (!_internal_has_screenshots_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return screenshots_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_screenshots_path(std::string* screenshots_path) {
  if (screenshots_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  screenshots_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), screenshots_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.screenshots_path)
}

// optional int32 default_ping_rate = 4010 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
inline bool CMsgClientSettings::_internal_has_default_ping_rate() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_default_ping_rate() const {
  return _internal_has_default_ping_rate();
}
inline void CMsgClientSettings::clear_default_ping_rate() {
  default_ping_rate_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_default_ping_rate() const {
  return default_ping_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::default_ping_rate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.default_ping_rate)
  return _internal_default_ping_rate();
}
inline void CMsgClientSettings::_internal_set_default_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00010000u;
  default_ping_rate_ = value;
}
inline void CMsgClientSettings::set_default_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_ping_rate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.default_ping_rate)
}

// optional int32 server_ping_rate = 4011 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_server_ping_rate() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_server_ping_rate() const {
  return _internal_has_server_ping_rate();
}
inline void CMsgClientSettings::clear_server_ping_rate() {
  server_ping_rate_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_server_ping_rate() const {
  return server_ping_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::server_ping_rate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.server_ping_rate)
  return _internal_server_ping_rate();
}
inline void CMsgClientSettings::_internal_set_server_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00200000u;
  server_ping_rate_ = value;
}
inline void CMsgClientSettings::set_server_ping_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_ping_rate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.server_ping_rate)
}

// optional int32 steam_networking_share_ip = 4012 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_steam_networking_share_ip() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steam_networking_share_ip() const {
  return _internal_has_steam_networking_share_ip();
}
inline void CMsgClientSettings::clear_steam_networking_share_ip() {
  steam_networking_share_ip_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_steam_networking_share_ip() const {
  return steam_networking_share_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::steam_networking_share_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steam_networking_share_ip)
  return _internal_steam_networking_share_ip();
}
inline void CMsgClientSettings::_internal_set_steam_networking_share_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00400000u;
  steam_networking_share_ip_ = value;
}
inline void CMsgClientSettings::set_steam_networking_share_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steam_networking_share_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steam_networking_share_ip)
}

// optional string web_browser_home = 4013 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_web_browser_home() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_web_browser_home() const {
  return _internal_has_web_browser_home();
}
inline void CMsgClientSettings::clear_web_browser_home() {
  web_browser_home_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientSettings::web_browser_home() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.web_browser_home)
  return _internal_web_browser_home();
}
inline void CMsgClientSettings::set_web_browser_home(const std::string& value) {
  _internal_set_web_browser_home(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.web_browser_home)
}
inline std::string* CMsgClientSettings::mutable_web_browser_home() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.web_browser_home)
  return _internal_mutable_web_browser_home();
}
inline const std::string& CMsgClientSettings::_internal_web_browser_home() const {
  return web_browser_home_.Get();
}
inline void CMsgClientSettings::_internal_set_web_browser_home(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  web_browser_home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_web_browser_home(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  web_browser_home_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.web_browser_home)
}
inline void CMsgClientSettings::set_web_browser_home(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  web_browser_home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.web_browser_home)
}
inline void CMsgClientSettings::set_web_browser_home(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  web_browser_home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.web_browser_home)
}
inline std::string* CMsgClientSettings::_internal_mutable_web_browser_home() {
  _has_bits_[0] |= 0x00000008u;
  return web_browser_home_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_web_browser_home() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.web_browser_home)
  if (!_internal_has_web_browser_home()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return web_browser_home_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_web_browser_home(std::string* web_browser_home) {
  if (web_browser_home != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  web_browser_home_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), web_browser_home,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.web_browser_home)
}

// optional string voice_mic_device_name = 4014 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_voice_mic_device_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_voice_mic_device_name() const {
  return _internal_has_voice_mic_device_name();
}
inline void CMsgClientSettings::clear_voice_mic_device_name() {
  voice_mic_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgClientSettings::voice_mic_device_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.voice_mic_device_name)
  return _internal_voice_mic_device_name();
}
inline void CMsgClientSettings::set_voice_mic_device_name(const std::string& value) {
  _internal_set_voice_mic_device_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.voice_mic_device_name)
}
inline std::string* CMsgClientSettings::mutable_voice_mic_device_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.voice_mic_device_name)
  return _internal_mutable_voice_mic_device_name();
}
inline const std::string& CMsgClientSettings::_internal_voice_mic_device_name() const {
  return voice_mic_device_name_.Get();
}
inline void CMsgClientSettings::_internal_set_voice_mic_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  voice_mic_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_voice_mic_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  voice_mic_device_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.voice_mic_device_name)
}
inline void CMsgClientSettings::set_voice_mic_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  voice_mic_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.voice_mic_device_name)
}
inline void CMsgClientSettings::set_voice_mic_device_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  voice_mic_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.voice_mic_device_name)
}
inline std::string* CMsgClientSettings::_internal_mutable_voice_mic_device_name() {
  _has_bits_[0] |= 0x00000010u;
  return voice_mic_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_voice_mic_device_name() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.voice_mic_device_name)
  if (!_internal_has_voice_mic_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return voice_mic_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_voice_mic_device_name(std::string* voice_mic_device_name) {
  if (voice_mic_device_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  voice_mic_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_mic_device_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.voice_mic_device_name)
}

// optional float voice_mic_input_gain = 4015 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_voice_mic_input_gain() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_voice_mic_input_gain() const {
  return _internal_has_voice_mic_input_gain();
}
inline void CMsgClientSettings::clear_voice_mic_input_gain() {
  voice_mic_input_gain_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline float CMsgClientSettings::_internal_voice_mic_input_gain() const {
  return voice_mic_input_gain_;
}
inline float CMsgClientSettings::voice_mic_input_gain() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.voice_mic_input_gain)
  return _internal_voice_mic_input_gain();
}
inline void CMsgClientSettings::_internal_set_voice_mic_input_gain(float value) {
  _has_bits_[1] |= 0x00800000u;
  voice_mic_input_gain_ = value;
}
inline void CMsgClientSettings::set_voice_mic_input_gain(float value) {
  _internal_set_voice_mic_input_gain(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.voice_mic_input_gain)
}

// optional float voice_speaker_output_gain = 4016 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_voice_speaker_output_gain() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_voice_speaker_output_gain() const {
  return _internal_has_voice_speaker_output_gain();
}
inline void CMsgClientSettings::clear_voice_speaker_output_gain() {
  voice_speaker_output_gain_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline float CMsgClientSettings::_internal_voice_speaker_output_gain() const {
  return voice_speaker_output_gain_;
}
inline float CMsgClientSettings::voice_speaker_output_gain() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.voice_speaker_output_gain)
  return _internal_voice_speaker_output_gain();
}
inline void CMsgClientSettings::_internal_set_voice_speaker_output_gain(float value) {
  _has_bits_[1] |= 0x01000000u;
  voice_speaker_output_gain_ = value;
}
inline void CMsgClientSettings::set_voice_speaker_output_gain(float value) {
  _internal_set_voice_speaker_output_gain(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.voice_speaker_output_gain)
}

// optional int32 voice_push_to_talsetting = 4017 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_voice_push_to_talsetting() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_voice_push_to_talsetting() const {
  return _internal_has_voice_push_to_talsetting();
}
inline void CMsgClientSettings::clear_voice_push_to_talsetting() {
  voice_push_to_talsetting_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_voice_push_to_talsetting() const {
  return voice_push_to_talsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::voice_push_to_talsetting() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.voice_push_to_talsetting)
  return _internal_voice_push_to_talsetting();
}
inline void CMsgClientSettings::_internal_set_voice_push_to_talsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x02000000u;
  voice_push_to_talsetting_ = value;
}
inline void CMsgClientSettings::set_voice_push_to_talsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voice_push_to_talsetting(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.voice_push_to_talsetting)
}

// optional .CMsgHotkey voice_push_to_talkey = 4018 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_voice_push_to_talkey() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || voice_push_to_talkey_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_voice_push_to_talkey() const {
  return _internal_has_voice_push_to_talkey();
}
inline void CMsgClientSettings::clear_voice_push_to_talkey() {
  if (voice_push_to_talkey_ != nullptr) voice_push_to_talkey_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_voice_push_to_talkey() const {
  const ::CMsgHotkey* p = voice_push_to_talkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::voice_push_to_talkey() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.voice_push_to_talkey)
  return _internal_voice_push_to_talkey();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_voice_push_to_talkey(
    ::CMsgHotkey* voice_push_to_talkey) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_push_to_talkey_);
  }
  voice_push_to_talkey_ = voice_push_to_talkey;
  if (voice_push_to_talkey) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.voice_push_to_talkey)
}
inline ::CMsgHotkey* CMsgClientSettings::release_voice_push_to_talkey() {
  _has_bits_[0] &= ~0x00010000u;
  ::CMsgHotkey* temp = voice_push_to_talkey_;
  voice_push_to_talkey_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_voice_push_to_talkey() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.voice_push_to_talkey)
  _has_bits_[0] &= ~0x00010000u;
  ::CMsgHotkey* temp = voice_push_to_talkey_;
  voice_push_to_talkey_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_voice_push_to_talkey() {
  _has_bits_[0] |= 0x00010000u;
  if (voice_push_to_talkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    voice_push_to_talkey_ = p;
  }
  return voice_push_to_talkey_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_voice_push_to_talkey() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.voice_push_to_talkey)
  return _internal_mutable_voice_push_to_talkey();
}
inline void CMsgClientSettings::set_allocated_voice_push_to_talkey(::CMsgHotkey* voice_push_to_talkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voice_push_to_talkey_;
  }
  if (voice_push_to_talkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voice_push_to_talkey);
    if (message_arena != submessage_arena) {
      voice_push_to_talkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice_push_to_talkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  voice_push_to_talkey_ = voice_push_to_talkey;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.voice_push_to_talkey)
}

// optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
inline bool CMsgClientSettings::_internal_has_overlay_toolbar_list_view() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_overlay_toolbar_list_view() const {
  return _internal_has_overlay_toolbar_list_view();
}
inline void CMsgClientSettings::clear_overlay_toolbar_list_view() {
  overlay_toolbar_list_view_ = false;
  _has_bits_[1] &= ~0x00100000u;
}
inline bool CMsgClientSettings::_internal_overlay_toolbar_list_view() const {
  return overlay_toolbar_list_view_;
}
inline bool CMsgClientSettings::overlay_toolbar_list_view() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_toolbar_list_view)
  return _internal_overlay_toolbar_list_view();
}
inline void CMsgClientSettings::_internal_set_overlay_toolbar_list_view(bool value) {
  _has_bits_[1] |= 0x00100000u;
  overlay_toolbar_list_view_ = value;
}
inline void CMsgClientSettings::set_overlay_toolbar_list_view(bool value) {
  _internal_set_overlay_toolbar_list_view(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.overlay_toolbar_list_view)
}

// optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
inline bool CMsgClientSettings::_internal_has_always_use_gamepadui_overlay() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_always_use_gamepadui_overlay() const {
  return _internal_has_always_use_gamepadui_overlay();
}
inline void CMsgClientSettings::clear_always_use_gamepadui_overlay() {
  always_use_gamepadui_overlay_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool CMsgClientSettings::_internal_always_use_gamepadui_overlay() const {
  return always_use_gamepadui_overlay_;
}
inline bool CMsgClientSettings::always_use_gamepadui_overlay() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.always_use_gamepadui_overlay)
  return _internal_always_use_gamepadui_overlay();
}
inline void CMsgClientSettings::_internal_set_always_use_gamepadui_overlay(bool value) {
  _has_bits_[1] |= 0x04000000u;
  always_use_gamepadui_overlay_ = value;
}
inline void CMsgClientSettings::set_always_use_gamepadui_overlay(bool value) {
  _internal_set_always_use_gamepadui_overlay(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.always_use_gamepadui_overlay)
}

// optional string overlay_tabs = 4021 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
inline bool CMsgClientSettings::_internal_has_overlay_tabs() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_overlay_tabs() const {
  return _internal_has_overlay_tabs();
}
inline void CMsgClientSettings::clear_overlay_tabs() {
  overlay_tabs_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgClientSettings::overlay_tabs() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_tabs)
  return _internal_overlay_tabs();
}
inline void CMsgClientSettings::set_overlay_tabs(const std::string& value) {
  _internal_set_overlay_tabs(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.overlay_tabs)
}
inline std::string* CMsgClientSettings::mutable_overlay_tabs() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.overlay_tabs)
  return _internal_mutable_overlay_tabs();
}
inline const std::string& CMsgClientSettings::_internal_overlay_tabs() const {
  return overlay_tabs_.Get();
}
inline void CMsgClientSettings::_internal_set_overlay_tabs(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  overlay_tabs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_overlay_tabs(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  overlay_tabs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.overlay_tabs)
}
inline void CMsgClientSettings::set_overlay_tabs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  overlay_tabs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.overlay_tabs)
}
inline void CMsgClientSettings::set_overlay_tabs(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  overlay_tabs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.overlay_tabs)
}
inline std::string* CMsgClientSettings::_internal_mutable_overlay_tabs() {
  _has_bits_[0] |= 0x00000020u;
  return overlay_tabs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_overlay_tabs() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.overlay_tabs)
  if (!_internal_has_overlay_tabs()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return overlay_tabs_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_overlay_tabs(std::string* overlay_tabs) {
  if (overlay_tabs != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  overlay_tabs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overlay_tabs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.overlay_tabs)
}

// optional bool overlay_scale_interface = 4022 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_overlay_scale_interface() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_overlay_scale_interface() const {
  return _internal_has_overlay_scale_interface();
}
inline void CMsgClientSettings::clear_overlay_scale_interface() {
  overlay_scale_interface_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool CMsgClientSettings::_internal_overlay_scale_interface() const {
  return overlay_scale_interface_;
}
inline bool CMsgClientSettings::overlay_scale_interface() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_scale_interface)
  return _internal_overlay_scale_interface();
}
inline void CMsgClientSettings::_internal_set_overlay_scale_interface(bool value) {
  _has_bits_[1] |= 0x08000000u;
  overlay_scale_interface_ = value;
}
inline void CMsgClientSettings::set_overlay_scale_interface(bool value) {
  _internal_set_overlay_scale_interface(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.overlay_scale_interface)
}

// optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_overlay_restore_browser_tabs() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_overlay_restore_browser_tabs() const {
  return _internal_has_overlay_restore_browser_tabs();
}
inline void CMsgClientSettings::clear_overlay_restore_browser_tabs() {
  overlay_restore_browser_tabs_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool CMsgClientSettings::_internal_overlay_restore_browser_tabs() const {
  return overlay_restore_browser_tabs_;
}
inline bool CMsgClientSettings::overlay_restore_browser_tabs() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.overlay_restore_browser_tabs)
  return _internal_overlay_restore_browser_tabs();
}
inline void CMsgClientSettings::_internal_set_overlay_restore_browser_tabs(bool value) {
  _has_bits_[1] |= 0x10000000u;
  overlay_restore_browser_tabs_ = value;
}
inline void CMsgClientSettings::set_overlay_restore_browser_tabs(bool value) {
  _internal_set_overlay_restore_browser_tabs(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.overlay_restore_browser_tabs)
}

// optional bool enable_avif_screenshots = 4024 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotEnableAVIF"];
inline bool CMsgClientSettings::_internal_has_enable_avif_screenshots() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_avif_screenshots() const {
  return _internal_has_enable_avif_screenshots();
}
inline void CMsgClientSettings::clear_enable_avif_screenshots() {
  enable_avif_screenshots_ = false;
  _has_bits_[1] &= ~0x20000000u;
}
inline bool CMsgClientSettings::_internal_enable_avif_screenshots() const {
  return enable_avif_screenshots_;
}
inline bool CMsgClientSettings::enable_avif_screenshots() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_avif_screenshots)
  return _internal_enable_avif_screenshots();
}
inline void CMsgClientSettings::_internal_set_enable_avif_screenshots(bool value) {
  _has_bits_[1] |= 0x20000000u;
  enable_avif_screenshots_ = value;
}
inline void CMsgClientSettings::set_enable_avif_screenshots(bool value) {
  _internal_set_enable_avif_screenshots(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_avif_screenshots)
}

// optional bool smooth_scroll_webviews = 5000 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_smooth_scroll_webviews() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_smooth_scroll_webviews() const {
  return _internal_has_smooth_scroll_webviews();
}
inline void CMsgClientSettings::clear_smooth_scroll_webviews() {
  smooth_scroll_webviews_ = false;
  _has_bits_[1] &= ~0x40000000u;
}
inline bool CMsgClientSettings::_internal_smooth_scroll_webviews() const {
  return smooth_scroll_webviews_;
}
inline bool CMsgClientSettings::smooth_scroll_webviews() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.smooth_scroll_webviews)
  return _internal_smooth_scroll_webviews();
}
inline void CMsgClientSettings::_internal_set_smooth_scroll_webviews(bool value) {
  _has_bits_[1] |= 0x40000000u;
  smooth_scroll_webviews_ = value;
}
inline void CMsgClientSettings::set_smooth_scroll_webviews(bool value) {
  _internal_set_smooth_scroll_webviews(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.smooth_scroll_webviews)
}

// optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_enable_gpu_accelerated_webviews() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_gpu_accelerated_webviews() const {
  return _internal_has_enable_gpu_accelerated_webviews();
}
inline void CMsgClientSettings::clear_enable_gpu_accelerated_webviews() {
  enable_gpu_accelerated_webviews_ = false;
  _has_bits_[1] &= ~0x80000000u;
}
inline bool CMsgClientSettings::_internal_enable_gpu_accelerated_webviews() const {
  return enable_gpu_accelerated_webviews_;
}
inline bool CMsgClientSettings::enable_gpu_accelerated_webviews() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_gpu_accelerated_webviews)
  return _internal_enable_gpu_accelerated_webviews();
}
inline void CMsgClientSettings::_internal_set_enable_gpu_accelerated_webviews(bool value) {
  _has_bits_[1] |= 0x80000000u;
  enable_gpu_accelerated_webviews_ = value;
}
inline void CMsgClientSettings::set_enable_gpu_accelerated_webviews(bool value) {
  _internal_set_enable_gpu_accelerated_webviews(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_gpu_accelerated_webviews)
}

// optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_enable_hardware_video_decoding() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_hardware_video_decoding() const {
  return _internal_has_enable_hardware_video_decoding();
}
inline void CMsgClientSettings::clear_enable_hardware_video_decoding() {
  enable_hardware_video_decoding_ = false;
  _has_bits_[2] &= ~0x00000001u;
}
inline bool CMsgClientSettings::_internal_enable_hardware_video_decoding() const {
  return enable_hardware_video_decoding_;
}
inline bool CMsgClientSettings::enable_hardware_video_decoding() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_hardware_video_decoding)
  return _internal_enable_hardware_video_decoding();
}
inline void CMsgClientSettings::_internal_set_enable_hardware_video_decoding(bool value) {
  _has_bits_[2] |= 0x00000001u;
  enable_hardware_video_decoding_ = value;
}
inline void CMsgClientSettings::set_enable_hardware_video_decoding(bool value) {
  _internal_set_enable_hardware_video_decoding(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_hardware_video_decoding)
}

// optional bool run_at_startup = 5004 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_run_at_startup() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_run_at_startup() const {
  return _internal_has_run_at_startup();
}
inline void CMsgClientSettings::clear_run_at_startup() {
  run_at_startup_ = false;
  _has_bits_[2] &= ~0x00000002u;
}
inline bool CMsgClientSettings::_internal_run_at_startup() const {
  return run_at_startup_;
}
inline bool CMsgClientSettings::run_at_startup() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.run_at_startup)
  return _internal_run_at_startup();
}
inline void CMsgClientSettings::_internal_set_run_at_startup(bool value) {
  _has_bits_[2] |= 0x00000002u;
  run_at_startup_ = value;
}
inline void CMsgClientSettings::set_run_at_startup(bool value) {
  _internal_set_run_at_startup(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.run_at_startup)
}

// optional bool enable_dpi_scaling = 5005 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_enable_dpi_scaling() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_dpi_scaling() const {
  return _internal_has_enable_dpi_scaling();
}
inline void CMsgClientSettings::clear_enable_dpi_scaling() {
  enable_dpi_scaling_ = false;
  _has_bits_[2] &= ~0x00000004u;
}
inline bool CMsgClientSettings::_internal_enable_dpi_scaling() const {
  return enable_dpi_scaling_;
}
inline bool CMsgClientSettings::enable_dpi_scaling() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_dpi_scaling)
  return _internal_enable_dpi_scaling();
}
inline void CMsgClientSettings::_internal_set_enable_dpi_scaling(bool value) {
  _has_bits_[2] |= 0x00000004u;
  enable_dpi_scaling_ = value;
}
inline void CMsgClientSettings::set_enable_dpi_scaling(bool value) {
  _internal_set_enable_dpi_scaling(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_dpi_scaling)
}

// optional bool enable_marketing_messages = 5006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_enable_marketing_messages() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_marketing_messages() const {
  return _internal_has_enable_marketing_messages();
}
inline void CMsgClientSettings::clear_enable_marketing_messages() {
  enable_marketing_messages_ = false;
  _has_bits_[2] &= ~0x00000008u;
}
inline bool CMsgClientSettings::_internal_enable_marketing_messages() const {
  return enable_marketing_messages_;
}
inline bool CMsgClientSettings::enable_marketing_messages() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_marketing_messages)
  return _internal_enable_marketing_messages();
}
inline void CMsgClientSettings::_internal_set_enable_marketing_messages(bool value) {
  _has_bits_[2] |= 0x00000008u;
  enable_marketing_messages_ = value;
}
inline void CMsgClientSettings::set_enable_marketing_messages(bool value) {
  _internal_set_enable_marketing_messages(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_marketing_messages)
}

// optional bool start_in_big_picture_mode = 5007 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_start_in_big_picture_mode() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_start_in_big_picture_mode() const {
  return _internal_has_start_in_big_picture_mode();
}
inline void CMsgClientSettings::clear_start_in_big_picture_mode() {
  start_in_big_picture_mode_ = false;
  _has_bits_[2] &= ~0x00000010u;
}
inline bool CMsgClientSettings::_internal_start_in_big_picture_mode() const {
  return start_in_big_picture_mode_;
}
inline bool CMsgClientSettings::start_in_big_picture_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.start_in_big_picture_mode)
  return _internal_start_in_big_picture_mode();
}
inline void CMsgClientSettings::_internal_set_start_in_big_picture_mode(bool value) {
  _has_bits_[2] |= 0x00000010u;
  start_in_big_picture_mode_ = value;
}
inline void CMsgClientSettings::set_start_in_big_picture_mode(bool value) {
  _internal_set_start_in_big_picture_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.start_in_big_picture_mode)
}

// optional uint32 jumplist_flags = 5008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
inline bool CMsgClientSettings::_internal_has_jumplist_flags() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_jumplist_flags() const {
  return _internal_has_jumplist_flags();
}
inline void CMsgClientSettings::clear_jumplist_flags() {
  jumplist_flags_ = 0u;
  _has_bits_[2] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSettings::_internal_jumplist_flags() const {
  return jumplist_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSettings::jumplist_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.jumplist_flags)
  return _internal_jumplist_flags();
}
inline void CMsgClientSettings::_internal_set_jumplist_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000040u;
  jumplist_flags_ = value;
}
inline void CMsgClientSettings::set_jumplist_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jumplist_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.jumplist_flags)
}

// optional bool enable_ui_sounds = 5009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_enable_ui_sounds() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_ui_sounds() const {
  return _internal_has_enable_ui_sounds();
}
inline void CMsgClientSettings::clear_enable_ui_sounds() {
  enable_ui_sounds_ = false;
  _has_bits_[2] &= ~0x00000020u;
}
inline bool CMsgClientSettings::_internal_enable_ui_sounds() const {
  return enable_ui_sounds_;
}
inline bool CMsgClientSettings::enable_ui_sounds() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_ui_sounds)
  return _internal_enable_ui_sounds();
}
inline void CMsgClientSettings::_internal_set_enable_ui_sounds(bool value) {
  _has_bits_[2] |= 0x00000020u;
  enable_ui_sounds_ = value;
}
inline void CMsgClientSettings::set_enable_ui_sounds(bool value) {
  _internal_set_enable_ui_sounds(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_ui_sounds)
}

// optional bool disable_all_toasts = 6000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
inline bool CMsgClientSettings::_internal_has_disable_all_toasts() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_disable_all_toasts() const {
  return _internal_has_disable_all_toasts();
}
inline void CMsgClientSettings::clear_disable_all_toasts() {
  disable_all_toasts_ = false;
  _has_bits_[2] &= ~0x00000080u;
}
inline bool CMsgClientSettings::_internal_disable_all_toasts() const {
  return disable_all_toasts_;
}
inline bool CMsgClientSettings::disable_all_toasts() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.disable_all_toasts)
  return _internal_disable_all_toasts();
}
inline void CMsgClientSettings::_internal_set_disable_all_toasts(bool value) {
  _has_bits_[2] |= 0x00000080u;
  disable_all_toasts_ = value;
}
inline void CMsgClientSettings::set_disable_all_toasts(bool value) {
  _internal_set_disable_all_toasts(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.disable_all_toasts)
}

// optional bool disable_toasts_in_game = 6001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
inline bool CMsgClientSettings::_internal_has_disable_toasts_in_game() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_disable_toasts_in_game() const {
  return _internal_has_disable_toasts_in_game();
}
inline void CMsgClientSettings::clear_disable_toasts_in_game() {
  disable_toasts_in_game_ = false;
  _has_bits_[2] &= ~0x00000100u;
}
inline bool CMsgClientSettings::_internal_disable_toasts_in_game() const {
  return disable_toasts_in_game_;
}
inline bool CMsgClientSettings::disable_toasts_in_game() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.disable_toasts_in_game)
  return _internal_disable_toasts_in_game();
}
inline void CMsgClientSettings::_internal_set_disable_toasts_in_game(bool value) {
  _has_bits_[2] |= 0x00000100u;
  disable_toasts_in_game_ = value;
}
inline void CMsgClientSettings::set_disable_toasts_in_game(bool value) {
  _internal_set_disable_toasts_in_game(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.disable_toasts_in_game)
}

// optional bool play_sound_on_toast = 6002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_play_sound_on_toast() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_play_sound_on_toast() const {
  return _internal_has_play_sound_on_toast();
}
inline void CMsgClientSettings::clear_play_sound_on_toast() {
  play_sound_on_toast_ = false;
  _has_bits_[2] &= ~0x00000200u;
}
inline bool CMsgClientSettings::_internal_play_sound_on_toast() const {
  return play_sound_on_toast_;
}
inline bool CMsgClientSettings::play_sound_on_toast() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.play_sound_on_toast)
  return _internal_play_sound_on_toast();
}
inline void CMsgClientSettings::_internal_set_play_sound_on_toast(bool value) {
  _has_bits_[2] |= 0x00000200u;
  play_sound_on_toast_ = value;
}
inline void CMsgClientSettings::set_play_sound_on_toast(bool value) {
  _internal_set_play_sound_on_toast(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.play_sound_on_toast)
}

// optional int32 library_display_size = 7000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
inline bool CMsgClientSettings::_internal_has_library_display_size() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_library_display_size() const {
  return _internal_has_library_display_size();
}
inline void CMsgClientSettings::clear_library_display_size() {
  library_display_size_ = 0;
  _has_bits_[2] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_library_display_size() const {
  return library_display_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::library_display_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.library_display_size)
  return _internal_library_display_size();
}
inline void CMsgClientSettings::_internal_set_library_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000800u;
  library_display_size_ = value;
}
inline void CMsgClientSettings::set_library_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_library_display_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.library_display_size)
}

// optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
inline bool CMsgClientSettings::_internal_has_library_whats_new_show_only_product_updates() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_library_whats_new_show_only_product_updates() const {
  return _internal_has_library_whats_new_show_only_product_updates();
}
inline void CMsgClientSettings::clear_library_whats_new_show_only_product_updates() {
  library_whats_new_show_only_product_updates_ = false;
  _has_bits_[2] &= ~0x00000400u;
}
inline bool CMsgClientSettings::_internal_library_whats_new_show_only_product_updates() const {
  return library_whats_new_show_only_product_updates_;
}
inline bool CMsgClientSettings::library_whats_new_show_only_product_updates() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.library_whats_new_show_only_product_updates)
  return _internal_library_whats_new_show_only_product_updates();
}
inline void CMsgClientSettings::_internal_set_library_whats_new_show_only_product_updates(bool value) {
  _has_bits_[2] |= 0x00000400u;
  library_whats_new_show_only_product_updates_ = value;
}
inline void CMsgClientSettings::set_library_whats_new_show_only_product_updates(bool value) {
  _internal_set_library_whats_new_show_only_product_updates(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.library_whats_new_show_only_product_updates)
}

// optional bool show_store_content_on_home = 7002 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_show_store_content_on_home() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_store_content_on_home() const {
  return _internal_has_show_store_content_on_home();
}
inline void CMsgClientSettings::clear_show_store_content_on_home() {
  show_store_content_on_home_ = false;
  _has_bits_[2] &= ~0x00001000u;
}
inline bool CMsgClientSettings::_internal_show_store_content_on_home() const {
  return show_store_content_on_home_;
}
inline bool CMsgClientSettings::show_store_content_on_home() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_store_content_on_home)
  return _internal_show_store_content_on_home();
}
inline void CMsgClientSettings::_internal_set_show_store_content_on_home(bool value) {
  _has_bits_[2] |= 0x00001000u;
  show_store_content_on_home_ = value;
}
inline void CMsgClientSettings::set_show_store_content_on_home(bool value) {
  _internal_set_show_store_content_on_home(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_store_content_on_home)
}

// optional string start_page = 7003 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_start_page() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_start_page() const {
  return _internal_has_start_page();
}
inline void CMsgClientSettings::clear_start_page() {
  start_page_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgClientSettings::start_page() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.start_page)
  return _internal_start_page();
}
inline void CMsgClientSettings::set_start_page(const std::string& value) {
  _internal_set_start_page(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.start_page)
}
inline std::string* CMsgClientSettings::mutable_start_page() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.start_page)
  return _internal_mutable_start_page();
}
inline const std::string& CMsgClientSettings::_internal_start_page() const {
  return start_page_.Get();
}
inline void CMsgClientSettings::_internal_set_start_page(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  start_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_start_page(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  start_page_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.start_page)
}
inline void CMsgClientSettings::set_start_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  start_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.start_page)
}
inline void CMsgClientSettings::set_start_page(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  start_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.start_page)
}
inline std::string* CMsgClientSettings::_internal_mutable_start_page() {
  _has_bits_[0] |= 0x00000040u;
  return start_page_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_start_page() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.start_page)
  if (!_internal_has_start_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return start_page_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_start_page(std::string* start_page) {
  if (start_page != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  start_page_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_page,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.start_page)
}

// optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
inline bool CMsgClientSettings::_internal_has_library_low_bandwidth_mode() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_library_low_bandwidth_mode() const {
  return _internal_has_library_low_bandwidth_mode();
}
inline void CMsgClientSettings::clear_library_low_bandwidth_mode() {
  library_low_bandwidth_mode_ = false;
  _has_bits_[2] &= ~0x00002000u;
}
inline bool CMsgClientSettings::_internal_library_low_bandwidth_mode() const {
  return library_low_bandwidth_mode_;
}
inline bool CMsgClientSettings::library_low_bandwidth_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.library_low_bandwidth_mode)
  return _internal_library_low_bandwidth_mode();
}
inline void CMsgClientSettings::_internal_set_library_low_bandwidth_mode(bool value) {
  _has_bits_[2] |= 0x00002000u;
  library_low_bandwidth_mode_ = value;
}
inline void CMsgClientSettings::set_library_low_bandwidth_mode(bool value) {
  _internal_set_library_low_bandwidth_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.library_low_bandwidth_mode)
}

// optional bool library_low_perf_mode = 7005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
inline bool CMsgClientSettings::_internal_has_library_low_perf_mode() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_library_low_perf_mode() const {
  return _internal_has_library_low_perf_mode();
}
inline void CMsgClientSettings::clear_library_low_perf_mode() {
  library_low_perf_mode_ = false;
  _has_bits_[2] &= ~0x00004000u;
}
inline bool CMsgClientSettings::_internal_library_low_perf_mode() const {
  return library_low_perf_mode_;
}
inline bool CMsgClientSettings::library_low_perf_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.library_low_perf_mode)
  return _internal_library_low_perf_mode();
}
inline void CMsgClientSettings::_internal_set_library_low_perf_mode(bool value) {
  _has_bits_[2] |= 0x00004000u;
  library_low_perf_mode_ = value;
}
inline void CMsgClientSettings::set_library_low_perf_mode(bool value) {
  _internal_set_library_low_perf_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.library_low_perf_mode)
}

// optional bool library_disable_community_content = 7006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
inline bool CMsgClientSettings::_internal_has_library_disable_community_content() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_library_disable_community_content() const {
  return _internal_has_library_disable_community_content();
}
inline void CMsgClientSettings::clear_library_disable_community_content() {
  library_disable_community_content_ = false;
  _has_bits_[2] &= ~0x00008000u;
}
inline bool CMsgClientSettings::_internal_library_disable_community_content() const {
  return library_disable_community_content_;
}
inline bool CMsgClientSettings::library_disable_community_content() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.library_disable_community_content)
  return _internal_library_disable_community_content();
}
inline void CMsgClientSettings::_internal_set_library_disable_community_content(bool value) {
  _has_bits_[2] |= 0x00008000u;
  library_disable_community_content_ = value;
}
inline void CMsgClientSettings::set_library_disable_community_content(bool value) {
  _internal_set_library_disable_community_content(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.library_disable_community_content)
}

// optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_library_display_icon_in_game_list() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_library_display_icon_in_game_list() const {
  return _internal_has_library_display_icon_in_game_list();
}
inline void CMsgClientSettings::clear_library_display_icon_in_game_list() {
  library_display_icon_in_game_list_ = false;
  _has_bits_[2] &= ~0x00010000u;
}
inline bool CMsgClientSettings::_internal_library_display_icon_in_game_list() const {
  return library_display_icon_in_game_list_;
}
inline bool CMsgClientSettings::library_display_icon_in_game_list() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.library_display_icon_in_game_list)
  return _internal_library_display_icon_in_game_list();
}
inline void CMsgClientSettings::_internal_set_library_display_icon_in_game_list(bool value) {
  _has_bits_[2] |= 0x00010000u;
  library_display_icon_in_game_list_ = value;
}
inline void CMsgClientSettings::set_library_display_icon_in_game_list(bool value) {
  _internal_set_library_display_icon_in_game_list(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.library_display_icon_in_game_list)
}

// optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
inline bool CMsgClientSettings::_internal_has_ready_to_play_includes_streaming() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_ready_to_play_includes_streaming() const {
  return _internal_has_ready_to_play_includes_streaming();
}
inline void CMsgClientSettings::clear_ready_to_play_includes_streaming() {
  ready_to_play_includes_streaming_ = false;
  _has_bits_[2] &= ~0x00020000u;
}
inline bool CMsgClientSettings::_internal_ready_to_play_includes_streaming() const {
  return ready_to_play_includes_streaming_;
}
inline bool CMsgClientSettings::ready_to_play_includes_streaming() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.ready_to_play_includes_streaming)
  return _internal_ready_to_play_includes_streaming();
}
inline void CMsgClientSettings::_internal_set_ready_to_play_includes_streaming(bool value) {
  _has_bits_[2] |= 0x00020000u;
  ready_to_play_includes_streaming_ = value;
}
inline void CMsgClientSettings::set_ready_to_play_includes_streaming(bool value) {
  _internal_set_ready_to_play_includes_streaming(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.ready_to_play_includes_streaming)
}

// optional bool show_steam_decinfo = 7009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
inline bool CMsgClientSettings::_internal_has_show_steam_decinfo() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_steam_decinfo() const {
  return _internal_has_show_steam_decinfo();
}
inline void CMsgClientSettings::clear_show_steam_decinfo() {
  show_steam_decinfo_ = false;
  _has_bits_[2] &= ~0x00040000u;
}
inline bool CMsgClientSettings::_internal_show_steam_decinfo() const {
  return show_steam_decinfo_;
}
inline bool CMsgClientSettings::show_steam_decinfo() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_steam_decinfo)
  return _internal_show_steam_decinfo();
}
inline void CMsgClientSettings::_internal_set_show_steam_decinfo(bool value) {
  _has_bits_[2] |= 0x00040000u;
  show_steam_decinfo_ = value;
}
inline void CMsgClientSettings::set_show_steam_decinfo(bool value) {
  _internal_set_show_steam_decinfo(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_steam_decinfo)
}

// optional bool enable_shader_precache = 8000 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_enable_shader_precache() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_shader_precache() const {
  return _internal_has_enable_shader_precache();
}
inline void CMsgClientSettings::clear_enable_shader_precache() {
  enable_shader_precache_ = false;
  _has_bits_[2] &= ~0x00080000u;
}
inline bool CMsgClientSettings::_internal_enable_shader_precache() const {
  return enable_shader_precache_;
}
inline bool CMsgClientSettings::enable_shader_precache() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_shader_precache)
  return _internal_enable_shader_precache();
}
inline void CMsgClientSettings::_internal_set_enable_shader_precache(bool value) {
  _has_bits_[2] |= 0x00080000u;
  enable_shader_precache_ = value;
}
inline void CMsgClientSettings::set_enable_shader_precache(bool value) {
  _internal_set_enable_shader_precache(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_shader_precache)
}

// optional bool enable_shader_background_processing = 8001 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_enable_shader_background_processing() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_enable_shader_background_processing() const {
  return _internal_has_enable_shader_background_processing();
}
inline void CMsgClientSettings::clear_enable_shader_background_processing() {
  enable_shader_background_processing_ = false;
  _has_bits_[2] &= ~0x00200000u;
}
inline bool CMsgClientSettings::_internal_enable_shader_background_processing() const {
  return enable_shader_background_processing_;
}
inline bool CMsgClientSettings::enable_shader_background_processing() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.enable_shader_background_processing)
  return _internal_enable_shader_background_processing();
}
inline void CMsgClientSettings::_internal_set_enable_shader_background_processing(bool value) {
  _has_bits_[2] |= 0x00200000u;
  enable_shader_background_processing_ = value;
}
inline void CMsgClientSettings::set_enable_shader_background_processing(bool value) {
  _internal_set_enable_shader_background_processing(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.enable_shader_background_processing)
}

// optional uint64 shader_precached_size = 8002 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
inline bool CMsgClientSettings::_internal_has_shader_precached_size() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_shader_precached_size() const {
  return _internal_has_shader_precached_size();
}
inline void CMsgClientSettings::clear_shader_precached_size() {
  shader_precached_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSettings::_internal_shader_precached_size() const {
  return shader_precached_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSettings::shader_precached_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.shader_precached_size)
  return _internal_shader_precached_size();
}
inline void CMsgClientSettings::_internal_set_shader_precached_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[2] |= 0x00100000u;
  shader_precached_size_ = value;
}
inline void CMsgClientSettings::set_shader_precached_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shader_precached_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.shader_precached_size)
}

// optional bool needs_steam_service_repair = 8003 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_readonly) = true];
inline bool CMsgClientSettings::_internal_has_needs_steam_service_repair() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_needs_steam_service_repair() const {
  return _internal_has_needs_steam_service_repair();
}
inline void CMsgClientSettings::clear_needs_steam_service_repair() {
  needs_steam_service_repair_ = false;
  _has_bits_[2] &= ~0x00400000u;
}
inline bool CMsgClientSettings::_internal_needs_steam_service_repair() const {
  return needs_steam_service_repair_;
}
inline bool CMsgClientSettings::needs_steam_service_repair() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.needs_steam_service_repair)
  return _internal_needs_steam_service_repair();
}
inline void CMsgClientSettings::_internal_set_needs_steam_service_repair(bool value) {
  _has_bits_[2] |= 0x00400000u;
  needs_steam_service_repair_ = value;
}
inline void CMsgClientSettings::set_needs_steam_service_repair(bool value) {
  _internal_set_needs_steam_service_repair(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.needs_steam_service_repair)
}

// optional int32 download_peer_content = 8004 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_download_peer_content() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_download_peer_content() const {
  return _internal_has_download_peer_content();
}
inline void CMsgClientSettings::clear_download_peer_content() {
  download_peer_content_ = 0;
  _has_bits_[2] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_download_peer_content() const {
  return download_peer_content_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::download_peer_content() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.download_peer_content)
  return _internal_download_peer_content();
}
inline void CMsgClientSettings::_internal_set_download_peer_content(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x02000000u;
  download_peer_content_ = value;
}
inline void CMsgClientSettings::set_download_peer_content(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_download_peer_content(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.download_peer_content)
}

// optional bool download_rate_bits_per_s = 8005 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_download_rate_bits_per_s() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_download_rate_bits_per_s() const {
  return _internal_has_download_rate_bits_per_s();
}
inline void CMsgClientSettings::clear_download_rate_bits_per_s() {
  download_rate_bits_per_s_ = false;
  _has_bits_[2] &= ~0x00800000u;
}
inline bool CMsgClientSettings::_internal_download_rate_bits_per_s() const {
  return download_rate_bits_per_s_;
}
inline bool CMsgClientSettings::download_rate_bits_per_s() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.download_rate_bits_per_s)
  return _internal_download_rate_bits_per_s();
}
inline void CMsgClientSettings::_internal_set_download_rate_bits_per_s(bool value) {
  _has_bits_[2] |= 0x00800000u;
  download_rate_bits_per_s_ = value;
}
inline void CMsgClientSettings::set_download_rate_bits_per_s(bool value) {
  _internal_set_download_rate_bits_per_s(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.download_rate_bits_per_s)
}

// optional bool restrict_auto_updates = 8006 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_restrict_auto_updates() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_restrict_auto_updates() const {
  return _internal_has_restrict_auto_updates();
}
inline void CMsgClientSettings::clear_restrict_auto_updates() {
  restrict_auto_updates_ = false;
  _has_bits_[2] &= ~0x01000000u;
}
inline bool CMsgClientSettings::_internal_restrict_auto_updates() const {
  return restrict_auto_updates_;
}
inline bool CMsgClientSettings::restrict_auto_updates() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.restrict_auto_updates)
  return _internal_restrict_auto_updates();
}
inline void CMsgClientSettings::_internal_set_restrict_auto_updates(bool value) {
  _has_bits_[2] |= 0x01000000u;
  restrict_auto_updates_ = value;
}
inline void CMsgClientSettings::set_restrict_auto_updates(bool value) {
  _internal_set_restrict_auto_updates(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.restrict_auto_updates)
}

// optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_restrict_auto_updates_start() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_restrict_auto_updates_start() const {
  return _internal_has_restrict_auto_updates_start();
}
inline void CMsgClientSettings::clear_restrict_auto_updates_start() {
  restrict_auto_updates_start_ = 0;
  _has_bits_[2] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_restrict_auto_updates_start() const {
  return restrict_auto_updates_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::restrict_auto_updates_start() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.restrict_auto_updates_start)
  return _internal_restrict_auto_updates_start();
}
inline void CMsgClientSettings::_internal_set_restrict_auto_updates_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x04000000u;
  restrict_auto_updates_start_ = value;
}
inline void CMsgClientSettings::set_restrict_auto_updates_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restrict_auto_updates_start(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.restrict_auto_updates_start)
}

// optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_restrict_auto_updates_end() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_restrict_auto_updates_end() const {
  return _internal_has_restrict_auto_updates_end();
}
inline void CMsgClientSettings::clear_restrict_auto_updates_end() {
  restrict_auto_updates_end_ = 0;
  _has_bits_[2] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_restrict_auto_updates_end() const {
  return restrict_auto_updates_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::restrict_auto_updates_end() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.restrict_auto_updates_end)
  return _internal_restrict_auto_updates_end();
}
inline void CMsgClientSettings::_internal_set_restrict_auto_updates_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x08000000u;
  restrict_auto_updates_end_ = value;
}
inline void CMsgClientSettings::set_restrict_auto_updates_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_restrict_auto_updates_end(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.restrict_auto_updates_end)
}

// optional int32 download_region = 8009 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_download_region() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_download_region() const {
  return _internal_has_download_region();
}
inline void CMsgClientSettings::clear_download_region() {
  download_region_ = 0;
  _has_bits_[2] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_download_region() const {
  return download_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::download_region() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.download_region)
  return _internal_download_region();
}
inline void CMsgClientSettings::_internal_set_download_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x10000000u;
  download_region_ = value;
}
inline void CMsgClientSettings::set_download_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_download_region(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.download_region)
}

// optional bool download_while_app_running = 8010 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_download_while_app_running() const {
  bool value = (_has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_download_while_app_running() const {
  return _internal_has_download_while_app_running();
}
inline void CMsgClientSettings::clear_download_while_app_running() {
  download_while_app_running_ = false;
  _has_bits_[2] &= ~0x80000000u;
}
inline bool CMsgClientSettings::_internal_download_while_app_running() const {
  return download_while_app_running_;
}
inline bool CMsgClientSettings::download_while_app_running() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.download_while_app_running)
  return _internal_download_while_app_running();
}
inline void CMsgClientSettings::_internal_set_download_while_app_running(bool value) {
  _has_bits_[2] |= 0x80000000u;
  download_while_app_running_ = value;
}
inline void CMsgClientSettings::set_download_while_app_running(bool value) {
  _internal_set_download_while_app_running(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.download_while_app_running)
}

// optional bool download_throttle_while_streaming = 8011 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_download_throttle_while_streaming() const {
  bool value = (_has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_download_throttle_while_streaming() const {
  return _internal_has_download_throttle_while_streaming();
}
inline void CMsgClientSettings::clear_download_throttle_while_streaming() {
  download_throttle_while_streaming_ = false;
  _has_bits_[3] &= ~0x00000001u;
}
inline bool CMsgClientSettings::_internal_download_throttle_while_streaming() const {
  return download_throttle_while_streaming_;
}
inline bool CMsgClientSettings::download_throttle_while_streaming() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.download_throttle_while_streaming)
  return _internal_download_throttle_while_streaming();
}
inline void CMsgClientSettings::_internal_set_download_throttle_while_streaming(bool value) {
  _has_bits_[3] |= 0x00000001u;
  download_throttle_while_streaming_ = value;
}
inline void CMsgClientSettings::set_download_throttle_while_streaming(bool value) {
  _internal_set_download_throttle_while_streaming(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.download_throttle_while_streaming)
}

// optional int32 download_throttle_rate = 8012 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_download_throttle_rate() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_download_throttle_rate() const {
  return _internal_has_download_throttle_rate();
}
inline void CMsgClientSettings::clear_download_throttle_rate() {
  download_throttle_rate_ = 0;
  _has_bits_[2] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_download_throttle_rate() const {
  return download_throttle_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::download_throttle_rate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.download_throttle_rate)
  return _internal_download_throttle_rate();
}
inline void CMsgClientSettings::_internal_set_download_throttle_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x20000000u;
  download_throttle_rate_ = value;
}
inline void CMsgClientSettings::set_download_throttle_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_download_throttle_rate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.download_throttle_rate)
}

// optional int32 default_app_update_behavior = 8013 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_default_app_update_behavior() const {
  bool value = (_has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_default_app_update_behavior() const {
  return _internal_has_default_app_update_behavior();
}
inline void CMsgClientSettings::clear_default_app_update_behavior() {
  default_app_update_behavior_ = 0;
  _has_bits_[2] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_default_app_update_behavior() const {
  return default_app_update_behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::default_app_update_behavior() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.default_app_update_behavior)
  return _internal_default_app_update_behavior();
}
inline void CMsgClientSettings::_internal_set_default_app_update_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x40000000u;
  default_app_update_behavior_ = value;
}
inline void CMsgClientSettings::set_default_app_update_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_app_update_behavior(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.default_app_update_behavior)
}

// optional bool cloud_enabled = 10000 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_cloud_enabled() const {
  bool value = (_has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_cloud_enabled() const {
  return _internal_has_cloud_enabled();
}
inline void CMsgClientSettings::clear_cloud_enabled() {
  cloud_enabled_ = false;
  _has_bits_[3] &= ~0x00000002u;
}
inline bool CMsgClientSettings::_internal_cloud_enabled() const {
  return cloud_enabled_;
}
inline bool CMsgClientSettings::cloud_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.cloud_enabled)
  return _internal_cloud_enabled();
}
inline void CMsgClientSettings::_internal_set_cloud_enabled(bool value) {
  _has_bits_[3] |= 0x00000002u;
  cloud_enabled_ = value;
}
inline void CMsgClientSettings::set_cloud_enabled(bool value) {
  _internal_set_cloud_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.cloud_enabled)
}

// optional bool show_screenshot_manager = 10001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
inline bool CMsgClientSettings::_internal_has_show_screenshot_manager() const {
  bool value = (_has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_screenshot_manager() const {
  return _internal_has_show_screenshot_manager();
}
inline void CMsgClientSettings::clear_show_screenshot_manager() {
  show_screenshot_manager_ = false;
  _has_bits_[3] &= ~0x00000004u;
}
inline bool CMsgClientSettings::_internal_show_screenshot_manager() const {
  return show_screenshot_manager_;
}
inline bool CMsgClientSettings::show_screenshot_manager() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_screenshot_manager)
  return _internal_show_screenshot_manager();
}
inline void CMsgClientSettings::_internal_set_show_screenshot_manager(bool value) {
  _has_bits_[3] |= 0x00000004u;
  show_screenshot_manager_ = value;
}
inline void CMsgClientSettings::set_show_screenshot_manager(bool value) {
  _internal_set_show_screenshot_manager(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_screenshot_manager)
}

// optional int32 music_volume = 11000 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_music_volume() const {
  bool value = (_has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_music_volume() const {
  return _internal_has_music_volume();
}
inline void CMsgClientSettings::clear_music_volume() {
  music_volume_ = 0;
  _has_bits_[3] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_music_volume() const {
  return music_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::music_volume() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.music_volume)
  return _internal_music_volume();
}
inline void CMsgClientSettings::_internal_set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000008u;
  music_volume_ = value;
}
inline void CMsgClientSettings::set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_music_volume(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.music_volume)
}

// optional bool music_pause_on_app_start = 11001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
inline bool CMsgClientSettings::_internal_has_music_pause_on_app_start() const {
  bool value = (_has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_music_pause_on_app_start() const {
  return _internal_has_music_pause_on_app_start();
}
inline void CMsgClientSettings::clear_music_pause_on_app_start() {
  music_pause_on_app_start_ = false;
  _has_bits_[3] &= ~0x00000010u;
}
inline bool CMsgClientSettings::_internal_music_pause_on_app_start() const {
  return music_pause_on_app_start_;
}
inline bool CMsgClientSettings::music_pause_on_app_start() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.music_pause_on_app_start)
  return _internal_music_pause_on_app_start();
}
inline void CMsgClientSettings::_internal_set_music_pause_on_app_start(bool value) {
  _has_bits_[3] |= 0x00000010u;
  music_pause_on_app_start_ = value;
}
inline void CMsgClientSettings::set_music_pause_on_app_start(bool value) {
  _internal_set_music_pause_on_app_start(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.music_pause_on_app_start)
}

// optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
inline bool CMsgClientSettings::_internal_has_music_pause_on_voice_chat() const {
  bool value = (_has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_music_pause_on_voice_chat() const {
  return _internal_has_music_pause_on_voice_chat();
}
inline void CMsgClientSettings::clear_music_pause_on_voice_chat() {
  music_pause_on_voice_chat_ = false;
  _has_bits_[3] &= ~0x00000020u;
}
inline bool CMsgClientSettings::_internal_music_pause_on_voice_chat() const {
  return music_pause_on_voice_chat_;
}
inline bool CMsgClientSettings::music_pause_on_voice_chat() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.music_pause_on_voice_chat)
  return _internal_music_pause_on_voice_chat();
}
inline void CMsgClientSettings::_internal_set_music_pause_on_voice_chat(bool value) {
  _has_bits_[3] |= 0x00000020u;
  music_pause_on_voice_chat_ = value;
}
inline void CMsgClientSettings::set_music_pause_on_voice_chat(bool value) {
  _internal_set_music_pause_on_voice_chat(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.music_pause_on_voice_chat)
}

// optional bool music_download_high_quality = 11003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
inline bool CMsgClientSettings::_internal_has_music_download_high_quality() const {
  bool value = (_has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_music_download_high_quality() const {
  return _internal_has_music_download_high_quality();
}
inline void CMsgClientSettings::clear_music_download_high_quality() {
  music_download_high_quality_ = false;
  _has_bits_[3] &= ~0x00000040u;
}
inline bool CMsgClientSettings::_internal_music_download_high_quality() const {
  return music_download_high_quality_;
}
inline bool CMsgClientSettings::music_download_high_quality() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.music_download_high_quality)
  return _internal_music_download_high_quality();
}
inline void CMsgClientSettings::_internal_set_music_download_high_quality(bool value) {
  _has_bits_[3] |= 0x00000040u;
  music_download_high_quality_ = value;
}
inline void CMsgClientSettings::set_music_download_high_quality(bool value) {
  _internal_set_music_download_high_quality(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.music_download_high_quality)
}

// optional bool music_playlist_notification = 11004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
inline bool CMsgClientSettings::_internal_has_music_playlist_notification() const {
  bool value = (_has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_music_playlist_notification() const {
  return _internal_has_music_playlist_notification();
}
inline void CMsgClientSettings::clear_music_playlist_notification() {
  music_playlist_notification_ = false;
  _has_bits_[3] &= ~0x00000080u;
}
inline bool CMsgClientSettings::_internal_music_playlist_notification() const {
  return music_playlist_notification_;
}
inline bool CMsgClientSettings::music_playlist_notification() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.music_playlist_notification)
  return _internal_music_playlist_notification();
}
inline void CMsgClientSettings::_internal_set_music_playlist_notification(bool value) {
  _has_bits_[3] |= 0x00000080u;
  music_playlist_notification_ = value;
}
inline void CMsgClientSettings::set_music_playlist_notification(bool value) {
  _internal_set_music_playlist_notification(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.music_playlist_notification)
}

// optional .EBroadcastPermission broadcast_permissions = 12000 [default = EBroadcastPermissionDisabled, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
inline bool CMsgClientSettings::_internal_has_broadcast_permissions() const {
  bool value = (_has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_permissions() const {
  return _internal_has_broadcast_permissions();
}
inline void CMsgClientSettings::clear_broadcast_permissions() {
  broadcast_permissions_ = 0;
  _has_bits_[3] &= ~0x00000100u;
}
inline ::EBroadcastPermission CMsgClientSettings::_internal_broadcast_permissions() const {
  return static_cast< ::EBroadcastPermission >(broadcast_permissions_);
}
inline ::EBroadcastPermission CMsgClientSettings::broadcast_permissions() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_permissions)
  return _internal_broadcast_permissions();
}
inline void CMsgClientSettings::_internal_set_broadcast_permissions(::EBroadcastPermission value) {
  assert(::EBroadcastPermission_IsValid(value));
  _has_bits_[3] |= 0x00000100u;
  broadcast_permissions_ = value;
}
inline void CMsgClientSettings::set_broadcast_permissions(::EBroadcastPermission value) {
  _internal_set_broadcast_permissions(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_permissions)
}

// optional int32 broadcast_output_width = 12001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
inline bool CMsgClientSettings::_internal_has_broadcast_output_width() const {
  bool value = (_has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_output_width() const {
  return _internal_has_broadcast_output_width();
}
inline void CMsgClientSettings::clear_broadcast_output_width() {
  broadcast_output_width_ = 0;
  _has_bits_[3] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_broadcast_output_width() const {
  return broadcast_output_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::broadcast_output_width() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_output_width)
  return _internal_broadcast_output_width();
}
inline void CMsgClientSettings::_internal_set_broadcast_output_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000200u;
  broadcast_output_width_ = value;
}
inline void CMsgClientSettings::set_broadcast_output_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_broadcast_output_width(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_output_width)
}

// optional int32 broadcast_output_height = 12002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight", (.setting_default_int) = 720];
inline bool CMsgClientSettings::_internal_has_broadcast_output_height() const {
  bool value = (_has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_output_height() const {
  return _internal_has_broadcast_output_height();
}
inline void CMsgClientSettings::clear_broadcast_output_height() {
  broadcast_output_height_ = 0;
  _has_bits_[3] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_broadcast_output_height() const {
  return broadcast_output_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::broadcast_output_height() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_output_height)
  return _internal_broadcast_output_height();
}
inline void CMsgClientSettings::_internal_set_broadcast_output_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000400u;
  broadcast_output_height_ = value;
}
inline void CMsgClientSettings::set_broadcast_output_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_broadcast_output_height(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_output_height)
}

// optional int32 broadcast_bitrate = 12003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps", (.setting_default_int) = 2500];
inline bool CMsgClientSettings::_internal_has_broadcast_bitrate() const {
  bool value = (_has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_bitrate() const {
  return _internal_has_broadcast_bitrate();
}
inline void CMsgClientSettings::clear_broadcast_bitrate() {
  broadcast_bitrate_ = 0;
  _has_bits_[3] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_broadcast_bitrate() const {
  return broadcast_bitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::broadcast_bitrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_bitrate)
  return _internal_broadcast_bitrate();
}
inline void CMsgClientSettings::_internal_set_broadcast_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000800u;
  broadcast_bitrate_ = value;
}
inline void CMsgClientSettings::set_broadcast_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_broadcast_bitrate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_bitrate)
}

// optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = EBroadcastEncoderBestQuality, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
inline bool CMsgClientSettings::_internal_has_broadcast_encoding_option() const {
  bool value = (_has_bits_[3] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_encoding_option() const {
  return _internal_has_broadcast_encoding_option();
}
inline void CMsgClientSettings::clear_broadcast_encoding_option() {
  broadcast_encoding_option_ = 0;
  _has_bits_[3] &= ~0x00001000u;
}
inline ::EBroadcastEncoderSetting CMsgClientSettings::_internal_broadcast_encoding_option() const {
  return static_cast< ::EBroadcastEncoderSetting >(broadcast_encoding_option_);
}
inline ::EBroadcastEncoderSetting CMsgClientSettings::broadcast_encoding_option() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_encoding_option)
  return _internal_broadcast_encoding_option();
}
inline void CMsgClientSettings::_internal_set_broadcast_encoding_option(::EBroadcastEncoderSetting value) {
  assert(::EBroadcastEncoderSetting_IsValid(value));
  _has_bits_[3] |= 0x00001000u;
  broadcast_encoding_option_ = value;
}
inline void CMsgClientSettings::set_broadcast_encoding_option(::EBroadcastEncoderSetting value) {
  _internal_set_broadcast_encoding_option(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_encoding_option)
}

// optional bool broadcast_record_all_video = 12005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
inline bool CMsgClientSettings::_internal_has_broadcast_record_all_video() const {
  bool value = (_has_bits_[3] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_record_all_video() const {
  return _internal_has_broadcast_record_all_video();
}
inline void CMsgClientSettings::clear_broadcast_record_all_video() {
  broadcast_record_all_video_ = false;
  _has_bits_[3] &= ~0x00002000u;
}
inline bool CMsgClientSettings::_internal_broadcast_record_all_video() const {
  return broadcast_record_all_video_;
}
inline bool CMsgClientSettings::broadcast_record_all_video() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_record_all_video)
  return _internal_broadcast_record_all_video();
}
inline void CMsgClientSettings::_internal_set_broadcast_record_all_video(bool value) {
  _has_bits_[3] |= 0x00002000u;
  broadcast_record_all_video_ = value;
}
inline void CMsgClientSettings::set_broadcast_record_all_video(bool value) {
  _internal_set_broadcast_record_all_video(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_record_all_video)
}

// optional bool broadcast_record_all_audio = 12006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
inline bool CMsgClientSettings::_internal_has_broadcast_record_all_audio() const {
  bool value = (_has_bits_[3] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_record_all_audio() const {
  return _internal_has_broadcast_record_all_audio();
}
inline void CMsgClientSettings::clear_broadcast_record_all_audio() {
  broadcast_record_all_audio_ = false;
  _has_bits_[3] &= ~0x00004000u;
}
inline bool CMsgClientSettings::_internal_broadcast_record_all_audio() const {
  return broadcast_record_all_audio_;
}
inline bool CMsgClientSettings::broadcast_record_all_audio() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_record_all_audio)
  return _internal_broadcast_record_all_audio();
}
inline void CMsgClientSettings::_internal_set_broadcast_record_all_audio(bool value) {
  _has_bits_[3] |= 0x00004000u;
  broadcast_record_all_audio_ = value;
}
inline void CMsgClientSettings::set_broadcast_record_all_audio(bool value) {
  _internal_set_broadcast_record_all_audio(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_record_all_audio)
}

// optional bool broadcast_record_microphone = 12007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
inline bool CMsgClientSettings::_internal_has_broadcast_record_microphone() const {
  bool value = (_has_bits_[3] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_record_microphone() const {
  return _internal_has_broadcast_record_microphone();
}
inline void CMsgClientSettings::clear_broadcast_record_microphone() {
  broadcast_record_microphone_ = false;
  _has_bits_[3] &= ~0x00008000u;
}
inline bool CMsgClientSettings::_internal_broadcast_record_microphone() const {
  return broadcast_record_microphone_;
}
inline bool CMsgClientSettings::broadcast_record_microphone() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_record_microphone)
  return _internal_broadcast_record_microphone();
}
inline void CMsgClientSettings::_internal_set_broadcast_record_microphone(bool value) {
  _has_bits_[3] |= 0x00008000u;
  broadcast_record_microphone_ = value;
}
inline void CMsgClientSettings::set_broadcast_record_microphone(bool value) {
  _internal_set_broadcast_record_microphone(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_record_microphone)
}

// optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
inline bool CMsgClientSettings::_internal_has_broadcast_show_upload_stats() const {
  bool value = (_has_bits_[3] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_show_upload_stats() const {
  return _internal_has_broadcast_show_upload_stats();
}
inline void CMsgClientSettings::clear_broadcast_show_upload_stats() {
  broadcast_show_upload_stats_ = false;
  _has_bits_[3] &= ~0x00010000u;
}
inline bool CMsgClientSettings::_internal_broadcast_show_upload_stats() const {
  return broadcast_show_upload_stats_;
}
inline bool CMsgClientSettings::broadcast_show_upload_stats() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_show_upload_stats)
  return _internal_broadcast_show_upload_stats();
}
inline void CMsgClientSettings::_internal_set_broadcast_show_upload_stats(bool value) {
  _has_bits_[3] |= 0x00010000u;
  broadcast_show_upload_stats_ = value;
}
inline void CMsgClientSettings::set_broadcast_show_upload_stats(bool value) {
  _internal_set_broadcast_show_upload_stats(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_show_upload_stats)
}

// optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_broadcast_show_live_reminder() const {
  bool value = (_has_bits_[3] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_show_live_reminder() const {
  return _internal_has_broadcast_show_live_reminder();
}
inline void CMsgClientSettings::clear_broadcast_show_live_reminder() {
  broadcast_show_live_reminder_ = false;
  _has_bits_[3] &= ~0x00040000u;
}
inline bool CMsgClientSettings::_internal_broadcast_show_live_reminder() const {
  return broadcast_show_live_reminder_;
}
inline bool CMsgClientSettings::broadcast_show_live_reminder() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_show_live_reminder)
  return _internal_broadcast_show_live_reminder();
}
inline void CMsgClientSettings::_internal_set_broadcast_show_live_reminder(bool value) {
  _has_bits_[3] |= 0x00040000u;
  broadcast_show_live_reminder_ = value;
}
inline void CMsgClientSettings::set_broadcast_show_live_reminder(bool value) {
  _internal_set_broadcast_show_live_reminder(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_show_live_reminder)
}

// optional int32 broadcast_chat_corner = 12010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
inline bool CMsgClientSettings::_internal_has_broadcast_chat_corner() const {
  bool value = (_has_bits_[3] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_broadcast_chat_corner() const {
  return _internal_has_broadcast_chat_corner();
}
inline void CMsgClientSettings::clear_broadcast_chat_corner() {
  broadcast_chat_corner_ = 0;
  _has_bits_[3] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_broadcast_chat_corner() const {
  return broadcast_chat_corner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::broadcast_chat_corner() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.broadcast_chat_corner)
  return _internal_broadcast_chat_corner();
}
inline void CMsgClientSettings::_internal_set_broadcast_chat_corner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00020000u;
  broadcast_chat_corner_ = value;
}
inline void CMsgClientSettings::set_broadcast_chat_corner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_broadcast_chat_corner(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.broadcast_chat_corner)
}

// optional bool gamestream_hardware_video_encode = 13000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\HardwareVideoEncode", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_gamestream_hardware_video_encode() const {
  bool value = (_has_bits_[3] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamestream_hardware_video_encode() const {
  return _internal_has_gamestream_hardware_video_encode();
}
inline void CMsgClientSettings::clear_gamestream_hardware_video_encode() {
  gamestream_hardware_video_encode_ = false;
  _has_bits_[3] &= ~0x00080000u;
}
inline bool CMsgClientSettings::_internal_gamestream_hardware_video_encode() const {
  return gamestream_hardware_video_encode_;
}
inline bool CMsgClientSettings::gamestream_hardware_video_encode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamestream_hardware_video_encode)
  return _internal_gamestream_hardware_video_encode();
}
inline void CMsgClientSettings::_internal_set_gamestream_hardware_video_encode(bool value) {
  _has_bits_[3] |= 0x00080000u;
  gamestream_hardware_video_encode_ = value;
}
inline void CMsgClientSettings::set_gamestream_hardware_video_encode(bool value) {
  _internal_set_gamestream_hardware_video_encode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamestream_hardware_video_encode)
}

// optional bool gamestream_enable_video_h265 = 13001 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameStream\\EnableVideoH265", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_gamestream_enable_video_h265() const {
  bool value = (_has_bits_[3] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamestream_enable_video_h265() const {
  return _internal_has_gamestream_enable_video_h265();
}
inline void CMsgClientSettings::clear_gamestream_enable_video_h265() {
  gamestream_enable_video_h265_ = false;
  _has_bits_[3] &= ~0x00100000u;
}
inline bool CMsgClientSettings::_internal_gamestream_enable_video_h265() const {
  return gamestream_enable_video_h265_;
}
inline bool CMsgClientSettings::gamestream_enable_video_h265() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamestream_enable_video_h265)
  return _internal_gamestream_enable_video_h265();
}
inline void CMsgClientSettings::_internal_set_gamestream_enable_video_h265(bool value) {
  _has_bits_[3] |= 0x00100000u;
  gamestream_enable_video_h265_ = value;
}
inline void CMsgClientSettings::set_gamestream_enable_video_h265(bool value) {
  _internal_set_gamestream_enable_video_h265(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamestream_enable_video_h265)
}

// optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
inline bool CMsgClientSettings::_internal_has_steam_input_configurator_error_msg_enable() const {
  bool value = (_has_bits_[3] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steam_input_configurator_error_msg_enable() const {
  return _internal_has_steam_input_configurator_error_msg_enable();
}
inline void CMsgClientSettings::clear_steam_input_configurator_error_msg_enable() {
  steam_input_configurator_error_msg_enable_ = false;
  _has_bits_[3] &= ~0x00200000u;
}
inline bool CMsgClientSettings::_internal_steam_input_configurator_error_msg_enable() const {
  return steam_input_configurator_error_msg_enable_;
}
inline bool CMsgClientSettings::steam_input_configurator_error_msg_enable() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steam_input_configurator_error_msg_enable)
  return _internal_steam_input_configurator_error_msg_enable();
}
inline void CMsgClientSettings::_internal_set_steam_input_configurator_error_msg_enable(bool value) {
  _has_bits_[3] |= 0x00200000u;
  steam_input_configurator_error_msg_enable_ = value;
}
inline void CMsgClientSettings::set_steam_input_configurator_error_msg_enable(bool value) {
  _internal_set_steam_input_configurator_error_msg_enable(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steam_input_configurator_error_msg_enable)
}

// optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_controller_guide_button_focus_steam() const {
  bool value = (_has_bits_[3] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_guide_button_focus_steam() const {
  return _internal_has_controller_guide_button_focus_steam();
}
inline void CMsgClientSettings::clear_controller_guide_button_focus_steam() {
  controller_guide_button_focus_steam_ = false;
  _has_bits_[3] &= ~0x00800000u;
}
inline bool CMsgClientSettings::_internal_controller_guide_button_focus_steam() const {
  return controller_guide_button_focus_steam_;
}
inline bool CMsgClientSettings::controller_guide_button_focus_steam() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_guide_button_focus_steam)
  return _internal_controller_guide_button_focus_steam();
}
inline void CMsgClientSettings::_internal_set_controller_guide_button_focus_steam(bool value) {
  _has_bits_[3] |= 0x00800000u;
  controller_guide_button_focus_steam_ = value;
}
inline void CMsgClientSettings::set_controller_guide_button_focus_steam(bool value) {
  _internal_set_controller_guide_button_focus_steam(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_guide_button_focus_steam)
}

// optional int32 controller_ps_support = 14003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];
inline bool CMsgClientSettings::_internal_has_controller_ps_support() const {
  bool value = (_has_bits_[3] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_ps_support() const {
  return _internal_has_controller_ps_support();
}
inline void CMsgClientSettings::clear_controller_ps_support() {
  controller_ps_support_ = 0;
  _has_bits_[3] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_controller_ps_support() const {
  return controller_ps_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::controller_ps_support() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_ps_support)
  return _internal_controller_ps_support();
}
inline void CMsgClientSettings::_internal_set_controller_ps_support(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00400000u;
  controller_ps_support_ = value;
}
inline void CMsgClientSettings::set_controller_ps_support(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_controller_ps_support(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_ps_support)
}

// optional bool controller_xbox_support = 14004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
inline bool CMsgClientSettings::_internal_has_controller_xbox_support() const {
  bool value = (_has_bits_[3] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_xbox_support() const {
  return _internal_has_controller_xbox_support();
}
inline void CMsgClientSettings::clear_controller_xbox_support() {
  controller_xbox_support_ = false;
  _has_bits_[3] &= ~0x01000000u;
}
inline bool CMsgClientSettings::_internal_controller_xbox_support() const {
  return controller_xbox_support_;
}
inline bool CMsgClientSettings::controller_xbox_support() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_xbox_support)
  return _internal_controller_xbox_support();
}
inline void CMsgClientSettings::_internal_set_controller_xbox_support(bool value) {
  _has_bits_[3] |= 0x01000000u;
  controller_xbox_support_ = value;
}
inline void CMsgClientSettings::set_controller_xbox_support(bool value) {
  _internal_set_controller_xbox_support(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_xbox_support)
}

// optional bool controller_xbox_driver = 14005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
inline bool CMsgClientSettings::_internal_has_controller_xbox_driver() const {
  bool value = (_has_bits_[3] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_xbox_driver() const {
  return _internal_has_controller_xbox_driver();
}
inline void CMsgClientSettings::clear_controller_xbox_driver() {
  controller_xbox_driver_ = false;
  _has_bits_[3] &= ~0x02000000u;
}
inline bool CMsgClientSettings::_internal_controller_xbox_driver() const {
  return controller_xbox_driver_;
}
inline bool CMsgClientSettings::controller_xbox_driver() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_xbox_driver)
  return _internal_controller_xbox_driver();
}
inline void CMsgClientSettings::_internal_set_controller_xbox_driver(bool value) {
  _has_bits_[3] |= 0x02000000u;
  controller_xbox_driver_ = value;
}
inline void CMsgClientSettings::set_controller_xbox_driver(bool value) {
  _internal_set_controller_xbox_driver(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_xbox_driver)
}

// optional bool controller_switch_support = 14006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
inline bool CMsgClientSettings::_internal_has_controller_switch_support() const {
  bool value = (_has_bits_[3] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_switch_support() const {
  return _internal_has_controller_switch_support();
}
inline void CMsgClientSettings::clear_controller_switch_support() {
  controller_switch_support_ = false;
  _has_bits_[3] &= ~0x04000000u;
}
inline bool CMsgClientSettings::_internal_controller_switch_support() const {
  return controller_switch_support_;
}
inline bool CMsgClientSettings::controller_switch_support() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_switch_support)
  return _internal_controller_switch_support();
}
inline void CMsgClientSettings::_internal_set_controller_switch_support(bool value) {
  _has_bits_[3] |= 0x04000000u;
  controller_switch_support_ = value;
}
inline void CMsgClientSettings::set_controller_switch_support(bool value) {
  _internal_set_controller_switch_support(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_switch_support)
}

// optional bool controller_generic_support = 14007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
inline bool CMsgClientSettings::_internal_has_controller_generic_support() const {
  bool value = (_has_bits_[5] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_generic_support() const {
  return _internal_has_controller_generic_support();
}
inline void CMsgClientSettings::clear_controller_generic_support() {
  controller_generic_support_ = false;
  _has_bits_[5] &= ~0x01000000u;
}
inline bool CMsgClientSettings::_internal_controller_generic_support() const {
  return controller_generic_support_;
}
inline bool CMsgClientSettings::controller_generic_support() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_generic_support)
  return _internal_controller_generic_support();
}
inline void CMsgClientSettings::_internal_set_controller_generic_support(bool value) {
  _has_bits_[5] |= 0x01000000u;
  controller_generic_support_ = value;
}
inline void CMsgClientSettings::set_controller_generic_support(bool value) {
  _internal_set_controller_generic_support(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_generic_support)
}

// optional int32 controller_power_off_timeout = 14008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
inline bool CMsgClientSettings::_internal_has_controller_power_off_timeout() const {
  bool value = (_has_bits_[3] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_power_off_timeout() const {
  return _internal_has_controller_power_off_timeout();
}
inline void CMsgClientSettings::clear_controller_power_off_timeout() {
  controller_power_off_timeout_ = 0;
  _has_bits_[3] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_controller_power_off_timeout() const {
  return controller_power_off_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::controller_power_off_timeout() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_power_off_timeout)
  return _internal_controller_power_off_timeout();
}
inline void CMsgClientSettings::_internal_set_controller_power_off_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x10000000u;
  controller_power_off_timeout_ = value;
}
inline void CMsgClientSettings::set_controller_power_off_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_controller_power_off_timeout(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_power_off_timeout)
}

// optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
inline bool CMsgClientSettings::_internal_has_turn_off_controller_on_exit() const {
  bool value = (_has_bits_[5] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_turn_off_controller_on_exit() const {
  return _internal_has_turn_off_controller_on_exit();
}
inline void CMsgClientSettings::clear_turn_off_controller_on_exit() {
  turn_off_controller_on_exit_ = false;
  _has_bits_[5] &= ~0x02000000u;
}
inline bool CMsgClientSettings::_internal_turn_off_controller_on_exit() const {
  return turn_off_controller_on_exit_;
}
inline bool CMsgClientSettings::turn_off_controller_on_exit() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.turn_off_controller_on_exit)
  return _internal_turn_off_controller_on_exit();
}
inline void CMsgClientSettings::_internal_set_turn_off_controller_on_exit(bool value) {
  _has_bits_[5] |= 0x02000000u;
  turn_off_controller_on_exit_ = value;
}
inline void CMsgClientSettings::set_turn_off_controller_on_exit(bool value) {
  _internal_set_turn_off_controller_on_exit(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.turn_off_controller_on_exit)
}

// optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_controller_combine_nintendo_joycons() const {
  bool value = (_has_bits_[5] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_combine_nintendo_joycons() const {
  return _internal_has_controller_combine_nintendo_joycons();
}
inline void CMsgClientSettings::clear_controller_combine_nintendo_joycons() {
  controller_combine_nintendo_joycons_ = false;
  _has_bits_[5] &= ~0x04000000u;
}
inline bool CMsgClientSettings::_internal_controller_combine_nintendo_joycons() const {
  return controller_combine_nintendo_joycons_;
}
inline bool CMsgClientSettings::controller_combine_nintendo_joycons() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_combine_nintendo_joycons)
  return _internal_controller_combine_nintendo_joycons();
}
inline void CMsgClientSettings::_internal_set_controller_combine_nintendo_joycons(bool value) {
  _has_bits_[5] |= 0x04000000u;
  controller_combine_nintendo_joycons_ = value;
}
inline void CMsgClientSettings::set_controller_combine_nintendo_joycons(bool value) {
  _internal_set_controller_combine_nintendo_joycons(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_combine_nintendo_joycons)
}

// optional bool controller_enable_chord = 140011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Enable_Chord", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_controller_enable_chord() const {
  bool value = (_has_bits_[5] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_enable_chord() const {
  return _internal_has_controller_enable_chord();
}
inline void CMsgClientSettings::clear_controller_enable_chord() {
  controller_enable_chord_ = false;
  _has_bits_[5] &= ~0x08000000u;
}
inline bool CMsgClientSettings::_internal_controller_enable_chord() const {
  return controller_enable_chord_;
}
inline bool CMsgClientSettings::controller_enable_chord() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_enable_chord)
  return _internal_controller_enable_chord();
}
inline void CMsgClientSettings::_internal_set_controller_enable_chord(bool value) {
  _has_bits_[5] |= 0x08000000u;
  controller_enable_chord_ = value;
}
inline void CMsgClientSettings::set_controller_enable_chord(bool value) {
  _internal_set_controller_enable_chord(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_enable_chord)
}

// optional bool controller_poll_rate = 140012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_Poll_Rate", (.setting_default_int) = 2];
inline bool CMsgClientSettings::_internal_has_controller_poll_rate() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_controller_poll_rate() const {
  return _internal_has_controller_poll_rate();
}
inline void CMsgClientSettings::clear_controller_poll_rate() {
  controller_poll_rate_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool CMsgClientSettings::_internal_controller_poll_rate() const {
  return controller_poll_rate_;
}
inline bool CMsgClientSettings::controller_poll_rate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.controller_poll_rate)
  return _internal_controller_poll_rate();
}
inline void CMsgClientSettings::_internal_set_controller_poll_rate(bool value) {
  _has_bits_[1] |= 0x00000008u;
  controller_poll_rate_ = value;
}
inline void CMsgClientSettings::set_controller_poll_rate(bool value) {
  _internal_set_controller_poll_rate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.controller_poll_rate)
}

// optional uint64 startup_movie_id = 16000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
inline bool CMsgClientSettings::_internal_has_startup_movie_id() const {
  bool value = (_has_bits_[3] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_startup_movie_id() const {
  return _internal_has_startup_movie_id();
}
inline void CMsgClientSettings::clear_startup_movie_id() {
  startup_movie_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[3] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSettings::_internal_startup_movie_id() const {
  return startup_movie_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSettings::startup_movie_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.startup_movie_id)
  return _internal_startup_movie_id();
}
inline void CMsgClientSettings::_internal_set_startup_movie_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[3] |= 0x08000000u;
  startup_movie_id_ = value;
}
inline void CMsgClientSettings::set_startup_movie_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_startup_movie_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.startup_movie_id)
}

// optional string startup_movie_local_path = 16001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
inline bool CMsgClientSettings::_internal_has_startup_movie_local_path() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_startup_movie_local_path() const {
  return _internal_has_startup_movie_local_path();
}
inline void CMsgClientSettings::clear_startup_movie_local_path() {
  startup_movie_local_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgClientSettings::startup_movie_local_path() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.startup_movie_local_path)
  return _internal_startup_movie_local_path();
}
inline void CMsgClientSettings::set_startup_movie_local_path(const std::string& value) {
  _internal_set_startup_movie_local_path(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.startup_movie_local_path)
}
inline std::string* CMsgClientSettings::mutable_startup_movie_local_path() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.startup_movie_local_path)
  return _internal_mutable_startup_movie_local_path();
}
inline const std::string& CMsgClientSettings::_internal_startup_movie_local_path() const {
  return startup_movie_local_path_.Get();
}
inline void CMsgClientSettings::_internal_set_startup_movie_local_path(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  startup_movie_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_startup_movie_local_path(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  startup_movie_local_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.startup_movie_local_path)
}
inline void CMsgClientSettings::set_startup_movie_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  startup_movie_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.startup_movie_local_path)
}
inline void CMsgClientSettings::set_startup_movie_local_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  startup_movie_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.startup_movie_local_path)
}
inline std::string* CMsgClientSettings::_internal_mutable_startup_movie_local_path() {
  _has_bits_[0] |= 0x00000080u;
  return startup_movie_local_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_startup_movie_local_path() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.startup_movie_local_path)
  if (!_internal_has_startup_movie_local_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return startup_movie_local_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_startup_movie_local_path(std::string* startup_movie_local_path) {
  if (startup_movie_local_path != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  startup_movie_local_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startup_movie_local_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.startup_movie_local_path)
}

// optional bool startup_movie_shuffle = 16002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
inline bool CMsgClientSettings::_internal_has_startup_movie_shuffle() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_startup_movie_shuffle() const {
  return _internal_has_startup_movie_shuffle();
}
inline void CMsgClientSettings::clear_startup_movie_shuffle() {
  startup_movie_shuffle_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool CMsgClientSettings::_internal_startup_movie_shuffle() const {
  return startup_movie_shuffle_;
}
inline bool CMsgClientSettings::startup_movie_shuffle() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.startup_movie_shuffle)
  return _internal_startup_movie_shuffle();
}
inline void CMsgClientSettings::_internal_set_startup_movie_shuffle(bool value) {
  _has_bits_[1] |= 0x00000010u;
  startup_movie_shuffle_ = value;
}
inline void CMsgClientSettings::set_startup_movie_shuffle(bool value) {
  _internal_set_startup_movie_shuffle(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.startup_movie_shuffle)
}

// optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
inline bool CMsgClientSettings::_internal_has_startup_movie_used_for_resume() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_startup_movie_used_for_resume() const {
  return _internal_has_startup_movie_used_for_resume();
}
inline void CMsgClientSettings::clear_startup_movie_used_for_resume() {
  startup_movie_used_for_resume_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool CMsgClientSettings::_internal_startup_movie_used_for_resume() const {
  return startup_movie_used_for_resume_;
}
inline bool CMsgClientSettings::startup_movie_used_for_resume() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.startup_movie_used_for_resume)
  return _internal_startup_movie_used_for_resume();
}
inline void CMsgClientSettings::_internal_set_startup_movie_used_for_resume(bool value) {
  _has_bits_[1] |= 0x00000020u;
  startup_movie_used_for_resume_ = value;
}
inline void CMsgClientSettings::set_startup_movie_used_for_resume(bool value) {
  _internal_set_startup_movie_used_for_resume(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.startup_movie_used_for_resume)
}

// optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_game_notes_enable_spellcheck() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_game_notes_enable_spellcheck() const {
  return _internal_has_game_notes_enable_spellcheck();
}
inline void CMsgClientSettings::clear_game_notes_enable_spellcheck() {
  game_notes_enable_spellcheck_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool CMsgClientSettings::_internal_game_notes_enable_spellcheck() const {
  return game_notes_enable_spellcheck_;
}
inline bool CMsgClientSettings::game_notes_enable_spellcheck() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.game_notes_enable_spellcheck)
  return _internal_game_notes_enable_spellcheck();
}
inline void CMsgClientSettings::_internal_set_game_notes_enable_spellcheck(bool value) {
  _has_bits_[1] |= 0x00000040u;
  game_notes_enable_spellcheck_ = value;
}
inline void CMsgClientSettings::set_game_notes_enable_spellcheck(bool value) {
  _internal_set_game_notes_enable_spellcheck(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.game_notes_enable_spellcheck)
}

// optional int32 screenshot_items_per_row = 18000 [(.setting_store) = EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
inline bool CMsgClientSettings::_internal_has_screenshot_items_per_row() const {
  bool value = (_has_bits_[3] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_screenshot_items_per_row() const {
  return _internal_has_screenshot_items_per_row();
}
inline void CMsgClientSettings::clear_screenshot_items_per_row() {
  screenshot_items_per_row_ = 0;
  _has_bits_[3] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_screenshot_items_per_row() const {
  return screenshot_items_per_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::screenshot_items_per_row() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.screenshot_items_per_row)
  return _internal_screenshot_items_per_row();
}
inline void CMsgClientSettings::_internal_set_screenshot_items_per_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x20000000u;
  screenshot_items_per_row_ = value;
}
inline void CMsgClientSettings::set_screenshot_items_per_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_screenshot_items_per_row(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.screenshot_items_per_row)
}

// optional string g_background_path = 18201 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_path() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_path() const {
  return _internal_has_g_background_path();
}
inline void CMsgClientSettings::clear_g_background_path() {
  g_background_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CMsgClientSettings::g_background_path() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_path)
  return _internal_g_background_path();
}
inline void CMsgClientSettings::set_g_background_path(const std::string& value) {
  _internal_set_g_background_path(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_path)
}
inline std::string* CMsgClientSettings::mutable_g_background_path() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.g_background_path)
  return _internal_mutable_g_background_path();
}
inline const std::string& CMsgClientSettings::_internal_g_background_path() const {
  return g_background_path_.Get();
}
inline void CMsgClientSettings::_internal_set_g_background_path(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  g_background_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_g_background_path(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  g_background_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.g_background_path)
}
inline void CMsgClientSettings::set_g_background_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  g_background_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.g_background_path)
}
inline void CMsgClientSettings::set_g_background_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  g_background_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.g_background_path)
}
inline std::string* CMsgClientSettings::_internal_mutable_g_background_path() {
  _has_bits_[0] |= 0x00000100u;
  return g_background_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_g_background_path() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.g_background_path)
  if (!_internal_has_g_background_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return g_background_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_g_background_path(std::string* g_background_path) {
  if (g_background_path != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  g_background_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g_background_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.g_background_path)
}

// optional string g_background_max_keep = 18202 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_default_string) = "120min"];
inline bool CMsgClientSettings::_internal_has_g_background_max_keep() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_max_keep() const {
  return _internal_has_g_background_max_keep();
}
inline void CMsgClientSettings::clear_g_background_max_keep() {
  g_background_max_keep_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CMsgClientSettings::g_background_max_keep() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_max_keep)
  return _internal_g_background_max_keep();
}
inline void CMsgClientSettings::set_g_background_max_keep(const std::string& value) {
  _internal_set_g_background_max_keep(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_max_keep)
}
inline std::string* CMsgClientSettings::mutable_g_background_max_keep() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.g_background_max_keep)
  return _internal_mutable_g_background_max_keep();
}
inline const std::string& CMsgClientSettings::_internal_g_background_max_keep() const {
  return g_background_max_keep_.Get();
}
inline void CMsgClientSettings::_internal_set_g_background_max_keep(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  g_background_max_keep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_g_background_max_keep(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  g_background_max_keep_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.g_background_max_keep)
}
inline void CMsgClientSettings::set_g_background_max_keep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  g_background_max_keep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.g_background_max_keep)
}
inline void CMsgClientSettings::set_g_background_max_keep(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  g_background_max_keep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.g_background_max_keep)
}
inline std::string* CMsgClientSettings::_internal_mutable_g_background_max_keep() {
  _has_bits_[0] |= 0x00000200u;
  return g_background_max_keep_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_g_background_max_keep() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.g_background_max_keep)
  if (!_internal_has_g_background_max_keep()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return g_background_max_keep_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_g_background_max_keep(std::string* g_background_max_keep) {
  if (g_background_max_keep != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  g_background_max_keep_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g_background_max_keep,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.g_background_max_keep)
}

// optional int32 g_background_time_resolution = 18203 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_time_resolution() const {
  bool value = (_has_bits_[3] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_time_resolution() const {
  return _internal_has_g_background_time_resolution();
}
inline void CMsgClientSettings::clear_g_background_time_resolution() {
  g_background_time_resolution_ = 0;
  _has_bits_[3] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_g_background_time_resolution() const {
  return g_background_time_resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::g_background_time_resolution() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_time_resolution)
  return _internal_g_background_time_resolution();
}
inline void CMsgClientSettings::_internal_set_g_background_time_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x40000000u;
  g_background_time_resolution_ = value;
}
inline void CMsgClientSettings::set_g_background_time_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g_background_time_resolution(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_time_resolution)
}

// optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_mk() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || g_background_mk_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_g_background_mk() const {
  return _internal_has_g_background_mk();
}
inline void CMsgClientSettings::clear_g_background_mk() {
  if (g_background_mk_ != nullptr) g_background_mk_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_g_background_mk() const {
  const ::CMsgHotkey* p = g_background_mk_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::g_background_mk() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_mk)
  return _internal_g_background_mk();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_g_background_mk(
    ::CMsgHotkey* g_background_mk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_background_mk_);
  }
  g_background_mk_ = g_background_mk;
  if (g_background_mk) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.g_background_mk)
}
inline ::CMsgHotkey* CMsgClientSettings::release_g_background_mk() {
  _has_bits_[0] &= ~0x00020000u;
  ::CMsgHotkey* temp = g_background_mk_;
  g_background_mk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_g_background_mk() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.g_background_mk)
  _has_bits_[0] &= ~0x00020000u;
  ::CMsgHotkey* temp = g_background_mk_;
  g_background_mk_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_g_background_mk() {
  _has_bits_[0] |= 0x00020000u;
  if (g_background_mk_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    g_background_mk_ = p;
  }
  return g_background_mk_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_g_background_mk() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.g_background_mk)
  return _internal_mutable_g_background_mk();
}
inline void CMsgClientSettings::set_allocated_g_background_mk(::CMsgHotkey* g_background_mk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete g_background_mk_;
  }
  if (g_background_mk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(g_background_mk);
    if (message_arena != submessage_arena) {
      g_background_mk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_background_mk, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  g_background_mk_ = g_background_mk;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.g_background_mk)
}

// optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_tg() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || g_background_tg_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_g_background_tg() const {
  return _internal_has_g_background_tg();
}
inline void CMsgClientSettings::clear_g_background_tg() {
  if (g_background_tg_ != nullptr) g_background_tg_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_g_background_tg() const {
  const ::CMsgHotkey* p = g_background_tg_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::g_background_tg() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_tg)
  return _internal_g_background_tg();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_g_background_tg(
    ::CMsgHotkey* g_background_tg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g_background_tg_);
  }
  g_background_tg_ = g_background_tg;
  if (g_background_tg) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.g_background_tg)
}
inline ::CMsgHotkey* CMsgClientSettings::release_g_background_tg() {
  _has_bits_[0] &= ~0x00040000u;
  ::CMsgHotkey* temp = g_background_tg_;
  g_background_tg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_g_background_tg() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.g_background_tg)
  _has_bits_[0] &= ~0x00040000u;
  ::CMsgHotkey* temp = g_background_tg_;
  g_background_tg_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_g_background_tg() {
  _has_bits_[0] |= 0x00040000u;
  if (g_background_tg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    g_background_tg_ = p;
  }
  return g_background_tg_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_g_background_tg() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.g_background_tg)
  return _internal_mutable_g_background_tg();
}
inline void CMsgClientSettings::set_allocated_g_background_tg(::CMsgHotkey* g_background_tg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete g_background_tg_;
  }
  if (g_background_tg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(g_background_tg);
    if (message_arena != submessage_arena) {
      g_background_tg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g_background_tg, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  g_background_tg_ = g_background_tg;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.g_background_tg)
}

// optional bool g_background_a_m = 18209 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_a_m() const {
  bool value = (_has_bits_[4] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_a_m() const {
  return _internal_has_g_background_a_m();
}
inline void CMsgClientSettings::clear_g_background_a_m() {
  g_background_a_m_ = false;
  _has_bits_[4] &= ~0x00000020u;
}
inline bool CMsgClientSettings::_internal_g_background_a_m() const {
  return g_background_a_m_;
}
inline bool CMsgClientSettings::g_background_a_m() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_a_m)
  return _internal_g_background_a_m();
}
inline void CMsgClientSettings::_internal_set_g_background_a_m(bool value) {
  _has_bits_[4] |= 0x00000020u;
  g_background_a_m_ = value;
}
inline void CMsgClientSettings::set_g_background_a_m(bool value) {
  _internal_set_g_background_a_m(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_a_m)
}

// optional string gamerecording_video_bitrate = 18210 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoBitRate", (.setting_default_string) = "preset_default"];
inline bool CMsgClientSettings::_internal_has_gamerecording_video_bitrate() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_video_bitrate() const {
  return _internal_has_gamerecording_video_bitrate();
}
inline void CMsgClientSettings::clear_gamerecording_video_bitrate() {
  gamerecording_video_bitrate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& CMsgClientSettings::gamerecording_video_bitrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_video_bitrate)
  return _internal_gamerecording_video_bitrate();
}
inline void CMsgClientSettings::set_gamerecording_video_bitrate(const std::string& value) {
  _internal_set_gamerecording_video_bitrate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_video_bitrate)
}
inline std::string* CMsgClientSettings::mutable_gamerecording_video_bitrate() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.gamerecording_video_bitrate)
  return _internal_mutable_gamerecording_video_bitrate();
}
inline const std::string& CMsgClientSettings::_internal_gamerecording_video_bitrate() const {
  return gamerecording_video_bitrate_.Get();
}
inline void CMsgClientSettings::_internal_set_gamerecording_video_bitrate(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  gamerecording_video_bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_gamerecording_video_bitrate(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  gamerecording_video_bitrate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.gamerecording_video_bitrate)
}
inline void CMsgClientSettings::set_gamerecording_video_bitrate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  gamerecording_video_bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.gamerecording_video_bitrate)
}
inline void CMsgClientSettings::set_gamerecording_video_bitrate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  gamerecording_video_bitrate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.gamerecording_video_bitrate)
}
inline std::string* CMsgClientSettings::_internal_mutable_gamerecording_video_bitrate() {
  _has_bits_[0] |= 0x00000400u;
  return gamerecording_video_bitrate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_gamerecording_video_bitrate() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.gamerecording_video_bitrate)
  if (!_internal_has_gamerecording_video_bitrate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return gamerecording_video_bitrate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_gamerecording_video_bitrate(std::string* gamerecording_video_bitrate) {
  if (gamerecording_video_bitrate != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  gamerecording_video_bitrate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamerecording_video_bitrate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.gamerecording_video_bitrate)
}

// optional bool g_background_a_s = 18211 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_a_s() const {
  bool value = (_has_bits_[4] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_a_s() const {
  return _internal_has_g_background_a_s();
}
inline void CMsgClientSettings::clear_g_background_a_s() {
  g_background_a_s_ = false;
  _has_bits_[4] &= ~0x00000040u;
}
inline bool CMsgClientSettings::_internal_g_background_a_s() const {
  return g_background_a_s_;
}
inline bool CMsgClientSettings::g_background_a_s() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_a_s)
  return _internal_g_background_a_s();
}
inline void CMsgClientSettings::_internal_set_g_background_a_s(bool value) {
  _has_bits_[4] |= 0x00000040u;
  g_background_a_s_ = value;
}
inline void CMsgClientSettings::set_g_background_a_s(bool value) {
  _internal_set_g_background_a_s(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_a_s)
}

// optional .EGRMode g_background_mode = 18212 [default = EGRMode_Never, (.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_mode() const {
  bool value = (_has_bits_[3] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_mode() const {
  return _internal_has_g_background_mode();
}
inline void CMsgClientSettings::clear_g_background_mode() {
  g_background_mode_ = 0;
  _has_bits_[3] &= ~0x80000000u;
}
inline ::EGRMode CMsgClientSettings::_internal_g_background_mode() const {
  return static_cast< ::EGRMode >(g_background_mode_);
}
inline ::EGRMode CMsgClientSettings::g_background_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_mode)
  return _internal_g_background_mode();
}
inline void CMsgClientSettings::_internal_set_g_background_mode(::EGRMode value) {
  assert(::EGRMode_IsValid(value));
  _has_bits_[3] |= 0x80000000u;
  g_background_mode_ = value;
}
inline void CMsgClientSettings::set_g_background_mode(::EGRMode value) {
  _internal_set_g_background_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_mode)
}

// optional .EGRAudio g_background_audio = 18213 [default = EGRAudio_Game, (.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_g_background_audio() const {
  bool value = (_has_bits_[4] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_background_audio() const {
  return _internal_has_g_background_audio();
}
inline void CMsgClientSettings::clear_g_background_audio() {
  g_background_audio_ = 0;
  _has_bits_[4] &= ~0x00000001u;
}
inline ::EGRAudio CMsgClientSettings::_internal_g_background_audio() const {
  return static_cast< ::EGRAudio >(g_background_audio_);
}
inline ::EGRAudio CMsgClientSettings::g_background_audio() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_background_audio)
  return _internal_g_background_audio();
}
inline void CMsgClientSettings::_internal_set_g_background_audio(::EGRAudio value) {
  assert(::EGRAudio_IsValid(value));
  _has_bits_[4] |= 0x00000001u;
  g_background_audio_ = value;
}
inline void CMsgClientSettings::set_g_background_audio(::EGRAudio value) {
  _internal_set_g_background_audio(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_background_audio)
}

// optional int32 g_max_fps = 18214 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\MaxFPS", (.setting_default_int) = 60, (.setting_clamp_min) = 24, (.setting_clamp_max) = 120];
inline bool CMsgClientSettings::_internal_has_g_max_fps() const {
  bool value = (_has_bits_[4] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_g_max_fps() const {
  return _internal_has_g_max_fps();
}
inline void CMsgClientSettings::clear_g_max_fps() {
  g_max_fps_ = 0;
  _has_bits_[4] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_g_max_fps() const {
  return g_max_fps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::g_max_fps() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.g_max_fps)
  return _internal_g_max_fps();
}
inline void CMsgClientSettings::_internal_set_g_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00000002u;
  g_max_fps_ = value;
}
inline void CMsgClientSettings::set_g_max_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g_max_fps(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.g_max_fps)
}

// optional .CMsgHotkey gamerecording_hotkey_ic = 18215 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipKey", (.setting_default_string) = "None"];
inline bool CMsgClientSettings::_internal_has_gamerecording_hotkey_ic() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || gamerecording_hotkey_ic_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_hotkey_ic() const {
  return _internal_has_gamerecording_hotkey_ic();
}
inline void CMsgClientSettings::clear_gamerecording_hotkey_ic() {
  if (gamerecording_hotkey_ic_ != nullptr) gamerecording_hotkey_ic_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_gamerecording_hotkey_ic() const {
  const ::CMsgHotkey* p = gamerecording_hotkey_ic_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::gamerecording_hotkey_ic() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_hotkey_ic)
  return _internal_gamerecording_hotkey_ic();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_gamerecording_hotkey_ic(
    ::CMsgHotkey* gamerecording_hotkey_ic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamerecording_hotkey_ic_);
  }
  gamerecording_hotkey_ic_ = gamerecording_hotkey_ic;
  if (gamerecording_hotkey_ic) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.gamerecording_hotkey_ic)
}
inline ::CMsgHotkey* CMsgClientSettings::release_gamerecording_hotkey_ic() {
  _has_bits_[0] &= ~0x00080000u;
  ::CMsgHotkey* temp = gamerecording_hotkey_ic_;
  gamerecording_hotkey_ic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_gamerecording_hotkey_ic() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.gamerecording_hotkey_ic)
  _has_bits_[0] &= ~0x00080000u;
  ::CMsgHotkey* temp = gamerecording_hotkey_ic_;
  gamerecording_hotkey_ic_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_gamerecording_hotkey_ic() {
  _has_bits_[0] |= 0x00080000u;
  if (gamerecording_hotkey_ic_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    gamerecording_hotkey_ic_ = p;
  }
  return gamerecording_hotkey_ic_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_gamerecording_hotkey_ic() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.gamerecording_hotkey_ic)
  return _internal_mutable_gamerecording_hotkey_ic();
}
inline void CMsgClientSettings::set_allocated_gamerecording_hotkey_ic(::CMsgHotkey* gamerecording_hotkey_ic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gamerecording_hotkey_ic_;
  }
  if (gamerecording_hotkey_ic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gamerecording_hotkey_ic);
    if (message_arena != submessage_arena) {
      gamerecording_hotkey_ic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamerecording_hotkey_ic, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  gamerecording_hotkey_ic_ = gamerecording_hotkey_ic;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.gamerecording_hotkey_ic)
}

// optional float gamerecording_ic_seconds = 18216 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\InstantClipDuration", (.setting_default_float) = 30];
inline bool CMsgClientSettings::_internal_has_gamerecording_ic_seconds() const {
  bool value = (_has_bits_[4] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_ic_seconds() const {
  return _internal_has_gamerecording_ic_seconds();
}
inline void CMsgClientSettings::clear_gamerecording_ic_seconds() {
  gamerecording_ic_seconds_ = 0;
  _has_bits_[4] &= ~0x00000004u;
}
inline float CMsgClientSettings::_internal_gamerecording_ic_seconds() const {
  return gamerecording_ic_seconds_;
}
inline float CMsgClientSettings::gamerecording_ic_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_ic_seconds)
  return _internal_gamerecording_ic_seconds();
}
inline void CMsgClientSettings::_internal_set_gamerecording_ic_seconds(float value) {
  _has_bits_[4] |= 0x00000004u;
  gamerecording_ic_seconds_ = value;
}
inline void CMsgClientSettings::set_gamerecording_ic_seconds(float value) {
  _internal_set_gamerecording_ic_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_ic_seconds)
}

// optional .EGRExportLimitType gamerecording_export_limit_type = 18217 [default = EGRExportLimitType_Native, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitType"];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_limit_type() const {
  bool value = (_has_bits_[4] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_limit_type() const {
  return _internal_has_gamerecording_export_limit_type();
}
inline void CMsgClientSettings::clear_gamerecording_export_limit_type() {
  gamerecording_export_limit_type_ = 0;
  _has_bits_[4] &= ~0x00000008u;
}
inline ::EGRExportLimitType CMsgClientSettings::_internal_gamerecording_export_limit_type() const {
  return static_cast< ::EGRExportLimitType >(gamerecording_export_limit_type_);
}
inline ::EGRExportLimitType CMsgClientSettings::gamerecording_export_limit_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_limit_type)
  return _internal_gamerecording_export_limit_type();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_limit_type(::EGRExportLimitType value) {
  assert(::EGRExportLimitType_IsValid(value));
  _has_bits_[4] |= 0x00000008u;
  gamerecording_export_limit_type_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_limit_type(::EGRExportLimitType value) {
  _internal_set_gamerecording_export_limit_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_limit_type)
}

// optional int32 gamerecording_export_limit_size_mb = 18218 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitSize", (.setting_default_int) = 100];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_limit_size_mb() const {
  bool value = (_has_bits_[4] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_limit_size_mb() const {
  return _internal_has_gamerecording_export_limit_size_mb();
}
inline void CMsgClientSettings::clear_gamerecording_export_limit_size_mb() {
  gamerecording_export_limit_size_mb_ = 0;
  _has_bits_[4] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamerecording_export_limit_size_mb() const {
  return gamerecording_export_limit_size_mb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamerecording_export_limit_size_mb() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_limit_size_mb)
  return _internal_gamerecording_export_limit_size_mb();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_limit_size_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00000010u;
  gamerecording_export_limit_size_mb_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_limit_size_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamerecording_export_limit_size_mb(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_limit_size_mb)
}

// optional int32 gamerecording_export_limit_bitrate = 18219 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitBitrate", (.setting_default_int) = 1];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_limit_bitrate() const {
  bool value = (_has_bits_[4] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_limit_bitrate() const {
  return _internal_has_gamerecording_export_limit_bitrate();
}
inline void CMsgClientSettings::clear_gamerecording_export_limit_bitrate() {
  gamerecording_export_limit_bitrate_ = 0;
  _has_bits_[4] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamerecording_export_limit_bitrate() const {
  return gamerecording_export_limit_bitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamerecording_export_limit_bitrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_limit_bitrate)
  return _internal_gamerecording_export_limit_bitrate();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_limit_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00000200u;
  gamerecording_export_limit_bitrate_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_limit_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamerecording_export_limit_bitrate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_limit_bitrate)
}

// optional int32 gamerecording_export_limit_width = 18220 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitWidth", (.setting_default_int) = 3840];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_limit_width() const {
  bool value = (_has_bits_[4] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_limit_width() const {
  return _internal_has_gamerecording_export_limit_width();
}
inline void CMsgClientSettings::clear_gamerecording_export_limit_width() {
  gamerecording_export_limit_width_ = 0;
  _has_bits_[4] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamerecording_export_limit_width() const {
  return gamerecording_export_limit_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamerecording_export_limit_width() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_limit_width)
  return _internal_gamerecording_export_limit_width();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_limit_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00000400u;
  gamerecording_export_limit_width_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_limit_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamerecording_export_limit_width(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_limit_width)
}

// optional int32 gamerecording_export_limit_height = 18221 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitHeight", (.setting_default_int) = 2160];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_limit_height() const {
  bool value = (_has_bits_[4] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_limit_height() const {
  return _internal_has_gamerecording_export_limit_height();
}
inline void CMsgClientSettings::clear_gamerecording_export_limit_height() {
  gamerecording_export_limit_height_ = 0;
  _has_bits_[4] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamerecording_export_limit_height() const {
  return gamerecording_export_limit_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamerecording_export_limit_height() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_limit_height)
  return _internal_gamerecording_export_limit_height();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_limit_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00000800u;
  gamerecording_export_limit_height_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_limit_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamerecording_export_limit_height(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_limit_height)
}

// optional int32 gamerecording_export_limit_frame_rate = 18222 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportLimitFrameRate", (.setting_default_int) = 60];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_limit_frame_rate() const {
  bool value = (_has_bits_[4] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_limit_frame_rate() const {
  return _internal_has_gamerecording_export_limit_frame_rate();
}
inline void CMsgClientSettings::clear_gamerecording_export_limit_frame_rate() {
  gamerecording_export_limit_frame_rate_ = 0;
  _has_bits_[4] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamerecording_export_limit_frame_rate() const {
  return gamerecording_export_limit_frame_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamerecording_export_limit_frame_rate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_limit_frame_rate)
  return _internal_gamerecording_export_limit_frame_rate();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_limit_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00001000u;
  gamerecording_export_limit_frame_rate_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_limit_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamerecording_export_limit_frame_rate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_limit_frame_rate)
}

// optional string gamerecording_export_directory = 18223 [(.setting_store) = EClientSettingStore_CustomFunc, (.setting_name) = "GameRecording\\ExportDirectory"];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_directory() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_directory() const {
  return _internal_has_gamerecording_export_directory();
}
inline void CMsgClientSettings::clear_gamerecording_export_directory() {
  gamerecording_export_directory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& CMsgClientSettings::gamerecording_export_directory() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_directory)
  return _internal_gamerecording_export_directory();
}
inline void CMsgClientSettings::set_gamerecording_export_directory(const std::string& value) {
  _internal_set_gamerecording_export_directory(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_directory)
}
inline std::string* CMsgClientSettings::mutable_gamerecording_export_directory() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.gamerecording_export_directory)
  return _internal_mutable_gamerecording_export_directory();
}
inline const std::string& CMsgClientSettings::_internal_gamerecording_export_directory() const {
  return gamerecording_export_directory_.Get();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_directory(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  gamerecording_export_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_gamerecording_export_directory(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  gamerecording_export_directory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.gamerecording_export_directory)
}
inline void CMsgClientSettings::set_gamerecording_export_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  gamerecording_export_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.gamerecording_export_directory)
}
inline void CMsgClientSettings::set_gamerecording_export_directory(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  gamerecording_export_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.gamerecording_export_directory)
}
inline std::string* CMsgClientSettings::_internal_mutable_gamerecording_export_directory() {
  _has_bits_[0] |= 0x00000800u;
  return gamerecording_export_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_gamerecording_export_directory() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.gamerecording_export_directory)
  if (!_internal_has_gamerecording_export_directory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return gamerecording_export_directory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_gamerecording_export_directory(std::string* gamerecording_export_directory) {
  if (gamerecording_export_directory != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  gamerecording_export_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamerecording_export_directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.gamerecording_export_directory)
}

// optional .EExportCodec gamerecording_export_codec = 18224 [default = EExportCodec_Default, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ExportCodec"];
inline bool CMsgClientSettings::_internal_has_gamerecording_export_codec() const {
  bool value = (_has_bits_[4] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_export_codec() const {
  return _internal_has_gamerecording_export_codec();
}
inline void CMsgClientSettings::clear_gamerecording_export_codec() {
  gamerecording_export_codec_ = 0;
  _has_bits_[4] &= ~0x00002000u;
}
inline ::EExportCodec CMsgClientSettings::_internal_gamerecording_export_codec() const {
  return static_cast< ::EExportCodec >(gamerecording_export_codec_);
}
inline ::EExportCodec CMsgClientSettings::gamerecording_export_codec() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_export_codec)
  return _internal_gamerecording_export_codec();
}
inline void CMsgClientSettings::_internal_set_gamerecording_export_codec(::EExportCodec value) {
  assert(::EExportCodec_IsValid(value));
  _has_bits_[4] |= 0x00002000u;
  gamerecording_export_codec_ = value;
}
inline void CMsgClientSettings::set_gamerecording_export_codec(::EExportCodec value) {
  _internal_set_gamerecording_export_codec(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_export_codec)
}

// optional int32 gamerecording_video_maxheight = 18225 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\VideoMaxHeight", (.setting_default_int) = 0, (.setting_clamp_min) = 0, (.setting_clamp_max) = 2160];
inline bool CMsgClientSettings::_internal_has_gamerecording_video_maxheight() const {
  bool value = (_has_bits_[4] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_video_maxheight() const {
  return _internal_has_gamerecording_video_maxheight();
}
inline void CMsgClientSettings::clear_gamerecording_video_maxheight() {
  gamerecording_video_maxheight_ = 0;
  _has_bits_[4] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamerecording_video_maxheight() const {
  return gamerecording_video_maxheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamerecording_video_maxheight() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_video_maxheight)
  return _internal_gamerecording_video_maxheight();
}
inline void CMsgClientSettings::_internal_set_gamerecording_video_maxheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00004000u;
  gamerecording_video_maxheight_ = value;
}
inline void CMsgClientSettings::set_gamerecording_video_maxheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamerecording_video_maxheight(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_video_maxheight)
}

// optional bool gamerecording_force_mic_mono = 18226 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\ForceMicMono", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_gamerecording_force_mic_mono() const {
  bool value = (_has_bits_[4] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_force_mic_mono() const {
  return _internal_has_gamerecording_force_mic_mono();
}
inline void CMsgClientSettings::clear_gamerecording_force_mic_mono() {
  gamerecording_force_mic_mono_ = false;
  _has_bits_[4] &= ~0x00000080u;
}
inline bool CMsgClientSettings::_internal_gamerecording_force_mic_mono() const {
  return gamerecording_force_mic_mono_;
}
inline bool CMsgClientSettings::gamerecording_force_mic_mono() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_force_mic_mono)
  return _internal_gamerecording_force_mic_mono();
}
inline void CMsgClientSettings::_internal_set_gamerecording_force_mic_mono(bool value) {
  _has_bits_[4] |= 0x00000080u;
  gamerecording_force_mic_mono_ = value;
}
inline void CMsgClientSettings::set_gamerecording_force_mic_mono(bool value) {
  _internal_set_gamerecording_force_mic_mono(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_force_mic_mono)
}

// optional bool gamerecording_automatic_gain_control = 18227 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "GameRecording\\AutomaticGainControl", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_gamerecording_automatic_gain_control() const {
  bool value = (_has_bits_[4] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamerecording_automatic_gain_control() const {
  return _internal_has_gamerecording_automatic_gain_control();
}
inline void CMsgClientSettings::clear_gamerecording_automatic_gain_control() {
  gamerecording_automatic_gain_control_ = false;
  _has_bits_[4] &= ~0x00000100u;
}
inline bool CMsgClientSettings::_internal_gamerecording_automatic_gain_control() const {
  return gamerecording_automatic_gain_control_;
}
inline bool CMsgClientSettings::gamerecording_automatic_gain_control() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamerecording_automatic_gain_control)
  return _internal_gamerecording_automatic_gain_control();
}
inline void CMsgClientSettings::_internal_set_gamerecording_automatic_gain_control(bool value) {
  _has_bits_[4] |= 0x00000100u;
  gamerecording_automatic_gain_control_ = value;
}
inline void CMsgClientSettings::set_gamerecording_automatic_gain_control(bool value) {
  _internal_set_gamerecording_automatic_gain_control(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamerecording_automatic_gain_control)
}

// optional bool show_timestamps_in_console = 20000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
inline bool CMsgClientSettings::_internal_has_show_timestamps_in_console() const {
  bool value = (_has_bits_[4] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_timestamps_in_console() const {
  return _internal_has_show_timestamps_in_console();
}
inline void CMsgClientSettings::clear_show_timestamps_in_console() {
  show_timestamps_in_console_ = false;
  _has_bits_[4] &= ~0x00010000u;
}
inline bool CMsgClientSettings::_internal_show_timestamps_in_console() const {
  return show_timestamps_in_console_;
}
inline bool CMsgClientSettings::show_timestamps_in_console() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_timestamps_in_console)
  return _internal_show_timestamps_in_console();
}
inline void CMsgClientSettings::_internal_set_show_timestamps_in_console(bool value) {
  _has_bits_[4] |= 0x00010000u;
  show_timestamps_in_console_ = value;
}
inline void CMsgClientSettings::set_show_timestamps_in_console(bool value) {
  _internal_set_show_timestamps_in_console(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_timestamps_in_console)
}

// optional bool force_oobe = 20001 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\ForceOOBE"];
inline bool CMsgClientSettings::_internal_has_force_oobe() const {
  bool value = (_has_bits_[4] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_force_oobe() const {
  return _internal_has_force_oobe();
}
inline void CMsgClientSettings::clear_force_oobe() {
  force_oobe_ = false;
  _has_bits_[4] &= ~0x00020000u;
}
inline bool CMsgClientSettings::_internal_force_oobe() const {
  return force_oobe_;
}
inline bool CMsgClientSettings::force_oobe() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.force_oobe)
  return _internal_force_oobe();
}
inline void CMsgClientSettings::_internal_set_force_oobe(bool value) {
  _has_bits_[4] |= 0x00020000u;
  force_oobe_ = value;
}
inline void CMsgClientSettings::set_force_oobe(bool value) {
  _internal_set_force_oobe(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.force_oobe)
}

// optional int32 override_browser_composer_mode = 20002 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_override_browser_composer_mode() const {
  bool value = (_has_bits_[4] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_override_browser_composer_mode() const {
  return _internal_has_override_browser_composer_mode();
}
inline void CMsgClientSettings::clear_override_browser_composer_mode() {
  override_browser_composer_mode_ = 0;
  _has_bits_[4] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_override_browser_composer_mode() const {
  return override_browser_composer_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::override_browser_composer_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.override_browser_composer_mode)
  return _internal_override_browser_composer_mode();
}
inline void CMsgClientSettings::_internal_set_override_browser_composer_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x00008000u;
  override_browser_composer_mode_ = value;
}
inline void CMsgClientSettings::set_override_browser_composer_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_override_browser_composer_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.override_browser_composer_mode)
}

// optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = EClientSettingStore_CustomFunc];
inline bool CMsgClientSettings::_internal_has_cef_remote_debugging_enabled() const {
  bool value = (_has_bits_[4] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_cef_remote_debugging_enabled() const {
  return _internal_has_cef_remote_debugging_enabled();
}
inline void CMsgClientSettings::clear_cef_remote_debugging_enabled() {
  cef_remote_debugging_enabled_ = false;
  _has_bits_[4] &= ~0x00040000u;
}
inline bool CMsgClientSettings::_internal_cef_remote_debugging_enabled() const {
  return cef_remote_debugging_enabled_;
}
inline bool CMsgClientSettings::cef_remote_debugging_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.cef_remote_debugging_enabled)
  return _internal_cef_remote_debugging_enabled();
}
inline void CMsgClientSettings::_internal_set_cef_remote_debugging_enabled(bool value) {
  _has_bits_[4] |= 0x00040000u;
  cef_remote_debugging_enabled_ = value;
}
inline void CMsgClientSettings::set_cef_remote_debugging_enabled(bool value) {
  _internal_set_cef_remote_debugging_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.cef_remote_debugging_enabled)
}

// optional bool force_decperf_tab = 20004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];
inline bool CMsgClientSettings::_internal_has_force_decperf_tab() const {
  bool value = (_has_bits_[4] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_force_decperf_tab() const {
  return _internal_has_force_decperf_tab();
}
inline void CMsgClientSettings::clear_force_decperf_tab() {
  force_decperf_tab_ = false;
  _has_bits_[4] &= ~0x00080000u;
}
inline bool CMsgClientSettings::_internal_force_decperf_tab() const {
  return force_decperf_tab_;
}
inline bool CMsgClientSettings::force_decperf_tab() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.force_decperf_tab)
  return _internal_force_decperf_tab();
}
inline void CMsgClientSettings::_internal_set_force_decperf_tab(bool value) {
  _has_bits_[4] |= 0x00080000u;
  force_decperf_tab_ = value;
}
inline void CMsgClientSettings::set_force_decperf_tab(bool value) {
  _internal_set_force_decperf_tab(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.force_decperf_tab)
}

// optional bool force_fake_mandatory_update = 20005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];
inline bool CMsgClientSettings::_internal_has_force_fake_mandatory_update() const {
  bool value = (_has_bits_[4] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_force_fake_mandatory_update() const {
  return _internal_has_force_fake_mandatory_update();
}
inline void CMsgClientSettings::clear_force_fake_mandatory_update() {
  force_fake_mandatory_update_ = false;
  _has_bits_[4] &= ~0x00100000u;
}
inline bool CMsgClientSettings::_internal_force_fake_mandatory_update() const {
  return force_fake_mandatory_update_;
}
inline bool CMsgClientSettings::force_fake_mandatory_update() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.force_fake_mandatory_update)
  return _internal_force_fake_mandatory_update();
}
inline void CMsgClientSettings::_internal_set_force_fake_mandatory_update(bool value) {
  _has_bits_[4] |= 0x00100000u;
  force_fake_mandatory_update_ = value;
}
inline void CMsgClientSettings::set_force_fake_mandatory_update(bool value) {
  _internal_set_force_fake_mandatory_update(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.force_fake_mandatory_update)
}

// optional bool hdr_compat_testing = 20006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/HDRCompatTesting"];
inline bool CMsgClientSettings::_internal_has_hdr_compat_testing() const {
  bool value = (_has_bits_[4] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_hdr_compat_testing() const {
  return _internal_has_hdr_compat_testing();
}
inline void CMsgClientSettings::clear_hdr_compat_testing() {
  hdr_compat_testing_ = false;
  _has_bits_[4] &= ~0x00200000u;
}
inline bool CMsgClientSettings::_internal_hdr_compat_testing() const {
  return hdr_compat_testing_;
}
inline bool CMsgClientSettings::hdr_compat_testing() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.hdr_compat_testing)
  return _internal_hdr_compat_testing();
}
inline void CMsgClientSettings::_internal_set_hdr_compat_testing(bool value) {
  _has_bits_[4] |= 0x00200000u;
  hdr_compat_testing_ = value;
}
inline void CMsgClientSettings::set_hdr_compat_testing(bool value) {
  _internal_set_hdr_compat_testing(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.hdr_compat_testing)
}

// optional bool developer_mode_enabled = 20007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/DevModeEnabled"];
inline bool CMsgClientSettings::_internal_has_developer_mode_enabled() const {
  bool value = (_has_bits_[4] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_developer_mode_enabled() const {
  return _internal_has_developer_mode_enabled();
}
inline void CMsgClientSettings::clear_developer_mode_enabled() {
  developer_mode_enabled_ = false;
  _has_bits_[4] &= ~0x00400000u;
}
inline bool CMsgClientSettings::_internal_developer_mode_enabled() const {
  return developer_mode_enabled_;
}
inline bool CMsgClientSettings::developer_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.developer_mode_enabled)
  return _internal_developer_mode_enabled();
}
inline void CMsgClientSettings::_internal_set_developer_mode_enabled(bool value) {
  _has_bits_[4] |= 0x00400000u;
  developer_mode_enabled_ = value;
}
inline void CMsgClientSettings::set_developer_mode_enabled(bool value) {
  _internal_set_developer_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.developer_mode_enabled)
}

// optional bool show_advanced_update_channels = 20008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ShowAdvancedUpdateChannels"];
inline bool CMsgClientSettings::_internal_has_show_advanced_update_channels() const {
  bool value = (_has_bits_[4] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_show_advanced_update_channels() const {
  return _internal_has_show_advanced_update_channels();
}
inline void CMsgClientSettings::clear_show_advanced_update_channels() {
  show_advanced_update_channels_ = false;
  _has_bits_[4] &= ~0x00800000u;
}
inline bool CMsgClientSettings::_internal_show_advanced_update_channels() const {
  return show_advanced_update_channels_;
}
inline bool CMsgClientSettings::show_advanced_update_channels() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.show_advanced_update_channels)
  return _internal_show_advanced_update_channels();
}
inline void CMsgClientSettings::_internal_set_show_advanced_update_channels(bool value) {
  _has_bits_[4] |= 0x00800000u;
  show_advanced_update_channels_ = value;
}
inline void CMsgClientSettings::set_show_advanced_update_channels(bool value) {
  _internal_set_show_advanced_update_channels(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.show_advanced_update_channels)
}

// optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];
inline bool CMsgClientSettings::_internal_has_gamescope_hdr_visualization() const {
  bool value = (_has_bits_[4] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_hdr_visualization() const {
  return _internal_has_gamescope_hdr_visualization();
}
inline void CMsgClientSettings::clear_gamescope_hdr_visualization() {
  gamescope_hdr_visualization_ = 0;
  _has_bits_[4] &= ~0x01000000u;
}
inline ::EHDRVisualization CMsgClientSettings::_internal_gamescope_hdr_visualization() const {
  return static_cast< ::EHDRVisualization >(gamescope_hdr_visualization_);
}
inline ::EHDRVisualization CMsgClientSettings::gamescope_hdr_visualization() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_hdr_visualization)
  return _internal_gamescope_hdr_visualization();
}
inline void CMsgClientSettings::_internal_set_gamescope_hdr_visualization(::EHDRVisualization value) {
  assert(::EHDRVisualization_IsValid(value));
  _has_bits_[4] |= 0x01000000u;
  gamescope_hdr_visualization_ = value;
}
inline void CMsgClientSettings::set_gamescope_hdr_visualization(::EHDRVisualization value) {
  _internal_set_gamescope_hdr_visualization(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_hdr_visualization)
}

// optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
inline bool CMsgClientSettings::_internal_has_gamescope_app_target_framerate() const {
  bool value = (_has_bits_[4] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_app_target_framerate() const {
  return _internal_has_gamescope_app_target_framerate();
}
inline void CMsgClientSettings::clear_gamescope_app_target_framerate() {
  gamescope_app_target_framerate_ = 0;
  _has_bits_[4] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamescope_app_target_framerate() const {
  return gamescope_app_target_framerate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamescope_app_target_framerate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_app_target_framerate)
  return _internal_gamescope_app_target_framerate();
}
inline void CMsgClientSettings::_internal_set_gamescope_app_target_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x02000000u;
  gamescope_app_target_framerate_ = value;
}
inline void CMsgClientSettings::set_gamescope_app_target_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamescope_app_target_framerate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_app_target_framerate)
}

// optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_gamescope_enable_app_target_framerate() const {
  bool value = (_has_bits_[4] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_enable_app_target_framerate() const {
  return _internal_has_gamescope_enable_app_target_framerate();
}
inline void CMsgClientSettings::clear_gamescope_enable_app_target_framerate() {
  gamescope_enable_app_target_framerate_ = false;
  _has_bits_[4] &= ~0x08000000u;
}
inline bool CMsgClientSettings::_internal_gamescope_enable_app_target_framerate() const {
  return gamescope_enable_app_target_framerate_;
}
inline bool CMsgClientSettings::gamescope_enable_app_target_framerate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_enable_app_target_framerate)
  return _internal_gamescope_enable_app_target_framerate();
}
inline void CMsgClientSettings::_internal_set_gamescope_enable_app_target_framerate(bool value) {
  _has_bits_[4] |= 0x08000000u;
  gamescope_enable_app_target_framerate_ = value;
}
inline void CMsgClientSettings::set_gamescope_enable_app_target_framerate(bool value) {
  _internal_set_gamescope_enable_app_target_framerate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_enable_app_target_framerate)
}

// optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
inline bool CMsgClientSettings::_internal_has_gamescope_disable_framelimit() const {
  bool value = (_has_bits_[4] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_disable_framelimit() const {
  return _internal_has_gamescope_disable_framelimit();
}
inline void CMsgClientSettings::clear_gamescope_disable_framelimit() {
  gamescope_disable_framelimit_ = false;
  _has_bits_[4] &= ~0x10000000u;
}
inline bool CMsgClientSettings::_internal_gamescope_disable_framelimit() const {
  return gamescope_disable_framelimit_;
}
inline bool CMsgClientSettings::gamescope_disable_framelimit() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_disable_framelimit)
  return _internal_gamescope_disable_framelimit();
}
inline void CMsgClientSettings::_internal_set_gamescope_disable_framelimit(bool value) {
  _has_bits_[4] |= 0x10000000u;
  gamescope_disable_framelimit_ = value;
}
inline void CMsgClientSettings::set_gamescope_disable_framelimit(bool value) {
  _internal_set_gamescope_disable_framelimit(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_disable_framelimit)
}

// optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGamePerDisplay];
inline bool CMsgClientSettings::_internal_has_gamescope_display_refresh_rate() const {
  bool value = (_has_bits_[4] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_display_refresh_rate() const {
  return _internal_has_gamescope_display_refresh_rate();
}
inline void CMsgClientSettings::clear_gamescope_display_refresh_rate() {
  gamescope_display_refresh_rate_ = 0;
  _has_bits_[4] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_gamescope_display_refresh_rate() const {
  return gamescope_display_refresh_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::gamescope_display_refresh_rate() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_display_refresh_rate)
  return _internal_gamescope_display_refresh_rate();
}
inline void CMsgClientSettings::_internal_set_gamescope_display_refresh_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[4] |= 0x04000000u;
  gamescope_display_refresh_rate_ = value;
}
inline void CMsgClientSettings::set_gamescope_display_refresh_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamescope_display_refresh_rate(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_display_refresh_rate)
}

// optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_gamescope_use_game_refresh_rate_in_steam() const {
  bool value = (_has_bits_[4] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_use_game_refresh_rate_in_steam() const {
  return _internal_has_gamescope_use_game_refresh_rate_in_steam();
}
inline void CMsgClientSettings::clear_gamescope_use_game_refresh_rate_in_steam() {
  gamescope_use_game_refresh_rate_in_steam_ = false;
  _has_bits_[4] &= ~0x20000000u;
}
inline bool CMsgClientSettings::_internal_gamescope_use_game_refresh_rate_in_steam() const {
  return gamescope_use_game_refresh_rate_in_steam_;
}
inline bool CMsgClientSettings::gamescope_use_game_refresh_rate_in_steam() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_use_game_refresh_rate_in_steam)
  return _internal_gamescope_use_game_refresh_rate_in_steam();
}
inline void CMsgClientSettings::_internal_set_gamescope_use_game_refresh_rate_in_steam(bool value) {
  _has_bits_[4] |= 0x20000000u;
  gamescope_use_game_refresh_rate_in_steam_ = value;
}
inline void CMsgClientSettings::set_gamescope_use_game_refresh_rate_in_steam(bool value) {
  _internal_set_gamescope_use_game_refresh_rate_in_steam(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_use_game_refresh_rate_in_steam)
}

// optional bool gamescope_disable_mura_correction = 21007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/MuraCorrectionDisabled", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_gamescope_disable_mura_correction() const {
  bool value = (_has_bits_[4] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_disable_mura_correction() const {
  return _internal_has_gamescope_disable_mura_correction();
}
inline void CMsgClientSettings::clear_gamescope_disable_mura_correction() {
  gamescope_disable_mura_correction_ = false;
  _has_bits_[4] &= ~0x40000000u;
}
inline bool CMsgClientSettings::_internal_gamescope_disable_mura_correction() const {
  return gamescope_disable_mura_correction_;
}
inline bool CMsgClientSettings::gamescope_disable_mura_correction() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_disable_mura_correction)
  return _internal_gamescope_disable_mura_correction();
}
inline void CMsgClientSettings::_internal_set_gamescope_disable_mura_correction(bool value) {
  _has_bits_[4] |= 0x40000000u;
  gamescope_disable_mura_correction_ = value;
}
inline void CMsgClientSettings::set_gamescope_disable_mura_correction(bool value) {
  _internal_set_gamescope_disable_mura_correction(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_disable_mura_correction)
}

// optional bool gamescope_include_steamui_in_screenshots = 21008 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/IncludeSteamUIInScreenshots", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_gamescope_include_steamui_in_screenshots() const {
  bool value = (_has_bits_[4] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_include_steamui_in_screenshots() const {
  return _internal_has_gamescope_include_steamui_in_screenshots();
}
inline void CMsgClientSettings::clear_gamescope_include_steamui_in_screenshots() {
  gamescope_include_steamui_in_screenshots_ = false;
  _has_bits_[4] &= ~0x80000000u;
}
inline bool CMsgClientSettings::_internal_gamescope_include_steamui_in_screenshots() const {
  return gamescope_include_steamui_in_screenshots_;
}
inline bool CMsgClientSettings::gamescope_include_steamui_in_screenshots() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_include_steamui_in_screenshots)
  return _internal_gamescope_include_steamui_in_screenshots();
}
inline void CMsgClientSettings::_internal_set_gamescope_include_steamui_in_screenshots(bool value) {
  _has_bits_[4] |= 0x80000000u;
  gamescope_include_steamui_in_screenshots_ = value;
}
inline void CMsgClientSettings::set_gamescope_include_steamui_in_screenshots(bool value) {
  _internal_set_gamescope_include_steamui_in_screenshots(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_include_steamui_in_screenshots)
}

// optional bool gamescope_allow_tearing = 21009 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AllowTearing", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
inline bool CMsgClientSettings::_internal_has_gamescope_allow_tearing() const {
  bool value = (_has_bits_[5] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_allow_tearing() const {
  return _internal_has_gamescope_allow_tearing();
}
inline void CMsgClientSettings::clear_gamescope_allow_tearing() {
  gamescope_allow_tearing_ = false;
  _has_bits_[5] &= ~0x00000001u;
}
inline bool CMsgClientSettings::_internal_gamescope_allow_tearing() const {
  return gamescope_allow_tearing_;
}
inline bool CMsgClientSettings::gamescope_allow_tearing() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_allow_tearing)
  return _internal_gamescope_allow_tearing();
}
inline void CMsgClientSettings::_internal_set_gamescope_allow_tearing(bool value) {
  _has_bits_[5] |= 0x00000001u;
  gamescope_allow_tearing_ = value;
}
inline void CMsgClientSettings::set_gamescope_allow_tearing(bool value) {
  _internal_set_gamescope_allow_tearing(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_allow_tearing)
}

// optional bool gamescope_composite_debug = 21010 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/CompositeDebug", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_gamescope_composite_debug() const {
  bool value = (_has_bits_[5] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_composite_debug() const {
  return _internal_has_gamescope_composite_debug();
}
inline void CMsgClientSettings::clear_gamescope_composite_debug() {
  gamescope_composite_debug_ = false;
  _has_bits_[5] &= ~0x00000002u;
}
inline bool CMsgClientSettings::_internal_gamescope_composite_debug() const {
  return gamescope_composite_debug_;
}
inline bool CMsgClientSettings::gamescope_composite_debug() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_composite_debug)
  return _internal_gamescope_composite_debug();
}
inline void CMsgClientSettings::_internal_set_gamescope_composite_debug(bool value) {
  _has_bits_[5] |= 0x00000002u;
  gamescope_composite_debug_ = value;
}
inline void CMsgClientSettings::set_gamescope_composite_debug(bool value) {
  _internal_set_gamescope_composite_debug(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_composite_debug)
}

// optional bool gamescope_force_composite = 21011 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/ForceComposite", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_gamescope_force_composite() const {
  bool value = (_has_bits_[5] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_force_composite() const {
  return _internal_has_gamescope_force_composite();
}
inline void CMsgClientSettings::clear_gamescope_force_composite() {
  gamescope_force_composite_ = false;
  _has_bits_[5] &= ~0x00000004u;
}
inline bool CMsgClientSettings::_internal_gamescope_force_composite() const {
  return gamescope_force_composite_;
}
inline bool CMsgClientSettings::gamescope_force_composite() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_force_composite)
  return _internal_gamescope_force_composite();
}
inline void CMsgClientSettings::_internal_set_gamescope_force_composite(bool value) {
  _has_bits_[5] |= 0x00000004u;
  gamescope_force_composite_ = value;
}
inline void CMsgClientSettings::set_gamescope_force_composite(bool value) {
  _internal_set_gamescope_force_composite(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_force_composite)
}

// optional string gamescope_game_resolution_global = 21012 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GameResolutionGlobal", (.setting_default_string) = "Default"];
inline bool CMsgClientSettings::_internal_has_gamescope_game_resolution_global() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_game_resolution_global() const {
  return _internal_has_gamescope_game_resolution_global();
}
inline void CMsgClientSettings::clear_gamescope_game_resolution_global() {
  gamescope_game_resolution_global_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& CMsgClientSettings::gamescope_game_resolution_global() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_game_resolution_global)
  return _internal_gamescope_game_resolution_global();
}
inline void CMsgClientSettings::set_gamescope_game_resolution_global(const std::string& value) {
  _internal_set_gamescope_game_resolution_global(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_game_resolution_global)
}
inline std::string* CMsgClientSettings::mutable_gamescope_game_resolution_global() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.gamescope_game_resolution_global)
  return _internal_mutable_gamescope_game_resolution_global();
}
inline const std::string& CMsgClientSettings::_internal_gamescope_game_resolution_global() const {
  return gamescope_game_resolution_global_.Get();
}
inline void CMsgClientSettings::_internal_set_gamescope_game_resolution_global(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  gamescope_game_resolution_global_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_gamescope_game_resolution_global(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  gamescope_game_resolution_global_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.gamescope_game_resolution_global)
}
inline void CMsgClientSettings::set_gamescope_game_resolution_global(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  gamescope_game_resolution_global_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.gamescope_game_resolution_global)
}
inline void CMsgClientSettings::set_gamescope_game_resolution_global(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  gamescope_game_resolution_global_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.gamescope_game_resolution_global)
}
inline std::string* CMsgClientSettings::_internal_mutable_gamescope_game_resolution_global() {
  _has_bits_[0] |= 0x00001000u;
  return gamescope_game_resolution_global_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_gamescope_game_resolution_global() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.gamescope_game_resolution_global)
  if (!_internal_has_gamescope_game_resolution_global()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return gamescope_game_resolution_global_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_gamescope_game_resolution_global(std::string* gamescope_game_resolution_global) {
  if (gamescope_game_resolution_global != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  gamescope_game_resolution_global_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamescope_game_resolution_global,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.gamescope_game_resolution_global)
}

// optional .CMsgHotkey gamescope_guide_hotkey = 21013 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/GuideKeyboardHotkey"];
inline bool CMsgClientSettings::_internal_has_gamescope_guide_hotkey() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || gamescope_guide_hotkey_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_gamescope_guide_hotkey() const {
  return _internal_has_gamescope_guide_hotkey();
}
inline void CMsgClientSettings::clear_gamescope_guide_hotkey() {
  if (gamescope_guide_hotkey_ != nullptr) gamescope_guide_hotkey_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_gamescope_guide_hotkey() const {
  const ::CMsgHotkey* p = gamescope_guide_hotkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::gamescope_guide_hotkey() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_guide_hotkey)
  return _internal_gamescope_guide_hotkey();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_gamescope_guide_hotkey(
    ::CMsgHotkey* gamescope_guide_hotkey) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamescope_guide_hotkey_);
  }
  gamescope_guide_hotkey_ = gamescope_guide_hotkey;
  if (gamescope_guide_hotkey) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.gamescope_guide_hotkey)
}
inline ::CMsgHotkey* CMsgClientSettings::release_gamescope_guide_hotkey() {
  _has_bits_[0] &= ~0x00100000u;
  ::CMsgHotkey* temp = gamescope_guide_hotkey_;
  gamescope_guide_hotkey_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_gamescope_guide_hotkey() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.gamescope_guide_hotkey)
  _has_bits_[0] &= ~0x00100000u;
  ::CMsgHotkey* temp = gamescope_guide_hotkey_;
  gamescope_guide_hotkey_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_gamescope_guide_hotkey() {
  _has_bits_[0] |= 0x00100000u;
  if (gamescope_guide_hotkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    gamescope_guide_hotkey_ = p;
  }
  return gamescope_guide_hotkey_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_gamescope_guide_hotkey() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.gamescope_guide_hotkey)
  return _internal_mutable_gamescope_guide_hotkey();
}
inline void CMsgClientSettings::set_allocated_gamescope_guide_hotkey(::CMsgHotkey* gamescope_guide_hotkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gamescope_guide_hotkey_;
  }
  if (gamescope_guide_hotkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gamescope_guide_hotkey);
    if (message_arena != submessage_arena) {
      gamescope_guide_hotkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamescope_guide_hotkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  gamescope_guide_hotkey_ = gamescope_guide_hotkey;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.gamescope_guide_hotkey)
}

// optional .CMsgHotkey gamescope_qam_hotkey = 21014 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/QAMKeyboardHotkey"];
inline bool CMsgClientSettings::_internal_has_gamescope_qam_hotkey() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || gamescope_qam_hotkey_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_gamescope_qam_hotkey() const {
  return _internal_has_gamescope_qam_hotkey();
}
inline void CMsgClientSettings::clear_gamescope_qam_hotkey() {
  if (gamescope_qam_hotkey_ != nullptr) gamescope_qam_hotkey_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_gamescope_qam_hotkey() const {
  const ::CMsgHotkey* p = gamescope_qam_hotkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::gamescope_qam_hotkey() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_qam_hotkey)
  return _internal_gamescope_qam_hotkey();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_gamescope_qam_hotkey(
    ::CMsgHotkey* gamescope_qam_hotkey) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamescope_qam_hotkey_);
  }
  gamescope_qam_hotkey_ = gamescope_qam_hotkey;
  if (gamescope_qam_hotkey) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.gamescope_qam_hotkey)
}
inline ::CMsgHotkey* CMsgClientSettings::release_gamescope_qam_hotkey() {
  _has_bits_[0] &= ~0x00200000u;
  ::CMsgHotkey* temp = gamescope_qam_hotkey_;
  gamescope_qam_hotkey_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_gamescope_qam_hotkey() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.gamescope_qam_hotkey)
  _has_bits_[0] &= ~0x00200000u;
  ::CMsgHotkey* temp = gamescope_qam_hotkey_;
  gamescope_qam_hotkey_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_gamescope_qam_hotkey() {
  _has_bits_[0] |= 0x00200000u;
  if (gamescope_qam_hotkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    gamescope_qam_hotkey_ = p;
  }
  return gamescope_qam_hotkey_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_gamescope_qam_hotkey() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.gamescope_qam_hotkey)
  return _internal_mutable_gamescope_qam_hotkey();
}
inline void CMsgClientSettings::set_allocated_gamescope_qam_hotkey(::CMsgHotkey* gamescope_qam_hotkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gamescope_qam_hotkey_;
  }
  if (gamescope_qam_hotkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gamescope_qam_hotkey);
    if (message_arena != submessage_arena) {
      gamescope_qam_hotkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamescope_qam_hotkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  gamescope_qam_hotkey_ = gamescope_qam_hotkey;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.gamescope_qam_hotkey)
}

// optional bool gamescope_hdr_enabled = 21015 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Gamescope/HDREnabled", (.setting_default_bool) = true, (.setting_profile_mode) = ESettingProfileMode_PerDisplay];
inline bool CMsgClientSettings::_internal_has_gamescope_hdr_enabled() const {
  bool value = (_has_bits_[5] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_hdr_enabled() const {
  return _internal_has_gamescope_hdr_enabled();
}
inline void CMsgClientSettings::clear_gamescope_hdr_enabled() {
  gamescope_hdr_enabled_ = false;
  _has_bits_[5] &= ~0x00000008u;
}
inline bool CMsgClientSettings::_internal_gamescope_hdr_enabled() const {
  return gamescope_hdr_enabled_;
}
inline bool CMsgClientSettings::gamescope_hdr_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_hdr_enabled)
  return _internal_gamescope_hdr_enabled();
}
inline void CMsgClientSettings::_internal_set_gamescope_hdr_enabled(bool value) {
  _has_bits_[5] |= 0x00000008u;
  gamescope_hdr_enabled_ = value;
}
inline void CMsgClientSettings::set_gamescope_hdr_enabled(bool value) {
  _internal_set_gamescope_hdr_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_hdr_enabled)
}

// optional bool gamescope_native_external_res_in_steam = 21016 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "Gamescope/EnableSteamNativeExternalResolution"];
inline bool CMsgClientSettings::_internal_has_gamescope_native_external_res_in_steam() const {
  bool value = (_has_bits_[5] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_gamescope_native_external_res_in_steam() const {
  return _internal_has_gamescope_native_external_res_in_steam();
}
inline void CMsgClientSettings::clear_gamescope_native_external_res_in_steam() {
  gamescope_native_external_res_in_steam_ = false;
  _has_bits_[5] &= ~0x00000010u;
}
inline bool CMsgClientSettings::_internal_gamescope_native_external_res_in_steam() const {
  return gamescope_native_external_res_in_steam_;
}
inline bool CMsgClientSettings::gamescope_native_external_res_in_steam() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.gamescope_native_external_res_in_steam)
  return _internal_gamescope_native_external_res_in_steam();
}
inline void CMsgClientSettings::_internal_set_gamescope_native_external_res_in_steam(bool value) {
  _has_bits_[5] |= 0x00000010u;
  gamescope_native_external_res_in_steam_ = value;
}
inline void CMsgClientSettings::set_gamescope_native_external_res_in_steam(bool value) {
  _internal_set_gamescope_native_external_res_in_steam(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.gamescope_native_external_res_in_steam)
}

// optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];
inline bool CMsgClientSettings::_internal_has_steamos_status_led_brightness() const {
  bool value = (_has_bits_[5] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_status_led_brightness() const {
  return _internal_has_steamos_status_led_brightness();
}
inline void CMsgClientSettings::clear_steamos_status_led_brightness() {
  steamos_status_led_brightness_ = 0;
  _has_bits_[5] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_steamos_status_led_brightness() const {
  return steamos_status_led_brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::steamos_status_led_brightness() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_status_led_brightness)
  return _internal_steamos_status_led_brightness();
}
inline void CMsgClientSettings::_internal_set_steamos_status_led_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[5] |= 0x00000080u;
  steamos_status_led_brightness_ = value;
}
inline void CMsgClientSettings::set_steamos_status_led_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steamos_status_led_brightness(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_status_led_brightness)
}

// optional bool steamos_tdp_limit_enabled = 22001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimitEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
inline bool CMsgClientSettings::_internal_has_steamos_tdp_limit_enabled() const {
  bool value = (_has_bits_[5] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_tdp_limit_enabled() const {
  return _internal_has_steamos_tdp_limit_enabled();
}
inline void CMsgClientSettings::clear_steamos_tdp_limit_enabled() {
  steamos_tdp_limit_enabled_ = false;
  _has_bits_[5] &= ~0x00000020u;
}
inline bool CMsgClientSettings::_internal_steamos_tdp_limit_enabled() const {
  return steamos_tdp_limit_enabled_;
}
inline bool CMsgClientSettings::steamos_tdp_limit_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_tdp_limit_enabled)
  return _internal_steamos_tdp_limit_enabled();
}
inline void CMsgClientSettings::_internal_set_steamos_tdp_limit_enabled(bool value) {
  _has_bits_[5] |= 0x00000020u;
  steamos_tdp_limit_enabled_ = value;
}
inline void CMsgClientSettings::set_steamos_tdp_limit_enabled(bool value) {
  _internal_set_steamos_tdp_limit_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_tdp_limit_enabled)
}

// optional int32 steamos_tdp_limit = 22002 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/TDPLimit", (.setting_default_int) = 0, (.setting_profile_mode) = ESettingProfileMode_PerGame];
inline bool CMsgClientSettings::_internal_has_steamos_tdp_limit() const {
  bool value = (_has_bits_[5] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_tdp_limit() const {
  return _internal_has_steamos_tdp_limit();
}
inline void CMsgClientSettings::clear_steamos_tdp_limit() {
  steamos_tdp_limit_ = 0;
  _has_bits_[5] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_steamos_tdp_limit() const {
  return steamos_tdp_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::steamos_tdp_limit() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_tdp_limit)
  return _internal_steamos_tdp_limit();
}
inline void CMsgClientSettings::_internal_set_steamos_tdp_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[5] |= 0x00000100u;
  steamos_tdp_limit_ = value;
}
inline void CMsgClientSettings::set_steamos_tdp_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steamos_tdp_limit(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_tdp_limit)
}

// optional bool steamos_cec_enabled = 22003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/CECEnabled", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_steamos_cec_enabled() const {
  bool value = (_has_bits_[5] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_cec_enabled() const {
  return _internal_has_steamos_cec_enabled();
}
inline void CMsgClientSettings::clear_steamos_cec_enabled() {
  steamos_cec_enabled_ = false;
  _has_bits_[5] &= ~0x00000040u;
}
inline bool CMsgClientSettings::_internal_steamos_cec_enabled() const {
  return steamos_cec_enabled_;
}
inline bool CMsgClientSettings::steamos_cec_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_cec_enabled)
  return _internal_steamos_cec_enabled();
}
inline void CMsgClientSettings::_internal_set_steamos_cec_enabled(bool value) {
  _has_bits_[5] |= 0x00000040u;
  steamos_cec_enabled_ = value;
}
inline void CMsgClientSettings::set_steamos_cec_enabled(bool value) {
  _internal_set_steamos_cec_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_cec_enabled)
}

// optional bool steamos_cec_wake_on_resume = 22004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WakeOnResume", (.setting_default_bool) = true];
inline bool CMsgClientSettings::_internal_has_steamos_cec_wake_on_resume() const {
  bool value = (_has_bits_[5] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_cec_wake_on_resume() const {
  return _internal_has_steamos_cec_wake_on_resume();
}
inline void CMsgClientSettings::clear_steamos_cec_wake_on_resume() {
  steamos_cec_wake_on_resume_ = false;
  _has_bits_[5] &= ~0x00000200u;
}
inline bool CMsgClientSettings::_internal_steamos_cec_wake_on_resume() const {
  return steamos_cec_wake_on_resume_;
}
inline bool CMsgClientSettings::steamos_cec_wake_on_resume() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_cec_wake_on_resume)
  return _internal_steamos_cec_wake_on_resume();
}
inline void CMsgClientSettings::_internal_set_steamos_cec_wake_on_resume(bool value) {
  _has_bits_[5] |= 0x00000200u;
  steamos_cec_wake_on_resume_ = value;
}
inline void CMsgClientSettings::set_steamos_cec_wake_on_resume(bool value) {
  _internal_set_steamos_cec_wake_on_resume(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_cec_wake_on_resume)
}

// optional bool steamos_wifi_debug = 22005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiDebug", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_steamos_wifi_debug() const {
  bool value = (_has_bits_[5] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_wifi_debug() const {
  return _internal_has_steamos_wifi_debug();
}
inline void CMsgClientSettings::clear_steamos_wifi_debug() {
  steamos_wifi_debug_ = false;
  _has_bits_[5] &= ~0x00000400u;
}
inline bool CMsgClientSettings::_internal_steamos_wifi_debug() const {
  return steamos_wifi_debug_;
}
inline bool CMsgClientSettings::steamos_wifi_debug() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_wifi_debug)
  return _internal_steamos_wifi_debug();
}
inline void CMsgClientSettings::_internal_set_steamos_wifi_debug(bool value) {
  _has_bits_[5] |= 0x00000400u;
  steamos_wifi_debug_ = value;
}
inline void CMsgClientSettings::set_steamos_wifi_debug(bool value) {
  _internal_set_steamos_wifi_debug(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_wifi_debug)
}

// optional bool steamos_wifi_force_wpa_supplicant = 22006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/WifiForceWPASupplicant", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_steamos_wifi_force_wpa_supplicant() const {
  bool value = (_has_bits_[5] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_wifi_force_wpa_supplicant() const {
  return _internal_has_steamos_wifi_force_wpa_supplicant();
}
inline void CMsgClientSettings::clear_steamos_wifi_force_wpa_supplicant() {
  steamos_wifi_force_wpa_supplicant_ = false;
  _has_bits_[5] &= ~0x00000800u;
}
inline bool CMsgClientSettings::_internal_steamos_wifi_force_wpa_supplicant() const {
  return steamos_wifi_force_wpa_supplicant_;
}
inline bool CMsgClientSettings::steamos_wifi_force_wpa_supplicant() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_wifi_force_wpa_supplicant)
  return _internal_steamos_wifi_force_wpa_supplicant();
}
inline void CMsgClientSettings::_internal_set_steamos_wifi_force_wpa_supplicant(bool value) {
  _has_bits_[5] |= 0x00000800u;
  steamos_wifi_force_wpa_supplicant_ = value;
}
inline void CMsgClientSettings::set_steamos_wifi_force_wpa_supplicant(bool value) {
  _internal_set_steamos_wifi_force_wpa_supplicant(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_wifi_force_wpa_supplicant)
}

// optional int32 steamos_magnifier_scale = 22007 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/MagnifierScale", (.setting_default_int) = 150];
inline bool CMsgClientSettings::_internal_has_steamos_magnifier_scale() const {
  bool value = (_has_bits_[5] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_magnifier_scale() const {
  return _internal_has_steamos_magnifier_scale();
}
inline void CMsgClientSettings::clear_steamos_magnifier_scale() {
  steamos_magnifier_scale_ = 0;
  _has_bits_[5] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_steamos_magnifier_scale() const {
  return steamos_magnifier_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::steamos_magnifier_scale() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_magnifier_scale)
  return _internal_steamos_magnifier_scale();
}
inline void CMsgClientSettings::_internal_set_steamos_magnifier_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[5] |= 0x00002000u;
  steamos_magnifier_scale_ = value;
}
inline void CMsgClientSettings::set_steamos_magnifier_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steamos_magnifier_scale(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_magnifier_scale)
}

// optional bool steamos_manual_gpu_clocenabled = 22008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/ManualGPUClockEnabled", (.setting_default_bool) = false, (.setting_profile_mode) = ESettingProfileMode_PerGame];
inline bool CMsgClientSettings::_internal_has_steamos_manual_gpu_clocenabled() const {
  bool value = (_has_bits_[5] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_manual_gpu_clocenabled() const {
  return _internal_has_steamos_manual_gpu_clocenabled();
}
inline void CMsgClientSettings::clear_steamos_manual_gpu_clocenabled() {
  steamos_manual_gpu_clocenabled_ = false;
  _has_bits_[5] &= ~0x00001000u;
}
inline bool CMsgClientSettings::_internal_steamos_manual_gpu_clocenabled() const {
  return steamos_manual_gpu_clocenabled_;
}
inline bool CMsgClientSettings::steamos_manual_gpu_clocenabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_manual_gpu_clocenabled)
  return _internal_steamos_manual_gpu_clocenabled();
}
inline void CMsgClientSettings::_internal_set_steamos_manual_gpu_clocenabled(bool value) {
  _has_bits_[5] |= 0x00001000u;
  steamos_manual_gpu_clocenabled_ = value;
}
inline void CMsgClientSettings::set_steamos_manual_gpu_clocenabled(bool value) {
  _internal_set_steamos_manual_gpu_clocenabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_manual_gpu_clocenabled)
}

// optional int32 steamos_manual_gpu_clochz = 22009 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOS/ManualGPUClockHz", (.setting_default_int) = 1000, (.setting_profile_mode) = ESettingProfileMode_PerGame];
inline bool CMsgClientSettings::_internal_has_steamos_manual_gpu_clochz() const {
  bool value = (_has_bits_[5] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_steamos_manual_gpu_clochz() const {
  return _internal_has_steamos_manual_gpu_clochz();
}
inline void CMsgClientSettings::clear_steamos_manual_gpu_clochz() {
  steamos_manual_gpu_clochz_ = 0;
  _has_bits_[5] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_steamos_manual_gpu_clochz() const {
  return steamos_manual_gpu_clochz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::steamos_manual_gpu_clochz() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.steamos_manual_gpu_clochz)
  return _internal_steamos_manual_gpu_clochz();
}
inline void CMsgClientSettings::_internal_set_steamos_manual_gpu_clochz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[5] |= 0x00004000u;
  steamos_manual_gpu_clochz_ = value;
}
inline void CMsgClientSettings::set_steamos_manual_gpu_clochz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steamos_manual_gpu_clochz(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.steamos_manual_gpu_clochz)
}

// optional bool setting_validation_bool = 23001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyBool"];
inline bool CMsgClientSettings::_internal_has_setting_validation_bool() const {
  bool value = (_has_bits_[5] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_bool() const {
  return _internal_has_setting_validation_bool();
}
inline void CMsgClientSettings::clear_setting_validation_bool() {
  setting_validation_bool_ = false;
  _has_bits_[5] &= ~0x00100000u;
}
inline bool CMsgClientSettings::_internal_setting_validation_bool() const {
  return setting_validation_bool_;
}
inline bool CMsgClientSettings::setting_validation_bool() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_bool)
  return _internal_setting_validation_bool();
}
inline void CMsgClientSettings::_internal_set_setting_validation_bool(bool value) {
  _has_bits_[5] |= 0x00100000u;
  setting_validation_bool_ = value;
}
inline void CMsgClientSettings::set_setting_validation_bool(bool value) {
  _internal_set_setting_validation_bool(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_bool)
}

// optional .EHDRVisualization setting_validation_enum = 23002 [default = EHDRVisualization_None, (.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyEnum"];
inline bool CMsgClientSettings::_internal_has_setting_validation_enum() const {
  bool value = (_has_bits_[5] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_enum() const {
  return _internal_has_setting_validation_enum();
}
inline void CMsgClientSettings::clear_setting_validation_enum() {
  setting_validation_enum_ = 0;
  _has_bits_[5] &= ~0x00008000u;
}
inline ::EHDRVisualization CMsgClientSettings::_internal_setting_validation_enum() const {
  return static_cast< ::EHDRVisualization >(setting_validation_enum_);
}
inline ::EHDRVisualization CMsgClientSettings::setting_validation_enum() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_enum)
  return _internal_setting_validation_enum();
}
inline void CMsgClientSettings::_internal_set_setting_validation_enum(::EHDRVisualization value) {
  assert(::EHDRVisualization_IsValid(value));
  _has_bits_[5] |= 0x00008000u;
  setting_validation_enum_ = value;
}
inline void CMsgClientSettings::set_setting_validation_enum(::EHDRVisualization value) {
  _internal_set_setting_validation_enum(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_enum)
}

// optional int32 setting_validation_int32 = 23003 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyInt32"];
inline bool CMsgClientSettings::_internal_has_setting_validation_int32() const {
  bool value = (_has_bits_[5] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_int32() const {
  return _internal_has_setting_validation_int32();
}
inline void CMsgClientSettings::clear_setting_validation_int32() {
  setting_validation_int32_ = 0;
  _has_bits_[5] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::_internal_setting_validation_int32() const {
  return setting_validation_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientSettings::setting_validation_int32() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_int32)
  return _internal_setting_validation_int32();
}
inline void CMsgClientSettings::_internal_set_setting_validation_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[5] |= 0x00010000u;
  setting_validation_int32_ = value;
}
inline void CMsgClientSettings::set_setting_validation_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setting_validation_int32(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_int32)
}

// optional uint32 setting_validation_uint32 = 23004 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt32"];
inline bool CMsgClientSettings::_internal_has_setting_validation_uint32() const {
  bool value = (_has_bits_[5] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_uint32() const {
  return _internal_has_setting_validation_uint32();
}
inline void CMsgClientSettings::clear_setting_validation_uint32() {
  setting_validation_uint32_ = 0u;
  _has_bits_[5] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSettings::_internal_setting_validation_uint32() const {
  return setting_validation_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSettings::setting_validation_uint32() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_uint32)
  return _internal_setting_validation_uint32();
}
inline void CMsgClientSettings::_internal_set_setting_validation_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[5] |= 0x00040000u;
  setting_validation_uint32_ = value;
}
inline void CMsgClientSettings::set_setting_validation_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setting_validation_uint32(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_uint32)
}

// optional uint64 setting_validation_uint64 = 23005 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyUInt64"];
inline bool CMsgClientSettings::_internal_has_setting_validation_uint64() const {
  bool value = (_has_bits_[5] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_uint64() const {
  return _internal_has_setting_validation_uint64();
}
inline void CMsgClientSettings::clear_setting_validation_uint64() {
  setting_validation_uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[5] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSettings::_internal_setting_validation_uint64() const {
  return setting_validation_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSettings::setting_validation_uint64() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_uint64)
  return _internal_setting_validation_uint64();
}
inline void CMsgClientSettings::_internal_set_setting_validation_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[5] |= 0x00020000u;
  setting_validation_uint64_ = value;
}
inline void CMsgClientSettings::set_setting_validation_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_setting_validation_uint64(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_uint64)
}

// optional float setting_validation_float = 23006 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyFloat"];
inline bool CMsgClientSettings::_internal_has_setting_validation_float() const {
  bool value = (_has_bits_[5] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_float() const {
  return _internal_has_setting_validation_float();
}
inline void CMsgClientSettings::clear_setting_validation_float() {
  setting_validation_float_ = 0;
  _has_bits_[5] &= ~0x00080000u;
}
inline float CMsgClientSettings::_internal_setting_validation_float() const {
  return setting_validation_float_;
}
inline float CMsgClientSettings::setting_validation_float() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_float)
  return _internal_setting_validation_float();
}
inline void CMsgClientSettings::_internal_set_setting_validation_float(float value) {
  _has_bits_[5] |= 0x00080000u;
  setting_validation_float_ = value;
}
inline void CMsgClientSettings::set_setting_validation_float(float value) {
  _internal_set_setting_validation_float(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_float)
}

// optional string setting_validation_string = 23007 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyString"];
inline bool CMsgClientSettings::_internal_has_setting_validation_string() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_string() const {
  return _internal_has_setting_validation_string();
}
inline void CMsgClientSettings::clear_setting_validation_string() {
  setting_validation_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& CMsgClientSettings::setting_validation_string() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_string)
  return _internal_setting_validation_string();
}
inline void CMsgClientSettings::set_setting_validation_string(const std::string& value) {
  _internal_set_setting_validation_string(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.setting_validation_string)
}
inline std::string* CMsgClientSettings::mutable_setting_validation_string() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.setting_validation_string)
  return _internal_mutable_setting_validation_string();
}
inline const std::string& CMsgClientSettings::_internal_setting_validation_string() const {
  return setting_validation_string_.Get();
}
inline void CMsgClientSettings::_internal_set_setting_validation_string(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  setting_validation_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSettings::set_setting_validation_string(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  setting_validation_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSettings.setting_validation_string)
}
inline void CMsgClientSettings::set_setting_validation_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  setting_validation_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSettings.setting_validation_string)
}
inline void CMsgClientSettings::set_setting_validation_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  setting_validation_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSettings.setting_validation_string)
}
inline std::string* CMsgClientSettings::_internal_mutable_setting_validation_string() {
  _has_bits_[0] |= 0x00002000u;
  return setting_validation_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSettings::release_setting_validation_string() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.setting_validation_string)
  if (!_internal_has_setting_validation_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return setting_validation_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSettings::set_allocated_setting_validation_string(std::string* setting_validation_string) {
  if (setting_validation_string != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  setting_validation_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setting_validation_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.setting_validation_string)
}

// optional .CMsgHotkey setting_validation_hotkey = 23008 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "SettingValidation/DummyHotkey"];
inline bool CMsgClientSettings::_internal_has_setting_validation_hotkey() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || setting_validation_hotkey_ != nullptr);
  return value;
}
inline bool CMsgClientSettings::has_setting_validation_hotkey() const {
  return _internal_has_setting_validation_hotkey();
}
inline void CMsgClientSettings::clear_setting_validation_hotkey() {
  if (setting_validation_hotkey_ != nullptr) setting_validation_hotkey_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::CMsgHotkey& CMsgClientSettings::_internal_setting_validation_hotkey() const {
  const ::CMsgHotkey* p = setting_validation_hotkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHotkey&>(
      ::_CMsgHotkey_default_instance_);
}
inline const ::CMsgHotkey& CMsgClientSettings::setting_validation_hotkey() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.setting_validation_hotkey)
  return _internal_setting_validation_hotkey();
}
inline void CMsgClientSettings::unsafe_arena_set_allocated_setting_validation_hotkey(
    ::CMsgHotkey* setting_validation_hotkey) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setting_validation_hotkey_);
  }
  setting_validation_hotkey_ = setting_validation_hotkey;
  if (setting_validation_hotkey) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientSettings.setting_validation_hotkey)
}
inline ::CMsgHotkey* CMsgClientSettings::release_setting_validation_hotkey() {
  _has_bits_[0] &= ~0x00400000u;
  ::CMsgHotkey* temp = setting_validation_hotkey_;
  setting_validation_hotkey_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::unsafe_arena_release_setting_validation_hotkey() {
  // @@protoc_insertion_point(field_release:CMsgClientSettings.setting_validation_hotkey)
  _has_bits_[0] &= ~0x00400000u;
  ::CMsgHotkey* temp = setting_validation_hotkey_;
  setting_validation_hotkey_ = nullptr;
  return temp;
}
inline ::CMsgHotkey* CMsgClientSettings::_internal_mutable_setting_validation_hotkey() {
  _has_bits_[0] |= 0x00400000u;
  if (setting_validation_hotkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHotkey>(GetArena());
    setting_validation_hotkey_ = p;
  }
  return setting_validation_hotkey_;
}
inline ::CMsgHotkey* CMsgClientSettings::mutable_setting_validation_hotkey() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSettings.setting_validation_hotkey)
  return _internal_mutable_setting_validation_hotkey();
}
inline void CMsgClientSettings::set_allocated_setting_validation_hotkey(::CMsgHotkey* setting_validation_hotkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete setting_validation_hotkey_;
  }
  if (setting_validation_hotkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setting_validation_hotkey);
    if (message_arena != submessage_arena) {
      setting_validation_hotkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting_validation_hotkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  setting_validation_hotkey_ = setting_validation_hotkey;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSettings.setting_validation_hotkey)
}

// optional bool system_bluetooth_enabled = 24000 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/Bluetooth/Enabled", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_system_bluetooth_enabled() const {
  bool value = (_has_bits_[5] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_system_bluetooth_enabled() const {
  return _internal_has_system_bluetooth_enabled();
}
inline void CMsgClientSettings::clear_system_bluetooth_enabled() {
  system_bluetooth_enabled_ = false;
  _has_bits_[5] &= ~0x00200000u;
}
inline bool CMsgClientSettings::_internal_system_bluetooth_enabled() const {
  return system_bluetooth_enabled_;
}
inline bool CMsgClientSettings::system_bluetooth_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.system_bluetooth_enabled)
  return _internal_system_bluetooth_enabled();
}
inline void CMsgClientSettings::_internal_set_system_bluetooth_enabled(bool value) {
  _has_bits_[5] |= 0x00200000u;
  system_bluetooth_enabled_ = value;
}
inline void CMsgClientSettings::set_system_bluetooth_enabled(bool value) {
  _internal_set_system_bluetooth_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.system_bluetooth_enabled)
}

// optional bool hardware_updater_enabled = 24001 [(.setting_store) = EClientSettingStore_ConfigStore_Install, (.setting_name) = "System/HardwareUpdater/Enabled", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_hardware_updater_enabled() const {
  bool value = (_has_bits_[5] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_hardware_updater_enabled() const {
  return _internal_has_hardware_updater_enabled();
}
inline void CMsgClientSettings::clear_hardware_updater_enabled() {
  hardware_updater_enabled_ = false;
  _has_bits_[5] &= ~0x00400000u;
}
inline bool CMsgClientSettings::_internal_hardware_updater_enabled() const {
  return hardware_updater_enabled_;
}
inline bool CMsgClientSettings::hardware_updater_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.hardware_updater_enabled)
  return _internal_hardware_updater_enabled();
}
inline void CMsgClientSettings::_internal_set_hardware_updater_enabled(bool value) {
  _has_bits_[5] |= 0x00400000u;
  hardware_updater_enabled_ = value;
}
inline void CMsgClientSettings::set_hardware_updater_enabled(bool value) {
  _internal_set_hardware_updater_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.hardware_updater_enabled)
}

// optional bool vr_show_perf_graph_in_hmd = 25000 [(.setting_store) = EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "VR/ShowPerfGraphInHMD", (.setting_default_bool) = false];
inline bool CMsgClientSettings::_internal_has_vr_show_perf_graph_in_hmd() const {
  bool value = (_has_bits_[5] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientSettings::has_vr_show_perf_graph_in_hmd() const {
  return _internal_has_vr_show_perf_graph_in_hmd();
}
inline void CMsgClientSettings::clear_vr_show_perf_graph_in_hmd() {
  vr_show_perf_graph_in_hmd_ = false;
  _has_bits_[5] &= ~0x00800000u;
}
inline bool CMsgClientSettings::_internal_vr_show_perf_graph_in_hmd() const {
  return vr_show_perf_graph_in_hmd_;
}
inline bool CMsgClientSettings::vr_show_perf_graph_in_hmd() const {
  // @@protoc_insertion_point(field_get:CMsgClientSettings.vr_show_perf_graph_in_hmd)
  return _internal_vr_show_perf_graph_in_hmd();
}
inline void CMsgClientSettings::_internal_set_vr_show_perf_graph_in_hmd(bool value) {
  _has_bits_[5] |= 0x00800000u;
  vr_show_perf_graph_in_hmd_ = value;
}
inline void CMsgClientSettings::set_vr_show_perf_graph_in_hmd(bool value) {
  _internal_set_vr_show_perf_graph_in_hmd(value);
  // @@protoc_insertion_point(field_set:CMsgClientSettings.vr_show_perf_graph_in_hmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EClientSettingStore> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EClientSettingStore>() {
  return ::EClientSettingStore_descriptor();
}
template <> struct is_proto_enum< ::EOverlayToggleBarLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EOverlayToggleBarLocation>() {
  return ::EOverlayToggleBarLocation_descriptor();
}
template <> struct is_proto_enum< ::ESettingProfileMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESettingProfileMode>() {
  return ::ESettingProfileMode_descriptor();
}
template <> struct is_proto_enum< ::EGRMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGRMode>() {
  return ::EGRMode_descriptor();
}
template <> struct is_proto_enum< ::EGRAudio> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGRAudio>() {
  return ::EGRAudio_descriptor();
}
template <> struct is_proto_enum< ::EGRExportLimitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGRExportLimitType>() {
  return ::EGRExportLimitType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientsettings_2eproto
