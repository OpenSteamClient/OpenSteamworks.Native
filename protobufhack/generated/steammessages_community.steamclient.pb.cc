// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_community.steamclient.proto

#include "steammessages_community.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CCommunity_GetApps_Request::CCommunity_GetApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , language_(0u){}
struct CCommunity_GetApps_RequestDefaultTypeInternal {
  constexpr CCommunity_GetApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetApps_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetApps_RequestDefaultTypeInternal _CCommunity_GetApps_Request_default_instance_;
constexpr CCommunity_GetApps_Response::CCommunity_GetApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_(){}
struct CCommunity_GetApps_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetApps_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetApps_ResponseDefaultTypeInternal _CCommunity_GetApps_Response_default_instance_;
constexpr CCommunity_GetAppRichPresenceLocalization_Request::CCommunity_GetAppRichPresenceLocalization_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0){}
struct CCommunity_GetAppRichPresenceLocalization_RequestDefaultTypeInternal {
  constexpr CCommunity_GetAppRichPresenceLocalization_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAppRichPresenceLocalization_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetAppRichPresenceLocalization_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAppRichPresenceLocalization_RequestDefaultTypeInternal _CCommunity_GetAppRichPresenceLocalization_Request_default_instance_;
constexpr CCommunity_GetAppRichPresenceLocalization_Response_Token::CCommunity_GetAppRichPresenceLocalization_Response_Token(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCommunity_GetAppRichPresenceLocalization_Response_TokenDefaultTypeInternal {
  constexpr CCommunity_GetAppRichPresenceLocalization_Response_TokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAppRichPresenceLocalization_Response_TokenDefaultTypeInternal() {}
  union {
    CCommunity_GetAppRichPresenceLocalization_Response_Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAppRichPresenceLocalization_Response_TokenDefaultTypeInternal _CCommunity_GetAppRichPresenceLocalization_Response_Token_default_instance_;
constexpr CCommunity_GetAppRichPresenceLocalization_Response_TokenList::CCommunity_GetAppRichPresenceLocalization_Response_TokenList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokens_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCommunity_GetAppRichPresenceLocalization_Response_TokenListDefaultTypeInternal {
  constexpr CCommunity_GetAppRichPresenceLocalization_Response_TokenListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAppRichPresenceLocalization_Response_TokenListDefaultTypeInternal() {}
  union {
    CCommunity_GetAppRichPresenceLocalization_Response_TokenList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAppRichPresenceLocalization_Response_TokenListDefaultTypeInternal _CCommunity_GetAppRichPresenceLocalization_Response_TokenList_default_instance_;
constexpr CCommunity_GetAppRichPresenceLocalization_Response::CCommunity_GetAppRichPresenceLocalization_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_lists_()
  , appid_(0){}
struct CCommunity_GetAppRichPresenceLocalization_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetAppRichPresenceLocalization_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAppRichPresenceLocalization_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetAppRichPresenceLocalization_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAppRichPresenceLocalization_ResponseDefaultTypeInternal _CCommunity_GetAppRichPresenceLocalization_Response_default_instance_;
constexpr CCommunity_GetCommentThread_Request::CCommunity_GetCommentThread_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , gidfeature_(PROTOBUF_ULONGLONG(0))
  , gidfeature2_(PROTOBUF_ULONGLONG(0))
  , comment_thread_type_(0)

  , start_(0)
  , commentthreadid_(PROTOBUF_ULONGLONG(0))
  , count_(0)
  , upvoters_(0)
  , gidcomment_(PROTOBUF_ULONGLONG(0))
  , include_deleted_(false)
  , oldest_first_(false)
  , time_oldest_(0u){}
struct CCommunity_GetCommentThread_RequestDefaultTypeInternal {
  constexpr CCommunity_GetCommentThread_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetCommentThread_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetCommentThread_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetCommentThread_RequestDefaultTypeInternal _CCommunity_GetCommentThread_Request_default_instance_;
constexpr CCommunity_Comment_Reaction::CCommunity_Comment_Reaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactionid_(0u)
  , count_(0u){}
struct CCommunity_Comment_ReactionDefaultTypeInternal {
  constexpr CCommunity_Comment_ReactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_Comment_ReactionDefaultTypeInternal() {}
  union {
    CCommunity_Comment_Reaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_Comment_ReactionDefaultTypeInternal _CCommunity_Comment_Reaction_default_instance_;
constexpr CCommunity_Comment::CCommunity_Comment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactions_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipaddress_(nullptr)
  , gidcomment_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , timestamp_(0u)
  , upvotes_(0)
  , hidden_(false)
  , hidden_by_user_(false)
  , deleted_(false)
  , upvoted_by_user_(false)
  , total_hidden_(0)
  , gidparentcomment_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_CommentDefaultTypeInternal {
  constexpr CCommunity_CommentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_CommentDefaultTypeInternal() {}
  union {
    CCommunity_Comment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_CommentDefaultTypeInternal _CCommunity_Comment_default_instance_;
constexpr CCommunity_GetCommentThread_Response::CCommunity_GetCommentThread_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : comments_()
  , deleted_comments_()
  , upvoters_()
  , steamid_(PROTOBUF_ULONGLONG(0))
  , commentthreadid_(PROTOBUF_ULONGLONG(0))
  , start_(0)
  , count_(0)
  , total_count_(0)
  , upvotes_(0)
  , answer_commentid_(PROTOBUF_ULONGLONG(0))
  , user_subscribed_(false)
  , user_upvoted_(false)
  , can_post_(false)
  , answer_actor_(0u)
  , answer_actor_rank_(0)
  , comment_thread_type_(0u)
  , gidfeature_(PROTOBUF_ULONGLONG(0))
  , gidfeature2_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetCommentThread_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetCommentThread_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetCommentThread_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetCommentThread_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetCommentThread_ResponseDefaultTypeInternal _CCommunity_GetCommentThread_Response_default_instance_;
constexpr CCommunity_PostCommentToThread_Request::CCommunity_PostCommentToThread_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , gidfeature_(PROTOBUF_ULONGLONG(0))
  , gidfeature2_(PROTOBUF_ULONGLONG(0))
  , gidparentcomment_(PROTOBUF_ULONGLONG(0))
  , comment_thread_type_(0)

  , suppress_notifications_(false)
  , is_report_(false)
  , start_hidden_(false){}
struct CCommunity_PostCommentToThread_RequestDefaultTypeInternal {
  constexpr CCommunity_PostCommentToThread_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PostCommentToThread_RequestDefaultTypeInternal() {}
  union {
    CCommunity_PostCommentToThread_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PostCommentToThread_RequestDefaultTypeInternal _CCommunity_PostCommentToThread_Request_default_instance_;
constexpr CCommunity_PostCommentToThread_Response::CCommunity_PostCommentToThread_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gidcomment_(PROTOBUF_ULONGLONG(0))
  , commentthreadid_(PROTOBUF_ULONGLONG(0))
  , count_(0)
  , upvotes_(0){}
struct CCommunity_PostCommentToThread_ResponseDefaultTypeInternal {
  constexpr CCommunity_PostCommentToThread_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PostCommentToThread_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_PostCommentToThread_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PostCommentToThread_ResponseDefaultTypeInternal _CCommunity_PostCommentToThread_Response_default_instance_;
constexpr CCommunity_DeleteCommentFromThread_Request::CCommunity_DeleteCommentFromThread_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , gidfeature_(PROTOBUF_ULONGLONG(0))
  , gidfeature2_(PROTOBUF_ULONGLONG(0))
  , comment_thread_type_(0)

  , undelete_(false)
  , gidcomment_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_DeleteCommentFromThread_RequestDefaultTypeInternal {
  constexpr CCommunity_DeleteCommentFromThread_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_DeleteCommentFromThread_RequestDefaultTypeInternal() {}
  union {
    CCommunity_DeleteCommentFromThread_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_DeleteCommentFromThread_RequestDefaultTypeInternal _CCommunity_DeleteCommentFromThread_Request_default_instance_;
constexpr CCommunity_DeleteCommentFromThread_Response::CCommunity_DeleteCommentFromThread_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_DeleteCommentFromThread_ResponseDefaultTypeInternal {
  constexpr CCommunity_DeleteCommentFromThread_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_DeleteCommentFromThread_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_DeleteCommentFromThread_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_DeleteCommentFromThread_ResponseDefaultTypeInternal _CCommunity_DeleteCommentFromThread_Response_default_instance_;
constexpr CCommunity_RateCommentThread_Request::CCommunity_RateCommentThread_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commentthreadtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , gidfeature_(PROTOBUF_ULONGLONG(0))
  , gidfeature2_(PROTOBUF_ULONGLONG(0))
  , gidcomment_(PROTOBUF_ULONGLONG(0))
  , rate_up_(false)
  , suppress_notifications_(false){}
struct CCommunity_RateCommentThread_RequestDefaultTypeInternal {
  constexpr CCommunity_RateCommentThread_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_RateCommentThread_RequestDefaultTypeInternal() {}
  union {
    CCommunity_RateCommentThread_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_RateCommentThread_RequestDefaultTypeInternal _CCommunity_RateCommentThread_Request_default_instance_;
constexpr CCommunity_RateCommentThread_Response::CCommunity_RateCommentThread_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gidcomment_(PROTOBUF_ULONGLONG(0))
  , commentthreadid_(PROTOBUF_ULONGLONG(0))
  , count_(0u)
  , upvotes_(0u)
  , has_upvoted_(false){}
struct CCommunity_RateCommentThread_ResponseDefaultTypeInternal {
  constexpr CCommunity_RateCommentThread_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_RateCommentThread_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_RateCommentThread_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_RateCommentThread_ResponseDefaultTypeInternal _CCommunity_RateCommentThread_Response_default_instance_;
constexpr CCommunity_GetCommentThreadRatings_Request::CCommunity_GetCommentThreadRatings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commentthreadtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , gidfeature_(PROTOBUF_ULONGLONG(0))
  , gidfeature2_(PROTOBUF_ULONGLONG(0))
  , gidcomment_(PROTOBUF_ULONGLONG(0))
  , max_results_(0u){}
struct CCommunity_GetCommentThreadRatings_RequestDefaultTypeInternal {
  constexpr CCommunity_GetCommentThreadRatings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetCommentThreadRatings_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetCommentThreadRatings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetCommentThreadRatings_RequestDefaultTypeInternal _CCommunity_GetCommentThreadRatings_Request_default_instance_;
constexpr CCommunity_GetCommentThreadRatings_Response::CCommunity_GetCommentThreadRatings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upvoter_accountids_()
  , commentthreadid_(PROTOBUF_ULONGLONG(0))
  , gidcomment_(PROTOBUF_ULONGLONG(0))
  , upvotes_(0u)
  , has_upvoted_(false){}
struct CCommunity_GetCommentThreadRatings_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetCommentThreadRatings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetCommentThreadRatings_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetCommentThreadRatings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetCommentThreadRatings_ResponseDefaultTypeInternal _CCommunity_GetCommentThreadRatings_Response_default_instance_;
constexpr CCommunity_RateClanAnnouncement_Request::CCommunity_RateClanAnnouncement_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcementid_(PROTOBUF_ULONGLONG(0))
  , vote_up_(false)
  , clan_accountid_(0u){}
struct CCommunity_RateClanAnnouncement_RequestDefaultTypeInternal {
  constexpr CCommunity_RateClanAnnouncement_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_RateClanAnnouncement_RequestDefaultTypeInternal() {}
  union {
    CCommunity_RateClanAnnouncement_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_RateClanAnnouncement_RequestDefaultTypeInternal _CCommunity_RateClanAnnouncement_Request_default_instance_;
constexpr CCommunity_RateClanAnnouncement_Response::CCommunity_RateClanAnnouncement_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_RateClanAnnouncement_ResponseDefaultTypeInternal {
  constexpr CCommunity_RateClanAnnouncement_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_RateClanAnnouncement_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_RateClanAnnouncement_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_RateClanAnnouncement_ResponseDefaultTypeInternal _CCommunity_RateClanAnnouncement_Response_default_instance_;
constexpr CCommunity_GetClanAnnouncementVoteForUser_Request::CCommunity_GetClanAnnouncementVoteForUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcementid_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetClanAnnouncementVoteForUser_RequestDefaultTypeInternal {
  constexpr CCommunity_GetClanAnnouncementVoteForUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanAnnouncementVoteForUser_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetClanAnnouncementVoteForUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanAnnouncementVoteForUser_RequestDefaultTypeInternal _CCommunity_GetClanAnnouncementVoteForUser_Request_default_instance_;
constexpr CCommunity_GetClanAnnouncementVoteForUser_Response::CCommunity_GetClanAnnouncementVoteForUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voted_up_(false)
  , voted_down_(false){}
struct CCommunity_GetClanAnnouncementVoteForUser_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetClanAnnouncementVoteForUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanAnnouncementVoteForUser_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetClanAnnouncementVoteForUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanAnnouncementVoteForUser_ResponseDefaultTypeInternal _CCommunity_GetClanAnnouncementVoteForUser_Response_default_instance_;
constexpr CCommunity_GetAvatarHistory_Request::CCommunity_GetAvatarHistory_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , filter_user_uploaded_only_(false){}
struct CCommunity_GetAvatarHistory_RequestDefaultTypeInternal {
  constexpr CCommunity_GetAvatarHistory_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAvatarHistory_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetAvatarHistory_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAvatarHistory_RequestDefaultTypeInternal _CCommunity_GetAvatarHistory_Request_default_instance_;
constexpr CCommunity_GetAvatarHistory_Response_AvatarData::CCommunity_GetAvatarHistory_Response_AvatarData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_sha1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_uploaded_(false)
  , timestamp_(0u){}
struct CCommunity_GetAvatarHistory_Response_AvatarDataDefaultTypeInternal {
  constexpr CCommunity_GetAvatarHistory_Response_AvatarDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAvatarHistory_Response_AvatarDataDefaultTypeInternal() {}
  union {
    CCommunity_GetAvatarHistory_Response_AvatarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAvatarHistory_Response_AvatarDataDefaultTypeInternal _CCommunity_GetAvatarHistory_Response_AvatarData_default_instance_;
constexpr CCommunity_GetAvatarHistory_Response::CCommunity_GetAvatarHistory_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatars_(){}
struct CCommunity_GetAvatarHistory_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetAvatarHistory_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetAvatarHistory_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetAvatarHistory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetAvatarHistory_ResponseDefaultTypeInternal _CCommunity_GetAvatarHistory_Response_default_instance_;
constexpr CCommunity_GetClanEventCrowdInMetadata_Request::CCommunity_GetClanEventCrowdInMetadata_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , itemid_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetClanEventCrowdInMetadata_RequestDefaultTypeInternal {
  constexpr CCommunity_GetClanEventCrowdInMetadata_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanEventCrowdInMetadata_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetClanEventCrowdInMetadata_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanEventCrowdInMetadata_RequestDefaultTypeInternal _CCommunity_GetClanEventCrowdInMetadata_Request_default_instance_;
constexpr CCommunity_GetClanEventCrowdInMetadata_Response::CCommunity_GetClanEventCrowdInMetadata_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crowdin_project_id_(PROTOBUF_ULONGLONG(0))
  , crowdin_file_id_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetClanEventCrowdInMetadata_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetClanEventCrowdInMetadata_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanEventCrowdInMetadata_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetClanEventCrowdInMetadata_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanEventCrowdInMetadata_ResponseDefaultTypeInternal _CCommunity_GetClanEventCrowdInMetadata_Response_default_instance_;
constexpr CCommunity_GetClanCrowdInMetadata_Request::CCommunity_GetClanCrowdInMetadata_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetClanCrowdInMetadata_RequestDefaultTypeInternal {
  constexpr CCommunity_GetClanCrowdInMetadata_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanCrowdInMetadata_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetClanCrowdInMetadata_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanCrowdInMetadata_RequestDefaultTypeInternal _CCommunity_GetClanCrowdInMetadata_Request_default_instance_;
constexpr CCommunity_GetClanCrowdInMetadata_Response::CCommunity_GetClanCrowdInMetadata_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crowdin_project_id_(PROTOBUF_ULONGLONG(0))
  , crowdin_directory_id_(PROTOBUF_ULONGLONG(0))
  , push_by_default_(false){}
struct CCommunity_GetClanCrowdInMetadata_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetClanCrowdInMetadata_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanCrowdInMetadata_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetClanCrowdInMetadata_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanCrowdInMetadata_ResponseDefaultTypeInternal _CCommunity_GetClanCrowdInMetadata_Response_default_instance_;
constexpr CCommunity_FetchTranslationFromCrowdIn_Request::CCommunity_FetchTranslationFromCrowdIn_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , itemid_(PROTOBUF_ULONGLONG(0))
  , language_(0u){}
struct CCommunity_FetchTranslationFromCrowdIn_RequestDefaultTypeInternal {
  constexpr CCommunity_FetchTranslationFromCrowdIn_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_FetchTranslationFromCrowdIn_RequestDefaultTypeInternal() {}
  union {
    CCommunity_FetchTranslationFromCrowdIn_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_FetchTranslationFromCrowdIn_RequestDefaultTypeInternal _CCommunity_FetchTranslationFromCrowdIn_Request_default_instance_;
constexpr CCommunity_FetchTranslationFromCrowdIn_Response::CCommunity_FetchTranslationFromCrowdIn_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_FetchTranslationFromCrowdIn_ResponseDefaultTypeInternal {
  constexpr CCommunity_FetchTranslationFromCrowdIn_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_FetchTranslationFromCrowdIn_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_FetchTranslationFromCrowdIn_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_FetchTranslationFromCrowdIn_ResponseDefaultTypeInternal _CCommunity_FetchTranslationFromCrowdIn_Response_default_instance_;
constexpr CAppPriority::CAppPriority(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_()
  , priority_(0u){}
struct CAppPriorityDefaultTypeInternal {
  constexpr CAppPriorityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAppPriorityDefaultTypeInternal() {}
  union {
    CAppPriority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAppPriorityDefaultTypeInternal _CAppPriority_default_instance_;
constexpr CCommunity_GetUserPartnerEventNews_Request::CCommunity_GetUserPartnerEventNews_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_preference_()
  , filter_event_type_()
  , app_list_()
  , count_(0u)
  , offset_(0u)
  , rtime32_start_time_(0u)
  , rtime32_end_time_(0u)
  , filter_to_appid_(false)
  , count_after_(0u)
  , count_before_(0u){}
struct CCommunity_GetUserPartnerEventNews_RequestDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventNews_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventNews_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventNews_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventNews_RequestDefaultTypeInternal _CCommunity_GetUserPartnerEventNews_Request_default_instance_;
constexpr CCommunity_GetUserPartnerEventNews_Response::CCommunity_GetUserPartnerEventNews_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CCommunity_GetUserPartnerEventNews_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventNews_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventNews_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventNews_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventNews_ResponseDefaultTypeInternal _CCommunity_GetUserPartnerEventNews_Response_default_instance_;
constexpr CCommunity_GetBestEventsForUser_Request::CCommunity_GetBestEventsForUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_to_played_within_days_(0u)
  , include_steam_blog_(false)
  , include_only_game_updates_(false){}
struct CCommunity_GetBestEventsForUser_RequestDefaultTypeInternal {
  constexpr CCommunity_GetBestEventsForUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetBestEventsForUser_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetBestEventsForUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetBestEventsForUser_RequestDefaultTypeInternal _CCommunity_GetBestEventsForUser_Request_default_instance_;
constexpr CCommunity_PartnerEventResult::CCommunity_PartnerEventResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_gid_(PROTOBUF_ULONGLONG(0))
  , clanid_(0u)
  , appid_(0u)
  , announcement_gid_(PROTOBUF_ULONGLONG(0))
  , possible_takeover_(false)
  , rtime32_last_modified_(0u)
  , user_app_priority_(0){}
struct CCommunity_PartnerEventResultDefaultTypeInternal {
  constexpr CCommunity_PartnerEventResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PartnerEventResultDefaultTypeInternal() {}
  union {
    CCommunity_PartnerEventResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PartnerEventResultDefaultTypeInternal _CCommunity_PartnerEventResult_default_instance_;
constexpr CCommunity_GetBestEventsForUser_Response::CCommunity_GetBestEventsForUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CCommunity_GetBestEventsForUser_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetBestEventsForUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetBestEventsForUser_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetBestEventsForUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetBestEventsForUser_ResponseDefaultTypeInternal _CCommunity_GetBestEventsForUser_Response_default_instance_;
constexpr CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_gid_(PROTOBUF_ULONGLONG(0))
  , clanid_(0u)
  , display_location_(0)

  , marshown_(false)
  , marread_(false){}
struct CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarkingDefaultTypeInternal {
  constexpr CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarkingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarkingDefaultTypeInternal() {}
  union {
    CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarkingDefaultTypeInternal _CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking_default_instance_;
constexpr CCommunity_MarkPartnerEventsForUser_Request::CCommunity_MarkPartnerEventsForUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : markings_(){}
struct CCommunity_MarkPartnerEventsForUser_RequestDefaultTypeInternal {
  constexpr CCommunity_MarkPartnerEventsForUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_MarkPartnerEventsForUser_RequestDefaultTypeInternal() {}
  union {
    CCommunity_MarkPartnerEventsForUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_MarkPartnerEventsForUser_RequestDefaultTypeInternal _CCommunity_MarkPartnerEventsForUser_Request_default_instance_;
constexpr CCommunity_MarkPartnerEventsForUser_Response::CCommunity_MarkPartnerEventsForUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_MarkPartnerEventsForUser_ResponseDefaultTypeInternal {
  constexpr CCommunity_MarkPartnerEventsForUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_MarkPartnerEventsForUser_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_MarkPartnerEventsForUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_MarkPartnerEventsForUser_ResponseDefaultTypeInternal _CCommunity_MarkPartnerEventsForUser_Response_default_instance_;
constexpr CCommunity_GetUserPartnerEventViewStatus_Request::CCommunity_GetUserPartnerEventViewStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_gids_()
  , include_read_events_only_(false){}
struct CCommunity_GetUserPartnerEventViewStatus_RequestDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventViewStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventViewStatus_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventViewStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventViewStatus_RequestDefaultTypeInternal _CCommunity_GetUserPartnerEventViewStatus_Request_default_instance_;
constexpr CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_gid_(PROTOBUF_ULONGLONG(0))
  , last_shown_time_(0u)
  , last_read_time_(0u)
  , clan_account_id_(0u){}
struct CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEventDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEventDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEventDefaultTypeInternal _CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent_default_instance_;
constexpr CCommunity_GetUserPartnerEventViewStatus_Response::CCommunity_GetUserPartnerEventViewStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct CCommunity_GetUserPartnerEventViewStatus_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventViewStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventViewStatus_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventViewStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventViewStatus_ResponseDefaultTypeInternal _CCommunity_GetUserPartnerEventViewStatus_Response_default_instance_;
constexpr CCommunity_PartnerEventsShowMoreForApp_Request::CCommunity_PartnerEventsShowMoreForApp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CCommunity_PartnerEventsShowMoreForApp_RequestDefaultTypeInternal {
  constexpr CCommunity_PartnerEventsShowMoreForApp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PartnerEventsShowMoreForApp_RequestDefaultTypeInternal() {}
  union {
    CCommunity_PartnerEventsShowMoreForApp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PartnerEventsShowMoreForApp_RequestDefaultTypeInternal _CCommunity_PartnerEventsShowMoreForApp_Request_default_instance_;
constexpr CCommunity_PartnerEventsShowMoreForApp_Response::CCommunity_PartnerEventsShowMoreForApp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_PartnerEventsShowMoreForApp_ResponseDefaultTypeInternal {
  constexpr CCommunity_PartnerEventsShowMoreForApp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PartnerEventsShowMoreForApp_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_PartnerEventsShowMoreForApp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PartnerEventsShowMoreForApp_ResponseDefaultTypeInternal _CCommunity_PartnerEventsShowMoreForApp_Response_default_instance_;
constexpr CCommunity_PartnerEventsShowLessForApp_Request::CCommunity_PartnerEventsShowLessForApp_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CCommunity_PartnerEventsShowLessForApp_RequestDefaultTypeInternal {
  constexpr CCommunity_PartnerEventsShowLessForApp_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PartnerEventsShowLessForApp_RequestDefaultTypeInternal() {}
  union {
    CCommunity_PartnerEventsShowLessForApp_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PartnerEventsShowLessForApp_RequestDefaultTypeInternal _CCommunity_PartnerEventsShowLessForApp_Request_default_instance_;
constexpr CCommunity_PartnerEventsShowLessForApp_Response::CCommunity_PartnerEventsShowLessForApp_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_PartnerEventsShowLessForApp_ResponseDefaultTypeInternal {
  constexpr CCommunity_PartnerEventsShowLessForApp_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PartnerEventsShowLessForApp_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_PartnerEventsShowLessForApp_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PartnerEventsShowLessForApp_ResponseDefaultTypeInternal _CCommunity_PartnerEventsShowLessForApp_Response_default_instance_;
constexpr CCommunity_ClearUserPartnerEventsAppPriorities_Request::CCommunity_ClearUserPartnerEventsAppPriorities_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_ClearUserPartnerEventsAppPriorities_RequestDefaultTypeInternal {
  constexpr CCommunity_ClearUserPartnerEventsAppPriorities_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_ClearUserPartnerEventsAppPriorities_RequestDefaultTypeInternal() {}
  union {
    CCommunity_ClearUserPartnerEventsAppPriorities_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_ClearUserPartnerEventsAppPriorities_RequestDefaultTypeInternal _CCommunity_ClearUserPartnerEventsAppPriorities_Request_default_instance_;
constexpr CCommunity_ClearUserPartnerEventsAppPriorities_Response::CCommunity_ClearUserPartnerEventsAppPriorities_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_ClearUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal {
  constexpr CCommunity_ClearUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_ClearUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_ClearUserPartnerEventsAppPriorities_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_ClearUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal _CCommunity_ClearUserPartnerEventsAppPriorities_Response_default_instance_;
constexpr CCommunity_GetUserPartnerEventsAppPriorities_Request::CCommunity_GetUserPartnerEventsAppPriorities_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_GetUserPartnerEventsAppPriorities_RequestDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventsAppPriorities_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventsAppPriorities_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventsAppPriorities_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventsAppPriorities_RequestDefaultTypeInternal _CCommunity_GetUserPartnerEventsAppPriorities_Request_default_instance_;
constexpr CCommunity_PartnerEventsAppPriority::CCommunity_PartnerEventsAppPriority(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , user_app_priority_(0){}
struct CCommunity_PartnerEventsAppPriorityDefaultTypeInternal {
  constexpr CCommunity_PartnerEventsAppPriorityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_PartnerEventsAppPriorityDefaultTypeInternal() {}
  union {
    CCommunity_PartnerEventsAppPriority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_PartnerEventsAppPriorityDefaultTypeInternal _CCommunity_PartnerEventsAppPriority_default_instance_;
constexpr CCommunity_GetUserPartnerEventsAppPriorities_Response::CCommunity_GetUserPartnerEventsAppPriorities_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : priorities_(){}
struct CCommunity_GetUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetUserPartnerEventsAppPriorities_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetUserPartnerEventsAppPriorities_ResponseDefaultTypeInternal _CCommunity_GetUserPartnerEventsAppPriorities_Response_default_instance_;
constexpr CCommunity_ClearSinglePartnerEventsAppPriority_Request::CCommunity_ClearSinglePartnerEventsAppPriority_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CCommunity_ClearSinglePartnerEventsAppPriority_RequestDefaultTypeInternal {
  constexpr CCommunity_ClearSinglePartnerEventsAppPriority_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_ClearSinglePartnerEventsAppPriority_RequestDefaultTypeInternal() {}
  union {
    CCommunity_ClearSinglePartnerEventsAppPriority_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_ClearSinglePartnerEventsAppPriority_RequestDefaultTypeInternal _CCommunity_ClearSinglePartnerEventsAppPriority_Request_default_instance_;
constexpr CCommunity_ClearSinglePartnerEventsAppPriority_Response::CCommunity_ClearSinglePartnerEventsAppPriority_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCommunity_ClearSinglePartnerEventsAppPriority_ResponseDefaultTypeInternal {
  constexpr CCommunity_ClearSinglePartnerEventsAppPriority_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_ClearSinglePartnerEventsAppPriority_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_ClearSinglePartnerEventsAppPriority_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_ClearSinglePartnerEventsAppPriority_ResponseDefaultTypeInternal _CCommunity_ClearSinglePartnerEventsAppPriority_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fcommunity_2esteamclient_2eproto[54];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fcommunity_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fcommunity_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fcommunity_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetApps_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetApps_Request, appids_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetApps_Request, language_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetApps_Response, apps_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_Token, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_Token, name_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_Token, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_TokenList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_TokenList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_TokenList, language_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response_TokenList, tokens_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response, appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAppRichPresenceLocalization_Response, token_lists_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, comment_thread_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, gidfeature_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, gidfeature2_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, commentthreadid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, start_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, upvoters_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, include_deleted_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, time_oldest_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Request, oldest_first_),
  0,
  3,
  1,
  2,
  5,
  4,
  6,
  7,
  9,
  8,
  11,
  10,
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment_Reaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment_Reaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment_Reaction, reactionid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment_Reaction, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, text_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, upvotes_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, hidden_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, hidden_by_user_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, deleted_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, total_hidden_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, upvoted_by_user_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, reactions_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_Comment, gidparentcomment_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  1,
  10,
  9,
  ~0u,
  11,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, comments_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, deleted_comments_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, commentthreadid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, start_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, total_count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, upvotes_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, upvoters_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, user_subscribed_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, user_upvoted_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, answer_commentid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, answer_actor_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, answer_actor_rank_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, can_post_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, comment_thread_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, gidfeature_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThread_Response, gidfeature2_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  7,
  8,
  6,
  10,
  11,
  9,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, comment_thread_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, gidfeature_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, gidfeature2_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, text_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, gidparentcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, suppress_notifications_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, is_report_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Request, start_hidden_),
  1,
  5,
  2,
  3,
  0,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Response, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Response, commentthreadid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Response, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PostCommentToThread_Response, upvotes_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, comment_thread_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, gidfeature_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, gidfeature2_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Request, undelete_),
  0,
  3,
  1,
  2,
  5,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_DeleteCommentFromThread_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, commentthreadtype_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, gidfeature_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, gidfeature2_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, rate_up_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Request, suppress_notifications_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, commentthreadid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, upvotes_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateCommentThread_Response, has_upvoted_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, commentthreadtype_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, gidfeature_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, gidfeature2_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Request, max_results_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, commentthreadid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, gidcomment_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, upvotes_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, has_upvoted_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetCommentThreadRatings_Response, upvoter_accountids_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateClanAnnouncement_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateClanAnnouncement_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateClanAnnouncement_Request, announcementid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateClanAnnouncement_Request, vote_up_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateClanAnnouncement_Request, clan_accountid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_RateClanAnnouncement_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Request, announcementid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Response, voted_up_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncementVoteForUser_Response, voted_down_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Request, filter_user_uploaded_only_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response_AvatarData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response_AvatarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response_AvatarData, avatar_sha1_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response_AvatarData, user_uploaded_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response_AvatarData, timestamp_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetAvatarHistory_Response, avatars_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Request, itemid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Response, crowdin_project_id_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanEventCrowdInMetadata_Response, crowdin_file_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Response, crowdin_project_id_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Response, crowdin_directory_id_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanCrowdInMetadata_Response, push_by_default_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCommunity_FetchTranslationFromCrowdIn_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_FetchTranslationFromCrowdIn_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_FetchTranslationFromCrowdIn_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_FetchTranslationFromCrowdIn_Request, itemid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_FetchTranslationFromCrowdIn_Request, language_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_FetchTranslationFromCrowdIn_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAppPriority, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAppPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAppPriority, priority_),
  PROTOBUF_FIELD_OFFSET(::CAppPriority, appid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, offset_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, rtime32_start_time_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, rtime32_end_time_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, language_preference_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, filter_event_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, filter_to_appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, app_list_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, count_after_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Request, count_before_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  ~0u,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventNews_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Request, include_steam_blog_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Request, filter_to_played_within_days_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Request, include_only_game_updates_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, clanid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, event_gid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, announcement_gid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, possible_takeover_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, rtime32_last_modified_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventResult, user_app_priority_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetBestEventsForUser_Response, results_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, clanid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, event_gid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, display_location_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, marshown_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, marread_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Request, markings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_MarkPartnerEventsForUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Request, event_gids_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Request, include_read_events_only_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, event_gid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, last_shown_time_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, last_read_time_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, clan_account_id_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventViewStatus_Response, events_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowMoreForApp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowMoreForApp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowMoreForApp_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowMoreForApp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowLessForApp_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowLessForApp_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowLessForApp_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsShowLessForApp_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_ClearUserPartnerEventsAppPriorities_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_ClearUserPartnerEventsAppPriorities_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventsAppPriorities_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsAppPriority, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsAppPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsAppPriority, appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_PartnerEventsAppPriority, user_app_priority_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventsAppPriorities_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetUserPartnerEventsAppPriorities_Response, priorities_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_ClearSinglePartnerEventsAppPriority_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_ClearSinglePartnerEventsAppPriority_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_ClearSinglePartnerEventsAppPriority_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_ClearSinglePartnerEventsAppPriority_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CCommunity_GetApps_Request)},
  { 9, -1, sizeof(::CCommunity_GetApps_Response)},
  { 15, 22, sizeof(::CCommunity_GetAppRichPresenceLocalization_Request)},
  { 24, 31, sizeof(::CCommunity_GetAppRichPresenceLocalization_Response_Token)},
  { 33, 40, sizeof(::CCommunity_GetAppRichPresenceLocalization_Response_TokenList)},
  { 42, 49, sizeof(::CCommunity_GetAppRichPresenceLocalization_Response)},
  { 51, 68, sizeof(::CCommunity_GetCommentThread_Request)},
  { 80, 87, sizeof(::CCommunity_Comment_Reaction)},
  { 89, 107, sizeof(::CCommunity_Comment)},
  { 120, 143, sizeof(::CCommunity_GetCommentThread_Response)},
  { 161, 175, sizeof(::CCommunity_PostCommentToThread_Request)},
  { 184, 193, sizeof(::CCommunity_PostCommentToThread_Response)},
  { 197, 208, sizeof(::CCommunity_DeleteCommentFromThread_Request)},
  { 214, -1, sizeof(::CCommunity_DeleteCommentFromThread_Response)},
  { 219, 231, sizeof(::CCommunity_RateCommentThread_Request)},
  { 238, 248, sizeof(::CCommunity_RateCommentThread_Response)},
  { 253, 264, sizeof(::CCommunity_GetCommentThreadRatings_Request)},
  { 270, 280, sizeof(::CCommunity_GetCommentThreadRatings_Response)},
  { 285, 293, sizeof(::CCommunity_RateClanAnnouncement_Request)},
  { 296, -1, sizeof(::CCommunity_RateClanAnnouncement_Response)},
  { 301, 307, sizeof(::CCommunity_GetClanAnnouncementVoteForUser_Request)},
  { 308, 315, sizeof(::CCommunity_GetClanAnnouncementVoteForUser_Response)},
  { 317, 324, sizeof(::CCommunity_GetAvatarHistory_Request)},
  { 326, 334, sizeof(::CCommunity_GetAvatarHistory_Response_AvatarData)},
  { 337, -1, sizeof(::CCommunity_GetAvatarHistory_Response)},
  { 343, 350, sizeof(::CCommunity_GetClanEventCrowdInMetadata_Request)},
  { 352, 359, sizeof(::CCommunity_GetClanEventCrowdInMetadata_Response)},
  { 361, 367, sizeof(::CCommunity_GetClanCrowdInMetadata_Request)},
  { 368, 376, sizeof(::CCommunity_GetClanCrowdInMetadata_Response)},
  { 379, 387, sizeof(::CCommunity_FetchTranslationFromCrowdIn_Request)},
  { 390, -1, sizeof(::CCommunity_FetchTranslationFromCrowdIn_Response)},
  { 395, 402, sizeof(::CAppPriority)},
  { 404, 419, sizeof(::CCommunity_GetUserPartnerEventNews_Request)},
  { 429, -1, sizeof(::CCommunity_GetUserPartnerEventNews_Response)},
  { 435, 443, sizeof(::CCommunity_GetBestEventsForUser_Request)},
  { 446, 458, sizeof(::CCommunity_PartnerEventResult)},
  { 465, -1, sizeof(::CCommunity_GetBestEventsForUser_Response)},
  { 471, 481, sizeof(::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking)},
  { 486, -1, sizeof(::CCommunity_MarkPartnerEventsForUser_Request)},
  { 492, -1, sizeof(::CCommunity_MarkPartnerEventsForUser_Response)},
  { 497, 504, sizeof(::CCommunity_GetUserPartnerEventViewStatus_Request)},
  { 506, 515, sizeof(::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent)},
  { 519, -1, sizeof(::CCommunity_GetUserPartnerEventViewStatus_Response)},
  { 525, 531, sizeof(::CCommunity_PartnerEventsShowMoreForApp_Request)},
  { 532, -1, sizeof(::CCommunity_PartnerEventsShowMoreForApp_Response)},
  { 537, 543, sizeof(::CCommunity_PartnerEventsShowLessForApp_Request)},
  { 544, -1, sizeof(::CCommunity_PartnerEventsShowLessForApp_Response)},
  { 549, -1, sizeof(::CCommunity_ClearUserPartnerEventsAppPriorities_Request)},
  { 554, -1, sizeof(::CCommunity_ClearUserPartnerEventsAppPriorities_Response)},
  { 559, -1, sizeof(::CCommunity_GetUserPartnerEventsAppPriorities_Request)},
  { 564, 571, sizeof(::CCommunity_PartnerEventsAppPriority)},
  { 573, -1, sizeof(::CCommunity_GetUserPartnerEventsAppPriorities_Response)},
  { 579, 585, sizeof(::CCommunity_ClearSinglePartnerEventsAppPriority_Request)},
  { 586, -1, sizeof(::CCommunity_ClearSinglePartnerEventsAppPriority_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAppRichPresenceLocalization_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAppRichPresenceLocalization_Response_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAppRichPresenceLocalization_Response_TokenList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAppRichPresenceLocalization_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetCommentThread_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_Comment_Reaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_Comment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetCommentThread_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PostCommentToThread_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PostCommentToThread_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_DeleteCommentFromThread_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_DeleteCommentFromThread_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_RateCommentThread_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_RateCommentThread_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetCommentThreadRatings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetCommentThreadRatings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_RateClanAnnouncement_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_RateClanAnnouncement_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanAnnouncementVoteForUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanAnnouncementVoteForUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAvatarHistory_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAvatarHistory_Response_AvatarData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetAvatarHistory_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanEventCrowdInMetadata_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanEventCrowdInMetadata_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanCrowdInMetadata_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanCrowdInMetadata_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_FetchTranslationFromCrowdIn_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_FetchTranslationFromCrowdIn_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAppPriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventNews_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventNews_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetBestEventsForUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PartnerEventResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetBestEventsForUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_MarkPartnerEventsForUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_MarkPartnerEventsForUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventViewStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventViewStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PartnerEventsShowMoreForApp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PartnerEventsShowMoreForApp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PartnerEventsShowLessForApp_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PartnerEventsShowLessForApp_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_ClearUserPartnerEventsAppPriorities_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_ClearUserPartnerEventsAppPriorities_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventsAppPriorities_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_PartnerEventsAppPriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetUserPartnerEventsAppPriorities_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_ClearSinglePartnerEventsAppPriority_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_ClearSinglePartnerEventsAppPriority_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fcommunity_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)steammessages_community.steamclient.pr"
  "oto\032 google/protobuf/descriptor.proto\032\030s"
  "teammessages_base.proto\032,steammessages_u"
  "nified_base.steamclient.proto\032\013enums.pro"
  "to\">\n\032CCommunity_GetApps_Request\022\016\n\006appi"
  "ds\030\001 \003(\005\022\020\n\010language\030\002 \001(\r\"B\n\033CCommunity"
  "_GetApps_Response\022#\n\004apps\030\001 \003(\0132\025.CCDDBA"
  "ppDetailCommon\"T\n1CCommunity_GetAppRichP"
  "resenceLocalization_Request\022\r\n\005appid\030\001 \001"
  "(\005\022\020\n\010language\030\002 \001(\t\"\247\002\n2CCommunity_GetA"
  "ppRichPresenceLocalization_Response\022\r\n\005a"
  "ppid\030\001 \001(\005\022R\n\013token_lists\030\002 \003(\0132=.CCommu"
  "nity_GetAppRichPresenceLocalization_Resp"
  "onse.TokenList\032$\n\005Token\022\014\n\004name\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t\032h\n\tTokenList\022\020\n\010language\030\001 "
  "\001(\t\022I\n\006tokens\030\002 \003(\01329.CCommunity_GetAppR"
  "ichPresenceLocalization_Response.Token\"\315"
  "\002\n#CCommunity_GetCommentThread_Request\022\017"
  "\n\007steamid\030\001 \001(\006\022K\n\023comment_thread_type\030\002"
  " \001(\0162\023.ECommentThreadType:\031ECommentThrea"
  "dTypeInvalid\022\022\n\ngidfeature\030\003 \001(\006\022\023\n\013gidf"
  "eature2\030\004 \001(\006\022\027\n\017commentthreadid\030\005 \001(\006\022\r"
  "\n\005start\030\006 \001(\005\022\r\n\005count\030\007 \001(\005\022\020\n\010upvoters"
  "\030\010 \001(\005\022\027\n\017include_deleted\030\t \001(\010\022\022\n\ngidco"
  "mment\030\n \001(\006\022\023\n\013time_oldest\030\013 \001(\r\022\024\n\014olde"
  "st_first\030\014 \001(\010\"\360\002\n\022CCommunity_Comment\022\022\n"
  "\ngidcomment\030\001 \001(\006\022\017\n\007steamid\030\002 \001(\006\022\021\n\tti"
  "mestamp\030\003 \001(\r\022\014\n\004text\030\004 \001(\t\022\017\n\007upvotes\030\005"
  " \001(\005\022\016\n\006hidden\030\006 \001(\010\022\026\n\016hidden_by_user\030\007"
  " \001(\010\022\017\n\007deleted\030\010 \001(\010\022!\n\tipaddress\030\t \001(\013"
  "2\016.CMsgIPAddress\022\024\n\014total_hidden\030\n \001(\005\022\027"
  "\n\017upvoted_by_user\030\013 \001(\010\022/\n\treactions\030\014 \003"
  "(\0132\034.CCommunity_Comment.Reaction\022\030\n\020gidp"
  "arentcomment\030\r \001(\006\032-\n\010Reaction\022\022\n\nreacti"
  "onid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"\316\003\n$CCommunity"
  "_GetCommentThread_Response\022%\n\010comments\030\001"
  " \003(\0132\023.CCommunity_Comment\022-\n\020deleted_com"
  "ments\030\002 \003(\0132\023.CCommunity_Comment\022\017\n\007stea"
  "mid\030\003 \001(\006\022\027\n\017commentthreadid\030\004 \001(\006\022\r\n\005st"
  "art\030\005 \001(\005\022\r\n\005count\030\006 \001(\005\022\023\n\013total_count\030"
  "\007 \001(\005\022\017\n\007upvotes\030\010 \001(\005\022\020\n\010upvoters\030\t \003(\r"
  "\022\027\n\017user_subscribed\030\n \001(\010\022\024\n\014user_upvote"
  "d\030\013 \001(\010\022\030\n\020answer_commentid\030\014 \001(\006\022\024\n\014ans"
  "wer_actor\030\r \001(\r\022\031\n\021answer_actor_rank\030\016 \001"
  "(\005\022\020\n\010can_post\030\017 \001(\010\022\033\n\023comment_thread_t"
  "ype\030\020 \001(\r\022\022\n\ngidfeature\030\021 \001(\006\022\023\n\013gidfeat"
  "ure2\030\022 \001(\006\"\240\002\n&CCommunity_PostCommentToT"
  "hread_Request\022\017\n\007steamid\030\001 \001(\006\022K\n\023commen"
  "t_thread_type\030\002 \001(\0162\023.ECommentThreadType"
  ":\031ECommentThreadTypeInvalid\022\022\n\ngidfeatur"
  "e\030\003 \001(\006\022\023\n\013gidfeature2\030\004 \001(\006\022\014\n\004text\030\006 \001"
  "(\t\022\030\n\020gidparentcomment\030\007 \001(\006\022\036\n\026suppress"
  "_notifications\030\010 \001(\010\022\021\n\tis_report\030\t \001(\010\022"
  "\024\n\014start_hidden\030\n \001(\010\"v\n\'CCommunity_Post"
  "CommentToThread_Response\022\022\n\ngidcomment\030\001"
  " \001(\006\022\027\n\017commentthreadid\030\002 \001(\006\022\r\n\005count\030\003"
  " \001(\005\022\017\n\007upvotes\030\004 \001(\005\"\331\001\n*CCommunity_Del"
  "eteCommentFromThread_Request\022\017\n\007steamid\030"
  "\001 \001(\006\022K\n\023comment_thread_type\030\002 \001(\0162\023.ECo"
  "mmentThreadType:\031ECommentThreadTypeInval"
  "id\022\022\n\ngidfeature\030\003 \001(\006\022\023\n\013gidfeature2\030\004 "
  "\001(\006\022\022\n\ngidcomment\030\005 \001(\006\022\020\n\010undelete\030\006 \001("
  "\010\"-\n+CCommunity_DeleteCommentFromThread_"
  "Response\"\300\001\n$CCommunity_RateCommentThrea"
  "d_Request\022\031\n\021commentthreadtype\030\001 \001(\t\022\017\n\007"
  "steamid\030\002 \001(\004\022\022\n\ngidfeature\030\003 \001(\004\022\023\n\013gid"
  "feature2\030\004 \001(\004\022\022\n\ngidcomment\030\005 \001(\004\022\017\n\007ra"
  "te_up\030\006 \001(\010\022\036\n\026suppress_notifications\030\007 "
  "\001(\010\"\211\001\n%CCommunity_RateCommentThread_Res"
  "ponse\022\022\n\ngidcomment\030\001 \001(\004\022\027\n\017commentthre"
  "adid\030\002 \001(\004\022\r\n\005count\030\003 \001(\r\022\017\n\007upvotes\030\004 \001"
  "(\r\022\023\n\013has_upvoted\030\005 \001(\010\"\252\001\n*CCommunity_G"
  "etCommentThreadRatings_Request\022\031\n\021commen"
  "tthreadtype\030\001 \001(\t\022\017\n\007steamid\030\002 \001(\004\022\022\n\ngi"
  "dfeature\030\003 \001(\004\022\023\n\013gidfeature2\030\004 \001(\004\022\022\n\ng"
  "idcomment\030\005 \001(\004\022\023\n\013max_results\030\006 \001(\r\"\234\001\n"
  "+CCommunity_GetCommentThreadRatings_Resp"
  "onse\022\027\n\017commentthreadid\030\001 \001(\004\022\022\n\ngidcomm"
  "ent\030\002 \001(\004\022\017\n\007upvotes\030\003 \001(\r\022\023\n\013has_upvote"
  "d\030\004 \001(\010\022\032\n\022upvoter_accountids\030\005 \003(\r\"j\n\'C"
  "Community_RateClanAnnouncement_Request\022\026"
  "\n\016announcementid\030\001 \001(\004\022\017\n\007vote_up\030\002 \001(\010\022"
  "\026\n\016clan_accountid\030\003 \001(\r\"*\n(CCommunity_Ra"
  "teClanAnnouncement_Response\"K\n1CCommunit"
  "y_GetClanAnnouncementVoteForUser_Request"
  "\022\026\n\016announcementid\030\001 \001(\004\"Z\n2CCommunity_G"
  "etClanAnnouncementVoteForUser_Response\022\020"
  "\n\010voted_up\030\001 \001(\010\022\022\n\nvoted_down\030\002 \001(\010\"Y\n#"
  "CCommunity_GetAvatarHistory_Request\022\017\n\007s"
  "teamid\030\001 \001(\006\022!\n\031filter_user_uploaded_onl"
  "y\030\002 \001(\010\"\266\001\n$CCommunity_GetAvatarHistory_"
  "Response\022A\n\007avatars\030\001 \003(\01320.CCommunity_G"
  "etAvatarHistory_Response.AvatarData\032K\n\nA"
  "vatarData\022\023\n\013avatar_sha1\030\001 \001(\t\022\025\n\ruser_u"
  "ploaded\030\002 \001(\010\022\021\n\ttimestamp\030\003 \001(\r\"Q\n.CCom"
  "munity_GetClanEventCrowdInMetadata_Reque"
  "st\022\017\n\007steamid\030\001 \001(\006\022\016\n\006itemid\030\002 \001(\004\"f\n/C"
  "Community_GetClanEventCrowdInMetadata_Re"
  "sponse\022\032\n\022crowdin_project_id\030\001 \001(\004\022\027\n\017cr"
  "owdin_file_id\030\002 \001(\004\"<\n)CCommunity_GetCla"
  "nCrowdInMetadata_Request\022\017\n\007steamid\030\001 \001("
  "\006\"\177\n*CCommunity_GetClanCrowdInMetadata_R"
  "esponse\022\032\n\022crowdin_project_id\030\001 \001(\004\022\034\n\024c"
  "rowdin_directory_id\030\002 \001(\004\022\027\n\017push_by_def"
  "ault\030\003 \001(\010\"c\n.CCommunity_FetchTranslatio"
  "nFromCrowdIn_Request\022\017\n\007steamid\030\001 \001(\006\022\016\n"
  "\006itemid\030\002 \001(\004\022\020\n\010language\030\003 \001(\r\"1\n/CComm"
  "unity_FetchTranslationFromCrowdIn_Respon"
  "se\"/\n\014CAppPriority\022\020\n\010priority\030\001 \001(\r\022\r\n\005"
  "appid\030\002 \003(\r\"\272\002\n*CCommunity_GetUserPartne"
  "rEventNews_Request\022\r\n\005count\030\001 \001(\r\022\016\n\006off"
  "set\030\002 \001(\r\022\032\n\022rtime32_start_time\030\003 \001(\r\022\030\n"
  "\020rtime32_end_time\030\004 \001(\r\022\033\n\023language_pref"
  "erence\030\005 \003(\r\022/\n\021filter_event_type\030\006 \003(\0162"
  "\024.EProtoClanEventType\022\027\n\017filter_to_appid"
  "\030\007 \001(\010\022\037\n\010app_list\030\010 \003(\0132\r.CAppPriority\022"
  "\026\n\013count_after\030\t \001(\r:\0010\022\027\n\014count_before\030"
  "\n \001(\r:\0010\"W\n+CCommunity_GetUserPartnerEve"
  "ntNews_Response\022(\n\007results\030\001 \003(\0132\027.CClan"
  "MatchEventByRange\"\216\001\n\'CCommunity_GetBest"
  "EventsForUser_Request\022\032\n\022include_steam_b"
  "log\030\001 \001(\010\022$\n\034filter_to_played_within_day"
  "s\030\002 \001(\r\022!\n\031include_only_game_updates\030\003 \001"
  "(\010\"\303\001\n\035CCommunity_PartnerEventResult\022\016\n\006"
  "clanid\030\001 \001(\r\022\021\n\tevent_gid\030\002 \001(\006\022\030\n\020annou"
  "ncement_gid\030\003 \001(\006\022\r\n\005appid\030\004 \001(\r\022\031\n\021poss"
  "ible_takeover\030\005 \001(\010\022 \n\025rtime32_last_modi"
  "fied\030\006 \001(\r:\0010\022\031\n\021user_app_priority\030\007 \001(\005"
  "\"[\n(CCommunity_GetBestEventsForUser_Resp"
  "onse\022/\n\007results\030\001 \003(\0132\036.CCommunity_Partn"
  "erEventResult\"\276\002\n+CCommunity_MarkPartner"
  "EventsForUser_Request\022R\n\010markings\030\001 \003(\0132"
  "@.CCommunity_MarkPartnerEventsForUser_Re"
  "quest.PartnerEventMarking\032\272\001\n\023PartnerEve"
  "ntMarking\022\016\n\006clanid\030\001 \001(\r\022\021\n\tevent_gid\030\002"
  " \001(\006\022]\n\020display_location\030\003 \001(\0162\035.EPartne"
  "rEventDisplayLocation:$EPartnerEventDisp"
  "layLocation_Invalid\022\020\n\010marshown\030\004 \001(\010\022\017\n"
  "\007marread\030\005 \001(\010\".\n,CCommunity_MarkPartner"
  "EventsForUser_Response\"h\n0CCommunity_Get"
  "UserPartnerEventViewStatus_Request\022\022\n\nev"
  "ent_gids\030\001 \003(\006\022 \n\030include_read_events_on"
  "ly\030\002 \001(\010\"\361\001\n1CCommunity_GetUserPartnerEv"
  "entViewStatus_Response\022O\n\006events\030\001 \003(\0132\?"
  ".CCommunity_GetUserPartnerEventViewStatu"
  "s_Response.PartnerEvent\032k\n\014PartnerEvent\022"
  "\021\n\tevent_gid\030\001 \001(\006\022\027\n\017last_shown_time\030\002 "
  "\001(\r\022\026\n\016last_read_time\030\003 \001(\r\022\027\n\017clan_acco"
  "unt_id\030\004 \001(\r\"\?\n.CCommunity_PartnerEvents"
  "ShowMoreForApp_Request\022\r\n\005appid\030\001 \001(\r\"1\n"
  "/CCommunity_PartnerEventsShowMoreForApp_"
  "Response\"\?\n.CCommunity_PartnerEventsShow"
  "LessForApp_Request\022\r\n\005appid\030\001 \001(\r\"1\n/CCo"
  "mmunity_PartnerEventsShowLessForApp_Resp"
  "onse\"8\n6CCommunity_ClearUserPartnerEvent"
  "sAppPriorities_Request\"9\n7CCommunity_Cle"
  "arUserPartnerEventsAppPriorities_Respons"
  "e\"6\n4CCommunity_GetUserPartnerEventsAppP"
  "riorities_Request\"O\n#CCommunity_PartnerE"
  "ventsAppPriority\022\r\n\005appid\030\001 \001(\r\022\031\n\021user_"
  "app_priority\030\002 \001(\005\"q\n5CCommunity_GetUser"
  "PartnerEventsAppPriorities_Response\0228\n\np"
  "riorities\030\001 \003(\0132$.CCommunity_PartnerEven"
  "tsAppPriority\"G\n6CCommunity_ClearSingleP"
  "artnerEventsAppPriority_Request\022\r\n\005appid"
  "\030\001 \001(\r\"9\n7CCommunity_ClearSinglePartnerE"
  "ventsAppPriority_Response*\247\004\n\034EPartnerEv"
  "entDisplayLocation\022(\n$EPartnerEventDispl"
  "ayLocation_Invalid\020\000\0224\n0EPartnerEventDis"
  "playLocation_AppDetailsSpotlight\020\001\0220\n,EP"
  "artnerEventDisplayLocation_LibraryOvervi"
  "ew\020\002\022-\n)EPartnerEventDisplayLocation_Sto"
  "reAppPage\020\003\022.\n*EPartnerEventDisplayLocat"
  "ion_EventScroller\020\004\0223\n/EPartnerEventDisp"
  "layLocation_AppDetailsActivity\020\005\022-\n)EPar"
  "tnerEventDisplayLocation_CommunityHub\020\006\022"
  "/\n+EPartnerEventDisplayLocation_StoreFro"
  "ntPage\020\007\022(\n$EPartnerEventDisplayLocation"
  "_NewsHub\020\010\022,\n(EPartnerEventDisplayLocati"
  "on_GamepadHome\020\t\022)\n%EPartnerEventDisplay"
  "Location_StoreHub\020\n2\201\025\n\tCommunity\022D\n\007Get"
  "Apps\022\033.CCommunity_GetApps_Request\032\034.CCom"
  "munity_GetApps_Response\022\211\001\n\036GetAppRichPr"
  "esenceLocalization\0222.CCommunity_GetAppRi"
  "chPresenceLocalization_Request\0323.CCommun"
  "ity_GetAppRichPresenceLocalization_Respo"
  "nse\022_\n\020GetCommentThread\022$.CCommunity_Get"
  "CommentThread_Request\032%.CCommunity_GetCo"
  "mmentThread_Response\022h\n\023PostCommentToThr"
  "ead\022\'.CCommunity_PostCommentToThread_Req"
  "uest\032(.CCommunity_PostCommentToThread_Re"
  "sponse\022t\n\027DeleteCommentFromThread\022+.CCom"
  "munity_DeleteCommentFromThread_Request\032,"
  ".CCommunity_DeleteCommentFromThread_Resp"
  "onse\022b\n\021RateCommentThread\022%.CCommunity_R"
  "ateCommentThread_Request\032&.CCommunity_Ra"
  "teCommentThread_Response\022t\n\027GetCommentTh"
  "readRatings\022+.CCommunity_GetCommentThrea"
  "dRatings_Request\032,.CCommunity_GetComment"
  "ThreadRatings_Response\022k\n\024RateClanAnnoun"
  "cement\022(.CCommunity_RateClanAnnouncement"
  "_Request\032).CCommunity_RateClanAnnounceme"
  "nt_Response\022\211\001\n\036GetClanAnnouncementVoteF"
  "orUser\0222.CCommunity_GetClanAnnouncementV"
  "oteForUser_Request\0323.CCommunity_GetClanA"
  "nnouncementVoteForUser_Response\022_\n\020GetAv"
  "atarHistory\022$.CCommunity_GetAvatarHistor"
  "y_Request\032%.CCommunity_GetAvatarHistory_"
  "Response\022\200\001\n\033GetClanEventCrowdInMetadata"
  "\022/.CCommunity_GetClanEventCrowdInMetadat"
  "a_Request\0320.CCommunity_GetClanEventCrowd"
  "InMetadata_Response\022q\n\026GetClanCrowdInMet"
  "adata\022*.CCommunity_GetClanCrowdInMetadat"
  "a_Request\032+.CCommunity_GetClanCrowdInMet"
  "adata_Response\022\200\001\n\033FetchTranslationFromC"
  "rowdIn\022/.CCommunity_FetchTranslationFrom"
  "CrowdIn_Request\0320.CCommunity_FetchTransl"
  "ationFromCrowdIn_Response\022t\n\027GetUserPart"
  "nerEventNews\022+.CCommunity_GetUserPartner"
  "EventNews_Request\032,.CCommunity_GetUserPa"
  "rtnerEventNews_Response\022k\n\024GetBestEvents"
  "ForUser\022(.CCommunity_GetBestEventsForUse"
  "r_Request\032).CCommunity_GetBestEventsForU"
  "ser_Response\022w\n\030MarkPartnerEventsForUser"
  "\022,.CCommunity_MarkPartnerEventsForUser_R"
  "equest\032-.CCommunity_MarkPartnerEventsFor"
  "User_Response\022\206\001\n\035GetUserPartnerEventVie"
  "wStatus\0221.CCommunity_GetUserPartnerEvent"
  "ViewStatus_Request\0322.CCommunity_GetUserP"
  "artnerEventViewStatus_Response\022\200\001\n\033Partn"
  "erEventsShowMoreForApp\022/.CCommunity_Part"
  "nerEventsShowMoreForApp_Request\0320.CCommu"
  "nity_PartnerEventsShowMoreForApp_Respons"
  "e\022\200\001\n\033PartnerEventsShowLessForApp\022/.CCom"
  "munity_PartnerEventsShowLessForApp_Reque"
  "st\0320.CCommunity_PartnerEventsShowLessFor"
  "App_Response\022\230\001\n#ClearUserPartnerEventsA"
  "ppPriorities\0227.CCommunity_ClearUserPartn"
  "erEventsAppPriorities_Request\0328.CCommuni"
  "ty_ClearUserPartnerEventsAppPriorities_R"
  "esponse\022\222\001\n!GetUserPartnerEventsAppPrior"
  "ities\0225.CCommunity_GetUserPartnerEventsA"
  "ppPriorities_Request\0326.CCommunity_GetUse"
  "rPartnerEventsAppPriorities_Response\022\230\001\n"
  "#ClearSinglePartnerEventsAppPriority\0227.C"
  "Community_ClearSinglePartnerEventsAppPri"
  "ority_Request\0328.CCommunity_ClearSinglePa"
  "rtnerEventsAppPriority_ResponseB\035\200\001\001\252\002\027O"
  "penSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto = {
  false, false, 9942, descriptor_table_protodef_steammessages_5fcommunity_2esteamclient_2eproto, "steammessages_community.steamclient.proto", 
  &descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto_once, descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto_deps, 4, 54,
  schemas, file_default_instances, TableStruct_steammessages_5fcommunity_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fcommunity_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fcommunity_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fcommunity_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fcommunity_2esteamclient_2eproto(&descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartnerEventDisplayLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fcommunity_2esteamclient_2eproto[0];
}
bool EPartnerEventDisplayLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CCommunity_GetApps_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetApps_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetApps_Request::CCommunity_GetApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetApps_Request)
}
CCommunity_GetApps_Request::CCommunity_GetApps_Request(const CCommunity_GetApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetApps_Request)
}

void CCommunity_GetApps_Request::SharedCtor() {
language_ = 0u;
}

CCommunity_GetApps_Request::~CCommunity_GetApps_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetApps_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetApps_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetApps_Request::ArenaDtor(void* object) {
  CCommunity_GetApps_Request* _this = reinterpret_cast< CCommunity_GetApps_Request* >(object);
  (void)_this;
}
void CCommunity_GetApps_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetApps_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetApps_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  language_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetApps_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 appids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetApps_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetApps_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 appids = 1;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetApps_Request)
  return target;
}

size_t CCommunity_GetApps_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetApps_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 appids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  // optional uint32 language = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetApps_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetApps_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetApps_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetApps_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetApps_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetApps_Request::MergeFrom(const CCommunity_GetApps_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetApps_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
}

void CCommunity_GetApps_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetApps_Request::CopyFrom(const CCommunity_GetApps_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetApps_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetApps_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetApps_Request::InternalSwap(CCommunity_GetApps_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetApps_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetApps_Response::_Internal {
 public:
};

void CCommunity_GetApps_Response::clear_apps() {
  apps_.Clear();
}
CCommunity_GetApps_Response::CCommunity_GetApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetApps_Response)
}
CCommunity_GetApps_Response::CCommunity_GetApps_Response(const CCommunity_GetApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetApps_Response)
}

void CCommunity_GetApps_Response::SharedCtor() {
}

CCommunity_GetApps_Response::~CCommunity_GetApps_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetApps_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetApps_Response::ArenaDtor(void* object) {
  CCommunity_GetApps_Response* _this = reinterpret_cast< CCommunity_GetApps_Response* >(object);
  (void)_this;
}
void CCommunity_GetApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCDDBAppDetailCommon apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetApps_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetApps_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCDDBAppDetailCommon apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetApps_Response)
  return target;
}

size_t CCommunity_GetApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetApps_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCDDBAppDetailCommon apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetApps_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetApps_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetApps_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetApps_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetApps_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetApps_Response::MergeFrom(const CCommunity_GetApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
}

void CCommunity_GetApps_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetApps_Response::CopyFrom(const CCommunity_GetApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetApps_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetApps_Response::InternalSwap(CCommunity_GetApps_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetApps_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAppRichPresenceLocalization_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetAppRichPresenceLocalization_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetAppRichPresenceLocalization_Request::CCommunity_GetAppRichPresenceLocalization_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAppRichPresenceLocalization_Request)
}
CCommunity_GetAppRichPresenceLocalization_Request::CCommunity_GetAppRichPresenceLocalization_Request(const CCommunity_GetAppRichPresenceLocalization_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAppRichPresenceLocalization_Request)
}

void CCommunity_GetAppRichPresenceLocalization_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appid_ = 0;
}

CCommunity_GetAppRichPresenceLocalization_Request::~CCommunity_GetAppRichPresenceLocalization_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAppRichPresenceLocalization_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAppRichPresenceLocalization_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetAppRichPresenceLocalization_Request::ArenaDtor(void* object) {
  CCommunity_GetAppRichPresenceLocalization_Request* _this = reinterpret_cast< CCommunity_GetAppRichPresenceLocalization_Request* >(object);
  (void)_this;
}
void CCommunity_GetAppRichPresenceLocalization_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAppRichPresenceLocalization_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAppRichPresenceLocalization_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAppRichPresenceLocalization_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  appid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAppRichPresenceLocalization_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetAppRichPresenceLocalization_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAppRichPresenceLocalization_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAppRichPresenceLocalization_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetAppRichPresenceLocalization_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAppRichPresenceLocalization_Request)
  return target;
}

size_t CCommunity_GetAppRichPresenceLocalization_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAppRichPresenceLocalization_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional int32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAppRichPresenceLocalization_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAppRichPresenceLocalization_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAppRichPresenceLocalization_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAppRichPresenceLocalization_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAppRichPresenceLocalization_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetAppRichPresenceLocalization_Request::MergeFrom(const CCommunity_GetAppRichPresenceLocalization_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetAppRichPresenceLocalization_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAppRichPresenceLocalization_Request::CopyFrom(const CCommunity_GetAppRichPresenceLocalization_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAppRichPresenceLocalization_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetAppRichPresenceLocalization_Request::InternalSwap(CCommunity_GetAppRichPresenceLocalization_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAppRichPresenceLocalization_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAppRichPresenceLocalization_Response_Token::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetAppRichPresenceLocalization_Response_Token>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetAppRichPresenceLocalization_Response_Token::CCommunity_GetAppRichPresenceLocalization_Response_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAppRichPresenceLocalization_Response.Token)
}
CCommunity_GetAppRichPresenceLocalization_Response_Token::CCommunity_GetAppRichPresenceLocalization_Response_Token(const CCommunity_GetAppRichPresenceLocalization_Response_Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAppRichPresenceLocalization_Response.Token)
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCommunity_GetAppRichPresenceLocalization_Response_Token::~CCommunity_GetAppRichPresenceLocalization_Response_Token() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::ArenaDtor(void* object) {
  CCommunity_GetAppRichPresenceLocalization_Response_Token* _this = reinterpret_cast< CCommunity_GetAppRichPresenceLocalization_Response_Token* >(object);
  (void)_this;
}
void CCommunity_GetAppRichPresenceLocalization_Response_Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAppRichPresenceLocalization_Response_Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAppRichPresenceLocalization_Response_Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetAppRichPresenceLocalization_Response.Token.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetAppRichPresenceLocalization_Response.Token.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAppRichPresenceLocalization_Response_Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetAppRichPresenceLocalization_Response.Token.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetAppRichPresenceLocalization_Response.Token.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  return target;
}

size_t CCommunity_GetAppRichPresenceLocalization_Response_Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAppRichPresenceLocalization_Response_Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAppRichPresenceLocalization_Response_Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAppRichPresenceLocalization_Response.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAppRichPresenceLocalization_Response.Token)
    MergeFrom(*source);
  }
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::MergeFrom(const CCommunity_GetAppRichPresenceLocalization_Response_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::CopyFrom(const CCommunity_GetAppRichPresenceLocalization_Response_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Response.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAppRichPresenceLocalization_Response_Token::IsInitialized() const {
  return true;
}

void CCommunity_GetAppRichPresenceLocalization_Response_Token::InternalSwap(CCommunity_GetAppRichPresenceLocalization_Response_Token* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAppRichPresenceLocalization_Response_Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAppRichPresenceLocalization_Response_TokenList::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetAppRichPresenceLocalization_Response_TokenList>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetAppRichPresenceLocalization_Response_TokenList::CCommunity_GetAppRichPresenceLocalization_Response_TokenList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
}
CCommunity_GetAppRichPresenceLocalization_Response_TokenList::CCommunity_GetAppRichPresenceLocalization_Response_TokenList(const CCommunity_GetAppRichPresenceLocalization_Response_TokenList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCommunity_GetAppRichPresenceLocalization_Response_TokenList::~CCommunity_GetAppRichPresenceLocalization_Response_TokenList() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::ArenaDtor(void* object) {
  CCommunity_GetAppRichPresenceLocalization_Response_TokenList* _this = reinterpret_cast< CCommunity_GetAppRichPresenceLocalization_Response_TokenList* >(object);
  (void)_this;
}
void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAppRichPresenceLocalization_Response_TokenList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetAppRichPresenceLocalization_Response.TokenList.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCommunity_GetAppRichPresenceLocalization_Response.Token tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAppRichPresenceLocalization_Response_TokenList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetAppRichPresenceLocalization_Response.TokenList.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // repeated .CCommunity_GetAppRichPresenceLocalization_Response.Token tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  return target;
}

size_t CCommunity_GetAppRichPresenceLocalization_Response_TokenList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GetAppRichPresenceLocalization_Response.Token tokens = 2;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAppRichPresenceLocalization_Response_TokenList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAppRichPresenceLocalization_Response_TokenList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
    MergeFrom(*source);
  }
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::MergeFrom(const CCommunity_GetAppRichPresenceLocalization_Response_TokenList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::CopyFrom(const CCommunity_GetAppRichPresenceLocalization_Response_TokenList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Response.TokenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAppRichPresenceLocalization_Response_TokenList::IsInitialized() const {
  return true;
}

void CCommunity_GetAppRichPresenceLocalization_Response_TokenList::InternalSwap(CCommunity_GetAppRichPresenceLocalization_Response_TokenList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(&other->tokens_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAppRichPresenceLocalization_Response_TokenList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAppRichPresenceLocalization_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetAppRichPresenceLocalization_Response>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetAppRichPresenceLocalization_Response::CCommunity_GetAppRichPresenceLocalization_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  token_lists_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAppRichPresenceLocalization_Response)
}
CCommunity_GetAppRichPresenceLocalization_Response::CCommunity_GetAppRichPresenceLocalization_Response(const CCommunity_GetAppRichPresenceLocalization_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      token_lists_(from.token_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAppRichPresenceLocalization_Response)
}

void CCommunity_GetAppRichPresenceLocalization_Response::SharedCtor() {
appid_ = 0;
}

CCommunity_GetAppRichPresenceLocalization_Response::~CCommunity_GetAppRichPresenceLocalization_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAppRichPresenceLocalization_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAppRichPresenceLocalization_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetAppRichPresenceLocalization_Response::ArenaDtor(void* object) {
  CCommunity_GetAppRichPresenceLocalization_Response* _this = reinterpret_cast< CCommunity_GetAppRichPresenceLocalization_Response* >(object);
  (void)_this;
}
void CCommunity_GetAppRichPresenceLocalization_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAppRichPresenceLocalization_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAppRichPresenceLocalization_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAppRichPresenceLocalization_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_lists_.Clear();
  appid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAppRichPresenceLocalization_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCommunity_GetAppRichPresenceLocalization_Response.TokenList token_lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAppRichPresenceLocalization_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAppRichPresenceLocalization_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated .CCommunity_GetAppRichPresenceLocalization_Response.TokenList token_lists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_token_lists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAppRichPresenceLocalization_Response)
  return target;
}

size_t CCommunity_GetAppRichPresenceLocalization_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAppRichPresenceLocalization_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GetAppRichPresenceLocalization_Response.TokenList token_lists = 2;
  total_size += 1UL * this->_internal_token_lists_size();
  for (const auto& msg : this->token_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAppRichPresenceLocalization_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAppRichPresenceLocalization_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAppRichPresenceLocalization_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAppRichPresenceLocalization_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAppRichPresenceLocalization_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetAppRichPresenceLocalization_Response::MergeFrom(const CCommunity_GetAppRichPresenceLocalization_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAppRichPresenceLocalization_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_lists_.MergeFrom(from.token_lists_);
  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CCommunity_GetAppRichPresenceLocalization_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAppRichPresenceLocalization_Response::CopyFrom(const CCommunity_GetAppRichPresenceLocalization_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAppRichPresenceLocalization_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAppRichPresenceLocalization_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetAppRichPresenceLocalization_Response::InternalSwap(CCommunity_GetAppRichPresenceLocalization_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_lists_.InternalSwap(&other->token_lists_);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAppRichPresenceLocalization_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetCommentThread_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetCommentThread_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment_thread_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gidfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gidfeature2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commentthreadid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_upvoters(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_include_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time_oldest(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_oldest_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CCommunity_GetCommentThread_Request::CCommunity_GetCommentThread_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetCommentThread_Request)
}
CCommunity_GetCommentThread_Request::CCommunity_GetCommentThread_Request(const CCommunity_GetCommentThread_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_oldest_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_oldest_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetCommentThread_Request)
}

void CCommunity_GetCommentThread_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_oldest_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_oldest_));
}

CCommunity_GetCommentThread_Request::~CCommunity_GetCommentThread_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetCommentThread_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetCommentThread_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetCommentThread_Request::ArenaDtor(void* object) {
  CCommunity_GetCommentThread_Request* _this = reinterpret_cast< CCommunity_GetCommentThread_Request* >(object);
  (void)_this;
}
void CCommunity_GetCommentThread_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetCommentThread_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetCommentThread_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetCommentThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upvoters_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(upvoters_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&gidcomment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_oldest_) -
        reinterpret_cast<char*>(&gidcomment_)) + sizeof(time_oldest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetCommentThread_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECommentThreadType_IsValid(val))) {
            _internal_set_comment_thread_type(static_cast<::ECommentThreadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gidfeature(&has_bits);
          gidfeature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gidfeature2(&has_bits);
          gidfeature2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 commentthreadid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_commentthreadid(&has_bits);
          commentthreadid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 upvoters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_upvoters(&has_bits);
          upvoters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_deleted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_include_deleted(&has_bits);
          include_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidcomment = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_oldest = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_time_oldest(&has_bits);
          time_oldest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool oldest_first = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_oldest_first(&has_bits);
          oldest_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetCommentThread_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetCommentThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comment_thread_type(), target);
  }

  // optional fixed64 gidfeature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_gidfeature(), target);
  }

  // optional fixed64 gidfeature2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_gidfeature2(), target);
  }

  // optional fixed64 commentthreadid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_commentthreadid(), target);
  }

  // optional int32 start = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_start(), target);
  }

  // optional int32 count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_count(), target);
  }

  // optional int32 upvoters = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_upvoters(), target);
  }

  // optional bool include_deleted = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_include_deleted(), target);
  }

  // optional fixed64 gidcomment = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_gidcomment(), target);
  }

  // optional uint32 time_oldest = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_time_oldest(), target);
  }

  // optional bool oldest_first = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_oldest_first(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetCommentThread_Request)
  return target;
}

size_t CCommunity_GetCommentThread_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetCommentThread_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidfeature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidfeature2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comment_thread_type());
    }

    // optional int32 start = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start());
    }

    // optional fixed64 commentthreadid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

    // optional int32 upvoters = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upvoters());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed64 gidcomment = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional bool include_deleted = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool oldest_first = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_oldest = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_oldest());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetCommentThread_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetCommentThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetCommentThread_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetCommentThread_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetCommentThread_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetCommentThread_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetCommentThread_Request::MergeFrom(const CCommunity_GetCommentThread_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetCommentThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gidfeature_ = from.gidfeature_;
    }
    if (cached_has_bits & 0x00000004u) {
      gidfeature2_ = from.gidfeature2_;
    }
    if (cached_has_bits & 0x00000008u) {
      comment_thread_type_ = from.comment_thread_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000020u) {
      commentthreadid_ = from.commentthreadid_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000080u) {
      upvoters_ = from.upvoters_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000200u) {
      include_deleted_ = from.include_deleted_;
    }
    if (cached_has_bits & 0x00000400u) {
      oldest_first_ = from.oldest_first_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_oldest_ = from.time_oldest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetCommentThread_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetCommentThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetCommentThread_Request::CopyFrom(const CCommunity_GetCommentThread_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetCommentThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetCommentThread_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetCommentThread_Request::InternalSwap(CCommunity_GetCommentThread_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThread_Request, time_oldest_)
      + sizeof(CCommunity_GetCommentThread_Request::time_oldest_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThread_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetCommentThread_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_Comment_Reaction::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_Comment_Reaction>()._has_bits_);
  static void set_has_reactionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_Comment_Reaction::CCommunity_Comment_Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_Comment.Reaction)
}
CCommunity_Comment_Reaction::CCommunity_Comment_Reaction(const CCommunity_Comment_Reaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reactionid_, &from.reactionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&reactionid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_Comment.Reaction)
}

void CCommunity_Comment_Reaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reactionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&reactionid_)) + sizeof(count_));
}

CCommunity_Comment_Reaction::~CCommunity_Comment_Reaction() {
  // @@protoc_insertion_point(destructor:CCommunity_Comment.Reaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_Comment_Reaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_Comment_Reaction::ArenaDtor(void* object) {
  CCommunity_Comment_Reaction* _this = reinterpret_cast< CCommunity_Comment_Reaction* >(object);
  (void)_this;
}
void CCommunity_Comment_Reaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_Comment_Reaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_Comment_Reaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_Comment.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reactionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&reactionid_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_Comment_Reaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 reactionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reactionid(&has_bits);
          reactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_Comment_Reaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_Comment.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 reactionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reactionid(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_Comment.Reaction)
  return target;
}

size_t CCommunity_Comment_Reaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_Comment.Reaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 reactionid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reactionid());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_Comment_Reaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_Comment.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_Comment_Reaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_Comment_Reaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_Comment.Reaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_Comment.Reaction)
    MergeFrom(*source);
  }
}

void CCommunity_Comment_Reaction::MergeFrom(const CCommunity_Comment_Reaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_Comment.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reactionid_ = from.reactionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_Comment_Reaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_Comment.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_Comment_Reaction::CopyFrom(const CCommunity_Comment_Reaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_Comment.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_Comment_Reaction::IsInitialized() const {
  return true;
}

void CCommunity_Comment_Reaction::InternalSwap(CCommunity_Comment_Reaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_Comment_Reaction, count_)
      + sizeof(CCommunity_Comment_Reaction::count_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_Comment_Reaction, reactionid_)>(
          reinterpret_cast<char*>(&reactionid_),
          reinterpret_cast<char*>(&other->reactionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_Comment_Reaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_Comment::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_Comment>()._has_bits_);
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hidden_by_user(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgIPAddress& ipaddress(const CCommunity_Comment* msg);
  static void set_has_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_upvoted_by_user(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gidparentcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CMsgIPAddress&
CCommunity_Comment::_Internal::ipaddress(const CCommunity_Comment* msg) {
  return *msg->ipaddress_;
}
void CCommunity_Comment::clear_ipaddress() {
  if (ipaddress_ != nullptr) ipaddress_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CCommunity_Comment::CCommunity_Comment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_Comment)
}
CCommunity_Comment::CCommunity_Comment(const CCommunity_Comment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reactions_(from.reactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_ipaddress()) {
    ipaddress_ = new ::CMsgIPAddress(*from.ipaddress_);
  } else {
    ipaddress_ = nullptr;
  }
  ::memcpy(&gidcomment_, &from.gidcomment_,
    static_cast<size_t>(reinterpret_cast<char*>(&gidparentcomment_) -
    reinterpret_cast<char*>(&gidcomment_)) + sizeof(gidparentcomment_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_Comment)
}

void CCommunity_Comment::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipaddress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gidparentcomment_) -
    reinterpret_cast<char*>(&ipaddress_)) + sizeof(gidparentcomment_));
}

CCommunity_Comment::~CCommunity_Comment() {
  // @@protoc_insertion_point(destructor:CCommunity_Comment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_Comment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ipaddress_;
}

void CCommunity_Comment::ArenaDtor(void* object) {
  CCommunity_Comment* _this = reinterpret_cast< CCommunity_Comment* >(object);
  (void)_this;
}
void CCommunity_Comment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_Comment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_Comment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ipaddress_ != nullptr);
      ipaddress_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&gidcomment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_by_user_) -
        reinterpret_cast<char*>(&gidcomment_)) + sizeof(hidden_by_user_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&deleted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gidparentcomment_) -
        reinterpret_cast<char*>(&deleted_)) + sizeof(gidparentcomment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_Comment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 gidcomment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_Comment.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 upvotes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_upvotes(&has_bits);
          upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hidden = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hidden_by_user = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hidden_by_user(&has_bits);
          hidden_by_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deleted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress ipaddress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_hidden = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_hidden(&has_bits);
          total_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool upvoted_by_user = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_upvoted_by_user(&has_bits);
          upvoted_by_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCommunity_Comment.Reaction reactions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidparentcomment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_gidparentcomment(&has_bits);
          gidparentcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_Comment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_Comment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gidcomment = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gidcomment(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_Comment.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // optional int32 upvotes = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_upvotes(), target);
  }

  // optional bool hidden = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hidden(), target);
  }

  // optional bool hidden_by_user = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hidden_by_user(), target);
  }

  // optional bool deleted = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_deleted(), target);
  }

  // optional .CMsgIPAddress ipaddress = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ipaddress(this), target, stream);
  }

  // optional int32 total_hidden = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_total_hidden(), target);
  }

  // optional bool upvoted_by_user = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_upvoted_by_user(), target);
  }

  // repeated .CCommunity_Comment.Reaction reactions = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_reactions(i), target, stream);
  }

  // optional fixed64 gidparentcomment = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(13, this->_internal_gidparentcomment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_Comment)
  return target;
}

size_t CCommunity_Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_Comment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_Comment.Reaction reactions = 12;
  total_size += 1UL * this->_internal_reactions_size();
  for (const auto& msg : this->reactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .CMsgIPAddress ipaddress = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipaddress_);
    }

    // optional fixed64 gidcomment = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional int32 upvotes = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upvotes());
    }

    // optional bool hidden = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool hidden_by_user = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool deleted = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool upvoted_by_user = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 total_hidden = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_total_hidden());
    }

    // optional fixed64 gidparentcomment = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_Comment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_Comment)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_Comment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_Comment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_Comment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_Comment)
    MergeFrom(*source);
  }
}

void CCommunity_Comment::MergeFrom(const CCommunity_Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_Comment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reactions_.MergeFrom(from.reactions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ipaddress()->::CMsgIPAddress::MergeFrom(from._internal_ipaddress());
    }
    if (cached_has_bits & 0x00000004u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      upvotes_ = from.upvotes_;
    }
    if (cached_has_bits & 0x00000040u) {
      hidden_ = from.hidden_;
    }
    if (cached_has_bits & 0x00000080u) {
      hidden_by_user_ = from.hidden_by_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      deleted_ = from.deleted_;
    }
    if (cached_has_bits & 0x00000200u) {
      upvoted_by_user_ = from.upvoted_by_user_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_hidden_ = from.total_hidden_;
    }
    if (cached_has_bits & 0x00000800u) {
      gidparentcomment_ = from.gidparentcomment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_Comment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_Comment::CopyFrom(const CCommunity_Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_Comment::IsInitialized() const {
  return true;
}

void CCommunity_Comment::InternalSwap(CCommunity_Comment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reactions_.InternalSwap(&other->reactions_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_Comment, gidparentcomment_)
      + sizeof(CCommunity_Comment::gidparentcomment_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_Comment, ipaddress_)>(
          reinterpret_cast<char*>(&ipaddress_),
          reinterpret_cast<char*>(&other->ipaddress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_Comment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetCommentThread_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetCommentThread_Response>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commentthreadid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_upvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_upvoted(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_answer_commentid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_answer_actor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_answer_actor_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_post(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_comment_thread_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gidfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_gidfeature2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CCommunity_GetCommentThread_Response::CCommunity_GetCommentThread_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comments_(arena),
  deleted_comments_(arena),
  upvoters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetCommentThread_Response)
}
CCommunity_GetCommentThread_Response::CCommunity_GetCommentThread_Response(const CCommunity_GetCommentThread_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comments_(from.comments_),
      deleted_comments_(from.deleted_comments_),
      upvoters_(from.upvoters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gidfeature2_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(gidfeature2_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetCommentThread_Response)
}

void CCommunity_GetCommentThread_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gidfeature2_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(gidfeature2_));
}

CCommunity_GetCommentThread_Response::~CCommunity_GetCommentThread_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetCommentThread_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetCommentThread_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetCommentThread_Response::ArenaDtor(void* object) {
  CCommunity_GetCommentThread_Response* _this = reinterpret_cast< CCommunity_GetCommentThread_Response* >(object);
  (void)_this;
}
void CCommunity_GetCommentThread_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetCommentThread_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetCommentThread_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetCommentThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comments_.Clear();
  deleted_comments_.Clear();
  upvoters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_subscribed_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(user_subscribed_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&user_upvoted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gidfeature2_) -
        reinterpret_cast<char*>(&user_upvoted_)) + sizeof(gidfeature2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetCommentThread_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCommunity_Comment comments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CCommunity_Comment deleted_comments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deleted_comments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 commentthreadid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_commentthreadid(&has_bits);
          commentthreadid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_total_count(&has_bits);
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 upvotes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_upvotes(&has_bits);
          upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 upvoters = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_upvoters(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_upvoters(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_subscribed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_user_subscribed(&has_bits);
          user_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_upvoted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_user_upvoted(&has_bits);
          user_upvoted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 answer_commentid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_answer_commentid(&has_bits);
          answer_commentid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 answer_actor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_answer_actor(&has_bits);
          answer_actor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 answer_actor_rank = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_answer_actor_rank(&has_bits);
          answer_actor_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_post = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_can_post(&has_bits);
          can_post_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 comment_thread_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_comment_thread_type(&has_bits);
          comment_thread_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_gidfeature(&has_bits);
          gidfeature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_gidfeature2(&has_bits);
          gidfeature2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetCommentThread_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetCommentThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_Comment comments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_comments(i), target, stream);
  }

  // repeated .CCommunity_Comment deleted_comments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deleted_comments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_deleted_comments(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  // optional fixed64 commentthreadid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_commentthreadid(), target);
  }

  // optional int32 start = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_start(), target);
  }

  // optional int32 count = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_count(), target);
  }

  // optional int32 total_count = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_count(), target);
  }

  // optional int32 upvotes = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_upvotes(), target);
  }

  // repeated uint32 upvoters = 9;
  for (int i = 0, n = this->_internal_upvoters_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_upvoters(i), target);
  }

  // optional bool user_subscribed = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_user_subscribed(), target);
  }

  // optional bool user_upvoted = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_user_upvoted(), target);
  }

  // optional fixed64 answer_commentid = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_answer_commentid(), target);
  }

  // optional uint32 answer_actor = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_answer_actor(), target);
  }

  // optional int32 answer_actor_rank = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_answer_actor_rank(), target);
  }

  // optional bool can_post = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_can_post(), target);
  }

  // optional uint32 comment_thread_type = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_comment_thread_type(), target);
  }

  // optional fixed64 gidfeature = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(17, this->_internal_gidfeature(), target);
  }

  // optional fixed64 gidfeature2 = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(18, this->_internal_gidfeature2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetCommentThread_Response)
  return target;
}

size_t CCommunity_GetCommentThread_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetCommentThread_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_Comment comments = 1;
  total_size += 1UL * this->_internal_comments_size();
  for (const auto& msg : this->comments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CCommunity_Comment deleted_comments = 2;
  total_size += 1UL * this->_internal_deleted_comments_size();
  for (const auto& msg : this->deleted_comments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 upvoters = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->upvoters_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_upvoters_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 commentthreadid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 start = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start());
    }

    // optional int32 count = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

    // optional int32 total_count = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_total_count());
    }

    // optional int32 upvotes = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upvotes());
    }

    // optional fixed64 answer_commentid = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool user_subscribed = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool user_upvoted = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool can_post = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 answer_actor = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_answer_actor());
    }

    // optional int32 answer_actor_rank = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_answer_actor_rank());
    }

    // optional uint32 comment_thread_type = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_comment_thread_type());
    }

    // optional fixed64 gidfeature = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 gidfeature2 = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetCommentThread_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetCommentThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetCommentThread_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetCommentThread_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetCommentThread_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetCommentThread_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetCommentThread_Response::MergeFrom(const CCommunity_GetCommentThread_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetCommentThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comments_.MergeFrom(from.comments_);
  deleted_comments_.MergeFrom(from.deleted_comments_);
  upvoters_.MergeFrom(from.upvoters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      commentthreadid_ = from.commentthreadid_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_count_ = from.total_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      upvotes_ = from.upvotes_;
    }
    if (cached_has_bits & 0x00000040u) {
      answer_commentid_ = from.answer_commentid_;
    }
    if (cached_has_bits & 0x00000080u) {
      user_subscribed_ = from.user_subscribed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      user_upvoted_ = from.user_upvoted_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_post_ = from.can_post_;
    }
    if (cached_has_bits & 0x00000400u) {
      answer_actor_ = from.answer_actor_;
    }
    if (cached_has_bits & 0x00000800u) {
      answer_actor_rank_ = from.answer_actor_rank_;
    }
    if (cached_has_bits & 0x00001000u) {
      comment_thread_type_ = from.comment_thread_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      gidfeature_ = from.gidfeature_;
    }
    if (cached_has_bits & 0x00004000u) {
      gidfeature2_ = from.gidfeature2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetCommentThread_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetCommentThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetCommentThread_Response::CopyFrom(const CCommunity_GetCommentThread_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetCommentThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetCommentThread_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetCommentThread_Response::InternalSwap(CCommunity_GetCommentThread_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comments_.InternalSwap(&other->comments_);
  deleted_comments_.InternalSwap(&other->deleted_comments_);
  upvoters_.InternalSwap(&other->upvoters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThread_Response, gidfeature2_)
      + sizeof(CCommunity_GetCommentThread_Response::gidfeature2_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThread_Response, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetCommentThread_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PostCommentToThread_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_PostCommentToThread_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comment_thread_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gidfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gidfeature2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gidparentcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suppress_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_report(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_start_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CCommunity_PostCommentToThread_Request::CCommunity_PostCommentToThread_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PostCommentToThread_Request)
}
CCommunity_PostCommentToThread_Request::CCommunity_PostCommentToThread_Request(const CCommunity_PostCommentToThread_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_hidden_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(start_hidden_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_PostCommentToThread_Request)
}

void CCommunity_PostCommentToThread_Request::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_hidden_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(start_hidden_));
}

CCommunity_PostCommentToThread_Request::~CCommunity_PostCommentToThread_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_PostCommentToThread_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PostCommentToThread_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_PostCommentToThread_Request::ArenaDtor(void* object) {
  CCommunity_PostCommentToThread_Request* _this = reinterpret_cast< CCommunity_PostCommentToThread_Request* >(object);
  (void)_this;
}
void CCommunity_PostCommentToThread_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PostCommentToThread_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PostCommentToThread_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PostCommentToThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_report_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_report_));
  }
  start_hidden_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PostCommentToThread_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECommentThreadType_IsValid(val))) {
            _internal_set_comment_thread_type(static_cast<::ECommentThreadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gidfeature(&has_bits);
          gidfeature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gidfeature2(&has_bits);
          gidfeature2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_PostCommentToThread_Request.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidparentcomment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_gidparentcomment(&has_bits);
          gidparentcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_notifications = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_suppress_notifications(&has_bits);
          suppress_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_report = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_report(&has_bits);
          is_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool start_hidden = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_start_hidden(&has_bits);
          start_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PostCommentToThread_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PostCommentToThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comment_thread_type(), target);
  }

  // optional fixed64 gidfeature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_gidfeature(), target);
  }

  // optional fixed64 gidfeature2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_gidfeature2(), target);
  }

  // optional string text = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_PostCommentToThread_Request.text");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_text(), target);
  }

  // optional fixed64 gidparentcomment = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_gidparentcomment(), target);
  }

  // optional bool suppress_notifications = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_suppress_notifications(), target);
  }

  // optional bool is_report = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_report(), target);
  }

  // optional bool start_hidden = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_start_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PostCommentToThread_Request)
  return target;
}

size_t CCommunity_PostCommentToThread_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PostCommentToThread_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidfeature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidfeature2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidparentcomment = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comment_thread_type());
    }

    // optional bool suppress_notifications = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_report = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool start_hidden = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PostCommentToThread_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PostCommentToThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PostCommentToThread_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PostCommentToThread_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PostCommentToThread_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PostCommentToThread_Request)
    MergeFrom(*source);
  }
}

void CCommunity_PostCommentToThread_Request::MergeFrom(const CCommunity_PostCommentToThread_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PostCommentToThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gidfeature_ = from.gidfeature_;
    }
    if (cached_has_bits & 0x00000008u) {
      gidfeature2_ = from.gidfeature2_;
    }
    if (cached_has_bits & 0x00000010u) {
      gidparentcomment_ = from.gidparentcomment_;
    }
    if (cached_has_bits & 0x00000020u) {
      comment_thread_type_ = from.comment_thread_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      suppress_notifications_ = from.suppress_notifications_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_report_ = from.is_report_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_start_hidden(from._internal_start_hidden());
  }
}

void CCommunity_PostCommentToThread_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PostCommentToThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PostCommentToThread_Request::CopyFrom(const CCommunity_PostCommentToThread_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PostCommentToThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PostCommentToThread_Request::IsInitialized() const {
  return true;
}

void CCommunity_PostCommentToThread_Request::InternalSwap(CCommunity_PostCommentToThread_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_PostCommentToThread_Request, start_hidden_)
      + sizeof(CCommunity_PostCommentToThread_Request::start_hidden_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_PostCommentToThread_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PostCommentToThread_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PostCommentToThread_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_PostCommentToThread_Response>()._has_bits_);
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commentthreadid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCommunity_PostCommentToThread_Response::CCommunity_PostCommentToThread_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PostCommentToThread_Response)
}
CCommunity_PostCommentToThread_Response::CCommunity_PostCommentToThread_Response(const CCommunity_PostCommentToThread_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gidcomment_, &from.gidcomment_,
    static_cast<size_t>(reinterpret_cast<char*>(&upvotes_) -
    reinterpret_cast<char*>(&gidcomment_)) + sizeof(upvotes_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_PostCommentToThread_Response)
}

void CCommunity_PostCommentToThread_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gidcomment_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upvotes_) -
    reinterpret_cast<char*>(&gidcomment_)) + sizeof(upvotes_));
}

CCommunity_PostCommentToThread_Response::~CCommunity_PostCommentToThread_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_PostCommentToThread_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PostCommentToThread_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PostCommentToThread_Response::ArenaDtor(void* object) {
  CCommunity_PostCommentToThread_Response* _this = reinterpret_cast< CCommunity_PostCommentToThread_Response* >(object);
  (void)_this;
}
void CCommunity_PostCommentToThread_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PostCommentToThread_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PostCommentToThread_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PostCommentToThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&gidcomment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upvotes_) -
        reinterpret_cast<char*>(&gidcomment_)) + sizeof(upvotes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PostCommentToThread_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 gidcomment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 commentthreadid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_commentthreadid(&has_bits);
          commentthreadid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 upvotes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_upvotes(&has_bits);
          upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PostCommentToThread_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PostCommentToThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gidcomment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gidcomment(), target);
  }

  // optional fixed64 commentthreadid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_commentthreadid(), target);
  }

  // optional int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // optional int32 upvotes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_upvotes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PostCommentToThread_Response)
  return target;
}

size_t CCommunity_PostCommentToThread_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PostCommentToThread_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 gidcomment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 commentthreadid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count());
    }

    // optional int32 upvotes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upvotes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PostCommentToThread_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PostCommentToThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PostCommentToThread_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PostCommentToThread_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PostCommentToThread_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PostCommentToThread_Response)
    MergeFrom(*source);
  }
}

void CCommunity_PostCommentToThread_Response::MergeFrom(const CCommunity_PostCommentToThread_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PostCommentToThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000002u) {
      commentthreadid_ = from.commentthreadid_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      upvotes_ = from.upvotes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_PostCommentToThread_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PostCommentToThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PostCommentToThread_Response::CopyFrom(const CCommunity_PostCommentToThread_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PostCommentToThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PostCommentToThread_Response::IsInitialized() const {
  return true;
}

void CCommunity_PostCommentToThread_Response::InternalSwap(CCommunity_PostCommentToThread_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_PostCommentToThread_Response, upvotes_)
      + sizeof(CCommunity_PostCommentToThread_Response::upvotes_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_PostCommentToThread_Response, gidcomment_)>(
          reinterpret_cast<char*>(&gidcomment_),
          reinterpret_cast<char*>(&other->gidcomment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PostCommentToThread_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_DeleteCommentFromThread_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_DeleteCommentFromThread_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment_thread_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gidfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gidfeature2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_undelete(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCommunity_DeleteCommentFromThread_Request::CCommunity_DeleteCommentFromThread_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_DeleteCommentFromThread_Request)
}
CCommunity_DeleteCommentFromThread_Request::CCommunity_DeleteCommentFromThread_Request(const CCommunity_DeleteCommentFromThread_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gidcomment_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(gidcomment_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_DeleteCommentFromThread_Request)
}

void CCommunity_DeleteCommentFromThread_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gidcomment_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(gidcomment_));
}

CCommunity_DeleteCommentFromThread_Request::~CCommunity_DeleteCommentFromThread_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_DeleteCommentFromThread_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_DeleteCommentFromThread_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_DeleteCommentFromThread_Request::ArenaDtor(void* object) {
  CCommunity_DeleteCommentFromThread_Request* _this = reinterpret_cast< CCommunity_DeleteCommentFromThread_Request* >(object);
  (void)_this;
}
void CCommunity_DeleteCommentFromThread_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_DeleteCommentFromThread_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_DeleteCommentFromThread_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_DeleteCommentFromThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gidcomment_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(gidcomment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_DeleteCommentFromThread_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECommentThreadType_IsValid(val))) {
            _internal_set_comment_thread_type(static_cast<::ECommentThreadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gidfeature(&has_bits);
          gidfeature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidfeature2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gidfeature2(&has_bits);
          gidfeature2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 gidcomment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool undelete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_undelete(&has_bits);
          undelete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_DeleteCommentFromThread_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_DeleteCommentFromThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comment_thread_type(), target);
  }

  // optional fixed64 gidfeature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_gidfeature(), target);
  }

  // optional fixed64 gidfeature2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_gidfeature2(), target);
  }

  // optional fixed64 gidcomment = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_gidcomment(), target);
  }

  // optional bool undelete = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_undelete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_DeleteCommentFromThread_Request)
  return target;
}

size_t CCommunity_DeleteCommentFromThread_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_DeleteCommentFromThread_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidfeature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gidfeature2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .ECommentThreadType comment_thread_type = 2 [default = ECommentThreadTypeInvalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comment_thread_type());
    }

    // optional bool undelete = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed64 gidcomment = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_DeleteCommentFromThread_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_DeleteCommentFromThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_DeleteCommentFromThread_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_DeleteCommentFromThread_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_DeleteCommentFromThread_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_DeleteCommentFromThread_Request)
    MergeFrom(*source);
  }
}

void CCommunity_DeleteCommentFromThread_Request::MergeFrom(const CCommunity_DeleteCommentFromThread_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_DeleteCommentFromThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gidfeature_ = from.gidfeature_;
    }
    if (cached_has_bits & 0x00000004u) {
      gidfeature2_ = from.gidfeature2_;
    }
    if (cached_has_bits & 0x00000008u) {
      comment_thread_type_ = from.comment_thread_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      undelete_ = from.undelete_;
    }
    if (cached_has_bits & 0x00000020u) {
      gidcomment_ = from.gidcomment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_DeleteCommentFromThread_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_DeleteCommentFromThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_DeleteCommentFromThread_Request::CopyFrom(const CCommunity_DeleteCommentFromThread_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_DeleteCommentFromThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_DeleteCommentFromThread_Request::IsInitialized() const {
  return true;
}

void CCommunity_DeleteCommentFromThread_Request::InternalSwap(CCommunity_DeleteCommentFromThread_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_DeleteCommentFromThread_Request, gidcomment_)
      + sizeof(CCommunity_DeleteCommentFromThread_Request::gidcomment_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_DeleteCommentFromThread_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_DeleteCommentFromThread_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_DeleteCommentFromThread_Response::_Internal {
 public:
};

CCommunity_DeleteCommentFromThread_Response::CCommunity_DeleteCommentFromThread_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_DeleteCommentFromThread_Response)
}
CCommunity_DeleteCommentFromThread_Response::CCommunity_DeleteCommentFromThread_Response(const CCommunity_DeleteCommentFromThread_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_DeleteCommentFromThread_Response)
}

void CCommunity_DeleteCommentFromThread_Response::SharedCtor() {
}

CCommunity_DeleteCommentFromThread_Response::~CCommunity_DeleteCommentFromThread_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_DeleteCommentFromThread_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_DeleteCommentFromThread_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_DeleteCommentFromThread_Response::ArenaDtor(void* object) {
  CCommunity_DeleteCommentFromThread_Response* _this = reinterpret_cast< CCommunity_DeleteCommentFromThread_Response* >(object);
  (void)_this;
}
void CCommunity_DeleteCommentFromThread_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_DeleteCommentFromThread_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_DeleteCommentFromThread_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_DeleteCommentFromThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_DeleteCommentFromThread_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_DeleteCommentFromThread_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_DeleteCommentFromThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_DeleteCommentFromThread_Response)
  return target;
}

size_t CCommunity_DeleteCommentFromThread_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_DeleteCommentFromThread_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_DeleteCommentFromThread_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_DeleteCommentFromThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_DeleteCommentFromThread_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_DeleteCommentFromThread_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_DeleteCommentFromThread_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_DeleteCommentFromThread_Response)
    MergeFrom(*source);
  }
}

void CCommunity_DeleteCommentFromThread_Response::MergeFrom(const CCommunity_DeleteCommentFromThread_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_DeleteCommentFromThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_DeleteCommentFromThread_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_DeleteCommentFromThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_DeleteCommentFromThread_Response::CopyFrom(const CCommunity_DeleteCommentFromThread_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_DeleteCommentFromThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_DeleteCommentFromThread_Response::IsInitialized() const {
  return true;
}

void CCommunity_DeleteCommentFromThread_Response::InternalSwap(CCommunity_DeleteCommentFromThread_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_DeleteCommentFromThread_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_RateCommentThread_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_RateCommentThread_Request>()._has_bits_);
  static void set_has_commentthreadtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gidfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gidfeature2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rate_up(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_suppress_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCommunity_RateCommentThread_Request::CCommunity_RateCommentThread_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_RateCommentThread_Request)
}
CCommunity_RateCommentThread_Request::CCommunity_RateCommentThread_Request(const CCommunity_RateCommentThread_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commentthreadtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commentthreadtype()) {
    commentthreadtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commentthreadtype(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&suppress_notifications_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(suppress_notifications_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_RateCommentThread_Request)
}

void CCommunity_RateCommentThread_Request::SharedCtor() {
commentthreadtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&suppress_notifications_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(suppress_notifications_));
}

CCommunity_RateCommentThread_Request::~CCommunity_RateCommentThread_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_RateCommentThread_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_RateCommentThread_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  commentthreadtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_RateCommentThread_Request::ArenaDtor(void* object) {
  CCommunity_RateCommentThread_Request* _this = reinterpret_cast< CCommunity_RateCommentThread_Request* >(object);
  (void)_this;
}
void CCommunity_RateCommentThread_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_RateCommentThread_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_RateCommentThread_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_RateCommentThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    commentthreadtype_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suppress_notifications_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(suppress_notifications_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_RateCommentThread_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string commentthreadtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_commentthreadtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_RateCommentThread_Request.commentthreadtype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidfeature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gidfeature(&has_bits);
          gidfeature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidfeature2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gidfeature2(&has_bits);
          gidfeature2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidcomment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rate_up = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rate_up(&has_bits);
          rate_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_notifications = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_suppress_notifications(&has_bits);
          suppress_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_RateCommentThread_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_RateCommentThread_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string commentthreadtype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commentthreadtype().data(), static_cast<int>(this->_internal_commentthreadtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_RateCommentThread_Request.commentthreadtype");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_commentthreadtype(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional uint64 gidfeature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gidfeature(), target);
  }

  // optional uint64 gidfeature2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gidfeature2(), target);
  }

  // optional uint64 gidcomment = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gidcomment(), target);
  }

  // optional bool rate_up = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rate_up(), target);
  }

  // optional bool suppress_notifications = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_suppress_notifications(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_RateCommentThread_Request)
  return target;
}

size_t CCommunity_RateCommentThread_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_RateCommentThread_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string commentthreadtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_commentthreadtype());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steamid());
    }

    // optional uint64 gidfeature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidfeature());
    }

    // optional uint64 gidfeature2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidfeature2());
    }

    // optional uint64 gidcomment = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidcomment());
    }

    // optional bool rate_up = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool suppress_notifications = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_RateCommentThread_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_RateCommentThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_RateCommentThread_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_RateCommentThread_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_RateCommentThread_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_RateCommentThread_Request)
    MergeFrom(*source);
  }
}

void CCommunity_RateCommentThread_Request::MergeFrom(const CCommunity_RateCommentThread_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_RateCommentThread_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_commentthreadtype(from._internal_commentthreadtype());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gidfeature_ = from.gidfeature_;
    }
    if (cached_has_bits & 0x00000008u) {
      gidfeature2_ = from.gidfeature2_;
    }
    if (cached_has_bits & 0x00000010u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000020u) {
      rate_up_ = from.rate_up_;
    }
    if (cached_has_bits & 0x00000040u) {
      suppress_notifications_ = from.suppress_notifications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_RateCommentThread_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_RateCommentThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_RateCommentThread_Request::CopyFrom(const CCommunity_RateCommentThread_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_RateCommentThread_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_RateCommentThread_Request::IsInitialized() const {
  return true;
}

void CCommunity_RateCommentThread_Request::InternalSwap(CCommunity_RateCommentThread_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commentthreadtype_.Swap(&other->commentthreadtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_RateCommentThread_Request, suppress_notifications_)
      + sizeof(CCommunity_RateCommentThread_Request::suppress_notifications_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_RateCommentThread_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_RateCommentThread_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_RateCommentThread_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_RateCommentThread_Response>()._has_bits_);
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commentthreadid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_upvoted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCommunity_RateCommentThread_Response::CCommunity_RateCommentThread_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_RateCommentThread_Response)
}
CCommunity_RateCommentThread_Response::CCommunity_RateCommentThread_Response(const CCommunity_RateCommentThread_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gidcomment_, &from.gidcomment_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_upvoted_) -
    reinterpret_cast<char*>(&gidcomment_)) + sizeof(has_upvoted_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_RateCommentThread_Response)
}

void CCommunity_RateCommentThread_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gidcomment_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_upvoted_) -
    reinterpret_cast<char*>(&gidcomment_)) + sizeof(has_upvoted_));
}

CCommunity_RateCommentThread_Response::~CCommunity_RateCommentThread_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_RateCommentThread_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_RateCommentThread_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_RateCommentThread_Response::ArenaDtor(void* object) {
  CCommunity_RateCommentThread_Response* _this = reinterpret_cast< CCommunity_RateCommentThread_Response* >(object);
  (void)_this;
}
void CCommunity_RateCommentThread_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_RateCommentThread_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_RateCommentThread_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_RateCommentThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&gidcomment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_upvoted_) -
        reinterpret_cast<char*>(&gidcomment_)) + sizeof(has_upvoted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_RateCommentThread_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 gidcomment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 commentthreadid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_commentthreadid(&has_bits);
          commentthreadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 upvotes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_upvotes(&has_bits);
          upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_upvoted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_upvoted(&has_bits);
          has_upvoted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_RateCommentThread_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_RateCommentThread_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gidcomment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gidcomment(), target);
  }

  // optional uint64 commentthreadid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_commentthreadid(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional uint32 upvotes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_upvotes(), target);
  }

  // optional bool has_upvoted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_upvoted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_RateCommentThread_Response)
  return target;
}

size_t CCommunity_RateCommentThread_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_RateCommentThread_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 gidcomment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidcomment());
    }

    // optional uint64 commentthreadid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_commentthreadid());
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 upvotes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_upvotes());
    }

    // optional bool has_upvoted = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_RateCommentThread_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_RateCommentThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_RateCommentThread_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_RateCommentThread_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_RateCommentThread_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_RateCommentThread_Response)
    MergeFrom(*source);
  }
}

void CCommunity_RateCommentThread_Response::MergeFrom(const CCommunity_RateCommentThread_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_RateCommentThread_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000002u) {
      commentthreadid_ = from.commentthreadid_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      upvotes_ = from.upvotes_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_upvoted_ = from.has_upvoted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_RateCommentThread_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_RateCommentThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_RateCommentThread_Response::CopyFrom(const CCommunity_RateCommentThread_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_RateCommentThread_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_RateCommentThread_Response::IsInitialized() const {
  return true;
}

void CCommunity_RateCommentThread_Response::InternalSwap(CCommunity_RateCommentThread_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_RateCommentThread_Response, has_upvoted_)
      + sizeof(CCommunity_RateCommentThread_Response::has_upvoted_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_RateCommentThread_Response, gidcomment_)>(
          reinterpret_cast<char*>(&gidcomment_),
          reinterpret_cast<char*>(&other->gidcomment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_RateCommentThread_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetCommentThreadRatings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetCommentThreadRatings_Request>()._has_bits_);
  static void set_has_commentthreadtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gidfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gidfeature2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_results(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CCommunity_GetCommentThreadRatings_Request::CCommunity_GetCommentThreadRatings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetCommentThreadRatings_Request)
}
CCommunity_GetCommentThreadRatings_Request::CCommunity_GetCommentThreadRatings_Request(const CCommunity_GetCommentThreadRatings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commentthreadtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commentthreadtype()) {
    commentthreadtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commentthreadtype(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetCommentThreadRatings_Request)
}

void CCommunity_GetCommentThreadRatings_Request::SharedCtor() {
commentthreadtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(max_results_));
}

CCommunity_GetCommentThreadRatings_Request::~CCommunity_GetCommentThreadRatings_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetCommentThreadRatings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetCommentThreadRatings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  commentthreadtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetCommentThreadRatings_Request::ArenaDtor(void* object) {
  CCommunity_GetCommentThreadRatings_Request* _this = reinterpret_cast< CCommunity_GetCommentThreadRatings_Request* >(object);
  (void)_this;
}
void CCommunity_GetCommentThreadRatings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetCommentThreadRatings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetCommentThreadRatings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetCommentThreadRatings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    commentthreadtype_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_results_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(max_results_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetCommentThreadRatings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string commentthreadtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_commentthreadtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetCommentThreadRatings_Request.commentthreadtype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidfeature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gidfeature(&has_bits);
          gidfeature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidfeature2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gidfeature2(&has_bits);
          gidfeature2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidcomment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_results = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_results(&has_bits);
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetCommentThreadRatings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetCommentThreadRatings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string commentthreadtype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commentthreadtype().data(), static_cast<int>(this->_internal_commentthreadtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetCommentThreadRatings_Request.commentthreadtype");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_commentthreadtype(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional uint64 gidfeature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gidfeature(), target);
  }

  // optional uint64 gidfeature2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gidfeature2(), target);
  }

  // optional uint64 gidcomment = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gidcomment(), target);
  }

  // optional uint32 max_results = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetCommentThreadRatings_Request)
  return target;
}

size_t CCommunity_GetCommentThreadRatings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetCommentThreadRatings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string commentthreadtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_commentthreadtype());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steamid());
    }

    // optional uint64 gidfeature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidfeature());
    }

    // optional uint64 gidfeature2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidfeature2());
    }

    // optional uint64 gidcomment = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidcomment());
    }

    // optional uint32 max_results = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_results());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetCommentThreadRatings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetCommentThreadRatings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetCommentThreadRatings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetCommentThreadRatings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetCommentThreadRatings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetCommentThreadRatings_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetCommentThreadRatings_Request::MergeFrom(const CCommunity_GetCommentThreadRatings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetCommentThreadRatings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_commentthreadtype(from._internal_commentthreadtype());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gidfeature_ = from.gidfeature_;
    }
    if (cached_has_bits & 0x00000008u) {
      gidfeature2_ = from.gidfeature2_;
    }
    if (cached_has_bits & 0x00000010u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_results_ = from.max_results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetCommentThreadRatings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetCommentThreadRatings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetCommentThreadRatings_Request::CopyFrom(const CCommunity_GetCommentThreadRatings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetCommentThreadRatings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetCommentThreadRatings_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetCommentThreadRatings_Request::InternalSwap(CCommunity_GetCommentThreadRatings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commentthreadtype_.Swap(&other->commentthreadtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThreadRatings_Request, max_results_)
      + sizeof(CCommunity_GetCommentThreadRatings_Request::max_results_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThreadRatings_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetCommentThreadRatings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetCommentThreadRatings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetCommentThreadRatings_Response>()._has_bits_);
  static void set_has_commentthreadid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gidcomment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_upvoted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCommunity_GetCommentThreadRatings_Response::CCommunity_GetCommentThreadRatings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  upvoter_accountids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetCommentThreadRatings_Response)
}
CCommunity_GetCommentThreadRatings_Response::CCommunity_GetCommentThreadRatings_Response(const CCommunity_GetCommentThreadRatings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      upvoter_accountids_(from.upvoter_accountids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commentthreadid_, &from.commentthreadid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_upvoted_) -
    reinterpret_cast<char*>(&commentthreadid_)) + sizeof(has_upvoted_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetCommentThreadRatings_Response)
}

void CCommunity_GetCommentThreadRatings_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commentthreadid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_upvoted_) -
    reinterpret_cast<char*>(&commentthreadid_)) + sizeof(has_upvoted_));
}

CCommunity_GetCommentThreadRatings_Response::~CCommunity_GetCommentThreadRatings_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetCommentThreadRatings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetCommentThreadRatings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetCommentThreadRatings_Response::ArenaDtor(void* object) {
  CCommunity_GetCommentThreadRatings_Response* _this = reinterpret_cast< CCommunity_GetCommentThreadRatings_Response* >(object);
  (void)_this;
}
void CCommunity_GetCommentThreadRatings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetCommentThreadRatings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetCommentThreadRatings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetCommentThreadRatings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upvoter_accountids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&commentthreadid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_upvoted_) -
        reinterpret_cast<char*>(&commentthreadid_)) + sizeof(has_upvoted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetCommentThreadRatings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 commentthreadid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_commentthreadid(&has_bits);
          commentthreadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gidcomment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gidcomment(&has_bits);
          gidcomment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 upvotes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_upvotes(&has_bits);
          upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_upvoted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_upvoted(&has_bits);
          has_upvoted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 upvoter_accountids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_upvoter_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_upvoter_accountids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetCommentThreadRatings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetCommentThreadRatings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 commentthreadid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commentthreadid(), target);
  }

  // optional uint64 gidcomment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gidcomment(), target);
  }

  // optional uint32 upvotes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_upvotes(), target);
  }

  // optional bool has_upvoted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_upvoted(), target);
  }

  // repeated uint32 upvoter_accountids = 5;
  for (int i = 0, n = this->_internal_upvoter_accountids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_upvoter_accountids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetCommentThreadRatings_Response)
  return target;
}

size_t CCommunity_GetCommentThreadRatings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetCommentThreadRatings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 upvoter_accountids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->upvoter_accountids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_upvoter_accountids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 commentthreadid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_commentthreadid());
    }

    // optional uint64 gidcomment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gidcomment());
    }

    // optional uint32 upvotes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_upvotes());
    }

    // optional bool has_upvoted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetCommentThreadRatings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetCommentThreadRatings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetCommentThreadRatings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetCommentThreadRatings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetCommentThreadRatings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetCommentThreadRatings_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetCommentThreadRatings_Response::MergeFrom(const CCommunity_GetCommentThreadRatings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetCommentThreadRatings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  upvoter_accountids_.MergeFrom(from.upvoter_accountids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      commentthreadid_ = from.commentthreadid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gidcomment_ = from.gidcomment_;
    }
    if (cached_has_bits & 0x00000004u) {
      upvotes_ = from.upvotes_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_upvoted_ = from.has_upvoted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetCommentThreadRatings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetCommentThreadRatings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetCommentThreadRatings_Response::CopyFrom(const CCommunity_GetCommentThreadRatings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetCommentThreadRatings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetCommentThreadRatings_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetCommentThreadRatings_Response::InternalSwap(CCommunity_GetCommentThreadRatings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  upvoter_accountids_.InternalSwap(&other->upvoter_accountids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThreadRatings_Response, has_upvoted_)
      + sizeof(CCommunity_GetCommentThreadRatings_Response::has_upvoted_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetCommentThreadRatings_Response, commentthreadid_)>(
          reinterpret_cast<char*>(&commentthreadid_),
          reinterpret_cast<char*>(&other->commentthreadid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetCommentThreadRatings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_RateClanAnnouncement_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_RateClanAnnouncement_Request>()._has_bits_);
  static void set_has_announcementid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clan_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_RateClanAnnouncement_Request::CCommunity_RateClanAnnouncement_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_RateClanAnnouncement_Request)
}
CCommunity_RateClanAnnouncement_Request::CCommunity_RateClanAnnouncement_Request(const CCommunity_RateClanAnnouncement_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&announcementid_, &from.announcementid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clan_accountid_) -
    reinterpret_cast<char*>(&announcementid_)) + sizeof(clan_accountid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_RateClanAnnouncement_Request)
}

void CCommunity_RateClanAnnouncement_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&announcementid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clan_accountid_) -
    reinterpret_cast<char*>(&announcementid_)) + sizeof(clan_accountid_));
}

CCommunity_RateClanAnnouncement_Request::~CCommunity_RateClanAnnouncement_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_RateClanAnnouncement_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_RateClanAnnouncement_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_RateClanAnnouncement_Request::ArenaDtor(void* object) {
  CCommunity_RateClanAnnouncement_Request* _this = reinterpret_cast< CCommunity_RateClanAnnouncement_Request* >(object);
  (void)_this;
}
void CCommunity_RateClanAnnouncement_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_RateClanAnnouncement_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_RateClanAnnouncement_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_RateClanAnnouncement_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&announcementid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clan_accountid_) -
        reinterpret_cast<char*>(&announcementid_)) + sizeof(clan_accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_RateClanAnnouncement_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 announcementid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_announcementid(&has_bits);
          announcementid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vote_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vote_up(&has_bits);
          vote_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 clan_accountid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clan_accountid(&has_bits);
          clan_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_RateClanAnnouncement_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_RateClanAnnouncement_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 announcementid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_announcementid(), target);
  }

  // optional bool vote_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_up(), target);
  }

  // optional uint32 clan_accountid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_clan_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_RateClanAnnouncement_Request)
  return target;
}

size_t CCommunity_RateClanAnnouncement_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_RateClanAnnouncement_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 announcementid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_announcementid());
    }

    // optional bool vote_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 clan_accountid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clan_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_RateClanAnnouncement_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_RateClanAnnouncement_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_RateClanAnnouncement_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_RateClanAnnouncement_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_RateClanAnnouncement_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_RateClanAnnouncement_Request)
    MergeFrom(*source);
  }
}

void CCommunity_RateClanAnnouncement_Request::MergeFrom(const CCommunity_RateClanAnnouncement_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_RateClanAnnouncement_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      announcementid_ = from.announcementid_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_up_ = from.vote_up_;
    }
    if (cached_has_bits & 0x00000004u) {
      clan_accountid_ = from.clan_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_RateClanAnnouncement_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_RateClanAnnouncement_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_RateClanAnnouncement_Request::CopyFrom(const CCommunity_RateClanAnnouncement_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_RateClanAnnouncement_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_RateClanAnnouncement_Request::IsInitialized() const {
  return true;
}

void CCommunity_RateClanAnnouncement_Request::InternalSwap(CCommunity_RateClanAnnouncement_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_RateClanAnnouncement_Request, clan_accountid_)
      + sizeof(CCommunity_RateClanAnnouncement_Request::clan_accountid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_RateClanAnnouncement_Request, announcementid_)>(
          reinterpret_cast<char*>(&announcementid_),
          reinterpret_cast<char*>(&other->announcementid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_RateClanAnnouncement_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_RateClanAnnouncement_Response::_Internal {
 public:
};

CCommunity_RateClanAnnouncement_Response::CCommunity_RateClanAnnouncement_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_RateClanAnnouncement_Response)
}
CCommunity_RateClanAnnouncement_Response::CCommunity_RateClanAnnouncement_Response(const CCommunity_RateClanAnnouncement_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_RateClanAnnouncement_Response)
}

void CCommunity_RateClanAnnouncement_Response::SharedCtor() {
}

CCommunity_RateClanAnnouncement_Response::~CCommunity_RateClanAnnouncement_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_RateClanAnnouncement_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_RateClanAnnouncement_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_RateClanAnnouncement_Response::ArenaDtor(void* object) {
  CCommunity_RateClanAnnouncement_Response* _this = reinterpret_cast< CCommunity_RateClanAnnouncement_Response* >(object);
  (void)_this;
}
void CCommunity_RateClanAnnouncement_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_RateClanAnnouncement_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_RateClanAnnouncement_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_RateClanAnnouncement_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_RateClanAnnouncement_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_RateClanAnnouncement_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_RateClanAnnouncement_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_RateClanAnnouncement_Response)
  return target;
}

size_t CCommunity_RateClanAnnouncement_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_RateClanAnnouncement_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_RateClanAnnouncement_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_RateClanAnnouncement_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_RateClanAnnouncement_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_RateClanAnnouncement_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_RateClanAnnouncement_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_RateClanAnnouncement_Response)
    MergeFrom(*source);
  }
}

void CCommunity_RateClanAnnouncement_Response::MergeFrom(const CCommunity_RateClanAnnouncement_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_RateClanAnnouncement_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_RateClanAnnouncement_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_RateClanAnnouncement_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_RateClanAnnouncement_Response::CopyFrom(const CCommunity_RateClanAnnouncement_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_RateClanAnnouncement_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_RateClanAnnouncement_Response::IsInitialized() const {
  return true;
}

void CCommunity_RateClanAnnouncement_Response::InternalSwap(CCommunity_RateClanAnnouncement_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_RateClanAnnouncement_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanAnnouncementVoteForUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanAnnouncementVoteForUser_Request>()._has_bits_);
  static void set_has_announcementid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetClanAnnouncementVoteForUser_Request::CCommunity_GetClanAnnouncementVoteForUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanAnnouncementVoteForUser_Request)
}
CCommunity_GetClanAnnouncementVoteForUser_Request::CCommunity_GetClanAnnouncementVoteForUser_Request(const CCommunity_GetClanAnnouncementVoteForUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announcementid_ = from.announcementid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanAnnouncementVoteForUser_Request)
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::SharedCtor() {
announcementid_ = PROTOBUF_ULONGLONG(0);
}

CCommunity_GetClanAnnouncementVoteForUser_Request::~CCommunity_GetClanAnnouncementVoteForUser_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanAnnouncementVoteForUser_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::ArenaDtor(void* object) {
  CCommunity_GetClanAnnouncementVoteForUser_Request* _this = reinterpret_cast< CCommunity_GetClanAnnouncementVoteForUser_Request* >(object);
  (void)_this;
}
void CCommunity_GetClanAnnouncementVoteForUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanAnnouncementVoteForUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announcementid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanAnnouncementVoteForUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 announcementid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_announcementid(&has_bits);
          announcementid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanAnnouncementVoteForUser_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 announcementid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_announcementid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanAnnouncementVoteForUser_Request)
  return target;
}

size_t CCommunity_GetClanAnnouncementVoteForUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 announcementid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_announcementid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanAnnouncementVoteForUser_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanAnnouncementVoteForUser_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanAnnouncementVoteForUser_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanAnnouncementVoteForUser_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::MergeFrom(const CCommunity_GetClanAnnouncementVoteForUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_announcementid()) {
    _internal_set_announcementid(from._internal_announcementid());
  }
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::CopyFrom(const CCommunity_GetClanAnnouncementVoteForUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanAnnouncementVoteForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanAnnouncementVoteForUser_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetClanAnnouncementVoteForUser_Request::InternalSwap(CCommunity_GetClanAnnouncementVoteForUser_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(announcementid_, other->announcementid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanAnnouncementVoteForUser_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanAnnouncementVoteForUser_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanAnnouncementVoteForUser_Response>()._has_bits_);
  static void set_has_voted_up(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voted_down(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetClanAnnouncementVoteForUser_Response::CCommunity_GetClanAnnouncementVoteForUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanAnnouncementVoteForUser_Response)
}
CCommunity_GetClanAnnouncementVoteForUser_Response::CCommunity_GetClanAnnouncementVoteForUser_Response(const CCommunity_GetClanAnnouncementVoteForUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voted_up_, &from.voted_up_,
    static_cast<size_t>(reinterpret_cast<char*>(&voted_down_) -
    reinterpret_cast<char*>(&voted_up_)) + sizeof(voted_down_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanAnnouncementVoteForUser_Response)
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voted_up_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voted_down_) -
    reinterpret_cast<char*>(&voted_up_)) + sizeof(voted_down_));
}

CCommunity_GetClanAnnouncementVoteForUser_Response::~CCommunity_GetClanAnnouncementVoteForUser_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanAnnouncementVoteForUser_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::ArenaDtor(void* object) {
  CCommunity_GetClanAnnouncementVoteForUser_Response* _this = reinterpret_cast< CCommunity_GetClanAnnouncementVoteForUser_Response* >(object);
  (void)_this;
}
void CCommunity_GetClanAnnouncementVoteForUser_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanAnnouncementVoteForUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voted_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voted_down_) -
      reinterpret_cast<char*>(&voted_up_)) + sizeof(voted_down_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanAnnouncementVoteForUser_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool voted_up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_voted_up(&has_bits);
          voted_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool voted_down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_voted_down(&has_bits);
          voted_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanAnnouncementVoteForUser_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool voted_up = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_voted_up(), target);
  }

  // optional bool voted_down = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_voted_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanAnnouncementVoteForUser_Response)
  return target;
}

size_t CCommunity_GetClanAnnouncementVoteForUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool voted_up = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool voted_down = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanAnnouncementVoteForUser_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanAnnouncementVoteForUser_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanAnnouncementVoteForUser_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanAnnouncementVoteForUser_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::MergeFrom(const CCommunity_GetClanAnnouncementVoteForUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      voted_up_ = from.voted_up_;
    }
    if (cached_has_bits & 0x00000002u) {
      voted_down_ = from.voted_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::CopyFrom(const CCommunity_GetClanAnnouncementVoteForUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanAnnouncementVoteForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanAnnouncementVoteForUser_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetClanAnnouncementVoteForUser_Response::InternalSwap(CCommunity_GetClanAnnouncementVoteForUser_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetClanAnnouncementVoteForUser_Response, voted_down_)
      + sizeof(CCommunity_GetClanAnnouncementVoteForUser_Response::voted_down_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetClanAnnouncementVoteForUser_Response, voted_up_)>(
          reinterpret_cast<char*>(&voted_up_),
          reinterpret_cast<char*>(&other->voted_up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanAnnouncementVoteForUser_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAvatarHistory_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetAvatarHistory_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter_user_uploaded_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetAvatarHistory_Request::CCommunity_GetAvatarHistory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAvatarHistory_Request)
}
CCommunity_GetAvatarHistory_Request::CCommunity_GetAvatarHistory_Request(const CCommunity_GetAvatarHistory_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_user_uploaded_only_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(filter_user_uploaded_only_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAvatarHistory_Request)
}

void CCommunity_GetAvatarHistory_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_user_uploaded_only_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(filter_user_uploaded_only_));
}

CCommunity_GetAvatarHistory_Request::~CCommunity_GetAvatarHistory_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAvatarHistory_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAvatarHistory_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetAvatarHistory_Request::ArenaDtor(void* object) {
  CCommunity_GetAvatarHistory_Request* _this = reinterpret_cast< CCommunity_GetAvatarHistory_Request* >(object);
  (void)_this;
}
void CCommunity_GetAvatarHistory_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAvatarHistory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAvatarHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAvatarHistory_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_user_uploaded_only_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(filter_user_uploaded_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAvatarHistory_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool filter_user_uploaded_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_filter_user_uploaded_only(&has_bits);
          filter_user_uploaded_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAvatarHistory_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAvatarHistory_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool filter_user_uploaded_only = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_filter_user_uploaded_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAvatarHistory_Request)
  return target;
}

size_t CCommunity_GetAvatarHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAvatarHistory_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool filter_user_uploaded_only = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAvatarHistory_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAvatarHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAvatarHistory_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAvatarHistory_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAvatarHistory_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAvatarHistory_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetAvatarHistory_Request::MergeFrom(const CCommunity_GetAvatarHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAvatarHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      filter_user_uploaded_only_ = from.filter_user_uploaded_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetAvatarHistory_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAvatarHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAvatarHistory_Request::CopyFrom(const CCommunity_GetAvatarHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAvatarHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAvatarHistory_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetAvatarHistory_Request::InternalSwap(CCommunity_GetAvatarHistory_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetAvatarHistory_Request, filter_user_uploaded_only_)
      + sizeof(CCommunity_GetAvatarHistory_Request::filter_user_uploaded_only_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetAvatarHistory_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAvatarHistory_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAvatarHistory_Response_AvatarData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetAvatarHistory_Response_AvatarData>()._has_bits_);
  static void set_has_avatar_sha1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_uploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GetAvatarHistory_Response_AvatarData::CCommunity_GetAvatarHistory_Response_AvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAvatarHistory_Response.AvatarData)
}
CCommunity_GetAvatarHistory_Response_AvatarData::CCommunity_GetAvatarHistory_Response_AvatarData(const CCommunity_GetAvatarHistory_Response_AvatarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatar_sha1()) {
    avatar_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_sha1(), 
      GetArena());
  }
  ::memcpy(&user_uploaded_, &from.user_uploaded_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&user_uploaded_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAvatarHistory_Response.AvatarData)
}

void CCommunity_GetAvatarHistory_Response_AvatarData::SharedCtor() {
avatar_sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_uploaded_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&user_uploaded_)) + sizeof(timestamp_));
}

CCommunity_GetAvatarHistory_Response_AvatarData::~CCommunity_GetAvatarHistory_Response_AvatarData() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAvatarHistory_Response.AvatarData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAvatarHistory_Response_AvatarData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_sha1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetAvatarHistory_Response_AvatarData::ArenaDtor(void* object) {
  CCommunity_GetAvatarHistory_Response_AvatarData* _this = reinterpret_cast< CCommunity_GetAvatarHistory_Response_AvatarData* >(object);
  (void)_this;
}
void CCommunity_GetAvatarHistory_Response_AvatarData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAvatarHistory_Response_AvatarData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAvatarHistory_Response_AvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatar_sha1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&user_uploaded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&user_uploaded_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAvatarHistory_Response_AvatarData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string avatar_sha1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_avatar_sha1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetAvatarHistory_Response.AvatarData.avatar_sha1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_uploaded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_uploaded(&has_bits);
          user_uploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAvatarHistory_Response_AvatarData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string avatar_sha1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_sha1().data(), static_cast<int>(this->_internal_avatar_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetAvatarHistory_Response.AvatarData.avatar_sha1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_avatar_sha1(), target);
  }

  // optional bool user_uploaded = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_user_uploaded(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAvatarHistory_Response.AvatarData)
  return target;
}

size_t CCommunity_GetAvatarHistory_Response_AvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string avatar_sha1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_sha1());
    }

    // optional bool user_uploaded = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAvatarHistory_Response_AvatarData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAvatarHistory_Response_AvatarData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAvatarHistory_Response_AvatarData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAvatarHistory_Response.AvatarData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAvatarHistory_Response.AvatarData)
    MergeFrom(*source);
  }
}

void CCommunity_GetAvatarHistory_Response_AvatarData::MergeFrom(const CCommunity_GetAvatarHistory_Response_AvatarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatar_sha1(from._internal_avatar_sha1());
    }
    if (cached_has_bits & 0x00000002u) {
      user_uploaded_ = from.user_uploaded_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetAvatarHistory_Response_AvatarData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAvatarHistory_Response_AvatarData::CopyFrom(const CCommunity_GetAvatarHistory_Response_AvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAvatarHistory_Response.AvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAvatarHistory_Response_AvatarData::IsInitialized() const {
  return true;
}

void CCommunity_GetAvatarHistory_Response_AvatarData::InternalSwap(CCommunity_GetAvatarHistory_Response_AvatarData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatar_sha1_.Swap(&other->avatar_sha1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetAvatarHistory_Response_AvatarData, timestamp_)
      + sizeof(CCommunity_GetAvatarHistory_Response_AvatarData::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetAvatarHistory_Response_AvatarData, user_uploaded_)>(
          reinterpret_cast<char*>(&user_uploaded_),
          reinterpret_cast<char*>(&other->user_uploaded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAvatarHistory_Response_AvatarData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetAvatarHistory_Response::_Internal {
 public:
};

CCommunity_GetAvatarHistory_Response::CCommunity_GetAvatarHistory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  avatars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetAvatarHistory_Response)
}
CCommunity_GetAvatarHistory_Response::CCommunity_GetAvatarHistory_Response(const CCommunity_GetAvatarHistory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      avatars_(from.avatars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetAvatarHistory_Response)
}

void CCommunity_GetAvatarHistory_Response::SharedCtor() {
}

CCommunity_GetAvatarHistory_Response::~CCommunity_GetAvatarHistory_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetAvatarHistory_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetAvatarHistory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetAvatarHistory_Response::ArenaDtor(void* object) {
  CCommunity_GetAvatarHistory_Response* _this = reinterpret_cast< CCommunity_GetAvatarHistory_Response* >(object);
  (void)_this;
}
void CCommunity_GetAvatarHistory_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetAvatarHistory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetAvatarHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetAvatarHistory_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetAvatarHistory_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCommunity_GetAvatarHistory_Response.AvatarData avatars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_avatars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetAvatarHistory_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetAvatarHistory_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_GetAvatarHistory_Response.AvatarData avatars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_avatars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_avatars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetAvatarHistory_Response)
  return target;
}

size_t CCommunity_GetAvatarHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetAvatarHistory_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GetAvatarHistory_Response.AvatarData avatars = 1;
  total_size += 1UL * this->_internal_avatars_size();
  for (const auto& msg : this->avatars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetAvatarHistory_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetAvatarHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetAvatarHistory_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetAvatarHistory_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetAvatarHistory_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetAvatarHistory_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetAvatarHistory_Response::MergeFrom(const CCommunity_GetAvatarHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetAvatarHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatars_.MergeFrom(from.avatars_);
}

void CCommunity_GetAvatarHistory_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetAvatarHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetAvatarHistory_Response::CopyFrom(const CCommunity_GetAvatarHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetAvatarHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetAvatarHistory_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetAvatarHistory_Response::InternalSwap(CCommunity_GetAvatarHistory_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatars_.InternalSwap(&other->avatars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetAvatarHistory_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanEventCrowdInMetadata_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanEventCrowdInMetadata_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetClanEventCrowdInMetadata_Request::CCommunity_GetClanEventCrowdInMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanEventCrowdInMetadata_Request)
}
CCommunity_GetClanEventCrowdInMetadata_Request::CCommunity_GetClanEventCrowdInMetadata_Request(const CCommunity_GetClanEventCrowdInMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanEventCrowdInMetadata_Request)
}

void CCommunity_GetClanEventCrowdInMetadata_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(itemid_));
}

CCommunity_GetClanEventCrowdInMetadata_Request::~CCommunity_GetClanEventCrowdInMetadata_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanEventCrowdInMetadata_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanEventCrowdInMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanEventCrowdInMetadata_Request::ArenaDtor(void* object) {
  CCommunity_GetClanEventCrowdInMetadata_Request* _this = reinterpret_cast< CCommunity_GetClanEventCrowdInMetadata_Request* >(object);
  (void)_this;
}
void CCommunity_GetClanEventCrowdInMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanEventCrowdInMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanEventCrowdInMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanEventCrowdInMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanEventCrowdInMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanEventCrowdInMetadata_Request)
  return target;
}

size_t CCommunity_GetClanEventCrowdInMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanEventCrowdInMetadata_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanEventCrowdInMetadata_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanEventCrowdInMetadata_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanEventCrowdInMetadata_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanEventCrowdInMetadata_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanEventCrowdInMetadata_Request::MergeFrom(const CCommunity_GetClanEventCrowdInMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetClanEventCrowdInMetadata_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanEventCrowdInMetadata_Request::CopyFrom(const CCommunity_GetClanEventCrowdInMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanEventCrowdInMetadata_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanEventCrowdInMetadata_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetClanEventCrowdInMetadata_Request::InternalSwap(CCommunity_GetClanEventCrowdInMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetClanEventCrowdInMetadata_Request, itemid_)
      + sizeof(CCommunity_GetClanEventCrowdInMetadata_Request::itemid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetClanEventCrowdInMetadata_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanEventCrowdInMetadata_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanEventCrowdInMetadata_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanEventCrowdInMetadata_Response>()._has_bits_);
  static void set_has_crowdin_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crowdin_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetClanEventCrowdInMetadata_Response::CCommunity_GetClanEventCrowdInMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanEventCrowdInMetadata_Response)
}
CCommunity_GetClanEventCrowdInMetadata_Response::CCommunity_GetClanEventCrowdInMetadata_Response(const CCommunity_GetClanEventCrowdInMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&crowdin_project_id_, &from.crowdin_project_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crowdin_file_id_) -
    reinterpret_cast<char*>(&crowdin_project_id_)) + sizeof(crowdin_file_id_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanEventCrowdInMetadata_Response)
}

void CCommunity_GetClanEventCrowdInMetadata_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crowdin_project_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crowdin_file_id_) -
    reinterpret_cast<char*>(&crowdin_project_id_)) + sizeof(crowdin_file_id_));
}

CCommunity_GetClanEventCrowdInMetadata_Response::~CCommunity_GetClanEventCrowdInMetadata_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanEventCrowdInMetadata_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanEventCrowdInMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanEventCrowdInMetadata_Response::ArenaDtor(void* object) {
  CCommunity_GetClanEventCrowdInMetadata_Response* _this = reinterpret_cast< CCommunity_GetClanEventCrowdInMetadata_Response* >(object);
  (void)_this;
}
void CCommunity_GetClanEventCrowdInMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanEventCrowdInMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanEventCrowdInMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&crowdin_project_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crowdin_file_id_) -
        reinterpret_cast<char*>(&crowdin_project_id_)) + sizeof(crowdin_file_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanEventCrowdInMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 crowdin_project_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crowdin_project_id(&has_bits);
          crowdin_project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 crowdin_file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crowdin_file_id(&has_bits);
          crowdin_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanEventCrowdInMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 crowdin_project_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_crowdin_project_id(), target);
  }

  // optional uint64 crowdin_file_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_crowdin_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanEventCrowdInMetadata_Response)
  return target;
}

size_t CCommunity_GetClanEventCrowdInMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 crowdin_project_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_crowdin_project_id());
    }

    // optional uint64 crowdin_file_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_crowdin_file_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanEventCrowdInMetadata_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanEventCrowdInMetadata_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanEventCrowdInMetadata_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanEventCrowdInMetadata_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanEventCrowdInMetadata_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanEventCrowdInMetadata_Response::MergeFrom(const CCommunity_GetClanEventCrowdInMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      crowdin_project_id_ = from.crowdin_project_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crowdin_file_id_ = from.crowdin_file_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetClanEventCrowdInMetadata_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanEventCrowdInMetadata_Response::CopyFrom(const CCommunity_GetClanEventCrowdInMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanEventCrowdInMetadata_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanEventCrowdInMetadata_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetClanEventCrowdInMetadata_Response::InternalSwap(CCommunity_GetClanEventCrowdInMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetClanEventCrowdInMetadata_Response, crowdin_file_id_)
      + sizeof(CCommunity_GetClanEventCrowdInMetadata_Response::crowdin_file_id_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetClanEventCrowdInMetadata_Response, crowdin_project_id_)>(
          reinterpret_cast<char*>(&crowdin_project_id_),
          reinterpret_cast<char*>(&other->crowdin_project_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanEventCrowdInMetadata_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanCrowdInMetadata_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanCrowdInMetadata_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetClanCrowdInMetadata_Request::CCommunity_GetClanCrowdInMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanCrowdInMetadata_Request)
}
CCommunity_GetClanCrowdInMetadata_Request::CCommunity_GetClanCrowdInMetadata_Request(const CCommunity_GetClanCrowdInMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanCrowdInMetadata_Request)
}

void CCommunity_GetClanCrowdInMetadata_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CCommunity_GetClanCrowdInMetadata_Request::~CCommunity_GetClanCrowdInMetadata_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanCrowdInMetadata_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanCrowdInMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanCrowdInMetadata_Request::ArenaDtor(void* object) {
  CCommunity_GetClanCrowdInMetadata_Request* _this = reinterpret_cast< CCommunity_GetClanCrowdInMetadata_Request* >(object);
  (void)_this;
}
void CCommunity_GetClanCrowdInMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanCrowdInMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanCrowdInMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanCrowdInMetadata_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanCrowdInMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanCrowdInMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanCrowdInMetadata_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanCrowdInMetadata_Request)
  return target;
}

size_t CCommunity_GetClanCrowdInMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanCrowdInMetadata_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanCrowdInMetadata_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanCrowdInMetadata_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanCrowdInMetadata_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanCrowdInMetadata_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanCrowdInMetadata_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanCrowdInMetadata_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanCrowdInMetadata_Request::MergeFrom(const CCommunity_GetClanCrowdInMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanCrowdInMetadata_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CCommunity_GetClanCrowdInMetadata_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanCrowdInMetadata_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanCrowdInMetadata_Request::CopyFrom(const CCommunity_GetClanCrowdInMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanCrowdInMetadata_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanCrowdInMetadata_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetClanCrowdInMetadata_Request::InternalSwap(CCommunity_GetClanCrowdInMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanCrowdInMetadata_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanCrowdInMetadata_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanCrowdInMetadata_Response>()._has_bits_);
  static void set_has_crowdin_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crowdin_directory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_push_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GetClanCrowdInMetadata_Response::CCommunity_GetClanCrowdInMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanCrowdInMetadata_Response)
}
CCommunity_GetClanCrowdInMetadata_Response::CCommunity_GetClanCrowdInMetadata_Response(const CCommunity_GetClanCrowdInMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&crowdin_project_id_, &from.crowdin_project_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&push_by_default_) -
    reinterpret_cast<char*>(&crowdin_project_id_)) + sizeof(push_by_default_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanCrowdInMetadata_Response)
}

void CCommunity_GetClanCrowdInMetadata_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crowdin_project_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&push_by_default_) -
    reinterpret_cast<char*>(&crowdin_project_id_)) + sizeof(push_by_default_));
}

CCommunity_GetClanCrowdInMetadata_Response::~CCommunity_GetClanCrowdInMetadata_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanCrowdInMetadata_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanCrowdInMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanCrowdInMetadata_Response::ArenaDtor(void* object) {
  CCommunity_GetClanCrowdInMetadata_Response* _this = reinterpret_cast< CCommunity_GetClanCrowdInMetadata_Response* >(object);
  (void)_this;
}
void CCommunity_GetClanCrowdInMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanCrowdInMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanCrowdInMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanCrowdInMetadata_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&crowdin_project_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&push_by_default_) -
        reinterpret_cast<char*>(&crowdin_project_id_)) + sizeof(push_by_default_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanCrowdInMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 crowdin_project_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crowdin_project_id(&has_bits);
          crowdin_project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 crowdin_directory_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crowdin_directory_id(&has_bits);
          crowdin_directory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool push_by_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_push_by_default(&has_bits);
          push_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanCrowdInMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanCrowdInMetadata_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 crowdin_project_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_crowdin_project_id(), target);
  }

  // optional uint64 crowdin_directory_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_crowdin_directory_id(), target);
  }

  // optional bool push_by_default = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_push_by_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanCrowdInMetadata_Response)
  return target;
}

size_t CCommunity_GetClanCrowdInMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanCrowdInMetadata_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 crowdin_project_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_crowdin_project_id());
    }

    // optional uint64 crowdin_directory_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_crowdin_directory_id());
    }

    // optional bool push_by_default = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanCrowdInMetadata_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanCrowdInMetadata_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanCrowdInMetadata_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanCrowdInMetadata_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanCrowdInMetadata_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanCrowdInMetadata_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanCrowdInMetadata_Response::MergeFrom(const CCommunity_GetClanCrowdInMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanCrowdInMetadata_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      crowdin_project_id_ = from.crowdin_project_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      crowdin_directory_id_ = from.crowdin_directory_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      push_by_default_ = from.push_by_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetClanCrowdInMetadata_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanCrowdInMetadata_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanCrowdInMetadata_Response::CopyFrom(const CCommunity_GetClanCrowdInMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanCrowdInMetadata_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanCrowdInMetadata_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetClanCrowdInMetadata_Response::InternalSwap(CCommunity_GetClanCrowdInMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetClanCrowdInMetadata_Response, push_by_default_)
      + sizeof(CCommunity_GetClanCrowdInMetadata_Response::push_by_default_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetClanCrowdInMetadata_Response, crowdin_project_id_)>(
          reinterpret_cast<char*>(&crowdin_project_id_),
          reinterpret_cast<char*>(&other->crowdin_project_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanCrowdInMetadata_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_FetchTranslationFromCrowdIn_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_FetchTranslationFromCrowdIn_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_FetchTranslationFromCrowdIn_Request::CCommunity_FetchTranslationFromCrowdIn_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_FetchTranslationFromCrowdIn_Request)
}
CCommunity_FetchTranslationFromCrowdIn_Request::CCommunity_FetchTranslationFromCrowdIn_Request(const CCommunity_FetchTranslationFromCrowdIn_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_FetchTranslationFromCrowdIn_Request)
}

void CCommunity_FetchTranslationFromCrowdIn_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(language_));
}

CCommunity_FetchTranslationFromCrowdIn_Request::~CCommunity_FetchTranslationFromCrowdIn_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_FetchTranslationFromCrowdIn_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_FetchTranslationFromCrowdIn_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_FetchTranslationFromCrowdIn_Request::ArenaDtor(void* object) {
  CCommunity_FetchTranslationFromCrowdIn_Request* _this = reinterpret_cast< CCommunity_FetchTranslationFromCrowdIn_Request* >(object);
  (void)_this;
}
void CCommunity_FetchTranslationFromCrowdIn_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_FetchTranslationFromCrowdIn_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_FetchTranslationFromCrowdIn_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_FetchTranslationFromCrowdIn_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_FetchTranslationFromCrowdIn_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_FetchTranslationFromCrowdIn_Request)
  return target;
}

size_t CCommunity_FetchTranslationFromCrowdIn_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_itemid());
    }

    // optional uint32 language = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_language());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_FetchTranslationFromCrowdIn_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_FetchTranslationFromCrowdIn_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_FetchTranslationFromCrowdIn_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_FetchTranslationFromCrowdIn_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_FetchTranslationFromCrowdIn_Request)
    MergeFrom(*source);
  }
}

void CCommunity_FetchTranslationFromCrowdIn_Request::MergeFrom(const CCommunity_FetchTranslationFromCrowdIn_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_FetchTranslationFromCrowdIn_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_FetchTranslationFromCrowdIn_Request::CopyFrom(const CCommunity_FetchTranslationFromCrowdIn_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_FetchTranslationFromCrowdIn_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_FetchTranslationFromCrowdIn_Request::IsInitialized() const {
  return true;
}

void CCommunity_FetchTranslationFromCrowdIn_Request::InternalSwap(CCommunity_FetchTranslationFromCrowdIn_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_FetchTranslationFromCrowdIn_Request, language_)
      + sizeof(CCommunity_FetchTranslationFromCrowdIn_Request::language_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_FetchTranslationFromCrowdIn_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_FetchTranslationFromCrowdIn_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_FetchTranslationFromCrowdIn_Response::_Internal {
 public:
};

CCommunity_FetchTranslationFromCrowdIn_Response::CCommunity_FetchTranslationFromCrowdIn_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_FetchTranslationFromCrowdIn_Response)
}
CCommunity_FetchTranslationFromCrowdIn_Response::CCommunity_FetchTranslationFromCrowdIn_Response(const CCommunity_FetchTranslationFromCrowdIn_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_FetchTranslationFromCrowdIn_Response)
}

void CCommunity_FetchTranslationFromCrowdIn_Response::SharedCtor() {
}

CCommunity_FetchTranslationFromCrowdIn_Response::~CCommunity_FetchTranslationFromCrowdIn_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_FetchTranslationFromCrowdIn_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_FetchTranslationFromCrowdIn_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_FetchTranslationFromCrowdIn_Response::ArenaDtor(void* object) {
  CCommunity_FetchTranslationFromCrowdIn_Response* _this = reinterpret_cast< CCommunity_FetchTranslationFromCrowdIn_Response* >(object);
  (void)_this;
}
void CCommunity_FetchTranslationFromCrowdIn_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_FetchTranslationFromCrowdIn_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_FetchTranslationFromCrowdIn_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_FetchTranslationFromCrowdIn_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_FetchTranslationFromCrowdIn_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_FetchTranslationFromCrowdIn_Response)
  return target;
}

size_t CCommunity_FetchTranslationFromCrowdIn_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_FetchTranslationFromCrowdIn_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_FetchTranslationFromCrowdIn_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_FetchTranslationFromCrowdIn_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_FetchTranslationFromCrowdIn_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_FetchTranslationFromCrowdIn_Response)
    MergeFrom(*source);
  }
}

void CCommunity_FetchTranslationFromCrowdIn_Response::MergeFrom(const CCommunity_FetchTranslationFromCrowdIn_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_FetchTranslationFromCrowdIn_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_FetchTranslationFromCrowdIn_Response::CopyFrom(const CCommunity_FetchTranslationFromCrowdIn_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_FetchTranslationFromCrowdIn_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_FetchTranslationFromCrowdIn_Response::IsInitialized() const {
  return true;
}

void CCommunity_FetchTranslationFromCrowdIn_Response::InternalSwap(CCommunity_FetchTranslationFromCrowdIn_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_FetchTranslationFromCrowdIn_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAppPriority::_Internal {
 public:
  using HasBits = decltype(std::declval<CAppPriority>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAppPriority::CAppPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAppPriority)
}
CAppPriority::CAppPriority(const CAppPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appid_(from.appid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:CAppPriority)
}

void CAppPriority::SharedCtor() {
priority_ = 0u;
}

CAppPriority::~CAppPriority() {
  // @@protoc_insertion_point(destructor:CAppPriority)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAppPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAppPriority::ArenaDtor(void* object) {
  CAppPriority* _this = reinterpret_cast< CAppPriority* >(object);
  (void)_this;
}
void CAppPriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAppPriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAppPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:CAppPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_.Clear();
  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAppPriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAppPriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAppPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // repeated uint32 appid = 2;
  for (int i = 0, n = this->_internal_appid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAppPriority)
  return target;
}

size_t CAppPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAppPriority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appid_size());
    total_size += data_size;
  }

  // optional uint32 priority = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAppPriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAppPriority)
  GOOGLE_DCHECK_NE(&from, this);
  const CAppPriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAppPriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAppPriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAppPriority)
    MergeFrom(*source);
  }
}

void CAppPriority::MergeFrom(const CAppPriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAppPriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appid_.MergeFrom(from.appid_);
  if (from._internal_has_priority()) {
    _internal_set_priority(from._internal_priority());
  }
}

void CAppPriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAppPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAppPriority::CopyFrom(const CAppPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAppPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAppPriority::IsInitialized() const {
  return true;
}

void CAppPriority::InternalSwap(CAppPriority* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appid_.InternalSwap(&other->appid_);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAppPriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventNews_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetUserPartnerEventNews_Request>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime32_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtime32_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_to_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count_after(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCommunity_GetUserPartnerEventNews_Request::CCommunity_GetUserPartnerEventNews_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  language_preference_(arena),
  filter_event_type_(arena),
  app_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventNews_Request)
}
CCommunity_GetUserPartnerEventNews_Request::CCommunity_GetUserPartnerEventNews_Request(const CCommunity_GetUserPartnerEventNews_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      language_preference_(from.language_preference_),
      filter_event_type_(from.filter_event_type_),
      app_list_(from.app_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_before_) -
    reinterpret_cast<char*>(&count_)) + sizeof(count_before_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventNews_Request)
}

void CCommunity_GetUserPartnerEventNews_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_before_) -
    reinterpret_cast<char*>(&count_)) + sizeof(count_before_));
}

CCommunity_GetUserPartnerEventNews_Request::~CCommunity_GetUserPartnerEventNews_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventNews_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventNews_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventNews_Request::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventNews_Request* _this = reinterpret_cast< CCommunity_GetUserPartnerEventNews_Request* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventNews_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventNews_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventNews_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventNews_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_preference_.Clear();
  filter_event_type_.Clear();
  app_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_before_) -
        reinterpret_cast<char*>(&count_)) + sizeof(count_before_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventNews_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rtime32_start_time(&has_bits);
          rtime32_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rtime32_end_time(&has_bits);
          rtime32_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 language_preference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_language_preference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_language_preference(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EProtoClanEventType filter_event_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EProtoClanEventType_IsValid(val))) {
              _internal_add_filter_event_type(static_cast<::EProtoClanEventType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_filter_event_type(), ptr, ctx, ::EProtoClanEventType_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_to_appid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_filter_to_appid(&has_bits);
          filter_to_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CAppPriority app_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 count_after = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_count_after(&has_bits);
          count_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count_before = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_count_before(&has_bits);
          count_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventNews_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventNews_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // optional uint32 rtime32_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtime32_start_time(), target);
  }

  // optional uint32 rtime32_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rtime32_end_time(), target);
  }

  // repeated uint32 language_preference = 5;
  for (int i = 0, n = this->_internal_language_preference_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_language_preference(i), target);
  }

  // repeated .EProtoClanEventType filter_event_type = 6;
  for (int i = 0, n = this->_internal_filter_event_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_filter_event_type(i), target);
  }

  // optional bool filter_to_appid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_filter_to_appid(), target);
  }

  // repeated .CAppPriority app_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_app_list(i), target, stream);
  }

  // optional uint32 count_after = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_count_after(), target);
  }

  // optional uint32 count_before = 10 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_count_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventNews_Request)
  return target;
}

size_t CCommunity_GetUserPartnerEventNews_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventNews_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 language_preference = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->language_preference_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_language_preference_size());
    total_size += data_size;
  }

  // repeated .EProtoClanEventType filter_event_type = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_filter_event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_filter_event_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .CAppPriority app_list = 8;
  total_size += 1UL * this->_internal_app_list_size();
  for (const auto& msg : this->app_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offset());
    }

    // optional uint32 rtime32_start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_start_time());
    }

    // optional uint32 rtime32_end_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_end_time());
    }

    // optional bool filter_to_appid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 count_after = 9 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count_after());
    }

    // optional uint32 count_before = 10 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count_before());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventNews_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventNews_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventNews_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventNews_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventNews_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventNews_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventNews_Request::MergeFrom(const CCommunity_GetUserPartnerEventNews_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventNews_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  language_preference_.MergeFrom(from.language_preference_);
  filter_event_type_.MergeFrom(from.filter_event_type_);
  app_list_.MergeFrom(from.app_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime32_start_time_ = from.rtime32_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_end_time_ = from.rtime32_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_to_appid_ = from.filter_to_appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_after_ = from.count_after_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_before_ = from.count_before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetUserPartnerEventNews_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventNews_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventNews_Request::CopyFrom(const CCommunity_GetUserPartnerEventNews_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventNews_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventNews_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventNews_Request::InternalSwap(CCommunity_GetUserPartnerEventNews_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_preference_.InternalSwap(&other->language_preference_);
  filter_event_type_.InternalSwap(&other->filter_event_type_);
  app_list_.InternalSwap(&other->app_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetUserPartnerEventNews_Request, count_before_)
      + sizeof(CCommunity_GetUserPartnerEventNews_Request::count_before_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetUserPartnerEventNews_Request, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventNews_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventNews_Response::_Internal {
 public:
};

void CCommunity_GetUserPartnerEventNews_Response::clear_results() {
  results_.Clear();
}
CCommunity_GetUserPartnerEventNews_Response::CCommunity_GetUserPartnerEventNews_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventNews_Response)
}
CCommunity_GetUserPartnerEventNews_Response::CCommunity_GetUserPartnerEventNews_Response(const CCommunity_GetUserPartnerEventNews_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventNews_Response)
}

void CCommunity_GetUserPartnerEventNews_Response::SharedCtor() {
}

CCommunity_GetUserPartnerEventNews_Response::~CCommunity_GetUserPartnerEventNews_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventNews_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventNews_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventNews_Response::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventNews_Response* _this = reinterpret_cast< CCommunity_GetUserPartnerEventNews_Response* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventNews_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventNews_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventNews_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventNews_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventNews_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CClanMatchEventByRange results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventNews_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventNews_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CClanMatchEventByRange results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventNews_Response)
  return target;
}

size_t CCommunity_GetUserPartnerEventNews_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventNews_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClanMatchEventByRange results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventNews_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventNews_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventNews_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventNews_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventNews_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventNews_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventNews_Response::MergeFrom(const CCommunity_GetUserPartnerEventNews_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventNews_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CCommunity_GetUserPartnerEventNews_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventNews_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventNews_Response::CopyFrom(const CCommunity_GetUserPartnerEventNews_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventNews_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventNews_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventNews_Response::InternalSwap(CCommunity_GetUserPartnerEventNews_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventNews_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetBestEventsForUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetBestEventsForUser_Request>()._has_bits_);
  static void set_has_include_steam_blog(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filter_to_played_within_days(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_only_game_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GetBestEventsForUser_Request::CCommunity_GetBestEventsForUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetBestEventsForUser_Request)
}
CCommunity_GetBestEventsForUser_Request::CCommunity_GetBestEventsForUser_Request(const CCommunity_GetBestEventsForUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&filter_to_played_within_days_, &from.filter_to_played_within_days_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_only_game_updates_) -
    reinterpret_cast<char*>(&filter_to_played_within_days_)) + sizeof(include_only_game_updates_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetBestEventsForUser_Request)
}

void CCommunity_GetBestEventsForUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filter_to_played_within_days_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_only_game_updates_) -
    reinterpret_cast<char*>(&filter_to_played_within_days_)) + sizeof(include_only_game_updates_));
}

CCommunity_GetBestEventsForUser_Request::~CCommunity_GetBestEventsForUser_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetBestEventsForUser_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetBestEventsForUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetBestEventsForUser_Request::ArenaDtor(void* object) {
  CCommunity_GetBestEventsForUser_Request* _this = reinterpret_cast< CCommunity_GetBestEventsForUser_Request* >(object);
  (void)_this;
}
void CCommunity_GetBestEventsForUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetBestEventsForUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetBestEventsForUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetBestEventsForUser_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&filter_to_played_within_days_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_only_game_updates_) -
        reinterpret_cast<char*>(&filter_to_played_within_days_)) + sizeof(include_only_game_updates_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetBestEventsForUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool include_steam_blog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_include_steam_blog(&has_bits);
          include_steam_blog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filter_to_played_within_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_filter_to_played_within_days(&has_bits);
          filter_to_played_within_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_only_game_updates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_only_game_updates(&has_bits);
          include_only_game_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetBestEventsForUser_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetBestEventsForUser_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_steam_blog = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_steam_blog(), target);
  }

  // optional uint32 filter_to_played_within_days = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_filter_to_played_within_days(), target);
  }

  // optional bool include_only_game_updates = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_only_game_updates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetBestEventsForUser_Request)
  return target;
}

size_t CCommunity_GetBestEventsForUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetBestEventsForUser_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 filter_to_played_within_days = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter_to_played_within_days());
    }

    // optional bool include_steam_blog = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool include_only_game_updates = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetBestEventsForUser_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetBestEventsForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetBestEventsForUser_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetBestEventsForUser_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetBestEventsForUser_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetBestEventsForUser_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetBestEventsForUser_Request::MergeFrom(const CCommunity_GetBestEventsForUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetBestEventsForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      filter_to_played_within_days_ = from.filter_to_played_within_days_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_steam_blog_ = from.include_steam_blog_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_only_game_updates_ = from.include_only_game_updates_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetBestEventsForUser_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetBestEventsForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetBestEventsForUser_Request::CopyFrom(const CCommunity_GetBestEventsForUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetBestEventsForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetBestEventsForUser_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetBestEventsForUser_Request::InternalSwap(CCommunity_GetBestEventsForUser_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetBestEventsForUser_Request, include_only_game_updates_)
      + sizeof(CCommunity_GetBestEventsForUser_Request::include_only_game_updates_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetBestEventsForUser_Request, filter_to_played_within_days_)>(
          reinterpret_cast<char*>(&filter_to_played_within_days_),
          reinterpret_cast<char*>(&other->filter_to_played_within_days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetBestEventsForUser_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PartnerEventResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_PartnerEventResult>()._has_bits_);
  static void set_has_clanid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_possible_takeover(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime32_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_app_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCommunity_PartnerEventResult::CCommunity_PartnerEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PartnerEventResult)
}
CCommunity_PartnerEventResult::CCommunity_PartnerEventResult(const CCommunity_PartnerEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_gid_, &from.event_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_app_priority_) -
    reinterpret_cast<char*>(&event_gid_)) + sizeof(user_app_priority_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_PartnerEventResult)
}

void CCommunity_PartnerEventResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_app_priority_) -
    reinterpret_cast<char*>(&event_gid_)) + sizeof(user_app_priority_));
}

CCommunity_PartnerEventResult::~CCommunity_PartnerEventResult() {
  // @@protoc_insertion_point(destructor:CCommunity_PartnerEventResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PartnerEventResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PartnerEventResult::ArenaDtor(void* object) {
  CCommunity_PartnerEventResult* _this = reinterpret_cast< CCommunity_PartnerEventResult* >(object);
  (void)_this;
}
void CCommunity_PartnerEventResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PartnerEventResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PartnerEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PartnerEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&event_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_app_priority_) -
        reinterpret_cast<char*>(&event_gid_)) + sizeof(user_app_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PartnerEventResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 clanid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_clanid(&has_bits);
          clanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 event_gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_event_gid(&has_bits);
          event_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 announcement_gid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_announcement_gid(&has_bits);
          announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool possible_takeover = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_possible_takeover(&has_bits);
          possible_takeover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_last_modified = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rtime32_last_modified(&has_bits);
          rtime32_last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_app_priority = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_user_app_priority(&has_bits);
          user_app_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PartnerEventResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PartnerEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clanid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clanid(), target);
  }

  // optional fixed64 event_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_event_gid(), target);
  }

  // optional fixed64 announcement_gid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_announcement_gid(), target);
  }

  // optional uint32 appid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_appid(), target);
  }

  // optional bool possible_takeover = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_possible_takeover(), target);
  }

  // optional uint32 rtime32_last_modified = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rtime32_last_modified(), target);
  }

  // optional int32 user_app_priority = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_user_app_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PartnerEventResult)
  return target;
}

size_t CCommunity_PartnerEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PartnerEventResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed64 event_gid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 clanid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clanid());
    }

    // optional uint32 appid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional fixed64 announcement_gid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool possible_takeover = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 rtime32_last_modified = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_last_modified());
    }

    // optional int32 user_app_priority = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_app_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PartnerEventResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PartnerEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PartnerEventResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PartnerEventResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PartnerEventResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PartnerEventResult)
    MergeFrom(*source);
  }
}

void CCommunity_PartnerEventResult::MergeFrom(const CCommunity_PartnerEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PartnerEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      event_gid_ = from.event_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      clanid_ = from.clanid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      announcement_gid_ = from.announcement_gid_;
    }
    if (cached_has_bits & 0x00000010u) {
      possible_takeover_ = from.possible_takeover_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtime32_last_modified_ = from.rtime32_last_modified_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_app_priority_ = from.user_app_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_PartnerEventResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PartnerEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PartnerEventResult::CopyFrom(const CCommunity_PartnerEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PartnerEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PartnerEventResult::IsInitialized() const {
  return true;
}

void CCommunity_PartnerEventResult::InternalSwap(CCommunity_PartnerEventResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_PartnerEventResult, user_app_priority_)
      + sizeof(CCommunity_PartnerEventResult::user_app_priority_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_PartnerEventResult, event_gid_)>(
          reinterpret_cast<char*>(&event_gid_),
          reinterpret_cast<char*>(&other->event_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PartnerEventResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetBestEventsForUser_Response::_Internal {
 public:
};

CCommunity_GetBestEventsForUser_Response::CCommunity_GetBestEventsForUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetBestEventsForUser_Response)
}
CCommunity_GetBestEventsForUser_Response::CCommunity_GetBestEventsForUser_Response(const CCommunity_GetBestEventsForUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetBestEventsForUser_Response)
}

void CCommunity_GetBestEventsForUser_Response::SharedCtor() {
}

CCommunity_GetBestEventsForUser_Response::~CCommunity_GetBestEventsForUser_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetBestEventsForUser_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetBestEventsForUser_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetBestEventsForUser_Response::ArenaDtor(void* object) {
  CCommunity_GetBestEventsForUser_Response* _this = reinterpret_cast< CCommunity_GetBestEventsForUser_Response* >(object);
  (void)_this;
}
void CCommunity_GetBestEventsForUser_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetBestEventsForUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetBestEventsForUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetBestEventsForUser_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetBestEventsForUser_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCommunity_PartnerEventResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetBestEventsForUser_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetBestEventsForUser_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_PartnerEventResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetBestEventsForUser_Response)
  return target;
}

size_t CCommunity_GetBestEventsForUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetBestEventsForUser_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_PartnerEventResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetBestEventsForUser_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetBestEventsForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetBestEventsForUser_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetBestEventsForUser_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetBestEventsForUser_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetBestEventsForUser_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetBestEventsForUser_Response::MergeFrom(const CCommunity_GetBestEventsForUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetBestEventsForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CCommunity_GetBestEventsForUser_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetBestEventsForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetBestEventsForUser_Response::CopyFrom(const CCommunity_GetBestEventsForUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetBestEventsForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetBestEventsForUser_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetBestEventsForUser_Response::InternalSwap(CCommunity_GetBestEventsForUser_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetBestEventsForUser_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking>()._has_bits_);
  static void set_has_clanid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_marshown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_marread(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
}
CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking(const CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_gid_, &from.event_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&marread_) -
    reinterpret_cast<char*>(&event_gid_)) + sizeof(marread_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&marread_) -
    reinterpret_cast<char*>(&event_gid_)) + sizeof(marread_));
}

CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::~CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking() {
  // @@protoc_insertion_point(destructor:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::ArenaDtor(void* object) {
  CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking* _this = reinterpret_cast< CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking* >(object);
  (void)_this;
}
void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&marread_) -
        reinterpret_cast<char*>(&event_gid_)) + sizeof(marread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 clanid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_clanid(&has_bits);
          clanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 event_gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_event_gid(&has_bits);
          event_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .EPartnerEventDisplayLocation display_location = 3 [default = EPartnerEventDisplayLocation_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPartnerEventDisplayLocation_IsValid(val))) {
            _internal_set_display_location(static_cast<::EPartnerEventDisplayLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool marshown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_marshown(&has_bits);
          marshown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool marread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_marread(&has_bits);
          marread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clanid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clanid(), target);
  }

  // optional fixed64 event_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_event_gid(), target);
  }

  // optional .EPartnerEventDisplayLocation display_location = 3 [default = EPartnerEventDisplayLocation_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_display_location(), target);
  }

  // optional bool marshown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_marshown(), target);
  }

  // optional bool marread = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_marread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  return target;
}

size_t CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 event_gid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 clanid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clanid());
    }

    // optional .EPartnerEventDisplayLocation display_location = 3 [default = EPartnerEventDisplayLocation_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_display_location());
    }

    // optional bool marshown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool marread = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
    MergeFrom(*source);
  }
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::MergeFrom(const CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_gid_ = from.event_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      clanid_ = from.clanid_;
    }
    if (cached_has_bits & 0x00000004u) {
      display_location_ = from.display_location_;
    }
    if (cached_has_bits & 0x00000008u) {
      marshown_ = from.marshown_;
    }
    if (cached_has_bits & 0x00000010u) {
      marread_ = from.marread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::CopyFrom(const CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::IsInitialized() const {
  return true;
}

void CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::InternalSwap(CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, marread_)
      + sizeof(CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::marread_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking, event_gid_)>(
          reinterpret_cast<char*>(&event_gid_),
          reinterpret_cast<char*>(&other->event_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_MarkPartnerEventsForUser_Request::_Internal {
 public:
};

CCommunity_MarkPartnerEventsForUser_Request::CCommunity_MarkPartnerEventsForUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_MarkPartnerEventsForUser_Request)
}
CCommunity_MarkPartnerEventsForUser_Request::CCommunity_MarkPartnerEventsForUser_Request(const CCommunity_MarkPartnerEventsForUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markings_(from.markings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_MarkPartnerEventsForUser_Request)
}

void CCommunity_MarkPartnerEventsForUser_Request::SharedCtor() {
}

CCommunity_MarkPartnerEventsForUser_Request::~CCommunity_MarkPartnerEventsForUser_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_MarkPartnerEventsForUser_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_MarkPartnerEventsForUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_MarkPartnerEventsForUser_Request::ArenaDtor(void* object) {
  CCommunity_MarkPartnerEventsForUser_Request* _this = reinterpret_cast< CCommunity_MarkPartnerEventsForUser_Request* >(object);
  (void)_this;
}
void CCommunity_MarkPartnerEventsForUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_MarkPartnerEventsForUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_MarkPartnerEventsForUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_MarkPartnerEventsForUser_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_MarkPartnerEventsForUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking markings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_MarkPartnerEventsForUser_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_MarkPartnerEventsForUser_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking markings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_MarkPartnerEventsForUser_Request)
  return target;
}

size_t CCommunity_MarkPartnerEventsForUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_MarkPartnerEventsForUser_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking markings = 1;
  total_size += 1UL * this->_internal_markings_size();
  for (const auto& msg : this->markings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_MarkPartnerEventsForUser_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_MarkPartnerEventsForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_MarkPartnerEventsForUser_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_MarkPartnerEventsForUser_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_MarkPartnerEventsForUser_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_MarkPartnerEventsForUser_Request)
    MergeFrom(*source);
  }
}

void CCommunity_MarkPartnerEventsForUser_Request::MergeFrom(const CCommunity_MarkPartnerEventsForUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_MarkPartnerEventsForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markings_.MergeFrom(from.markings_);
}

void CCommunity_MarkPartnerEventsForUser_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_MarkPartnerEventsForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_MarkPartnerEventsForUser_Request::CopyFrom(const CCommunity_MarkPartnerEventsForUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_MarkPartnerEventsForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_MarkPartnerEventsForUser_Request::IsInitialized() const {
  return true;
}

void CCommunity_MarkPartnerEventsForUser_Request::InternalSwap(CCommunity_MarkPartnerEventsForUser_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markings_.InternalSwap(&other->markings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_MarkPartnerEventsForUser_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_MarkPartnerEventsForUser_Response::_Internal {
 public:
};

CCommunity_MarkPartnerEventsForUser_Response::CCommunity_MarkPartnerEventsForUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_MarkPartnerEventsForUser_Response)
}
CCommunity_MarkPartnerEventsForUser_Response::CCommunity_MarkPartnerEventsForUser_Response(const CCommunity_MarkPartnerEventsForUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_MarkPartnerEventsForUser_Response)
}

void CCommunity_MarkPartnerEventsForUser_Response::SharedCtor() {
}

CCommunity_MarkPartnerEventsForUser_Response::~CCommunity_MarkPartnerEventsForUser_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_MarkPartnerEventsForUser_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_MarkPartnerEventsForUser_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_MarkPartnerEventsForUser_Response::ArenaDtor(void* object) {
  CCommunity_MarkPartnerEventsForUser_Response* _this = reinterpret_cast< CCommunity_MarkPartnerEventsForUser_Response* >(object);
  (void)_this;
}
void CCommunity_MarkPartnerEventsForUser_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_MarkPartnerEventsForUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_MarkPartnerEventsForUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_MarkPartnerEventsForUser_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_MarkPartnerEventsForUser_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_MarkPartnerEventsForUser_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_MarkPartnerEventsForUser_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_MarkPartnerEventsForUser_Response)
  return target;
}

size_t CCommunity_MarkPartnerEventsForUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_MarkPartnerEventsForUser_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_MarkPartnerEventsForUser_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_MarkPartnerEventsForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_MarkPartnerEventsForUser_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_MarkPartnerEventsForUser_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_MarkPartnerEventsForUser_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_MarkPartnerEventsForUser_Response)
    MergeFrom(*source);
  }
}

void CCommunity_MarkPartnerEventsForUser_Response::MergeFrom(const CCommunity_MarkPartnerEventsForUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_MarkPartnerEventsForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_MarkPartnerEventsForUser_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_MarkPartnerEventsForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_MarkPartnerEventsForUser_Response::CopyFrom(const CCommunity_MarkPartnerEventsForUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_MarkPartnerEventsForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_MarkPartnerEventsForUser_Response::IsInitialized() const {
  return true;
}

void CCommunity_MarkPartnerEventsForUser_Response::InternalSwap(CCommunity_MarkPartnerEventsForUser_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_MarkPartnerEventsForUser_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventViewStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetUserPartnerEventViewStatus_Request>()._has_bits_);
  static void set_has_include_read_events_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetUserPartnerEventViewStatus_Request::CCommunity_GetUserPartnerEventViewStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  event_gids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventViewStatus_Request)
}
CCommunity_GetUserPartnerEventViewStatus_Request::CCommunity_GetUserPartnerEventViewStatus_Request(const CCommunity_GetUserPartnerEventViewStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      event_gids_(from.event_gids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  include_read_events_only_ = from.include_read_events_only_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventViewStatus_Request)
}

void CCommunity_GetUserPartnerEventViewStatus_Request::SharedCtor() {
include_read_events_only_ = false;
}

CCommunity_GetUserPartnerEventViewStatus_Request::~CCommunity_GetUserPartnerEventViewStatus_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventViewStatus_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventViewStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventViewStatus_Request::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventViewStatus_Request* _this = reinterpret_cast< CCommunity_GetUserPartnerEventViewStatus_Request* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventViewStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventViewStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventViewStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_gids_.Clear();
  include_read_events_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventViewStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 event_gids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_event_gids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_event_gids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_read_events_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_include_read_events_only(&has_bits);
          include_read_events_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventViewStatus_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 event_gids = 1;
  for (int i = 0, n = this->_internal_event_gids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_event_gids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool include_read_events_only = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_read_events_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventViewStatus_Request)
  return target;
}

size_t CCommunity_GetUserPartnerEventViewStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 event_gids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_event_gids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_event_gids_size());
    total_size += data_size;
  }

  // optional bool include_read_events_only = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventViewStatus_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventViewStatus_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventViewStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventViewStatus_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventViewStatus_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventViewStatus_Request::MergeFrom(const CCommunity_GetUserPartnerEventViewStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_gids_.MergeFrom(from.event_gids_);
  if (from._internal_has_include_read_events_only()) {
    _internal_set_include_read_events_only(from._internal_include_read_events_only());
  }
}

void CCommunity_GetUserPartnerEventViewStatus_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventViewStatus_Request::CopyFrom(const CCommunity_GetUserPartnerEventViewStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventViewStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventViewStatus_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventViewStatus_Request::InternalSwap(CCommunity_GetUserPartnerEventViewStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_gids_.InternalSwap(&other->event_gids_);
  swap(include_read_events_only_, other->include_read_events_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventViewStatus_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent>()._has_bits_);
  static void set_has_event_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_shown_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_read_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clan_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
}
CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent(const CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_gid_, &from.event_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clan_account_id_) -
    reinterpret_cast<char*>(&event_gid_)) + sizeof(clan_account_id_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clan_account_id_) -
    reinterpret_cast<char*>(&event_gid_)) + sizeof(clan_account_id_));
}

CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::~CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent* _this = reinterpret_cast< CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&event_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clan_account_id_) -
        reinterpret_cast<char*>(&event_gid_)) + sizeof(clan_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 event_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_event_gid(&has_bits);
          event_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_shown_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_shown_time(&has_bits);
          last_shown_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_read_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_read_time(&has_bits);
          last_read_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 clan_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clan_account_id(&has_bits);
          clan_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 event_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_event_gid(), target);
  }

  // optional uint32 last_shown_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_shown_time(), target);
  }

  // optional uint32 last_read_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_read_time(), target);
  }

  // optional uint32 clan_account_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_clan_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  return target;
}

size_t CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 event_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_shown_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_shown_time());
    }

    // optional uint32 last_read_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_read_time());
    }

    // optional uint32 clan_account_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clan_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::MergeFrom(const CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_gid_ = from.event_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_shown_time_ = from.last_shown_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_read_time_ = from.last_read_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      clan_account_id_ = from.clan_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::CopyFrom(const CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::InternalSwap(CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, clan_account_id_)
      + sizeof(CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::clan_account_id_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent, event_gid_)>(
          reinterpret_cast<char*>(&event_gid_),
          reinterpret_cast<char*>(&other->event_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventViewStatus_Response::_Internal {
 public:
};

CCommunity_GetUserPartnerEventViewStatus_Response::CCommunity_GetUserPartnerEventViewStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventViewStatus_Response)
}
CCommunity_GetUserPartnerEventViewStatus_Response::CCommunity_GetUserPartnerEventViewStatus_Response(const CCommunity_GetUserPartnerEventViewStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventViewStatus_Response)
}

void CCommunity_GetUserPartnerEventViewStatus_Response::SharedCtor() {
}

CCommunity_GetUserPartnerEventViewStatus_Response::~CCommunity_GetUserPartnerEventViewStatus_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventViewStatus_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventViewStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventViewStatus_Response::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventViewStatus_Response* _this = reinterpret_cast< CCommunity_GetUserPartnerEventViewStatus_Response* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventViewStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventViewStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventViewStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventViewStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventViewStatus_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventViewStatus_Response)
  return target;
}

size_t CCommunity_GetUserPartnerEventViewStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventViewStatus_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventViewStatus_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventViewStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventViewStatus_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventViewStatus_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventViewStatus_Response::MergeFrom(const CCommunity_GetUserPartnerEventViewStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void CCommunity_GetUserPartnerEventViewStatus_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventViewStatus_Response::CopyFrom(const CCommunity_GetUserPartnerEventViewStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventViewStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventViewStatus_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventViewStatus_Response::InternalSwap(CCommunity_GetUserPartnerEventViewStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventViewStatus_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PartnerEventsShowMoreForApp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_PartnerEventsShowMoreForApp_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_PartnerEventsShowMoreForApp_Request::CCommunity_PartnerEventsShowMoreForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PartnerEventsShowMoreForApp_Request)
}
CCommunity_PartnerEventsShowMoreForApp_Request::CCommunity_PartnerEventsShowMoreForApp_Request(const CCommunity_PartnerEventsShowMoreForApp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_PartnerEventsShowMoreForApp_Request)
}

void CCommunity_PartnerEventsShowMoreForApp_Request::SharedCtor() {
appid_ = 0u;
}

CCommunity_PartnerEventsShowMoreForApp_Request::~CCommunity_PartnerEventsShowMoreForApp_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_PartnerEventsShowMoreForApp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PartnerEventsShowMoreForApp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PartnerEventsShowMoreForApp_Request::ArenaDtor(void* object) {
  CCommunity_PartnerEventsShowMoreForApp_Request* _this = reinterpret_cast< CCommunity_PartnerEventsShowMoreForApp_Request* >(object);
  (void)_this;
}
void CCommunity_PartnerEventsShowMoreForApp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PartnerEventsShowMoreForApp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PartnerEventsShowMoreForApp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PartnerEventsShowMoreForApp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PartnerEventsShowMoreForApp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PartnerEventsShowMoreForApp_Request)
  return target;
}

size_t CCommunity_PartnerEventsShowMoreForApp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PartnerEventsShowMoreForApp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PartnerEventsShowMoreForApp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PartnerEventsShowMoreForApp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PartnerEventsShowMoreForApp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PartnerEventsShowMoreForApp_Request)
    MergeFrom(*source);
  }
}

void CCommunity_PartnerEventsShowMoreForApp_Request::MergeFrom(const CCommunity_PartnerEventsShowMoreForApp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CCommunity_PartnerEventsShowMoreForApp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PartnerEventsShowMoreForApp_Request::CopyFrom(const CCommunity_PartnerEventsShowMoreForApp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PartnerEventsShowMoreForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PartnerEventsShowMoreForApp_Request::IsInitialized() const {
  return true;
}

void CCommunity_PartnerEventsShowMoreForApp_Request::InternalSwap(CCommunity_PartnerEventsShowMoreForApp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PartnerEventsShowMoreForApp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PartnerEventsShowMoreForApp_Response::_Internal {
 public:
};

CCommunity_PartnerEventsShowMoreForApp_Response::CCommunity_PartnerEventsShowMoreForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PartnerEventsShowMoreForApp_Response)
}
CCommunity_PartnerEventsShowMoreForApp_Response::CCommunity_PartnerEventsShowMoreForApp_Response(const CCommunity_PartnerEventsShowMoreForApp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_PartnerEventsShowMoreForApp_Response)
}

void CCommunity_PartnerEventsShowMoreForApp_Response::SharedCtor() {
}

CCommunity_PartnerEventsShowMoreForApp_Response::~CCommunity_PartnerEventsShowMoreForApp_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_PartnerEventsShowMoreForApp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PartnerEventsShowMoreForApp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PartnerEventsShowMoreForApp_Response::ArenaDtor(void* object) {
  CCommunity_PartnerEventsShowMoreForApp_Response* _this = reinterpret_cast< CCommunity_PartnerEventsShowMoreForApp_Response* >(object);
  (void)_this;
}
void CCommunity_PartnerEventsShowMoreForApp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PartnerEventsShowMoreForApp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PartnerEventsShowMoreForApp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PartnerEventsShowMoreForApp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PartnerEventsShowMoreForApp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PartnerEventsShowMoreForApp_Response)
  return target;
}

size_t CCommunity_PartnerEventsShowMoreForApp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PartnerEventsShowMoreForApp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PartnerEventsShowMoreForApp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PartnerEventsShowMoreForApp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PartnerEventsShowMoreForApp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PartnerEventsShowMoreForApp_Response)
    MergeFrom(*source);
  }
}

void CCommunity_PartnerEventsShowMoreForApp_Response::MergeFrom(const CCommunity_PartnerEventsShowMoreForApp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_PartnerEventsShowMoreForApp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PartnerEventsShowMoreForApp_Response::CopyFrom(const CCommunity_PartnerEventsShowMoreForApp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PartnerEventsShowMoreForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PartnerEventsShowMoreForApp_Response::IsInitialized() const {
  return true;
}

void CCommunity_PartnerEventsShowMoreForApp_Response::InternalSwap(CCommunity_PartnerEventsShowMoreForApp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PartnerEventsShowMoreForApp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PartnerEventsShowLessForApp_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_PartnerEventsShowLessForApp_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_PartnerEventsShowLessForApp_Request::CCommunity_PartnerEventsShowLessForApp_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PartnerEventsShowLessForApp_Request)
}
CCommunity_PartnerEventsShowLessForApp_Request::CCommunity_PartnerEventsShowLessForApp_Request(const CCommunity_PartnerEventsShowLessForApp_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_PartnerEventsShowLessForApp_Request)
}

void CCommunity_PartnerEventsShowLessForApp_Request::SharedCtor() {
appid_ = 0u;
}

CCommunity_PartnerEventsShowLessForApp_Request::~CCommunity_PartnerEventsShowLessForApp_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_PartnerEventsShowLessForApp_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PartnerEventsShowLessForApp_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PartnerEventsShowLessForApp_Request::ArenaDtor(void* object) {
  CCommunity_PartnerEventsShowLessForApp_Request* _this = reinterpret_cast< CCommunity_PartnerEventsShowLessForApp_Request* >(object);
  (void)_this;
}
void CCommunity_PartnerEventsShowLessForApp_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PartnerEventsShowLessForApp_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PartnerEventsShowLessForApp_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PartnerEventsShowLessForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PartnerEventsShowLessForApp_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PartnerEventsShowLessForApp_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PartnerEventsShowLessForApp_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PartnerEventsShowLessForApp_Request)
  return target;
}

size_t CCommunity_PartnerEventsShowLessForApp_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PartnerEventsShowLessForApp_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PartnerEventsShowLessForApp_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PartnerEventsShowLessForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PartnerEventsShowLessForApp_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PartnerEventsShowLessForApp_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PartnerEventsShowLessForApp_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PartnerEventsShowLessForApp_Request)
    MergeFrom(*source);
  }
}

void CCommunity_PartnerEventsShowLessForApp_Request::MergeFrom(const CCommunity_PartnerEventsShowLessForApp_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PartnerEventsShowLessForApp_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CCommunity_PartnerEventsShowLessForApp_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PartnerEventsShowLessForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PartnerEventsShowLessForApp_Request::CopyFrom(const CCommunity_PartnerEventsShowLessForApp_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PartnerEventsShowLessForApp_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PartnerEventsShowLessForApp_Request::IsInitialized() const {
  return true;
}

void CCommunity_PartnerEventsShowLessForApp_Request::InternalSwap(CCommunity_PartnerEventsShowLessForApp_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PartnerEventsShowLessForApp_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PartnerEventsShowLessForApp_Response::_Internal {
 public:
};

CCommunity_PartnerEventsShowLessForApp_Response::CCommunity_PartnerEventsShowLessForApp_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PartnerEventsShowLessForApp_Response)
}
CCommunity_PartnerEventsShowLessForApp_Response::CCommunity_PartnerEventsShowLessForApp_Response(const CCommunity_PartnerEventsShowLessForApp_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_PartnerEventsShowLessForApp_Response)
}

void CCommunity_PartnerEventsShowLessForApp_Response::SharedCtor() {
}

CCommunity_PartnerEventsShowLessForApp_Response::~CCommunity_PartnerEventsShowLessForApp_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_PartnerEventsShowLessForApp_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PartnerEventsShowLessForApp_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PartnerEventsShowLessForApp_Response::ArenaDtor(void* object) {
  CCommunity_PartnerEventsShowLessForApp_Response* _this = reinterpret_cast< CCommunity_PartnerEventsShowLessForApp_Response* >(object);
  (void)_this;
}
void CCommunity_PartnerEventsShowLessForApp_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PartnerEventsShowLessForApp_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PartnerEventsShowLessForApp_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PartnerEventsShowLessForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PartnerEventsShowLessForApp_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PartnerEventsShowLessForApp_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PartnerEventsShowLessForApp_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PartnerEventsShowLessForApp_Response)
  return target;
}

size_t CCommunity_PartnerEventsShowLessForApp_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PartnerEventsShowLessForApp_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PartnerEventsShowLessForApp_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PartnerEventsShowLessForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PartnerEventsShowLessForApp_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PartnerEventsShowLessForApp_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PartnerEventsShowLessForApp_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PartnerEventsShowLessForApp_Response)
    MergeFrom(*source);
  }
}

void CCommunity_PartnerEventsShowLessForApp_Response::MergeFrom(const CCommunity_PartnerEventsShowLessForApp_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PartnerEventsShowLessForApp_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_PartnerEventsShowLessForApp_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PartnerEventsShowLessForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PartnerEventsShowLessForApp_Response::CopyFrom(const CCommunity_PartnerEventsShowLessForApp_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PartnerEventsShowLessForApp_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PartnerEventsShowLessForApp_Response::IsInitialized() const {
  return true;
}

void CCommunity_PartnerEventsShowLessForApp_Response::InternalSwap(CCommunity_PartnerEventsShowLessForApp_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PartnerEventsShowLessForApp_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_ClearUserPartnerEventsAppPriorities_Request::_Internal {
 public:
};

CCommunity_ClearUserPartnerEventsAppPriorities_Request::CCommunity_ClearUserPartnerEventsAppPriorities_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
}
CCommunity_ClearUserPartnerEventsAppPriorities_Request::CCommunity_ClearUserPartnerEventsAppPriorities_Request(const CCommunity_ClearUserPartnerEventsAppPriorities_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::SharedCtor() {
}

CCommunity_ClearUserPartnerEventsAppPriorities_Request::~CCommunity_ClearUserPartnerEventsAppPriorities_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::ArenaDtor(void* object) {
  CCommunity_ClearUserPartnerEventsAppPriorities_Request* _this = reinterpret_cast< CCommunity_ClearUserPartnerEventsAppPriorities_Request* >(object);
  (void)_this;
}
void CCommunity_ClearUserPartnerEventsAppPriorities_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_ClearUserPartnerEventsAppPriorities_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_ClearUserPartnerEventsAppPriorities_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_ClearUserPartnerEventsAppPriorities_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  return target;
}

size_t CCommunity_ClearUserPartnerEventsAppPriorities_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_ClearUserPartnerEventsAppPriorities_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_ClearUserPartnerEventsAppPriorities_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
    MergeFrom(*source);
  }
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::MergeFrom(const CCommunity_ClearUserPartnerEventsAppPriorities_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::CopyFrom(const CCommunity_ClearUserPartnerEventsAppPriorities_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_ClearUserPartnerEventsAppPriorities_Request::IsInitialized() const {
  return true;
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Request::InternalSwap(CCommunity_ClearUserPartnerEventsAppPriorities_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_ClearUserPartnerEventsAppPriorities_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_ClearUserPartnerEventsAppPriorities_Response::_Internal {
 public:
};

CCommunity_ClearUserPartnerEventsAppPriorities_Response::CCommunity_ClearUserPartnerEventsAppPriorities_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
}
CCommunity_ClearUserPartnerEventsAppPriorities_Response::CCommunity_ClearUserPartnerEventsAppPriorities_Response(const CCommunity_ClearUserPartnerEventsAppPriorities_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::SharedCtor() {
}

CCommunity_ClearUserPartnerEventsAppPriorities_Response::~CCommunity_ClearUserPartnerEventsAppPriorities_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::ArenaDtor(void* object) {
  CCommunity_ClearUserPartnerEventsAppPriorities_Response* _this = reinterpret_cast< CCommunity_ClearUserPartnerEventsAppPriorities_Response* >(object);
  (void)_this;
}
void CCommunity_ClearUserPartnerEventsAppPriorities_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_ClearUserPartnerEventsAppPriorities_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_ClearUserPartnerEventsAppPriorities_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_ClearUserPartnerEventsAppPriorities_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  return target;
}

size_t CCommunity_ClearUserPartnerEventsAppPriorities_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_ClearUserPartnerEventsAppPriorities_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_ClearUserPartnerEventsAppPriorities_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
    MergeFrom(*source);
  }
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::MergeFrom(const CCommunity_ClearUserPartnerEventsAppPriorities_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::CopyFrom(const CCommunity_ClearUserPartnerEventsAppPriorities_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_ClearUserPartnerEventsAppPriorities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_ClearUserPartnerEventsAppPriorities_Response::IsInitialized() const {
  return true;
}

void CCommunity_ClearUserPartnerEventsAppPriorities_Response::InternalSwap(CCommunity_ClearUserPartnerEventsAppPriorities_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_ClearUserPartnerEventsAppPriorities_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventsAppPriorities_Request::_Internal {
 public:
};

CCommunity_GetUserPartnerEventsAppPriorities_Request::CCommunity_GetUserPartnerEventsAppPriorities_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventsAppPriorities_Request)
}
CCommunity_GetUserPartnerEventsAppPriorities_Request::CCommunity_GetUserPartnerEventsAppPriorities_Request(const CCommunity_GetUserPartnerEventsAppPriorities_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventsAppPriorities_Request)
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::SharedCtor() {
}

CCommunity_GetUserPartnerEventsAppPriorities_Request::~CCommunity_GetUserPartnerEventsAppPriorities_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventsAppPriorities_Request* _this = reinterpret_cast< CCommunity_GetUserPartnerEventsAppPriorities_Request* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventsAppPriorities_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventsAppPriorities_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventsAppPriorities_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventsAppPriorities_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  return target;
}

size_t CCommunity_GetUserPartnerEventsAppPriorities_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventsAppPriorities_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventsAppPriorities_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventsAppPriorities_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventsAppPriorities_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::MergeFrom(const CCommunity_GetUserPartnerEventsAppPriorities_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::CopyFrom(const CCommunity_GetUserPartnerEventsAppPriorities_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventsAppPriorities_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventsAppPriorities_Request::InternalSwap(CCommunity_GetUserPartnerEventsAppPriorities_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventsAppPriorities_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_PartnerEventsAppPriority::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_PartnerEventsAppPriority>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_app_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_PartnerEventsAppPriority::CCommunity_PartnerEventsAppPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_PartnerEventsAppPriority)
}
CCommunity_PartnerEventsAppPriority::CCommunity_PartnerEventsAppPriority(const CCommunity_PartnerEventsAppPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_app_priority_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(user_app_priority_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_PartnerEventsAppPriority)
}

void CCommunity_PartnerEventsAppPriority::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_app_priority_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(user_app_priority_));
}

CCommunity_PartnerEventsAppPriority::~CCommunity_PartnerEventsAppPriority() {
  // @@protoc_insertion_point(destructor:CCommunity_PartnerEventsAppPriority)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_PartnerEventsAppPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_PartnerEventsAppPriority::ArenaDtor(void* object) {
  CCommunity_PartnerEventsAppPriority* _this = reinterpret_cast< CCommunity_PartnerEventsAppPriority* >(object);
  (void)_this;
}
void CCommunity_PartnerEventsAppPriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_PartnerEventsAppPriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_PartnerEventsAppPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_PartnerEventsAppPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_app_priority_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(user_app_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_PartnerEventsAppPriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_app_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_app_priority(&has_bits);
          user_app_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_PartnerEventsAppPriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_PartnerEventsAppPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional int32 user_app_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_app_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_PartnerEventsAppPriority)
  return target;
}

size_t CCommunity_PartnerEventsAppPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_PartnerEventsAppPriority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional int32 user_app_priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_app_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_PartnerEventsAppPriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_PartnerEventsAppPriority)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_PartnerEventsAppPriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_PartnerEventsAppPriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_PartnerEventsAppPriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_PartnerEventsAppPriority)
    MergeFrom(*source);
  }
}

void CCommunity_PartnerEventsAppPriority::MergeFrom(const CCommunity_PartnerEventsAppPriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_PartnerEventsAppPriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_app_priority_ = from.user_app_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_PartnerEventsAppPriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_PartnerEventsAppPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_PartnerEventsAppPriority::CopyFrom(const CCommunity_PartnerEventsAppPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_PartnerEventsAppPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_PartnerEventsAppPriority::IsInitialized() const {
  return true;
}

void CCommunity_PartnerEventsAppPriority::InternalSwap(CCommunity_PartnerEventsAppPriority* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_PartnerEventsAppPriority, user_app_priority_)
      + sizeof(CCommunity_PartnerEventsAppPriority::user_app_priority_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_PartnerEventsAppPriority, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_PartnerEventsAppPriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetUserPartnerEventsAppPriorities_Response::_Internal {
 public:
};

CCommunity_GetUserPartnerEventsAppPriorities_Response::CCommunity_GetUserPartnerEventsAppPriorities_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  priorities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetUserPartnerEventsAppPriorities_Response)
}
CCommunity_GetUserPartnerEventsAppPriorities_Response::CCommunity_GetUserPartnerEventsAppPriorities_Response(const CCommunity_GetUserPartnerEventsAppPriorities_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      priorities_(from.priorities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetUserPartnerEventsAppPriorities_Response)
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::SharedCtor() {
}

CCommunity_GetUserPartnerEventsAppPriorities_Response::~CCommunity_GetUserPartnerEventsAppPriorities_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::ArenaDtor(void* object) {
  CCommunity_GetUserPartnerEventsAppPriorities_Response* _this = reinterpret_cast< CCommunity_GetUserPartnerEventsAppPriorities_Response* >(object);
  (void)_this;
}
void CCommunity_GetUserPartnerEventsAppPriorities_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetUserPartnerEventsAppPriorities_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priorities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetUserPartnerEventsAppPriorities_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCommunity_PartnerEventsAppPriority priorities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetUserPartnerEventsAppPriorities_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_PartnerEventsAppPriority priorities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_priorities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_priorities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  return target;
}

size_t CCommunity_GetUserPartnerEventsAppPriorities_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_PartnerEventsAppPriority priorities = 1;
  total_size += 1UL * this->_internal_priorities_size();
  for (const auto& msg : this->priorities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetUserPartnerEventsAppPriorities_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetUserPartnerEventsAppPriorities_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetUserPartnerEventsAppPriorities_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetUserPartnerEventsAppPriorities_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::MergeFrom(const CCommunity_GetUserPartnerEventsAppPriorities_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  priorities_.MergeFrom(from.priorities_);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::CopyFrom(const CCommunity_GetUserPartnerEventsAppPriorities_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetUserPartnerEventsAppPriorities_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetUserPartnerEventsAppPriorities_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetUserPartnerEventsAppPriorities_Response::InternalSwap(CCommunity_GetUserPartnerEventsAppPriorities_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  priorities_.InternalSwap(&other->priorities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetUserPartnerEventsAppPriorities_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_ClearSinglePartnerEventsAppPriority_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_ClearSinglePartnerEventsAppPriority_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_ClearSinglePartnerEventsAppPriority_Request::CCommunity_ClearSinglePartnerEventsAppPriority_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
}
CCommunity_ClearSinglePartnerEventsAppPriority_Request::CCommunity_ClearSinglePartnerEventsAppPriority_Request(const CCommunity_ClearSinglePartnerEventsAppPriority_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::SharedCtor() {
appid_ = 0u;
}

CCommunity_ClearSinglePartnerEventsAppPriority_Request::~CCommunity_ClearSinglePartnerEventsAppPriority_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::ArenaDtor(void* object) {
  CCommunity_ClearSinglePartnerEventsAppPriority_Request* _this = reinterpret_cast< CCommunity_ClearSinglePartnerEventsAppPriority_Request* >(object);
  (void)_this;
}
void CCommunity_ClearSinglePartnerEventsAppPriority_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_ClearSinglePartnerEventsAppPriority_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_ClearSinglePartnerEventsAppPriority_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_ClearSinglePartnerEventsAppPriority_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  return target;
}

size_t CCommunity_ClearSinglePartnerEventsAppPriority_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_ClearSinglePartnerEventsAppPriority_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_ClearSinglePartnerEventsAppPriority_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
    MergeFrom(*source);
  }
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::MergeFrom(const CCommunity_ClearSinglePartnerEventsAppPriority_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::CopyFrom(const CCommunity_ClearSinglePartnerEventsAppPriority_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_ClearSinglePartnerEventsAppPriority_Request::IsInitialized() const {
  return true;
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Request::InternalSwap(CCommunity_ClearSinglePartnerEventsAppPriority_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_ClearSinglePartnerEventsAppPriority_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_ClearSinglePartnerEventsAppPriority_Response::_Internal {
 public:
};

CCommunity_ClearSinglePartnerEventsAppPriority_Response::CCommunity_ClearSinglePartnerEventsAppPriority_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
}
CCommunity_ClearSinglePartnerEventsAppPriority_Response::CCommunity_ClearSinglePartnerEventsAppPriority_Response(const CCommunity_ClearSinglePartnerEventsAppPriority_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::SharedCtor() {
}

CCommunity_ClearSinglePartnerEventsAppPriority_Response::~CCommunity_ClearSinglePartnerEventsAppPriority_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::ArenaDtor(void* object) {
  CCommunity_ClearSinglePartnerEventsAppPriority_Response* _this = reinterpret_cast< CCommunity_ClearSinglePartnerEventsAppPriority_Response* >(object);
  (void)_this;
}
void CCommunity_ClearSinglePartnerEventsAppPriority_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_ClearSinglePartnerEventsAppPriority_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_ClearSinglePartnerEventsAppPriority_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_ClearSinglePartnerEventsAppPriority_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  return target;
}

size_t CCommunity_ClearSinglePartnerEventsAppPriority_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_ClearSinglePartnerEventsAppPriority_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_ClearSinglePartnerEventsAppPriority_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
    MergeFrom(*source);
  }
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::MergeFrom(const CCommunity_ClearSinglePartnerEventsAppPriority_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::CopyFrom(const CCommunity_ClearSinglePartnerEventsAppPriority_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_ClearSinglePartnerEventsAppPriority_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_ClearSinglePartnerEventsAppPriority_Response::IsInitialized() const {
  return true;
}

void CCommunity_ClearSinglePartnerEventsAppPriority_Response::InternalSwap(CCommunity_ClearSinglePartnerEventsAppPriority_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_ClearSinglePartnerEventsAppPriority_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Community::~Community() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Community::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcommunity_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcommunity_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Community::GetDescriptor() {
  return descriptor();
}

void Community::GetApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetApps_Request*,
                         ::CCommunity_GetApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetApps() not implemented.");
  done->Run();
}

void Community::GetAppRichPresenceLocalization(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetAppRichPresenceLocalization_Request*,
                         ::CCommunity_GetAppRichPresenceLocalization_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAppRichPresenceLocalization() not implemented.");
  done->Run();
}

void Community::GetCommentThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetCommentThread_Request*,
                         ::CCommunity_GetCommentThread_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCommentThread() not implemented.");
  done->Run();
}

void Community::PostCommentToThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_PostCommentToThread_Request*,
                         ::CCommunity_PostCommentToThread_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostCommentToThread() not implemented.");
  done->Run();
}

void Community::DeleteCommentFromThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_DeleteCommentFromThread_Request*,
                         ::CCommunity_DeleteCommentFromThread_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteCommentFromThread() not implemented.");
  done->Run();
}

void Community::RateCommentThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_RateCommentThread_Request*,
                         ::CCommunity_RateCommentThread_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RateCommentThread() not implemented.");
  done->Run();
}

void Community::GetCommentThreadRatings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetCommentThreadRatings_Request*,
                         ::CCommunity_GetCommentThreadRatings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCommentThreadRatings() not implemented.");
  done->Run();
}

void Community::RateClanAnnouncement(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_RateClanAnnouncement_Request*,
                         ::CCommunity_RateClanAnnouncement_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RateClanAnnouncement() not implemented.");
  done->Run();
}

void Community::GetClanAnnouncementVoteForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetClanAnnouncementVoteForUser_Request*,
                         ::CCommunity_GetClanAnnouncementVoteForUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClanAnnouncementVoteForUser() not implemented.");
  done->Run();
}

void Community::GetAvatarHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetAvatarHistory_Request*,
                         ::CCommunity_GetAvatarHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAvatarHistory() not implemented.");
  done->Run();
}

void Community::GetClanEventCrowdInMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetClanEventCrowdInMetadata_Request*,
                         ::CCommunity_GetClanEventCrowdInMetadata_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClanEventCrowdInMetadata() not implemented.");
  done->Run();
}

void Community::GetClanCrowdInMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetClanCrowdInMetadata_Request*,
                         ::CCommunity_GetClanCrowdInMetadata_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClanCrowdInMetadata() not implemented.");
  done->Run();
}

void Community::FetchTranslationFromCrowdIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_FetchTranslationFromCrowdIn_Request*,
                         ::CCommunity_FetchTranslationFromCrowdIn_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FetchTranslationFromCrowdIn() not implemented.");
  done->Run();
}

void Community::GetUserPartnerEventNews(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetUserPartnerEventNews_Request*,
                         ::CCommunity_GetUserPartnerEventNews_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserPartnerEventNews() not implemented.");
  done->Run();
}

void Community::GetBestEventsForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetBestEventsForUser_Request*,
                         ::CCommunity_GetBestEventsForUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBestEventsForUser() not implemented.");
  done->Run();
}

void Community::MarkPartnerEventsForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_MarkPartnerEventsForUser_Request*,
                         ::CCommunity_MarkPartnerEventsForUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MarkPartnerEventsForUser() not implemented.");
  done->Run();
}

void Community::GetUserPartnerEventViewStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetUserPartnerEventViewStatus_Request*,
                         ::CCommunity_GetUserPartnerEventViewStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserPartnerEventViewStatus() not implemented.");
  done->Run();
}

void Community::PartnerEventsShowMoreForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_PartnerEventsShowMoreForApp_Request*,
                         ::CCommunity_PartnerEventsShowMoreForApp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PartnerEventsShowMoreForApp() not implemented.");
  done->Run();
}

void Community::PartnerEventsShowLessForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_PartnerEventsShowLessForApp_Request*,
                         ::CCommunity_PartnerEventsShowLessForApp_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PartnerEventsShowLessForApp() not implemented.");
  done->Run();
}

void Community::ClearUserPartnerEventsAppPriorities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_ClearUserPartnerEventsAppPriorities_Request*,
                         ::CCommunity_ClearUserPartnerEventsAppPriorities_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClearUserPartnerEventsAppPriorities() not implemented.");
  done->Run();
}

void Community::GetUserPartnerEventsAppPriorities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetUserPartnerEventsAppPriorities_Request*,
                         ::CCommunity_GetUserPartnerEventsAppPriorities_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserPartnerEventsAppPriorities() not implemented.");
  done->Run();
}

void Community::ClearSinglePartnerEventsAppPriority(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_ClearSinglePartnerEventsAppPriority_Request*,
                         ::CCommunity_ClearSinglePartnerEventsAppPriority_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClearSinglePartnerEventsAppPriority() not implemented.");
  done->Run();
}

void Community::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcommunity_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetApps_Response*>(
                 response),
             done);
      break;
    case 1:
      GetAppRichPresenceLocalization(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetAppRichPresenceLocalization_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetAppRichPresenceLocalization_Response*>(
                 response),
             done);
      break;
    case 2:
      GetCommentThread(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetCommentThread_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetCommentThread_Response*>(
                 response),
             done);
      break;
    case 3:
      PostCommentToThread(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_PostCommentToThread_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_PostCommentToThread_Response*>(
                 response),
             done);
      break;
    case 4:
      DeleteCommentFromThread(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_DeleteCommentFromThread_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_DeleteCommentFromThread_Response*>(
                 response),
             done);
      break;
    case 5:
      RateCommentThread(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_RateCommentThread_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_RateCommentThread_Response*>(
                 response),
             done);
      break;
    case 6:
      GetCommentThreadRatings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetCommentThreadRatings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetCommentThreadRatings_Response*>(
                 response),
             done);
      break;
    case 7:
      RateClanAnnouncement(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_RateClanAnnouncement_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_RateClanAnnouncement_Response*>(
                 response),
             done);
      break;
    case 8:
      GetClanAnnouncementVoteForUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetClanAnnouncementVoteForUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetClanAnnouncementVoteForUser_Response*>(
                 response),
             done);
      break;
    case 9:
      GetAvatarHistory(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetAvatarHistory_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetAvatarHistory_Response*>(
                 response),
             done);
      break;
    case 10:
      GetClanEventCrowdInMetadata(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetClanEventCrowdInMetadata_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetClanEventCrowdInMetadata_Response*>(
                 response),
             done);
      break;
    case 11:
      GetClanCrowdInMetadata(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetClanCrowdInMetadata_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetClanCrowdInMetadata_Response*>(
                 response),
             done);
      break;
    case 12:
      FetchTranslationFromCrowdIn(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_FetchTranslationFromCrowdIn_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_FetchTranslationFromCrowdIn_Response*>(
                 response),
             done);
      break;
    case 13:
      GetUserPartnerEventNews(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetUserPartnerEventNews_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetUserPartnerEventNews_Response*>(
                 response),
             done);
      break;
    case 14:
      GetBestEventsForUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetBestEventsForUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetBestEventsForUser_Response*>(
                 response),
             done);
      break;
    case 15:
      MarkPartnerEventsForUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_MarkPartnerEventsForUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_MarkPartnerEventsForUser_Response*>(
                 response),
             done);
      break;
    case 16:
      GetUserPartnerEventViewStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetUserPartnerEventViewStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetUserPartnerEventViewStatus_Response*>(
                 response),
             done);
      break;
    case 17:
      PartnerEventsShowMoreForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_PartnerEventsShowMoreForApp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_PartnerEventsShowMoreForApp_Response*>(
                 response),
             done);
      break;
    case 18:
      PartnerEventsShowLessForApp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_PartnerEventsShowLessForApp_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_PartnerEventsShowLessForApp_Response*>(
                 response),
             done);
      break;
    case 19:
      ClearUserPartnerEventsAppPriorities(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_ClearUserPartnerEventsAppPriorities_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_ClearUserPartnerEventsAppPriorities_Response*>(
                 response),
             done);
      break;
    case 20:
      GetUserPartnerEventsAppPriorities(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetUserPartnerEventsAppPriorities_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetUserPartnerEventsAppPriorities_Response*>(
                 response),
             done);
      break;
    case 21:
      ClearSinglePartnerEventsAppPriority(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_ClearSinglePartnerEventsAppPriority_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_ClearSinglePartnerEventsAppPriority_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Community::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCommunity_GetApps_Request::default_instance();
    case 1:
      return ::CCommunity_GetAppRichPresenceLocalization_Request::default_instance();
    case 2:
      return ::CCommunity_GetCommentThread_Request::default_instance();
    case 3:
      return ::CCommunity_PostCommentToThread_Request::default_instance();
    case 4:
      return ::CCommunity_DeleteCommentFromThread_Request::default_instance();
    case 5:
      return ::CCommunity_RateCommentThread_Request::default_instance();
    case 6:
      return ::CCommunity_GetCommentThreadRatings_Request::default_instance();
    case 7:
      return ::CCommunity_RateClanAnnouncement_Request::default_instance();
    case 8:
      return ::CCommunity_GetClanAnnouncementVoteForUser_Request::default_instance();
    case 9:
      return ::CCommunity_GetAvatarHistory_Request::default_instance();
    case 10:
      return ::CCommunity_GetClanEventCrowdInMetadata_Request::default_instance();
    case 11:
      return ::CCommunity_GetClanCrowdInMetadata_Request::default_instance();
    case 12:
      return ::CCommunity_FetchTranslationFromCrowdIn_Request::default_instance();
    case 13:
      return ::CCommunity_GetUserPartnerEventNews_Request::default_instance();
    case 14:
      return ::CCommunity_GetBestEventsForUser_Request::default_instance();
    case 15:
      return ::CCommunity_MarkPartnerEventsForUser_Request::default_instance();
    case 16:
      return ::CCommunity_GetUserPartnerEventViewStatus_Request::default_instance();
    case 17:
      return ::CCommunity_PartnerEventsShowMoreForApp_Request::default_instance();
    case 18:
      return ::CCommunity_PartnerEventsShowLessForApp_Request::default_instance();
    case 19:
      return ::CCommunity_ClearUserPartnerEventsAppPriorities_Request::default_instance();
    case 20:
      return ::CCommunity_GetUserPartnerEventsAppPriorities_Request::default_instance();
    case 21:
      return ::CCommunity_ClearSinglePartnerEventsAppPriority_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Community::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCommunity_GetApps_Response::default_instance();
    case 1:
      return ::CCommunity_GetAppRichPresenceLocalization_Response::default_instance();
    case 2:
      return ::CCommunity_GetCommentThread_Response::default_instance();
    case 3:
      return ::CCommunity_PostCommentToThread_Response::default_instance();
    case 4:
      return ::CCommunity_DeleteCommentFromThread_Response::default_instance();
    case 5:
      return ::CCommunity_RateCommentThread_Response::default_instance();
    case 6:
      return ::CCommunity_GetCommentThreadRatings_Response::default_instance();
    case 7:
      return ::CCommunity_RateClanAnnouncement_Response::default_instance();
    case 8:
      return ::CCommunity_GetClanAnnouncementVoteForUser_Response::default_instance();
    case 9:
      return ::CCommunity_GetAvatarHistory_Response::default_instance();
    case 10:
      return ::CCommunity_GetClanEventCrowdInMetadata_Response::default_instance();
    case 11:
      return ::CCommunity_GetClanCrowdInMetadata_Response::default_instance();
    case 12:
      return ::CCommunity_FetchTranslationFromCrowdIn_Response::default_instance();
    case 13:
      return ::CCommunity_GetUserPartnerEventNews_Response::default_instance();
    case 14:
      return ::CCommunity_GetBestEventsForUser_Response::default_instance();
    case 15:
      return ::CCommunity_MarkPartnerEventsForUser_Response::default_instance();
    case 16:
      return ::CCommunity_GetUserPartnerEventViewStatus_Response::default_instance();
    case 17:
      return ::CCommunity_PartnerEventsShowMoreForApp_Response::default_instance();
    case 18:
      return ::CCommunity_PartnerEventsShowLessForApp_Response::default_instance();
    case 19:
      return ::CCommunity_ClearUserPartnerEventsAppPriorities_Response::default_instance();
    case 20:
      return ::CCommunity_GetUserPartnerEventsAppPriorities_Response::default_instance();
    case 21:
      return ::CCommunity_ClearSinglePartnerEventsAppPriority_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Community_Stub::Community_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Community_Stub::Community_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Community_Stub::~Community_Stub() {
  if (owns_channel_) delete channel_;
}

void Community_Stub::GetApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetApps_Request* request,
                              ::CCommunity_GetApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Community_Stub::GetAppRichPresenceLocalization(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetAppRichPresenceLocalization_Request* request,
                              ::CCommunity_GetAppRichPresenceLocalization_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Community_Stub::GetCommentThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetCommentThread_Request* request,
                              ::CCommunity_GetCommentThread_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Community_Stub::PostCommentToThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_PostCommentToThread_Request* request,
                              ::CCommunity_PostCommentToThread_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Community_Stub::DeleteCommentFromThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_DeleteCommentFromThread_Request* request,
                              ::CCommunity_DeleteCommentFromThread_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Community_Stub::RateCommentThread(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_RateCommentThread_Request* request,
                              ::CCommunity_RateCommentThread_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Community_Stub::GetCommentThreadRatings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetCommentThreadRatings_Request* request,
                              ::CCommunity_GetCommentThreadRatings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Community_Stub::RateClanAnnouncement(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_RateClanAnnouncement_Request* request,
                              ::CCommunity_RateClanAnnouncement_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Community_Stub::GetClanAnnouncementVoteForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetClanAnnouncementVoteForUser_Request* request,
                              ::CCommunity_GetClanAnnouncementVoteForUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Community_Stub::GetAvatarHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetAvatarHistory_Request* request,
                              ::CCommunity_GetAvatarHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Community_Stub::GetClanEventCrowdInMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetClanEventCrowdInMetadata_Request* request,
                              ::CCommunity_GetClanEventCrowdInMetadata_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Community_Stub::GetClanCrowdInMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetClanCrowdInMetadata_Request* request,
                              ::CCommunity_GetClanCrowdInMetadata_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Community_Stub::FetchTranslationFromCrowdIn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_FetchTranslationFromCrowdIn_Request* request,
                              ::CCommunity_FetchTranslationFromCrowdIn_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Community_Stub::GetUserPartnerEventNews(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetUserPartnerEventNews_Request* request,
                              ::CCommunity_GetUserPartnerEventNews_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Community_Stub::GetBestEventsForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetBestEventsForUser_Request* request,
                              ::CCommunity_GetBestEventsForUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Community_Stub::MarkPartnerEventsForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_MarkPartnerEventsForUser_Request* request,
                              ::CCommunity_MarkPartnerEventsForUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Community_Stub::GetUserPartnerEventViewStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetUserPartnerEventViewStatus_Request* request,
                              ::CCommunity_GetUserPartnerEventViewStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void Community_Stub::PartnerEventsShowMoreForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_PartnerEventsShowMoreForApp_Request* request,
                              ::CCommunity_PartnerEventsShowMoreForApp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void Community_Stub::PartnerEventsShowLessForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_PartnerEventsShowLessForApp_Request* request,
                              ::CCommunity_PartnerEventsShowLessForApp_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void Community_Stub::ClearUserPartnerEventsAppPriorities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_ClearUserPartnerEventsAppPriorities_Request* request,
                              ::CCommunity_ClearUserPartnerEventsAppPriorities_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void Community_Stub::GetUserPartnerEventsAppPriorities(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetUserPartnerEventsAppPriorities_Request* request,
                              ::CCommunity_GetUserPartnerEventsAppPriorities_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void Community_Stub::ClearSinglePartnerEventsAppPriority(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_ClearSinglePartnerEventsAppPriority_Request* request,
                              ::CCommunity_ClearSinglePartnerEventsAppPriority_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCommunity_GetApps_Request* Arena::CreateMaybeMessage< ::CCommunity_GetApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetApps_Response* Arena::CreateMaybeMessage< ::CCommunity_GetApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAppRichPresenceLocalization_Request* Arena::CreateMaybeMessage< ::CCommunity_GetAppRichPresenceLocalization_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAppRichPresenceLocalization_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAppRichPresenceLocalization_Response_Token* Arena::CreateMaybeMessage< ::CCommunity_GetAppRichPresenceLocalization_Response_Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAppRichPresenceLocalization_Response_Token >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAppRichPresenceLocalization_Response_TokenList* Arena::CreateMaybeMessage< ::CCommunity_GetAppRichPresenceLocalization_Response_TokenList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAppRichPresenceLocalization_Response_TokenList >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAppRichPresenceLocalization_Response* Arena::CreateMaybeMessage< ::CCommunity_GetAppRichPresenceLocalization_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAppRichPresenceLocalization_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetCommentThread_Request* Arena::CreateMaybeMessage< ::CCommunity_GetCommentThread_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetCommentThread_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_Comment_Reaction* Arena::CreateMaybeMessage< ::CCommunity_Comment_Reaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_Comment_Reaction >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_Comment* Arena::CreateMaybeMessage< ::CCommunity_Comment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_Comment >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetCommentThread_Response* Arena::CreateMaybeMessage< ::CCommunity_GetCommentThread_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetCommentThread_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PostCommentToThread_Request* Arena::CreateMaybeMessage< ::CCommunity_PostCommentToThread_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PostCommentToThread_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PostCommentToThread_Response* Arena::CreateMaybeMessage< ::CCommunity_PostCommentToThread_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PostCommentToThread_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_DeleteCommentFromThread_Request* Arena::CreateMaybeMessage< ::CCommunity_DeleteCommentFromThread_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_DeleteCommentFromThread_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_DeleteCommentFromThread_Response* Arena::CreateMaybeMessage< ::CCommunity_DeleteCommentFromThread_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_DeleteCommentFromThread_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_RateCommentThread_Request* Arena::CreateMaybeMessage< ::CCommunity_RateCommentThread_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_RateCommentThread_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_RateCommentThread_Response* Arena::CreateMaybeMessage< ::CCommunity_RateCommentThread_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_RateCommentThread_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetCommentThreadRatings_Request* Arena::CreateMaybeMessage< ::CCommunity_GetCommentThreadRatings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetCommentThreadRatings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetCommentThreadRatings_Response* Arena::CreateMaybeMessage< ::CCommunity_GetCommentThreadRatings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetCommentThreadRatings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_RateClanAnnouncement_Request* Arena::CreateMaybeMessage< ::CCommunity_RateClanAnnouncement_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_RateClanAnnouncement_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_RateClanAnnouncement_Response* Arena::CreateMaybeMessage< ::CCommunity_RateClanAnnouncement_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_RateClanAnnouncement_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanAnnouncementVoteForUser_Request* Arena::CreateMaybeMessage< ::CCommunity_GetClanAnnouncementVoteForUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanAnnouncementVoteForUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanAnnouncementVoteForUser_Response* Arena::CreateMaybeMessage< ::CCommunity_GetClanAnnouncementVoteForUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanAnnouncementVoteForUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAvatarHistory_Request* Arena::CreateMaybeMessage< ::CCommunity_GetAvatarHistory_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAvatarHistory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAvatarHistory_Response_AvatarData* Arena::CreateMaybeMessage< ::CCommunity_GetAvatarHistory_Response_AvatarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAvatarHistory_Response_AvatarData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetAvatarHistory_Response* Arena::CreateMaybeMessage< ::CCommunity_GetAvatarHistory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetAvatarHistory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanEventCrowdInMetadata_Request* Arena::CreateMaybeMessage< ::CCommunity_GetClanEventCrowdInMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanEventCrowdInMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanEventCrowdInMetadata_Response* Arena::CreateMaybeMessage< ::CCommunity_GetClanEventCrowdInMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanEventCrowdInMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanCrowdInMetadata_Request* Arena::CreateMaybeMessage< ::CCommunity_GetClanCrowdInMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanCrowdInMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanCrowdInMetadata_Response* Arena::CreateMaybeMessage< ::CCommunity_GetClanCrowdInMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanCrowdInMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_FetchTranslationFromCrowdIn_Request* Arena::CreateMaybeMessage< ::CCommunity_FetchTranslationFromCrowdIn_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_FetchTranslationFromCrowdIn_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_FetchTranslationFromCrowdIn_Response* Arena::CreateMaybeMessage< ::CCommunity_FetchTranslationFromCrowdIn_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_FetchTranslationFromCrowdIn_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CAppPriority* Arena::CreateMaybeMessage< ::CAppPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAppPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventNews_Request* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventNews_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventNews_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventNews_Response* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventNews_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventNews_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetBestEventsForUser_Request* Arena::CreateMaybeMessage< ::CCommunity_GetBestEventsForUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetBestEventsForUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PartnerEventResult* Arena::CreateMaybeMessage< ::CCommunity_PartnerEventResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PartnerEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetBestEventsForUser_Response* Arena::CreateMaybeMessage< ::CCommunity_GetBestEventsForUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetBestEventsForUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking* Arena::CreateMaybeMessage< ::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_MarkPartnerEventsForUser_Request* Arena::CreateMaybeMessage< ::CCommunity_MarkPartnerEventsForUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_MarkPartnerEventsForUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_MarkPartnerEventsForUser_Response* Arena::CreateMaybeMessage< ::CCommunity_MarkPartnerEventsForUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_MarkPartnerEventsForUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventViewStatus_Request* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventViewStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventViewStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventViewStatus_Response* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventViewStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventViewStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PartnerEventsShowMoreForApp_Request* Arena::CreateMaybeMessage< ::CCommunity_PartnerEventsShowMoreForApp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PartnerEventsShowMoreForApp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PartnerEventsShowMoreForApp_Response* Arena::CreateMaybeMessage< ::CCommunity_PartnerEventsShowMoreForApp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PartnerEventsShowMoreForApp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PartnerEventsShowLessForApp_Request* Arena::CreateMaybeMessage< ::CCommunity_PartnerEventsShowLessForApp_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PartnerEventsShowLessForApp_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PartnerEventsShowLessForApp_Response* Arena::CreateMaybeMessage< ::CCommunity_PartnerEventsShowLessForApp_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PartnerEventsShowLessForApp_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_ClearUserPartnerEventsAppPriorities_Request* Arena::CreateMaybeMessage< ::CCommunity_ClearUserPartnerEventsAppPriorities_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_ClearUserPartnerEventsAppPriorities_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_ClearUserPartnerEventsAppPriorities_Response* Arena::CreateMaybeMessage< ::CCommunity_ClearUserPartnerEventsAppPriorities_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_ClearUserPartnerEventsAppPriorities_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventsAppPriorities_Request* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventsAppPriorities_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventsAppPriorities_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_PartnerEventsAppPriority* Arena::CreateMaybeMessage< ::CCommunity_PartnerEventsAppPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_PartnerEventsAppPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetUserPartnerEventsAppPriorities_Response* Arena::CreateMaybeMessage< ::CCommunity_GetUserPartnerEventsAppPriorities_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetUserPartnerEventsAppPriorities_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_ClearSinglePartnerEventsAppPriority_Request* Arena::CreateMaybeMessage< ::CCommunity_ClearSinglePartnerEventsAppPriority_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_ClearSinglePartnerEventsAppPriority_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_ClearSinglePartnerEventsAppPriority_Response* Arena::CreateMaybeMessage< ::CCommunity_ClearSinglePartnerEventsAppPriority_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_ClearSinglePartnerEventsAppPriority_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
