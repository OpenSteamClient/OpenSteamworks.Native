// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_credentials.steamclient.proto

#include "steammessages_credentials.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CCredentials_TestAvailablePassword_Request::CCredentials_TestAvailablePassword_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_digest_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCredentials_TestAvailablePassword_RequestDefaultTypeInternal {
  constexpr CCredentials_TestAvailablePassword_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_TestAvailablePassword_RequestDefaultTypeInternal() {}
  union {
    CCredentials_TestAvailablePassword_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_TestAvailablePassword_RequestDefaultTypeInternal _CCredentials_TestAvailablePassword_Request_default_instance_;
constexpr CCredentials_TestAvailablePassword_Response::CCredentials_TestAvailablePassword_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_valid_(false){}
struct CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal {
  constexpr CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal() {}
  union {
    CCredentials_TestAvailablePassword_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_TestAvailablePassword_ResponseDefaultTypeInternal _CCredentials_TestAvailablePassword_Response_default_instance_;
constexpr CCredentials_GetSteamGuardDetails_Request::CCredentials_GetSteamGuardDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : webcookie_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_address_(nullptr)
  , timestamp_minimum_wanted_(0u)
  , deprecated_ipaddress_(0){}
struct CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal {
  constexpr CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal() {}
  union {
    CCredentials_GetSteamGuardDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_GetSteamGuardDetails_RequestDefaultTypeInternal _CCredentials_GetSteamGuardDetails_Request_default_instance_;
constexpr CCredentials_GetSteamGuardDetails_Response_SessionData::CCredentials_GetSteamGuardDetails_Response_SessionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_name_userchosen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_id_(PROTOBUF_ULONGLONG(0))
  , timestamp_machine_steamguard_enabled_(0u)
  , authentication_exists_from_geoloc_before_mintime_(false)
  , authentication_exists_from_same_ip_before_mintime_(false)
  , public_ipv4_(0u){}
struct CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal {
  constexpr CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal() {}
  union {
    CCredentials_GetSteamGuardDetails_Response_SessionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_GetSteamGuardDetails_Response_SessionDataDefaultTypeInternal _CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_;
constexpr CCredentials_GetSteamGuardDetails_Response::CCredentials_GetSteamGuardDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_data_()
  , deprecated_machine_name_userchosen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_steamguard_enabled_(0u)
  , deprecated_timestamp_machine_steamguard_enabled_(0u)
  , deprecated_machine_id_(PROTOBUF_ULONGLONG(0))
  , is_steamguard_enabled_(false)
  , deprecated_authentication_exists_from_geoloc_before_mintime_(false)
  , is_twofactor_enabled_(false)
  , is_phone_verified_(false)
  , timestamp_twofactor_enabled_(0u){}
struct CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal {
  constexpr CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal() {}
  union {
    CCredentials_GetSteamGuardDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_GetSteamGuardDetails_ResponseDefaultTypeInternal _CCredentials_GetSteamGuardDetails_Response_default_instance_;
constexpr CCredentials_ValidateEmailAddress_Request::CCredentials_ValidateEmailAddress_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal {
  constexpr CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal() {}
  union {
    CCredentials_ValidateEmailAddress_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_ValidateEmailAddress_RequestDefaultTypeInternal _CCredentials_ValidateEmailAddress_Request_default_instance_;
constexpr CCredentials_ValidateEmailAddress_Response::CCredentials_ValidateEmailAddress_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : was_validated_(false){}
struct CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal {
  constexpr CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal() {}
  union {
    CCredentials_ValidateEmailAddress_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_ValidateEmailAddress_ResponseDefaultTypeInternal _CCredentials_ValidateEmailAddress_Response_default_instance_;
constexpr CCredentials_SteamGuardPhishingReport_Request::CCredentials_SteamGuardPhishingReport_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipaddress_actual_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal {
  constexpr CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal() {}
  union {
    CCredentials_SteamGuardPhishingReport_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_SteamGuardPhishingReport_RequestDefaultTypeInternal _CCredentials_SteamGuardPhishingReport_Request_default_instance_;
constexpr CCredentials_SteamGuardPhishingReport_Response::CCredentials_SteamGuardPhishingReport_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipaddress_loginattempt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , countryname_loginattempt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statename_loginattempt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cityname_loginattempt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipaddress_actual_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , countryname_actual_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statename_actual_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cityname_actual_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamguard_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal {
  constexpr CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal() {}
  union {
    CCredentials_SteamGuardPhishingReport_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_SteamGuardPhishingReport_ResponseDefaultTypeInternal _CCredentials_SteamGuardPhishingReport_Response_default_instance_;
constexpr CCredentials_LastCredentialChangeTime_Request::CCredentials_LastCredentialChangeTime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_changes_only_(false){}
struct CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal {
  constexpr CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal() {}
  union {
    CCredentials_LastCredentialChangeTime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_LastCredentialChangeTime_RequestDefaultTypeInternal _CCredentials_LastCredentialChangeTime_Request_default_instance_;
constexpr CCredentials_LastCredentialChangeTime_Response::CCredentials_LastCredentialChangeTime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_last_password_change_(0u)
  , timestamp_last_email_change_(0u)
  , timestamp_last_password_reset_(0u){}
struct CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal {
  constexpr CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal() {}
  union {
    CCredentials_LastCredentialChangeTime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_LastCredentialChangeTime_ResponseDefaultTypeInternal _CCredentials_LastCredentialChangeTime_Response_default_instance_;
constexpr CCredentials_GetAccountAuthSecret_Request::CCredentials_GetAccountAuthSecret_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal {
  constexpr CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal() {}
  union {
    CCredentials_GetAccountAuthSecret_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_GetAccountAuthSecret_RequestDefaultTypeInternal _CCredentials_GetAccountAuthSecret_Request_default_instance_;
constexpr CCredentials_GetAccountAuthSecret_Response::CCredentials_GetAccountAuthSecret_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_id_(0){}
struct CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal {
  constexpr CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal() {}
  union {
    CCredentials_GetAccountAuthSecret_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCredentials_GetAccountAuthSecret_ResponseDefaultTypeInternal _CCredentials_GetAccountAuthSecret_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fcredentials_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fcredentials_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Request, password_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Request, sha_digest_password_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Request, account_name_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_TestAvailablePassword_Response, is_valid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Request, webcookie_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Request, timestamp_minimum_wanted_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Request, deprecated_ipaddress_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Request, ip_address_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, machine_id_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, timestamp_machine_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, authentication_exists_from_geoloc_before_mintime_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, authentication_exists_from_same_ip_before_mintime_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, public_ipv4_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response_SessionData, public_ip_address_),
  2,
  0,
  3,
  4,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, is_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, timestamp_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, deprecated_machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, deprecated_timestamp_machine_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, deprecated_authentication_exists_from_geoloc_before_mintime_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, deprecated_machine_id_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, session_data_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, is_twofactor_enabled_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, timestamp_twofactor_enabled_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetSteamGuardDetails_Response, is_phone_verified_),
  4,
  1,
  0,
  2,
  5,
  3,
  ~0u,
  6,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::CCredentials_ValidateEmailAddress_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_ValidateEmailAddress_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_ValidateEmailAddress_Request, stoken_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCredentials_ValidateEmailAddress_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_ValidateEmailAddress_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_ValidateEmailAddress_Response, was_validated_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Request, param_string_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Request, ipaddress_actual_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, ipaddress_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, countryname_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, statename_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, cityname_loginattempt_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, ipaddress_actual_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, countryname_actual_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, statename_actual_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, cityname_actual_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_SteamGuardPhishingReport_Response, steamguard_code_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Request, user_changes_only_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Response, timestamp_last_password_change_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Response, timestamp_last_email_change_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_LastCredentialChangeTime_Response, timestamp_last_password_reset_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetAccountAuthSecret_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetAccountAuthSecret_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetAccountAuthSecret_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetAccountAuthSecret_Response, secret_id_),
  PROTOBUF_FIELD_OFFSET(::CCredentials_GetAccountAuthSecret_Response, secret_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CCredentials_TestAvailablePassword_Request)},
  { 11, 17, sizeof(::CCredentials_TestAvailablePassword_Response)},
  { 18, 27, sizeof(::CCredentials_GetSteamGuardDetails_Request)},
  { 31, 43, sizeof(::CCredentials_GetSteamGuardDetails_Response_SessionData)},
  { 50, 65, sizeof(::CCredentials_GetSteamGuardDetails_Response)},
  { 75, 81, sizeof(::CCredentials_ValidateEmailAddress_Request)},
  { 82, 88, sizeof(::CCredentials_ValidateEmailAddress_Response)},
  { 89, 96, sizeof(::CCredentials_SteamGuardPhishingReport_Request)},
  { 98, 112, sizeof(::CCredentials_SteamGuardPhishingReport_Response)},
  { 121, 127, sizeof(::CCredentials_LastCredentialChangeTime_Request)},
  { 128, 136, sizeof(::CCredentials_LastCredentialChangeTime_Response)},
  { 139, -1, sizeof(::CCredentials_GetAccountAuthSecret_Request)},
  { 144, 151, sizeof(::CCredentials_GetAccountAuthSecret_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_TestAvailablePassword_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_TestAvailablePassword_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_GetSteamGuardDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_GetSteamGuardDetails_Response_SessionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_GetSteamGuardDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_ValidateEmailAddress_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_ValidateEmailAddress_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_SteamGuardPhishingReport_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_SteamGuardPhishingReport_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_LastCredentialChangeTime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_LastCredentialChangeTime_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_GetAccountAuthSecret_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCredentials_GetAccountAuthSecret_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fcredentials_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steammessages_credentials.steamclient."
  "proto\032 google/protobuf/descriptor.proto\032"
  "\030steammessages_base.proto\032,steammessages"
  "_unified_base.steamclient.proto\"q\n*CCred"
  "entials_TestAvailablePassword_Request\022\020\n"
  "\010password\030\001 \001(\t\022\033\n\023sha_digest_password\030\002"
  " \001(\014\022\024\n\014account_name\030\003 \001(\t\"\?\n+CCredentia"
  "ls_TestAvailablePassword_Response\022\020\n\010is_"
  "valid\030\003 \001(\010\"\242\001\n)CCredentials_GetSteamGua"
  "rdDetails_Request\022\021\n\twebcookie\030\002 \001(\t\022 \n\030"
  "timestamp_minimum_wanted\030\003 \001(\007\022\034\n\024deprec"
  "ated_ipaddress\030\004 \001(\005\022\"\n\nip_address\030\005 \001(\013"
  "2\016.CMsgIPAddress\"\377\005\n*CCredentials_GetSte"
  "amGuardDetails_Response\022\035\n\025is_steamguard"
  "_enabled\030\001 \001(\010\022$\n\034timestamp_steamguard_e"
  "nabled\030\002 \001(\007\022*\n\"deprecated_machine_name_"
  "userchosen\030\004 \001(\t\0227\n/deprecated_timestamp"
  "_machine_steamguard_enabled\030\005 \001(\007\022C\n;dep"
  "recated_authentication_exists_from_geolo"
  "c_before_mintime\030\006 \001(\010\022\035\n\025deprecated_mac"
  "hine_id\030\007 \001(\004\022M\n\014session_data\030\010 \003(\01327.CC"
  "redentials_GetSteamGuardDetails_Response"
  ".SessionData\022\034\n\024is_twofactor_enabled\030\t \001"
  "(\010\022#\n\033timestamp_twofactor_enabled\030\n \001(\007\022"
  "\031\n\021is_phone_verified\030\013 \001(\010\032\225\002\n\013SessionDa"
  "ta\022\022\n\nmachine_id\030\001 \001(\004\022\037\n\027machine_name_u"
  "serchosen\030\002 \001(\t\022,\n$timestamp_machine_ste"
  "amguard_enabled\030\003 \001(\007\0228\n0authentication_"
  "exists_from_geoloc_before_mintime\030\004 \001(\010\022"
  "9\n1authentication_exists_from_same_ip_be"
  "fore_mintime\030\006 \001(\010\022\023\n\013public_ipv4\030\007 \001(\r\022"
  "\031\n\021public_ip_address\030\010 \001(\t\";\n)CCredentia"
  "ls_ValidateEmailAddress_Request\022\016\n\006stoke"
  "n\030\001 \001(\t\"C\n*CCredentials_ValidateEmailAdd"
  "ress_Response\022\025\n\rwas_validated\030\001 \001(\010\"_\n-"
  "CCredentials_SteamGuardPhishingReport_Re"
  "quest\022\024\n\014param_string\030\001 \001(\t\022\030\n\020ipaddress"
  "_actual\030\002 \001(\t\"\263\002\n.CCredentials_SteamGuar"
  "dPhishingReport_Response\022\036\n\026ipaddress_lo"
  "ginattempt\030\001 \001(\t\022 \n\030countryname_loginatt"
  "empt\030\002 \001(\t\022\036\n\026statename_loginattempt\030\003 \001"
  "(\t\022\035\n\025cityname_loginattempt\030\004 \001(\t\022\030\n\020ipa"
  "ddress_actual\030\005 \001(\t\022\032\n\022countryname_actua"
  "l\030\006 \001(\t\022\030\n\020statename_actual\030\007 \001(\t\022\027\n\017cit"
  "yname_actual\030\010 \001(\t\022\027\n\017steamguard_code\030\t "
  "\001(\t\"J\n-CCredentials_LastCredentialChange"
  "Time_Request\022\031\n\021user_changes_only\030\001 \001(\010\""
  "\244\001\n.CCredentials_LastCredentialChangeTim"
  "e_Response\022&\n\036timestamp_last_password_ch"
  "ange\030\001 \001(\007\022#\n\033timestamp_last_email_chang"
  "e\030\002 \001(\007\022%\n\035timestamp_last_password_reset"
  "\030\003 \001(\007\"+\n)CCredentials_GetAccountAuthSec"
  "ret_Request\"O\n*CCredentials_GetAccountAu"
  "thSecret_Response\022\021\n\tsecret_id\030\001 \001(\005\022\016\n\006"
  "secret\030\002 \001(\0142\325\005\n\013Credentials\022r\n\025TestAvai"
  "lablePassword\022+.CCredentials_TestAvailab"
  "lePassword_Request\032,.CCredentials_TestAv"
  "ailablePassword_Response\022o\n\024GetSteamGuar"
  "dDetails\022*.CCredentials_GetSteamGuardDet"
  "ails_Request\032+.CCredentials_GetSteamGuar"
  "dDetails_Response\022o\n\024ValidateEmailAddres"
  "s\022*.CCredentials_ValidateEmailAddress_Re"
  "quest\032+.CCredentials_ValidateEmailAddres"
  "s_Response\022{\n\030SteamGuardPhishingReport\022."
  ".CCredentials_SteamGuardPhishingReport_R"
  "equest\032/.CCredentials_SteamGuardPhishing"
  "Report_Response\022\201\001\n\036GetCredentialChangeT"
  "imeDetails\022..CCredentials_LastCredential"
  "ChangeTime_Request\032/.CCredentials_LastCr"
  "edentialChangeTime_Response\022o\n\024GetAccoun"
  "tAuthSecret\022*.CCredentials_GetAccountAut"
  "hSecret_Request\032+.CCredentials_GetAccoun"
  "tAuthSecret_ResponseB\035\200\001\001\252\002\027OpenSteamwor"
  "ks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto = {
  false, false, 2931, descriptor_table_protodef_steammessages_5fcredentials_2esteamclient_2eproto, "steammessages_credentials.steamclient.proto", 
  &descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto_once, descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto_deps, 3, 13,
  schemas, file_default_instances, TableStruct_steammessages_5fcredentials_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fcredentials_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fcredentials_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fcredentials_2esteamclient_2eproto(&descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto);

// ===================================================================

class CCredentials_TestAvailablePassword_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_TestAvailablePassword_Request>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_digest_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCredentials_TestAvailablePassword_Request::CCredentials_TestAvailablePassword_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_TestAvailablePassword_Request)
}
CCredentials_TestAvailablePassword_Request::CCredentials_TestAvailablePassword_Request(const CCredentials_TestAvailablePassword_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  sha_digest_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_digest_password()) {
    sha_digest_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_digest_password(), 
      GetArena());
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCredentials_TestAvailablePassword_Request)
}

void CCredentials_TestAvailablePassword_Request::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_digest_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCredentials_TestAvailablePassword_Request::~CCredentials_TestAvailablePassword_Request() {
  // @@protoc_insertion_point(destructor:CCredentials_TestAvailablePassword_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_TestAvailablePassword_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_digest_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_TestAvailablePassword_Request::ArenaDtor(void* object) {
  CCredentials_TestAvailablePassword_Request* _this = reinterpret_cast< CCredentials_TestAvailablePassword_Request* >(object);
  (void)_this;
}
void CCredentials_TestAvailablePassword_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_TestAvailablePassword_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_TestAvailablePassword_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_TestAvailablePassword_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_digest_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      account_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_TestAvailablePassword_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_TestAvailablePassword_Request.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_digest_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha_digest_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string account_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_TestAvailablePassword_Request.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_TestAvailablePassword_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_TestAvailablePassword_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_TestAvailablePassword_Request.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional bytes sha_digest_password = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_digest_password(), target);
  }

  // optional string account_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_TestAvailablePassword_Request.account_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_TestAvailablePassword_Request)
  return target;
}

size_t CCredentials_TestAvailablePassword_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_TestAvailablePassword_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional bytes sha_digest_password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_digest_password());
    }

    // optional string account_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_TestAvailablePassword_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_TestAvailablePassword_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_TestAvailablePassword_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_TestAvailablePassword_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_TestAvailablePassword_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_TestAvailablePassword_Request)
    MergeFrom(*source);
  }
}

void CCredentials_TestAvailablePassword_Request::MergeFrom(const CCredentials_TestAvailablePassword_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_TestAvailablePassword_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_digest_password(from._internal_sha_digest_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_account_name(from._internal_account_name());
    }
  }
}

void CCredentials_TestAvailablePassword_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_TestAvailablePassword_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_TestAvailablePassword_Request::CopyFrom(const CCredentials_TestAvailablePassword_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_TestAvailablePassword_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_TestAvailablePassword_Request::IsInitialized() const {
  return true;
}

void CCredentials_TestAvailablePassword_Request::InternalSwap(CCredentials_TestAvailablePassword_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha_digest_password_.Swap(&other->sha_digest_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_TestAvailablePassword_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_TestAvailablePassword_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_TestAvailablePassword_Response>()._has_bits_);
  static void set_has_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCredentials_TestAvailablePassword_Response::CCredentials_TestAvailablePassword_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_TestAvailablePassword_Response)
}
CCredentials_TestAvailablePassword_Response::CCredentials_TestAvailablePassword_Response(const CCredentials_TestAvailablePassword_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:CCredentials_TestAvailablePassword_Response)
}

void CCredentials_TestAvailablePassword_Response::SharedCtor() {
is_valid_ = false;
}

CCredentials_TestAvailablePassword_Response::~CCredentials_TestAvailablePassword_Response() {
  // @@protoc_insertion_point(destructor:CCredentials_TestAvailablePassword_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_TestAvailablePassword_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCredentials_TestAvailablePassword_Response::ArenaDtor(void* object) {
  CCredentials_TestAvailablePassword_Response* _this = reinterpret_cast< CCredentials_TestAvailablePassword_Response* >(object);
  (void)_this;
}
void CCredentials_TestAvailablePassword_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_TestAvailablePassword_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_TestAvailablePassword_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_TestAvailablePassword_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_valid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_TestAvailablePassword_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_valid(&has_bits);
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_TestAvailablePassword_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_TestAvailablePassword_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_valid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_TestAvailablePassword_Response)
  return target;
}

size_t CCredentials_TestAvailablePassword_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_TestAvailablePassword_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_valid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_TestAvailablePassword_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_TestAvailablePassword_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_TestAvailablePassword_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_TestAvailablePassword_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_TestAvailablePassword_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_TestAvailablePassword_Response)
    MergeFrom(*source);
  }
}

void CCredentials_TestAvailablePassword_Response::MergeFrom(const CCredentials_TestAvailablePassword_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_TestAvailablePassword_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_valid()) {
    _internal_set_is_valid(from._internal_is_valid());
  }
}

void CCredentials_TestAvailablePassword_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_TestAvailablePassword_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_TestAvailablePassword_Response::CopyFrom(const CCredentials_TestAvailablePassword_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_TestAvailablePassword_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_TestAvailablePassword_Response::IsInitialized() const {
  return true;
}

void CCredentials_TestAvailablePassword_Response::InternalSwap(CCredentials_TestAvailablePassword_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_valid_, other->is_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_TestAvailablePassword_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_GetSteamGuardDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_GetSteamGuardDetails_Request>()._has_bits_);
  static void set_has_webcookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_minimum_wanted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgIPAddress& ip_address(const CCredentials_GetSteamGuardDetails_Request* msg);
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgIPAddress&
CCredentials_GetSteamGuardDetails_Request::_Internal::ip_address(const CCredentials_GetSteamGuardDetails_Request* msg) {
  return *msg->ip_address_;
}
void CCredentials_GetSteamGuardDetails_Request::clear_ip_address() {
  if (ip_address_ != nullptr) ip_address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CCredentials_GetSteamGuardDetails_Request::CCredentials_GetSteamGuardDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_GetSteamGuardDetails_Request)
}
CCredentials_GetSteamGuardDetails_Request::CCredentials_GetSteamGuardDetails_Request(const CCredentials_GetSteamGuardDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  webcookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_webcookie()) {
    webcookie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webcookie(), 
      GetArena());
  }
  if (from._internal_has_ip_address()) {
    ip_address_ = new ::CMsgIPAddress(*from.ip_address_);
  } else {
    ip_address_ = nullptr;
  }
  ::memcpy(&timestamp_minimum_wanted_, &from.timestamp_minimum_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_ipaddress_) -
    reinterpret_cast<char*>(&timestamp_minimum_wanted_)) + sizeof(deprecated_ipaddress_));
  // @@protoc_insertion_point(copy_constructor:CCredentials_GetSteamGuardDetails_Request)
}

void CCredentials_GetSteamGuardDetails_Request::SharedCtor() {
webcookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ip_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_ipaddress_) -
    reinterpret_cast<char*>(&ip_address_)) + sizeof(deprecated_ipaddress_));
}

CCredentials_GetSteamGuardDetails_Request::~CCredentials_GetSteamGuardDetails_Request() {
  // @@protoc_insertion_point(destructor:CCredentials_GetSteamGuardDetails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_GetSteamGuardDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  webcookie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ip_address_;
}

void CCredentials_GetSteamGuardDetails_Request::ArenaDtor(void* object) {
  CCredentials_GetSteamGuardDetails_Request* _this = reinterpret_cast< CCredentials_GetSteamGuardDetails_Request* >(object);
  (void)_this;
}
void CCredentials_GetSteamGuardDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_GetSteamGuardDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_GetSteamGuardDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_GetSteamGuardDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      webcookie_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ip_address_ != nullptr);
      ip_address_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&timestamp_minimum_wanted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_ipaddress_) -
        reinterpret_cast<char*>(&timestamp_minimum_wanted_)) + sizeof(deprecated_ipaddress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_GetSteamGuardDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string webcookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_webcookie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_GetSteamGuardDetails_Request.webcookie");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp_minimum_wanted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_timestamp_minimum_wanted(&has_bits);
          timestamp_minimum_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 deprecated_ipaddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deprecated_ipaddress(&has_bits);
          deprecated_ipaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress ip_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_GetSteamGuardDetails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_GetSteamGuardDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string webcookie = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webcookie().data(), static_cast<int>(this->_internal_webcookie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_GetSteamGuardDetails_Request.webcookie");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_webcookie(), target);
  }

  // optional fixed32 timestamp_minimum_wanted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_timestamp_minimum_wanted(), target);
  }

  // optional int32 deprecated_ipaddress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_deprecated_ipaddress(), target);
  }

  // optional .CMsgIPAddress ip_address = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ip_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_GetSteamGuardDetails_Request)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_GetSteamGuardDetails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string webcookie = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webcookie());
    }

    // optional .CMsgIPAddress ip_address = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_address_);
    }

    // optional fixed32 timestamp_minimum_wanted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 deprecated_ipaddress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deprecated_ipaddress());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_GetSteamGuardDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_GetSteamGuardDetails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_GetSteamGuardDetails_Request)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Request::MergeFrom(const CCredentials_GetSteamGuardDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_GetSteamGuardDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_webcookie(from._internal_webcookie());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ip_address()->::CMsgIPAddress::MergeFrom(from._internal_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_minimum_wanted_ = from.timestamp_minimum_wanted_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_ipaddress_ = from.deprecated_ipaddress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetSteamGuardDetails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_GetSteamGuardDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Request::CopyFrom(const CCredentials_GetSteamGuardDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_GetSteamGuardDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Request::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Request::InternalSwap(CCredentials_GetSteamGuardDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  webcookie_.Swap(&other->webcookie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCredentials_GetSteamGuardDetails_Request, deprecated_ipaddress_)
      + sizeof(CCredentials_GetSteamGuardDetails_Request::deprecated_ipaddress_)
      - PROTOBUF_FIELD_OFFSET(CCredentials_GetSteamGuardDetails_Request, ip_address_)>(
          reinterpret_cast<char*>(&ip_address_),
          reinterpret_cast<char*>(&other->ip_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_GetSteamGuardDetails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_GetSteamGuardDetails_Response_SessionData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_GetSteamGuardDetails_Response_SessionData>()._has_bits_);
  static void set_has_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_machine_name_userchosen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_machine_steamguard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_authentication_exists_from_geoloc_before_mintime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_authentication_exists_from_same_ip_before_mintime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_public_ipv4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_public_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCredentials_GetSteamGuardDetails_Response_SessionData::CCredentials_GetSteamGuardDetails_Response_SessionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_GetSteamGuardDetails_Response.SessionData)
}
CCredentials_GetSteamGuardDetails_Response_SessionData::CCredentials_GetSteamGuardDetails_Response_SessionData(const CCredentials_GetSteamGuardDetails_Response_SessionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_machine_name_userchosen()) {
    machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name_userchosen(), 
      GetArena());
  }
  public_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_ip_address()) {
    public_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_ip_address(), 
      GetArena());
  }
  ::memcpy(&machine_id_, &from.machine_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ipv4_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(public_ipv4_));
  // @@protoc_insertion_point(copy_constructor:CCredentials_GetSteamGuardDetails_Response.SessionData)
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::SharedCtor() {
machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&machine_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&public_ipv4_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(public_ipv4_));
}

CCredentials_GetSteamGuardDetails_Response_SessionData::~CCredentials_GetSteamGuardDetails_Response_SessionData() {
  // @@protoc_insertion_point(destructor:CCredentials_GetSteamGuardDetails_Response.SessionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  machine_name_userchosen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::ArenaDtor(void* object) {
  CCredentials_GetSteamGuardDetails_Response_SessionData* _this = reinterpret_cast< CCredentials_GetSteamGuardDetails_Response_SessionData* >(object);
  (void)_this;
}
void CCredentials_GetSteamGuardDetails_Response_SessionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_GetSteamGuardDetails_Response_SessionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      machine_name_userchosen_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      public_ip_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&machine_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ipv4_) -
        reinterpret_cast<char*>(&machine_id_)) + sizeof(public_ipv4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_GetSteamGuardDetails_Response_SessionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_machine_id(&has_bits);
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name_userchosen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_machine_name_userchosen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp_machine_steamguard_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_timestamp_machine_steamguard_enabled(&has_bits);
          timestamp_machine_steamguard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool authentication_exists_from_geoloc_before_mintime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_authentication_exists_from_geoloc_before_mintime(&has_bits);
          authentication_exists_from_geoloc_before_mintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool authentication_exists_from_same_ip_before_mintime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_authentication_exists_from_same_ip_before_mintime(&has_bits);
          authentication_exists_from_same_ip_before_mintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 public_ipv4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_public_ipv4(&has_bits);
          public_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_ip_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_public_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_GetSteamGuardDetails_Response_SessionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 machine_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_machine_id(), target);
  }

  // optional string machine_name_userchosen = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name_userchosen().data(), static_cast<int>(this->_internal_machine_name_userchosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_machine_name_userchosen(), target);
  }

  // optional fixed32 timestamp_machine_steamguard_enabled = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_timestamp_machine_steamguard_enabled(), target);
  }

  // optional bool authentication_exists_from_geoloc_before_mintime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_authentication_exists_from_geoloc_before_mintime(), target);
  }

  // optional bool authentication_exists_from_same_ip_before_mintime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_authentication_exists_from_same_ip_before_mintime(), target);
  }

  // optional uint32 public_ipv4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_public_ipv4(), target);
  }

  // optional string public_ip_address = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_ip_address().data(), static_cast<int>(this->_internal_public_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_public_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_GetSteamGuardDetails_Response.SessionData)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Response_SessionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string machine_name_userchosen = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name_userchosen());
    }

    // optional string public_ip_address = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_ip_address());
    }

    // optional uint64 machine_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_machine_id());
    }

    // optional fixed32 timestamp_machine_steamguard_enabled = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool authentication_exists_from_geoloc_before_mintime = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool authentication_exists_from_same_ip_before_mintime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 public_ipv4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_public_ipv4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Response_SessionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Response_SessionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_GetSteamGuardDetails_Response.SessionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_GetSteamGuardDetails_Response.SessionData)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::MergeFrom(const CCredentials_GetSteamGuardDetails_Response_SessionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name_userchosen(from._internal_machine_name_userchosen());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_public_ip_address(from._internal_public_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      machine_id_ = from.machine_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_machine_steamguard_enabled_ = from.timestamp_machine_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      authentication_exists_from_geoloc_before_mintime_ = from.authentication_exists_from_geoloc_before_mintime_;
    }
    if (cached_has_bits & 0x00000020u) {
      authentication_exists_from_same_ip_before_mintime_ = from.authentication_exists_from_same_ip_before_mintime_;
    }
    if (cached_has_bits & 0x00000040u) {
      public_ipv4_ = from.public_ipv4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::CopyFrom(const CCredentials_GetSteamGuardDetails_Response_SessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_GetSteamGuardDetails_Response.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Response_SessionData::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Response_SessionData::InternalSwap(CCredentials_GetSteamGuardDetails_Response_SessionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_name_userchosen_.Swap(&other->machine_name_userchosen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_ip_address_.Swap(&other->public_ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCredentials_GetSteamGuardDetails_Response_SessionData, public_ipv4_)
      + sizeof(CCredentials_GetSteamGuardDetails_Response_SessionData::public_ipv4_)
      - PROTOBUF_FIELD_OFFSET(CCredentials_GetSteamGuardDetails_Response_SessionData, machine_id_)>(
          reinterpret_cast<char*>(&machine_id_),
          reinterpret_cast<char*>(&other->machine_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_GetSteamGuardDetails_Response_SessionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_GetSteamGuardDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_GetSteamGuardDetails_Response>()._has_bits_);
  static void set_has_is_steamguard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestamp_steamguard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_machine_name_userchosen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_timestamp_machine_steamguard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_authentication_exists_from_geoloc_before_mintime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deprecated_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_twofactor_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp_twofactor_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_phone_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CCredentials_GetSteamGuardDetails_Response::CCredentials_GetSteamGuardDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  session_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_GetSteamGuardDetails_Response)
}
CCredentials_GetSteamGuardDetails_Response::CCredentials_GetSteamGuardDetails_Response(const CCredentials_GetSteamGuardDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      session_data_(from.session_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deprecated_machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_deprecated_machine_name_userchosen()) {
    deprecated_machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deprecated_machine_name_userchosen(), 
      GetArena());
  }
  ::memcpy(&timestamp_steamguard_enabled_, &from.timestamp_steamguard_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_twofactor_enabled_) -
    reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(timestamp_twofactor_enabled_));
  // @@protoc_insertion_point(copy_constructor:CCredentials_GetSteamGuardDetails_Response)
}

void CCredentials_GetSteamGuardDetails_Response::SharedCtor() {
deprecated_machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_steamguard_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_twofactor_enabled_) -
    reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(timestamp_twofactor_enabled_));
}

CCredentials_GetSteamGuardDetails_Response::~CCredentials_GetSteamGuardDetails_Response() {
  // @@protoc_insertion_point(destructor:CCredentials_GetSteamGuardDetails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_GetSteamGuardDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deprecated_machine_name_userchosen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetSteamGuardDetails_Response::ArenaDtor(void* object) {
  CCredentials_GetSteamGuardDetails_Response* _this = reinterpret_cast< CCredentials_GetSteamGuardDetails_Response* >(object);
  (void)_this;
}
void CCredentials_GetSteamGuardDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_GetSteamGuardDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_GetSteamGuardDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_GetSteamGuardDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    deprecated_machine_name_userchosen_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&timestamp_steamguard_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_phone_verified_) -
        reinterpret_cast<char*>(&timestamp_steamguard_enabled_)) + sizeof(is_phone_verified_));
  }
  timestamp_twofactor_enabled_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_GetSteamGuardDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_steamguard_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_steamguard_enabled(&has_bits);
          is_steamguard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp_steamguard_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_timestamp_steamguard_enabled(&has_bits);
          timestamp_steamguard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string deprecated_machine_name_userchosen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_deprecated_machine_name_userchosen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_deprecated_timestamp_machine_steamguard_enabled(&has_bits);
          deprecated_timestamp_machine_steamguard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_deprecated_authentication_exists_from_geoloc_before_mintime(&has_bits);
          deprecated_authentication_exists_from_geoloc_before_mintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 deprecated_machine_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deprecated_machine_id(&has_bits);
          deprecated_machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_twofactor_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_twofactor_enabled(&has_bits);
          is_twofactor_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp_twofactor_enabled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_timestamp_twofactor_enabled(&has_bits);
          timestamp_twofactor_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool is_phone_verified = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_phone_verified(&has_bits);
          is_phone_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_GetSteamGuardDetails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_GetSteamGuardDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_steamguard_enabled = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_steamguard_enabled(), target);
  }

  // optional fixed32 timestamp_steamguard_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_timestamp_steamguard_enabled(), target);
  }

  // optional string deprecated_machine_name_userchosen = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deprecated_machine_name_userchosen().data(), static_cast<int>(this->_internal_deprecated_machine_name_userchosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deprecated_machine_name_userchosen(), target);
  }

  // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_deprecated_timestamp_machine_steamguard_enabled(), target);
  }

  // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_deprecated_authentication_exists_from_geoloc_before_mintime(), target);
  }

  // optional uint64 deprecated_machine_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_deprecated_machine_id(), target);
  }

  // repeated .CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_session_data(i), target, stream);
  }

  // optional bool is_twofactor_enabled = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_twofactor_enabled(), target);
  }

  // optional fixed32 timestamp_twofactor_enabled = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_timestamp_twofactor_enabled(), target);
  }

  // optional bool is_phone_verified = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_phone_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_GetSteamGuardDetails_Response)
  return target;
}

size_t CCredentials_GetSteamGuardDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_GetSteamGuardDetails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
  total_size += 1UL * this->_internal_session_data_size();
  for (const auto& msg : this->session_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string deprecated_machine_name_userchosen = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_machine_name_userchosen());
    }

    // optional fixed32 timestamp_steamguard_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint64 deprecated_machine_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_deprecated_machine_id());
    }

    // optional bool is_steamguard_enabled = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_twofactor_enabled = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_phone_verified = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional fixed32 timestamp_twofactor_enabled = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetSteamGuardDetails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_GetSteamGuardDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetSteamGuardDetails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_GetSteamGuardDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_GetSteamGuardDetails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_GetSteamGuardDetails_Response)
    MergeFrom(*source);
  }
}

void CCredentials_GetSteamGuardDetails_Response::MergeFrom(const CCredentials_GetSteamGuardDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_GetSteamGuardDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_data_.MergeFrom(from.session_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_machine_name_userchosen(from._internal_deprecated_machine_name_userchosen());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_steamguard_enabled_ = from.timestamp_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      deprecated_timestamp_machine_steamguard_enabled_ = from.deprecated_timestamp_machine_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_machine_id_ = from.deprecated_machine_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_steamguard_enabled_ = from.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      deprecated_authentication_exists_from_geoloc_before_mintime_ = from.deprecated_authentication_exists_from_geoloc_before_mintime_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_twofactor_enabled_ = from.is_twofactor_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_timestamp_twofactor_enabled(from._internal_timestamp_twofactor_enabled());
  }
}

void CCredentials_GetSteamGuardDetails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_GetSteamGuardDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetSteamGuardDetails_Response::CopyFrom(const CCredentials_GetSteamGuardDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_GetSteamGuardDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetSteamGuardDetails_Response::IsInitialized() const {
  return true;
}

void CCredentials_GetSteamGuardDetails_Response::InternalSwap(CCredentials_GetSteamGuardDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_data_.InternalSwap(&other->session_data_);
  deprecated_machine_name_userchosen_.Swap(&other->deprecated_machine_name_userchosen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCredentials_GetSteamGuardDetails_Response, timestamp_twofactor_enabled_)
      + sizeof(CCredentials_GetSteamGuardDetails_Response::timestamp_twofactor_enabled_)
      - PROTOBUF_FIELD_OFFSET(CCredentials_GetSteamGuardDetails_Response, timestamp_steamguard_enabled_)>(
          reinterpret_cast<char*>(&timestamp_steamguard_enabled_),
          reinterpret_cast<char*>(&other->timestamp_steamguard_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_GetSteamGuardDetails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_ValidateEmailAddress_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_ValidateEmailAddress_Request>()._has_bits_);
  static void set_has_stoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCredentials_ValidateEmailAddress_Request::CCredentials_ValidateEmailAddress_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_ValidateEmailAddress_Request)
}
CCredentials_ValidateEmailAddress_Request::CCredentials_ValidateEmailAddress_Request(const CCredentials_ValidateEmailAddress_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stoken()) {
    stoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stoken(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCredentials_ValidateEmailAddress_Request)
}

void CCredentials_ValidateEmailAddress_Request::SharedCtor() {
stoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCredentials_ValidateEmailAddress_Request::~CCredentials_ValidateEmailAddress_Request() {
  // @@protoc_insertion_point(destructor:CCredentials_ValidateEmailAddress_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_ValidateEmailAddress_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_ValidateEmailAddress_Request::ArenaDtor(void* object) {
  CCredentials_ValidateEmailAddress_Request* _this = reinterpret_cast< CCredentials_ValidateEmailAddress_Request* >(object);
  (void)_this;
}
void CCredentials_ValidateEmailAddress_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_ValidateEmailAddress_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_ValidateEmailAddress_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_ValidateEmailAddress_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stoken_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_ValidateEmailAddress_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string stoken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_ValidateEmailAddress_Request.stoken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_ValidateEmailAddress_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_ValidateEmailAddress_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stoken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stoken().data(), static_cast<int>(this->_internal_stoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_ValidateEmailAddress_Request.stoken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_ValidateEmailAddress_Request)
  return target;
}

size_t CCredentials_ValidateEmailAddress_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_ValidateEmailAddress_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string stoken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_ValidateEmailAddress_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_ValidateEmailAddress_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_ValidateEmailAddress_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_ValidateEmailAddress_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_ValidateEmailAddress_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_ValidateEmailAddress_Request)
    MergeFrom(*source);
  }
}

void CCredentials_ValidateEmailAddress_Request::MergeFrom(const CCredentials_ValidateEmailAddress_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_ValidateEmailAddress_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stoken()) {
    _internal_set_stoken(from._internal_stoken());
  }
}

void CCredentials_ValidateEmailAddress_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_ValidateEmailAddress_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_ValidateEmailAddress_Request::CopyFrom(const CCredentials_ValidateEmailAddress_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_ValidateEmailAddress_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_ValidateEmailAddress_Request::IsInitialized() const {
  return true;
}

void CCredentials_ValidateEmailAddress_Request::InternalSwap(CCredentials_ValidateEmailAddress_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stoken_.Swap(&other->stoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_ValidateEmailAddress_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_ValidateEmailAddress_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_ValidateEmailAddress_Response>()._has_bits_);
  static void set_has_was_validated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCredentials_ValidateEmailAddress_Response::CCredentials_ValidateEmailAddress_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_ValidateEmailAddress_Response)
}
CCredentials_ValidateEmailAddress_Response::CCredentials_ValidateEmailAddress_Response(const CCredentials_ValidateEmailAddress_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  was_validated_ = from.was_validated_;
  // @@protoc_insertion_point(copy_constructor:CCredentials_ValidateEmailAddress_Response)
}

void CCredentials_ValidateEmailAddress_Response::SharedCtor() {
was_validated_ = false;
}

CCredentials_ValidateEmailAddress_Response::~CCredentials_ValidateEmailAddress_Response() {
  // @@protoc_insertion_point(destructor:CCredentials_ValidateEmailAddress_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_ValidateEmailAddress_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCredentials_ValidateEmailAddress_Response::ArenaDtor(void* object) {
  CCredentials_ValidateEmailAddress_Response* _this = reinterpret_cast< CCredentials_ValidateEmailAddress_Response* >(object);
  (void)_this;
}
void CCredentials_ValidateEmailAddress_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_ValidateEmailAddress_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_ValidateEmailAddress_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_ValidateEmailAddress_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  was_validated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_ValidateEmailAddress_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool was_validated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_was_validated(&has_bits);
          was_validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_ValidateEmailAddress_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_ValidateEmailAddress_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool was_validated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_was_validated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_ValidateEmailAddress_Response)
  return target;
}

size_t CCredentials_ValidateEmailAddress_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_ValidateEmailAddress_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool was_validated = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_ValidateEmailAddress_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_ValidateEmailAddress_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_ValidateEmailAddress_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_ValidateEmailAddress_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_ValidateEmailAddress_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_ValidateEmailAddress_Response)
    MergeFrom(*source);
  }
}

void CCredentials_ValidateEmailAddress_Response::MergeFrom(const CCredentials_ValidateEmailAddress_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_ValidateEmailAddress_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_was_validated()) {
    _internal_set_was_validated(from._internal_was_validated());
  }
}

void CCredentials_ValidateEmailAddress_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_ValidateEmailAddress_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_ValidateEmailAddress_Response::CopyFrom(const CCredentials_ValidateEmailAddress_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_ValidateEmailAddress_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_ValidateEmailAddress_Response::IsInitialized() const {
  return true;
}

void CCredentials_ValidateEmailAddress_Response::InternalSwap(CCredentials_ValidateEmailAddress_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(was_validated_, other->was_validated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_ValidateEmailAddress_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_SteamGuardPhishingReport_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_SteamGuardPhishingReport_Request>()._has_bits_);
  static void set_has_param_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipaddress_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCredentials_SteamGuardPhishingReport_Request::CCredentials_SteamGuardPhishingReport_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_SteamGuardPhishingReport_Request)
}
CCredentials_SteamGuardPhishingReport_Request::CCredentials_SteamGuardPhishingReport_Request(const CCredentials_SteamGuardPhishingReport_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param_string()) {
    param_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param_string(), 
      GetArena());
  }
  ipaddress_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipaddress_actual()) {
    ipaddress_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipaddress_actual(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCredentials_SteamGuardPhishingReport_Request)
}

void CCredentials_SteamGuardPhishingReport_Request::SharedCtor() {
param_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipaddress_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCredentials_SteamGuardPhishingReport_Request::~CCredentials_SteamGuardPhishingReport_Request() {
  // @@protoc_insertion_point(destructor:CCredentials_SteamGuardPhishingReport_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_SteamGuardPhishingReport_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  param_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_SteamGuardPhishingReport_Request::ArenaDtor(void* object) {
  CCredentials_SteamGuardPhishingReport_Request* _this = reinterpret_cast< CCredentials_SteamGuardPhishingReport_Request* >(object);
  (void)_this;
}
void CCredentials_SteamGuardPhishingReport_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_SteamGuardPhishingReport_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_SteamGuardPhishingReport_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_SteamGuardPhishingReport_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      param_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ipaddress_actual_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_SteamGuardPhishingReport_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string param_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_param_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Request.param_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipaddress_actual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ipaddress_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_SteamGuardPhishingReport_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_SteamGuardPhishingReport_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string param_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param_string().data(), static_cast<int>(this->_internal_param_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Request.param_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_param_string(), target);
  }

  // optional string ipaddress_actual = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress_actual().data(), static_cast<int>(this->_internal_ipaddress_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ipaddress_actual(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_SteamGuardPhishingReport_Request)
  return target;
}

size_t CCredentials_SteamGuardPhishingReport_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_SteamGuardPhishingReport_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string param_string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param_string());
    }

    // optional string ipaddress_actual = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress_actual());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_SteamGuardPhishingReport_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_SteamGuardPhishingReport_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_SteamGuardPhishingReport_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_SteamGuardPhishingReport_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_SteamGuardPhishingReport_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_SteamGuardPhishingReport_Request)
    MergeFrom(*source);
  }
}

void CCredentials_SteamGuardPhishingReport_Request::MergeFrom(const CCredentials_SteamGuardPhishingReport_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_SteamGuardPhishingReport_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_param_string(from._internal_param_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ipaddress_actual(from._internal_ipaddress_actual());
    }
  }
}

void CCredentials_SteamGuardPhishingReport_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_SteamGuardPhishingReport_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_SteamGuardPhishingReport_Request::CopyFrom(const CCredentials_SteamGuardPhishingReport_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_SteamGuardPhishingReport_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_SteamGuardPhishingReport_Request::IsInitialized() const {
  return true;
}

void CCredentials_SteamGuardPhishingReport_Request::InternalSwap(CCredentials_SteamGuardPhishingReport_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_string_.Swap(&other->param_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipaddress_actual_.Swap(&other->ipaddress_actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_SteamGuardPhishingReport_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_SteamGuardPhishingReport_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_SteamGuardPhishingReport_Response>()._has_bits_);
  static void set_has_ipaddress_loginattempt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_countryname_loginattempt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_statename_loginattempt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cityname_loginattempt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipaddress_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_countryname_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_statename_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cityname_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steamguard_code(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CCredentials_SteamGuardPhishingReport_Response::CCredentials_SteamGuardPhishingReport_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_SteamGuardPhishingReport_Response)
}
CCredentials_SteamGuardPhishingReport_Response::CCredentials_SteamGuardPhishingReport_Response(const CCredentials_SteamGuardPhishingReport_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipaddress_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipaddress_loginattempt()) {
    ipaddress_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipaddress_loginattempt(), 
      GetArena());
  }
  countryname_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_countryname_loginattempt()) {
    countryname_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countryname_loginattempt(), 
      GetArena());
  }
  statename_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_statename_loginattempt()) {
    statename_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statename_loginattempt(), 
      GetArena());
  }
  cityname_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cityname_loginattempt()) {
    cityname_loginattempt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cityname_loginattempt(), 
      GetArena());
  }
  ipaddress_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipaddress_actual()) {
    ipaddress_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipaddress_actual(), 
      GetArena());
  }
  countryname_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_countryname_actual()) {
    countryname_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_countryname_actual(), 
      GetArena());
  }
  statename_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_statename_actual()) {
    statename_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statename_actual(), 
      GetArena());
  }
  cityname_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cityname_actual()) {
    cityname_actual_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cityname_actual(), 
      GetArena());
  }
  steamguard_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_steamguard_code()) {
    steamguard_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamguard_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCredentials_SteamGuardPhishingReport_Response)
}

void CCredentials_SteamGuardPhishingReport_Response::SharedCtor() {
ipaddress_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
countryname_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
statename_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cityname_loginattempt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipaddress_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
countryname_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
statename_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cityname_actual_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamguard_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCredentials_SteamGuardPhishingReport_Response::~CCredentials_SteamGuardPhishingReport_Response() {
  // @@protoc_insertion_point(destructor:CCredentials_SteamGuardPhishingReport_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_SteamGuardPhishingReport_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ipaddress_loginattempt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countryname_loginattempt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statename_loginattempt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cityname_loginattempt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countryname_actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statename_actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cityname_actual_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamguard_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_SteamGuardPhishingReport_Response::ArenaDtor(void* object) {
  CCredentials_SteamGuardPhishingReport_Response* _this = reinterpret_cast< CCredentials_SteamGuardPhishingReport_Response* >(object);
  (void)_this;
}
void CCredentials_SteamGuardPhishingReport_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_SteamGuardPhishingReport_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_SteamGuardPhishingReport_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_SteamGuardPhishingReport_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ipaddress_loginattempt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      countryname_loginattempt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      statename_loginattempt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      cityname_loginattempt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ipaddress_actual_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      countryname_actual_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      statename_actual_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      cityname_actual_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    steamguard_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_SteamGuardPhishingReport_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ipaddress_loginattempt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipaddress_loginattempt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string countryname_loginattempt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_countryname_loginattempt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string statename_loginattempt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_statename_loginattempt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cityname_loginattempt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cityname_loginattempt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipaddress_actual = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipaddress_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string countryname_actual = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_countryname_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.countryname_actual");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string statename_actual = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_statename_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.statename_actual");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cityname_actual = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_cityname_actual();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.cityname_actual");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string steamguard_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_steamguard_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCredentials_SteamGuardPhishingReport_Response.steamguard_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_SteamGuardPhishingReport_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_SteamGuardPhishingReport_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ipaddress_loginattempt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress_loginattempt().data(), static_cast<int>(this->_internal_ipaddress_loginattempt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipaddress_loginattempt(), target);
  }

  // optional string countryname_loginattempt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_countryname_loginattempt().data(), static_cast<int>(this->_internal_countryname_loginattempt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_countryname_loginattempt(), target);
  }

  // optional string statename_loginattempt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_statename_loginattempt().data(), static_cast<int>(this->_internal_statename_loginattempt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_statename_loginattempt(), target);
  }

  // optional string cityname_loginattempt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cityname_loginattempt().data(), static_cast<int>(this->_internal_cityname_loginattempt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cityname_loginattempt(), target);
  }

  // optional string ipaddress_actual = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress_actual().data(), static_cast<int>(this->_internal_ipaddress_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipaddress_actual(), target);
  }

  // optional string countryname_actual = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_countryname_actual().data(), static_cast<int>(this->_internal_countryname_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.countryname_actual");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_countryname_actual(), target);
  }

  // optional string statename_actual = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_statename_actual().data(), static_cast<int>(this->_internal_statename_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.statename_actual");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_statename_actual(), target);
  }

  // optional string cityname_actual = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cityname_actual().data(), static_cast<int>(this->_internal_cityname_actual().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.cityname_actual");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cityname_actual(), target);
  }

  // optional string steamguard_code = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_steamguard_code().data(), static_cast<int>(this->_internal_steamguard_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCredentials_SteamGuardPhishingReport_Response.steamguard_code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_steamguard_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_SteamGuardPhishingReport_Response)
  return target;
}

size_t CCredentials_SteamGuardPhishingReport_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_SteamGuardPhishingReport_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ipaddress_loginattempt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress_loginattempt());
    }

    // optional string countryname_loginattempt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countryname_loginattempt());
    }

    // optional string statename_loginattempt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_statename_loginattempt());
    }

    // optional string cityname_loginattempt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cityname_loginattempt());
    }

    // optional string ipaddress_actual = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress_actual());
    }

    // optional string countryname_actual = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_countryname_actual());
    }

    // optional string statename_actual = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_statename_actual());
    }

    // optional string cityname_actual = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cityname_actual());
    }

  }
  // optional string steamguard_code = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_steamguard_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_SteamGuardPhishingReport_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_SteamGuardPhishingReport_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_SteamGuardPhishingReport_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_SteamGuardPhishingReport_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_SteamGuardPhishingReport_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_SteamGuardPhishingReport_Response)
    MergeFrom(*source);
  }
}

void CCredentials_SteamGuardPhishingReport_Response::MergeFrom(const CCredentials_SteamGuardPhishingReport_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_SteamGuardPhishingReport_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipaddress_loginattempt(from._internal_ipaddress_loginattempt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_countryname_loginattempt(from._internal_countryname_loginattempt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_statename_loginattempt(from._internal_statename_loginattempt());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_cityname_loginattempt(from._internal_cityname_loginattempt());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ipaddress_actual(from._internal_ipaddress_actual());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_countryname_actual(from._internal_countryname_actual());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_statename_actual(from._internal_statename_actual());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_cityname_actual(from._internal_cityname_actual());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_steamguard_code(from._internal_steamguard_code());
  }
}

void CCredentials_SteamGuardPhishingReport_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_SteamGuardPhishingReport_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_SteamGuardPhishingReport_Response::CopyFrom(const CCredentials_SteamGuardPhishingReport_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_SteamGuardPhishingReport_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_SteamGuardPhishingReport_Response::IsInitialized() const {
  return true;
}

void CCredentials_SteamGuardPhishingReport_Response::InternalSwap(CCredentials_SteamGuardPhishingReport_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipaddress_loginattempt_.Swap(&other->ipaddress_loginattempt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countryname_loginattempt_.Swap(&other->countryname_loginattempt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statename_loginattempt_.Swap(&other->statename_loginattempt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cityname_loginattempt_.Swap(&other->cityname_loginattempt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipaddress_actual_.Swap(&other->ipaddress_actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countryname_actual_.Swap(&other->countryname_actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statename_actual_.Swap(&other->statename_actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cityname_actual_.Swap(&other->cityname_actual_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  steamguard_code_.Swap(&other->steamguard_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_SteamGuardPhishingReport_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_LastCredentialChangeTime_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_LastCredentialChangeTime_Request>()._has_bits_);
  static void set_has_user_changes_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCredentials_LastCredentialChangeTime_Request::CCredentials_LastCredentialChangeTime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_LastCredentialChangeTime_Request)
}
CCredentials_LastCredentialChangeTime_Request::CCredentials_LastCredentialChangeTime_Request(const CCredentials_LastCredentialChangeTime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_changes_only_ = from.user_changes_only_;
  // @@protoc_insertion_point(copy_constructor:CCredentials_LastCredentialChangeTime_Request)
}

void CCredentials_LastCredentialChangeTime_Request::SharedCtor() {
user_changes_only_ = false;
}

CCredentials_LastCredentialChangeTime_Request::~CCredentials_LastCredentialChangeTime_Request() {
  // @@protoc_insertion_point(destructor:CCredentials_LastCredentialChangeTime_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_LastCredentialChangeTime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCredentials_LastCredentialChangeTime_Request::ArenaDtor(void* object) {
  CCredentials_LastCredentialChangeTime_Request* _this = reinterpret_cast< CCredentials_LastCredentialChangeTime_Request* >(object);
  (void)_this;
}
void CCredentials_LastCredentialChangeTime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_LastCredentialChangeTime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_LastCredentialChangeTime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_LastCredentialChangeTime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_changes_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_LastCredentialChangeTime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool user_changes_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_changes_only(&has_bits);
          user_changes_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_LastCredentialChangeTime_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_LastCredentialChangeTime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool user_changes_only = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_user_changes_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_LastCredentialChangeTime_Request)
  return target;
}

size_t CCredentials_LastCredentialChangeTime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_LastCredentialChangeTime_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool user_changes_only = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_LastCredentialChangeTime_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_LastCredentialChangeTime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_LastCredentialChangeTime_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_LastCredentialChangeTime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_LastCredentialChangeTime_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_LastCredentialChangeTime_Request)
    MergeFrom(*source);
  }
}

void CCredentials_LastCredentialChangeTime_Request::MergeFrom(const CCredentials_LastCredentialChangeTime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_LastCredentialChangeTime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_changes_only()) {
    _internal_set_user_changes_only(from._internal_user_changes_only());
  }
}

void CCredentials_LastCredentialChangeTime_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_LastCredentialChangeTime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_LastCredentialChangeTime_Request::CopyFrom(const CCredentials_LastCredentialChangeTime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_LastCredentialChangeTime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_LastCredentialChangeTime_Request::IsInitialized() const {
  return true;
}

void CCredentials_LastCredentialChangeTime_Request::InternalSwap(CCredentials_LastCredentialChangeTime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_changes_only_, other->user_changes_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_LastCredentialChangeTime_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_LastCredentialChangeTime_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_LastCredentialChangeTime_Response>()._has_bits_);
  static void set_has_timestamp_last_password_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_last_email_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_last_password_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCredentials_LastCredentialChangeTime_Response::CCredentials_LastCredentialChangeTime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_LastCredentialChangeTime_Response)
}
CCredentials_LastCredentialChangeTime_Response::CCredentials_LastCredentialChangeTime_Response(const CCredentials_LastCredentialChangeTime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_last_password_change_, &from.timestamp_last_password_change_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_last_password_reset_) -
    reinterpret_cast<char*>(&timestamp_last_password_change_)) + sizeof(timestamp_last_password_reset_));
  // @@protoc_insertion_point(copy_constructor:CCredentials_LastCredentialChangeTime_Response)
}

void CCredentials_LastCredentialChangeTime_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_last_password_change_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_last_password_reset_) -
    reinterpret_cast<char*>(&timestamp_last_password_change_)) + sizeof(timestamp_last_password_reset_));
}

CCredentials_LastCredentialChangeTime_Response::~CCredentials_LastCredentialChangeTime_Response() {
  // @@protoc_insertion_point(destructor:CCredentials_LastCredentialChangeTime_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_LastCredentialChangeTime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCredentials_LastCredentialChangeTime_Response::ArenaDtor(void* object) {
  CCredentials_LastCredentialChangeTime_Response* _this = reinterpret_cast< CCredentials_LastCredentialChangeTime_Response* >(object);
  (void)_this;
}
void CCredentials_LastCredentialChangeTime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_LastCredentialChangeTime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_LastCredentialChangeTime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_LastCredentialChangeTime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_last_password_change_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_last_password_reset_) -
        reinterpret_cast<char*>(&timestamp_last_password_change_)) + sizeof(timestamp_last_password_reset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_LastCredentialChangeTime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 timestamp_last_password_change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_timestamp_last_password_change(&has_bits);
          timestamp_last_password_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp_last_email_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_timestamp_last_email_change(&has_bits);
          timestamp_last_email_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp_last_password_reset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_timestamp_last_password_reset(&has_bits);
          timestamp_last_password_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_LastCredentialChangeTime_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_LastCredentialChangeTime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 timestamp_last_password_change = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_timestamp_last_password_change(), target);
  }

  // optional fixed32 timestamp_last_email_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_timestamp_last_email_change(), target);
  }

  // optional fixed32 timestamp_last_password_reset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_timestamp_last_password_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_LastCredentialChangeTime_Response)
  return target;
}

size_t CCredentials_LastCredentialChangeTime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_LastCredentialChangeTime_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 timestamp_last_password_change = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 timestamp_last_email_change = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 timestamp_last_password_reset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_LastCredentialChangeTime_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_LastCredentialChangeTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_LastCredentialChangeTime_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_LastCredentialChangeTime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_LastCredentialChangeTime_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_LastCredentialChangeTime_Response)
    MergeFrom(*source);
  }
}

void CCredentials_LastCredentialChangeTime_Response::MergeFrom(const CCredentials_LastCredentialChangeTime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_LastCredentialChangeTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_last_password_change_ = from.timestamp_last_password_change_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_last_email_change_ = from.timestamp_last_email_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_last_password_reset_ = from.timestamp_last_password_reset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_LastCredentialChangeTime_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_LastCredentialChangeTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_LastCredentialChangeTime_Response::CopyFrom(const CCredentials_LastCredentialChangeTime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_LastCredentialChangeTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_LastCredentialChangeTime_Response::IsInitialized() const {
  return true;
}

void CCredentials_LastCredentialChangeTime_Response::InternalSwap(CCredentials_LastCredentialChangeTime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCredentials_LastCredentialChangeTime_Response, timestamp_last_password_reset_)
      + sizeof(CCredentials_LastCredentialChangeTime_Response::timestamp_last_password_reset_)
      - PROTOBUF_FIELD_OFFSET(CCredentials_LastCredentialChangeTime_Response, timestamp_last_password_change_)>(
          reinterpret_cast<char*>(&timestamp_last_password_change_),
          reinterpret_cast<char*>(&other->timestamp_last_password_change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_LastCredentialChangeTime_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_GetAccountAuthSecret_Request::_Internal {
 public:
};

CCredentials_GetAccountAuthSecret_Request::CCredentials_GetAccountAuthSecret_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_GetAccountAuthSecret_Request)
}
CCredentials_GetAccountAuthSecret_Request::CCredentials_GetAccountAuthSecret_Request(const CCredentials_GetAccountAuthSecret_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCredentials_GetAccountAuthSecret_Request)
}

void CCredentials_GetAccountAuthSecret_Request::SharedCtor() {
}

CCredentials_GetAccountAuthSecret_Request::~CCredentials_GetAccountAuthSecret_Request() {
  // @@protoc_insertion_point(destructor:CCredentials_GetAccountAuthSecret_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_GetAccountAuthSecret_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCredentials_GetAccountAuthSecret_Request::ArenaDtor(void* object) {
  CCredentials_GetAccountAuthSecret_Request* _this = reinterpret_cast< CCredentials_GetAccountAuthSecret_Request* >(object);
  (void)_this;
}
void CCredentials_GetAccountAuthSecret_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_GetAccountAuthSecret_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_GetAccountAuthSecret_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_GetAccountAuthSecret_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_GetAccountAuthSecret_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_GetAccountAuthSecret_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_GetAccountAuthSecret_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_GetAccountAuthSecret_Request)
  return target;
}

size_t CCredentials_GetAccountAuthSecret_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_GetAccountAuthSecret_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetAccountAuthSecret_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_GetAccountAuthSecret_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetAccountAuthSecret_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_GetAccountAuthSecret_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_GetAccountAuthSecret_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_GetAccountAuthSecret_Request)
    MergeFrom(*source);
  }
}

void CCredentials_GetAccountAuthSecret_Request::MergeFrom(const CCredentials_GetAccountAuthSecret_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_GetAccountAuthSecret_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCredentials_GetAccountAuthSecret_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_GetAccountAuthSecret_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetAccountAuthSecret_Request::CopyFrom(const CCredentials_GetAccountAuthSecret_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_GetAccountAuthSecret_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetAccountAuthSecret_Request::IsInitialized() const {
  return true;
}

void CCredentials_GetAccountAuthSecret_Request::InternalSwap(CCredentials_GetAccountAuthSecret_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_GetAccountAuthSecret_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCredentials_GetAccountAuthSecret_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCredentials_GetAccountAuthSecret_Response>()._has_bits_);
  static void set_has_secret_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCredentials_GetAccountAuthSecret_Response::CCredentials_GetAccountAuthSecret_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCredentials_GetAccountAuthSecret_Response)
}
CCredentials_GetAccountAuthSecret_Response::CCredentials_GetAccountAuthSecret_Response(const CCredentials_GetAccountAuthSecret_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secret()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArena());
  }
  secret_id_ = from.secret_id_;
  // @@protoc_insertion_point(copy_constructor:CCredentials_GetAccountAuthSecret_Response)
}

void CCredentials_GetAccountAuthSecret_Response::SharedCtor() {
secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secret_id_ = 0;
}

CCredentials_GetAccountAuthSecret_Response::~CCredentials_GetAccountAuthSecret_Response() {
  // @@protoc_insertion_point(destructor:CCredentials_GetAccountAuthSecret_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCredentials_GetAccountAuthSecret_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCredentials_GetAccountAuthSecret_Response::ArenaDtor(void* object) {
  CCredentials_GetAccountAuthSecret_Response* _this = reinterpret_cast< CCredentials_GetAccountAuthSecret_Response* >(object);
  (void)_this;
}
void CCredentials_GetAccountAuthSecret_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCredentials_GetAccountAuthSecret_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCredentials_GetAccountAuthSecret_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCredentials_GetAccountAuthSecret_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secret_.ClearNonDefaultToEmpty();
  }
  secret_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCredentials_GetAccountAuthSecret_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 secret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secret_id(&has_bits);
          secret_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCredentials_GetAccountAuthSecret_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCredentials_GetAccountAuthSecret_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 secret_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_secret_id(), target);
  }

  // optional bytes secret = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCredentials_GetAccountAuthSecret_Response)
  return target;
}

size_t CCredentials_GetAccountAuthSecret_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCredentials_GetAccountAuthSecret_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes secret = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret());
    }

    // optional int32 secret_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_secret_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCredentials_GetAccountAuthSecret_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCredentials_GetAccountAuthSecret_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCredentials_GetAccountAuthSecret_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCredentials_GetAccountAuthSecret_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCredentials_GetAccountAuthSecret_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCredentials_GetAccountAuthSecret_Response)
    MergeFrom(*source);
  }
}

void CCredentials_GetAccountAuthSecret_Response::MergeFrom(const CCredentials_GetAccountAuthSecret_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCredentials_GetAccountAuthSecret_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_secret(from._internal_secret());
    }
    if (cached_has_bits & 0x00000002u) {
      secret_id_ = from.secret_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCredentials_GetAccountAuthSecret_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCredentials_GetAccountAuthSecret_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCredentials_GetAccountAuthSecret_Response::CopyFrom(const CCredentials_GetAccountAuthSecret_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCredentials_GetAccountAuthSecret_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCredentials_GetAccountAuthSecret_Response::IsInitialized() const {
  return true;
}

void CCredentials_GetAccountAuthSecret_Response::InternalSwap(CCredentials_GetAccountAuthSecret_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(secret_id_, other->secret_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCredentials_GetAccountAuthSecret_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Credentials::~Credentials() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Credentials::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcredentials_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Credentials::GetDescriptor() {
  return descriptor();
}

void Credentials::TestAvailablePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCredentials_TestAvailablePassword_Request*,
                         ::CCredentials_TestAvailablePassword_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TestAvailablePassword() not implemented.");
  done->Run();
}

void Credentials::GetSteamGuardDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCredentials_GetSteamGuardDetails_Request*,
                         ::CCredentials_GetSteamGuardDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSteamGuardDetails() not implemented.");
  done->Run();
}

void Credentials::ValidateEmailAddress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCredentials_ValidateEmailAddress_Request*,
                         ::CCredentials_ValidateEmailAddress_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidateEmailAddress() not implemented.");
  done->Run();
}

void Credentials::SteamGuardPhishingReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCredentials_SteamGuardPhishingReport_Request*,
                         ::CCredentials_SteamGuardPhishingReport_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SteamGuardPhishingReport() not implemented.");
  done->Run();
}

void Credentials::GetCredentialChangeTimeDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCredentials_LastCredentialChangeTime_Request*,
                         ::CCredentials_LastCredentialChangeTime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCredentialChangeTimeDetails() not implemented.");
  done->Run();
}

void Credentials::GetAccountAuthSecret(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCredentials_GetAccountAuthSecret_Request*,
                         ::CCredentials_GetAccountAuthSecret_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccountAuthSecret() not implemented.");
  done->Run();
}

void Credentials::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcredentials_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      TestAvailablePassword(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCredentials_TestAvailablePassword_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCredentials_TestAvailablePassword_Response*>(
                 response),
             done);
      break;
    case 1:
      GetSteamGuardDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCredentials_GetSteamGuardDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCredentials_GetSteamGuardDetails_Response*>(
                 response),
             done);
      break;
    case 2:
      ValidateEmailAddress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCredentials_ValidateEmailAddress_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCredentials_ValidateEmailAddress_Response*>(
                 response),
             done);
      break;
    case 3:
      SteamGuardPhishingReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCredentials_SteamGuardPhishingReport_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCredentials_SteamGuardPhishingReport_Response*>(
                 response),
             done);
      break;
    case 4:
      GetCredentialChangeTimeDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCredentials_LastCredentialChangeTime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCredentials_LastCredentialChangeTime_Response*>(
                 response),
             done);
      break;
    case 5:
      GetAccountAuthSecret(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCredentials_GetAccountAuthSecret_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCredentials_GetAccountAuthSecret_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Credentials::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCredentials_TestAvailablePassword_Request::default_instance();
    case 1:
      return ::CCredentials_GetSteamGuardDetails_Request::default_instance();
    case 2:
      return ::CCredentials_ValidateEmailAddress_Request::default_instance();
    case 3:
      return ::CCredentials_SteamGuardPhishingReport_Request::default_instance();
    case 4:
      return ::CCredentials_LastCredentialChangeTime_Request::default_instance();
    case 5:
      return ::CCredentials_GetAccountAuthSecret_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Credentials::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCredentials_TestAvailablePassword_Response::default_instance();
    case 1:
      return ::CCredentials_GetSteamGuardDetails_Response::default_instance();
    case 2:
      return ::CCredentials_ValidateEmailAddress_Response::default_instance();
    case 3:
      return ::CCredentials_SteamGuardPhishingReport_Response::default_instance();
    case 4:
      return ::CCredentials_LastCredentialChangeTime_Response::default_instance();
    case 5:
      return ::CCredentials_GetAccountAuthSecret_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Credentials_Stub::Credentials_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Credentials_Stub::Credentials_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Credentials_Stub::~Credentials_Stub() {
  if (owns_channel_) delete channel_;
}

void Credentials_Stub::TestAvailablePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCredentials_TestAvailablePassword_Request* request,
                              ::CCredentials_TestAvailablePassword_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Credentials_Stub::GetSteamGuardDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCredentials_GetSteamGuardDetails_Request* request,
                              ::CCredentials_GetSteamGuardDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Credentials_Stub::ValidateEmailAddress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCredentials_ValidateEmailAddress_Request* request,
                              ::CCredentials_ValidateEmailAddress_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Credentials_Stub::SteamGuardPhishingReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCredentials_SteamGuardPhishingReport_Request* request,
                              ::CCredentials_SteamGuardPhishingReport_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Credentials_Stub::GetCredentialChangeTimeDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCredentials_LastCredentialChangeTime_Request* request,
                              ::CCredentials_LastCredentialChangeTime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Credentials_Stub::GetAccountAuthSecret(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCredentials_GetAccountAuthSecret_Request* request,
                              ::CCredentials_GetAccountAuthSecret_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCredentials_TestAvailablePassword_Request* Arena::CreateMaybeMessage< ::CCredentials_TestAvailablePassword_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_TestAvailablePassword_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_TestAvailablePassword_Response* Arena::CreateMaybeMessage< ::CCredentials_TestAvailablePassword_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_TestAvailablePassword_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_GetSteamGuardDetails_Request* Arena::CreateMaybeMessage< ::CCredentials_GetSteamGuardDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_GetSteamGuardDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_GetSteamGuardDetails_Response_SessionData* Arena::CreateMaybeMessage< ::CCredentials_GetSteamGuardDetails_Response_SessionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_GetSteamGuardDetails_Response_SessionData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_GetSteamGuardDetails_Response* Arena::CreateMaybeMessage< ::CCredentials_GetSteamGuardDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_GetSteamGuardDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_ValidateEmailAddress_Request* Arena::CreateMaybeMessage< ::CCredentials_ValidateEmailAddress_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_ValidateEmailAddress_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_ValidateEmailAddress_Response* Arena::CreateMaybeMessage< ::CCredentials_ValidateEmailAddress_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_ValidateEmailAddress_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_SteamGuardPhishingReport_Request* Arena::CreateMaybeMessage< ::CCredentials_SteamGuardPhishingReport_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_SteamGuardPhishingReport_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_SteamGuardPhishingReport_Response* Arena::CreateMaybeMessage< ::CCredentials_SteamGuardPhishingReport_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_SteamGuardPhishingReport_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_LastCredentialChangeTime_Request* Arena::CreateMaybeMessage< ::CCredentials_LastCredentialChangeTime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_LastCredentialChangeTime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_LastCredentialChangeTime_Response* Arena::CreateMaybeMessage< ::CCredentials_LastCredentialChangeTime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_LastCredentialChangeTime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_GetAccountAuthSecret_Request* Arena::CreateMaybeMessage< ::CCredentials_GetAccountAuthSecret_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_GetAccountAuthSecret_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCredentials_GetAccountAuthSecret_Response* Arena::CreateMaybeMessage< ::CCredentials_GetAccountAuthSecret_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCredentials_GetAccountAuthSecret_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
