// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_deviceauth.steamclient.proto

#include "steammessages_deviceauth.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , include_canceled_(false){}
struct CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetOwnAuthorizedDevices_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal _CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_;
constexpr CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_device_token_(PROTOBUF_ULONGLONG(0))
  , last_time_used_(0u)
  , is_pending_(false)
  , is_canceled_(false)
  , is_limited_(false)
  , last_borrower_id_(PROTOBUF_ULONGLONG(0))
  , last_app_played_(0u){}
struct CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal {
  constexpr CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetOwnAuthorizedDevices_Response_Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal _CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_;
constexpr CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devices_(){}
struct CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetOwnAuthorizedDevices_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal _CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_;
constexpr CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , auth_device_token_(PROTOBUF_ULONGLONG(0))
  , auth_code_(PROTOBUF_ULONGLONG(0))
  , from_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_AcceptAuthorizationRequest_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal _CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_;
constexpr CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_AcceptAuthorizationRequest_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal _CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_;
constexpr CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , auth_device_token_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_AuthorizeRemoteDevice_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal _CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_;
constexpr CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_AuthorizeRemoteDevice_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal _CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_;
constexpr CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , auth_device_token_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_DeauthorizeRemoteDevice_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal _CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_;
constexpr CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_DeauthorizeRemoteDevice_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal _CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_;
constexpr CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetUsedAuthorizedDevices_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal _CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_;
constexpr CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_device_token_(PROTOBUF_ULONGLONG(0))
  , owner_steamid_(PROTOBUF_ULONGLONG(0))
  , last_time_used_(0u)
  , last_app_played_(0u){}
struct CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal {
  constexpr CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetUsedAuthorizedDevices_Response_Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal _CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_;
constexpr CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devices_(){}
struct CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetUsedAuthorizedDevices_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal _CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_;
constexpr CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , include_canceled_(false)
  , include_pending_(false){}
struct CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetAuthorizedBorrowers_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal _CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_;
constexpr CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , is_pending_(false)
  , is_canceled_(false)
  , time_created_(0u){}
struct CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal {
  constexpr CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal _CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_;
constexpr CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : borrowers_(){}
struct CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetAuthorizedBorrowers_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal _CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_;
constexpr CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_borrower_()
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_AddAuthorizedBorrowers_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal _CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_;
constexpr CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_to_wait_(0){}
struct CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_AddAuthorizedBorrowers_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal _CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_;
constexpr CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_borrower_()
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_RemoveAuthorizedBorrowers_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal _CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_;
constexpr CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_RemoveAuthorizedBorrowers_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal _CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_;
constexpr CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , include_canceled_(false)
  , include_pending_(false){}
struct CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetAuthorizedAsBorrower_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal _CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_;
constexpr CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , time_created_(0u)
  , is_pending_(false)
  , is_canceled_(false)
  , is_used_(false)
  , time_removed_(0u)
  , time_first_(0u){}
struct CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal {
  constexpr CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal _CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_;
constexpr CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lenders_(){}
struct CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetAuthorizedAsBorrower_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal _CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_;
constexpr CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetExcludedGamesInLibrary_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal _CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_;
constexpr CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , vac_banned_(false)
  , package_excluded_(false){}
struct CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal {
  constexpr CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal _CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_;
constexpr CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : excluded_games_(){}
struct CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetExcludedGamesInLibrary_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal _CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_;
constexpr CDeviceAuth_GetBorrowerPlayHistory_Request::CDeviceAuth_GetBorrowerPlayHistory_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , appid_(0u){}
struct CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal {
  constexpr CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetBorrowerPlayHistory_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_;
constexpr CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , time_last_(0u)
  , time_total_(0u){}
struct CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal {
  constexpr CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_;
constexpr CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_history_()
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal {
  constexpr CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_;
constexpr CDeviceAuth_GetBorrowerPlayHistory_Response::CDeviceAuth_GetBorrowerPlayHistory_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lender_history_(){}
struct CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal {
  constexpr CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal() {}
  union {
    CDeviceAuth_GetBorrowerPlayHistory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Request, include_canceled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, device_name_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_pending_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_canceled_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_time_used_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_borrower_id_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_app_played_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_limited_),
  1,
  0,
  3,
  4,
  2,
  6,
  7,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetOwnAuthorizedDevices_Response, devices_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Request, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Request, auth_code_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Request, from_steamid_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AcceptAuthorizationRequest_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AuthorizeRemoteDevice_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AuthorizeRemoteDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AuthorizeRemoteDevice_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AuthorizeRemoteDevice_Request, auth_device_token_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AuthorizeRemoteDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_DeauthorizeRemoteDevice_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_DeauthorizeRemoteDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_DeauthorizeRemoteDevice_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_DeauthorizeRemoteDevice_Request, auth_device_token_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_DeauthorizeRemoteDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, device_name_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, owner_steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_time_used_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_app_played_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetUsedAuthorizedDevices_Response, devices_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Request, include_canceled_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Request, include_pending_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, is_pending_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, is_canceled_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, time_created_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedBorrowers_Response, borrowers_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Request, steamid_borrower_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_AddAuthorizedBorrowers_Response, seconds_to_wait_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_RemoveAuthorizedBorrowers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_RemoveAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_RemoveAuthorizedBorrowers_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_RemoveAuthorizedBorrowers_Request, steamid_borrower_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_RemoveAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Request, include_canceled_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Request, include_pending_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, time_created_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_pending_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_canceled_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_used_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, time_removed_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, time_first_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetAuthorizedAsBorrower_Response, lenders_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, appid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, game_name_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, vac_banned_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, package_excluded_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetExcludedGamesInLibrary_Response, excluded_games_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, appid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, time_last_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, time_total_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, steamid_),
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory, game_history_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDeviceAuth_GetBorrowerPlayHistory_Response, lender_history_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CDeviceAuth_GetOwnAuthorizedDevices_Request)},
  { 9, 22, sizeof(::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device)},
  { 30, -1, sizeof(::CDeviceAuth_GetOwnAuthorizedDevices_Response)},
  { 36, 45, sizeof(::CDeviceAuth_AcceptAuthorizationRequest_Request)},
  { 49, -1, sizeof(::CDeviceAuth_AcceptAuthorizationRequest_Response)},
  { 54, 61, sizeof(::CDeviceAuth_AuthorizeRemoteDevice_Request)},
  { 63, -1, sizeof(::CDeviceAuth_AuthorizeRemoteDevice_Response)},
  { 68, 75, sizeof(::CDeviceAuth_DeauthorizeRemoteDevice_Request)},
  { 77, -1, sizeof(::CDeviceAuth_DeauthorizeRemoteDevice_Response)},
  { 82, 88, sizeof(::CDeviceAuth_GetUsedAuthorizedDevices_Request)},
  { 89, 99, sizeof(::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device)},
  { 104, -1, sizeof(::CDeviceAuth_GetUsedAuthorizedDevices_Response)},
  { 110, 118, sizeof(::CDeviceAuth_GetAuthorizedBorrowers_Request)},
  { 121, 130, sizeof(::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower)},
  { 134, -1, sizeof(::CDeviceAuth_GetAuthorizedBorrowers_Response)},
  { 140, 147, sizeof(::CDeviceAuth_AddAuthorizedBorrowers_Request)},
  { 149, 155, sizeof(::CDeviceAuth_AddAuthorizedBorrowers_Response)},
  { 156, 163, sizeof(::CDeviceAuth_RemoveAuthorizedBorrowers_Request)},
  { 165, -1, sizeof(::CDeviceAuth_RemoveAuthorizedBorrowers_Response)},
  { 170, 178, sizeof(::CDeviceAuth_GetAuthorizedAsBorrower_Request)},
  { 181, 193, sizeof(::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender)},
  { 200, -1, sizeof(::CDeviceAuth_GetAuthorizedAsBorrower_Response)},
  { 206, 212, sizeof(::CDeviceAuth_GetExcludedGamesInLibrary_Request)},
  { 213, 222, sizeof(::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame)},
  { 226, -1, sizeof(::CDeviceAuth_GetExcludedGamesInLibrary_Response)},
  { 232, 239, sizeof(::CDeviceAuth_GetBorrowerPlayHistory_Request)},
  { 241, 249, sizeof(::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory)},
  { 252, 259, sizeof(::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory)},
  { 261, -1, sizeof(::CDeviceAuth_GetBorrowerPlayHistory_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fdeviceauth_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*steammessages_deviceauth.steamclient.p"
  "roto\032 google/protobuf/descriptor.proto\032\030"
  "steammessages_base.proto\032,steammessages_"
  "unified_base.steamclient.proto\"X\n+CDevic"
  "eAuth_GetOwnAuthorizedDevices_Request\022\017\n"
  "\007steamid\030\001 \001(\006\022\030\n\020include_canceled\030\002 \001(\010"
  "\"\270\002\n,CDeviceAuth_GetOwnAuthorizedDevices"
  "_Response\022E\n\007devices\030\001 \003(\01324.CDeviceAuth"
  "_GetOwnAuthorizedDevices_Response.Device"
  "\032\300\001\n\006Device\022\031\n\021auth_device_token\030\001 \001(\006\022\023"
  "\n\013device_name\030\002 \001(\t\022\022\n\nis_pending\030\003 \001(\010\022"
  "\023\n\013is_canceled\030\004 \001(\010\022\026\n\016last_time_used\030\005"
  " \001(\r\022\030\n\020last_borrower_id\030\006 \001(\006\022\027\n\017last_a"
  "pp_played\030\007 \001(\r\022\022\n\nis_limited\030\010 \001(\010\"\205\001\n."
  "CDeviceAuth_AcceptAuthorizationRequest_R"
  "equest\022\017\n\007steamid\030\001 \001(\006\022\031\n\021auth_device_t"
  "oken\030\002 \001(\006\022\021\n\tauth_code\030\003 \001(\006\022\024\n\014from_st"
  "eamid\030\004 \001(\006\"1\n/CDeviceAuth_AcceptAuthori"
  "zationRequest_Response\"W\n)CDeviceAuth_Au"
  "thorizeRemoteDevice_Request\022\017\n\007steamid\030\001"
  " \001(\006\022\031\n\021auth_device_token\030\002 \001(\006\",\n*CDevi"
  "ceAuth_AuthorizeRemoteDevice_Response\"Y\n"
  "+CDeviceAuth_DeauthorizeRemoteDevice_Req"
  "uest\022\017\n\007steamid\030\001 \001(\006\022\031\n\021auth_device_tok"
  "en\030\002 \001(\006\".\n,CDeviceAuth_DeauthorizeRemot"
  "eDevice_Response\"\?\n,CDeviceAuth_GetUsedA"
  "uthorizedDevices_Request\022\017\n\007steamid\030\001 \001("
  "\006\"\372\001\n-CDeviceAuth_GetUsedAuthorizedDevic"
  "es_Response\022F\n\007devices\030\001 \003(\01325.CDeviceAu"
  "th_GetUsedAuthorizedDevices_Response.Dev"
  "ice\032\200\001\n\006Device\022\031\n\021auth_device_token\030\001 \001("
  "\006\022\023\n\013device_name\030\002 \001(\t\022\025\n\rowner_steamid\030"
  "\003 \001(\006\022\026\n\016last_time_used\030\004 \001(\r\022\027\n\017last_ap"
  "p_played\030\005 \001(\r\"p\n*CDeviceAuth_GetAuthori"
  "zedBorrowers_Request\022\017\n\007steamid\030\001 \001(\006\022\030\n"
  "\020include_canceled\030\002 \001(\010\022\027\n\017include_pendi"
  "ng\030\003 \001(\010\"\323\001\n+CDeviceAuth_GetAuthorizedBo"
  "rrowers_Response\022H\n\tborrowers\030\001 \003(\01325.CD"
  "eviceAuth_GetAuthorizedBorrowers_Respons"
  "e.Borrower\032Z\n\010Borrower\022\017\n\007steamid\030\001 \001(\006\022"
  "\022\n\nis_pending\030\002 \001(\010\022\023\n\013is_canceled\030\003 \001(\010"
  "\022\024\n\014time_created\030\004 \001(\r\"W\n*CDeviceAuth_Ad"
  "dAuthorizedBorrowers_Request\022\017\n\007steamid\030"
  "\001 \001(\006\022\030\n\020steamid_borrower\030\002 \003(\006\"F\n+CDevi"
  "ceAuth_AddAuthorizedBorrowers_Response\022\027"
  "\n\017seconds_to_wait\030\001 \001(\005\"Z\n-CDeviceAuth_R"
  "emoveAuthorizedBorrowers_Request\022\017\n\007stea"
  "mid\030\001 \001(\006\022\030\n\020steamid_borrower\030\002 \003(\006\"0\n.C"
  "DeviceAuth_RemoveAuthorizedBorrowers_Res"
  "ponse\"q\n+CDeviceAuth_GetAuthorizedAsBorr"
  "ower_Request\022\017\n\007steamid\030\001 \001(\006\022\030\n\020include"
  "_canceled\030\002 \001(\010\022\027\n\017include_pending\030\003 \001(\010"
  "\"\213\002\n,CDeviceAuth_GetAuthorizedAsBorrower"
  "_Response\022E\n\007lenders\030\001 \003(\01324.CDeviceAuth"
  "_GetAuthorizedAsBorrower_Response.Lender"
  "\032\223\001\n\006Lender\022\017\n\007steamid\030\001 \001(\006\022\024\n\014time_cre"
  "ated\030\002 \001(\r\022\022\n\nis_pending\030\003 \001(\010\022\023\n\013is_can"
  "celed\030\004 \001(\010\022\017\n\007is_used\030\005 \001(\010\022\024\n\014time_rem"
  "oved\030\006 \001(\r\022\022\n\ntime_first\030\007 \001(\r\"@\n-CDevic"
  "eAuth_GetExcludedGamesInLibrary_Request\022"
  "\017\n\007steamid\030\001 \001(\006\"\346\001\n.CDeviceAuth_GetExcl"
  "udedGamesInLibrary_Response\022T\n\016excluded_"
  "games\030\001 \003(\0132<.CDeviceAuth_GetExcludedGam"
  "esInLibrary_Response.ExcludedGame\032^\n\014Exc"
  "ludedGame\022\r\n\005appid\030\001 \001(\r\022\021\n\tgame_name\030\002 "
  "\001(\t\022\022\n\nvac_banned\030\003 \001(\010\022\030\n\020package_exclu"
  "ded\030\004 \001(\010\"L\n*CDeviceAuth_GetBorrowerPlay"
  "History_Request\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appi"
  "d\030\002 \001(\r\"\270\002\n+CDeviceAuth_GetBorrowerPlayH"
  "istory_Response\022R\n\016lender_history\030\001 \003(\0132"
  ":.CDeviceAuth_GetBorrowerPlayHistory_Res"
  "ponse.LenderHistory\032C\n\013GameHistory\022\r\n\005ap"
  "pid\030\001 \001(\r\022\021\n\ttime_last\030\002 \001(\r\022\022\n\ntime_tot"
  "al\030\003 \001(\r\032p\n\rLenderHistory\022\017\n\007steamid\030\001 \001"
  "(\006\022N\n\014game_history\030\002 \003(\01328.CDeviceAuth_G"
  "etBorrowerPlayHistory_Response.GameHisto"
  "ry2\275\n\n\nDeviceAuth\022v\n\027GetOwnAuthorizedDev"
  "ices\022,.CDeviceAuth_GetOwnAuthorizedDevic"
  "es_Request\032-.CDeviceAuth_GetOwnAuthorize"
  "dDevices_Response\022\177\n\032AcceptAuthorization"
  "Request\022/.CDeviceAuth_AcceptAuthorizatio"
  "nRequest_Request\0320.CDeviceAuth_AcceptAut"
  "horizationRequest_Response\022p\n\025AuthorizeR"
  "emoteDevice\022*.CDeviceAuth_AuthorizeRemot"
  "eDevice_Request\032+.CDeviceAuth_AuthorizeR"
  "emoteDevice_Response\022v\n\027DeauthorizeRemot"
  "eDevice\022,.CDeviceAuth_DeauthorizeRemoteD"
  "evice_Request\032-.CDeviceAuth_DeauthorizeR"
  "emoteDevice_Response\022y\n\030GetUsedAuthorize"
  "dDevices\022-.CDeviceAuth_GetUsedAuthorized"
  "Devices_Request\032..CDeviceAuth_GetUsedAut"
  "horizedDevices_Response\022s\n\026GetAuthorized"
  "Borrowers\022+.CDeviceAuth_GetAuthorizedBor"
  "rowers_Request\032,.CDeviceAuth_GetAuthoriz"
  "edBorrowers_Response\022s\n\026AddAuthorizedBor"
  "rowers\022+.CDeviceAuth_AddAuthorizedBorrow"
  "ers_Request\032,.CDeviceAuth_AddAuthorizedB"
  "orrowers_Response\022|\n\031RemoveAuthorizedBor"
  "rowers\022..CDeviceAuth_RemoveAuthorizedBor"
  "rowers_Request\032/.CDeviceAuth_RemoveAutho"
  "rizedBorrowers_Response\022v\n\027GetAuthorized"
  "AsBorrower\022,.CDeviceAuth_GetAuthorizedAs"
  "Borrower_Request\032-.CDeviceAuth_GetAuthor"
  "izedAsBorrower_Response\022|\n\031GetExcludedGa"
  "mesInLibrary\022..CDeviceAuth_GetExcludedGa"
  "mesInLibrary_Request\032/.CDeviceAuth_GetEx"
  "cludedGamesInLibrary_Response\022s\n\026GetBorr"
  "owerPlayHistory\022+.CDeviceAuth_GetBorrowe"
  "rPlayHistory_Request\032,.CDeviceAuth_GetBo"
  "rrowerPlayHistory_ResponseB\035\200\001\001\252\002\027OpenSt"
  "eamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto = {
  false, false, 4417, descriptor_table_protodef_steammessages_5fdeviceauth_2esteamclient_2eproto, "steammessages_deviceauth.steamclient.proto", 
  &descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto_once, descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto_deps, 3, 29,
  schemas, file_default_instances, TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fdeviceauth_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fdeviceauth_2esteamclient_2eproto(&descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto);

// ===================================================================

class CDeviceAuth_GetOwnAuthorizedDevices_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetOwnAuthorizedDevices_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_canceled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetOwnAuthorizedDevices_Request)
}
CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_canceled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_canceled_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetOwnAuthorizedDevices_Request)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_canceled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_canceled_));
}

CDeviceAuth_GetOwnAuthorizedDevices_Request::~CDeviceAuth_GetOwnAuthorizedDevices_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::ArenaDtor(void* object) {
  CDeviceAuth_GetOwnAuthorizedDevices_Request* _this = reinterpret_cast< CDeviceAuth_GetOwnAuthorizedDevices_Request* >(object);
  (void)_this;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_canceled_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_canceled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetOwnAuthorizedDevices_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool include_canceled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_include_canceled(&has_bits);
          include_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_canceled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetOwnAuthorizedDevices_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetOwnAuthorizedDevices_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetOwnAuthorizedDevices_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Request, include_canceled_)
      + sizeof(CDeviceAuth_GetOwnAuthorizedDevices_Request::include_canceled_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device>()._has_bits_);
  static void set_has_auth_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_canceled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_time_used(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_borrower_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_app_played(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}
CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArena());
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SharedCtor() {
device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auth_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
}

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::~CDeviceAuth_GetOwnAuthorizedDevices_Response_Device() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::ArenaDtor(void* object) {
  CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* _this = reinterpret_cast< CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* >(object);
  (void)_this;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&auth_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_app_played_) -
        reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 auth_device_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_auth_device_token(&has_bits);
          auth_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_pending(&has_bits);
          is_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_canceled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_canceled(&has_bits);
          is_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_time_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_time_used(&has_bits);
          last_time_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 last_borrower_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_last_borrower_id(&has_bits);
          last_borrower_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_app_played = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_app_played(&has_bits);
          last_app_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_limited = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_limited(&has_bits);
          is_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_pending(), target);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_canceled(), target);
  }

  // optional uint32 last_time_used = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_time_used(), target);
  }

  // optional fixed64 last_borrower_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_last_borrower_id(), target);
  }

  // optional uint32 last_app_played = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_last_app_played(), target);
  }

  // optional bool is_limited = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_limited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional fixed64 auth_device_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_time_used = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_time_used());
    }

    // optional bool is_pending = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional fixed64 last_borrower_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_app_played = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_app_played());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_time_used_ = from.last_time_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_limited_ = from.is_limited_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_borrower_id_ = from.last_borrower_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_app_played_ = from.last_app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_app_played_)
      + sizeof(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_app_played_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, auth_device_token_)>(
          reinterpret_cast<char*>(&auth_device_token_),
          reinterpret_cast<char*>(&other->auth_device_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetOwnAuthorizedDevices_Response::_Internal {
 public:
};

CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetOwnAuthorizedDevices_Response)
}
CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetOwnAuthorizedDevices_Response)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SharedCtor() {
}

CDeviceAuth_GetOwnAuthorizedDevices_Response::~CDeviceAuth_GetOwnAuthorizedDevices_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::ArenaDtor(void* object) {
  CDeviceAuth_GetOwnAuthorizedDevices_Response* _this = reinterpret_cast< CDeviceAuth_GetOwnAuthorizedDevices_Response* >(object);
  (void)_this;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetOwnAuthorizedDevices_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetOwnAuthorizedDevices_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetOwnAuthorizedDevices_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetOwnAuthorizedDevices_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetOwnAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_AcceptAuthorizationRequest_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_AcceptAuthorizationRequest_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auth_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_AcceptAuthorizationRequest_Request)
}
CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request(const CDeviceAuth_AcceptAuthorizationRequest_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_steamid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(from_steamid_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_AcceptAuthorizationRequest_Request)
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_steamid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(from_steamid_));
}

CDeviceAuth_AcceptAuthorizationRequest_Request::~CDeviceAuth_AcceptAuthorizationRequest_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_AcceptAuthorizationRequest_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::ArenaDtor(void* object) {
  CDeviceAuth_AcceptAuthorizationRequest_Request* _this = reinterpret_cast< CDeviceAuth_AcceptAuthorizationRequest_Request* >(object);
  (void)_this;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_steamid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(from_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_AcceptAuthorizationRequest_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 auth_device_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_auth_device_token(&has_bits);
          auth_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 auth_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_auth_code(&has_bits);
          auth_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 from_steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_from_steamid(&has_bits);
          from_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_AcceptAuthorizationRequest_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_auth_device_token(), target);
  }

  // optional fixed64 auth_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_auth_code(), target);
  }

  // optional fixed64 from_steamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_from_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_AcceptAuthorizationRequest_Request)
  return target;
}

size_t CDeviceAuth_AcceptAuthorizationRequest_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 from_steamid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AcceptAuthorizationRequest_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_AcceptAuthorizationRequest_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_AcceptAuthorizationRequest_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_AcceptAuthorizationRequest_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      auth_code_ = from.auth_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_steamid_ = from.from_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AcceptAuthorizationRequest_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, from_steamid_)
      + sizeof(CDeviceAuth_AcceptAuthorizationRequest_Request::from_steamid_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_AcceptAuthorizationRequest_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_AcceptAuthorizationRequest_Response::_Internal {
 public:
};

CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_AcceptAuthorizationRequest_Response)
}
CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response(const CDeviceAuth_AcceptAuthorizationRequest_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_AcceptAuthorizationRequest_Response)
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SharedCtor() {
}

CDeviceAuth_AcceptAuthorizationRequest_Response::~CDeviceAuth_AcceptAuthorizationRequest_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_AcceptAuthorizationRequest_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::ArenaDtor(void* object) {
  CDeviceAuth_AcceptAuthorizationRequest_Response* _this = reinterpret_cast< CDeviceAuth_AcceptAuthorizationRequest_Response* >(object);
  (void)_this;
}
void CDeviceAuth_AcceptAuthorizationRequest_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_AcceptAuthorizationRequest_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_AcceptAuthorizationRequest_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_AcceptAuthorizationRequest_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_AcceptAuthorizationRequest_Response)
  return target;
}

size_t CDeviceAuth_AcceptAuthorizationRequest_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AcceptAuthorizationRequest_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_AcceptAuthorizationRequest_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_AcceptAuthorizationRequest_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_AcceptAuthorizationRequest_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_AcceptAuthorizationRequest_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_AcceptAuthorizationRequest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AcceptAuthorizationRequest_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_AcceptAuthorizationRequest_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_AuthorizeRemoteDevice_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_AuthorizeRemoteDevice_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_AuthorizeRemoteDevice_Request)
}
CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request(const CDeviceAuth_AuthorizeRemoteDevice_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_AuthorizeRemoteDevice_Request)
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
}

CDeviceAuth_AuthorizeRemoteDevice_Request::~CDeviceAuth_AuthorizeRemoteDevice_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_AuthorizeRemoteDevice_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::ArenaDtor(void* object) {
  CDeviceAuth_AuthorizeRemoteDevice_Request* _this = reinterpret_cast< CDeviceAuth_AuthorizeRemoteDevice_Request* >(object);
  (void)_this;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_device_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_AuthorizeRemoteDevice_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 auth_device_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_auth_device_token(&has_bits);
          auth_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_AuthorizeRemoteDevice_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_auth_device_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_AuthorizeRemoteDevice_Request)
  return target;
}

size_t CDeviceAuth_AuthorizeRemoteDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AuthorizeRemoteDevice_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_AuthorizeRemoteDevice_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_AuthorizeRemoteDevice_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_AuthorizeRemoteDevice_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AuthorizeRemoteDevice_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Request, auth_device_token_)
      + sizeof(CDeviceAuth_AuthorizeRemoteDevice_Request::auth_device_token_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_AuthorizeRemoteDevice_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_AuthorizeRemoteDevice_Response::_Internal {
 public:
};

CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_AuthorizeRemoteDevice_Response)
}
CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response(const CDeviceAuth_AuthorizeRemoteDevice_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_AuthorizeRemoteDevice_Response)
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SharedCtor() {
}

CDeviceAuth_AuthorizeRemoteDevice_Response::~CDeviceAuth_AuthorizeRemoteDevice_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_AuthorizeRemoteDevice_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::ArenaDtor(void* object) {
  CDeviceAuth_AuthorizeRemoteDevice_Response* _this = reinterpret_cast< CDeviceAuth_AuthorizeRemoteDevice_Response* >(object);
  (void)_this;
}
void CDeviceAuth_AuthorizeRemoteDevice_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_AuthorizeRemoteDevice_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_AuthorizeRemoteDevice_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_AuthorizeRemoteDevice_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_AuthorizeRemoteDevice_Response)
  return target;
}

size_t CDeviceAuth_AuthorizeRemoteDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AuthorizeRemoteDevice_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_AuthorizeRemoteDevice_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_AuthorizeRemoteDevice_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_AuthorizeRemoteDevice_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_AuthorizeRemoteDevice_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_AuthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AuthorizeRemoteDevice_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_AuthorizeRemoteDevice_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_DeauthorizeRemoteDevice_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_DeauthorizeRemoteDevice_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_DeauthorizeRemoteDevice_Request)
}
CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_DeauthorizeRemoteDevice_Request)
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
}

CDeviceAuth_DeauthorizeRemoteDevice_Request::~CDeviceAuth_DeauthorizeRemoteDevice_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::ArenaDtor(void* object) {
  CDeviceAuth_DeauthorizeRemoteDevice_Request* _this = reinterpret_cast< CDeviceAuth_DeauthorizeRemoteDevice_Request* >(object);
  (void)_this;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_device_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(auth_device_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_DeauthorizeRemoteDevice_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 auth_device_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_auth_device_token(&has_bits);
          auth_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_DeauthorizeRemoteDevice_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_auth_device_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return target;
}

size_t CDeviceAuth_DeauthorizeRemoteDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_DeauthorizeRemoteDevice_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_DeauthorizeRemoteDevice_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_DeauthorizeRemoteDevice_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_DeauthorizeRemoteDevice_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Request, auth_device_token_)
      + sizeof(CDeviceAuth_DeauthorizeRemoteDevice_Request::auth_device_token_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_DeauthorizeRemoteDevice_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_DeauthorizeRemoteDevice_Response::_Internal {
 public:
};

CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_DeauthorizeRemoteDevice_Response)
}
CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_DeauthorizeRemoteDevice_Response)
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SharedCtor() {
}

CDeviceAuth_DeauthorizeRemoteDevice_Response::~CDeviceAuth_DeauthorizeRemoteDevice_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::ArenaDtor(void* object) {
  CDeviceAuth_DeauthorizeRemoteDevice_Response* _this = reinterpret_cast< CDeviceAuth_DeauthorizeRemoteDevice_Response* >(object);
  (void)_this;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_DeauthorizeRemoteDevice_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_DeauthorizeRemoteDevice_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_DeauthorizeRemoteDevice_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return target;
}

size_t CDeviceAuth_DeauthorizeRemoteDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_DeauthorizeRemoteDevice_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_DeauthorizeRemoteDevice_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_DeauthorizeRemoteDevice_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_DeauthorizeRemoteDevice_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_DeauthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_DeauthorizeRemoteDevice_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetUsedAuthorizedDevices_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetUsedAuthorizedDevices_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetUsedAuthorizedDevices_Request)
}
CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetUsedAuthorizedDevices_Request)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetUsedAuthorizedDevices_Request::~CDeviceAuth_GetUsedAuthorizedDevices_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::ArenaDtor(void* object) {
  CDeviceAuth_GetUsedAuthorizedDevices_Request* _this = reinterpret_cast< CDeviceAuth_GetUsedAuthorizedDevices_Request* >(object);
  (void)_this;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetUsedAuthorizedDevices_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetUsedAuthorizedDevices_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetUsedAuthorizedDevices_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetUsedAuthorizedDevices_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device>()._has_bits_);
  static void set_has_auth_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_time_used(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_app_played(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}
CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArena());
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SharedCtor() {
device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auth_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
}

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::~CDeviceAuth_GetUsedAuthorizedDevices_Response_Device() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::ArenaDtor(void* object) {
  CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* _this = reinterpret_cast< CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* >(object);
  (void)_this;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&auth_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_app_played_) -
        reinterpret_cast<char*>(&auth_device_token_)) + sizeof(last_app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 auth_device_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_auth_device_token(&has_bits);
          auth_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 owner_steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_owner_steamid(&has_bits);
          owner_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_time_used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_time_used(&has_bits);
          last_time_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_app_played = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_app_played(&has_bits);
          last_app_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  // optional fixed64 owner_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_owner_steamid(), target);
  }

  // optional uint32 last_time_used = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_time_used(), target);
  }

  // optional uint32 last_app_played = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_app_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string device_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional fixed64 auth_device_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 last_time_used = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_time_used());
    }

    // optional uint32 last_app_played = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_app_played());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_steamid_ = from.owner_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_time_used_ = from.last_time_used_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_app_played_ = from.last_app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_app_played_)
      + sizeof(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::last_app_played_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, auth_device_token_)>(
          reinterpret_cast<char*>(&auth_device_token_),
          reinterpret_cast<char*>(&other->auth_device_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetUsedAuthorizedDevices_Response::_Internal {
 public:
};

CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetUsedAuthorizedDevices_Response)
}
CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetUsedAuthorizedDevices_Response)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SharedCtor() {
}

CDeviceAuth_GetUsedAuthorizedDevices_Response::~CDeviceAuth_GetUsedAuthorizedDevices_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::ArenaDtor(void* object) {
  CDeviceAuth_GetUsedAuthorizedDevices_Response* _this = reinterpret_cast< CDeviceAuth_GetUsedAuthorizedDevices_Response* >(object);
  (void)_this;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetUsedAuthorizedDevices_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetUsedAuthorizedDevices_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetUsedAuthorizedDevices_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetUsedAuthorizedDevices_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetUsedAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetAuthorizedBorrowers_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetAuthorizedBorrowers_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_canceled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetAuthorizedBorrowers_Request)
}
CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request(const CDeviceAuth_GetAuthorizedBorrowers_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetAuthorizedBorrowers_Request)
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
}

CDeviceAuth_GetAuthorizedBorrowers_Request::~CDeviceAuth_GetAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetAuthorizedBorrowers_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::ArenaDtor(void* object) {
  CDeviceAuth_GetAuthorizedBorrowers_Request* _this = reinterpret_cast< CDeviceAuth_GetAuthorizedBorrowers_Request* >(object);
  (void)_this;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_pending_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetAuthorizedBorrowers_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool include_canceled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_include_canceled(&has_bits);
          include_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_pending(&has_bits);
          include_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetAuthorizedBorrowers_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_canceled(), target);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_pending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool include_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedBorrowers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetAuthorizedBorrowers_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_pending_ = from.include_pending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, include_pending_)
      + sizeof(CDeviceAuth_GetAuthorizedBorrowers_Request::include_pending_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetAuthorizedBorrowers_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_canceled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}
CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_created_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_created_));
}

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::~CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::ArenaDtor(void* object) {
  CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* _this = reinterpret_cast< CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* >(object);
  (void)_this;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(time_created_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool is_pending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_pending(&has_bits);
          is_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_canceled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_canceled(&has_bits);
          is_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_created = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool is_pending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_pending(), target);
  }

  // optional bool is_canceled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_canceled(), target);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_pending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_created = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, time_created_)
      + sizeof(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::time_created_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetAuthorizedBorrowers_Response::_Internal {
 public:
};

CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  borrowers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetAuthorizedBorrowers_Response)
}
CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response(const CDeviceAuth_GetAuthorizedBorrowers_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      borrowers_(from.borrowers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetAuthorizedBorrowers_Response)
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SharedCtor() {
}

CDeviceAuth_GetAuthorizedBorrowers_Response::~CDeviceAuth_GetAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetAuthorizedBorrowers_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::ArenaDtor(void* object) {
  CDeviceAuth_GetAuthorizedBorrowers_Response* _this = reinterpret_cast< CDeviceAuth_GetAuthorizedBorrowers_Response* >(object);
  (void)_this;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  borrowers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetAuthorizedBorrowers_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_borrowers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetAuthorizedBorrowers_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_borrowers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_borrowers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  total_size += 1UL * this->_internal_borrowers_size();
  for (const auto& msg : this->borrowers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedBorrowers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetAuthorizedBorrowers_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  borrowers_.MergeFrom(from.borrowers_);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  borrowers_.InternalSwap(&other->borrowers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetAuthorizedBorrowers_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_AddAuthorizedBorrowers_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_AddAuthorizedBorrowers_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steamid_borrower_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_AddAuthorizedBorrowers_Request)
}
CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request(const CDeviceAuth_AddAuthorizedBorrowers_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamid_borrower_(from.steamid_borrower_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_AddAuthorizedBorrowers_Request)
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_AddAuthorizedBorrowers_Request::~CDeviceAuth_AddAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_AddAuthorizedBorrowers_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::ArenaDtor(void* object) {
  CDeviceAuth_AddAuthorizedBorrowers_Request* _this = reinterpret_cast< CDeviceAuth_AddAuthorizedBorrowers_Request* >(object);
  (void)_this;
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_borrower_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_AddAuthorizedBorrowers_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steamid_borrower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_borrower(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_borrower(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_AddAuthorizedBorrowers_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // repeated fixed64 steamid_borrower = 2;
  for (int i = 0, n = this->_internal_steamid_borrower_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_borrower(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_AddAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_AddAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_borrower = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_borrower_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_borrower_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AddAuthorizedBorrowers_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_AddAuthorizedBorrowers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_AddAuthorizedBorrowers_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_AddAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_borrower_.MergeFrom(from.steamid_borrower_);
  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_AddAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AddAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_borrower_.InternalSwap(&other->steamid_borrower_);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_AddAuthorizedBorrowers_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_AddAuthorizedBorrowers_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_AddAuthorizedBorrowers_Response>()._has_bits_);
  static void set_has_seconds_to_wait(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_AddAuthorizedBorrowers_Response)
}
CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response(const CDeviceAuth_AddAuthorizedBorrowers_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seconds_to_wait_ = from.seconds_to_wait_;
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_AddAuthorizedBorrowers_Response)
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SharedCtor() {
seconds_to_wait_ = 0;
}

CDeviceAuth_AddAuthorizedBorrowers_Response::~CDeviceAuth_AddAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_AddAuthorizedBorrowers_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::ArenaDtor(void* object) {
  CDeviceAuth_AddAuthorizedBorrowers_Response* _this = reinterpret_cast< CDeviceAuth_AddAuthorizedBorrowers_Response* >(object);
  (void)_this;
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_to_wait_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_AddAuthorizedBorrowers_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 seconds_to_wait = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds_to_wait(&has_bits);
          seconds_to_wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_AddAuthorizedBorrowers_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_to_wait = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seconds_to_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_AddAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_AddAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 seconds_to_wait = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seconds_to_wait());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AddAuthorizedBorrowers_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_AddAuthorizedBorrowers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_AddAuthorizedBorrowers_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_AddAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seconds_to_wait()) {
    _internal_set_seconds_to_wait(from._internal_seconds_to_wait());
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_AddAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AddAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seconds_to_wait_, other->seconds_to_wait_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_AddAuthorizedBorrowers_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_RemoveAuthorizedBorrowers_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_RemoveAuthorizedBorrowers_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steamid_borrower_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}
CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamid_borrower_(from.steamid_borrower_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_RemoveAuthorizedBorrowers_Request::~CDeviceAuth_RemoveAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::ArenaDtor(void* object) {
  CDeviceAuth_RemoveAuthorizedBorrowers_Request* _this = reinterpret_cast< CDeviceAuth_RemoveAuthorizedBorrowers_Request* >(object);
  (void)_this;
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_borrower_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_RemoveAuthorizedBorrowers_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steamid_borrower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_borrower(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_borrower(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_RemoveAuthorizedBorrowers_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // repeated fixed64 steamid_borrower = 2;
  for (int i = 0, n = this->_internal_steamid_borrower_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_borrower(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_borrower = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_borrower_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_borrower_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_RemoveAuthorizedBorrowers_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_RemoveAuthorizedBorrowers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_borrower_.MergeFrom(from.steamid_borrower_);
  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_borrower_.InternalSwap(&other->steamid_borrower_);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_RemoveAuthorizedBorrowers_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_RemoveAuthorizedBorrowers_Response::_Internal {
 public:
};

CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}
CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SharedCtor() {
}

CDeviceAuth_RemoveAuthorizedBorrowers_Response::~CDeviceAuth_RemoveAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::ArenaDtor(void* object) {
  CDeviceAuth_RemoveAuthorizedBorrowers_Response* _this = reinterpret_cast< CDeviceAuth_RemoveAuthorizedBorrowers_Response* >(object);
  (void)_this;
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_RemoveAuthorizedBorrowers_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_RemoveAuthorizedBorrowers_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_RemoveAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_RemoveAuthorizedBorrowers_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_RemoveAuthorizedBorrowers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_RemoveAuthorizedBorrowers_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetAuthorizedAsBorrower_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetAuthorizedAsBorrower_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_canceled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetAuthorizedAsBorrower_Request)
}
CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetAuthorizedAsBorrower_Request)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
}

CDeviceAuth_GetAuthorizedAsBorrower_Request::~CDeviceAuth_GetAuthorizedAsBorrower_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::ArenaDtor(void* object) {
  CDeviceAuth_GetAuthorizedAsBorrower_Request* _this = reinterpret_cast< CDeviceAuth_GetAuthorizedAsBorrower_Request* >(object);
  (void)_this;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_pending_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_pending_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetAuthorizedAsBorrower_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool include_canceled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_include_canceled(&has_bits);
          include_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_pending(&has_bits);
          include_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_canceled(), target);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_pending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool include_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedAsBorrower_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetAuthorizedAsBorrower_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetAuthorizedAsBorrower_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_pending_ = from.include_pending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, include_pending_)
      + sizeof(CDeviceAuth_GetAuthorizedAsBorrower_Request::include_pending_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_canceled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_used(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_first(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}
CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_first_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_first_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_first_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(time_first_));
}

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::~CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::ArenaDtor(void* object) {
  CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* _this = reinterpret_cast< CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* >(object);
  (void)_this;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_first_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(time_first_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_pending(&has_bits);
          is_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_canceled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_canceled(&has_bits);
          is_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_used(&has_bits);
          is_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_removed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_removed(&has_bits);
          time_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_first = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_time_first(&has_bits);
          time_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_created(), target);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_pending(), target);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_canceled(), target);
  }

  // optional bool is_used = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_used(), target);
  }

  // optional uint32 time_removed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_removed(), target);
  }

  // optional uint32 time_first = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_time_first(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

    // optional bool is_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_used = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_removed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_removed());
    }

    // optional uint32 time_first = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_first());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_used_ = from.is_used_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_removed_ = from.time_removed_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_first_ = from.time_first_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, time_first_)
      + sizeof(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::time_first_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetAuthorizedAsBorrower_Response::_Internal {
 public:
};

CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lenders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetAuthorizedAsBorrower_Response)
}
CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lenders_(from.lenders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetAuthorizedAsBorrower_Response)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SharedCtor() {
}

CDeviceAuth_GetAuthorizedAsBorrower_Response::~CDeviceAuth_GetAuthorizedAsBorrower_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::ArenaDtor(void* object) {
  CDeviceAuth_GetAuthorizedAsBorrower_Response* _this = reinterpret_cast< CDeviceAuth_GetAuthorizedAsBorrower_Response* >(object);
  (void)_this;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lenders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetAuthorizedAsBorrower_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lenders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lenders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lenders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  total_size += 1UL * this->_internal_lenders_size();
  for (const auto& msg : this->lenders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetAuthorizedAsBorrower_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetAuthorizedAsBorrower_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetAuthorizedAsBorrower_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lenders_.MergeFrom(from.lenders_);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetAuthorizedAsBorrower_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lenders_.InternalSwap(&other->lenders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetExcludedGamesInLibrary_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetExcludedGamesInLibrary_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetExcludedGamesInLibrary_Request)
}
CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetExcludedGamesInLibrary_Request)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetExcludedGamesInLibrary_Request::~CDeviceAuth_GetExcludedGamesInLibrary_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::ArenaDtor(void* object) {
  CDeviceAuth_GetExcludedGamesInLibrary_Request* _this = reinterpret_cast< CDeviceAuth_GetExcludedGamesInLibrary_Request* >(object);
  (void)_this;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetExcludedGamesInLibrary_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetExcludedGamesInLibrary_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetExcludedGamesInLibrary_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetExcludedGamesInLibrary_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vac_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_package_excluded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}
CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&package_excluded_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(package_excluded_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SharedCtor() {
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&package_excluded_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(package_excluded_));
}

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::~CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::ArenaDtor(void* object) {
  CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* _this = reinterpret_cast< CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* >(object);
  (void)_this;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&package_excluded_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(package_excluded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vac_banned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vac_banned(&has_bits);
          vac_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool package_excluded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_package_excluded(&has_bits);
          package_excluded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // optional bool vac_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vac_banned(), target);
  }

  // optional bool package_excluded = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_package_excluded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool vac_banned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool package_excluded = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      vac_banned_ = from.vac_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      package_excluded_ = from.package_excluded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, package_excluded_)
      + sizeof(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::package_excluded_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetExcludedGamesInLibrary_Response::_Internal {
 public:
};

CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  excluded_games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetExcludedGamesInLibrary_Response)
}
CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      excluded_games_(from.excluded_games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetExcludedGamesInLibrary_Response)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SharedCtor() {
}

CDeviceAuth_GetExcludedGamesInLibrary_Response::~CDeviceAuth_GetExcludedGamesInLibrary_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::ArenaDtor(void* object) {
  CDeviceAuth_GetExcludedGamesInLibrary_Response* _this = reinterpret_cast< CDeviceAuth_GetExcludedGamesInLibrary_Response* >(object);
  (void)_this;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excluded_games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetExcludedGamesInLibrary_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_excluded_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_excluded_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  total_size += 1UL * this->_internal_excluded_games_size();
  for (const auto& msg : this->excluded_games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetExcludedGamesInLibrary_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetExcludedGamesInLibrary_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetExcludedGamesInLibrary_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_games_.MergeFrom(from.excluded_games_);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetExcludedGamesInLibrary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  excluded_games_.InternalSwap(&other->excluded_games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetBorrowerPlayHistory_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetBorrowerPlayHistory_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDeviceAuth_GetBorrowerPlayHistory_Request::CDeviceAuth_GetBorrowerPlayHistory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetBorrowerPlayHistory_Request)
}
CDeviceAuth_GetBorrowerPlayHistory_Request::CDeviceAuth_GetBorrowerPlayHistory_Request(const CDeviceAuth_GetBorrowerPlayHistory_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetBorrowerPlayHistory_Request)
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CDeviceAuth_GetBorrowerPlayHistory_Request::~CDeviceAuth_GetBorrowerPlayHistory_Request() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetBorrowerPlayHistory_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::ArenaDtor(void* object) {
  CDeviceAuth_GetBorrowerPlayHistory_Request* _this = reinterpret_cast< CDeviceAuth_GetBorrowerPlayHistory_Request* >(object);
  (void)_this;
}
void CDeviceAuth_GetBorrowerPlayHistory_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetBorrowerPlayHistory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetBorrowerPlayHistory_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetBorrowerPlayHistory_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetBorrowerPlayHistory_Request)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetBorrowerPlayHistory_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetBorrowerPlayHistory_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Request::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetBorrowerPlayHistory_Request, appid_)
      + sizeof(CDeviceAuth_GetBorrowerPlayHistory_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetBorrowerPlayHistory_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetBorrowerPlayHistory_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_last(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
}
CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_total_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(time_total_));
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_total_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(time_total_));
}

CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::~CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::ArenaDtor(void* object) {
  CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* _this = reinterpret_cast< CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* >(object);
  (void)_this;
}
void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_total_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(time_total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_last = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_last(&has_bits);
          time_last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_total(&has_bits);
          time_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 time_last = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_last(), target);
  }

  // optional uint32 time_total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 time_last = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_last());
    }

    // optional uint32 time_total = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_total());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_last_ = from.time_last_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_total_ = from.time_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, time_total_)
      + sizeof(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::time_total_)
      - PROTOBUF_FIELD_OFFSET(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
}
CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_history_(from.game_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::~CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::ArenaDtor(void* object) {
  CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* _this = reinterpret_cast< CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* >(object);
  (void)_this;
}
void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_history_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_game_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
  total_size += 1UL * this->_internal_game_history_size();
  for (const auto& msg : this->game_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_history_.MergeFrom(from.game_history_);
  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_history_.InternalSwap(&other->game_history_);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDeviceAuth_GetBorrowerPlayHistory_Response::_Internal {
 public:
};

CDeviceAuth_GetBorrowerPlayHistory_Response::CDeviceAuth_GetBorrowerPlayHistory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lender_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDeviceAuth_GetBorrowerPlayHistory_Response)
}
CDeviceAuth_GetBorrowerPlayHistory_Response::CDeviceAuth_GetBorrowerPlayHistory_Response(const CDeviceAuth_GetBorrowerPlayHistory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lender_history_(from.lender_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDeviceAuth_GetBorrowerPlayHistory_Response)
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::SharedCtor() {
}

CDeviceAuth_GetBorrowerPlayHistory_Response::~CDeviceAuth_GetBorrowerPlayHistory_Response() {
  // @@protoc_insertion_point(destructor:CDeviceAuth_GetBorrowerPlayHistory_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::ArenaDtor(void* object) {
  CDeviceAuth_GetBorrowerPlayHistory_Response* _this = reinterpret_cast< CDeviceAuth_GetBorrowerPlayHistory_Response* >(object);
  (void)_this;
}
void CDeviceAuth_GetBorrowerPlayHistory_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDeviceAuth_GetBorrowerPlayHistory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lender_history_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeviceAuth_GetBorrowerPlayHistory_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lender_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDeviceAuth_GetBorrowerPlayHistory_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lender_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lender_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDeviceAuth_GetBorrowerPlayHistory_Response)
  return target;
}

size_t CDeviceAuth_GetBorrowerPlayHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
  total_size += 1UL * this->_internal_lender_history_size();
  for (const auto& msg : this->lender_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetBorrowerPlayHistory_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDeviceAuth_GetBorrowerPlayHistory_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDeviceAuth_GetBorrowerPlayHistory_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDeviceAuth_GetBorrowerPlayHistory_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lender_history_.MergeFrom(from.lender_history_);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDeviceAuth_GetBorrowerPlayHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetBorrowerPlayHistory_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetBorrowerPlayHistory_Response::InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lender_history_.InternalSwap(&other->lender_history_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeviceAuth_GetBorrowerPlayHistory_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DeviceAuth::~DeviceAuth() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DeviceAuth::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DeviceAuth::GetDescriptor() {
  return descriptor();
}

void DeviceAuth::GetOwnAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_GetOwnAuthorizedDevices_Request*,
                         ::CDeviceAuth_GetOwnAuthorizedDevices_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOwnAuthorizedDevices() not implemented.");
  done->Run();
}

void DeviceAuth::AcceptAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_AcceptAuthorizationRequest_Request*,
                         ::CDeviceAuth_AcceptAuthorizationRequest_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptAuthorizationRequest() not implemented.");
  done->Run();
}

void DeviceAuth::AuthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_AuthorizeRemoteDevice_Request*,
                         ::CDeviceAuth_AuthorizeRemoteDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AuthorizeRemoteDevice() not implemented.");
  done->Run();
}

void DeviceAuth::DeauthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_DeauthorizeRemoteDevice_Request*,
                         ::CDeviceAuth_DeauthorizeRemoteDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeauthorizeRemoteDevice() not implemented.");
  done->Run();
}

void DeviceAuth::GetUsedAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_GetUsedAuthorizedDevices_Request*,
                         ::CDeviceAuth_GetUsedAuthorizedDevices_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUsedAuthorizedDevices() not implemented.");
  done->Run();
}

void DeviceAuth::GetAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_GetAuthorizedBorrowers_Request*,
                         ::CDeviceAuth_GetAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::AddAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_AddAuthorizedBorrowers_Request*,
                         ::CDeviceAuth_AddAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::RemoveAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_RemoveAuthorizedBorrowers_Request*,
                         ::CDeviceAuth_RemoveAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::GetAuthorizedAsBorrower(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_GetAuthorizedAsBorrower_Request*,
                         ::CDeviceAuth_GetAuthorizedAsBorrower_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedAsBorrower() not implemented.");
  done->Run();
}

void DeviceAuth::GetExcludedGamesInLibrary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_GetExcludedGamesInLibrary_Request*,
                         ::CDeviceAuth_GetExcludedGamesInLibrary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetExcludedGamesInLibrary() not implemented.");
  done->Run();
}

void DeviceAuth::GetBorrowerPlayHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CDeviceAuth_GetBorrowerPlayHistory_Request*,
                         ::CDeviceAuth_GetBorrowerPlayHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBorrowerPlayHistory() not implemented.");
  done->Run();
}

void DeviceAuth::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fdeviceauth_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetOwnAuthorizedDevices(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_GetOwnAuthorizedDevices_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_GetOwnAuthorizedDevices_Response*>(
                 response),
             done);
      break;
    case 1:
      AcceptAuthorizationRequest(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_AcceptAuthorizationRequest_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_AcceptAuthorizationRequest_Response*>(
                 response),
             done);
      break;
    case 2:
      AuthorizeRemoteDevice(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_AuthorizeRemoteDevice_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_AuthorizeRemoteDevice_Response*>(
                 response),
             done);
      break;
    case 3:
      DeauthorizeRemoteDevice(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_DeauthorizeRemoteDevice_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_DeauthorizeRemoteDevice_Response*>(
                 response),
             done);
      break;
    case 4:
      GetUsedAuthorizedDevices(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_GetUsedAuthorizedDevices_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_GetUsedAuthorizedDevices_Response*>(
                 response),
             done);
      break;
    case 5:
      GetAuthorizedBorrowers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_GetAuthorizedBorrowers_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_GetAuthorizedBorrowers_Response*>(
                 response),
             done);
      break;
    case 6:
      AddAuthorizedBorrowers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_AddAuthorizedBorrowers_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_AddAuthorizedBorrowers_Response*>(
                 response),
             done);
      break;
    case 7:
      RemoveAuthorizedBorrowers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_RemoveAuthorizedBorrowers_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_RemoveAuthorizedBorrowers_Response*>(
                 response),
             done);
      break;
    case 8:
      GetAuthorizedAsBorrower(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_GetAuthorizedAsBorrower_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_GetAuthorizedAsBorrower_Response*>(
                 response),
             done);
      break;
    case 9:
      GetExcludedGamesInLibrary(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_GetExcludedGamesInLibrary_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_GetExcludedGamesInLibrary_Response*>(
                 response),
             done);
      break;
    case 10:
      GetBorrowerPlayHistory(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CDeviceAuth_GetBorrowerPlayHistory_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CDeviceAuth_GetBorrowerPlayHistory_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DeviceAuth::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CDeviceAuth_GetOwnAuthorizedDevices_Request::default_instance();
    case 1:
      return ::CDeviceAuth_AcceptAuthorizationRequest_Request::default_instance();
    case 2:
      return ::CDeviceAuth_AuthorizeRemoteDevice_Request::default_instance();
    case 3:
      return ::CDeviceAuth_DeauthorizeRemoteDevice_Request::default_instance();
    case 4:
      return ::CDeviceAuth_GetUsedAuthorizedDevices_Request::default_instance();
    case 5:
      return ::CDeviceAuth_GetAuthorizedBorrowers_Request::default_instance();
    case 6:
      return ::CDeviceAuth_AddAuthorizedBorrowers_Request::default_instance();
    case 7:
      return ::CDeviceAuth_RemoveAuthorizedBorrowers_Request::default_instance();
    case 8:
      return ::CDeviceAuth_GetAuthorizedAsBorrower_Request::default_instance();
    case 9:
      return ::CDeviceAuth_GetExcludedGamesInLibrary_Request::default_instance();
    case 10:
      return ::CDeviceAuth_GetBorrowerPlayHistory_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DeviceAuth::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CDeviceAuth_GetOwnAuthorizedDevices_Response::default_instance();
    case 1:
      return ::CDeviceAuth_AcceptAuthorizationRequest_Response::default_instance();
    case 2:
      return ::CDeviceAuth_AuthorizeRemoteDevice_Response::default_instance();
    case 3:
      return ::CDeviceAuth_DeauthorizeRemoteDevice_Response::default_instance();
    case 4:
      return ::CDeviceAuth_GetUsedAuthorizedDevices_Response::default_instance();
    case 5:
      return ::CDeviceAuth_GetAuthorizedBorrowers_Response::default_instance();
    case 6:
      return ::CDeviceAuth_AddAuthorizedBorrowers_Response::default_instance();
    case 7:
      return ::CDeviceAuth_RemoveAuthorizedBorrowers_Response::default_instance();
    case 8:
      return ::CDeviceAuth_GetAuthorizedAsBorrower_Response::default_instance();
    case 9:
      return ::CDeviceAuth_GetExcludedGamesInLibrary_Response::default_instance();
    case 10:
      return ::CDeviceAuth_GetBorrowerPlayHistory_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DeviceAuth_Stub::DeviceAuth_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DeviceAuth_Stub::DeviceAuth_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DeviceAuth_Stub::~DeviceAuth_Stub() {
  if (owns_channel_) delete channel_;
}

void DeviceAuth_Stub::GetOwnAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_GetOwnAuthorizedDevices_Request* request,
                              ::CDeviceAuth_GetOwnAuthorizedDevices_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AcceptAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_AcceptAuthorizationRequest_Request* request,
                              ::CDeviceAuth_AcceptAuthorizationRequest_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AuthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_AuthorizeRemoteDevice_Request* request,
                              ::CDeviceAuth_AuthorizeRemoteDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DeviceAuth_Stub::DeauthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_DeauthorizeRemoteDevice_Request* request,
                              ::CDeviceAuth_DeauthorizeRemoteDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetUsedAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_GetUsedAuthorizedDevices_Request* request,
                              ::CDeviceAuth_GetUsedAuthorizedDevices_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_GetAuthorizedBorrowers_Request* request,
                              ::CDeviceAuth_GetAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AddAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_AddAuthorizedBorrowers_Request* request,
                              ::CDeviceAuth_AddAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void DeviceAuth_Stub::RemoveAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_RemoveAuthorizedBorrowers_Request* request,
                              ::CDeviceAuth_RemoveAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetAuthorizedAsBorrower(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_GetAuthorizedAsBorrower_Request* request,
                              ::CDeviceAuth_GetAuthorizedAsBorrower_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetExcludedGamesInLibrary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_GetExcludedGamesInLibrary_Request* request,
                              ::CDeviceAuth_GetExcludedGamesInLibrary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetBorrowerPlayHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CDeviceAuth_GetBorrowerPlayHistory_Request* request,
                              ::CDeviceAuth_GetBorrowerPlayHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetOwnAuthorizedDevices_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_GetOwnAuthorizedDevices_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetOwnAuthorizedDevices_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* Arena::CreateMaybeMessage< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetOwnAuthorizedDevices_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_GetOwnAuthorizedDevices_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetOwnAuthorizedDevices_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_AcceptAuthorizationRequest_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_AcceptAuthorizationRequest_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_AcceptAuthorizationRequest_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_AcceptAuthorizationRequest_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_AcceptAuthorizationRequest_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_AcceptAuthorizationRequest_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_AuthorizeRemoteDevice_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_AuthorizeRemoteDevice_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_AuthorizeRemoteDevice_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_AuthorizeRemoteDevice_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_AuthorizeRemoteDevice_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_AuthorizeRemoteDevice_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_DeauthorizeRemoteDevice_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_DeauthorizeRemoteDevice_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_DeauthorizeRemoteDevice_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_DeauthorizeRemoteDevice_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_DeauthorizeRemoteDevice_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_DeauthorizeRemoteDevice_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetUsedAuthorizedDevices_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_GetUsedAuthorizedDevices_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetUsedAuthorizedDevices_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* Arena::CreateMaybeMessage< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetUsedAuthorizedDevices_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_GetUsedAuthorizedDevices_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetUsedAuthorizedDevices_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetAuthorizedBorrowers_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_GetAuthorizedBorrowers_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetAuthorizedBorrowers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* Arena::CreateMaybeMessage< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetAuthorizedBorrowers_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_GetAuthorizedBorrowers_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetAuthorizedBorrowers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_AddAuthorizedBorrowers_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_AddAuthorizedBorrowers_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_AddAuthorizedBorrowers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_AddAuthorizedBorrowers_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_AddAuthorizedBorrowers_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_AddAuthorizedBorrowers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_RemoveAuthorizedBorrowers_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_RemoveAuthorizedBorrowers_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_RemoveAuthorizedBorrowers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_RemoveAuthorizedBorrowers_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_RemoveAuthorizedBorrowers_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_RemoveAuthorizedBorrowers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetAuthorizedAsBorrower_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_GetAuthorizedAsBorrower_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetAuthorizedAsBorrower_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* Arena::CreateMaybeMessage< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetAuthorizedAsBorrower_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_GetAuthorizedAsBorrower_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetAuthorizedAsBorrower_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetExcludedGamesInLibrary_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_GetExcludedGamesInLibrary_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetExcludedGamesInLibrary_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* Arena::CreateMaybeMessage< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetExcludedGamesInLibrary_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_GetExcludedGamesInLibrary_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetExcludedGamesInLibrary_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetBorrowerPlayHistory_Request* Arena::CreateMaybeMessage< ::CDeviceAuth_GetBorrowerPlayHistory_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetBorrowerPlayHistory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* Arena::CreateMaybeMessage< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* Arena::CreateMaybeMessage< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CDeviceAuth_GetBorrowerPlayHistory_Response* Arena::CreateMaybeMessage< ::CDeviceAuth_GetBorrowerPlayHistory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDeviceAuth_GetBorrowerPlayHistory_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
