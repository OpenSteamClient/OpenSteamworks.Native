// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenotifications.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenotifications_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenotifications_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgamenotifications_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(int index);
class CGameNotifications_CreateSession_Request;
struct CGameNotifications_CreateSession_RequestDefaultTypeInternal;
extern CGameNotifications_CreateSession_RequestDefaultTypeInternal _CGameNotifications_CreateSession_Request_default_instance_;
class CGameNotifications_CreateSession_Response;
struct CGameNotifications_CreateSession_ResponseDefaultTypeInternal;
extern CGameNotifications_CreateSession_ResponseDefaultTypeInternal _CGameNotifications_CreateSession_Response_default_instance_;
class CGameNotifications_DeleteSession_Request;
struct CGameNotifications_DeleteSession_RequestDefaultTypeInternal;
extern CGameNotifications_DeleteSession_RequestDefaultTypeInternal _CGameNotifications_DeleteSession_Request_default_instance_;
class CGameNotifications_DeleteSession_Response;
struct CGameNotifications_DeleteSession_ResponseDefaultTypeInternal;
extern CGameNotifications_DeleteSession_ResponseDefaultTypeInternal _CGameNotifications_DeleteSession_Response_default_instance_;
class CGameNotifications_EnumerateSessions_Request;
struct CGameNotifications_EnumerateSessions_RequestDefaultTypeInternal;
extern CGameNotifications_EnumerateSessions_RequestDefaultTypeInternal _CGameNotifications_EnumerateSessions_Request_default_instance_;
class CGameNotifications_EnumerateSessions_Response;
struct CGameNotifications_EnumerateSessions_ResponseDefaultTypeInternal;
extern CGameNotifications_EnumerateSessions_ResponseDefaultTypeInternal _CGameNotifications_EnumerateSessions_Response_default_instance_;
class CGameNotifications_GetSessionDetails_Request;
struct CGameNotifications_GetSessionDetails_RequestDefaultTypeInternal;
extern CGameNotifications_GetSessionDetails_RequestDefaultTypeInternal _CGameNotifications_GetSessionDetails_Request_default_instance_;
class CGameNotifications_GetSessionDetails_Request_RequestedSession;
struct CGameNotifications_GetSessionDetails_Request_RequestedSessionDefaultTypeInternal;
extern CGameNotifications_GetSessionDetails_Request_RequestedSessionDefaultTypeInternal _CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_;
class CGameNotifications_GetSessionDetails_Response;
struct CGameNotifications_GetSessionDetails_ResponseDefaultTypeInternal;
extern CGameNotifications_GetSessionDetails_ResponseDefaultTypeInternal _CGameNotifications_GetSessionDetails_Response_default_instance_;
class CGameNotifications_LocalizedText;
struct CGameNotifications_LocalizedTextDefaultTypeInternal;
extern CGameNotifications_LocalizedTextDefaultTypeInternal _CGameNotifications_LocalizedText_default_instance_;
class CGameNotifications_OnNotificationsRequested_Notification;
struct CGameNotifications_OnNotificationsRequested_NotificationDefaultTypeInternal;
extern CGameNotifications_OnNotificationsRequested_NotificationDefaultTypeInternal _CGameNotifications_OnNotificationsRequested_Notification_default_instance_;
class CGameNotifications_OnUserStatusChanged_Notification;
struct CGameNotifications_OnUserStatusChanged_NotificationDefaultTypeInternal;
extern CGameNotifications_OnUserStatusChanged_NotificationDefaultTypeInternal _CGameNotifications_OnUserStatusChanged_Notification_default_instance_;
class CGameNotifications_Session;
struct CGameNotifications_SessionDefaultTypeInternal;
extern CGameNotifications_SessionDefaultTypeInternal _CGameNotifications_Session_default_instance_;
class CGameNotifications_UpdateNotificationSettings_Request;
struct CGameNotifications_UpdateNotificationSettings_RequestDefaultTypeInternal;
extern CGameNotifications_UpdateNotificationSettings_RequestDefaultTypeInternal _CGameNotifications_UpdateNotificationSettings_Request_default_instance_;
class CGameNotifications_UpdateNotificationSettings_Response;
struct CGameNotifications_UpdateNotificationSettings_ResponseDefaultTypeInternal;
extern CGameNotifications_UpdateNotificationSettings_ResponseDefaultTypeInternal _CGameNotifications_UpdateNotificationSettings_Response_default_instance_;
class CGameNotifications_UpdateSession_Request;
struct CGameNotifications_UpdateSession_RequestDefaultTypeInternal;
extern CGameNotifications_UpdateSession_RequestDefaultTypeInternal _CGameNotifications_UpdateSession_Request_default_instance_;
class CGameNotifications_UpdateSession_Response;
struct CGameNotifications_UpdateSession_ResponseDefaultTypeInternal;
extern CGameNotifications_UpdateSession_ResponseDefaultTypeInternal _CGameNotifications_UpdateSession_Response_default_instance_;
class CGameNotifications_UserStatus;
struct CGameNotifications_UserStatusDefaultTypeInternal;
extern CGameNotifications_UserStatusDefaultTypeInternal _CGameNotifications_UserStatus_default_instance_;
class CGameNotifications_Variable;
struct CGameNotifications_VariableDefaultTypeInternal;
extern CGameNotifications_VariableDefaultTypeInternal _CGameNotifications_Variable_default_instance_;
class GameNotificationSettings;
struct GameNotificationSettingsDefaultTypeInternal;
extern GameNotificationSettingsDefaultTypeInternal _GameNotificationSettings_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameNotifications_CreateSession_Request* Arena::CreateMaybeMessage<::CGameNotifications_CreateSession_Request>(Arena*);
template<> ::CGameNotifications_CreateSession_Response* Arena::CreateMaybeMessage<::CGameNotifications_CreateSession_Response>(Arena*);
template<> ::CGameNotifications_DeleteSession_Request* Arena::CreateMaybeMessage<::CGameNotifications_DeleteSession_Request>(Arena*);
template<> ::CGameNotifications_DeleteSession_Response* Arena::CreateMaybeMessage<::CGameNotifications_DeleteSession_Response>(Arena*);
template<> ::CGameNotifications_EnumerateSessions_Request* Arena::CreateMaybeMessage<::CGameNotifications_EnumerateSessions_Request>(Arena*);
template<> ::CGameNotifications_EnumerateSessions_Response* Arena::CreateMaybeMessage<::CGameNotifications_EnumerateSessions_Response>(Arena*);
template<> ::CGameNotifications_GetSessionDetails_Request* Arena::CreateMaybeMessage<::CGameNotifications_GetSessionDetails_Request>(Arena*);
template<> ::CGameNotifications_GetSessionDetails_Request_RequestedSession* Arena::CreateMaybeMessage<::CGameNotifications_GetSessionDetails_Request_RequestedSession>(Arena*);
template<> ::CGameNotifications_GetSessionDetails_Response* Arena::CreateMaybeMessage<::CGameNotifications_GetSessionDetails_Response>(Arena*);
template<> ::CGameNotifications_LocalizedText* Arena::CreateMaybeMessage<::CGameNotifications_LocalizedText>(Arena*);
template<> ::CGameNotifications_OnNotificationsRequested_Notification* Arena::CreateMaybeMessage<::CGameNotifications_OnNotificationsRequested_Notification>(Arena*);
template<> ::CGameNotifications_OnUserStatusChanged_Notification* Arena::CreateMaybeMessage<::CGameNotifications_OnUserStatusChanged_Notification>(Arena*);
template<> ::CGameNotifications_Session* Arena::CreateMaybeMessage<::CGameNotifications_Session>(Arena*);
template<> ::CGameNotifications_UpdateNotificationSettings_Request* Arena::CreateMaybeMessage<::CGameNotifications_UpdateNotificationSettings_Request>(Arena*);
template<> ::CGameNotifications_UpdateNotificationSettings_Response* Arena::CreateMaybeMessage<::CGameNotifications_UpdateNotificationSettings_Response>(Arena*);
template<> ::CGameNotifications_UpdateSession_Request* Arena::CreateMaybeMessage<::CGameNotifications_UpdateSession_Request>(Arena*);
template<> ::CGameNotifications_UpdateSession_Response* Arena::CreateMaybeMessage<::CGameNotifications_UpdateSession_Response>(Arena*);
template<> ::CGameNotifications_UserStatus* Arena::CreateMaybeMessage<::CGameNotifications_UserStatus>(Arena*);
template<> ::CGameNotifications_Variable* Arena::CreateMaybeMessage<::CGameNotifications_Variable>(Arena*);
template<> ::GameNotificationSettings* Arena::CreateMaybeMessage<::GameNotificationSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CGameNotifications_Variable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_Variable) */ {
 public:
  inline CGameNotifications_Variable() : CGameNotifications_Variable(nullptr) {}
  virtual ~CGameNotifications_Variable();
  explicit constexpr CGameNotifications_Variable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_Variable(const CGameNotifications_Variable& from);
  CGameNotifications_Variable(CGameNotifications_Variable&& from) noexcept
    : CGameNotifications_Variable() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_Variable& operator=(const CGameNotifications_Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_Variable& operator=(CGameNotifications_Variable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_Variable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_Variable* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_Variable*>(
               &_CGameNotifications_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameNotifications_Variable& a, CGameNotifications_Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_Variable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_Variable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_Variable* New() const final {
    return CreateMaybeMessage<CGameNotifications_Variable>(nullptr);
  }

  CGameNotifications_Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_Variable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_Variable& from);
  void MergeFrom(const CGameNotifications_Variable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_Variable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_Variable";
  }
  protected:
  explicit CGameNotifications_Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_Variable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_LocalizedText PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_LocalizedText) */ {
 public:
  inline CGameNotifications_LocalizedText() : CGameNotifications_LocalizedText(nullptr) {}
  virtual ~CGameNotifications_LocalizedText();
  explicit constexpr CGameNotifications_LocalizedText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_LocalizedText(const CGameNotifications_LocalizedText& from);
  CGameNotifications_LocalizedText(CGameNotifications_LocalizedText&& from) noexcept
    : CGameNotifications_LocalizedText() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_LocalizedText& operator=(const CGameNotifications_LocalizedText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_LocalizedText& operator=(CGameNotifications_LocalizedText&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_LocalizedText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_LocalizedText* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_LocalizedText*>(
               &_CGameNotifications_LocalizedText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameNotifications_LocalizedText& a, CGameNotifications_LocalizedText& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_LocalizedText* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_LocalizedText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_LocalizedText* New() const final {
    return CreateMaybeMessage<CGameNotifications_LocalizedText>(nullptr);
  }

  CGameNotifications_LocalizedText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_LocalizedText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_LocalizedText& from);
  void MergeFrom(const CGameNotifications_LocalizedText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_LocalizedText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_LocalizedText";
  }
  protected:
  explicit CGameNotifications_LocalizedText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 2,
    kTokenFieldNumber = 1,
    kRenderedTextFieldNumber = 3,
  };
  // repeated .CGameNotifications_Variable variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::CGameNotifications_Variable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Variable >*
      mutable_variables();
  private:
  const ::CGameNotifications_Variable& _internal_variables(int index) const;
  ::CGameNotifications_Variable* _internal_add_variables();
  public:
  const ::CGameNotifications_Variable& variables(int index) const;
  ::CGameNotifications_Variable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Variable >&
      variables() const;

  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string rendered_text = 3;
  bool has_rendered_text() const;
  private:
  bool _internal_has_rendered_text() const;
  public:
  void clear_rendered_text();
  const std::string& rendered_text() const;
  void set_rendered_text(const std::string& value);
  void set_rendered_text(std::string&& value);
  void set_rendered_text(const char* value);
  void set_rendered_text(const char* value, size_t size);
  std::string* mutable_rendered_text();
  std::string* release_rendered_text();
  void set_allocated_rendered_text(std::string* rendered_text);
  private:
  const std::string& _internal_rendered_text() const;
  void _internal_set_rendered_text(const std::string& value);
  std::string* _internal_mutable_rendered_text();
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_LocalizedText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Variable > variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rendered_text_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_UserStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UserStatus) */ {
 public:
  inline CGameNotifications_UserStatus() : CGameNotifications_UserStatus(nullptr) {}
  virtual ~CGameNotifications_UserStatus();
  explicit constexpr CGameNotifications_UserStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_UserStatus(const CGameNotifications_UserStatus& from);
  CGameNotifications_UserStatus(CGameNotifications_UserStatus&& from) noexcept
    : CGameNotifications_UserStatus() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UserStatus& operator=(const CGameNotifications_UserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_UserStatus& operator=(CGameNotifications_UserStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_UserStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_UserStatus* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UserStatus*>(
               &_CGameNotifications_UserStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameNotifications_UserStatus& a, CGameNotifications_UserStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_UserStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_UserStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UserStatus* New() const final {
    return CreateMaybeMessage<CGameNotifications_UserStatus>(nullptr);
  }

  CGameNotifications_UserStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UserStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_UserStatus& from);
  void MergeFrom(const CGameNotifications_UserStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UserStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_UserStatus";
  }
  protected:
  explicit CGameNotifications_UserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kTitleFieldNumber = 3,
    kMessageFieldNumber = 4,
    kSteamidFieldNumber = 1,
  };
  // optional string state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // optional .CGameNotifications_LocalizedText title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  ::CGameNotifications_LocalizedText* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::CGameNotifications_LocalizedText* title);
  ::CGameNotifications_LocalizedText* unsafe_arena_release_title();

  // optional .CGameNotifications_LocalizedText message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CGameNotifications_LocalizedText& message() const;
  ::CGameNotifications_LocalizedText* release_message();
  ::CGameNotifications_LocalizedText* mutable_message();
  void set_allocated_message(::CGameNotifications_LocalizedText* message);
  private:
  const ::CGameNotifications_LocalizedText& _internal_message() const;
  ::CGameNotifications_LocalizedText* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CGameNotifications_LocalizedText* message);
  ::CGameNotifications_LocalizedText* unsafe_arena_release_message();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_UserStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::CGameNotifications_LocalizedText* title_;
  ::CGameNotifications_LocalizedText* message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_CreateSession_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_CreateSession_Request) */ {
 public:
  inline CGameNotifications_CreateSession_Request() : CGameNotifications_CreateSession_Request(nullptr) {}
  virtual ~CGameNotifications_CreateSession_Request();
  explicit constexpr CGameNotifications_CreateSession_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_CreateSession_Request(const CGameNotifications_CreateSession_Request& from);
  CGameNotifications_CreateSession_Request(CGameNotifications_CreateSession_Request&& from) noexcept
    : CGameNotifications_CreateSession_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_CreateSession_Request& operator=(const CGameNotifications_CreateSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_CreateSession_Request& operator=(CGameNotifications_CreateSession_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_CreateSession_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_CreateSession_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_CreateSession_Request*>(
               &_CGameNotifications_CreateSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGameNotifications_CreateSession_Request& a, CGameNotifications_CreateSession_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_CreateSession_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_CreateSession_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_CreateSession_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Request>(nullptr);
  }

  CGameNotifications_CreateSession_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_CreateSession_Request& from);
  void MergeFrom(const CGameNotifications_CreateSession_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_CreateSession_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_CreateSession_Request";
  }
  protected:
  explicit CGameNotifications_CreateSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 4,
    kTitleFieldNumber = 3,
    kContextFieldNumber = 2,
    kSteamidFieldNumber = 5,
    kAppidFieldNumber = 1,
  };
  // repeated .CGameNotifications_UserStatus users = 4;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::CGameNotifications_UserStatus* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >*
      mutable_users();
  private:
  const ::CGameNotifications_UserStatus& _internal_users(int index) const;
  ::CGameNotifications_UserStatus* _internal_add_users();
  public:
  const ::CGameNotifications_UserStatus& users(int index) const;
  ::CGameNotifications_UserStatus* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >&
      users() const;

  // optional .CGameNotifications_LocalizedText title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  ::CGameNotifications_LocalizedText* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::CGameNotifications_LocalizedText* title);
  ::CGameNotifications_LocalizedText* unsafe_arena_release_title();

  // optional uint64 context = 2;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint64 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_context() const;
  void _internal_set_context(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 steamid = 5;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_CreateSession_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus > users_;
  ::CGameNotifications_LocalizedText* title_;
  ::PROTOBUF_NAMESPACE_ID::uint64 context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_CreateSession_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_CreateSession_Response) */ {
 public:
  inline CGameNotifications_CreateSession_Response() : CGameNotifications_CreateSession_Response(nullptr) {}
  virtual ~CGameNotifications_CreateSession_Response();
  explicit constexpr CGameNotifications_CreateSession_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_CreateSession_Response(const CGameNotifications_CreateSession_Response& from);
  CGameNotifications_CreateSession_Response(CGameNotifications_CreateSession_Response&& from) noexcept
    : CGameNotifications_CreateSession_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_CreateSession_Response& operator=(const CGameNotifications_CreateSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_CreateSession_Response& operator=(CGameNotifications_CreateSession_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_CreateSession_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_CreateSession_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_CreateSession_Response*>(
               &_CGameNotifications_CreateSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameNotifications_CreateSession_Response& a, CGameNotifications_CreateSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_CreateSession_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_CreateSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_CreateSession_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Response>(nullptr);
  }

  CGameNotifications_CreateSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_CreateSession_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_CreateSession_Response& from);
  void MergeFrom(const CGameNotifications_CreateSession_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_CreateSession_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_CreateSession_Response";
  }
  protected:
  explicit CGameNotifications_CreateSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionidFieldNumber = 1,
  };
  // optional uint64 sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_CreateSession_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_DeleteSession_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_DeleteSession_Request) */ {
 public:
  inline CGameNotifications_DeleteSession_Request() : CGameNotifications_DeleteSession_Request(nullptr) {}
  virtual ~CGameNotifications_DeleteSession_Request();
  explicit constexpr CGameNotifications_DeleteSession_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_DeleteSession_Request(const CGameNotifications_DeleteSession_Request& from);
  CGameNotifications_DeleteSession_Request(CGameNotifications_DeleteSession_Request&& from) noexcept
    : CGameNotifications_DeleteSession_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_DeleteSession_Request& operator=(const CGameNotifications_DeleteSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_DeleteSession_Request& operator=(CGameNotifications_DeleteSession_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_DeleteSession_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_DeleteSession_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_DeleteSession_Request*>(
               &_CGameNotifications_DeleteSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGameNotifications_DeleteSession_Request& a, CGameNotifications_DeleteSession_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_DeleteSession_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_DeleteSession_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_DeleteSession_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Request>(nullptr);
  }

  CGameNotifications_DeleteSession_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_DeleteSession_Request& from);
  void MergeFrom(const CGameNotifications_DeleteSession_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_DeleteSession_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_DeleteSession_Request";
  }
  protected:
  explicit CGameNotifications_DeleteSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionidFieldNumber = 1,
    kSteamidFieldNumber = 3,
    kAppidFieldNumber = 2,
  };
  // optional uint64 sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 steamid = 3;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_DeleteSession_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_DeleteSession_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_DeleteSession_Response) */ {
 public:
  inline CGameNotifications_DeleteSession_Response() : CGameNotifications_DeleteSession_Response(nullptr) {}
  virtual ~CGameNotifications_DeleteSession_Response();
  explicit constexpr CGameNotifications_DeleteSession_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_DeleteSession_Response(const CGameNotifications_DeleteSession_Response& from);
  CGameNotifications_DeleteSession_Response(CGameNotifications_DeleteSession_Response&& from) noexcept
    : CGameNotifications_DeleteSession_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_DeleteSession_Response& operator=(const CGameNotifications_DeleteSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_DeleteSession_Response& operator=(CGameNotifications_DeleteSession_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_DeleteSession_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_DeleteSession_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_DeleteSession_Response*>(
               &_CGameNotifications_DeleteSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CGameNotifications_DeleteSession_Response& a, CGameNotifications_DeleteSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_DeleteSession_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_DeleteSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_DeleteSession_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Response>(nullptr);
  }

  CGameNotifications_DeleteSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_DeleteSession_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_DeleteSession_Response& from);
  void MergeFrom(const CGameNotifications_DeleteSession_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_DeleteSession_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_DeleteSession_Response";
  }
  protected:
  explicit CGameNotifications_DeleteSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNotifications_DeleteSession_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateSession_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateSession_Request) */ {
 public:
  inline CGameNotifications_UpdateSession_Request() : CGameNotifications_UpdateSession_Request(nullptr) {}
  virtual ~CGameNotifications_UpdateSession_Request();
  explicit constexpr CGameNotifications_UpdateSession_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_UpdateSession_Request(const CGameNotifications_UpdateSession_Request& from);
  CGameNotifications_UpdateSession_Request(CGameNotifications_UpdateSession_Request&& from) noexcept
    : CGameNotifications_UpdateSession_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateSession_Request& operator=(const CGameNotifications_UpdateSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_UpdateSession_Request& operator=(CGameNotifications_UpdateSession_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_UpdateSession_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_UpdateSession_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateSession_Request*>(
               &_CGameNotifications_UpdateSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CGameNotifications_UpdateSession_Request& a, CGameNotifications_UpdateSession_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_UpdateSession_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_UpdateSession_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateSession_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Request>(nullptr);
  }

  CGameNotifications_UpdateSession_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateSession_Request& from);
  void MergeFrom(const CGameNotifications_UpdateSession_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateSession_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_UpdateSession_Request";
  }
  protected:
  explicit CGameNotifications_UpdateSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 4,
    kTitleFieldNumber = 3,
    kSessionidFieldNumber = 1,
    kSteamidFieldNumber = 6,
    kAppidFieldNumber = 2,
  };
  // repeated .CGameNotifications_UserStatus users = 4;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::CGameNotifications_UserStatus* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >*
      mutable_users();
  private:
  const ::CGameNotifications_UserStatus& _internal_users(int index) const;
  ::CGameNotifications_UserStatus* _internal_add_users();
  public:
  const ::CGameNotifications_UserStatus& users(int index) const;
  ::CGameNotifications_UserStatus* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >&
      users() const;

  // optional .CGameNotifications_LocalizedText title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  ::CGameNotifications_LocalizedText* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::CGameNotifications_LocalizedText* title);
  ::CGameNotifications_LocalizedText* unsafe_arena_release_title();

  // optional uint64 sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 steamid = 6;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateSession_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus > users_;
  ::CGameNotifications_LocalizedText* title_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateSession_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateSession_Response) */ {
 public:
  inline CGameNotifications_UpdateSession_Response() : CGameNotifications_UpdateSession_Response(nullptr) {}
  virtual ~CGameNotifications_UpdateSession_Response();
  explicit constexpr CGameNotifications_UpdateSession_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_UpdateSession_Response(const CGameNotifications_UpdateSession_Response& from);
  CGameNotifications_UpdateSession_Response(CGameNotifications_UpdateSession_Response&& from) noexcept
    : CGameNotifications_UpdateSession_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateSession_Response& operator=(const CGameNotifications_UpdateSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_UpdateSession_Response& operator=(CGameNotifications_UpdateSession_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_UpdateSession_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_UpdateSession_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateSession_Response*>(
               &_CGameNotifications_UpdateSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CGameNotifications_UpdateSession_Response& a, CGameNotifications_UpdateSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_UpdateSession_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_UpdateSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateSession_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Response>(nullptr);
  }

  CGameNotifications_UpdateSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateSession_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateSession_Response& from);
  void MergeFrom(const CGameNotifications_UpdateSession_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateSession_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_UpdateSession_Response";
  }
  protected:
  explicit CGameNotifications_UpdateSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateSession_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_EnumerateSessions_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_EnumerateSessions_Request) */ {
 public:
  inline CGameNotifications_EnumerateSessions_Request() : CGameNotifications_EnumerateSessions_Request(nullptr) {}
  virtual ~CGameNotifications_EnumerateSessions_Request();
  explicit constexpr CGameNotifications_EnumerateSessions_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_EnumerateSessions_Request(const CGameNotifications_EnumerateSessions_Request& from);
  CGameNotifications_EnumerateSessions_Request(CGameNotifications_EnumerateSessions_Request&& from) noexcept
    : CGameNotifications_EnumerateSessions_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_EnumerateSessions_Request& operator=(const CGameNotifications_EnumerateSessions_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_EnumerateSessions_Request& operator=(CGameNotifications_EnumerateSessions_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_EnumerateSessions_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_EnumerateSessions_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_EnumerateSessions_Request*>(
               &_CGameNotifications_EnumerateSessions_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CGameNotifications_EnumerateSessions_Request& a, CGameNotifications_EnumerateSessions_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_EnumerateSessions_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_EnumerateSessions_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_EnumerateSessions_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Request>(nullptr);
  }

  CGameNotifications_EnumerateSessions_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_EnumerateSessions_Request& from);
  void MergeFrom(const CGameNotifications_EnumerateSessions_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_EnumerateSessions_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_EnumerateSessions_Request";
  }
  protected:
  explicit CGameNotifications_EnumerateSessions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 5,
    kAppidFieldNumber = 1,
    kIncludeAllUserMessagesFieldNumber = 3,
    kIncludeAuthUserMessageFieldNumber = 4,
  };
  // optional string language = 5;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool include_all_user_messages = 3;
  bool has_include_all_user_messages() const;
  private:
  bool _internal_has_include_all_user_messages() const;
  public:
  void clear_include_all_user_messages();
  bool include_all_user_messages() const;
  void set_include_all_user_messages(bool value);
  private:
  bool _internal_include_all_user_messages() const;
  void _internal_set_include_all_user_messages(bool value);
  public:

  // optional bool include_auth_user_message = 4;
  bool has_include_auth_user_message() const;
  private:
  bool _internal_has_include_auth_user_message() const;
  public:
  void clear_include_auth_user_message();
  bool include_auth_user_message() const;
  void set_include_auth_user_message(bool value);
  private:
  bool _internal_include_auth_user_message() const;
  void _internal_set_include_auth_user_message(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_EnumerateSessions_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool include_all_user_messages_;
  bool include_auth_user_message_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_Session) */ {
 public:
  inline CGameNotifications_Session() : CGameNotifications_Session(nullptr) {}
  virtual ~CGameNotifications_Session();
  explicit constexpr CGameNotifications_Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_Session(const CGameNotifications_Session& from);
  CGameNotifications_Session(CGameNotifications_Session&& from) noexcept
    : CGameNotifications_Session() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_Session& operator=(const CGameNotifications_Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_Session& operator=(CGameNotifications_Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_Session* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_Session*>(
               &_CGameNotifications_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CGameNotifications_Session& a, CGameNotifications_Session& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_Session* New() const final {
    return CreateMaybeMessage<CGameNotifications_Session>(nullptr);
  }

  CGameNotifications_Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_Session& from);
  void MergeFrom(const CGameNotifications_Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_Session";
  }
  protected:
  explicit CGameNotifications_Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatusFieldNumber = 7,
    kTitleFieldNumber = 4,
    kSessionidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kContextFieldNumber = 3,
    kTimeCreatedFieldNumber = 5,
    kTimeUpdatedFieldNumber = 6,
  };
  // repeated .CGameNotifications_UserStatus user_status = 7;
  int user_status_size() const;
  private:
  int _internal_user_status_size() const;
  public:
  void clear_user_status();
  ::CGameNotifications_UserStatus* mutable_user_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >*
      mutable_user_status();
  private:
  const ::CGameNotifications_UserStatus& _internal_user_status(int index) const;
  ::CGameNotifications_UserStatus* _internal_add_user_status();
  public:
  const ::CGameNotifications_UserStatus& user_status(int index) const;
  ::CGameNotifications_UserStatus* add_user_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >&
      user_status() const;

  // optional .CGameNotifications_LocalizedText title = 4;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::CGameNotifications_LocalizedText& title() const;
  ::CGameNotifications_LocalizedText* release_title();
  ::CGameNotifications_LocalizedText* mutable_title();
  void set_allocated_title(::CGameNotifications_LocalizedText* title);
  private:
  const ::CGameNotifications_LocalizedText& _internal_title() const;
  ::CGameNotifications_LocalizedText* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::CGameNotifications_LocalizedText* title);
  ::CGameNotifications_LocalizedText* unsafe_arena_release_title();

  // optional uint64 sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint64 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint64 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_context() const;
  void _internal_set_context(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 time_created = 5;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_created() const;
  void set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_created() const;
  void _internal_set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_updated = 6;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_updated() const;
  void set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_updated() const;
  void _internal_set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus > user_status_;
  ::CGameNotifications_LocalizedText* title_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_created_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_updated_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_EnumerateSessions_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_EnumerateSessions_Response) */ {
 public:
  inline CGameNotifications_EnumerateSessions_Response() : CGameNotifications_EnumerateSessions_Response(nullptr) {}
  virtual ~CGameNotifications_EnumerateSessions_Response();
  explicit constexpr CGameNotifications_EnumerateSessions_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_EnumerateSessions_Response(const CGameNotifications_EnumerateSessions_Response& from);
  CGameNotifications_EnumerateSessions_Response(CGameNotifications_EnumerateSessions_Response&& from) noexcept
    : CGameNotifications_EnumerateSessions_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_EnumerateSessions_Response& operator=(const CGameNotifications_EnumerateSessions_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_EnumerateSessions_Response& operator=(CGameNotifications_EnumerateSessions_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_EnumerateSessions_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_EnumerateSessions_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_EnumerateSessions_Response*>(
               &_CGameNotifications_EnumerateSessions_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CGameNotifications_EnumerateSessions_Response& a, CGameNotifications_EnumerateSessions_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_EnumerateSessions_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_EnumerateSessions_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_EnumerateSessions_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Response>(nullptr);
  }

  CGameNotifications_EnumerateSessions_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_EnumerateSessions_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_EnumerateSessions_Response& from);
  void MergeFrom(const CGameNotifications_EnumerateSessions_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_EnumerateSessions_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_EnumerateSessions_Response";
  }
  protected:
  explicit CGameNotifications_EnumerateSessions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
  };
  // repeated .CGameNotifications_Session sessions = 1;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::CGameNotifications_Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >*
      mutable_sessions();
  private:
  const ::CGameNotifications_Session& _internal_sessions(int index) const;
  ::CGameNotifications_Session* _internal_add_sessions();
  public:
  const ::CGameNotifications_Session& sessions(int index) const;
  ::CGameNotifications_Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:CGameNotifications_EnumerateSessions_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_GetSessionDetails_Request_RequestedSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_GetSessionDetails_Request.RequestedSession) */ {
 public:
  inline CGameNotifications_GetSessionDetails_Request_RequestedSession() : CGameNotifications_GetSessionDetails_Request_RequestedSession(nullptr) {}
  virtual ~CGameNotifications_GetSessionDetails_Request_RequestedSession();
  explicit constexpr CGameNotifications_GetSessionDetails_Request_RequestedSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_GetSessionDetails_Request_RequestedSession(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from);
  CGameNotifications_GetSessionDetails_Request_RequestedSession(CGameNotifications_GetSessionDetails_Request_RequestedSession&& from) noexcept
    : CGameNotifications_GetSessionDetails_Request_RequestedSession() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_GetSessionDetails_Request_RequestedSession& operator=(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_GetSessionDetails_Request_RequestedSession& operator=(CGameNotifications_GetSessionDetails_Request_RequestedSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_GetSessionDetails_Request_RequestedSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_GetSessionDetails_Request_RequestedSession* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_GetSessionDetails_Request_RequestedSession*>(
               &_CGameNotifications_GetSessionDetails_Request_RequestedSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CGameNotifications_GetSessionDetails_Request_RequestedSession& a, CGameNotifications_GetSessionDetails_Request_RequestedSession& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_GetSessionDetails_Request_RequestedSession* New() const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request_RequestedSession>(nullptr);
  }

  CGameNotifications_GetSessionDetails_Request_RequestedSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request_RequestedSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from);
  void MergeFrom(const CGameNotifications_GetSessionDetails_Request_RequestedSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_GetSessionDetails_Request_RequestedSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_GetSessionDetails_Request.RequestedSession";
  }
  protected:
  explicit CGameNotifications_GetSessionDetails_Request_RequestedSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionidFieldNumber = 1,
    kIncludeAuthUserMessageFieldNumber = 3,
  };
  // optional uint64 sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool include_auth_user_message = 3;
  bool has_include_auth_user_message() const;
  private:
  bool _internal_has_include_auth_user_message() const;
  public:
  void clear_include_auth_user_message();
  bool include_auth_user_message() const;
  void set_include_auth_user_message(bool value);
  private:
  bool _internal_include_auth_user_message() const;
  void _internal_set_include_auth_user_message(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_GetSessionDetails_Request.RequestedSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  bool include_auth_user_message_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_GetSessionDetails_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_GetSessionDetails_Request) */ {
 public:
  inline CGameNotifications_GetSessionDetails_Request() : CGameNotifications_GetSessionDetails_Request(nullptr) {}
  virtual ~CGameNotifications_GetSessionDetails_Request();
  explicit constexpr CGameNotifications_GetSessionDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_GetSessionDetails_Request(const CGameNotifications_GetSessionDetails_Request& from);
  CGameNotifications_GetSessionDetails_Request(CGameNotifications_GetSessionDetails_Request&& from) noexcept
    : CGameNotifications_GetSessionDetails_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_GetSessionDetails_Request& operator=(const CGameNotifications_GetSessionDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_GetSessionDetails_Request& operator=(CGameNotifications_GetSessionDetails_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_GetSessionDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_GetSessionDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_GetSessionDetails_Request*>(
               &_CGameNotifications_GetSessionDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CGameNotifications_GetSessionDetails_Request& a, CGameNotifications_GetSessionDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_GetSessionDetails_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_GetSessionDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_GetSessionDetails_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request>(nullptr);
  }

  CGameNotifications_GetSessionDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_GetSessionDetails_Request& from);
  void MergeFrom(const CGameNotifications_GetSessionDetails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_GetSessionDetails_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_GetSessionDetails_Request";
  }
  protected:
  explicit CGameNotifications_GetSessionDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameNotifications_GetSessionDetails_Request_RequestedSession RequestedSession;

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
    kLanguageFieldNumber = 3,
    kAppidFieldNumber = 2,
  };
  // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::CGameNotifications_GetSessionDetails_Request_RequestedSession* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >*
      mutable_sessions();
  private:
  const ::CGameNotifications_GetSessionDetails_Request_RequestedSession& _internal_sessions(int index) const;
  ::CGameNotifications_GetSessionDetails_Request_RequestedSession* _internal_add_sessions();
  public:
  const ::CGameNotifications_GetSessionDetails_Request_RequestedSession& sessions(int index) const;
  ::CGameNotifications_GetSessionDetails_Request_RequestedSession* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >&
      sessions() const;

  // optional string language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_GetSessionDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession > sessions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_GetSessionDetails_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_GetSessionDetails_Response) */ {
 public:
  inline CGameNotifications_GetSessionDetails_Response() : CGameNotifications_GetSessionDetails_Response(nullptr) {}
  virtual ~CGameNotifications_GetSessionDetails_Response();
  explicit constexpr CGameNotifications_GetSessionDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_GetSessionDetails_Response(const CGameNotifications_GetSessionDetails_Response& from);
  CGameNotifications_GetSessionDetails_Response(CGameNotifications_GetSessionDetails_Response&& from) noexcept
    : CGameNotifications_GetSessionDetails_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_GetSessionDetails_Response& operator=(const CGameNotifications_GetSessionDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_GetSessionDetails_Response& operator=(CGameNotifications_GetSessionDetails_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_GetSessionDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_GetSessionDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_GetSessionDetails_Response*>(
               &_CGameNotifications_GetSessionDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CGameNotifications_GetSessionDetails_Response& a, CGameNotifications_GetSessionDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_GetSessionDetails_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_GetSessionDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_GetSessionDetails_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Response>(nullptr);
  }

  CGameNotifications_GetSessionDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_GetSessionDetails_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_GetSessionDetails_Response& from);
  void MergeFrom(const CGameNotifications_GetSessionDetails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_GetSessionDetails_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_GetSessionDetails_Response";
  }
  protected:
  explicit CGameNotifications_GetSessionDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
  };
  // repeated .CGameNotifications_Session sessions = 1;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::CGameNotifications_Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >*
      mutable_sessions();
  private:
  const ::CGameNotifications_Session& _internal_sessions(int index) const;
  ::CGameNotifications_Session* _internal_add_sessions();
  public:
  const ::CGameNotifications_Session& sessions(int index) const;
  ::CGameNotifications_Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:CGameNotifications_GetSessionDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class GameNotificationSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameNotificationSettings) */ {
 public:
  inline GameNotificationSettings() : GameNotificationSettings(nullptr) {}
  virtual ~GameNotificationSettings();
  explicit constexpr GameNotificationSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameNotificationSettings(const GameNotificationSettings& from);
  GameNotificationSettings(GameNotificationSettings&& from) noexcept
    : GameNotificationSettings() {
    *this = ::std::move(from);
  }

  inline GameNotificationSettings& operator=(const GameNotificationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameNotificationSettings& operator=(GameNotificationSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameNotificationSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameNotificationSettings* internal_default_instance() {
    return reinterpret_cast<const GameNotificationSettings*>(
               &_GameNotificationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameNotificationSettings& a, GameNotificationSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(GameNotificationSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameNotificationSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameNotificationSettings* New() const final {
    return CreateMaybeMessage<GameNotificationSettings>(nullptr);
  }

  GameNotificationSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameNotificationSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameNotificationSettings& from);
  void MergeFrom(const GameNotificationSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameNotificationSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameNotificationSettings";
  }
  protected:
  explicit GameNotificationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kAllowNotificationsFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool allow_notifications = 2;
  bool has_allow_notifications() const;
  private:
  bool _internal_has_allow_notifications() const;
  public:
  void clear_allow_notifications();
  bool allow_notifications() const;
  void set_allow_notifications(bool value);
  private:
  bool _internal_allow_notifications() const;
  void _internal_set_allow_notifications(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GameNotificationSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool allow_notifications_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateNotificationSettings_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateNotificationSettings_Request) */ {
 public:
  inline CGameNotifications_UpdateNotificationSettings_Request() : CGameNotifications_UpdateNotificationSettings_Request(nullptr) {}
  virtual ~CGameNotifications_UpdateNotificationSettings_Request();
  explicit constexpr CGameNotifications_UpdateNotificationSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_UpdateNotificationSettings_Request(const CGameNotifications_UpdateNotificationSettings_Request& from);
  CGameNotifications_UpdateNotificationSettings_Request(CGameNotifications_UpdateNotificationSettings_Request&& from) noexcept
    : CGameNotifications_UpdateNotificationSettings_Request() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateNotificationSettings_Request& operator=(const CGameNotifications_UpdateNotificationSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_UpdateNotificationSettings_Request& operator=(CGameNotifications_UpdateNotificationSettings_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_UpdateNotificationSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_UpdateNotificationSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateNotificationSettings_Request*>(
               &_CGameNotifications_UpdateNotificationSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CGameNotifications_UpdateNotificationSettings_Request& a, CGameNotifications_UpdateNotificationSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_UpdateNotificationSettings_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_UpdateNotificationSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateNotificationSettings_Request* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Request>(nullptr);
  }

  CGameNotifications_UpdateNotificationSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateNotificationSettings_Request& from);
  void MergeFrom(const CGameNotifications_UpdateNotificationSettings_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateNotificationSettings_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_UpdateNotificationSettings_Request";
  }
  protected:
  explicit CGameNotifications_UpdateNotificationSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameNotificationSettingsFieldNumber = 1,
  };
  // repeated .GameNotificationSettings game_notification_settings = 1;
  int game_notification_settings_size() const;
  private:
  int _internal_game_notification_settings_size() const;
  public:
  void clear_game_notification_settings();
  ::GameNotificationSettings* mutable_game_notification_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameNotificationSettings >*
      mutable_game_notification_settings();
  private:
  const ::GameNotificationSettings& _internal_game_notification_settings(int index) const;
  ::GameNotificationSettings* _internal_add_game_notification_settings();
  public:
  const ::GameNotificationSettings& game_notification_settings(int index) const;
  ::GameNotificationSettings* add_game_notification_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameNotificationSettings >&
      game_notification_settings() const;

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateNotificationSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameNotificationSettings > game_notification_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_UpdateNotificationSettings_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_UpdateNotificationSettings_Response) */ {
 public:
  inline CGameNotifications_UpdateNotificationSettings_Response() : CGameNotifications_UpdateNotificationSettings_Response(nullptr) {}
  virtual ~CGameNotifications_UpdateNotificationSettings_Response();
  explicit constexpr CGameNotifications_UpdateNotificationSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_UpdateNotificationSettings_Response(const CGameNotifications_UpdateNotificationSettings_Response& from);
  CGameNotifications_UpdateNotificationSettings_Response(CGameNotifications_UpdateNotificationSettings_Response&& from) noexcept
    : CGameNotifications_UpdateNotificationSettings_Response() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_UpdateNotificationSettings_Response& operator=(const CGameNotifications_UpdateNotificationSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_UpdateNotificationSettings_Response& operator=(CGameNotifications_UpdateNotificationSettings_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_UpdateNotificationSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_UpdateNotificationSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_UpdateNotificationSettings_Response*>(
               &_CGameNotifications_UpdateNotificationSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CGameNotifications_UpdateNotificationSettings_Response& a, CGameNotifications_UpdateNotificationSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_UpdateNotificationSettings_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_UpdateNotificationSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_UpdateNotificationSettings_Response* New() const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Response>(nullptr);
  }

  CGameNotifications_UpdateNotificationSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_UpdateNotificationSettings_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_UpdateNotificationSettings_Response& from);
  void MergeFrom(const CGameNotifications_UpdateNotificationSettings_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_UpdateNotificationSettings_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_UpdateNotificationSettings_Response";
  }
  protected:
  explicit CGameNotifications_UpdateNotificationSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNotifications_UpdateNotificationSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_OnNotificationsRequested_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_OnNotificationsRequested_Notification) */ {
 public:
  inline CGameNotifications_OnNotificationsRequested_Notification() : CGameNotifications_OnNotificationsRequested_Notification(nullptr) {}
  virtual ~CGameNotifications_OnNotificationsRequested_Notification();
  explicit constexpr CGameNotifications_OnNotificationsRequested_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_OnNotificationsRequested_Notification(const CGameNotifications_OnNotificationsRequested_Notification& from);
  CGameNotifications_OnNotificationsRequested_Notification(CGameNotifications_OnNotificationsRequested_Notification&& from) noexcept
    : CGameNotifications_OnNotificationsRequested_Notification() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_OnNotificationsRequested_Notification& operator=(const CGameNotifications_OnNotificationsRequested_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_OnNotificationsRequested_Notification& operator=(CGameNotifications_OnNotificationsRequested_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_OnNotificationsRequested_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_OnNotificationsRequested_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_OnNotificationsRequested_Notification*>(
               &_CGameNotifications_OnNotificationsRequested_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CGameNotifications_OnNotificationsRequested_Notification& a, CGameNotifications_OnNotificationsRequested_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_OnNotificationsRequested_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_OnNotificationsRequested_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_OnNotificationsRequested_Notification* New() const final {
    return CreateMaybeMessage<CGameNotifications_OnNotificationsRequested_Notification>(nullptr);
  }

  CGameNotifications_OnNotificationsRequested_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_OnNotificationsRequested_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_OnNotificationsRequested_Notification& from);
  void MergeFrom(const CGameNotifications_OnNotificationsRequested_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_OnNotificationsRequested_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_OnNotificationsRequested_Notification";
  }
  protected:
  explicit CGameNotifications_OnNotificationsRequested_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_OnNotificationsRequested_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNotifications_OnUserStatusChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNotifications_OnUserStatusChanged_Notification) */ {
 public:
  inline CGameNotifications_OnUserStatusChanged_Notification() : CGameNotifications_OnUserStatusChanged_Notification(nullptr) {}
  virtual ~CGameNotifications_OnUserStatusChanged_Notification();
  explicit constexpr CGameNotifications_OnUserStatusChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNotifications_OnUserStatusChanged_Notification(const CGameNotifications_OnUserStatusChanged_Notification& from);
  CGameNotifications_OnUserStatusChanged_Notification(CGameNotifications_OnUserStatusChanged_Notification&& from) noexcept
    : CGameNotifications_OnUserStatusChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameNotifications_OnUserStatusChanged_Notification& operator=(const CGameNotifications_OnUserStatusChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNotifications_OnUserStatusChanged_Notification& operator=(CGameNotifications_OnUserStatusChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNotifications_OnUserStatusChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNotifications_OnUserStatusChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameNotifications_OnUserStatusChanged_Notification*>(
               &_CGameNotifications_OnUserStatusChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CGameNotifications_OnUserStatusChanged_Notification& a, CGameNotifications_OnUserStatusChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNotifications_OnUserStatusChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNotifications_OnUserStatusChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNotifications_OnUserStatusChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameNotifications_OnUserStatusChanged_Notification>(nullptr);
  }

  CGameNotifications_OnUserStatusChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNotifications_OnUserStatusChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNotifications_OnUserStatusChanged_Notification& from);
  void MergeFrom(const CGameNotifications_OnUserStatusChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNotifications_OnUserStatusChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNotifications_OnUserStatusChanged_Notification";
  }
  protected:
  explicit CGameNotifications_OnUserStatusChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 4,
    kSteamidFieldNumber = 1,
    kSessionidFieldNumber = 2,
    kAppidFieldNumber = 3,
    kRemovedFieldNumber = 5,
  };
  // optional .CGameNotifications_UserStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::CGameNotifications_UserStatus& status() const;
  ::CGameNotifications_UserStatus* release_status();
  ::CGameNotifications_UserStatus* mutable_status();
  void set_allocated_status(::CGameNotifications_UserStatus* status);
  private:
  const ::CGameNotifications_UserStatus& _internal_status() const;
  ::CGameNotifications_UserStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::CGameNotifications_UserStatus* status);
  ::CGameNotifications_UserStatus* unsafe_arena_release_status();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 sessionid = 2;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool removed = 5;
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNotifications_OnUserStatusChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameNotifications_UserStatus* status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool removed_;
  friend struct ::TableStruct_steammessages_5fgamenotifications_2esteamclient_2eproto;
};
// ===================================================================

class GameNotifications_Stub;

class GameNotifications : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameNotifications() {};
 public:
  virtual ~GameNotifications();

  typedef GameNotifications_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void UserCreateSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_CreateSession_Request* request,
                       ::CGameNotifications_CreateSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserDeleteSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_DeleteSession_Request* request,
                       ::CGameNotifications_DeleteSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UserUpdateSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_UpdateSession_Request* request,
                       ::CGameNotifications_UpdateSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EnumerateSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_EnumerateSessions_Request* request,
                       ::CGameNotifications_EnumerateSessions_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSessionDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_GetSessionDetails_Request* request,
                       ::CGameNotifications_GetSessionDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateNotificationSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_UpdateNotificationSettings_Request* request,
                       ::CGameNotifications_UpdateNotificationSettings_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotifications);
};

class GameNotifications_Stub : public GameNotifications {
 public:
  GameNotifications_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameNotifications_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameNotifications_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameNotifications ------------------------------------------

  void UserCreateSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_CreateSession_Request* request,
                       ::CGameNotifications_CreateSession_Response* response,
                       ::google::protobuf::Closure* done);
  void UserDeleteSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_DeleteSession_Request* request,
                       ::CGameNotifications_DeleteSession_Response* response,
                       ::google::protobuf::Closure* done);
  void UserUpdateSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_UpdateSession_Request* request,
                       ::CGameNotifications_UpdateSession_Response* response,
                       ::google::protobuf::Closure* done);
  void EnumerateSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_EnumerateSessions_Request* request,
                       ::CGameNotifications_EnumerateSessions_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSessionDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_GetSessionDetails_Request* request,
                       ::CGameNotifications_GetSessionDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateNotificationSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_UpdateNotificationSettings_Request* request,
                       ::CGameNotifications_UpdateNotificationSettings_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotifications_Stub);
};


// -------------------------------------------------------------------

class GameNotificationsClient_Stub;

class GameNotificationsClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameNotificationsClient() {};
 public:
  virtual ~GameNotificationsClient();

  typedef GameNotificationsClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void OnNotificationsRequested(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_OnNotificationsRequested_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void OnUserStatusChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_OnUserStatusChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotificationsClient);
};

class GameNotificationsClient_Stub : public GameNotificationsClient {
 public:
  GameNotificationsClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameNotificationsClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameNotificationsClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameNotificationsClient ------------------------------------------

  void OnNotificationsRequested(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_OnNotificationsRequested_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void OnUserStatusChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNotifications_OnUserStatusChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNotificationsClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameNotifications_Variable

// optional string key = 1;
inline bool CGameNotifications_Variable::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_Variable::has_key() const {
  return _internal_has_key();
}
inline void CGameNotifications_Variable::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNotifications_Variable::key() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Variable.key)
  return _internal_key();
}
inline void CGameNotifications_Variable::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Variable.key)
}
inline std::string* CGameNotifications_Variable::mutable_key() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Variable.key)
  return _internal_mutable_key();
}
inline const std::string& CGameNotifications_Variable::_internal_key() const {
  return key_.Get();
}
inline void CGameNotifications_Variable::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_Variable::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_Variable.key)
}
inline void CGameNotifications_Variable::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_Variable.key)
}
inline void CGameNotifications_Variable::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_Variable.key)
}
inline std::string* CGameNotifications_Variable::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_Variable::release_key() {
  // @@protoc_insertion_point(field_release:CGameNotifications_Variable.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_Variable::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_Variable.key)
}

// optional string value = 2;
inline bool CGameNotifications_Variable::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_Variable::has_value() const {
  return _internal_has_value();
}
inline void CGameNotifications_Variable::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameNotifications_Variable::value() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Variable.value)
  return _internal_value();
}
inline void CGameNotifications_Variable::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Variable.value)
}
inline std::string* CGameNotifications_Variable::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Variable.value)
  return _internal_mutable_value();
}
inline const std::string& CGameNotifications_Variable::_internal_value() const {
  return value_.Get();
}
inline void CGameNotifications_Variable::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_Variable::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_Variable.value)
}
inline void CGameNotifications_Variable::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_Variable.value)
}
inline void CGameNotifications_Variable::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_Variable.value)
}
inline std::string* CGameNotifications_Variable::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_Variable::release_value() {
  // @@protoc_insertion_point(field_release:CGameNotifications_Variable.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_Variable::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_Variable.value)
}

// -------------------------------------------------------------------

// CGameNotifications_LocalizedText

// optional string token = 1;
inline bool CGameNotifications_LocalizedText::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_LocalizedText::has_token() const {
  return _internal_has_token();
}
inline void CGameNotifications_LocalizedText::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNotifications_LocalizedText::token() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_LocalizedText.token)
  return _internal_token();
}
inline void CGameNotifications_LocalizedText::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_LocalizedText.token)
}
inline std::string* CGameNotifications_LocalizedText::mutable_token() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_LocalizedText.token)
  return _internal_mutable_token();
}
inline const std::string& CGameNotifications_LocalizedText::_internal_token() const {
  return token_.Get();
}
inline void CGameNotifications_LocalizedText::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_LocalizedText::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_LocalizedText.token)
}
inline void CGameNotifications_LocalizedText::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_LocalizedText.token)
}
inline void CGameNotifications_LocalizedText::set_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_LocalizedText.token)
}
inline std::string* CGameNotifications_LocalizedText::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_LocalizedText::release_token() {
  // @@protoc_insertion_point(field_release:CGameNotifications_LocalizedText.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_LocalizedText::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_LocalizedText.token)
}

// repeated .CGameNotifications_Variable variables = 2;
inline int CGameNotifications_LocalizedText::_internal_variables_size() const {
  return variables_.size();
}
inline int CGameNotifications_LocalizedText::variables_size() const {
  return _internal_variables_size();
}
inline void CGameNotifications_LocalizedText::clear_variables() {
  variables_.Clear();
}
inline ::CGameNotifications_Variable* CGameNotifications_LocalizedText::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_LocalizedText.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Variable >*
CGameNotifications_LocalizedText::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_LocalizedText.variables)
  return &variables_;
}
inline const ::CGameNotifications_Variable& CGameNotifications_LocalizedText::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::CGameNotifications_Variable& CGameNotifications_LocalizedText::variables(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_LocalizedText.variables)
  return _internal_variables(index);
}
inline ::CGameNotifications_Variable* CGameNotifications_LocalizedText::_internal_add_variables() {
  return variables_.Add();
}
inline ::CGameNotifications_Variable* CGameNotifications_LocalizedText::add_variables() {
  // @@protoc_insertion_point(field_add:CGameNotifications_LocalizedText.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Variable >&
CGameNotifications_LocalizedText::variables() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_LocalizedText.variables)
  return variables_;
}

// optional string rendered_text = 3;
inline bool CGameNotifications_LocalizedText::_internal_has_rendered_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_LocalizedText::has_rendered_text() const {
  return _internal_has_rendered_text();
}
inline void CGameNotifications_LocalizedText::clear_rendered_text() {
  rendered_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameNotifications_LocalizedText::rendered_text() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_LocalizedText.rendered_text)
  return _internal_rendered_text();
}
inline void CGameNotifications_LocalizedText::set_rendered_text(const std::string& value) {
  _internal_set_rendered_text(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_LocalizedText.rendered_text)
}
inline std::string* CGameNotifications_LocalizedText::mutable_rendered_text() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_LocalizedText.rendered_text)
  return _internal_mutable_rendered_text();
}
inline const std::string& CGameNotifications_LocalizedText::_internal_rendered_text() const {
  return rendered_text_.Get();
}
inline void CGameNotifications_LocalizedText::_internal_set_rendered_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rendered_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_LocalizedText::set_rendered_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rendered_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_LocalizedText.rendered_text)
}
inline void CGameNotifications_LocalizedText::set_rendered_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rendered_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_LocalizedText.rendered_text)
}
inline void CGameNotifications_LocalizedText::set_rendered_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rendered_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_LocalizedText.rendered_text)
}
inline std::string* CGameNotifications_LocalizedText::_internal_mutable_rendered_text() {
  _has_bits_[0] |= 0x00000002u;
  return rendered_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_LocalizedText::release_rendered_text() {
  // @@protoc_insertion_point(field_release:CGameNotifications_LocalizedText.rendered_text)
  if (!_internal_has_rendered_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rendered_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_LocalizedText::set_allocated_rendered_text(std::string* rendered_text) {
  if (rendered_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rendered_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rendered_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_LocalizedText.rendered_text)
}

// -------------------------------------------------------------------

// CGameNotifications_UserStatus

// optional fixed64 steamid = 1;
inline bool CGameNotifications_UserStatus::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNotifications_UserStatus::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameNotifications_UserStatus::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_UserStatus::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_UserStatus::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.steamid)
  return _internal_steamid();
}
inline void CGameNotifications_UserStatus::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  steamid_ = value;
}
inline void CGameNotifications_UserStatus::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_UserStatus.steamid)
}

// optional string state = 2;
inline bool CGameNotifications_UserStatus::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_UserStatus::has_state() const {
  return _internal_has_state();
}
inline void CGameNotifications_UserStatus::clear_state() {
  state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNotifications_UserStatus::state() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.state)
  return _internal_state();
}
inline void CGameNotifications_UserStatus::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_UserStatus.state)
}
inline std::string* CGameNotifications_UserStatus::mutable_state() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UserStatus.state)
  return _internal_mutable_state();
}
inline const std::string& CGameNotifications_UserStatus::_internal_state() const {
  return state_.Get();
}
inline void CGameNotifications_UserStatus::_internal_set_state(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_UserStatus::set_state(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_UserStatus.state)
}
inline void CGameNotifications_UserStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_UserStatus.state)
}
inline void CGameNotifications_UserStatus::set_state(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_UserStatus.state)
}
inline std::string* CGameNotifications_UserStatus::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_UserStatus::release_state() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UserStatus.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_UserStatus::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UserStatus.state)
}

// optional .CGameNotifications_LocalizedText title = 3;
inline bool CGameNotifications_UserStatus::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool CGameNotifications_UserStatus::has_title() const {
  return _internal_has_title();
}
inline void CGameNotifications_UserStatus::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::_internal_title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNotifications_LocalizedText&>(
      ::_CGameNotifications_LocalizedText_default_instance_);
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::title() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.title)
  return _internal_title();
}
inline void CGameNotifications_UserStatus::unsafe_arena_set_allocated_title(
    ::CGameNotifications_LocalizedText* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNotifications_UserStatus.title)
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::release_title() {
  _has_bits_[0] &= ~0x00000002u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UserStatus.title)
  _has_bits_[0] &= ~0x00000002u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UserStatus.title)
  return _internal_mutable_title();
}
inline void CGameNotifications_UserStatus::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UserStatus.title)
}

// optional .CGameNotifications_LocalizedText message = 4;
inline bool CGameNotifications_UserStatus::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CGameNotifications_UserStatus::has_message() const {
  return _internal_has_message();
}
inline void CGameNotifications_UserStatus::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::_internal_message() const {
  const ::CGameNotifications_LocalizedText* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNotifications_LocalizedText&>(
      ::_CGameNotifications_LocalizedText_default_instance_);
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UserStatus::message() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UserStatus.message)
  return _internal_message();
}
inline void CGameNotifications_UserStatus::unsafe_arena_set_allocated_message(
    ::CGameNotifications_LocalizedText* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNotifications_UserStatus.message)
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::release_message() {
  _has_bits_[0] &= ~0x00000004u;
  ::CGameNotifications_LocalizedText* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UserStatus.message)
  _has_bits_[0] &= ~0x00000004u;
  ::CGameNotifications_LocalizedText* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UserStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UserStatus.message)
  return _internal_mutable_message();
}
inline void CGameNotifications_UserStatus::set_allocated_message(::CGameNotifications_LocalizedText* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UserStatus.message)
}

// -------------------------------------------------------------------

// CGameNotifications_CreateSession_Request

// optional uint32 appid = 1;
inline bool CGameNotifications_CreateSession_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNotifications_CreateSession_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_CreateSession_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_CreateSession_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_CreateSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.appid)
  return _internal_appid();
}
inline void CGameNotifications_CreateSession_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CGameNotifications_CreateSession_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Request.appid)
}

// optional uint64 context = 2;
inline bool CGameNotifications_CreateSession_Request::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_CreateSession_Request::has_context() const {
  return _internal_has_context();
}
inline void CGameNotifications_CreateSession_Request::clear_context() {
  context_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_CreateSession_Request::_internal_context() const {
  return context_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_CreateSession_Request::context() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.context)
  return _internal_context();
}
inline void CGameNotifications_CreateSession_Request::_internal_set_context(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  context_ = value;
}
inline void CGameNotifications_CreateSession_Request::set_context(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Request.context)
}

// optional .CGameNotifications_LocalizedText title = 3;
inline bool CGameNotifications_CreateSession_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool CGameNotifications_CreateSession_Request::has_title() const {
  return _internal_has_title();
}
inline void CGameNotifications_CreateSession_Request::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_CreateSession_Request::_internal_title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNotifications_LocalizedText&>(
      ::_CGameNotifications_LocalizedText_default_instance_);
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_CreateSession_Request::title() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.title)
  return _internal_title();
}
inline void CGameNotifications_CreateSession_Request::unsafe_arena_set_allocated_title(
    ::CGameNotifications_LocalizedText* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNotifications_CreateSession_Request.title)
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::release_title() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_CreateSession_Request.title)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_CreateSession_Request::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_CreateSession_Request.title)
  return _internal_mutable_title();
}
inline void CGameNotifications_CreateSession_Request::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_CreateSession_Request.title)
}

// repeated .CGameNotifications_UserStatus users = 4;
inline int CGameNotifications_CreateSession_Request::_internal_users_size() const {
  return users_.size();
}
inline int CGameNotifications_CreateSession_Request::users_size() const {
  return _internal_users_size();
}
inline void CGameNotifications_CreateSession_Request::clear_users() {
  users_.Clear();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_CreateSession_Request.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >*
CGameNotifications_CreateSession_Request::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_CreateSession_Request.users)
  return &users_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_CreateSession_Request::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_CreateSession_Request::users(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.users)
  return _internal_users(index);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::_internal_add_users() {
  return users_.Add();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_CreateSession_Request::add_users() {
  // @@protoc_insertion_point(field_add:CGameNotifications_CreateSession_Request.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >&
CGameNotifications_CreateSession_Request::users() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_CreateSession_Request.users)
  return users_;
}

// optional fixed64 steamid = 5;
inline bool CGameNotifications_CreateSession_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNotifications_CreateSession_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameNotifications_CreateSession_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_CreateSession_Request::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_CreateSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Request.steamid)
  return _internal_steamid();
}
inline void CGameNotifications_CreateSession_Request::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CGameNotifications_CreateSession_Request::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Request.steamid)
}

// -------------------------------------------------------------------

// CGameNotifications_CreateSession_Response

// optional uint64 sessionid = 1;
inline bool CGameNotifications_CreateSession_Response::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_CreateSession_Response::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CGameNotifications_CreateSession_Response::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_CreateSession_Response::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_CreateSession_Response::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_CreateSession_Response.sessionid)
  return _internal_sessionid();
}
inline void CGameNotifications_CreateSession_Response::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sessionid_ = value;
}
inline void CGameNotifications_CreateSession_Response::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_CreateSession_Response.sessionid)
}

// -------------------------------------------------------------------

// CGameNotifications_DeleteSession_Request

// optional uint64 sessionid = 1;
inline bool CGameNotifications_DeleteSession_Request::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_DeleteSession_Request::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CGameNotifications_DeleteSession_Request::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_DeleteSession_Request::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_DeleteSession_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_DeleteSession_Request.sessionid)
  return _internal_sessionid();
}
inline void CGameNotifications_DeleteSession_Request::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sessionid_ = value;
}
inline void CGameNotifications_DeleteSession_Request::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_DeleteSession_Request.sessionid)
}

// optional uint32 appid = 2;
inline bool CGameNotifications_DeleteSession_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNotifications_DeleteSession_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_DeleteSession_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_DeleteSession_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_DeleteSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_DeleteSession_Request.appid)
  return _internal_appid();
}
inline void CGameNotifications_DeleteSession_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CGameNotifications_DeleteSession_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_DeleteSession_Request.appid)
}

// optional fixed64 steamid = 3;
inline bool CGameNotifications_DeleteSession_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_DeleteSession_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameNotifications_DeleteSession_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_DeleteSession_Request::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_DeleteSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_DeleteSession_Request.steamid)
  return _internal_steamid();
}
inline void CGameNotifications_DeleteSession_Request::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CGameNotifications_DeleteSession_Request::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_DeleteSession_Request.steamid)
}

// -------------------------------------------------------------------

// CGameNotifications_DeleteSession_Response

// -------------------------------------------------------------------

// CGameNotifications_UpdateSession_Request

// optional uint64 sessionid = 1;
inline bool CGameNotifications_UpdateSession_Request::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_UpdateSession_Request::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CGameNotifications_UpdateSession_Request::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_UpdateSession_Request::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_UpdateSession_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.sessionid)
  return _internal_sessionid();
}
inline void CGameNotifications_UpdateSession_Request::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_ = value;
}
inline void CGameNotifications_UpdateSession_Request::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_UpdateSession_Request.sessionid)
}

// optional uint32 appid = 2;
inline bool CGameNotifications_UpdateSession_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNotifications_UpdateSession_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_UpdateSession_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_UpdateSession_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_UpdateSession_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.appid)
  return _internal_appid();
}
inline void CGameNotifications_UpdateSession_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CGameNotifications_UpdateSession_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_UpdateSession_Request.appid)
}

// optional .CGameNotifications_LocalizedText title = 3;
inline bool CGameNotifications_UpdateSession_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool CGameNotifications_UpdateSession_Request::has_title() const {
  return _internal_has_title();
}
inline void CGameNotifications_UpdateSession_Request::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UpdateSession_Request::_internal_title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNotifications_LocalizedText&>(
      ::_CGameNotifications_LocalizedText_default_instance_);
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_UpdateSession_Request::title() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.title)
  return _internal_title();
}
inline void CGameNotifications_UpdateSession_Request::unsafe_arena_set_allocated_title(
    ::CGameNotifications_LocalizedText* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNotifications_UpdateSession_Request.title)
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::release_title() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_UpdateSession_Request.title)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_UpdateSession_Request::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UpdateSession_Request.title)
  return _internal_mutable_title();
}
inline void CGameNotifications_UpdateSession_Request::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_UpdateSession_Request.title)
}

// repeated .CGameNotifications_UserStatus users = 4;
inline int CGameNotifications_UpdateSession_Request::_internal_users_size() const {
  return users_.size();
}
inline int CGameNotifications_UpdateSession_Request::users_size() const {
  return _internal_users_size();
}
inline void CGameNotifications_UpdateSession_Request::clear_users() {
  users_.Clear();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UpdateSession_Request.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >*
CGameNotifications_UpdateSession_Request::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_UpdateSession_Request.users)
  return &users_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_UpdateSession_Request::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_UpdateSession_Request::users(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.users)
  return _internal_users(index);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::_internal_add_users() {
  return users_.Add();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_UpdateSession_Request::add_users() {
  // @@protoc_insertion_point(field_add:CGameNotifications_UpdateSession_Request.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >&
CGameNotifications_UpdateSession_Request::users() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_UpdateSession_Request.users)
  return users_;
}

// optional fixed64 steamid = 6;
inline bool CGameNotifications_UpdateSession_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNotifications_UpdateSession_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameNotifications_UpdateSession_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_UpdateSession_Request::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_UpdateSession_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateSession_Request.steamid)
  return _internal_steamid();
}
inline void CGameNotifications_UpdateSession_Request::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CGameNotifications_UpdateSession_Request::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_UpdateSession_Request.steamid)
}

// -------------------------------------------------------------------

// CGameNotifications_UpdateSession_Response

// -------------------------------------------------------------------

// CGameNotifications_EnumerateSessions_Request

// optional uint32 appid = 1;
inline bool CGameNotifications_EnumerateSessions_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_EnumerateSessions_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_EnumerateSessions_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_EnumerateSessions_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_EnumerateSessions_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.appid)
  return _internal_appid();
}
inline void CGameNotifications_EnumerateSessions_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CGameNotifications_EnumerateSessions_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.appid)
}

// optional bool include_all_user_messages = 3;
inline bool CGameNotifications_EnumerateSessions_Request::_internal_has_include_all_user_messages() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNotifications_EnumerateSessions_Request::has_include_all_user_messages() const {
  return _internal_has_include_all_user_messages();
}
inline void CGameNotifications_EnumerateSessions_Request::clear_include_all_user_messages() {
  include_all_user_messages_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CGameNotifications_EnumerateSessions_Request::_internal_include_all_user_messages() const {
  return include_all_user_messages_;
}
inline bool CGameNotifications_EnumerateSessions_Request::include_all_user_messages() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
  return _internal_include_all_user_messages();
}
inline void CGameNotifications_EnumerateSessions_Request::_internal_set_include_all_user_messages(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_all_user_messages_ = value;
}
inline void CGameNotifications_EnumerateSessions_Request::set_include_all_user_messages(bool value) {
  _internal_set_include_all_user_messages(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
}

// optional bool include_auth_user_message = 4;
inline bool CGameNotifications_EnumerateSessions_Request::_internal_has_include_auth_user_message() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNotifications_EnumerateSessions_Request::has_include_auth_user_message() const {
  return _internal_has_include_auth_user_message();
}
inline void CGameNotifications_EnumerateSessions_Request::clear_include_auth_user_message() {
  include_auth_user_message_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CGameNotifications_EnumerateSessions_Request::_internal_include_auth_user_message() const {
  return include_auth_user_message_;
}
inline bool CGameNotifications_EnumerateSessions_Request::include_auth_user_message() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
  return _internal_include_auth_user_message();
}
inline void CGameNotifications_EnumerateSessions_Request::_internal_set_include_auth_user_message(bool value) {
  _has_bits_[0] |= 0x00000008u;
  include_auth_user_message_ = value;
}
inline void CGameNotifications_EnumerateSessions_Request::set_include_auth_user_message(bool value) {
  _internal_set_include_auth_user_message(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
}

// optional string language = 5;
inline bool CGameNotifications_EnumerateSessions_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_EnumerateSessions_Request::has_language() const {
  return _internal_has_language();
}
inline void CGameNotifications_EnumerateSessions_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNotifications_EnumerateSessions_Request::language() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Request.language)
  return _internal_language();
}
inline void CGameNotifications_EnumerateSessions_Request::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_EnumerateSessions_Request.language)
}
inline std::string* CGameNotifications_EnumerateSessions_Request::mutable_language() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_EnumerateSessions_Request.language)
  return _internal_mutable_language();
}
inline const std::string& CGameNotifications_EnumerateSessions_Request::_internal_language() const {
  return language_.Get();
}
inline void CGameNotifications_EnumerateSessions_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_EnumerateSessions_Request::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_EnumerateSessions_Request.language)
}
inline void CGameNotifications_EnumerateSessions_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_EnumerateSessions_Request.language)
}
inline void CGameNotifications_EnumerateSessions_Request::set_language(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_EnumerateSessions_Request.language)
}
inline std::string* CGameNotifications_EnumerateSessions_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_EnumerateSessions_Request::release_language() {
  // @@protoc_insertion_point(field_release:CGameNotifications_EnumerateSessions_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_EnumerateSessions_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_EnumerateSessions_Request.language)
}

// -------------------------------------------------------------------

// CGameNotifications_Session

// optional uint64 sessionid = 1;
inline bool CGameNotifications_Session::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_Session::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CGameNotifications_Session::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_Session::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_Session::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.sessionid)
  return _internal_sessionid();
}
inline void CGameNotifications_Session::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sessionid_ = value;
}
inline void CGameNotifications_Session::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.sessionid)
}

// optional uint64 appid = 2;
inline bool CGameNotifications_Session::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNotifications_Session::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_Session::clear_appid() {
  appid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_Session::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_Session::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.appid)
  return _internal_appid();
}
inline void CGameNotifications_Session::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CGameNotifications_Session::set_appid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.appid)
}

// optional uint64 context = 3;
inline bool CGameNotifications_Session::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNotifications_Session::has_context() const {
  return _internal_has_context();
}
inline void CGameNotifications_Session::clear_context() {
  context_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_Session::_internal_context() const {
  return context_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_Session::context() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.context)
  return _internal_context();
}
inline void CGameNotifications_Session::_internal_set_context(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  context_ = value;
}
inline void CGameNotifications_Session::set_context(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.context)
}

// optional .CGameNotifications_LocalizedText title = 4;
inline bool CGameNotifications_Session::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool CGameNotifications_Session::has_title() const {
  return _internal_has_title();
}
inline void CGameNotifications_Session::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_Session::_internal_title() const {
  const ::CGameNotifications_LocalizedText* p = title_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNotifications_LocalizedText&>(
      ::_CGameNotifications_LocalizedText_default_instance_);
}
inline const ::CGameNotifications_LocalizedText& CGameNotifications_Session::title() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.title)
  return _internal_title();
}
inline void CGameNotifications_Session::unsafe_arena_set_allocated_title(
    ::CGameNotifications_LocalizedText* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNotifications_Session.title)
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_Session::release_title() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_Session::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:CGameNotifications_Session.title)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_LocalizedText* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_Session::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameNotifications_LocalizedText>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::CGameNotifications_LocalizedText* CGameNotifications_Session::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Session.title)
  return _internal_mutable_title();
}
inline void CGameNotifications_Session::set_allocated_title(::CGameNotifications_LocalizedText* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_Session.title)
}

// optional uint32 time_created = 5;
inline bool CGameNotifications_Session::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameNotifications_Session::has_time_created() const {
  return _internal_has_time_created();
}
inline void CGameNotifications_Session::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_Session::_internal_time_created() const {
  return time_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_Session::time_created() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.time_created)
  return _internal_time_created();
}
inline void CGameNotifications_Session::_internal_set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  time_created_ = value;
}
inline void CGameNotifications_Session::set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.time_created)
}

// optional uint32 time_updated = 6;
inline bool CGameNotifications_Session::_internal_has_time_updated() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameNotifications_Session::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void CGameNotifications_Session::clear_time_updated() {
  time_updated_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_Session::_internal_time_updated() const {
  return time_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_Session::time_updated() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.time_updated)
  return _internal_time_updated();
}
inline void CGameNotifications_Session::_internal_set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  time_updated_ = value;
}
inline void CGameNotifications_Session::set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_Session.time_updated)
}

// repeated .CGameNotifications_UserStatus user_status = 7;
inline int CGameNotifications_Session::_internal_user_status_size() const {
  return user_status_.size();
}
inline int CGameNotifications_Session::user_status_size() const {
  return _internal_user_status_size();
}
inline void CGameNotifications_Session::clear_user_status() {
  user_status_.Clear();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_Session::mutable_user_status(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_Session.user_status)
  return user_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >*
CGameNotifications_Session::mutable_user_status() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_Session.user_status)
  return &user_status_;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_Session::_internal_user_status(int index) const {
  return user_status_.Get(index);
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_Session::user_status(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_Session.user_status)
  return _internal_user_status(index);
}
inline ::CGameNotifications_UserStatus* CGameNotifications_Session::_internal_add_user_status() {
  return user_status_.Add();
}
inline ::CGameNotifications_UserStatus* CGameNotifications_Session::add_user_status() {
  // @@protoc_insertion_point(field_add:CGameNotifications_Session.user_status)
  return _internal_add_user_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_UserStatus >&
CGameNotifications_Session::user_status() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_Session.user_status)
  return user_status_;
}

// -------------------------------------------------------------------

// CGameNotifications_EnumerateSessions_Response

// repeated .CGameNotifications_Session sessions = 1;
inline int CGameNotifications_EnumerateSessions_Response::_internal_sessions_size() const {
  return sessions_.size();
}
inline int CGameNotifications_EnumerateSessions_Response::sessions_size() const {
  return _internal_sessions_size();
}
inline void CGameNotifications_EnumerateSessions_Response::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >*
CGameNotifications_EnumerateSessions_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_EnumerateSessions_Response.sessions)
  return &sessions_;
}
inline const ::CGameNotifications_Session& CGameNotifications_EnumerateSessions_Response::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::CGameNotifications_Session& CGameNotifications_EnumerateSessions_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_EnumerateSessions_Response.sessions)
  return _internal_sessions(index);
}
inline ::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::CGameNotifications_Session* CGameNotifications_EnumerateSessions_Response::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameNotifications_EnumerateSessions_Response.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >&
CGameNotifications_EnumerateSessions_Response::sessions() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_EnumerateSessions_Response.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// CGameNotifications_GetSessionDetails_Request_RequestedSession

// optional uint64 sessionid = 1;
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_GetSessionDetails_Request_RequestedSession::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_GetSessionDetails_Request_RequestedSession::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
  return _internal_sessionid();
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sessionid_ = value;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
}

// optional bool include_auth_user_message = 3;
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::_internal_has_include_auth_user_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::has_include_auth_user_message() const {
  return _internal_has_include_auth_user_message();
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::clear_include_auth_user_message() {
  include_auth_user_message_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::_internal_include_auth_user_message() const {
  return include_auth_user_message_;
}
inline bool CGameNotifications_GetSessionDetails_Request_RequestedSession::include_auth_user_message() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
  return _internal_include_auth_user_message();
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::_internal_set_include_auth_user_message(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_auth_user_message_ = value;
}
inline void CGameNotifications_GetSessionDetails_Request_RequestedSession::set_include_auth_user_message(bool value) {
  _internal_set_include_auth_user_message(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
}

// -------------------------------------------------------------------

// CGameNotifications_GetSessionDetails_Request

// repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;
inline int CGameNotifications_GetSessionDetails_Request::_internal_sessions_size() const {
  return sessions_.size();
}
inline int CGameNotifications_GetSessionDetails_Request::sessions_size() const {
  return _internal_sessions_size();
}
inline void CGameNotifications_GetSessionDetails_Request::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >*
CGameNotifications_GetSessionDetails_Request::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_GetSessionDetails_Request.sessions)
  return &sessions_;
}
inline const ::CGameNotifications_GetSessionDetails_Request_RequestedSession& CGameNotifications_GetSessionDetails_Request::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::CGameNotifications_GetSessionDetails_Request_RequestedSession& CGameNotifications_GetSessionDetails_Request::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.sessions)
  return _internal_sessions(index);
}
inline ::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::CGameNotifications_GetSessionDetails_Request_RequestedSession* CGameNotifications_GetSessionDetails_Request::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameNotifications_GetSessionDetails_Request.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_GetSessionDetails_Request_RequestedSession >&
CGameNotifications_GetSessionDetails_Request::sessions() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_GetSessionDetails_Request.sessions)
  return sessions_;
}

// optional uint32 appid = 2;
inline bool CGameNotifications_GetSessionDetails_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_GetSessionDetails_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_GetSessionDetails_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_GetSessionDetails_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_GetSessionDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.appid)
  return _internal_appid();
}
inline void CGameNotifications_GetSessionDetails_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CGameNotifications_GetSessionDetails_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.appid)
}

// optional string language = 3;
inline bool CGameNotifications_GetSessionDetails_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_GetSessionDetails_Request::has_language() const {
  return _internal_has_language();
}
inline void CGameNotifications_GetSessionDetails_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNotifications_GetSessionDetails_Request::language() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Request.language)
  return _internal_language();
}
inline void CGameNotifications_GetSessionDetails_Request::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_GetSessionDetails_Request.language)
}
inline std::string* CGameNotifications_GetSessionDetails_Request::mutable_language() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_GetSessionDetails_Request.language)
  return _internal_mutable_language();
}
inline const std::string& CGameNotifications_GetSessionDetails_Request::_internal_language() const {
  return language_.Get();
}
inline void CGameNotifications_GetSessionDetails_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNotifications_GetSessionDetails_Request::set_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNotifications_GetSessionDetails_Request.language)
}
inline void CGameNotifications_GetSessionDetails_Request::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNotifications_GetSessionDetails_Request.language)
}
inline void CGameNotifications_GetSessionDetails_Request::set_language(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNotifications_GetSessionDetails_Request.language)
}
inline std::string* CGameNotifications_GetSessionDetails_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNotifications_GetSessionDetails_Request::release_language() {
  // @@protoc_insertion_point(field_release:CGameNotifications_GetSessionDetails_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNotifications_GetSessionDetails_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_GetSessionDetails_Request.language)
}

// -------------------------------------------------------------------

// CGameNotifications_GetSessionDetails_Response

// repeated .CGameNotifications_Session sessions = 1;
inline int CGameNotifications_GetSessionDetails_Response::_internal_sessions_size() const {
  return sessions_.size();
}
inline int CGameNotifications_GetSessionDetails_Response::sessions_size() const {
  return _internal_sessions_size();
}
inline void CGameNotifications_GetSessionDetails_Response::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >*
CGameNotifications_GetSessionDetails_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_GetSessionDetails_Response.sessions)
  return &sessions_;
}
inline const ::CGameNotifications_Session& CGameNotifications_GetSessionDetails_Response::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::CGameNotifications_Session& CGameNotifications_GetSessionDetails_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_GetSessionDetails_Response.sessions)
  return _internal_sessions(index);
}
inline ::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::CGameNotifications_Session* CGameNotifications_GetSessionDetails_Response::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameNotifications_GetSessionDetails_Response.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNotifications_Session >&
CGameNotifications_GetSessionDetails_Response::sessions() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_GetSessionDetails_Response.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// GameNotificationSettings

// optional uint32 appid = 1;
inline bool GameNotificationSettings::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameNotificationSettings::has_appid() const {
  return _internal_has_appid();
}
inline void GameNotificationSettings::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameNotificationSettings::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameNotificationSettings::appid() const {
  // @@protoc_insertion_point(field_get:GameNotificationSettings.appid)
  return _internal_appid();
}
inline void GameNotificationSettings::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void GameNotificationSettings::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:GameNotificationSettings.appid)
}

// optional bool allow_notifications = 2;
inline bool GameNotificationSettings::_internal_has_allow_notifications() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameNotificationSettings::has_allow_notifications() const {
  return _internal_has_allow_notifications();
}
inline void GameNotificationSettings::clear_allow_notifications() {
  allow_notifications_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GameNotificationSettings::_internal_allow_notifications() const {
  return allow_notifications_;
}
inline bool GameNotificationSettings::allow_notifications() const {
  // @@protoc_insertion_point(field_get:GameNotificationSettings.allow_notifications)
  return _internal_allow_notifications();
}
inline void GameNotificationSettings::_internal_set_allow_notifications(bool value) {
  _has_bits_[0] |= 0x00000002u;
  allow_notifications_ = value;
}
inline void GameNotificationSettings::set_allow_notifications(bool value) {
  _internal_set_allow_notifications(value);
  // @@protoc_insertion_point(field_set:GameNotificationSettings.allow_notifications)
}

// -------------------------------------------------------------------

// CGameNotifications_UpdateNotificationSettings_Request

// repeated .GameNotificationSettings game_notification_settings = 1;
inline int CGameNotifications_UpdateNotificationSettings_Request::_internal_game_notification_settings_size() const {
  return game_notification_settings_.size();
}
inline int CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings_size() const {
  return _internal_game_notification_settings_size();
}
inline void CGameNotifications_UpdateNotificationSettings_Request::clear_game_notification_settings() {
  game_notification_settings_.Clear();
}
inline ::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::mutable_game_notification_settings(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameNotificationSettings >*
CGameNotifications_UpdateNotificationSettings_Request::mutable_game_notification_settings() {
  // @@protoc_insertion_point(field_mutable_list:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return &game_notification_settings_;
}
inline const ::GameNotificationSettings& CGameNotifications_UpdateNotificationSettings_Request::_internal_game_notification_settings(int index) const {
  return game_notification_settings_.Get(index);
}
inline const ::GameNotificationSettings& CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings(int index) const {
  // @@protoc_insertion_point(field_get:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return _internal_game_notification_settings(index);
}
inline ::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::_internal_add_game_notification_settings() {
  return game_notification_settings_.Add();
}
inline ::GameNotificationSettings* CGameNotifications_UpdateNotificationSettings_Request::add_game_notification_settings() {
  // @@protoc_insertion_point(field_add:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return _internal_add_game_notification_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameNotificationSettings >&
CGameNotifications_UpdateNotificationSettings_Request::game_notification_settings() const {
  // @@protoc_insertion_point(field_list:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
  return game_notification_settings_;
}

// -------------------------------------------------------------------

// CGameNotifications_UpdateNotificationSettings_Response

// -------------------------------------------------------------------

// CGameNotifications_OnNotificationsRequested_Notification

// optional fixed64 steamid = 1;
inline bool CGameNotifications_OnNotificationsRequested_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNotifications_OnNotificationsRequested_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameNotifications_OnNotificationsRequested_Notification::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_OnNotificationsRequested_Notification::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_OnNotificationsRequested_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnNotificationsRequested_Notification.steamid)
  return _internal_steamid();
}
inline void CGameNotifications_OnNotificationsRequested_Notification::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_OnNotificationsRequested_Notification.steamid)
}

// optional uint32 appid = 2;
inline bool CGameNotifications_OnNotificationsRequested_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_OnNotificationsRequested_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_OnNotificationsRequested_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_OnNotificationsRequested_Notification::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_OnNotificationsRequested_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnNotificationsRequested_Notification.appid)
  return _internal_appid();
}
inline void CGameNotifications_OnNotificationsRequested_Notification::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CGameNotifications_OnNotificationsRequested_Notification::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_OnNotificationsRequested_Notification.appid)
}

// -------------------------------------------------------------------

// CGameNotifications_OnUserStatusChanged_Notification

// optional fixed64 steamid = 1;
inline bool CGameNotifications_OnUserStatusChanged_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_OnUserStatusChanged_Notification::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_OnUserStatusChanged_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.steamid)
  return _internal_steamid();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.steamid)
}

// optional uint64 sessionid = 2;
inline bool CGameNotifications_OnUserStatusChanged_Notification::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_sessionid() {
  sessionid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_OnUserStatusChanged_Notification::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNotifications_OnUserStatusChanged_Notification::sessionid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
  return _internal_sessionid();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sessionid_ = value;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
}

// optional uint32 appid = 3;
inline bool CGameNotifications_OnUserStatusChanged_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_OnUserStatusChanged_Notification::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNotifications_OnUserStatusChanged_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.appid)
  return _internal_appid();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.appid)
}

// optional .CGameNotifications_UserStatus status = 4;
inline bool CGameNotifications_OnUserStatusChanged_Notification::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_status() const {
  return _internal_has_status();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_OnUserStatusChanged_Notification::_internal_status() const {
  const ::CGameNotifications_UserStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNotifications_UserStatus&>(
      ::_CGameNotifications_UserStatus_default_instance_);
}
inline const ::CGameNotifications_UserStatus& CGameNotifications_OnUserStatusChanged_Notification::status() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.status)
  return _internal_status();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::unsafe_arena_set_allocated_status(
    ::CGameNotifications_UserStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNotifications_OnUserStatusChanged_Notification.status)
}
inline ::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_UserStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:CGameNotifications_OnUserStatusChanged_Notification.status)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameNotifications_UserStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameNotifications_UserStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::CGameNotifications_UserStatus* CGameNotifications_OnUserStatusChanged_Notification::mutable_status() {
  // @@protoc_insertion_point(field_mutable:CGameNotifications_OnUserStatusChanged_Notification.status)
  return _internal_mutable_status();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_allocated_status(::CGameNotifications_UserStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:CGameNotifications_OnUserStatusChanged_Notification.status)
}

// optional bool removed = 5;
inline bool CGameNotifications_OnUserStatusChanged_Notification::_internal_has_removed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::has_removed() const {
  return _internal_has_removed();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::clear_removed() {
  removed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::_internal_removed() const {
  return removed_;
}
inline bool CGameNotifications_OnUserStatusChanged_Notification::removed() const {
  // @@protoc_insertion_point(field_get:CGameNotifications_OnUserStatusChanged_Notification.removed)
  return _internal_removed();
}
inline void CGameNotifications_OnUserStatusChanged_Notification::_internal_set_removed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  removed_ = value;
}
inline void CGameNotifications_OnUserStatusChanged_Notification::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:CGameNotifications_OnUserStatusChanged_Notification.removed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenotifications_2esteamclient_2eproto
