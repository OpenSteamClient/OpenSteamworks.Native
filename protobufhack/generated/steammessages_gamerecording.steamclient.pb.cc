// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamerecording.steamclient.proto

#include "steammessages_gamerecording.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CVideoManagerClipID::CVideoManagerClipID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manifest_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , video_manager_clip_id_(PROTOBUF_ULONGLONG(0))
  , video_manager_video_id_(PROTOBUF_ULONGLONG(0))
  , server_timeline_id_(PROTOBUF_ULONGLONG(0))
  , duration_ms_(0u)
  , start_offset_ms_(0u){}
struct CVideoManagerClipIDDefaultTypeInternal {
  constexpr CVideoManagerClipIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideoManagerClipIDDefaultTypeInternal() {}
  union {
    CVideoManagerClipID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideoManagerClipIDDefaultTypeInternal _CVideoManagerClipID_default_instance_;
constexpr CGameRecordingClip::CGameRecordingClip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_ids_()
  , clip_id_(PROTOBUF_ULONGLONG(0))
  , gameid_(PROTOBUF_ULONGLONG(0))
  , total_file_size_bytes_(PROTOBUF_ULONGLONG(0))
  , date_recorded_(0u)
  , upload_complete_(false)
  , duration_ms_(0u)
  , owner_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecordingClipDefaultTypeInternal {
  constexpr CGameRecordingClipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecordingClipDefaultTypeInternal() {}
  union {
    CGameRecordingClip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecordingClipDefaultTypeInternal _CGameRecordingClip_default_instance_;
constexpr CGameRecording_CreateShareClip_Request::CGameRecording_CreateShareClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_def_()
  , clip_(nullptr){}
struct CGameRecording_CreateShareClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_CreateShareClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_CreateShareClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_CreateShareClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_CreateShareClip_RequestDefaultTypeInternal _CGameRecording_CreateShareClip_Request_default_instance_;
constexpr CGameRecording_CreateShareClip_Response::CGameRecording_CreateShareClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_(nullptr){}
struct CGameRecording_CreateShareClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_CreateShareClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_CreateShareClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_CreateShareClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_CreateShareClip_ResponseDefaultTypeInternal _CGameRecording_CreateShareClip_Response_default_instance_;
constexpr CGameRecording_DeleteSharedClip_Request::CGameRecording_DeleteSharedClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_DeleteSharedClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_DeleteSharedClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeleteSharedClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_DeleteSharedClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeleteSharedClip_RequestDefaultTypeInternal _CGameRecording_DeleteSharedClip_Request_default_instance_;
constexpr CGameRecording_DeleteSharedClip_Response::CGameRecording_DeleteSharedClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameRecording_DeleteSharedClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_DeleteSharedClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_DeleteSharedClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_DeleteSharedClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_DeleteSharedClip_ResponseDefaultTypeInternal _CGameRecording_DeleteSharedClip_Response_default_instance_;
constexpr CGameRecording_GetSingleSharedClip_Request::CGameRecording_GetSingleSharedClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(PROTOBUF_ULONGLONG(0)){}
struct CGameRecording_GetSingleSharedClip_RequestDefaultTypeInternal {
  constexpr CGameRecording_GetSingleSharedClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetSingleSharedClip_RequestDefaultTypeInternal() {}
  union {
    CGameRecording_GetSingleSharedClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetSingleSharedClip_RequestDefaultTypeInternal _CGameRecording_GetSingleSharedClip_Request_default_instance_;
constexpr CGameRecording_GetSingleSharedClip_Response::CGameRecording_GetSingleSharedClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_(nullptr){}
struct CGameRecording_GetSingleSharedClip_ResponseDefaultTypeInternal {
  constexpr CGameRecording_GetSingleSharedClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_GetSingleSharedClip_ResponseDefaultTypeInternal() {}
  union {
    CGameRecording_GetSingleSharedClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_GetSingleSharedClip_ResponseDefaultTypeInternal _CGameRecording_GetSingleSharedClip_Response_default_instance_;
constexpr CVideo_BeginGameRecordingSegmentsUpload_Request::CVideo_BeginGameRecordingSegmentsUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_to_store_()
  , component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recording_id_(PROTOBUF_ULONGLONG(0)){}
struct CVideo_BeginGameRecordingSegmentsUpload_RequestDefaultTypeInternal {
  constexpr CVideo_BeginGameRecordingSegmentsUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_BeginGameRecordingSegmentsUpload_RequestDefaultTypeInternal() {}
  union {
    CVideo_BeginGameRecordingSegmentsUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_BeginGameRecordingSegmentsUpload_RequestDefaultTypeInternal _CVideo_BeginGameRecordingSegmentsUpload_Request_default_instance_;
constexpr CVideo_BeginGameRecordingSegmentsUpload_Response::CVideo_BeginGameRecordingSegmentsUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_needed_()
  , call_again_(false){}
struct CVideo_BeginGameRecordingSegmentsUpload_ResponseDefaultTypeInternal {
  constexpr CVideo_BeginGameRecordingSegmentsUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_BeginGameRecordingSegmentsUpload_ResponseDefaultTypeInternal() {}
  union {
    CVideo_BeginGameRecordingSegmentsUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_BeginGameRecordingSegmentsUpload_ResponseDefaultTypeInternal _CVideo_BeginGameRecordingSegmentsUpload_Response_default_instance_;
constexpr CVideo_CommitGameRecordingSegmentsUpload_Request::CVideo_CommitGameRecordingSegmentsUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recording_id_(PROTOBUF_ULONGLONG(0))
  , first_segment_number_(0u)
  , num_segments_(0u)
  , upload_result_(0u){}
struct CVideo_CommitGameRecordingSegmentsUpload_RequestDefaultTypeInternal {
  constexpr CVideo_CommitGameRecordingSegmentsUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_CommitGameRecordingSegmentsUpload_RequestDefaultTypeInternal() {}
  union {
    CVideo_CommitGameRecordingSegmentsUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_CommitGameRecordingSegmentsUpload_RequestDefaultTypeInternal _CVideo_CommitGameRecordingSegmentsUpload_Request_default_instance_;
constexpr CVideo_CommitGameRecordingSegmentsUpload_Response::CVideo_CommitGameRecordingSegmentsUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CVideo_CommitGameRecordingSegmentsUpload_ResponseDefaultTypeInternal {
  constexpr CVideo_CommitGameRecordingSegmentsUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_CommitGameRecordingSegmentsUpload_ResponseDefaultTypeInternal() {}
  union {
    CVideo_CommitGameRecordingSegmentsUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_CommitGameRecordingSegmentsUpload_ResponseDefaultTypeInternal _CVideo_CommitGameRecordingSegmentsUpload_Response_default_instance_;
constexpr CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recording_id_(PROTOBUF_ULONGLONG(0)){}
struct CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_RequestDefaultTypeInternal {
  constexpr CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_RequestDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_RequestDefaultTypeInternal _CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request_default_instance_;
constexpr CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_needed_(){}
struct CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_ResponseDefaultTypeInternal {
  constexpr CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_ResponseDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_ResponseDefaultTypeInternal _CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response_default_instance_;
constexpr CVideo_GameRecordingCommitSegmentUploads_Request::CVideo_GameRecordingCommitSegmentUploads_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_uploaded_()
  , recording_id_(PROTOBUF_ULONGLONG(0)){}
struct CVideo_GameRecordingCommitSegmentUploads_RequestDefaultTypeInternal {
  constexpr CVideo_GameRecordingCommitSegmentUploads_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingCommitSegmentUploads_RequestDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingCommitSegmentUploads_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingCommitSegmentUploads_RequestDefaultTypeInternal _CVideo_GameRecordingCommitSegmentUploads_Request_default_instance_;
constexpr CVideo_GameRecordingCommitSegmentUploads_Response::CVideo_GameRecordingCommitSegmentUploads_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CVideo_GameRecordingCommitSegmentUploads_ResponseDefaultTypeInternal {
  constexpr CVideo_GameRecordingCommitSegmentUploads_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameRecordingCommitSegmentUploads_ResponseDefaultTypeInternal() {}
  union {
    CVideo_GameRecordingCommitSegmentUploads_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameRecordingCommitSegmentUploads_ResponseDefaultTypeInternal _CVideo_GameRecordingCommitSegmentUploads_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fgamerecording_2esteamclient_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, video_manager_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, video_manager_video_id_),
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, server_timeline_id_),
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, manifest_url_),
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CVideoManagerClipID, start_offset_ms_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, gameid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, date_recorded_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, total_file_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, video_ids_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, owner_steamid_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, upload_complete_),
  PROTOBUF_FIELD_OFFSET(::CGameRecordingClip, duration_ms_),
  0,
  1,
  3,
  2,
  ~0u,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Request, clip_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Request, video_def_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_CreateShareClip_Response, clip_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteSharedClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteSharedClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteSharedClip_Request, clip_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_DeleteSharedClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetSingleSharedClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetSingleSharedClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetSingleSharedClip_Request, clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetSingleSharedClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetSingleSharedClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_GetSingleSharedClip_Response, clip_),
  0,
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Request, recording_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Request, component_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Request, representation_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Request, segments_to_store_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Response, segments_needed_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameRecordingSegmentsUpload_Response, call_again_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, recording_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, component_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, representation_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, first_segment_number_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, num_segments_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Request, upload_result_),
  2,
  0,
  1,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameRecordingSegmentsUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request, recording_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response, segments_needed_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingCommitSegmentUploads_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingCommitSegmentUploads_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingCommitSegmentUploads_Request, recording_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingCommitSegmentUploads_Request, segments_uploaded_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameRecordingCommitSegmentUploads_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CVideoManagerClipID)},
  { 17, 30, sizeof(::CGameRecordingClip)},
  { 38, 45, sizeof(::CGameRecording_CreateShareClip_Request)},
  { 47, 53, sizeof(::CGameRecording_CreateShareClip_Response)},
  { 54, 60, sizeof(::CGameRecording_DeleteSharedClip_Request)},
  { 61, -1, sizeof(::CGameRecording_DeleteSharedClip_Response)},
  { 66, 72, sizeof(::CGameRecording_GetSingleSharedClip_Request)},
  { 73, 79, sizeof(::CGameRecording_GetSingleSharedClip_Response)},
  { 80, 89, sizeof(::CVideo_BeginGameRecordingSegmentsUpload_Request)},
  { 93, 100, sizeof(::CVideo_BeginGameRecordingSegmentsUpload_Response)},
  { 102, 113, sizeof(::CVideo_CommitGameRecordingSegmentsUpload_Request)},
  { 119, -1, sizeof(::CVideo_CommitGameRecordingSegmentsUpload_Response)},
  { 124, 130, sizeof(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)},
  { 131, -1, sizeof(::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)},
  { 137, 144, sizeof(::CVideo_GameRecordingCommitSegmentUploads_Request)},
  { 146, -1, sizeof(::CVideo_GameRecordingCommitSegmentUploads_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideoManagerClipID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecordingClip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_CreateShareClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_CreateShareClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeleteSharedClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_DeleteSharedClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetSingleSharedClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_GetSingleSharedClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_BeginGameRecordingSegmentsUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_BeginGameRecordingSegmentsUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_CommitGameRecordingSegmentsUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_CommitGameRecordingSegmentsUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingCommitSegmentUploads_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameRecordingCommitSegmentUploads_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fgamerecording_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-steammessages_gamerecording.steamclien"
  "t.proto\032 google/protobuf/descriptor.prot"
  "o\032\030steammessages_base.proto\032,steammessag"
  "es_unified_base.steamclient.proto\032&steam"
  "messages_clientserver_video.proto\"\264\001\n\023CV"
  "ideoManagerClipID\022\035\n\025video_manager_clip_"
  "id\030\001 \001(\006\022\036\n\026video_manager_video_id\030\002 \001(\006"
  "\022\032\n\022server_timeline_id\030\003 \001(\006\022\024\n\014manifest"
  "_url\030\004 \001(\t\022\023\n\013duration_ms\030\005 \001(\r\022\027\n\017start"
  "_offset_ms\030\006 \001(\r\"\331\001\n\022CGameRecordingClip\022"
  "\017\n\007clip_id\030\001 \001(\006\022\016\n\006gameid\030\002 \001(\004\022\025\n\rdate"
  "_recorded\030\004 \001(\r\022\035\n\025total_file_size_bytes"
  "\030\007 \001(\004\022\'\n\tvideo_ids\030\t \003(\0132\024.CVideoManage"
  "rClipID\022\025\n\rowner_steamid\030\n \001(\006\022\027\n\017upload"
  "_complete\030\013 \001(\010\022\023\n\013duration_ms\030\014 \001(\r\"z\n&"
  "CGameRecording_CreateShareClip_Request\022!"
  "\n\004clip\030\002 \001(\0132\023.CGameRecordingClip\022-\n\tvid"
  "eo_def\030\003 \003(\0132\032.CMsgVideoGameRecordingDef"
  "\"L\n\'CGameRecording_CreateShareClip_Respo"
  "nse\022!\n\004clip\030\001 \001(\0132\023.CGameRecordingClip\":"
  "\n\'CGameRecording_DeleteSharedClip_Reques"
  "t\022\017\n\007clip_id\030\002 \001(\006\"*\n(CGameRecording_Del"
  "eteSharedClip_Response\"=\n*CGameRecording"
  "_GetSingleSharedClip_Request\022\017\n\007clip_id\030"
  "\002 \001(\006\"P\n+CGameRecording_GetSingleSharedC"
  "lip_Response\022!\n\004clip\030\001 \001(\0132\023.CGameRecord"
  "ingClip\"\271\001\n/CVideo_BeginGameRecordingSeg"
  "mentsUpload_Request\022\024\n\014recording_id\030\001 \001("
  "\004\022\026\n\016component_name\030\002 \001(\t\022\033\n\023representat"
  "ion_name\030\003 \001(\t\022;\n\021segments_to_store\030\004 \003("
  "\0132 .CVideo_GameRecordingSegmentInfo\"\207\001\n0"
  "CVideo_BeginGameRecordingSegmentsUpload_"
  "Response\022\?\n\017segments_needed\030\001 \003(\0132&.CVid"
  "eo_GameRecordingSegmentUploadInfo\022\022\n\ncal"
  "l_again\030\002 \001(\010\"\310\001\n0CVideo_CommitGameRecor"
  "dingSegmentsUpload_Request\022\024\n\014recording_"
  "id\030\001 \001(\004\022\026\n\016component_name\030\002 \001(\t\022\033\n\023repr"
  "esentation_name\030\003 \001(\t\022\034\n\024first_segment_n"
  "umber\030\004 \001(\r\022\024\n\014num_segments\030\005 \001(\r\022\025\n\rupl"
  "oad_result\030\006 \001(\r\"3\n1CVideo_CommitGameRec"
  "ordingSegmentsUpload_Response\"R\n:CVideo_"
  "GameRecordingGetNextBatchOfSegmentsToUpl"
  "oad_Request\022\024\n\014recording_id\030\001 \001(\004\"~\n;CVi"
  "deo_GameRecordingGetNextBatchOfSegmentsT"
  "oUpload_Response\022\?\n\017segments_needed\030\001 \003("
  "\0132&.CVideo_GameRecordingSegmentUploadInf"
  "o\"\205\001\n0CVideo_GameRecordingCommitSegmentU"
  "ploads_Request\022\024\n\014recording_id\030\001 \001(\004\022;\n\021"
  "segments_uploaded\030\002 \003(\0132 .CVideo_GameRec"
  "ordingSegmentInfo\"3\n1CVideo_GameRecordin"
  "gCommitSegmentUploads_Response2\324\002\n\021GameR"
  "ecordingClip\022d\n\017CreateShareClip\022\'.CGameR"
  "ecording_CreateShareClip_Request\032(.CGame"
  "Recording_CreateShareClip_Response\022g\n\020De"
  "leteSharedClip\022(.CGameRecording_DeleteSh"
  "aredClip_Request\032).CGameRecording_Delete"
  "SharedClip_Response\022p\n\023GetSingleSharedCl"
  "ip\022+.CGameRecording_GetSingleSharedClip_"
  "Request\032,.CGameRecording_GetSingleShared"
  "Clip_Response2\277\004\n\tVideoClip\022\207\001\n BeginGam"
  "eRecordingSegmentsUpload\0220.CVideo_BeginG"
  "ameRecordingSegmentsUpload_Request\0321.CVi"
  "deo_BeginGameRecordingSegmentsUpload_Res"
  "ponse\022\212\001\n!CommitGameRecordingSegmentsUpl"
  "oad\0221.CVideo_CommitGameRecordingSegments"
  "Upload_Request\0322.CVideo_CommitGameRecord"
  "ingSegmentsUpload_Response\022\233\001\n\036GetNextBa"
  "tchOfSegmentsToUpload\022;.CVideo_GameRecor"
  "dingGetNextBatchOfSegmentsToUpload_Reque"
  "st\032<.CVideo_GameRecordingGetNextBatchOfS"
  "egmentsToUpload_Response\022}\n\024CommitSegmen"
  "tUploads\0221.CVideo_GameRecordingCommitSeg"
  "mentUploads_Request\0322.CVideo_GameRecordi"
  "ngCommitSegmentUploads_ResponseB\035\200\001\001\252\002\027O"
  "penSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5fclientserver_5fvideo_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto = {
  false, false, 2982, descriptor_table_protodef_steammessages_5fgamerecording_2esteamclient_2eproto, "steammessages_gamerecording.steamclient.proto", 
  &descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_once, descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_deps, 4, 16,
  schemas, file_default_instances, TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fgamerecording_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fgamerecording_2esteamclient_2eproto(&descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto);

// ===================================================================

class CVideoManagerClipID::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideoManagerClipID>()._has_bits_);
  static void set_has_video_manager_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_video_manager_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_timeline_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_manifest_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CVideoManagerClipID::CVideoManagerClipID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideoManagerClipID)
}
CVideoManagerClipID::CVideoManagerClipID(const CVideoManagerClipID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manifest_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_manifest_url()) {
    manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manifest_url(), 
      GetArena());
  }
  ::memcpy(&video_manager_clip_id_, &from.video_manager_clip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_offset_ms_) -
    reinterpret_cast<char*>(&video_manager_clip_id_)) + sizeof(start_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:CVideoManagerClipID)
}

void CVideoManagerClipID::SharedCtor() {
manifest_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&video_manager_clip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_offset_ms_) -
    reinterpret_cast<char*>(&video_manager_clip_id_)) + sizeof(start_offset_ms_));
}

CVideoManagerClipID::~CVideoManagerClipID() {
  // @@protoc_insertion_point(destructor:CVideoManagerClipID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideoManagerClipID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  manifest_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideoManagerClipID::ArenaDtor(void* object) {
  CVideoManagerClipID* _this = reinterpret_cast< CVideoManagerClipID* >(object);
  (void)_this;
}
void CVideoManagerClipID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideoManagerClipID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideoManagerClipID::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideoManagerClipID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    manifest_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&video_manager_clip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_offset_ms_) -
        reinterpret_cast<char*>(&video_manager_clip_id_)) + sizeof(start_offset_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideoManagerClipID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 video_manager_clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_video_manager_clip_id(&has_bits);
          video_manager_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 video_manager_video_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_video_manager_video_id(&has_bits);
          video_manager_video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_timeline_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_server_timeline_id(&has_bits);
          server_timeline_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string manifest_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_manifest_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideoManagerClipID.manifest_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_offset_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_offset_ms(&has_bits);
          start_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideoManagerClipID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideoManagerClipID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 video_manager_clip_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_video_manager_clip_id(), target);
  }

  // optional fixed64 video_manager_video_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_video_manager_video_id(), target);
  }

  // optional fixed64 server_timeline_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_server_timeline_id(), target);
  }

  // optional string manifest_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manifest_url().data(), static_cast<int>(this->_internal_manifest_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideoManagerClipID.manifest_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_manifest_url(), target);
  }

  // optional uint32 duration_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duration_ms(), target);
  }

  // optional uint32 start_offset_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_offset_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideoManagerClipID)
  return target;
}

size_t CVideoManagerClipID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideoManagerClipID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string manifest_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manifest_url());
    }

    // optional fixed64 video_manager_clip_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 video_manager_video_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 server_timeline_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 duration_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_ms());
    }

    // optional uint32 start_offset_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_offset_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideoManagerClipID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideoManagerClipID)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideoManagerClipID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideoManagerClipID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideoManagerClipID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideoManagerClipID)
    MergeFrom(*source);
  }
}

void CVideoManagerClipID::MergeFrom(const CVideoManagerClipID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideoManagerClipID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_manifest_url(from._internal_manifest_url());
    }
    if (cached_has_bits & 0x00000002u) {
      video_manager_clip_id_ = from.video_manager_clip_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      video_manager_video_id_ = from.video_manager_video_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_timeline_id_ = from.server_timeline_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_offset_ms_ = from.start_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideoManagerClipID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideoManagerClipID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideoManagerClipID::CopyFrom(const CVideoManagerClipID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideoManagerClipID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideoManagerClipID::IsInitialized() const {
  return true;
}

void CVideoManagerClipID::InternalSwap(CVideoManagerClipID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  manifest_url_.Swap(&other->manifest_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideoManagerClipID, start_offset_ms_)
      + sizeof(CVideoManagerClipID::start_offset_ms_)
      - PROTOBUF_FIELD_OFFSET(CVideoManagerClipID, video_manager_clip_id_)>(
          reinterpret_cast<char*>(&video_manager_clip_id_),
          reinterpret_cast<char*>(&other->video_manager_clip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideoManagerClipID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecordingClip::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecordingClip>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_owner_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_upload_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CGameRecordingClip::CGameRecordingClip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  video_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecordingClip)
}
CGameRecordingClip::CGameRecordingClip(const CGameRecordingClip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      video_ids_(from.video_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clip_id_, &from.clip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_steamid_) -
    reinterpret_cast<char*>(&clip_id_)) + sizeof(owner_steamid_));
  // @@protoc_insertion_point(copy_constructor:CGameRecordingClip)
}

void CGameRecordingClip::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_steamid_) -
    reinterpret_cast<char*>(&clip_id_)) + sizeof(owner_steamid_));
}

CGameRecordingClip::~CGameRecordingClip() {
  // @@protoc_insertion_point(destructor:CGameRecordingClip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecordingClip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecordingClip::ArenaDtor(void* object) {
  CGameRecordingClip* _this = reinterpret_cast< CGameRecordingClip* >(object);
  (void)_this;
}
void CGameRecordingClip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecordingClip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecordingClip::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecordingClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&clip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_steamid_) -
        reinterpret_cast<char*>(&clip_id_)) + sizeof(owner_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecordingClip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_clip_id(&has_bits);
          clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_recorded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date_recorded(&has_bits);
          date_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_file_size_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_total_file_size_bytes(&has_bits);
          total_file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CVideoManagerClipID video_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 owner_steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_owner_steamid(&has_bits);
          owner_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool upload_complete = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_upload_complete(&has_bits);
          upload_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecordingClip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecordingClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_clip_id(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gameid(), target);
  }

  // optional uint32 date_recorded = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_date_recorded(), target);
  }

  // optional uint64 total_file_size_bytes = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_total_file_size_bytes(), target);
  }

  // repeated .CVideoManagerClipID video_ids = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_video_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_video_ids(i), target, stream);
  }

  // optional fixed64 owner_steamid = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_owner_steamid(), target);
  }

  // optional bool upload_complete = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_upload_complete(), target);
  }

  // optional uint32 duration_ms = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecordingClip)
  return target;
}

size_t CGameRecordingClip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecordingClip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideoManagerClipID video_ids = 9;
  total_size += 1UL * this->_internal_video_ids_size();
  for (const auto& msg : this->video_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed64 clip_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 gameid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gameid());
    }

    // optional uint64 total_file_size_bytes = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_total_file_size_bytes());
    }

    // optional uint32 date_recorded = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_recorded());
    }

    // optional bool upload_complete = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 duration_ms = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_ms());
    }

    // optional fixed64 owner_steamid = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecordingClip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecordingClip)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecordingClip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecordingClip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecordingClip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecordingClip)
    MergeFrom(*source);
  }
}

void CGameRecordingClip::MergeFrom(const CGameRecordingClip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecordingClip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  video_ids_.MergeFrom(from.video_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      clip_id_ = from.clip_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_file_size_bytes_ = from.total_file_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_recorded_ = from.date_recorded_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_complete_ = from.upload_complete_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      owner_steamid_ = from.owner_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecordingClip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecordingClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecordingClip::CopyFrom(const CGameRecordingClip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecordingClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecordingClip::IsInitialized() const {
  return true;
}

void CGameRecordingClip::InternalSwap(CGameRecordingClip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  video_ids_.InternalSwap(&other->video_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecordingClip, owner_steamid_)
      + sizeof(CGameRecordingClip::owner_steamid_)
      - PROTOBUF_FIELD_OFFSET(CGameRecordingClip, clip_id_)>(
          reinterpret_cast<char*>(&clip_id_),
          reinterpret_cast<char*>(&other->clip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecordingClip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_CreateShareClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_CreateShareClip_Request>()._has_bits_);
  static const ::CGameRecordingClip& clip(const CGameRecording_CreateShareClip_Request* msg);
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecordingClip&
CGameRecording_CreateShareClip_Request::_Internal::clip(const CGameRecording_CreateShareClip_Request* msg) {
  return *msg->clip_;
}
void CGameRecording_CreateShareClip_Request::clear_video_def() {
  video_def_.Clear();
}
CGameRecording_CreateShareClip_Request::CGameRecording_CreateShareClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  video_def_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_CreateShareClip_Request)
}
CGameRecording_CreateShareClip_Request::CGameRecording_CreateShareClip_Request(const CGameRecording_CreateShareClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      video_def_(from.video_def_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clip()) {
    clip_ = new ::CGameRecordingClip(*from.clip_);
  } else {
    clip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_CreateShareClip_Request)
}

void CGameRecording_CreateShareClip_Request::SharedCtor() {
clip_ = nullptr;
}

CGameRecording_CreateShareClip_Request::~CGameRecording_CreateShareClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_CreateShareClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_CreateShareClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clip_;
}

void CGameRecording_CreateShareClip_Request::ArenaDtor(void* object) {
  CGameRecording_CreateShareClip_Request* _this = reinterpret_cast< CGameRecording_CreateShareClip_Request* >(object);
  (void)_this;
}
void CGameRecording_CreateShareClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_CreateShareClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_CreateShareClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_CreateShareClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_def_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(clip_ != nullptr);
    clip_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_CreateShareClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecordingClip clip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgVideoGameRecordingDef video_def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video_def(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_CreateShareClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_CreateShareClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecordingClip clip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clip(this), target, stream);
  }

  // repeated .CMsgVideoGameRecordingDef video_def = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_video_def_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_video_def(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_CreateShareClip_Request)
  return target;
}

size_t CGameRecording_CreateShareClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_CreateShareClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVideoGameRecordingDef video_def = 3;
  total_size += 1UL * this->_internal_video_def_size();
  for (const auto& msg : this->video_def_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CGameRecordingClip clip = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clip_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_CreateShareClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_CreateShareClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_CreateShareClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_CreateShareClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_CreateShareClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_CreateShareClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_CreateShareClip_Request::MergeFrom(const CGameRecording_CreateShareClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_CreateShareClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  video_def_.MergeFrom(from.video_def_);
  if (from._internal_has_clip()) {
    _internal_mutable_clip()->::CGameRecordingClip::MergeFrom(from._internal_clip());
  }
}

void CGameRecording_CreateShareClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_CreateShareClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_CreateShareClip_Request::CopyFrom(const CGameRecording_CreateShareClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_CreateShareClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_CreateShareClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_CreateShareClip_Request::InternalSwap(CGameRecording_CreateShareClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  video_def_.InternalSwap(&other->video_def_);
  swap(clip_, other->clip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_CreateShareClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_CreateShareClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_CreateShareClip_Response>()._has_bits_);
  static const ::CGameRecordingClip& clip(const CGameRecording_CreateShareClip_Response* msg);
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecordingClip&
CGameRecording_CreateShareClip_Response::_Internal::clip(const CGameRecording_CreateShareClip_Response* msg) {
  return *msg->clip_;
}
CGameRecording_CreateShareClip_Response::CGameRecording_CreateShareClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_CreateShareClip_Response)
}
CGameRecording_CreateShareClip_Response::CGameRecording_CreateShareClip_Response(const CGameRecording_CreateShareClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clip()) {
    clip_ = new ::CGameRecordingClip(*from.clip_);
  } else {
    clip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_CreateShareClip_Response)
}

void CGameRecording_CreateShareClip_Response::SharedCtor() {
clip_ = nullptr;
}

CGameRecording_CreateShareClip_Response::~CGameRecording_CreateShareClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_CreateShareClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_CreateShareClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clip_;
}

void CGameRecording_CreateShareClip_Response::ArenaDtor(void* object) {
  CGameRecording_CreateShareClip_Response* _this = reinterpret_cast< CGameRecording_CreateShareClip_Response* >(object);
  (void)_this;
}
void CGameRecording_CreateShareClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_CreateShareClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_CreateShareClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_CreateShareClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(clip_ != nullptr);
    clip_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_CreateShareClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecordingClip clip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_CreateShareClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_CreateShareClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecordingClip clip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_CreateShareClip_Response)
  return target;
}

size_t CGameRecording_CreateShareClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_CreateShareClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecordingClip clip = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clip_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_CreateShareClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_CreateShareClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_CreateShareClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_CreateShareClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_CreateShareClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_CreateShareClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_CreateShareClip_Response::MergeFrom(const CGameRecording_CreateShareClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_CreateShareClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip()) {
    _internal_mutable_clip()->::CGameRecordingClip::MergeFrom(from._internal_clip());
  }
}

void CGameRecording_CreateShareClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_CreateShareClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_CreateShareClip_Response::CopyFrom(const CGameRecording_CreateShareClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_CreateShareClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_CreateShareClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_CreateShareClip_Response::InternalSwap(CGameRecording_CreateShareClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_, other->clip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_CreateShareClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeleteSharedClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_DeleteSharedClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_DeleteSharedClip_Request::CGameRecording_DeleteSharedClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeleteSharedClip_Request)
}
CGameRecording_DeleteSharedClip_Request::CGameRecording_DeleteSharedClip_Request(const CGameRecording_DeleteSharedClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_ = from.clip_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeleteSharedClip_Request)
}

void CGameRecording_DeleteSharedClip_Request::SharedCtor() {
clip_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_DeleteSharedClip_Request::~CGameRecording_DeleteSharedClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeleteSharedClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeleteSharedClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_DeleteSharedClip_Request::ArenaDtor(void* object) {
  CGameRecording_DeleteSharedClip_Request* _this = reinterpret_cast< CGameRecording_DeleteSharedClip_Request* >(object);
  (void)_this;
}
void CGameRecording_DeleteSharedClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeleteSharedClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeleteSharedClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeleteSharedClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeleteSharedClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 clip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_clip_id(&has_bits);
          clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeleteSharedClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeleteSharedClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 clip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeleteSharedClip_Request)
  return target;
}

size_t CGameRecording_DeleteSharedClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeleteSharedClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 clip_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeleteSharedClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeleteSharedClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeleteSharedClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeleteSharedClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeleteSharedClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeleteSharedClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_DeleteSharedClip_Request::MergeFrom(const CGameRecording_DeleteSharedClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeleteSharedClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_DeleteSharedClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeleteSharedClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeleteSharedClip_Request::CopyFrom(const CGameRecording_DeleteSharedClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeleteSharedClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeleteSharedClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_DeleteSharedClip_Request::InternalSwap(CGameRecording_DeleteSharedClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_id_, other->clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeleteSharedClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_DeleteSharedClip_Response::_Internal {
 public:
};

CGameRecording_DeleteSharedClip_Response::CGameRecording_DeleteSharedClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_DeleteSharedClip_Response)
}
CGameRecording_DeleteSharedClip_Response::CGameRecording_DeleteSharedClip_Response(const CGameRecording_DeleteSharedClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_DeleteSharedClip_Response)
}

void CGameRecording_DeleteSharedClip_Response::SharedCtor() {
}

CGameRecording_DeleteSharedClip_Response::~CGameRecording_DeleteSharedClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_DeleteSharedClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_DeleteSharedClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_DeleteSharedClip_Response::ArenaDtor(void* object) {
  CGameRecording_DeleteSharedClip_Response* _this = reinterpret_cast< CGameRecording_DeleteSharedClip_Response* >(object);
  (void)_this;
}
void CGameRecording_DeleteSharedClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_DeleteSharedClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_DeleteSharedClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_DeleteSharedClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_DeleteSharedClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_DeleteSharedClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_DeleteSharedClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_DeleteSharedClip_Response)
  return target;
}

size_t CGameRecording_DeleteSharedClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_DeleteSharedClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_DeleteSharedClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_DeleteSharedClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_DeleteSharedClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_DeleteSharedClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_DeleteSharedClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_DeleteSharedClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_DeleteSharedClip_Response::MergeFrom(const CGameRecording_DeleteSharedClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_DeleteSharedClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameRecording_DeleteSharedClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_DeleteSharedClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_DeleteSharedClip_Response::CopyFrom(const CGameRecording_DeleteSharedClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_DeleteSharedClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_DeleteSharedClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_DeleteSharedClip_Response::InternalSwap(CGameRecording_DeleteSharedClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_DeleteSharedClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetSingleSharedClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetSingleSharedClip_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameRecording_GetSingleSharedClip_Request::CGameRecording_GetSingleSharedClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetSingleSharedClip_Request)
}
CGameRecording_GetSingleSharedClip_Request::CGameRecording_GetSingleSharedClip_Request(const CGameRecording_GetSingleSharedClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_ = from.clip_id_;
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetSingleSharedClip_Request)
}

void CGameRecording_GetSingleSharedClip_Request::SharedCtor() {
clip_id_ = PROTOBUF_ULONGLONG(0);
}

CGameRecording_GetSingleSharedClip_Request::~CGameRecording_GetSingleSharedClip_Request() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetSingleSharedClip_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetSingleSharedClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_GetSingleSharedClip_Request::ArenaDtor(void* object) {
  CGameRecording_GetSingleSharedClip_Request* _this = reinterpret_cast< CGameRecording_GetSingleSharedClip_Request* >(object);
  (void)_this;
}
void CGameRecording_GetSingleSharedClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetSingleSharedClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetSingleSharedClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetSingleSharedClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetSingleSharedClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 clip_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_clip_id(&has_bits);
          clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetSingleSharedClip_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetSingleSharedClip_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 clip_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetSingleSharedClip_Request)
  return target;
}

size_t CGameRecording_GetSingleSharedClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetSingleSharedClip_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 clip_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetSingleSharedClip_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetSingleSharedClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetSingleSharedClip_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetSingleSharedClip_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetSingleSharedClip_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetSingleSharedClip_Request)
    MergeFrom(*source);
  }
}

void CGameRecording_GetSingleSharedClip_Request::MergeFrom(const CGameRecording_GetSingleSharedClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetSingleSharedClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
}

void CGameRecording_GetSingleSharedClip_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetSingleSharedClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetSingleSharedClip_Request::CopyFrom(const CGameRecording_GetSingleSharedClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetSingleSharedClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetSingleSharedClip_Request::IsInitialized() const {
  return true;
}

void CGameRecording_GetSingleSharedClip_Request::InternalSwap(CGameRecording_GetSingleSharedClip_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_id_, other->clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetSingleSharedClip_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_GetSingleSharedClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_GetSingleSharedClip_Response>()._has_bits_);
  static const ::CGameRecordingClip& clip(const CGameRecording_GetSingleSharedClip_Response* msg);
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGameRecordingClip&
CGameRecording_GetSingleSharedClip_Response::_Internal::clip(const CGameRecording_GetSingleSharedClip_Response* msg) {
  return *msg->clip_;
}
CGameRecording_GetSingleSharedClip_Response::CGameRecording_GetSingleSharedClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_GetSingleSharedClip_Response)
}
CGameRecording_GetSingleSharedClip_Response::CGameRecording_GetSingleSharedClip_Response(const CGameRecording_GetSingleSharedClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clip()) {
    clip_ = new ::CGameRecordingClip(*from.clip_);
  } else {
    clip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CGameRecording_GetSingleSharedClip_Response)
}

void CGameRecording_GetSingleSharedClip_Response::SharedCtor() {
clip_ = nullptr;
}

CGameRecording_GetSingleSharedClip_Response::~CGameRecording_GetSingleSharedClip_Response() {
  // @@protoc_insertion_point(destructor:CGameRecording_GetSingleSharedClip_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_GetSingleSharedClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clip_;
}

void CGameRecording_GetSingleSharedClip_Response::ArenaDtor(void* object) {
  CGameRecording_GetSingleSharedClip_Response* _this = reinterpret_cast< CGameRecording_GetSingleSharedClip_Response* >(object);
  (void)_this;
}
void CGameRecording_GetSingleSharedClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_GetSingleSharedClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_GetSingleSharedClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_GetSingleSharedClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(clip_ != nullptr);
    clip_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_GetSingleSharedClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CGameRecordingClip clip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_GetSingleSharedClip_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_GetSingleSharedClip_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CGameRecordingClip clip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_GetSingleSharedClip_Response)
  return target;
}

size_t CGameRecording_GetSingleSharedClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_GetSingleSharedClip_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CGameRecordingClip clip = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clip_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_GetSingleSharedClip_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_GetSingleSharedClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_GetSingleSharedClip_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_GetSingleSharedClip_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_GetSingleSharedClip_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_GetSingleSharedClip_Response)
    MergeFrom(*source);
  }
}

void CGameRecording_GetSingleSharedClip_Response::MergeFrom(const CGameRecording_GetSingleSharedClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_GetSingleSharedClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip()) {
    _internal_mutable_clip()->::CGameRecordingClip::MergeFrom(from._internal_clip());
  }
}

void CGameRecording_GetSingleSharedClip_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_GetSingleSharedClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_GetSingleSharedClip_Response::CopyFrom(const CGameRecording_GetSingleSharedClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_GetSingleSharedClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_GetSingleSharedClip_Response::IsInitialized() const {
  return true;
}

void CGameRecording_GetSingleSharedClip_Response::InternalSwap(CGameRecording_GetSingleSharedClip_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_, other->clip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_GetSingleSharedClip_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_BeginGameRecordingSegmentsUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_BeginGameRecordingSegmentsUpload_Request>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CVideo_BeginGameRecordingSegmentsUpload_Request::clear_segments_to_store() {
  segments_to_store_.Clear();
}
CVideo_BeginGameRecordingSegmentsUpload_Request::CVideo_BeginGameRecordingSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_to_store_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_BeginGameRecordingSegmentsUpload_Request)
}
CVideo_BeginGameRecordingSegmentsUpload_Request::CVideo_BeginGameRecordingSegmentsUpload_Request(const CVideo_BeginGameRecordingSegmentsUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segments_to_store_(from.segments_to_store_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArena());
  }
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArena());
  }
  recording_id_ = from.recording_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_BeginGameRecordingSegmentsUpload_Request)
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recording_id_ = PROTOBUF_ULONGLONG(0);
}

CVideo_BeginGameRecordingSegmentsUpload_Request::~CVideo_BeginGameRecordingSegmentsUpload_Request() {
  // @@protoc_insertion_point(destructor:CVideo_BeginGameRecordingSegmentsUpload_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::ArenaDtor(void* object) {
  CVideo_BeginGameRecordingSegmentsUpload_Request* _this = reinterpret_cast< CVideo_BeginGameRecordingSegmentsUpload_Request* >(object);
  (void)_this;
}
void CVideo_BeginGameRecordingSegmentsUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_BeginGameRecordingSegmentsUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_to_store_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
  }
  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_BeginGameRecordingSegmentsUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recording_id(&has_bits);
          recording_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string component_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_BeginGameRecordingSegmentsUpload_Request.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string representation_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CVideo_GameRecordingSegmentInfo segments_to_store = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_to_store(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_BeginGameRecordingSegmentsUpload_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recording_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recording_id(), target);
  }

  // optional string component_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_BeginGameRecordingSegmentsUpload_Request.component_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_name(), target);
  }

  // optional string representation_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_representation_name(), target);
  }

  // repeated .CVideo_GameRecordingSegmentInfo segments_to_store = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_to_store_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_segments_to_store(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_BeginGameRecordingSegmentsUpload_Request)
  return target;
}

size_t CVideo_BeginGameRecordingSegmentsUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentInfo segments_to_store = 4;
  total_size += 1UL * this->_internal_segments_to_store_size();
  for (const auto& msg : this->segments_to_store_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string component_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string representation_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional uint64 recording_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_recording_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_BeginGameRecordingSegmentsUpload_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_BeginGameRecordingSegmentsUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_BeginGameRecordingSegmentsUpload_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_BeginGameRecordingSegmentsUpload_Request)
    MergeFrom(*source);
  }
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::MergeFrom(const CVideo_BeginGameRecordingSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_to_store_.MergeFrom(from.segments_to_store_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000004u) {
      recording_id_ = from.recording_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::CopyFrom(const CVideo_BeginGameRecordingSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_BeginGameRecordingSegmentsUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_BeginGameRecordingSegmentsUpload_Request::IsInitialized() const {
  return true;
}

void CVideo_BeginGameRecordingSegmentsUpload_Request::InternalSwap(CVideo_BeginGameRecordingSegmentsUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segments_to_store_.InternalSwap(&other->segments_to_store_);
  component_name_.Swap(&other->component_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  representation_name_.Swap(&other->representation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(recording_id_, other->recording_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_BeginGameRecordingSegmentsUpload_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_BeginGameRecordingSegmentsUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_BeginGameRecordingSegmentsUpload_Response>()._has_bits_);
  static void set_has_call_again(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CVideo_BeginGameRecordingSegmentsUpload_Response::clear_segments_needed() {
  segments_needed_.Clear();
}
CVideo_BeginGameRecordingSegmentsUpload_Response::CVideo_BeginGameRecordingSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_needed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_BeginGameRecordingSegmentsUpload_Response)
}
CVideo_BeginGameRecordingSegmentsUpload_Response::CVideo_BeginGameRecordingSegmentsUpload_Response(const CVideo_BeginGameRecordingSegmentsUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segments_needed_(from.segments_needed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_again_ = from.call_again_;
  // @@protoc_insertion_point(copy_constructor:CVideo_BeginGameRecordingSegmentsUpload_Response)
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::SharedCtor() {
call_again_ = false;
}

CVideo_BeginGameRecordingSegmentsUpload_Response::~CVideo_BeginGameRecordingSegmentsUpload_Response() {
  // @@protoc_insertion_point(destructor:CVideo_BeginGameRecordingSegmentsUpload_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::ArenaDtor(void* object) {
  CVideo_BeginGameRecordingSegmentsUpload_Response* _this = reinterpret_cast< CVideo_BeginGameRecordingSegmentsUpload_Response* >(object);
  (void)_this;
}
void CVideo_BeginGameRecordingSegmentsUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_BeginGameRecordingSegmentsUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_needed_.Clear();
  call_again_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_BeginGameRecordingSegmentsUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_needed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool call_again = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_call_again(&has_bits);
          call_again_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_BeginGameRecordingSegmentsUpload_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_needed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments_needed(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool call_again = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_call_again(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_BeginGameRecordingSegmentsUpload_Response)
  return target;
}

size_t CVideo_BeginGameRecordingSegmentsUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
  total_size += 1UL * this->_internal_segments_needed_size();
  for (const auto& msg : this->segments_needed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool call_again = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_BeginGameRecordingSegmentsUpload_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_BeginGameRecordingSegmentsUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_BeginGameRecordingSegmentsUpload_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_BeginGameRecordingSegmentsUpload_Response)
    MergeFrom(*source);
  }
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::MergeFrom(const CVideo_BeginGameRecordingSegmentsUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_needed_.MergeFrom(from.segments_needed_);
  if (from._internal_has_call_again()) {
    _internal_set_call_again(from._internal_call_again());
  }
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::CopyFrom(const CVideo_BeginGameRecordingSegmentsUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_BeginGameRecordingSegmentsUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_BeginGameRecordingSegmentsUpload_Response::IsInitialized() const {
  return true;
}

void CVideo_BeginGameRecordingSegmentsUpload_Response::InternalSwap(CVideo_BeginGameRecordingSegmentsUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segments_needed_.InternalSwap(&other->segments_needed_);
  swap(call_again_, other->call_again_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_BeginGameRecordingSegmentsUpload_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_CommitGameRecordingSegmentsUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_CommitGameRecordingSegmentsUpload_Request>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_segment_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_segments(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_upload_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CVideo_CommitGameRecordingSegmentsUpload_Request::CVideo_CommitGameRecordingSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_CommitGameRecordingSegmentsUpload_Request)
}
CVideo_CommitGameRecordingSegmentsUpload_Request::CVideo_CommitGameRecordingSegmentsUpload_Request(const CVideo_CommitGameRecordingSegmentsUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArena());
  }
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArena());
  }
  ::memcpy(&recording_id_, &from.recording_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&recording_id_)) + sizeof(upload_result_));
  // @@protoc_insertion_point(copy_constructor:CVideo_CommitGameRecordingSegmentsUpload_Request)
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recording_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&recording_id_)) + sizeof(upload_result_));
}

CVideo_CommitGameRecordingSegmentsUpload_Request::~CVideo_CommitGameRecordingSegmentsUpload_Request() {
  // @@protoc_insertion_point(destructor:CVideo_CommitGameRecordingSegmentsUpload_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::ArenaDtor(void* object) {
  CVideo_CommitGameRecordingSegmentsUpload_Request* _this = reinterpret_cast< CVideo_CommitGameRecordingSegmentsUpload_Request* >(object);
  (void)_this;
}
void CVideo_CommitGameRecordingSegmentsUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_CommitGameRecordingSegmentsUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&recording_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_result_) -
        reinterpret_cast<char*>(&recording_id_)) + sizeof(upload_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_CommitGameRecordingSegmentsUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recording_id(&has_bits);
          recording_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string component_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_CommitGameRecordingSegmentsUpload_Request.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string representation_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_segment_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_first_segment_number(&has_bits);
          first_segment_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_segments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_segments(&has_bits);
          num_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 upload_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_upload_result(&has_bits);
          upload_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_CommitGameRecordingSegmentsUpload_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recording_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recording_id(), target);
  }

  // optional string component_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_CommitGameRecordingSegmentsUpload_Request.component_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_name(), target);
  }

  // optional string representation_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_representation_name(), target);
  }

  // optional uint32 first_segment_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_first_segment_number(), target);
  }

  // optional uint32 num_segments = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_segments(), target);
  }

  // optional uint32 upload_result = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_upload_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_CommitGameRecordingSegmentsUpload_Request)
  return target;
}

size_t CVideo_CommitGameRecordingSegmentsUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string component_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string representation_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional uint64 recording_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_recording_id());
    }

    // optional uint32 first_segment_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_segment_number());
    }

    // optional uint32 num_segments = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_segments());
    }

    // optional uint32 upload_result = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_upload_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_CommitGameRecordingSegmentsUpload_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_CommitGameRecordingSegmentsUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_CommitGameRecordingSegmentsUpload_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_CommitGameRecordingSegmentsUpload_Request)
    MergeFrom(*source);
  }
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::MergeFrom(const CVideo_CommitGameRecordingSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000004u) {
      recording_id_ = from.recording_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_segment_number_ = from.first_segment_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_segments_ = from.num_segments_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_result_ = from.upload_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::CopyFrom(const CVideo_CommitGameRecordingSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_CommitGameRecordingSegmentsUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_CommitGameRecordingSegmentsUpload_Request::IsInitialized() const {
  return true;
}

void CVideo_CommitGameRecordingSegmentsUpload_Request::InternalSwap(CVideo_CommitGameRecordingSegmentsUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  component_name_.Swap(&other->component_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  representation_name_.Swap(&other->representation_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_CommitGameRecordingSegmentsUpload_Request, upload_result_)
      + sizeof(CVideo_CommitGameRecordingSegmentsUpload_Request::upload_result_)
      - PROTOBUF_FIELD_OFFSET(CVideo_CommitGameRecordingSegmentsUpload_Request, recording_id_)>(
          reinterpret_cast<char*>(&recording_id_),
          reinterpret_cast<char*>(&other->recording_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_CommitGameRecordingSegmentsUpload_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_CommitGameRecordingSegmentsUpload_Response::_Internal {
 public:
};

CVideo_CommitGameRecordingSegmentsUpload_Response::CVideo_CommitGameRecordingSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_CommitGameRecordingSegmentsUpload_Response)
}
CVideo_CommitGameRecordingSegmentsUpload_Response::CVideo_CommitGameRecordingSegmentsUpload_Response(const CVideo_CommitGameRecordingSegmentsUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_CommitGameRecordingSegmentsUpload_Response)
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::SharedCtor() {
}

CVideo_CommitGameRecordingSegmentsUpload_Response::~CVideo_CommitGameRecordingSegmentsUpload_Response() {
  // @@protoc_insertion_point(destructor:CVideo_CommitGameRecordingSegmentsUpload_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::ArenaDtor(void* object) {
  CVideo_CommitGameRecordingSegmentsUpload_Response* _this = reinterpret_cast< CVideo_CommitGameRecordingSegmentsUpload_Response* >(object);
  (void)_this;
}
void CVideo_CommitGameRecordingSegmentsUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_CommitGameRecordingSegmentsUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_CommitGameRecordingSegmentsUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_CommitGameRecordingSegmentsUpload_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_CommitGameRecordingSegmentsUpload_Response)
  return target;
}

size_t CVideo_CommitGameRecordingSegmentsUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_CommitGameRecordingSegmentsUpload_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_CommitGameRecordingSegmentsUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_CommitGameRecordingSegmentsUpload_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_CommitGameRecordingSegmentsUpload_Response)
    MergeFrom(*source);
  }
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::MergeFrom(const CVideo_CommitGameRecordingSegmentsUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CVideo_CommitGameRecordingSegmentsUpload_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::CopyFrom(const CVideo_CommitGameRecordingSegmentsUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_CommitGameRecordingSegmentsUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_CommitGameRecordingSegmentsUpload_Response::IsInitialized() const {
  return true;
}

void CVideo_CommitGameRecordingSegmentsUpload_Response::InternalSwap(CVideo_CommitGameRecordingSegmentsUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_CommitGameRecordingSegmentsUpload_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
}
CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recording_id_ = from.recording_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::SharedCtor() {
recording_id_ = PROTOBUF_ULONGLONG(0);
}

CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::~CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::ArenaDtor(void* object) {
  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* _this = reinterpret_cast< CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* >(object);
  (void)_this;
}
void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recording_id(&has_bits);
          recording_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recording_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recording_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  return target;
}

size_t CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 recording_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recording_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::MergeFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recording_id()) {
    _internal_set_recording_id(from._internal_recording_id());
  }
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::CopyFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::InternalSwap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recording_id_, other->recording_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::_Internal {
 public:
};

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::clear_segments_needed() {
  segments_needed_.Clear();
}
CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_needed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
}
CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_needed_(from.segments_needed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::SharedCtor() {
}

CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::~CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::ArenaDtor(void* object) {
  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* _this = reinterpret_cast< CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* >(object);
  (void)_this;
}
void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_needed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_needed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_needed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments_needed(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  return target;
}

size_t CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
  total_size += 1UL * this->_internal_segments_needed_size();
  for (const auto& msg : this->segments_needed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::MergeFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_needed_.MergeFrom(from.segments_needed_);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::CopyFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::InternalSwap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_needed_.InternalSwap(&other->segments_needed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingCommitSegmentUploads_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameRecordingCommitSegmentUploads_Request>()._has_bits_);
  static void set_has_recording_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CVideo_GameRecordingCommitSegmentUploads_Request::clear_segments_uploaded() {
  segments_uploaded_.Clear();
}
CVideo_GameRecordingCommitSegmentUploads_Request::CVideo_GameRecordingCommitSegmentUploads_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_uploaded_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingCommitSegmentUploads_Request)
}
CVideo_GameRecordingCommitSegmentUploads_Request::CVideo_GameRecordingCommitSegmentUploads_Request(const CVideo_GameRecordingCommitSegmentUploads_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segments_uploaded_(from.segments_uploaded_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recording_id_ = from.recording_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingCommitSegmentUploads_Request)
}

void CVideo_GameRecordingCommitSegmentUploads_Request::SharedCtor() {
recording_id_ = PROTOBUF_ULONGLONG(0);
}

CVideo_GameRecordingCommitSegmentUploads_Request::~CVideo_GameRecordingCommitSegmentUploads_Request() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingCommitSegmentUploads_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingCommitSegmentUploads_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_GameRecordingCommitSegmentUploads_Request::ArenaDtor(void* object) {
  CVideo_GameRecordingCommitSegmentUploads_Request* _this = reinterpret_cast< CVideo_GameRecordingCommitSegmentUploads_Request* >(object);
  (void)_this;
}
void CVideo_GameRecordingCommitSegmentUploads_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingCommitSegmentUploads_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingCommitSegmentUploads_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_uploaded_.Clear();
  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingCommitSegmentUploads_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 recording_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recording_id(&has_bits);
          recording_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CVideo_GameRecordingSegmentInfo segments_uploaded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_uploaded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingCommitSegmentUploads_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 recording_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_recording_id(), target);
  }

  // repeated .CVideo_GameRecordingSegmentInfo segments_uploaded = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_uploaded_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_segments_uploaded(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingCommitSegmentUploads_Request)
  return target;
}

size_t CVideo_GameRecordingCommitSegmentUploads_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameRecordingSegmentInfo segments_uploaded = 2;
  total_size += 1UL * this->_internal_segments_uploaded_size();
  for (const auto& msg : this->segments_uploaded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 recording_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recording_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingCommitSegmentUploads_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingCommitSegmentUploads_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingCommitSegmentUploads_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingCommitSegmentUploads_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingCommitSegmentUploads_Request)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingCommitSegmentUploads_Request::MergeFrom(const CVideo_GameRecordingCommitSegmentUploads_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_uploaded_.MergeFrom(from.segments_uploaded_);
  if (from._internal_has_recording_id()) {
    _internal_set_recording_id(from._internal_recording_id());
  }
}

void CVideo_GameRecordingCommitSegmentUploads_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingCommitSegmentUploads_Request::CopyFrom(const CVideo_GameRecordingCommitSegmentUploads_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingCommitSegmentUploads_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingCommitSegmentUploads_Request::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingCommitSegmentUploads_Request::InternalSwap(CVideo_GameRecordingCommitSegmentUploads_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segments_uploaded_.InternalSwap(&other->segments_uploaded_);
  swap(recording_id_, other->recording_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingCommitSegmentUploads_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CVideo_GameRecordingCommitSegmentUploads_Response::_Internal {
 public:
};

CVideo_GameRecordingCommitSegmentUploads_Response::CVideo_GameRecordingCommitSegmentUploads_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVideo_GameRecordingCommitSegmentUploads_Response)
}
CVideo_GameRecordingCommitSegmentUploads_Response::CVideo_GameRecordingCommitSegmentUploads_Response(const CVideo_GameRecordingCommitSegmentUploads_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_GameRecordingCommitSegmentUploads_Response)
}

void CVideo_GameRecordingCommitSegmentUploads_Response::SharedCtor() {
}

CVideo_GameRecordingCommitSegmentUploads_Response::~CVideo_GameRecordingCommitSegmentUploads_Response() {
  // @@protoc_insertion_point(destructor:CVideo_GameRecordingCommitSegmentUploads_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CVideo_GameRecordingCommitSegmentUploads_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CVideo_GameRecordingCommitSegmentUploads_Response::ArenaDtor(void* object) {
  CVideo_GameRecordingCommitSegmentUploads_Response* _this = reinterpret_cast< CVideo_GameRecordingCommitSegmentUploads_Response* >(object);
  (void)_this;
}
void CVideo_GameRecordingCommitSegmentUploads_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameRecordingCommitSegmentUploads_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameRecordingCommitSegmentUploads_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameRecordingCommitSegmentUploads_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CVideo_GameRecordingCommitSegmentUploads_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameRecordingCommitSegmentUploads_Response)
  return target;
}

size_t CVideo_GameRecordingCommitSegmentUploads_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CVideo_GameRecordingCommitSegmentUploads_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CVideo_GameRecordingCommitSegmentUploads_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CVideo_GameRecordingCommitSegmentUploads_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVideo_GameRecordingCommitSegmentUploads_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVideo_GameRecordingCommitSegmentUploads_Response)
    MergeFrom(*source);
  }
}

void CVideo_GameRecordingCommitSegmentUploads_Response::MergeFrom(const CVideo_GameRecordingCommitSegmentUploads_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CVideo_GameRecordingCommitSegmentUploads_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVideo_GameRecordingCommitSegmentUploads_Response::CopyFrom(const CVideo_GameRecordingCommitSegmentUploads_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameRecordingCommitSegmentUploads_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameRecordingCommitSegmentUploads_Response::IsInitialized() const {
  return true;
}

void CVideo_GameRecordingCommitSegmentUploads_Response::InternalSwap(CVideo_GameRecordingCommitSegmentUploads_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameRecordingCommitSegmentUploads_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GameRecordingClip::~GameRecordingClip() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecordingClip::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameRecordingClip::GetDescriptor() {
  return descriptor();
}

void GameRecordingClip::CreateShareClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_CreateShareClip_Request*,
                         ::CGameRecording_CreateShareClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateShareClip() not implemented.");
  done->Run();
}

void GameRecordingClip::DeleteSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_DeleteSharedClip_Request*,
                         ::CGameRecording_DeleteSharedClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteSharedClip() not implemented.");
  done->Run();
}

void GameRecordingClip::GetSingleSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameRecording_GetSingleSharedClip_Request*,
                         ::CGameRecording_GetSingleSharedClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSingleSharedClip() not implemented.");
  done->Run();
}

void GameRecordingClip::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      CreateShareClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_CreateShareClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_CreateShareClip_Response*>(
                 response),
             done);
      break;
    case 1:
      DeleteSharedClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_DeleteSharedClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_DeleteSharedClip_Response*>(
                 response),
             done);
      break;
    case 2:
      GetSingleSharedClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameRecording_GetSingleSharedClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameRecording_GetSingleSharedClip_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecordingClip::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecording_CreateShareClip_Request::default_instance();
    case 1:
      return ::CGameRecording_DeleteSharedClip_Request::default_instance();
    case 2:
      return ::CGameRecording_GetSingleSharedClip_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameRecordingClip::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameRecording_CreateShareClip_Response::default_instance();
    case 1:
      return ::CGameRecording_DeleteSharedClip_Response::default_instance();
    case 2:
      return ::CGameRecording_GetSingleSharedClip_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameRecordingClip_Stub::GameRecordingClip_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameRecordingClip_Stub::GameRecordingClip_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameRecordingClip_Stub::~GameRecordingClip_Stub() {
  if (owns_channel_) delete channel_;
}

void GameRecordingClip_Stub::CreateShareClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_CreateShareClip_Request* request,
                              ::CGameRecording_CreateShareClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameRecordingClip_Stub::DeleteSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_DeleteSharedClip_Request* request,
                              ::CGameRecording_DeleteSharedClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameRecordingClip_Stub::GetSingleSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameRecording_GetSingleSharedClip_Request* request,
                              ::CGameRecording_GetSingleSharedClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

VideoClip::~VideoClip() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VideoClip::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VideoClip::GetDescriptor() {
  return descriptor();
}

void VideoClip::BeginGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_BeginGameRecordingSegmentsUpload_Request*,
                         ::CVideo_BeginGameRecordingSegmentsUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginGameRecordingSegmentsUpload() not implemented.");
  done->Run();
}

void VideoClip::CommitGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_CommitGameRecordingSegmentsUpload_Request*,
                         ::CVideo_CommitGameRecordingSegmentsUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitGameRecordingSegmentsUpload() not implemented.");
  done->Run();
}

void VideoClip::GetNextBatchOfSegmentsToUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request*,
                         ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNextBatchOfSegmentsToUpload() not implemented.");
  done->Run();
}

void VideoClip::CommitSegmentUploads(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_GameRecordingCommitSegmentUploads_Request*,
                         ::CVideo_GameRecordingCommitSegmentUploads_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitSegmentUploads() not implemented.");
  done->Run();
}

void VideoClip::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fgamerecording_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      BeginGameRecordingSegmentsUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_BeginGameRecordingSegmentsUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_BeginGameRecordingSegmentsUpload_Response*>(
                 response),
             done);
      break;
    case 1:
      CommitGameRecordingSegmentsUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_CommitGameRecordingSegmentsUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_CommitGameRecordingSegmentsUpload_Response*>(
                 response),
             done);
      break;
    case 2:
      GetNextBatchOfSegmentsToUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response*>(
                 response),
             done);
      break;
    case 3:
      CommitSegmentUploads(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_GameRecordingCommitSegmentUploads_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_GameRecordingCommitSegmentUploads_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VideoClip::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_BeginGameRecordingSegmentsUpload_Request::default_instance();
    case 1:
      return ::CVideo_CommitGameRecordingSegmentsUpload_Request::default_instance();
    case 2:
      return ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::default_instance();
    case 3:
      return ::CVideo_GameRecordingCommitSegmentUploads_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VideoClip::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_BeginGameRecordingSegmentsUpload_Response::default_instance();
    case 1:
      return ::CVideo_CommitGameRecordingSegmentsUpload_Response::default_instance();
    case 2:
      return ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::default_instance();
    case 3:
      return ::CVideo_GameRecordingCommitSegmentUploads_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VideoClip_Stub::VideoClip_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VideoClip_Stub::VideoClip_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
VideoClip_Stub::~VideoClip_Stub() {
  if (owns_channel_) delete channel_;
}

void VideoClip_Stub::BeginGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_BeginGameRecordingSegmentsUpload_Request* request,
                              ::CVideo_BeginGameRecordingSegmentsUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void VideoClip_Stub::CommitGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_CommitGameRecordingSegmentsUpload_Request* request,
                              ::CVideo_CommitGameRecordingSegmentsUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void VideoClip_Stub::GetNextBatchOfSegmentsToUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* request,
                              ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void VideoClip_Stub::CommitSegmentUploads(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_GameRecordingCommitSegmentUploads_Request* request,
                              ::CVideo_GameRecordingCommitSegmentUploads_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CVideoManagerClipID* Arena::CreateMaybeMessage< ::CVideoManagerClipID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideoManagerClipID >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecordingClip* Arena::CreateMaybeMessage< ::CGameRecordingClip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecordingClip >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_CreateShareClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_CreateShareClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_CreateShareClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_CreateShareClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_CreateShareClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_CreateShareClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeleteSharedClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_DeleteSharedClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeleteSharedClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_DeleteSharedClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_DeleteSharedClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_DeleteSharedClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetSingleSharedClip_Request* Arena::CreateMaybeMessage< ::CGameRecording_GetSingleSharedClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetSingleSharedClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_GetSingleSharedClip_Response* Arena::CreateMaybeMessage< ::CGameRecording_GetSingleSharedClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_GetSingleSharedClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_BeginGameRecordingSegmentsUpload_Request* Arena::CreateMaybeMessage< ::CVideo_BeginGameRecordingSegmentsUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_BeginGameRecordingSegmentsUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_BeginGameRecordingSegmentsUpload_Response* Arena::CreateMaybeMessage< ::CVideo_BeginGameRecordingSegmentsUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_BeginGameRecordingSegmentsUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_CommitGameRecordingSegmentsUpload_Request* Arena::CreateMaybeMessage< ::CVideo_CommitGameRecordingSegmentsUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_CommitGameRecordingSegmentsUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_CommitGameRecordingSegmentsUpload_Response* Arena::CreateMaybeMessage< ::CVideo_CommitGameRecordingSegmentsUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_CommitGameRecordingSegmentsUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* Arena::CreateMaybeMessage< ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* Arena::CreateMaybeMessage< ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingCommitSegmentUploads_Request* Arena::CreateMaybeMessage< ::CVideo_GameRecordingCommitSegmentUploads_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingCommitSegmentUploads_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameRecordingCommitSegmentUploads_Response* Arena::CreateMaybeMessage< ::CVideo_GameRecordingCommitSegmentUploads_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameRecordingCommitSegmentUploads_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
