// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamerecording.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamerecording_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamerecording_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "steammessages_clientserver_video.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgamerecording_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(int index);
class CGameRecordingClip;
struct CGameRecordingClipDefaultTypeInternal;
extern CGameRecordingClipDefaultTypeInternal _CGameRecordingClip_default_instance_;
class CGameRecording_CreateShareClip_Request;
struct CGameRecording_CreateShareClip_RequestDefaultTypeInternal;
extern CGameRecording_CreateShareClip_RequestDefaultTypeInternal _CGameRecording_CreateShareClip_Request_default_instance_;
class CGameRecording_CreateShareClip_Response;
struct CGameRecording_CreateShareClip_ResponseDefaultTypeInternal;
extern CGameRecording_CreateShareClip_ResponseDefaultTypeInternal _CGameRecording_CreateShareClip_Response_default_instance_;
class CGameRecording_DeleteSharedClip_Request;
struct CGameRecording_DeleteSharedClip_RequestDefaultTypeInternal;
extern CGameRecording_DeleteSharedClip_RequestDefaultTypeInternal _CGameRecording_DeleteSharedClip_Request_default_instance_;
class CGameRecording_DeleteSharedClip_Response;
struct CGameRecording_DeleteSharedClip_ResponseDefaultTypeInternal;
extern CGameRecording_DeleteSharedClip_ResponseDefaultTypeInternal _CGameRecording_DeleteSharedClip_Response_default_instance_;
class CGameRecording_GetSingleSharedClip_Request;
struct CGameRecording_GetSingleSharedClip_RequestDefaultTypeInternal;
extern CGameRecording_GetSingleSharedClip_RequestDefaultTypeInternal _CGameRecording_GetSingleSharedClip_Request_default_instance_;
class CGameRecording_GetSingleSharedClip_Response;
struct CGameRecording_GetSingleSharedClip_ResponseDefaultTypeInternal;
extern CGameRecording_GetSingleSharedClip_ResponseDefaultTypeInternal _CGameRecording_GetSingleSharedClip_Response_default_instance_;
class CVideoManagerClipID;
struct CVideoManagerClipIDDefaultTypeInternal;
extern CVideoManagerClipIDDefaultTypeInternal _CVideoManagerClipID_default_instance_;
class CVideo_BeginGameRecordingSegmentsUpload_Request;
struct CVideo_BeginGameRecordingSegmentsUpload_RequestDefaultTypeInternal;
extern CVideo_BeginGameRecordingSegmentsUpload_RequestDefaultTypeInternal _CVideo_BeginGameRecordingSegmentsUpload_Request_default_instance_;
class CVideo_BeginGameRecordingSegmentsUpload_Response;
struct CVideo_BeginGameRecordingSegmentsUpload_ResponseDefaultTypeInternal;
extern CVideo_BeginGameRecordingSegmentsUpload_ResponseDefaultTypeInternal _CVideo_BeginGameRecordingSegmentsUpload_Response_default_instance_;
class CVideo_CommitGameRecordingSegmentsUpload_Request;
struct CVideo_CommitGameRecordingSegmentsUpload_RequestDefaultTypeInternal;
extern CVideo_CommitGameRecordingSegmentsUpload_RequestDefaultTypeInternal _CVideo_CommitGameRecordingSegmentsUpload_Request_default_instance_;
class CVideo_CommitGameRecordingSegmentsUpload_Response;
struct CVideo_CommitGameRecordingSegmentsUpload_ResponseDefaultTypeInternal;
extern CVideo_CommitGameRecordingSegmentsUpload_ResponseDefaultTypeInternal _CVideo_CommitGameRecordingSegmentsUpload_Response_default_instance_;
class CVideo_GameRecordingCommitSegmentUploads_Request;
struct CVideo_GameRecordingCommitSegmentUploads_RequestDefaultTypeInternal;
extern CVideo_GameRecordingCommitSegmentUploads_RequestDefaultTypeInternal _CVideo_GameRecordingCommitSegmentUploads_Request_default_instance_;
class CVideo_GameRecordingCommitSegmentUploads_Response;
struct CVideo_GameRecordingCommitSegmentUploads_ResponseDefaultTypeInternal;
extern CVideo_GameRecordingCommitSegmentUploads_ResponseDefaultTypeInternal _CVideo_GameRecordingCommitSegmentUploads_Response_default_instance_;
class CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request;
struct CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_RequestDefaultTypeInternal;
extern CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_RequestDefaultTypeInternal _CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request_default_instance_;
class CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response;
struct CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_ResponseDefaultTypeInternal;
extern CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_ResponseDefaultTypeInternal _CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameRecordingClip* Arena::CreateMaybeMessage<::CGameRecordingClip>(Arena*);
template<> ::CGameRecording_CreateShareClip_Request* Arena::CreateMaybeMessage<::CGameRecording_CreateShareClip_Request>(Arena*);
template<> ::CGameRecording_CreateShareClip_Response* Arena::CreateMaybeMessage<::CGameRecording_CreateShareClip_Response>(Arena*);
template<> ::CGameRecording_DeleteSharedClip_Request* Arena::CreateMaybeMessage<::CGameRecording_DeleteSharedClip_Request>(Arena*);
template<> ::CGameRecording_DeleteSharedClip_Response* Arena::CreateMaybeMessage<::CGameRecording_DeleteSharedClip_Response>(Arena*);
template<> ::CGameRecording_GetSingleSharedClip_Request* Arena::CreateMaybeMessage<::CGameRecording_GetSingleSharedClip_Request>(Arena*);
template<> ::CGameRecording_GetSingleSharedClip_Response* Arena::CreateMaybeMessage<::CGameRecording_GetSingleSharedClip_Response>(Arena*);
template<> ::CVideoManagerClipID* Arena::CreateMaybeMessage<::CVideoManagerClipID>(Arena*);
template<> ::CVideo_BeginGameRecordingSegmentsUpload_Request* Arena::CreateMaybeMessage<::CVideo_BeginGameRecordingSegmentsUpload_Request>(Arena*);
template<> ::CVideo_BeginGameRecordingSegmentsUpload_Response* Arena::CreateMaybeMessage<::CVideo_BeginGameRecordingSegmentsUpload_Response>(Arena*);
template<> ::CVideo_CommitGameRecordingSegmentsUpload_Request* Arena::CreateMaybeMessage<::CVideo_CommitGameRecordingSegmentsUpload_Request>(Arena*);
template<> ::CVideo_CommitGameRecordingSegmentsUpload_Response* Arena::CreateMaybeMessage<::CVideo_CommitGameRecordingSegmentsUpload_Response>(Arena*);
template<> ::CVideo_GameRecordingCommitSegmentUploads_Request* Arena::CreateMaybeMessage<::CVideo_GameRecordingCommitSegmentUploads_Request>(Arena*);
template<> ::CVideo_GameRecordingCommitSegmentUploads_Response* Arena::CreateMaybeMessage<::CVideo_GameRecordingCommitSegmentUploads_Response>(Arena*);
template<> ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* Arena::CreateMaybeMessage<::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request>(Arena*);
template<> ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* Arena::CreateMaybeMessage<::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CVideoManagerClipID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideoManagerClipID) */ {
 public:
  inline CVideoManagerClipID() : CVideoManagerClipID(nullptr) {}
  virtual ~CVideoManagerClipID();
  explicit constexpr CVideoManagerClipID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideoManagerClipID(const CVideoManagerClipID& from);
  CVideoManagerClipID(CVideoManagerClipID&& from) noexcept
    : CVideoManagerClipID() {
    *this = ::std::move(from);
  }

  inline CVideoManagerClipID& operator=(const CVideoManagerClipID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideoManagerClipID& operator=(CVideoManagerClipID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideoManagerClipID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideoManagerClipID* internal_default_instance() {
    return reinterpret_cast<const CVideoManagerClipID*>(
               &_CVideoManagerClipID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CVideoManagerClipID& a, CVideoManagerClipID& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideoManagerClipID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideoManagerClipID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideoManagerClipID* New() const final {
    return CreateMaybeMessage<CVideoManagerClipID>(nullptr);
  }

  CVideoManagerClipID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideoManagerClipID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideoManagerClipID& from);
  void MergeFrom(const CVideoManagerClipID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideoManagerClipID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideoManagerClipID";
  }
  protected:
  explicit CVideoManagerClipID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManifestUrlFieldNumber = 4,
    kVideoManagerClipIdFieldNumber = 1,
    kVideoManagerVideoIdFieldNumber = 2,
    kServerTimelineIdFieldNumber = 3,
    kDurationMsFieldNumber = 5,
    kStartOffsetMsFieldNumber = 6,
  };
  // optional string manifest_url = 4;
  bool has_manifest_url() const;
  private:
  bool _internal_has_manifest_url() const;
  public:
  void clear_manifest_url();
  const std::string& manifest_url() const;
  void set_manifest_url(const std::string& value);
  void set_manifest_url(std::string&& value);
  void set_manifest_url(const char* value);
  void set_manifest_url(const char* value, size_t size);
  std::string* mutable_manifest_url();
  std::string* release_manifest_url();
  void set_allocated_manifest_url(std::string* manifest_url);
  private:
  const std::string& _internal_manifest_url() const;
  void _internal_set_manifest_url(const std::string& value);
  std::string* _internal_mutable_manifest_url();
  public:

  // optional fixed64 video_manager_clip_id = 1;
  bool has_video_manager_clip_id() const;
  private:
  bool _internal_has_video_manager_clip_id() const;
  public:
  void clear_video_manager_clip_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_clip_id() const;
  void set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_video_manager_clip_id() const;
  void _internal_set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 video_manager_video_id = 2;
  bool has_video_manager_video_id() const;
  private:
  bool _internal_has_video_manager_video_id() const;
  public:
  void clear_video_manager_video_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_video_id() const;
  void set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_video_manager_video_id() const;
  void _internal_set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 server_timeline_id = 3;
  bool has_server_timeline_id() const;
  private:
  bool _internal_has_server_timeline_id() const;
  public:
  void clear_server_timeline_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_timeline_id() const;
  void set_server_timeline_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_timeline_id() const;
  void _internal_set_server_timeline_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 duration_ms = 5;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_offset_ms = 6;
  bool has_start_offset_ms() const;
  private:
  bool _internal_has_start_offset_ms() const;
  public:
  void clear_start_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_offset_ms() const;
  void set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_offset_ms() const;
  void _internal_set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVideoManagerClipID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_url_;
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_clip_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 video_manager_video_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_timeline_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_offset_ms_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecordingClip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecordingClip) */ {
 public:
  inline CGameRecordingClip() : CGameRecordingClip(nullptr) {}
  virtual ~CGameRecordingClip();
  explicit constexpr CGameRecordingClip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecordingClip(const CGameRecordingClip& from);
  CGameRecordingClip(CGameRecordingClip&& from) noexcept
    : CGameRecordingClip() {
    *this = ::std::move(from);
  }

  inline CGameRecordingClip& operator=(const CGameRecordingClip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecordingClip& operator=(CGameRecordingClip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecordingClip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecordingClip* internal_default_instance() {
    return reinterpret_cast<const CGameRecordingClip*>(
               &_CGameRecordingClip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameRecordingClip& a, CGameRecordingClip& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecordingClip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecordingClip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecordingClip* New() const final {
    return CreateMaybeMessage<CGameRecordingClip>(nullptr);
  }

  CGameRecordingClip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecordingClip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecordingClip& from);
  void MergeFrom(const CGameRecordingClip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecordingClip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecordingClip";
  }
  protected:
  explicit CGameRecordingClip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoIdsFieldNumber = 9,
    kClipIdFieldNumber = 1,
    kGameidFieldNumber = 2,
    kTotalFileSizeBytesFieldNumber = 7,
    kDateRecordedFieldNumber = 4,
    kUploadCompleteFieldNumber = 11,
    kDurationMsFieldNumber = 12,
    kOwnerSteamidFieldNumber = 10,
  };
  // repeated .CVideoManagerClipID video_ids = 9;
  int video_ids_size() const;
  private:
  int _internal_video_ids_size() const;
  public:
  void clear_video_ids();
  ::CVideoManagerClipID* mutable_video_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideoManagerClipID >*
      mutable_video_ids();
  private:
  const ::CVideoManagerClipID& _internal_video_ids(int index) const;
  ::CVideoManagerClipID* _internal_add_video_ids();
  public:
  const ::CVideoManagerClipID& video_ids(int index) const;
  ::CVideoManagerClipID* add_video_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideoManagerClipID >&
      video_ids() const;

  // optional fixed64 clip_id = 1;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 clip_id() const;
  void set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clip_id() const;
  void _internal_set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 total_file_size_bytes = 7;
  bool has_total_file_size_bytes() const;
  private:
  bool _internal_has_total_file_size_bytes() const;
  public:
  void clear_total_file_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_size_bytes() const;
  void set_total_file_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_file_size_bytes() const;
  void _internal_set_total_file_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 date_recorded = 4;
  bool has_date_recorded() const;
  private:
  bool _internal_has_date_recorded() const;
  public:
  void clear_date_recorded();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded() const;
  void set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_recorded() const;
  void _internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool upload_complete = 11;
  bool has_upload_complete() const;
  private:
  bool _internal_has_upload_complete() const;
  public:
  void clear_upload_complete();
  bool upload_complete() const;
  void set_upload_complete(bool value);
  private:
  bool _internal_upload_complete() const;
  void _internal_set_upload_complete(bool value);
  public:

  // optional uint32 duration_ms = 12;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_ms() const;
  void _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 owner_steamid = 10;
  bool has_owner_steamid() const;
  private:
  bool _internal_has_owner_steamid() const;
  public:
  void clear_owner_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_steamid() const;
  void set_owner_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner_steamid() const;
  void _internal_set_owner_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecordingClip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideoManagerClipID > video_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clip_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_recorded_;
  bool upload_complete_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_steamid_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_CreateShareClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_CreateShareClip_Request) */ {
 public:
  inline CGameRecording_CreateShareClip_Request() : CGameRecording_CreateShareClip_Request(nullptr) {}
  virtual ~CGameRecording_CreateShareClip_Request();
  explicit constexpr CGameRecording_CreateShareClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_CreateShareClip_Request(const CGameRecording_CreateShareClip_Request& from);
  CGameRecording_CreateShareClip_Request(CGameRecording_CreateShareClip_Request&& from) noexcept
    : CGameRecording_CreateShareClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_CreateShareClip_Request& operator=(const CGameRecording_CreateShareClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_CreateShareClip_Request& operator=(CGameRecording_CreateShareClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_CreateShareClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_CreateShareClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_CreateShareClip_Request*>(
               &_CGameRecording_CreateShareClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameRecording_CreateShareClip_Request& a, CGameRecording_CreateShareClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_CreateShareClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_CreateShareClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_CreateShareClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_CreateShareClip_Request>(nullptr);
  }

  CGameRecording_CreateShareClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_CreateShareClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_CreateShareClip_Request& from);
  void MergeFrom(const CGameRecording_CreateShareClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_CreateShareClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_CreateShareClip_Request";
  }
  protected:
  explicit CGameRecording_CreateShareClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoDefFieldNumber = 3,
    kClipFieldNumber = 2,
  };
  // repeated .CMsgVideoGameRecordingDef video_def = 3;
  int video_def_size() const;
  private:
  int _internal_video_def_size() const;
  public:
  void clear_video_def();
  ::CMsgVideoGameRecordingDef* mutable_video_def(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingDef >*
      mutable_video_def();
  private:
  const ::CMsgVideoGameRecordingDef& _internal_video_def(int index) const;
  ::CMsgVideoGameRecordingDef* _internal_add_video_def();
  public:
  const ::CMsgVideoGameRecordingDef& video_def(int index) const;
  ::CMsgVideoGameRecordingDef* add_video_def();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingDef >&
      video_def() const;

  // optional .CGameRecordingClip clip = 2;
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  const ::CGameRecordingClip& clip() const;
  ::CGameRecordingClip* release_clip();
  ::CGameRecordingClip* mutable_clip();
  void set_allocated_clip(::CGameRecordingClip* clip);
  private:
  const ::CGameRecordingClip& _internal_clip() const;
  ::CGameRecordingClip* _internal_mutable_clip();
  public:
  void unsafe_arena_set_allocated_clip(
      ::CGameRecordingClip* clip);
  ::CGameRecordingClip* unsafe_arena_release_clip();

  // @@protoc_insertion_point(class_scope:CGameRecording_CreateShareClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingDef > video_def_;
  ::CGameRecordingClip* clip_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_CreateShareClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_CreateShareClip_Response) */ {
 public:
  inline CGameRecording_CreateShareClip_Response() : CGameRecording_CreateShareClip_Response(nullptr) {}
  virtual ~CGameRecording_CreateShareClip_Response();
  explicit constexpr CGameRecording_CreateShareClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_CreateShareClip_Response(const CGameRecording_CreateShareClip_Response& from);
  CGameRecording_CreateShareClip_Response(CGameRecording_CreateShareClip_Response&& from) noexcept
    : CGameRecording_CreateShareClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_CreateShareClip_Response& operator=(const CGameRecording_CreateShareClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_CreateShareClip_Response& operator=(CGameRecording_CreateShareClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_CreateShareClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_CreateShareClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_CreateShareClip_Response*>(
               &_CGameRecording_CreateShareClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGameRecording_CreateShareClip_Response& a, CGameRecording_CreateShareClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_CreateShareClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_CreateShareClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_CreateShareClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_CreateShareClip_Response>(nullptr);
  }

  CGameRecording_CreateShareClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_CreateShareClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_CreateShareClip_Response& from);
  void MergeFrom(const CGameRecording_CreateShareClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_CreateShareClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_CreateShareClip_Response";
  }
  protected:
  explicit CGameRecording_CreateShareClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipFieldNumber = 1,
  };
  // optional .CGameRecordingClip clip = 1;
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  const ::CGameRecordingClip& clip() const;
  ::CGameRecordingClip* release_clip();
  ::CGameRecordingClip* mutable_clip();
  void set_allocated_clip(::CGameRecordingClip* clip);
  private:
  const ::CGameRecordingClip& _internal_clip() const;
  ::CGameRecordingClip* _internal_mutable_clip();
  public:
  void unsafe_arena_set_allocated_clip(
      ::CGameRecordingClip* clip);
  ::CGameRecordingClip* unsafe_arena_release_clip();

  // @@protoc_insertion_point(class_scope:CGameRecording_CreateShareClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecordingClip* clip_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_DeleteSharedClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_DeleteSharedClip_Request) */ {
 public:
  inline CGameRecording_DeleteSharedClip_Request() : CGameRecording_DeleteSharedClip_Request(nullptr) {}
  virtual ~CGameRecording_DeleteSharedClip_Request();
  explicit constexpr CGameRecording_DeleteSharedClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_DeleteSharedClip_Request(const CGameRecording_DeleteSharedClip_Request& from);
  CGameRecording_DeleteSharedClip_Request(CGameRecording_DeleteSharedClip_Request&& from) noexcept
    : CGameRecording_DeleteSharedClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_DeleteSharedClip_Request& operator=(const CGameRecording_DeleteSharedClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_DeleteSharedClip_Request& operator=(CGameRecording_DeleteSharedClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_DeleteSharedClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_DeleteSharedClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_DeleteSharedClip_Request*>(
               &_CGameRecording_DeleteSharedClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameRecording_DeleteSharedClip_Request& a, CGameRecording_DeleteSharedClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_DeleteSharedClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_DeleteSharedClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_DeleteSharedClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_DeleteSharedClip_Request>(nullptr);
  }

  CGameRecording_DeleteSharedClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_DeleteSharedClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_DeleteSharedClip_Request& from);
  void MergeFrom(const CGameRecording_DeleteSharedClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_DeleteSharedClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_DeleteSharedClip_Request";
  }
  protected:
  explicit CGameRecording_DeleteSharedClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 2,
  };
  // optional fixed64 clip_id = 2;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 clip_id() const;
  void set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clip_id() const;
  void _internal_set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_DeleteSharedClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clip_id_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_DeleteSharedClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_DeleteSharedClip_Response) */ {
 public:
  inline CGameRecording_DeleteSharedClip_Response() : CGameRecording_DeleteSharedClip_Response(nullptr) {}
  virtual ~CGameRecording_DeleteSharedClip_Response();
  explicit constexpr CGameRecording_DeleteSharedClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_DeleteSharedClip_Response(const CGameRecording_DeleteSharedClip_Response& from);
  CGameRecording_DeleteSharedClip_Response(CGameRecording_DeleteSharedClip_Response&& from) noexcept
    : CGameRecording_DeleteSharedClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_DeleteSharedClip_Response& operator=(const CGameRecording_DeleteSharedClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_DeleteSharedClip_Response& operator=(CGameRecording_DeleteSharedClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_DeleteSharedClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_DeleteSharedClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_DeleteSharedClip_Response*>(
               &_CGameRecording_DeleteSharedClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGameRecording_DeleteSharedClip_Response& a, CGameRecording_DeleteSharedClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_DeleteSharedClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_DeleteSharedClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_DeleteSharedClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_DeleteSharedClip_Response>(nullptr);
  }

  CGameRecording_DeleteSharedClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_DeleteSharedClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_DeleteSharedClip_Response& from);
  void MergeFrom(const CGameRecording_DeleteSharedClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_DeleteSharedClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_DeleteSharedClip_Response";
  }
  protected:
  explicit CGameRecording_DeleteSharedClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameRecording_DeleteSharedClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetSingleSharedClip_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetSingleSharedClip_Request) */ {
 public:
  inline CGameRecording_GetSingleSharedClip_Request() : CGameRecording_GetSingleSharedClip_Request(nullptr) {}
  virtual ~CGameRecording_GetSingleSharedClip_Request();
  explicit constexpr CGameRecording_GetSingleSharedClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetSingleSharedClip_Request(const CGameRecording_GetSingleSharedClip_Request& from);
  CGameRecording_GetSingleSharedClip_Request(CGameRecording_GetSingleSharedClip_Request&& from) noexcept
    : CGameRecording_GetSingleSharedClip_Request() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetSingleSharedClip_Request& operator=(const CGameRecording_GetSingleSharedClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetSingleSharedClip_Request& operator=(CGameRecording_GetSingleSharedClip_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetSingleSharedClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetSingleSharedClip_Request* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetSingleSharedClip_Request*>(
               &_CGameRecording_GetSingleSharedClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CGameRecording_GetSingleSharedClip_Request& a, CGameRecording_GetSingleSharedClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetSingleSharedClip_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetSingleSharedClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetSingleSharedClip_Request* New() const final {
    return CreateMaybeMessage<CGameRecording_GetSingleSharedClip_Request>(nullptr);
  }

  CGameRecording_GetSingleSharedClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetSingleSharedClip_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetSingleSharedClip_Request& from);
  void MergeFrom(const CGameRecording_GetSingleSharedClip_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetSingleSharedClip_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetSingleSharedClip_Request";
  }
  protected:
  explicit CGameRecording_GetSingleSharedClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 2,
  };
  // optional fixed64 clip_id = 2;
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 clip_id() const;
  void set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clip_id() const;
  void _internal_set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_GetSingleSharedClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clip_id_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_GetSingleSharedClip_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_GetSingleSharedClip_Response) */ {
 public:
  inline CGameRecording_GetSingleSharedClip_Response() : CGameRecording_GetSingleSharedClip_Response(nullptr) {}
  virtual ~CGameRecording_GetSingleSharedClip_Response();
  explicit constexpr CGameRecording_GetSingleSharedClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_GetSingleSharedClip_Response(const CGameRecording_GetSingleSharedClip_Response& from);
  CGameRecording_GetSingleSharedClip_Response(CGameRecording_GetSingleSharedClip_Response&& from) noexcept
    : CGameRecording_GetSingleSharedClip_Response() {
    *this = ::std::move(from);
  }

  inline CGameRecording_GetSingleSharedClip_Response& operator=(const CGameRecording_GetSingleSharedClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_GetSingleSharedClip_Response& operator=(CGameRecording_GetSingleSharedClip_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_GetSingleSharedClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_GetSingleSharedClip_Response* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_GetSingleSharedClip_Response*>(
               &_CGameRecording_GetSingleSharedClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CGameRecording_GetSingleSharedClip_Response& a, CGameRecording_GetSingleSharedClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_GetSingleSharedClip_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_GetSingleSharedClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_GetSingleSharedClip_Response* New() const final {
    return CreateMaybeMessage<CGameRecording_GetSingleSharedClip_Response>(nullptr);
  }

  CGameRecording_GetSingleSharedClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_GetSingleSharedClip_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_GetSingleSharedClip_Response& from);
  void MergeFrom(const CGameRecording_GetSingleSharedClip_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_GetSingleSharedClip_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_GetSingleSharedClip_Response";
  }
  protected:
  explicit CGameRecording_GetSingleSharedClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipFieldNumber = 1,
  };
  // optional .CGameRecordingClip clip = 1;
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  const ::CGameRecordingClip& clip() const;
  ::CGameRecordingClip* release_clip();
  ::CGameRecordingClip* mutable_clip();
  void set_allocated_clip(::CGameRecordingClip* clip);
  private:
  const ::CGameRecordingClip& _internal_clip() const;
  ::CGameRecordingClip* _internal_mutable_clip();
  public:
  void unsafe_arena_set_allocated_clip(
      ::CGameRecordingClip* clip);
  ::CGameRecordingClip* unsafe_arena_release_clip();

  // @@protoc_insertion_point(class_scope:CGameRecording_GetSingleSharedClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CGameRecordingClip* clip_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_BeginGameRecordingSegmentsUpload_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_BeginGameRecordingSegmentsUpload_Request) */ {
 public:
  inline CVideo_BeginGameRecordingSegmentsUpload_Request() : CVideo_BeginGameRecordingSegmentsUpload_Request(nullptr) {}
  virtual ~CVideo_BeginGameRecordingSegmentsUpload_Request();
  explicit constexpr CVideo_BeginGameRecordingSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_BeginGameRecordingSegmentsUpload_Request(const CVideo_BeginGameRecordingSegmentsUpload_Request& from);
  CVideo_BeginGameRecordingSegmentsUpload_Request(CVideo_BeginGameRecordingSegmentsUpload_Request&& from) noexcept
    : CVideo_BeginGameRecordingSegmentsUpload_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_BeginGameRecordingSegmentsUpload_Request& operator=(const CVideo_BeginGameRecordingSegmentsUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_BeginGameRecordingSegmentsUpload_Request& operator=(CVideo_BeginGameRecordingSegmentsUpload_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_BeginGameRecordingSegmentsUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_BeginGameRecordingSegmentsUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_BeginGameRecordingSegmentsUpload_Request*>(
               &_CVideo_BeginGameRecordingSegmentsUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CVideo_BeginGameRecordingSegmentsUpload_Request& a, CVideo_BeginGameRecordingSegmentsUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_BeginGameRecordingSegmentsUpload_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_BeginGameRecordingSegmentsUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_BeginGameRecordingSegmentsUpload_Request* New() const final {
    return CreateMaybeMessage<CVideo_BeginGameRecordingSegmentsUpload_Request>(nullptr);
  }

  CVideo_BeginGameRecordingSegmentsUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_BeginGameRecordingSegmentsUpload_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_BeginGameRecordingSegmentsUpload_Request& from);
  void MergeFrom(const CVideo_BeginGameRecordingSegmentsUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_BeginGameRecordingSegmentsUpload_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_BeginGameRecordingSegmentsUpload_Request";
  }
  protected:
  explicit CVideo_BeginGameRecordingSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsToStoreFieldNumber = 4,
    kComponentNameFieldNumber = 2,
    kRepresentationNameFieldNumber = 3,
    kRecordingIdFieldNumber = 1,
  };
  // repeated .CVideo_GameRecordingSegmentInfo segments_to_store = 4;
  int segments_to_store_size() const;
  private:
  int _internal_segments_to_store_size() const;
  public:
  void clear_segments_to_store();
  ::CVideo_GameRecordingSegmentInfo* mutable_segments_to_store(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >*
      mutable_segments_to_store();
  private:
  const ::CVideo_GameRecordingSegmentInfo& _internal_segments_to_store(int index) const;
  ::CVideo_GameRecordingSegmentInfo* _internal_add_segments_to_store();
  public:
  const ::CVideo_GameRecordingSegmentInfo& segments_to_store(int index) const;
  ::CVideo_GameRecordingSegmentInfo* add_segments_to_store();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >&
      segments_to_store() const;

  // optional string component_name = 2;
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string representation_name = 3;
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  void set_representation_name(const std::string& value);
  void set_representation_name(std::string&& value);
  void set_representation_name(const char* value);
  void set_representation_name(const char* value, size_t size);
  std::string* mutable_representation_name();
  std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional uint64 recording_id = 1;
  bool has_recording_id() const;
  private:
  bool _internal_has_recording_id() const;
  public:
  void clear_recording_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id() const;
  void set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recording_id() const;
  void _internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_BeginGameRecordingSegmentsUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo > segments_to_store_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_BeginGameRecordingSegmentsUpload_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_BeginGameRecordingSegmentsUpload_Response) */ {
 public:
  inline CVideo_BeginGameRecordingSegmentsUpload_Response() : CVideo_BeginGameRecordingSegmentsUpload_Response(nullptr) {}
  virtual ~CVideo_BeginGameRecordingSegmentsUpload_Response();
  explicit constexpr CVideo_BeginGameRecordingSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_BeginGameRecordingSegmentsUpload_Response(const CVideo_BeginGameRecordingSegmentsUpload_Response& from);
  CVideo_BeginGameRecordingSegmentsUpload_Response(CVideo_BeginGameRecordingSegmentsUpload_Response&& from) noexcept
    : CVideo_BeginGameRecordingSegmentsUpload_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_BeginGameRecordingSegmentsUpload_Response& operator=(const CVideo_BeginGameRecordingSegmentsUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_BeginGameRecordingSegmentsUpload_Response& operator=(CVideo_BeginGameRecordingSegmentsUpload_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_BeginGameRecordingSegmentsUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_BeginGameRecordingSegmentsUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_BeginGameRecordingSegmentsUpload_Response*>(
               &_CVideo_BeginGameRecordingSegmentsUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CVideo_BeginGameRecordingSegmentsUpload_Response& a, CVideo_BeginGameRecordingSegmentsUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_BeginGameRecordingSegmentsUpload_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_BeginGameRecordingSegmentsUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_BeginGameRecordingSegmentsUpload_Response* New() const final {
    return CreateMaybeMessage<CVideo_BeginGameRecordingSegmentsUpload_Response>(nullptr);
  }

  CVideo_BeginGameRecordingSegmentsUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_BeginGameRecordingSegmentsUpload_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_BeginGameRecordingSegmentsUpload_Response& from);
  void MergeFrom(const CVideo_BeginGameRecordingSegmentsUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_BeginGameRecordingSegmentsUpload_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_BeginGameRecordingSegmentsUpload_Response";
  }
  protected:
  explicit CVideo_BeginGameRecordingSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsNeededFieldNumber = 1,
    kCallAgainFieldNumber = 2,
  };
  // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
  int segments_needed_size() const;
  private:
  int _internal_segments_needed_size() const;
  public:
  void clear_segments_needed();
  ::CVideo_GameRecordingSegmentUploadInfo* mutable_segments_needed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >*
      mutable_segments_needed();
  private:
  const ::CVideo_GameRecordingSegmentUploadInfo& _internal_segments_needed(int index) const;
  ::CVideo_GameRecordingSegmentUploadInfo* _internal_add_segments_needed();
  public:
  const ::CVideo_GameRecordingSegmentUploadInfo& segments_needed(int index) const;
  ::CVideo_GameRecordingSegmentUploadInfo* add_segments_needed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >&
      segments_needed() const;

  // optional bool call_again = 2;
  bool has_call_again() const;
  private:
  bool _internal_has_call_again() const;
  public:
  void clear_call_again();
  bool call_again() const;
  void set_call_again(bool value);
  private:
  bool _internal_call_again() const;
  void _internal_set_call_again(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_BeginGameRecordingSegmentsUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo > segments_needed_;
  bool call_again_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_CommitGameRecordingSegmentsUpload_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_CommitGameRecordingSegmentsUpload_Request) */ {
 public:
  inline CVideo_CommitGameRecordingSegmentsUpload_Request() : CVideo_CommitGameRecordingSegmentsUpload_Request(nullptr) {}
  virtual ~CVideo_CommitGameRecordingSegmentsUpload_Request();
  explicit constexpr CVideo_CommitGameRecordingSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_CommitGameRecordingSegmentsUpload_Request(const CVideo_CommitGameRecordingSegmentsUpload_Request& from);
  CVideo_CommitGameRecordingSegmentsUpload_Request(CVideo_CommitGameRecordingSegmentsUpload_Request&& from) noexcept
    : CVideo_CommitGameRecordingSegmentsUpload_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_CommitGameRecordingSegmentsUpload_Request& operator=(const CVideo_CommitGameRecordingSegmentsUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_CommitGameRecordingSegmentsUpload_Request& operator=(CVideo_CommitGameRecordingSegmentsUpload_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_CommitGameRecordingSegmentsUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_CommitGameRecordingSegmentsUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_CommitGameRecordingSegmentsUpload_Request*>(
               &_CVideo_CommitGameRecordingSegmentsUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CVideo_CommitGameRecordingSegmentsUpload_Request& a, CVideo_CommitGameRecordingSegmentsUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_CommitGameRecordingSegmentsUpload_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_CommitGameRecordingSegmentsUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_CommitGameRecordingSegmentsUpload_Request* New() const final {
    return CreateMaybeMessage<CVideo_CommitGameRecordingSegmentsUpload_Request>(nullptr);
  }

  CVideo_CommitGameRecordingSegmentsUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_CommitGameRecordingSegmentsUpload_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_CommitGameRecordingSegmentsUpload_Request& from);
  void MergeFrom(const CVideo_CommitGameRecordingSegmentsUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_CommitGameRecordingSegmentsUpload_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_CommitGameRecordingSegmentsUpload_Request";
  }
  protected:
  explicit CVideo_CommitGameRecordingSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 2,
    kRepresentationNameFieldNumber = 3,
    kRecordingIdFieldNumber = 1,
    kFirstSegmentNumberFieldNumber = 4,
    kNumSegmentsFieldNumber = 5,
    kUploadResultFieldNumber = 6,
  };
  // optional string component_name = 2;
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string representation_name = 3;
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  void set_representation_name(const std::string& value);
  void set_representation_name(std::string&& value);
  void set_representation_name(const char* value);
  void set_representation_name(const char* value, size_t size);
  std::string* mutable_representation_name();
  std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional uint64 recording_id = 1;
  bool has_recording_id() const;
  private:
  bool _internal_has_recording_id() const;
  public:
  void clear_recording_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id() const;
  void set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recording_id() const;
  void _internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 first_segment_number = 4;
  bool has_first_segment_number() const;
  private:
  bool _internal_has_first_segment_number() const;
  public:
  void clear_first_segment_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_segment_number() const;
  void set_first_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_segment_number() const;
  void _internal_set_first_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_segments = 5;
  bool has_num_segments() const;
  private:
  bool _internal_has_num_segments() const;
  public:
  void clear_num_segments();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_segments() const;
  void set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_segments() const;
  void _internal_set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 upload_result = 6;
  bool has_upload_result() const;
  private:
  bool _internal_has_upload_result() const;
  public:
  void clear_upload_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 upload_result() const;
  void set_upload_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upload_result() const;
  void _internal_set_upload_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_CommitGameRecordingSegmentsUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_segment_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_segments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upload_result_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_CommitGameRecordingSegmentsUpload_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_CommitGameRecordingSegmentsUpload_Response) */ {
 public:
  inline CVideo_CommitGameRecordingSegmentsUpload_Response() : CVideo_CommitGameRecordingSegmentsUpload_Response(nullptr) {}
  virtual ~CVideo_CommitGameRecordingSegmentsUpload_Response();
  explicit constexpr CVideo_CommitGameRecordingSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_CommitGameRecordingSegmentsUpload_Response(const CVideo_CommitGameRecordingSegmentsUpload_Response& from);
  CVideo_CommitGameRecordingSegmentsUpload_Response(CVideo_CommitGameRecordingSegmentsUpload_Response&& from) noexcept
    : CVideo_CommitGameRecordingSegmentsUpload_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_CommitGameRecordingSegmentsUpload_Response& operator=(const CVideo_CommitGameRecordingSegmentsUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_CommitGameRecordingSegmentsUpload_Response& operator=(CVideo_CommitGameRecordingSegmentsUpload_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_CommitGameRecordingSegmentsUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_CommitGameRecordingSegmentsUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_CommitGameRecordingSegmentsUpload_Response*>(
               &_CVideo_CommitGameRecordingSegmentsUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CVideo_CommitGameRecordingSegmentsUpload_Response& a, CVideo_CommitGameRecordingSegmentsUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_CommitGameRecordingSegmentsUpload_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_CommitGameRecordingSegmentsUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_CommitGameRecordingSegmentsUpload_Response* New() const final {
    return CreateMaybeMessage<CVideo_CommitGameRecordingSegmentsUpload_Response>(nullptr);
  }

  CVideo_CommitGameRecordingSegmentsUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_CommitGameRecordingSegmentsUpload_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_CommitGameRecordingSegmentsUpload_Response& from);
  void MergeFrom(const CVideo_CommitGameRecordingSegmentsUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_CommitGameRecordingSegmentsUpload_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_CommitGameRecordingSegmentsUpload_Response";
  }
  protected:
  explicit CVideo_CommitGameRecordingSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CVideo_CommitGameRecordingSegmentsUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request) */ {
 public:
  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request() : CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(nullptr) {}
  virtual ~CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request();
  explicit constexpr CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from);
  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request&& from) noexcept
    : CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& operator=(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& operator=(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request*>(
               &_CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& a, CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request>(nullptr);
  }

  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from);
  void MergeFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request";
  }
  protected:
  explicit CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordingIdFieldNumber = 1,
  };
  // optional uint64 recording_id = 1;
  bool has_recording_id() const;
  private:
  bool _internal_has_recording_id() const;
  public:
  void clear_recording_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id() const;
  void set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recording_id() const;
  void _internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response) */ {
 public:
  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response() : CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(nullptr) {}
  virtual ~CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response();
  explicit constexpr CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from);
  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response&& from) noexcept
    : CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& operator=(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& operator=(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response*>(
               &_CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& a, CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response>(nullptr);
  }

  CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from);
  void MergeFrom(const CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response";
  }
  protected:
  explicit CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsNeededFieldNumber = 1,
  };
  // repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
  int segments_needed_size() const;
  private:
  int _internal_segments_needed_size() const;
  public:
  void clear_segments_needed();
  ::CVideo_GameRecordingSegmentUploadInfo* mutable_segments_needed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >*
      mutable_segments_needed();
  private:
  const ::CVideo_GameRecordingSegmentUploadInfo& _internal_segments_needed(int index) const;
  ::CVideo_GameRecordingSegmentUploadInfo* _internal_add_segments_needed();
  public:
  const ::CVideo_GameRecordingSegmentUploadInfo& segments_needed(int index) const;
  ::CVideo_GameRecordingSegmentUploadInfo* add_segments_needed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >&
      segments_needed() const;

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo > segments_needed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingCommitSegmentUploads_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingCommitSegmentUploads_Request) */ {
 public:
  inline CVideo_GameRecordingCommitSegmentUploads_Request() : CVideo_GameRecordingCommitSegmentUploads_Request(nullptr) {}
  virtual ~CVideo_GameRecordingCommitSegmentUploads_Request();
  explicit constexpr CVideo_GameRecordingCommitSegmentUploads_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingCommitSegmentUploads_Request(const CVideo_GameRecordingCommitSegmentUploads_Request& from);
  CVideo_GameRecordingCommitSegmentUploads_Request(CVideo_GameRecordingCommitSegmentUploads_Request&& from) noexcept
    : CVideo_GameRecordingCommitSegmentUploads_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingCommitSegmentUploads_Request& operator=(const CVideo_GameRecordingCommitSegmentUploads_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingCommitSegmentUploads_Request& operator=(CVideo_GameRecordingCommitSegmentUploads_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingCommitSegmentUploads_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingCommitSegmentUploads_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingCommitSegmentUploads_Request*>(
               &_CVideo_GameRecordingCommitSegmentUploads_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CVideo_GameRecordingCommitSegmentUploads_Request& a, CVideo_GameRecordingCommitSegmentUploads_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingCommitSegmentUploads_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingCommitSegmentUploads_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingCommitSegmentUploads_Request* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingCommitSegmentUploads_Request>(nullptr);
  }

  CVideo_GameRecordingCommitSegmentUploads_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingCommitSegmentUploads_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingCommitSegmentUploads_Request& from);
  void MergeFrom(const CVideo_GameRecordingCommitSegmentUploads_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingCommitSegmentUploads_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingCommitSegmentUploads_Request";
  }
  protected:
  explicit CVideo_GameRecordingCommitSegmentUploads_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsUploadedFieldNumber = 2,
    kRecordingIdFieldNumber = 1,
  };
  // repeated .CVideo_GameRecordingSegmentInfo segments_uploaded = 2;
  int segments_uploaded_size() const;
  private:
  int _internal_segments_uploaded_size() const;
  public:
  void clear_segments_uploaded();
  ::CVideo_GameRecordingSegmentInfo* mutable_segments_uploaded(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >*
      mutable_segments_uploaded();
  private:
  const ::CVideo_GameRecordingSegmentInfo& _internal_segments_uploaded(int index) const;
  ::CVideo_GameRecordingSegmentInfo* _internal_add_segments_uploaded();
  public:
  const ::CVideo_GameRecordingSegmentInfo& segments_uploaded(int index) const;
  ::CVideo_GameRecordingSegmentInfo* add_segments_uploaded();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >&
      segments_uploaded() const;

  // optional uint64 recording_id = 1;
  bool has_recording_id() const;
  private:
  bool _internal_has_recording_id() const;
  public:
  void clear_recording_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id() const;
  void set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recording_id() const;
  void _internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingCommitSegmentUploads_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo > segments_uploaded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recording_id_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameRecordingCommitSegmentUploads_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameRecordingCommitSegmentUploads_Response) */ {
 public:
  inline CVideo_GameRecordingCommitSegmentUploads_Response() : CVideo_GameRecordingCommitSegmentUploads_Response(nullptr) {}
  virtual ~CVideo_GameRecordingCommitSegmentUploads_Response();
  explicit constexpr CVideo_GameRecordingCommitSegmentUploads_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameRecordingCommitSegmentUploads_Response(const CVideo_GameRecordingCommitSegmentUploads_Response& from);
  CVideo_GameRecordingCommitSegmentUploads_Response(CVideo_GameRecordingCommitSegmentUploads_Response&& from) noexcept
    : CVideo_GameRecordingCommitSegmentUploads_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_GameRecordingCommitSegmentUploads_Response& operator=(const CVideo_GameRecordingCommitSegmentUploads_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameRecordingCommitSegmentUploads_Response& operator=(CVideo_GameRecordingCommitSegmentUploads_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CVideo_GameRecordingCommitSegmentUploads_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameRecordingCommitSegmentUploads_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameRecordingCommitSegmentUploads_Response*>(
               &_CVideo_GameRecordingCommitSegmentUploads_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CVideo_GameRecordingCommitSegmentUploads_Response& a, CVideo_GameRecordingCommitSegmentUploads_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameRecordingCommitSegmentUploads_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameRecordingCommitSegmentUploads_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CVideo_GameRecordingCommitSegmentUploads_Response* New() const final {
    return CreateMaybeMessage<CVideo_GameRecordingCommitSegmentUploads_Response>(nullptr);
  }

  CVideo_GameRecordingCommitSegmentUploads_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CVideo_GameRecordingCommitSegmentUploads_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CVideo_GameRecordingCommitSegmentUploads_Response& from);
  void MergeFrom(const CVideo_GameRecordingCommitSegmentUploads_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameRecordingCommitSegmentUploads_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameRecordingCommitSegmentUploads_Response";
  }
  protected:
  explicit CVideo_GameRecordingCommitSegmentUploads_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CVideo_GameRecordingCommitSegmentUploads_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamerecording_2esteamclient_2eproto;
};
// ===================================================================

class GameRecordingClip_Stub;

class GameRecordingClip : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameRecordingClip() {};
 public:
  virtual ~GameRecordingClip();

  typedef GameRecordingClip_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CreateShareClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_CreateShareClip_Request* request,
                       ::CGameRecording_CreateShareClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_DeleteSharedClip_Request* request,
                       ::CGameRecording_DeleteSharedClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSingleSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetSingleSharedClip_Request* request,
                       ::CGameRecording_GetSingleSharedClip_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameRecordingClip);
};

class GameRecordingClip_Stub : public GameRecordingClip {
 public:
  GameRecordingClip_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameRecordingClip_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameRecordingClip_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameRecordingClip ------------------------------------------

  void CreateShareClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_CreateShareClip_Request* request,
                       ::CGameRecording_CreateShareClip_Response* response,
                       ::google::protobuf::Closure* done);
  void DeleteSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_DeleteSharedClip_Request* request,
                       ::CGameRecording_DeleteSharedClip_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSingleSharedClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameRecording_GetSingleSharedClip_Request* request,
                       ::CGameRecording_GetSingleSharedClip_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameRecordingClip_Stub);
};


// -------------------------------------------------------------------

class VideoClip_Stub;

class VideoClip : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline VideoClip() {};
 public:
  virtual ~VideoClip();

  typedef VideoClip_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void BeginGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_BeginGameRecordingSegmentsUpload_Request* request,
                       ::CVideo_BeginGameRecordingSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_CommitGameRecordingSegmentsUpload_Request* request,
                       ::CVideo_CommitGameRecordingSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNextBatchOfSegmentsToUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* request,
                       ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitSegmentUploads(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_GameRecordingCommitSegmentUploads_Request* request,
                       ::CVideo_GameRecordingCommitSegmentUploads_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(VideoClip);
};

class VideoClip_Stub : public VideoClip {
 public:
  VideoClip_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  VideoClip_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~VideoClip_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements VideoClip ------------------------------------------

  void BeginGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_BeginGameRecordingSegmentsUpload_Request* request,
                       ::CVideo_BeginGameRecordingSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void CommitGameRecordingSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_CommitGameRecordingSegmentsUpload_Request* request,
                       ::CVideo_CommitGameRecordingSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void GetNextBatchOfSegmentsToUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request* request,
                       ::CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void CommitSegmentUploads(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_GameRecordingCommitSegmentUploads_Request* request,
                       ::CVideo_GameRecordingCommitSegmentUploads_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(VideoClip_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVideoManagerClipID

// optional fixed64 video_manager_clip_id = 1;
inline bool CVideoManagerClipID::_internal_has_video_manager_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideoManagerClipID::has_video_manager_clip_id() const {
  return _internal_has_video_manager_clip_id();
}
inline void CVideoManagerClipID::clear_video_manager_clip_id() {
  video_manager_clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideoManagerClipID::_internal_video_manager_clip_id() const {
  return video_manager_clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideoManagerClipID::video_manager_clip_id() const {
  // @@protoc_insertion_point(field_get:CVideoManagerClipID.video_manager_clip_id)
  return _internal_video_manager_clip_id();
}
inline void CVideoManagerClipID::_internal_set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  video_manager_clip_id_ = value;
}
inline void CVideoManagerClipID::set_video_manager_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_video_manager_clip_id(value);
  // @@protoc_insertion_point(field_set:CVideoManagerClipID.video_manager_clip_id)
}

// optional fixed64 video_manager_video_id = 2;
inline bool CVideoManagerClipID::_internal_has_video_manager_video_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideoManagerClipID::has_video_manager_video_id() const {
  return _internal_has_video_manager_video_id();
}
inline void CVideoManagerClipID::clear_video_manager_video_id() {
  video_manager_video_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideoManagerClipID::_internal_video_manager_video_id() const {
  return video_manager_video_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideoManagerClipID::video_manager_video_id() const {
  // @@protoc_insertion_point(field_get:CVideoManagerClipID.video_manager_video_id)
  return _internal_video_manager_video_id();
}
inline void CVideoManagerClipID::_internal_set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  video_manager_video_id_ = value;
}
inline void CVideoManagerClipID::set_video_manager_video_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_video_manager_video_id(value);
  // @@protoc_insertion_point(field_set:CVideoManagerClipID.video_manager_video_id)
}

// optional fixed64 server_timeline_id = 3;
inline bool CVideoManagerClipID::_internal_has_server_timeline_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideoManagerClipID::has_server_timeline_id() const {
  return _internal_has_server_timeline_id();
}
inline void CVideoManagerClipID::clear_server_timeline_id() {
  server_timeline_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideoManagerClipID::_internal_server_timeline_id() const {
  return server_timeline_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideoManagerClipID::server_timeline_id() const {
  // @@protoc_insertion_point(field_get:CVideoManagerClipID.server_timeline_id)
  return _internal_server_timeline_id();
}
inline void CVideoManagerClipID::_internal_set_server_timeline_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  server_timeline_id_ = value;
}
inline void CVideoManagerClipID::set_server_timeline_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_timeline_id(value);
  // @@protoc_insertion_point(field_set:CVideoManagerClipID.server_timeline_id)
}

// optional string manifest_url = 4;
inline bool CVideoManagerClipID::_internal_has_manifest_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideoManagerClipID::has_manifest_url() const {
  return _internal_has_manifest_url();
}
inline void CVideoManagerClipID::clear_manifest_url() {
  manifest_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideoManagerClipID::manifest_url() const {
  // @@protoc_insertion_point(field_get:CVideoManagerClipID.manifest_url)
  return _internal_manifest_url();
}
inline void CVideoManagerClipID::set_manifest_url(const std::string& value) {
  _internal_set_manifest_url(value);
  // @@protoc_insertion_point(field_set:CVideoManagerClipID.manifest_url)
}
inline std::string* CVideoManagerClipID::mutable_manifest_url() {
  // @@protoc_insertion_point(field_mutable:CVideoManagerClipID.manifest_url)
  return _internal_mutable_manifest_url();
}
inline const std::string& CVideoManagerClipID::_internal_manifest_url() const {
  return manifest_url_.Get();
}
inline void CVideoManagerClipID::_internal_set_manifest_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideoManagerClipID::set_manifest_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideoManagerClipID.manifest_url)
}
inline void CVideoManagerClipID::set_manifest_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideoManagerClipID.manifest_url)
}
inline void CVideoManagerClipID::set_manifest_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manifest_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideoManagerClipID.manifest_url)
}
inline std::string* CVideoManagerClipID::_internal_mutable_manifest_url() {
  _has_bits_[0] |= 0x00000001u;
  return manifest_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideoManagerClipID::release_manifest_url() {
  // @@protoc_insertion_point(field_release:CVideoManagerClipID.manifest_url)
  if (!_internal_has_manifest_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manifest_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideoManagerClipID::set_allocated_manifest_url(std::string* manifest_url) {
  if (manifest_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manifest_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideoManagerClipID.manifest_url)
}

// optional uint32 duration_ms = 5;
inline bool CVideoManagerClipID::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVideoManagerClipID::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CVideoManagerClipID::clear_duration_ms() {
  duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideoManagerClipID::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideoManagerClipID::duration_ms() const {
  // @@protoc_insertion_point(field_get:CVideoManagerClipID.duration_ms)
  return _internal_duration_ms();
}
inline void CVideoManagerClipID::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  duration_ms_ = value;
}
inline void CVideoManagerClipID::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CVideoManagerClipID.duration_ms)
}

// optional uint32 start_offset_ms = 6;
inline bool CVideoManagerClipID::_internal_has_start_offset_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVideoManagerClipID::has_start_offset_ms() const {
  return _internal_has_start_offset_ms();
}
inline void CVideoManagerClipID::clear_start_offset_ms() {
  start_offset_ms_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideoManagerClipID::_internal_start_offset_ms() const {
  return start_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideoManagerClipID::start_offset_ms() const {
  // @@protoc_insertion_point(field_get:CVideoManagerClipID.start_offset_ms)
  return _internal_start_offset_ms();
}
inline void CVideoManagerClipID::_internal_set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  start_offset_ms_ = value;
}
inline void CVideoManagerClipID::set_start_offset_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_offset_ms(value);
  // @@protoc_insertion_point(field_set:CVideoManagerClipID.start_offset_ms)
}

// -------------------------------------------------------------------

// CGameRecordingClip

// optional fixed64 clip_id = 1;
inline bool CGameRecordingClip::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecordingClip::clear_clip_id() {
  clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::_internal_clip_id() const {
  return clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.clip_id)
  return _internal_clip_id();
}
inline void CGameRecordingClip::_internal_set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_ = value;
}
inline void CGameRecordingClip::set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.clip_id)
}

// optional uint64 gameid = 2;
inline bool CGameRecordingClip::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_gameid() const {
  return _internal_has_gameid();
}
inline void CGameRecordingClip::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::gameid() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.gameid)
  return _internal_gameid();
}
inline void CGameRecordingClip::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  gameid_ = value;
}
inline void CGameRecordingClip::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.gameid)
}

// optional uint32 date_recorded = 4;
inline bool CGameRecordingClip::_internal_has_date_recorded() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_date_recorded() const {
  return _internal_has_date_recorded();
}
inline void CGameRecordingClip::clear_date_recorded() {
  date_recorded_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClip::_internal_date_recorded() const {
  return date_recorded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClip::date_recorded() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.date_recorded)
  return _internal_date_recorded();
}
inline void CGameRecordingClip::_internal_set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  date_recorded_ = value;
}
inline void CGameRecordingClip::set_date_recorded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_recorded(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.date_recorded)
}

// optional uint64 total_file_size_bytes = 7;
inline bool CGameRecordingClip::_internal_has_total_file_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_total_file_size_bytes() const {
  return _internal_has_total_file_size_bytes();
}
inline void CGameRecordingClip::clear_total_file_size_bytes() {
  total_file_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::_internal_total_file_size_bytes() const {
  return total_file_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::total_file_size_bytes() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.total_file_size_bytes)
  return _internal_total_file_size_bytes();
}
inline void CGameRecordingClip::_internal_set_total_file_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  total_file_size_bytes_ = value;
}
inline void CGameRecordingClip::set_total_file_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_file_size_bytes(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.total_file_size_bytes)
}

// repeated .CVideoManagerClipID video_ids = 9;
inline int CGameRecordingClip::_internal_video_ids_size() const {
  return video_ids_.size();
}
inline int CGameRecordingClip::video_ids_size() const {
  return _internal_video_ids_size();
}
inline void CGameRecordingClip::clear_video_ids() {
  video_ids_.Clear();
}
inline ::CVideoManagerClipID* CGameRecordingClip::mutable_video_ids(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecordingClip.video_ids)
  return video_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideoManagerClipID >*
CGameRecordingClip::mutable_video_ids() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecordingClip.video_ids)
  return &video_ids_;
}
inline const ::CVideoManagerClipID& CGameRecordingClip::_internal_video_ids(int index) const {
  return video_ids_.Get(index);
}
inline const ::CVideoManagerClipID& CGameRecordingClip::video_ids(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.video_ids)
  return _internal_video_ids(index);
}
inline ::CVideoManagerClipID* CGameRecordingClip::_internal_add_video_ids() {
  return video_ids_.Add();
}
inline ::CVideoManagerClipID* CGameRecordingClip::add_video_ids() {
  // @@protoc_insertion_point(field_add:CGameRecordingClip.video_ids)
  return _internal_add_video_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideoManagerClipID >&
CGameRecordingClip::video_ids() const {
  // @@protoc_insertion_point(field_list:CGameRecordingClip.video_ids)
  return video_ids_;
}

// optional fixed64 owner_steamid = 10;
inline bool CGameRecordingClip::_internal_has_owner_steamid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_owner_steamid() const {
  return _internal_has_owner_steamid();
}
inline void CGameRecordingClip::clear_owner_steamid() {
  owner_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::_internal_owner_steamid() const {
  return owner_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecordingClip::owner_steamid() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.owner_steamid)
  return _internal_owner_steamid();
}
inline void CGameRecordingClip::_internal_set_owner_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  owner_steamid_ = value;
}
inline void CGameRecordingClip::set_owner_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner_steamid(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.owner_steamid)
}

// optional bool upload_complete = 11;
inline bool CGameRecordingClip::_internal_has_upload_complete() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_upload_complete() const {
  return _internal_has_upload_complete();
}
inline void CGameRecordingClip::clear_upload_complete() {
  upload_complete_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CGameRecordingClip::_internal_upload_complete() const {
  return upload_complete_;
}
inline bool CGameRecordingClip::upload_complete() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.upload_complete)
  return _internal_upload_complete();
}
inline void CGameRecordingClip::_internal_set_upload_complete(bool value) {
  _has_bits_[0] |= 0x00000010u;
  upload_complete_ = value;
}
inline void CGameRecordingClip::set_upload_complete(bool value) {
  _internal_set_upload_complete(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.upload_complete)
}

// optional uint32 duration_ms = 12;
inline bool CGameRecordingClip::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecordingClip::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CGameRecordingClip::clear_duration_ms() {
  duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClip::_internal_duration_ms() const {
  return duration_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameRecordingClip::duration_ms() const {
  // @@protoc_insertion_point(field_get:CGameRecordingClip.duration_ms)
  return _internal_duration_ms();
}
inline void CGameRecordingClip::_internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  duration_ms_ = value;
}
inline void CGameRecordingClip::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CGameRecordingClip.duration_ms)
}

// -------------------------------------------------------------------

// CGameRecording_CreateShareClip_Request

// optional .CGameRecordingClip clip = 2;
inline bool CGameRecording_CreateShareClip_Request::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || clip_ != nullptr);
  return value;
}
inline bool CGameRecording_CreateShareClip_Request::has_clip() const {
  return _internal_has_clip();
}
inline void CGameRecording_CreateShareClip_Request::clear_clip() {
  if (clip_ != nullptr) clip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecordingClip& CGameRecording_CreateShareClip_Request::_internal_clip() const {
  const ::CGameRecordingClip* p = clip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecordingClip&>(
      ::_CGameRecordingClip_default_instance_);
}
inline const ::CGameRecordingClip& CGameRecording_CreateShareClip_Request::clip() const {
  // @@protoc_insertion_point(field_get:CGameRecording_CreateShareClip_Request.clip)
  return _internal_clip();
}
inline void CGameRecording_CreateShareClip_Request::unsafe_arena_set_allocated_clip(
    ::CGameRecordingClip* clip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clip_);
  }
  clip_ = clip;
  if (clip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_CreateShareClip_Request.clip)
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Request::release_clip() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecordingClip* temp = clip_;
  clip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Request::unsafe_arena_release_clip() {
  // @@protoc_insertion_point(field_release:CGameRecording_CreateShareClip_Request.clip)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecordingClip* temp = clip_;
  clip_ = nullptr;
  return temp;
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Request::_internal_mutable_clip() {
  _has_bits_[0] |= 0x00000001u;
  if (clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecordingClip>(GetArena());
    clip_ = p;
  }
  return clip_;
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Request::mutable_clip() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_CreateShareClip_Request.clip)
  return _internal_mutable_clip();
}
inline void CGameRecording_CreateShareClip_Request::set_allocated_clip(::CGameRecordingClip* clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clip_;
  }
  if (clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clip);
    if (message_arena != submessage_arena) {
      clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_ = clip;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_CreateShareClip_Request.clip)
}

// repeated .CMsgVideoGameRecordingDef video_def = 3;
inline int CGameRecording_CreateShareClip_Request::_internal_video_def_size() const {
  return video_def_.size();
}
inline int CGameRecording_CreateShareClip_Request::video_def_size() const {
  return _internal_video_def_size();
}
inline ::CMsgVideoGameRecordingDef* CGameRecording_CreateShareClip_Request::mutable_video_def(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_CreateShareClip_Request.video_def)
  return video_def_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingDef >*
CGameRecording_CreateShareClip_Request::mutable_video_def() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_CreateShareClip_Request.video_def)
  return &video_def_;
}
inline const ::CMsgVideoGameRecordingDef& CGameRecording_CreateShareClip_Request::_internal_video_def(int index) const {
  return video_def_.Get(index);
}
inline const ::CMsgVideoGameRecordingDef& CGameRecording_CreateShareClip_Request::video_def(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_CreateShareClip_Request.video_def)
  return _internal_video_def(index);
}
inline ::CMsgVideoGameRecordingDef* CGameRecording_CreateShareClip_Request::_internal_add_video_def() {
  return video_def_.Add();
}
inline ::CMsgVideoGameRecordingDef* CGameRecording_CreateShareClip_Request::add_video_def() {
  // @@protoc_insertion_point(field_add:CGameRecording_CreateShareClip_Request.video_def)
  return _internal_add_video_def();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgVideoGameRecordingDef >&
CGameRecording_CreateShareClip_Request::video_def() const {
  // @@protoc_insertion_point(field_list:CGameRecording_CreateShareClip_Request.video_def)
  return video_def_;
}

// -------------------------------------------------------------------

// CGameRecording_CreateShareClip_Response

// optional .CGameRecordingClip clip = 1;
inline bool CGameRecording_CreateShareClip_Response::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || clip_ != nullptr);
  return value;
}
inline bool CGameRecording_CreateShareClip_Response::has_clip() const {
  return _internal_has_clip();
}
inline void CGameRecording_CreateShareClip_Response::clear_clip() {
  if (clip_ != nullptr) clip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecordingClip& CGameRecording_CreateShareClip_Response::_internal_clip() const {
  const ::CGameRecordingClip* p = clip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecordingClip&>(
      ::_CGameRecordingClip_default_instance_);
}
inline const ::CGameRecordingClip& CGameRecording_CreateShareClip_Response::clip() const {
  // @@protoc_insertion_point(field_get:CGameRecording_CreateShareClip_Response.clip)
  return _internal_clip();
}
inline void CGameRecording_CreateShareClip_Response::unsafe_arena_set_allocated_clip(
    ::CGameRecordingClip* clip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clip_);
  }
  clip_ = clip;
  if (clip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_CreateShareClip_Response.clip)
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Response::release_clip() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecordingClip* temp = clip_;
  clip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Response::unsafe_arena_release_clip() {
  // @@protoc_insertion_point(field_release:CGameRecording_CreateShareClip_Response.clip)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecordingClip* temp = clip_;
  clip_ = nullptr;
  return temp;
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Response::_internal_mutable_clip() {
  _has_bits_[0] |= 0x00000001u;
  if (clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecordingClip>(GetArena());
    clip_ = p;
  }
  return clip_;
}
inline ::CGameRecordingClip* CGameRecording_CreateShareClip_Response::mutable_clip() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_CreateShareClip_Response.clip)
  return _internal_mutable_clip();
}
inline void CGameRecording_CreateShareClip_Response::set_allocated_clip(::CGameRecordingClip* clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clip_;
  }
  if (clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clip);
    if (message_arena != submessage_arena) {
      clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_ = clip;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_CreateShareClip_Response.clip)
}

// -------------------------------------------------------------------

// CGameRecording_DeleteSharedClip_Request

// optional fixed64 clip_id = 2;
inline bool CGameRecording_DeleteSharedClip_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_DeleteSharedClip_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_DeleteSharedClip_Request::clear_clip_id() {
  clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_DeleteSharedClip_Request::_internal_clip_id() const {
  return clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_DeleteSharedClip_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_DeleteSharedClip_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_DeleteSharedClip_Request::_internal_set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_ = value;
}
inline void CGameRecording_DeleteSharedClip_Request::set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_DeleteSharedClip_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_DeleteSharedClip_Response

// -------------------------------------------------------------------

// CGameRecording_GetSingleSharedClip_Request

// optional fixed64 clip_id = 2;
inline bool CGameRecording_GetSingleSharedClip_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_GetSingleSharedClip_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CGameRecording_GetSingleSharedClip_Request::clear_clip_id() {
  clip_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetSingleSharedClip_Request::_internal_clip_id() const {
  return clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameRecording_GetSingleSharedClip_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetSingleSharedClip_Request.clip_id)
  return _internal_clip_id();
}
inline void CGameRecording_GetSingleSharedClip_Request::_internal_set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_ = value;
}
inline void CGameRecording_GetSingleSharedClip_Request::set_clip_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_GetSingleSharedClip_Request.clip_id)
}

// -------------------------------------------------------------------

// CGameRecording_GetSingleSharedClip_Response

// optional .CGameRecordingClip clip = 1;
inline bool CGameRecording_GetSingleSharedClip_Response::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || clip_ != nullptr);
  return value;
}
inline bool CGameRecording_GetSingleSharedClip_Response::has_clip() const {
  return _internal_has_clip();
}
inline void CGameRecording_GetSingleSharedClip_Response::clear_clip() {
  if (clip_ != nullptr) clip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameRecordingClip& CGameRecording_GetSingleSharedClip_Response::_internal_clip() const {
  const ::CGameRecordingClip* p = clip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameRecordingClip&>(
      ::_CGameRecordingClip_default_instance_);
}
inline const ::CGameRecordingClip& CGameRecording_GetSingleSharedClip_Response::clip() const {
  // @@protoc_insertion_point(field_get:CGameRecording_GetSingleSharedClip_Response.clip)
  return _internal_clip();
}
inline void CGameRecording_GetSingleSharedClip_Response::unsafe_arena_set_allocated_clip(
    ::CGameRecordingClip* clip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clip_);
  }
  clip_ = clip;
  if (clip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameRecording_GetSingleSharedClip_Response.clip)
}
inline ::CGameRecordingClip* CGameRecording_GetSingleSharedClip_Response::release_clip() {
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecordingClip* temp = clip_;
  clip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CGameRecordingClip* CGameRecording_GetSingleSharedClip_Response::unsafe_arena_release_clip() {
  // @@protoc_insertion_point(field_release:CGameRecording_GetSingleSharedClip_Response.clip)
  _has_bits_[0] &= ~0x00000001u;
  ::CGameRecordingClip* temp = clip_;
  clip_ = nullptr;
  return temp;
}
inline ::CGameRecordingClip* CGameRecording_GetSingleSharedClip_Response::_internal_mutable_clip() {
  _has_bits_[0] |= 0x00000001u;
  if (clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGameRecordingClip>(GetArena());
    clip_ = p;
  }
  return clip_;
}
inline ::CGameRecordingClip* CGameRecording_GetSingleSharedClip_Response::mutable_clip() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_GetSingleSharedClip_Response.clip)
  return _internal_mutable_clip();
}
inline void CGameRecording_GetSingleSharedClip_Response::set_allocated_clip(::CGameRecordingClip* clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clip_;
  }
  if (clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clip);
    if (message_arena != submessage_arena) {
      clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_ = clip;
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_GetSingleSharedClip_Response.clip)
}

// -------------------------------------------------------------------

// CVideo_BeginGameRecordingSegmentsUpload_Request

// optional uint64 recording_id = 1;
inline bool CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_has_recording_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_BeginGameRecordingSegmentsUpload_Request::has_recording_id() const {
  return _internal_has_recording_id();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::clear_recording_id() {
  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_recording_id() const {
  return recording_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_BeginGameRecordingSegmentsUpload_Request::recording_id() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameRecordingSegmentsUpload_Request.recording_id)
  return _internal_recording_id();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  recording_id_ = value;
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recording_id(value);
  // @@protoc_insertion_point(field_set:CVideo_BeginGameRecordingSegmentsUpload_Request.recording_id)
}

// optional string component_name = 2;
inline bool CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_BeginGameRecordingSegmentsUpload_Request::has_component_name() const {
  return _internal_has_component_name();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_BeginGameRecordingSegmentsUpload_Request::component_name() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
  return _internal_component_name();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
}
inline std::string* CVideo_BeginGameRecordingSegmentsUpload_Request::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_component_name() const {
  return component_name_.Get();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_component_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_component_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
}
inline std::string* CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_BeginGameRecordingSegmentsUpload_Request::release_component_name() {
  // @@protoc_insertion_point(field_release:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
}

// optional string representation_name = 3;
inline bool CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_BeginGameRecordingSegmentsUpload_Request::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_BeginGameRecordingSegmentsUpload_Request::representation_name() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
  return _internal_representation_name();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_representation_name(const std::string& value) {
  _internal_set_representation_name(value);
  // @@protoc_insertion_point(field_set:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
}
inline std::string* CVideo_BeginGameRecordingSegmentsUpload_Request::mutable_representation_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
  return _internal_mutable_representation_name();
}
inline const std::string& CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_representation_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_representation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_representation_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
}
inline std::string* CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000002u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_BeginGameRecordingSegmentsUpload_Request::release_representation_name() {
  // @@protoc_insertion_point(field_release:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Request::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
}

// repeated .CVideo_GameRecordingSegmentInfo segments_to_store = 4;
inline int CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_segments_to_store_size() const {
  return segments_to_store_.size();
}
inline int CVideo_BeginGameRecordingSegmentsUpload_Request::segments_to_store_size() const {
  return _internal_segments_to_store_size();
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_BeginGameRecordingSegmentsUpload_Request::mutable_segments_to_store(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store)
  return segments_to_store_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >*
CVideo_BeginGameRecordingSegmentsUpload_Request::mutable_segments_to_store() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store)
  return &segments_to_store_;
}
inline const ::CVideo_GameRecordingSegmentInfo& CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_segments_to_store(int index) const {
  return segments_to_store_.Get(index);
}
inline const ::CVideo_GameRecordingSegmentInfo& CVideo_BeginGameRecordingSegmentsUpload_Request::segments_to_store(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store)
  return _internal_segments_to_store(index);
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_BeginGameRecordingSegmentsUpload_Request::_internal_add_segments_to_store() {
  return segments_to_store_.Add();
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_BeginGameRecordingSegmentsUpload_Request::add_segments_to_store() {
  // @@protoc_insertion_point(field_add:CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store)
  return _internal_add_segments_to_store();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >&
CVideo_BeginGameRecordingSegmentsUpload_Request::segments_to_store() const {
  // @@protoc_insertion_point(field_list:CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store)
  return segments_to_store_;
}

// -------------------------------------------------------------------

// CVideo_BeginGameRecordingSegmentsUpload_Response

// repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
inline int CVideo_BeginGameRecordingSegmentsUpload_Response::_internal_segments_needed_size() const {
  return segments_needed_.size();
}
inline int CVideo_BeginGameRecordingSegmentsUpload_Response::segments_needed_size() const {
  return _internal_segments_needed_size();
}
inline ::CVideo_GameRecordingSegmentUploadInfo* CVideo_BeginGameRecordingSegmentsUpload_Response::mutable_segments_needed(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed)
  return segments_needed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >*
CVideo_BeginGameRecordingSegmentsUpload_Response::mutable_segments_needed() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed)
  return &segments_needed_;
}
inline const ::CVideo_GameRecordingSegmentUploadInfo& CVideo_BeginGameRecordingSegmentsUpload_Response::_internal_segments_needed(int index) const {
  return segments_needed_.Get(index);
}
inline const ::CVideo_GameRecordingSegmentUploadInfo& CVideo_BeginGameRecordingSegmentsUpload_Response::segments_needed(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed)
  return _internal_segments_needed(index);
}
inline ::CVideo_GameRecordingSegmentUploadInfo* CVideo_BeginGameRecordingSegmentsUpload_Response::_internal_add_segments_needed() {
  return segments_needed_.Add();
}
inline ::CVideo_GameRecordingSegmentUploadInfo* CVideo_BeginGameRecordingSegmentsUpload_Response::add_segments_needed() {
  // @@protoc_insertion_point(field_add:CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed)
  return _internal_add_segments_needed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >&
CVideo_BeginGameRecordingSegmentsUpload_Response::segments_needed() const {
  // @@protoc_insertion_point(field_list:CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed)
  return segments_needed_;
}

// optional bool call_again = 2;
inline bool CVideo_BeginGameRecordingSegmentsUpload_Response::_internal_has_call_again() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_BeginGameRecordingSegmentsUpload_Response::has_call_again() const {
  return _internal_has_call_again();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Response::clear_call_again() {
  call_again_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CVideo_BeginGameRecordingSegmentsUpload_Response::_internal_call_again() const {
  return call_again_;
}
inline bool CVideo_BeginGameRecordingSegmentsUpload_Response::call_again() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameRecordingSegmentsUpload_Response.call_again)
  return _internal_call_again();
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Response::_internal_set_call_again(bool value) {
  _has_bits_[0] |= 0x00000001u;
  call_again_ = value;
}
inline void CVideo_BeginGameRecordingSegmentsUpload_Response::set_call_again(bool value) {
  _internal_set_call_again(value);
  // @@protoc_insertion_point(field_set:CVideo_BeginGameRecordingSegmentsUpload_Response.call_again)
}

// -------------------------------------------------------------------

// CVideo_CommitGameRecordingSegmentsUpload_Request

// optional uint64 recording_id = 1;
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_has_recording_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::has_recording_id() const {
  return _internal_has_recording_id();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::clear_recording_id() {
  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_recording_id() const {
  return recording_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_CommitGameRecordingSegmentsUpload_Request::recording_id() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameRecordingSegmentsUpload_Request.recording_id)
  return _internal_recording_id();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  recording_id_ = value;
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recording_id(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameRecordingSegmentsUpload_Request.recording_id)
}

// optional string component_name = 2;
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::has_component_name() const {
  return _internal_has_component_name();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_CommitGameRecordingSegmentsUpload_Request::component_name() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
  return _internal_component_name();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
}
inline std::string* CVideo_CommitGameRecordingSegmentsUpload_Request::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_component_name() const {
  return component_name_.Get();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_component_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_component_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
}
inline std::string* CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_CommitGameRecordingSegmentsUpload_Request::release_component_name() {
  // @@protoc_insertion_point(field_release:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
}

// optional string representation_name = 3;
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_CommitGameRecordingSegmentsUpload_Request::representation_name() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
  return _internal_representation_name();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_representation_name(const std::string& value) {
  _internal_set_representation_name(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
}
inline std::string* CVideo_CommitGameRecordingSegmentsUpload_Request::mutable_representation_name() {
  // @@protoc_insertion_point(field_mutable:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
  return _internal_mutable_representation_name();
}
inline const std::string& CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_representation_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_representation_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_representation_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
}
inline std::string* CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000002u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CVideo_CommitGameRecordingSegmentsUpload_Request::release_representation_name() {
  // @@protoc_insertion_point(field_release:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
}

// optional uint32 first_segment_number = 4;
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_has_first_segment_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::has_first_segment_number() const {
  return _internal_has_first_segment_number();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::clear_first_segment_number() {
  first_segment_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_first_segment_number() const {
  return first_segment_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_CommitGameRecordingSegmentsUpload_Request::first_segment_number() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameRecordingSegmentsUpload_Request.first_segment_number)
  return _internal_first_segment_number();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_set_first_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  first_segment_number_ = value;
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_first_segment_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_segment_number(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameRecordingSegmentsUpload_Request.first_segment_number)
}

// optional uint32 num_segments = 5;
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_has_num_segments() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::has_num_segments() const {
  return _internal_has_num_segments();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::clear_num_segments() {
  num_segments_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_num_segments() const {
  return num_segments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_CommitGameRecordingSegmentsUpload_Request::num_segments() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameRecordingSegmentsUpload_Request.num_segments)
  return _internal_num_segments();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_segments_ = value;
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_num_segments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_segments(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameRecordingSegmentsUpload_Request.num_segments)
}

// optional uint32 upload_result = 6;
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_has_upload_result() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVideo_CommitGameRecordingSegmentsUpload_Request::has_upload_result() const {
  return _internal_has_upload_result();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_upload_result() const {
  return upload_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CVideo_CommitGameRecordingSegmentsUpload_Request::upload_result() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameRecordingSegmentsUpload_Request.upload_result)
  return _internal_upload_result();
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::_internal_set_upload_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  upload_result_ = value;
}
inline void CVideo_CommitGameRecordingSegmentsUpload_Request::set_upload_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upload_result(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameRecordingSegmentsUpload_Request.upload_result)
}

// -------------------------------------------------------------------

// CVideo_CommitGameRecordingSegmentsUpload_Response

// -------------------------------------------------------------------

// CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request

// optional uint64 recording_id = 1;
inline bool CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::_internal_has_recording_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::has_recording_id() const {
  return _internal_has_recording_id();
}
inline void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::clear_recording_id() {
  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::_internal_recording_id() const {
  return recording_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::recording_id() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request.recording_id)
  return _internal_recording_id();
}
inline void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::_internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_ = value;
}
inline void CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recording_id(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request.recording_id)
}

// -------------------------------------------------------------------

// CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response

// repeated .CVideo_GameRecordingSegmentUploadInfo segments_needed = 1;
inline int CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::_internal_segments_needed_size() const {
  return segments_needed_.size();
}
inline int CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::segments_needed_size() const {
  return _internal_segments_needed_size();
}
inline ::CVideo_GameRecordingSegmentUploadInfo* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::mutable_segments_needed(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed)
  return segments_needed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >*
CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::mutable_segments_needed() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed)
  return &segments_needed_;
}
inline const ::CVideo_GameRecordingSegmentUploadInfo& CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::_internal_segments_needed(int index) const {
  return segments_needed_.Get(index);
}
inline const ::CVideo_GameRecordingSegmentUploadInfo& CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::segments_needed(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed)
  return _internal_segments_needed(index);
}
inline ::CVideo_GameRecordingSegmentUploadInfo* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::_internal_add_segments_needed() {
  return segments_needed_.Add();
}
inline ::CVideo_GameRecordingSegmentUploadInfo* CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::add_segments_needed() {
  // @@protoc_insertion_point(field_add:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed)
  return _internal_add_segments_needed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentUploadInfo >&
CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::segments_needed() const {
  // @@protoc_insertion_point(field_list:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed)
  return segments_needed_;
}

// -------------------------------------------------------------------

// CVideo_GameRecordingCommitSegmentUploads_Request

// optional uint64 recording_id = 1;
inline bool CVideo_GameRecordingCommitSegmentUploads_Request::_internal_has_recording_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameRecordingCommitSegmentUploads_Request::has_recording_id() const {
  return _internal_has_recording_id();
}
inline void CVideo_GameRecordingCommitSegmentUploads_Request::clear_recording_id() {
  recording_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_GameRecordingCommitSegmentUploads_Request::_internal_recording_id() const {
  return recording_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CVideo_GameRecordingCommitSegmentUploads_Request::recording_id() const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingCommitSegmentUploads_Request.recording_id)
  return _internal_recording_id();
}
inline void CVideo_GameRecordingCommitSegmentUploads_Request::_internal_set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  recording_id_ = value;
}
inline void CVideo_GameRecordingCommitSegmentUploads_Request::set_recording_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recording_id(value);
  // @@protoc_insertion_point(field_set:CVideo_GameRecordingCommitSegmentUploads_Request.recording_id)
}

// repeated .CVideo_GameRecordingSegmentInfo segments_uploaded = 2;
inline int CVideo_GameRecordingCommitSegmentUploads_Request::_internal_segments_uploaded_size() const {
  return segments_uploaded_.size();
}
inline int CVideo_GameRecordingCommitSegmentUploads_Request::segments_uploaded_size() const {
  return _internal_segments_uploaded_size();
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingCommitSegmentUploads_Request::mutable_segments_uploaded(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded)
  return segments_uploaded_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >*
CVideo_GameRecordingCommitSegmentUploads_Request::mutable_segments_uploaded() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded)
  return &segments_uploaded_;
}
inline const ::CVideo_GameRecordingSegmentInfo& CVideo_GameRecordingCommitSegmentUploads_Request::_internal_segments_uploaded(int index) const {
  return segments_uploaded_.Get(index);
}
inline const ::CVideo_GameRecordingSegmentInfo& CVideo_GameRecordingCommitSegmentUploads_Request::segments_uploaded(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded)
  return _internal_segments_uploaded(index);
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingCommitSegmentUploads_Request::_internal_add_segments_uploaded() {
  return segments_uploaded_.Add();
}
inline ::CVideo_GameRecordingSegmentInfo* CVideo_GameRecordingCommitSegmentUploads_Request::add_segments_uploaded() {
  // @@protoc_insertion_point(field_add:CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded)
  return _internal_add_segments_uploaded();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameRecordingSegmentInfo >&
CVideo_GameRecordingCommitSegmentUploads_Request::segments_uploaded() const {
  // @@protoc_insertion_point(field_list:CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded)
  return segments_uploaded_;
}

// -------------------------------------------------------------------

// CVideo_GameRecordingCommitSegmentUploads_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamerecording_2esteamclient_2eproto
