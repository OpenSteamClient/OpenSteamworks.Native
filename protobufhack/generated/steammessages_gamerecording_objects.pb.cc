// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamerecording_objects.proto

#include "steammessages_gamerecording_objects.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameRecording_AudioSessionsChanged_Notification_Session::CGameRecording_AudioSessionsChanged_Notification_Session(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_system_(false)
  , is_muted_(false)
  , is_active_(false)
  , is_captured_(false)
  , recent_peak_(0)
  , is_game_(false)
  , is_steam_(false)
  , is_saved_(false){}
struct CGameRecording_AudioSessionsChanged_Notification_SessionDefaultTypeInternal {
  constexpr CGameRecording_AudioSessionsChanged_Notification_SessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_AudioSessionsChanged_Notification_SessionDefaultTypeInternal() {}
  union {
    CGameRecording_AudioSessionsChanged_Notification_Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_AudioSessionsChanged_Notification_SessionDefaultTypeInternal _CGameRecording_AudioSessionsChanged_Notification_Session_default_instance_;
constexpr CGameRecording_AudioSessionsChanged_Notification::CGameRecording_AudioSessionsChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessions_(){}
struct CGameRecording_AudioSessionsChanged_NotificationDefaultTypeInternal {
  constexpr CGameRecording_AudioSessionsChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameRecording_AudioSessionsChanged_NotificationDefaultTypeInternal() {}
  union {
    CGameRecording_AudioSessionsChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameRecording_AudioSessionsChanged_NotificationDefaultTypeInternal _CGameRecording_AudioSessionsChanged_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fgamerecording_5fobjects_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fgamerecording_5fobjects_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fgamerecording_5fobjects_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fgamerecording_5fobjects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, id_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, name_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_system_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_muted_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_active_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_captured_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, recent_peak_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_game_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_steam_),
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification_Session, is_saved_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameRecording_AudioSessionsChanged_Notification, sessions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::CGameRecording_AudioSessionsChanged_Notification_Session)},
  { 25, -1, sizeof(::CGameRecording_AudioSessionsChanged_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_AudioSessionsChanged_Notification_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameRecording_AudioSessionsChanged_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fgamerecording_5fobjects_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)steammessages_gamerecording_objects.pr"
  "oto\032 google/protobuf/descriptor.proto\032\013e"
  "nums.proto\"\274\002\n0CGameRecording_AudioSessi"
  "onsChanged_Notification\022K\n\010sessions\030\001 \003("
  "\01329.CGameRecording_AudioSessionsChanged_"
  "Notification.Session\032\272\001\n\007Session\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tis_system\030\003 \001(\010\022\020\n"
  "\010is_muted\030\004 \001(\010\022\021\n\tis_active\030\005 \001(\010\022\023\n\013is"
  "_captured\030\006 \001(\010\022\023\n\013recent_peak\030\007 \001(\002\022\017\n\007"
  "is_game\030\010 \001(\010\022\020\n\010is_steam\030\t \001(\010\022\020\n\010is_sa"
  "ved\030\n \001(\010B\037H\001\200\001\000\252\002\027OpenSteamworks.Protob"
  "uf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_deps[2] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto = {
  false, false, 442, descriptor_table_protodef_steammessages_5fgamerecording_5fobjects_2eproto, "steammessages_gamerecording_objects.proto", 
  &descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_once, descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_steammessages_5fgamerecording_5fobjects_2eproto::offsets,
  file_level_metadata_steammessages_5fgamerecording_5fobjects_2eproto, file_level_enum_descriptors_steammessages_5fgamerecording_5fobjects_2eproto, file_level_service_descriptors_steammessages_5fgamerecording_5fobjects_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto);
  return descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fgamerecording_5fobjects_2eproto(&descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto);

// ===================================================================

class CGameRecording_AudioSessionsChanged_Notification_Session::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameRecording_AudioSessionsChanged_Notification_Session>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_captured(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_recent_peak(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_game(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_saved(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CGameRecording_AudioSessionsChanged_Notification_Session::CGameRecording_AudioSessionsChanged_Notification_Session(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_AudioSessionsChanged_Notification.Session)
}
CGameRecording_AudioSessionsChanged_Notification_Session::CGameRecording_AudioSessionsChanged_Notification_Session(const CGameRecording_AudioSessionsChanged_Notification_Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&is_system_, &from.is_system_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_saved_) -
    reinterpret_cast<char*>(&is_system_)) + sizeof(is_saved_));
  // @@protoc_insertion_point(copy_constructor:CGameRecording_AudioSessionsChanged_Notification.Session)
}

void CGameRecording_AudioSessionsChanged_Notification_Session::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_system_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_saved_) -
    reinterpret_cast<char*>(&is_system_)) + sizeof(is_saved_));
}

CGameRecording_AudioSessionsChanged_Notification_Session::~CGameRecording_AudioSessionsChanged_Notification_Session() {
  // @@protoc_insertion_point(destructor:CGameRecording_AudioSessionsChanged_Notification.Session)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_AudioSessionsChanged_Notification_Session::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGameRecording_AudioSessionsChanged_Notification_Session::ArenaDtor(void* object) {
  CGameRecording_AudioSessionsChanged_Notification_Session* _this = reinterpret_cast< CGameRecording_AudioSessionsChanged_Notification_Session* >(object);
  (void)_this;
}
void CGameRecording_AudioSessionsChanged_Notification_Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_AudioSessionsChanged_Notification_Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_AudioSessionsChanged_Notification_Session::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&is_system_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_game_) -
        reinterpret_cast<char*>(&is_system_)) + sizeof(is_game_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&is_steam_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_saved_) -
        reinterpret_cast<char*>(&is_steam_)) + sizeof(is_saved_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_AudioSessionsChanged_Notification_Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_AudioSessionsChanged_Notification.Session.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameRecording_AudioSessionsChanged_Notification.Session.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_system(&has_bits);
          is_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_muted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_muted(&has_bits);
          is_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_captured = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_captured(&has_bits);
          is_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float recent_peak = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_recent_peak(&has_bits);
          recent_peak_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_game = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_game(&has_bits);
          is_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_steam(&has_bits);
          is_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_saved = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_saved(&has_bits);
          is_saved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_AudioSessionsChanged_Notification_Session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_AudioSessionsChanged_Notification.Session.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameRecording_AudioSessionsChanged_Notification.Session.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional bool is_system = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_system(), target);
  }

  // optional bool is_muted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_muted(), target);
  }

  // optional bool is_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_active(), target);
  }

  // optional bool is_captured = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_captured(), target);
  }

  // optional float recent_peak = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_recent_peak(), target);
  }

  // optional bool is_game = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_game(), target);
  }

  // optional bool is_steam = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_steam(), target);
  }

  // optional bool is_saved = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_saved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_AudioSessionsChanged_Notification.Session)
  return target;
}

size_t CGameRecording_AudioSessionsChanged_Notification_Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool is_system = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_muted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_captured = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float recent_peak = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool is_game = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool is_steam = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_saved = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_AudioSessionsChanged_Notification_Session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_AudioSessionsChanged_Notification_Session* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_AudioSessionsChanged_Notification_Session>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_AudioSessionsChanged_Notification.Session)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_AudioSessionsChanged_Notification.Session)
    MergeFrom(*source);
  }
}

void CGameRecording_AudioSessionsChanged_Notification_Session::MergeFrom(const CGameRecording_AudioSessionsChanged_Notification_Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      is_system_ = from.is_system_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_muted_ = from.is_muted_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_captured_ = from.is_captured_;
    }
    if (cached_has_bits & 0x00000040u) {
      recent_peak_ = from.recent_peak_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_game_ = from.is_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      is_steam_ = from.is_steam_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_saved_ = from.is_saved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameRecording_AudioSessionsChanged_Notification_Session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_AudioSessionsChanged_Notification_Session::CopyFrom(const CGameRecording_AudioSessionsChanged_Notification_Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_AudioSessionsChanged_Notification.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_AudioSessionsChanged_Notification_Session::IsInitialized() const {
  return true;
}

void CGameRecording_AudioSessionsChanged_Notification_Session::InternalSwap(CGameRecording_AudioSessionsChanged_Notification_Session* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameRecording_AudioSessionsChanged_Notification_Session, is_saved_)
      + sizeof(CGameRecording_AudioSessionsChanged_Notification_Session::is_saved_)
      - PROTOBUF_FIELD_OFFSET(CGameRecording_AudioSessionsChanged_Notification_Session, is_system_)>(
          reinterpret_cast<char*>(&is_system_),
          reinterpret_cast<char*>(&other->is_system_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_AudioSessionsChanged_Notification_Session::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameRecording_AudioSessionsChanged_Notification::_Internal {
 public:
};

CGameRecording_AudioSessionsChanged_Notification::CGameRecording_AudioSessionsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sessions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameRecording_AudioSessionsChanged_Notification)
}
CGameRecording_AudioSessionsChanged_Notification::CGameRecording_AudioSessionsChanged_Notification(const CGameRecording_AudioSessionsChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameRecording_AudioSessionsChanged_Notification)
}

void CGameRecording_AudioSessionsChanged_Notification::SharedCtor() {
}

CGameRecording_AudioSessionsChanged_Notification::~CGameRecording_AudioSessionsChanged_Notification() {
  // @@protoc_insertion_point(destructor:CGameRecording_AudioSessionsChanged_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameRecording_AudioSessionsChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameRecording_AudioSessionsChanged_Notification::ArenaDtor(void* object) {
  CGameRecording_AudioSessionsChanged_Notification* _this = reinterpret_cast< CGameRecording_AudioSessionsChanged_Notification* >(object);
  (void)_this;
}
void CGameRecording_AudioSessionsChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameRecording_AudioSessionsChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameRecording_AudioSessionsChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameRecording_AudioSessionsChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameRecording_AudioSessionsChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameRecording_AudioSessionsChanged_Notification.Session sessions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameRecording_AudioSessionsChanged_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameRecording_AudioSessionsChanged_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameRecording_AudioSessionsChanged_Notification.Session sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameRecording_AudioSessionsChanged_Notification)
  return target;
}

size_t CGameRecording_AudioSessionsChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameRecording_AudioSessionsChanged_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameRecording_AudioSessionsChanged_Notification.Session sessions = 1;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameRecording_AudioSessionsChanged_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameRecording_AudioSessionsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameRecording_AudioSessionsChanged_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameRecording_AudioSessionsChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameRecording_AudioSessionsChanged_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameRecording_AudioSessionsChanged_Notification)
    MergeFrom(*source);
  }
}

void CGameRecording_AudioSessionsChanged_Notification::MergeFrom(const CGameRecording_AudioSessionsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameRecording_AudioSessionsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void CGameRecording_AudioSessionsChanged_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameRecording_AudioSessionsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameRecording_AudioSessionsChanged_Notification::CopyFrom(const CGameRecording_AudioSessionsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameRecording_AudioSessionsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameRecording_AudioSessionsChanged_Notification::IsInitialized() const {
  return true;
}

void CGameRecording_AudioSessionsChanged_Notification::InternalSwap(CGameRecording_AudioSessionsChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sessions_.InternalSwap(&other->sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameRecording_AudioSessionsChanged_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameRecording_AudioSessionsChanged_Notification_Session* Arena::CreateMaybeMessage< ::CGameRecording_AudioSessionsChanged_Notification_Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_AudioSessionsChanged_Notification_Session >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameRecording_AudioSessionsChanged_Notification* Arena::CreateMaybeMessage< ::CGameRecording_AudioSessionsChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameRecording_AudioSessionsChanged_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
