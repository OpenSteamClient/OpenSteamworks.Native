// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamerecording_objects.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamerecording_5fobjects_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamerecording_5fobjects_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgamerecording_5fobjects_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgamerecording_5fobjects_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_metadata_getter(int index);
class CGameRecording_AudioSessionsChanged_Notification;
struct CGameRecording_AudioSessionsChanged_NotificationDefaultTypeInternal;
extern CGameRecording_AudioSessionsChanged_NotificationDefaultTypeInternal _CGameRecording_AudioSessionsChanged_Notification_default_instance_;
class CGameRecording_AudioSessionsChanged_Notification_Session;
struct CGameRecording_AudioSessionsChanged_Notification_SessionDefaultTypeInternal;
extern CGameRecording_AudioSessionsChanged_Notification_SessionDefaultTypeInternal _CGameRecording_AudioSessionsChanged_Notification_Session_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameRecording_AudioSessionsChanged_Notification* Arena::CreateMaybeMessage<::CGameRecording_AudioSessionsChanged_Notification>(Arena*);
template<> ::CGameRecording_AudioSessionsChanged_Notification_Session* Arena::CreateMaybeMessage<::CGameRecording_AudioSessionsChanged_Notification_Session>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CGameRecording_AudioSessionsChanged_Notification_Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_AudioSessionsChanged_Notification.Session) */ {
 public:
  inline CGameRecording_AudioSessionsChanged_Notification_Session() : CGameRecording_AudioSessionsChanged_Notification_Session(nullptr) {}
  virtual ~CGameRecording_AudioSessionsChanged_Notification_Session();
  explicit constexpr CGameRecording_AudioSessionsChanged_Notification_Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_AudioSessionsChanged_Notification_Session(const CGameRecording_AudioSessionsChanged_Notification_Session& from);
  CGameRecording_AudioSessionsChanged_Notification_Session(CGameRecording_AudioSessionsChanged_Notification_Session&& from) noexcept
    : CGameRecording_AudioSessionsChanged_Notification_Session() {
    *this = ::std::move(from);
  }

  inline CGameRecording_AudioSessionsChanged_Notification_Session& operator=(const CGameRecording_AudioSessionsChanged_Notification_Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_AudioSessionsChanged_Notification_Session& operator=(CGameRecording_AudioSessionsChanged_Notification_Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_AudioSessionsChanged_Notification_Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_AudioSessionsChanged_Notification_Session* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_AudioSessionsChanged_Notification_Session*>(
               &_CGameRecording_AudioSessionsChanged_Notification_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameRecording_AudioSessionsChanged_Notification_Session& a, CGameRecording_AudioSessionsChanged_Notification_Session& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_AudioSessionsChanged_Notification_Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_AudioSessionsChanged_Notification_Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_AudioSessionsChanged_Notification_Session* New() const final {
    return CreateMaybeMessage<CGameRecording_AudioSessionsChanged_Notification_Session>(nullptr);
  }

  CGameRecording_AudioSessionsChanged_Notification_Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_AudioSessionsChanged_Notification_Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_AudioSessionsChanged_Notification_Session& from);
  void MergeFrom(const CGameRecording_AudioSessionsChanged_Notification_Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_AudioSessionsChanged_Notification_Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_AudioSessionsChanged_Notification.Session";
  }
  protected:
  explicit CGameRecording_AudioSessionsChanged_Notification_Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kIsSystemFieldNumber = 3,
    kIsMutedFieldNumber = 4,
    kIsActiveFieldNumber = 5,
    kIsCapturedFieldNumber = 6,
    kRecentPeakFieldNumber = 7,
    kIsGameFieldNumber = 8,
    kIsSteamFieldNumber = 9,
    kIsSavedFieldNumber = 10,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool is_system = 3;
  bool has_is_system() const;
  private:
  bool _internal_has_is_system() const;
  public:
  void clear_is_system();
  bool is_system() const;
  void set_is_system(bool value);
  private:
  bool _internal_is_system() const;
  void _internal_set_is_system(bool value);
  public:

  // optional bool is_muted = 4;
  bool has_is_muted() const;
  private:
  bool _internal_has_is_muted() const;
  public:
  void clear_is_muted();
  bool is_muted() const;
  void set_is_muted(bool value);
  private:
  bool _internal_is_muted() const;
  void _internal_set_is_muted(bool value);
  public:

  // optional bool is_active = 5;
  bool has_is_active() const;
  private:
  bool _internal_has_is_active() const;
  public:
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // optional bool is_captured = 6;
  bool has_is_captured() const;
  private:
  bool _internal_has_is_captured() const;
  public:
  void clear_is_captured();
  bool is_captured() const;
  void set_is_captured(bool value);
  private:
  bool _internal_is_captured() const;
  void _internal_set_is_captured(bool value);
  public:

  // optional float recent_peak = 7;
  bool has_recent_peak() const;
  private:
  bool _internal_has_recent_peak() const;
  public:
  void clear_recent_peak();
  float recent_peak() const;
  void set_recent_peak(float value);
  private:
  float _internal_recent_peak() const;
  void _internal_set_recent_peak(float value);
  public:

  // optional bool is_game = 8;
  bool has_is_game() const;
  private:
  bool _internal_has_is_game() const;
  public:
  void clear_is_game();
  bool is_game() const;
  void set_is_game(bool value);
  private:
  bool _internal_is_game() const;
  void _internal_set_is_game(bool value);
  public:

  // optional bool is_steam = 9;
  bool has_is_steam() const;
  private:
  bool _internal_has_is_steam() const;
  public:
  void clear_is_steam();
  bool is_steam() const;
  void set_is_steam(bool value);
  private:
  bool _internal_is_steam() const;
  void _internal_set_is_steam(bool value);
  public:

  // optional bool is_saved = 10;
  bool has_is_saved() const;
  private:
  bool _internal_has_is_saved() const;
  public:
  void clear_is_saved();
  bool is_saved() const;
  void set_is_saved(bool value);
  private:
  bool _internal_is_saved() const;
  void _internal_set_is_saved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameRecording_AudioSessionsChanged_Notification.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_system_;
  bool is_muted_;
  bool is_active_;
  bool is_captured_;
  float recent_peak_;
  bool is_game_;
  bool is_steam_;
  bool is_saved_;
  friend struct ::TableStruct_steammessages_5fgamerecording_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CGameRecording_AudioSessionsChanged_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameRecording_AudioSessionsChanged_Notification) */ {
 public:
  inline CGameRecording_AudioSessionsChanged_Notification() : CGameRecording_AudioSessionsChanged_Notification(nullptr) {}
  virtual ~CGameRecording_AudioSessionsChanged_Notification();
  explicit constexpr CGameRecording_AudioSessionsChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameRecording_AudioSessionsChanged_Notification(const CGameRecording_AudioSessionsChanged_Notification& from);
  CGameRecording_AudioSessionsChanged_Notification(CGameRecording_AudioSessionsChanged_Notification&& from) noexcept
    : CGameRecording_AudioSessionsChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CGameRecording_AudioSessionsChanged_Notification& operator=(const CGameRecording_AudioSessionsChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRecording_AudioSessionsChanged_Notification& operator=(CGameRecording_AudioSessionsChanged_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRecording_AudioSessionsChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameRecording_AudioSessionsChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameRecording_AudioSessionsChanged_Notification*>(
               &_CGameRecording_AudioSessionsChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameRecording_AudioSessionsChanged_Notification& a, CGameRecording_AudioSessionsChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRecording_AudioSessionsChanged_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameRecording_AudioSessionsChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRecording_AudioSessionsChanged_Notification* New() const final {
    return CreateMaybeMessage<CGameRecording_AudioSessionsChanged_Notification>(nullptr);
  }

  CGameRecording_AudioSessionsChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRecording_AudioSessionsChanged_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRecording_AudioSessionsChanged_Notification& from);
  void MergeFrom(const CGameRecording_AudioSessionsChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRecording_AudioSessionsChanged_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameRecording_AudioSessionsChanged_Notification";
  }
  protected:
  explicit CGameRecording_AudioSessionsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamerecording_5fobjects_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CGameRecording_AudioSessionsChanged_Notification_Session Session;

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
  };
  // repeated .CGameRecording_AudioSessionsChanged_Notification.Session sessions = 1;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::CGameRecording_AudioSessionsChanged_Notification_Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_AudioSessionsChanged_Notification_Session >*
      mutable_sessions();
  private:
  const ::CGameRecording_AudioSessionsChanged_Notification_Session& _internal_sessions(int index) const;
  ::CGameRecording_AudioSessionsChanged_Notification_Session* _internal_add_sessions();
  public:
  const ::CGameRecording_AudioSessionsChanged_Notification_Session& sessions(int index) const;
  ::CGameRecording_AudioSessionsChanged_Notification_Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_AudioSessionsChanged_Notification_Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:CGameRecording_AudioSessionsChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_AudioSessionsChanged_Notification_Session > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamerecording_5fobjects_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameRecording_AudioSessionsChanged_Notification_Session

// optional string id = 1;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_id() const {
  return _internal_has_id();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameRecording_AudioSessionsChanged_Notification_Session::id() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.id)
  return _internal_id();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.id)
}
inline std::string* CGameRecording_AudioSessionsChanged_Notification_Session::mutable_id() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_AudioSessionsChanged_Notification.Session.id)
  return _internal_mutable_id();
}
inline const std::string& CGameRecording_AudioSessionsChanged_Notification_Session::_internal_id() const {
  return id_.Get();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_AudioSessionsChanged_Notification.Session.id)
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_AudioSessionsChanged_Notification.Session.id)
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_AudioSessionsChanged_Notification.Session.id)
}
inline std::string* CGameRecording_AudioSessionsChanged_Notification_Session::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_AudioSessionsChanged_Notification_Session::release_id() {
  // @@protoc_insertion_point(field_release:CGameRecording_AudioSessionsChanged_Notification.Session.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_AudioSessionsChanged_Notification.Session.id)
}

// optional string name = 2;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_name() const {
  return _internal_has_name();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameRecording_AudioSessionsChanged_Notification_Session::name() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.name)
  return _internal_name();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.name)
}
inline std::string* CGameRecording_AudioSessionsChanged_Notification_Session::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CGameRecording_AudioSessionsChanged_Notification.Session.name)
  return _internal_mutable_name();
}
inline const std::string& CGameRecording_AudioSessionsChanged_Notification_Session::_internal_name() const {
  return name_.Get();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameRecording_AudioSessionsChanged_Notification.Session.name)
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameRecording_AudioSessionsChanged_Notification.Session.name)
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameRecording_AudioSessionsChanged_Notification.Session.name)
}
inline std::string* CGameRecording_AudioSessionsChanged_Notification_Session::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameRecording_AudioSessionsChanged_Notification_Session::release_name() {
  // @@protoc_insertion_point(field_release:CGameRecording_AudioSessionsChanged_Notification.Session.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameRecording_AudioSessionsChanged_Notification.Session.name)
}

// optional bool is_system = 3;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_system() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_system() const {
  return _internal_has_is_system();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_system() {
  is_system_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_system() const {
  return is_system_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_system() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_system)
  return _internal_is_system();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_system(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_system_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_system(bool value) {
  _internal_set_is_system(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_system)
}

// optional bool is_muted = 4;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_muted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_muted() const {
  return _internal_has_is_muted();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_muted() {
  is_muted_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_muted() const {
  return is_muted_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_muted() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_muted)
  return _internal_is_muted();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_muted(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_muted_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_muted(bool value) {
  _internal_set_is_muted(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_muted)
}

// optional bool is_active = 5;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_active() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_active() const {
  return _internal_has_is_active();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_active() {
  is_active_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_active() const {
  return is_active_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_active() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_active)
  return _internal_is_active();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_active(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_active_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_active)
}

// optional bool is_captured = 6;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_captured() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_captured() const {
  return _internal_has_is_captured();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_captured() {
  is_captured_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_captured() const {
  return is_captured_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_captured() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_captured)
  return _internal_is_captured();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_captured(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_captured_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_captured(bool value) {
  _internal_set_is_captured(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_captured)
}

// optional float recent_peak = 7;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_recent_peak() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_recent_peak() const {
  return _internal_has_recent_peak();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_recent_peak() {
  recent_peak_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CGameRecording_AudioSessionsChanged_Notification_Session::_internal_recent_peak() const {
  return recent_peak_;
}
inline float CGameRecording_AudioSessionsChanged_Notification_Session::recent_peak() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.recent_peak)
  return _internal_recent_peak();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_recent_peak(float value) {
  _has_bits_[0] |= 0x00000040u;
  recent_peak_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_recent_peak(float value) {
  _internal_set_recent_peak(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.recent_peak)
}

// optional bool is_game = 8;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_game() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_game() const {
  return _internal_has_is_game();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_game() {
  is_game_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_game() const {
  return is_game_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_game() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_game)
  return _internal_is_game();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_game(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_game_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_game(bool value) {
  _internal_set_is_game(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_game)
}

// optional bool is_steam = 9;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_steam() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_steam() const {
  return _internal_has_is_steam();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_steam() {
  is_steam_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_steam() const {
  return is_steam_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_steam() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_steam)
  return _internal_is_steam();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_steam(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_steam_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_steam(bool value) {
  _internal_set_is_steam(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_steam)
}

// optional bool is_saved = 10;
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_has_is_saved() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::has_is_saved() const {
  return _internal_has_is_saved();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::clear_is_saved() {
  is_saved_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::_internal_is_saved() const {
  return is_saved_;
}
inline bool CGameRecording_AudioSessionsChanged_Notification_Session::is_saved() const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.Session.is_saved)
  return _internal_is_saved();
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::_internal_set_is_saved(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_saved_ = value;
}
inline void CGameRecording_AudioSessionsChanged_Notification_Session::set_is_saved(bool value) {
  _internal_set_is_saved(value);
  // @@protoc_insertion_point(field_set:CGameRecording_AudioSessionsChanged_Notification.Session.is_saved)
}

// -------------------------------------------------------------------

// CGameRecording_AudioSessionsChanged_Notification

// repeated .CGameRecording_AudioSessionsChanged_Notification.Session sessions = 1;
inline int CGameRecording_AudioSessionsChanged_Notification::_internal_sessions_size() const {
  return sessions_.size();
}
inline int CGameRecording_AudioSessionsChanged_Notification::sessions_size() const {
  return _internal_sessions_size();
}
inline void CGameRecording_AudioSessionsChanged_Notification::clear_sessions() {
  sessions_.Clear();
}
inline ::CGameRecording_AudioSessionsChanged_Notification_Session* CGameRecording_AudioSessionsChanged_Notification::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:CGameRecording_AudioSessionsChanged_Notification.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_AudioSessionsChanged_Notification_Session >*
CGameRecording_AudioSessionsChanged_Notification::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CGameRecording_AudioSessionsChanged_Notification.sessions)
  return &sessions_;
}
inline const ::CGameRecording_AudioSessionsChanged_Notification_Session& CGameRecording_AudioSessionsChanged_Notification::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::CGameRecording_AudioSessionsChanged_Notification_Session& CGameRecording_AudioSessionsChanged_Notification::sessions(int index) const {
  // @@protoc_insertion_point(field_get:CGameRecording_AudioSessionsChanged_Notification.sessions)
  return _internal_sessions(index);
}
inline ::CGameRecording_AudioSessionsChanged_Notification_Session* CGameRecording_AudioSessionsChanged_Notification::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::CGameRecording_AudioSessionsChanged_Notification_Session* CGameRecording_AudioSessionsChanged_Notification::add_sessions() {
  // @@protoc_insertion_point(field_add:CGameRecording_AudioSessionsChanged_Notification.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameRecording_AudioSessionsChanged_Notification_Session >&
CGameRecording_AudioSessionsChanged_Notification::sessions() const {
  // @@protoc_insertion_point(field_list:CGameRecording_AudioSessionsChanged_Notification.sessions)
  return sessions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamerecording_5fobjects_2eproto
