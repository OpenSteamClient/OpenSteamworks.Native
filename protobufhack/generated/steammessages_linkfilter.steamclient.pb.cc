// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_linkfilter.steamclient.proto

#include "steammessages_linkfilter.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CCommunity_GetLinkFilterHashPrefixes_Request::CCommunity_GetLinkFilterHashPrefixes_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hit_type_(0u)
  , count_(0u)
  , start_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal {
  constexpr CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetLinkFilterHashPrefixes_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal _CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_;
constexpr CCommunity_GetLinkFilterHashPrefixes_Response::CCommunity_GetLinkFilterHashPrefixes_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_prefixes_(){}
struct CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetLinkFilterHashPrefixes_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_;
constexpr CCommunity_GetLinkFilterHashes_Request::CCommunity_GetLinkFilterHashes_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hit_type_(0u)
  , count_(0u)
  , start_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal {
  constexpr CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetLinkFilterHashes_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal _CCommunity_GetLinkFilterHashes_Request_default_instance_;
constexpr CCommunity_GetLinkFilterHashes_Response::CCommunity_GetLinkFilterHashes_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hashes_(){}
struct CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetLinkFilterHashes_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterHashes_Response_default_instance_;
constexpr CCommunity_GetLinkFilterListVersion_Request::CCommunity_GetLinkFilterListVersion_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hit_type_(0u){}
struct CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal {
  constexpr CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetLinkFilterListVersion_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal _CCommunity_GetLinkFilterListVersion_Request_default_instance_;
constexpr CCommunity_GetLinkFilterListVersion_Response::CCommunity_GetLinkFilterListVersion_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(PROTOBUF_ULONGLONG(0)){}
struct CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetLinkFilterListVersion_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterListVersion_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5flinkfilter_2esteamclient_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5flinkfilter_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5flinkfilter_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, hit_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Request, start_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashPrefixes_Response, hash_prefixes_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, hit_type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Request, start_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterHashes_Response, hashes_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Request, hit_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, version_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetLinkFilterListVersion_Response, count_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CCommunity_GetLinkFilterHashPrefixes_Request)},
  { 11, -1, sizeof(::CCommunity_GetLinkFilterHashPrefixes_Response)},
  { 17, 25, sizeof(::CCommunity_GetLinkFilterHashes_Request)},
  { 28, -1, sizeof(::CCommunity_GetLinkFilterHashes_Response)},
  { 34, 40, sizeof(::CCommunity_GetLinkFilterListVersion_Request)},
  { 41, 48, sizeof(::CCommunity_GetLinkFilterListVersion_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetLinkFilterHashes_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetLinkFilterHashes_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetLinkFilterListVersion_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetLinkFilterListVersion_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5flinkfilter_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*steammessages_linkfilter.steamclient.p"
  "roto\032 google/protobuf/descriptor.proto\032\030"
  "steammessages_base.proto\032,steammessages_"
  "unified_base.steamclient.proto\"^\n,CCommu"
  "nity_GetLinkFilterHashPrefixes_Request\022\020"
  "\n\010hit_type\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\r\n\005start"
  "\030\003 \001(\004\"F\n-CCommunity_GetLinkFilterHashPr"
  "efixes_Response\022\025\n\rhash_prefixes\030\001 \003(\r\"X"
  "\n&CCommunity_GetLinkFilterHashes_Request"
  "\022\020\n\010hit_type\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\r\n\005sta"
  "rt\030\003 \001(\004\"9\n\'CCommunity_GetLinkFilterHash"
  "es_Response\022\016\n\006hashes\030\001 \003(\014\"\?\n+CCommunit"
  "y_GetLinkFilterListVersion_Request\022\020\n\010hi"
  "t_type\030\001 \001(\r\"N\n,CCommunity_GetLinkFilter"
  "ListVersion_Response\022\017\n\007version\030\001 \001(\t\022\r\n"
  "\005count\030\002 \001(\0042\364\002\n\023CommunityLinkFilter\022z\n\031"
  "GetLinkFilterHashPrefixes\022-.CCommunity_G"
  "etLinkFilterHashPrefixes_Request\032..CComm"
  "unity_GetLinkFilterHashPrefixes_Response"
  "\022h\n\023GetLinkFilterHashes\022\'.CCommunity_Get"
  "LinkFilterHashes_Request\032(.CCommunity_Ge"
  "tLinkFilterHashes_Response\022w\n\030GetLinkFil"
  "terListVersion\022,.CCommunity_GetLinkFilte"
  "rListVersion_Request\032-.CCommunity_GetLin"
  "kFilterListVersion_ResponseB\035\200\001\001\252\002\027OpenS"
  "teamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto = {
  false, false, 1018, descriptor_table_protodef_steammessages_5flinkfilter_2esteamclient_2eproto, "steammessages_linkfilter.steamclient.proto", 
  &descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto_once, descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto_deps, 3, 6,
  schemas, file_default_instances, TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5flinkfilter_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5flinkfilter_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5flinkfilter_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto);
  return descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5flinkfilter_2esteamclient_2eproto(&descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto);

// ===================================================================

class CCommunity_GetLinkFilterHashPrefixes_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetLinkFilterHashPrefixes_Request>()._has_bits_);
  static void set_has_hit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GetLinkFilterHashPrefixes_Request::CCommunity_GetLinkFilterHashPrefixes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetLinkFilterHashPrefixes_Request)
}
CCommunity_GetLinkFilterHashPrefixes_Request::CCommunity_GetLinkFilterHashPrefixes_Request(const CCommunity_GetLinkFilterHashPrefixes_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hit_type_, &from.hit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashPrefixes_Request)
}

void CCommunity_GetLinkFilterHashPrefixes_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hit_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
}

CCommunity_GetLinkFilterHashPrefixes_Request::~CCommunity_GetLinkFilterHashPrefixes_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashPrefixes_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetLinkFilterHashPrefixes_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetLinkFilterHashPrefixes_Request::ArenaDtor(void* object) {
  CCommunity_GetLinkFilterHashPrefixes_Request* _this = reinterpret_cast< CCommunity_GetLinkFilterHashPrefixes_Request* >(object);
  (void)_this;
}
void CCommunity_GetLinkFilterHashPrefixes_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetLinkFilterHashPrefixes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetLinkFilterHashPrefixes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_) -
        reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetLinkFilterHashPrefixes_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hit_type(&has_bits);
          hit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetLinkFilterHashPrefixes_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hit_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint64 start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashPrefixes_Request)
  return target;
}

size_t CCommunity_GetLinkFilterHashPrefixes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hit_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hit_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint64 start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashPrefixes_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashPrefixes_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetLinkFilterHashPrefixes_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashPrefixes_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashPrefixes_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashPrefixes_Request::MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hit_type_ = from.hit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetLinkFilterHashPrefixes_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashPrefixes_Request::CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashPrefixes_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashPrefixes_Request::InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetLinkFilterHashPrefixes_Request, start_)
      + sizeof(CCommunity_GetLinkFilterHashPrefixes_Request::start_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetLinkFilterHashPrefixes_Request, hit_type_)>(
          reinterpret_cast<char*>(&hit_type_),
          reinterpret_cast<char*>(&other->hit_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetLinkFilterHashPrefixes_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetLinkFilterHashPrefixes_Response::_Internal {
 public:
};

CCommunity_GetLinkFilterHashPrefixes_Response::CCommunity_GetLinkFilterHashPrefixes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hash_prefixes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetLinkFilterHashPrefixes_Response)
}
CCommunity_GetLinkFilterHashPrefixes_Response::CCommunity_GetLinkFilterHashPrefixes_Response(const CCommunity_GetLinkFilterHashPrefixes_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hash_prefixes_(from.hash_prefixes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashPrefixes_Response)
}

void CCommunity_GetLinkFilterHashPrefixes_Response::SharedCtor() {
}

CCommunity_GetLinkFilterHashPrefixes_Response::~CCommunity_GetLinkFilterHashPrefixes_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashPrefixes_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetLinkFilterHashPrefixes_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetLinkFilterHashPrefixes_Response::ArenaDtor(void* object) {
  CCommunity_GetLinkFilterHashPrefixes_Response* _this = reinterpret_cast< CCommunity_GetLinkFilterHashPrefixes_Response* >(object);
  (void)_this;
}
void CCommunity_GetLinkFilterHashPrefixes_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetLinkFilterHashPrefixes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetLinkFilterHashPrefixes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_prefixes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetLinkFilterHashPrefixes_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 hash_prefixes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hash_prefixes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hash_prefixes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetLinkFilterHashPrefixes_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hash_prefixes = 1;
  for (int i = 0, n = this->_internal_hash_prefixes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hash_prefixes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashPrefixes_Response)
  return target;
}

size_t CCommunity_GetLinkFilterHashPrefixes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hash_prefixes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hash_prefixes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hash_prefixes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashPrefixes_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashPrefixes_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetLinkFilterHashPrefixes_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashPrefixes_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashPrefixes_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashPrefixes_Response::MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_prefixes_.MergeFrom(from.hash_prefixes_);
}

void CCommunity_GetLinkFilterHashPrefixes_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashPrefixes_Response::CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashPrefixes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashPrefixes_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashPrefixes_Response::InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_prefixes_.InternalSwap(&other->hash_prefixes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetLinkFilterHashPrefixes_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetLinkFilterHashes_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetLinkFilterHashes_Request>()._has_bits_);
  static void set_has_hit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GetLinkFilterHashes_Request::CCommunity_GetLinkFilterHashes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetLinkFilterHashes_Request)
}
CCommunity_GetLinkFilterHashes_Request::CCommunity_GetLinkFilterHashes_Request(const CCommunity_GetLinkFilterHashes_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hit_type_, &from.hit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashes_Request)
}

void CCommunity_GetLinkFilterHashes_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hit_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
}

CCommunity_GetLinkFilterHashes_Request::~CCommunity_GetLinkFilterHashes_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashes_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetLinkFilterHashes_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetLinkFilterHashes_Request::ArenaDtor(void* object) {
  CCommunity_GetLinkFilterHashes_Request* _this = reinterpret_cast< CCommunity_GetLinkFilterHashes_Request* >(object);
  (void)_this;
}
void CCommunity_GetLinkFilterHashes_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetLinkFilterHashes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetLinkFilterHashes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashes_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_) -
        reinterpret_cast<char*>(&hit_type_)) + sizeof(start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetLinkFilterHashes_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hit_type(&has_bits);
          hit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetLinkFilterHashes_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashes_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hit_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint64 start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashes_Request)
  return target;
}

size_t CCommunity_GetLinkFilterHashes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashes_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hit_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hit_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint64 start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashes_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashes_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetLinkFilterHashes_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashes_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashes_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashes_Request::MergeFrom(const CCommunity_GetLinkFilterHashes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hit_type_ = from.hit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetLinkFilterHashes_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashes_Request::CopyFrom(const CCommunity_GetLinkFilterHashes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashes_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashes_Request::InternalSwap(CCommunity_GetLinkFilterHashes_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetLinkFilterHashes_Request, start_)
      + sizeof(CCommunity_GetLinkFilterHashes_Request::start_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetLinkFilterHashes_Request, hit_type_)>(
          reinterpret_cast<char*>(&hit_type_),
          reinterpret_cast<char*>(&other->hit_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetLinkFilterHashes_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetLinkFilterHashes_Response::_Internal {
 public:
};

CCommunity_GetLinkFilterHashes_Response::CCommunity_GetLinkFilterHashes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetLinkFilterHashes_Response)
}
CCommunity_GetLinkFilterHashes_Response::CCommunity_GetLinkFilterHashes_Response(const CCommunity_GetLinkFilterHashes_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterHashes_Response)
}

void CCommunity_GetLinkFilterHashes_Response::SharedCtor() {
}

CCommunity_GetLinkFilterHashes_Response::~CCommunity_GetLinkFilterHashes_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterHashes_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetLinkFilterHashes_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetLinkFilterHashes_Response::ArenaDtor(void* object) {
  CCommunity_GetLinkFilterHashes_Response* _this = reinterpret_cast< CCommunity_GetLinkFilterHashes_Response* >(object);
  (void)_this;
}
void CCommunity_GetLinkFilterHashes_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetLinkFilterHashes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetLinkFilterHashes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterHashes_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetLinkFilterHashes_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetLinkFilterHashes_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterHashes_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterHashes_Response)
  return target;
}

size_t CCommunity_GetLinkFilterHashes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterHashes_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hashes_.size());
  for (int i = 0, n = hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hashes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterHashes_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterHashes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterHashes_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetLinkFilterHashes_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterHashes_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterHashes_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterHashes_Response::MergeFrom(const CCommunity_GetLinkFilterHashes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterHashes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
}

void CCommunity_GetLinkFilterHashes_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterHashes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterHashes_Response::CopyFrom(const CCommunity_GetLinkFilterHashes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterHashes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterHashes_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterHashes_Response::InternalSwap(CCommunity_GetLinkFilterHashes_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetLinkFilterHashes_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetLinkFilterListVersion_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetLinkFilterListVersion_Request>()._has_bits_);
  static void set_has_hit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetLinkFilterListVersion_Request::CCommunity_GetLinkFilterListVersion_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetLinkFilterListVersion_Request)
}
CCommunity_GetLinkFilterListVersion_Request::CCommunity_GetLinkFilterListVersion_Request(const CCommunity_GetLinkFilterListVersion_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hit_type_ = from.hit_type_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterListVersion_Request)
}

void CCommunity_GetLinkFilterListVersion_Request::SharedCtor() {
hit_type_ = 0u;
}

CCommunity_GetLinkFilterListVersion_Request::~CCommunity_GetLinkFilterListVersion_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterListVersion_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetLinkFilterListVersion_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetLinkFilterListVersion_Request::ArenaDtor(void* object) {
  CCommunity_GetLinkFilterListVersion_Request* _this = reinterpret_cast< CCommunity_GetLinkFilterListVersion_Request* >(object);
  (void)_this;
}
void CCommunity_GetLinkFilterListVersion_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetLinkFilterListVersion_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetLinkFilterListVersion_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterListVersion_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetLinkFilterListVersion_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hit_type(&has_bits);
          hit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetLinkFilterListVersion_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterListVersion_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hit_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hit_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterListVersion_Request)
  return target;
}

size_t CCommunity_GetLinkFilterListVersion_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterListVersion_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 hit_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterListVersion_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterListVersion_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterListVersion_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetLinkFilterListVersion_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterListVersion_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterListVersion_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterListVersion_Request::MergeFrom(const CCommunity_GetLinkFilterListVersion_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterListVersion_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hit_type()) {
    _internal_set_hit_type(from._internal_hit_type());
  }
}

void CCommunity_GetLinkFilterListVersion_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterListVersion_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterListVersion_Request::CopyFrom(const CCommunity_GetLinkFilterListVersion_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterListVersion_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterListVersion_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterListVersion_Request::InternalSwap(CCommunity_GetLinkFilterListVersion_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hit_type_, other->hit_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetLinkFilterListVersion_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetLinkFilterListVersion_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetLinkFilterListVersion_Response>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetLinkFilterListVersion_Response::CCommunity_GetLinkFilterListVersion_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetLinkFilterListVersion_Response)
}
CCommunity_GetLinkFilterListVersion_Response::CCommunity_GetLinkFilterListVersion_Response(const CCommunity_GetLinkFilterListVersion_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetLinkFilterListVersion_Response)
}

void CCommunity_GetLinkFilterListVersion_Response::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
count_ = PROTOBUF_ULONGLONG(0);
}

CCommunity_GetLinkFilterListVersion_Response::~CCommunity_GetLinkFilterListVersion_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetLinkFilterListVersion_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetLinkFilterListVersion_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetLinkFilterListVersion_Response::ArenaDtor(void* object) {
  CCommunity_GetLinkFilterListVersion_Response* _this = reinterpret_cast< CCommunity_GetLinkFilterListVersion_Response* >(object);
  (void)_this;
}
void CCommunity_GetLinkFilterListVersion_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetLinkFilterListVersion_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetLinkFilterListVersion_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetLinkFilterListVersion_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmpty();
  }
  count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetLinkFilterListVersion_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetLinkFilterListVersion_Response.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetLinkFilterListVersion_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetLinkFilterListVersion_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetLinkFilterListVersion_Response.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetLinkFilterListVersion_Response)
  return target;
}

size_t CCommunity_GetLinkFilterListVersion_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetLinkFilterListVersion_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional uint64 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetLinkFilterListVersion_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetLinkFilterListVersion_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetLinkFilterListVersion_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetLinkFilterListVersion_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetLinkFilterListVersion_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetLinkFilterListVersion_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetLinkFilterListVersion_Response::MergeFrom(const CCommunity_GetLinkFilterListVersion_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetLinkFilterListVersion_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetLinkFilterListVersion_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetLinkFilterListVersion_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetLinkFilterListVersion_Response::CopyFrom(const CCommunity_GetLinkFilterListVersion_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetLinkFilterListVersion_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetLinkFilterListVersion_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetLinkFilterListVersion_Response::InternalSwap(CCommunity_GetLinkFilterListVersion_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetLinkFilterListVersion_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CommunityLinkFilter::~CommunityLinkFilter() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CommunityLinkFilter::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5flinkfilter_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CommunityLinkFilter::GetDescriptor() {
  return descriptor();
}

void CommunityLinkFilter::GetLinkFilterHashPrefixes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetLinkFilterHashPrefixes_Request*,
                         ::CCommunity_GetLinkFilterHashPrefixes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkFilterHashPrefixes() not implemented.");
  done->Run();
}

void CommunityLinkFilter::GetLinkFilterHashes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetLinkFilterHashes_Request*,
                         ::CCommunity_GetLinkFilterHashes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkFilterHashes() not implemented.");
  done->Run();
}

void CommunityLinkFilter::GetLinkFilterListVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCommunity_GetLinkFilterListVersion_Request*,
                         ::CCommunity_GetLinkFilterListVersion_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLinkFilterListVersion() not implemented.");
  done->Run();
}

void CommunityLinkFilter::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5flinkfilter_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetLinkFilterHashPrefixes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetLinkFilterHashPrefixes_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetLinkFilterHashPrefixes_Response*>(
                 response),
             done);
      break;
    case 1:
      GetLinkFilterHashes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetLinkFilterHashes_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetLinkFilterHashes_Response*>(
                 response),
             done);
      break;
    case 2:
      GetLinkFilterListVersion(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCommunity_GetLinkFilterListVersion_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCommunity_GetLinkFilterListVersion_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CommunityLinkFilter::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCommunity_GetLinkFilterHashPrefixes_Request::default_instance();
    case 1:
      return ::CCommunity_GetLinkFilterHashes_Request::default_instance();
    case 2:
      return ::CCommunity_GetLinkFilterListVersion_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CommunityLinkFilter::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCommunity_GetLinkFilterHashPrefixes_Response::default_instance();
    case 1:
      return ::CCommunity_GetLinkFilterHashes_Response::default_instance();
    case 2:
      return ::CCommunity_GetLinkFilterListVersion_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CommunityLinkFilter_Stub::CommunityLinkFilter_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CommunityLinkFilter_Stub::CommunityLinkFilter_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
CommunityLinkFilter_Stub::~CommunityLinkFilter_Stub() {
  if (owns_channel_) delete channel_;
}

void CommunityLinkFilter_Stub::GetLinkFilterHashPrefixes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetLinkFilterHashPrefixes_Request* request,
                              ::CCommunity_GetLinkFilterHashPrefixes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CommunityLinkFilter_Stub::GetLinkFilterHashes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetLinkFilterHashes_Request* request,
                              ::CCommunity_GetLinkFilterHashes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CommunityLinkFilter_Stub::GetLinkFilterListVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCommunity_GetLinkFilterListVersion_Request* request,
                              ::CCommunity_GetLinkFilterListVersion_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCommunity_GetLinkFilterHashPrefixes_Request* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashPrefixes_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetLinkFilterHashPrefixes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetLinkFilterHashPrefixes_Response* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashPrefixes_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetLinkFilterHashPrefixes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetLinkFilterHashes_Request* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashes_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetLinkFilterHashes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetLinkFilterHashes_Response* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterHashes_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetLinkFilterHashes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetLinkFilterListVersion_Request* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterListVersion_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetLinkFilterListVersion_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetLinkFilterListVersion_Response* Arena::CreateMaybeMessage< ::CCommunity_GetLinkFilterListVersion_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetLinkFilterListVersion_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
