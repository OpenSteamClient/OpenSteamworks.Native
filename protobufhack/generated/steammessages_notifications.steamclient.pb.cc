// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_notifications.steamclient.proto

#include "steammessages_notifications.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SteamNotificationData::SteamNotificationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_id_(PROTOBUF_ULONGLONG(0))
  , notification_targets_(0u)
  , notification_type_(0)

  , timestamp_(0u)
  , read_(false)
  , hidden_(false)
  , expiry_(0u)
  , viewed_(0u){}
struct SteamNotificationDataDefaultTypeInternal {
  constexpr SteamNotificationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SteamNotificationDataDefaultTypeInternal() {}
  union {
    SteamNotificationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SteamNotificationDataDefaultTypeInternal _SteamNotificationData_default_instance_;
constexpr CSteamNotification_NotificationsReceived_Notification::CSteamNotification_NotificationsReceived_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_()
  , pending_gift_count_(0u)
  , pending_friend_count_(0u)
  , pending_family_invite_count_(0u){}
struct CSteamNotification_NotificationsReceived_NotificationDefaultTypeInternal {
  constexpr CSteamNotification_NotificationsReceived_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamNotification_NotificationsReceived_NotificationDefaultTypeInternal() {}
  union {
    CSteamNotification_NotificationsReceived_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamNotification_NotificationsReceived_NotificationDefaultTypeInternal _CSteamNotification_NotificationsReceived_Notification_default_instance_;
constexpr SteamNotificationPreference::SteamNotificationPreference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notification_type_(0)

  , notification_targets_(0u){}
struct SteamNotificationPreferenceDefaultTypeInternal {
  constexpr SteamNotificationPreferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SteamNotificationPreferenceDefaultTypeInternal() {}
  union {
    SteamNotificationPreference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SteamNotificationPreferenceDefaultTypeInternal _SteamNotificationPreference_default_instance_;
constexpr CSteamNotification_PreferencesUpdated_Notification::CSteamNotification_PreferencesUpdated_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(){}
struct CSteamNotification_PreferencesUpdated_NotificationDefaultTypeInternal {
  constexpr CSteamNotification_PreferencesUpdated_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteamNotification_PreferencesUpdated_NotificationDefaultTypeInternal() {}
  union {
    CSteamNotification_PreferencesUpdated_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteamNotification_PreferencesUpdated_NotificationDefaultTypeInternal _CSteamNotification_PreferencesUpdated_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fnotifications_2esteamclient_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fnotifications_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fnotifications_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fnotifications_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, notification_id_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, notification_targets_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, notification_type_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, body_data_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, read_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, hidden_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, expiry_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationData, viewed_),
  1,
  2,
  3,
  0,
  5,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_NotificationsReceived_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_NotificationsReceived_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_NotificationsReceived_Notification, notifications_),
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_NotificationsReceived_Notification, pending_gift_count_),
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_NotificationsReceived_Notification, pending_friend_count_),
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_NotificationsReceived_Notification, pending_family_invite_count_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SteamNotificationPreference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationPreference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SteamNotificationPreference, notification_type_),
  PROTOBUF_FIELD_OFFSET(::SteamNotificationPreference, notification_targets_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_PreferencesUpdated_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteamNotification_PreferencesUpdated_Notification, preferences_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::SteamNotificationData)},
  { 23, 32, sizeof(::CSteamNotification_NotificationsReceived_Notification)},
  { 36, 43, sizeof(::SteamNotificationPreference)},
  { 45, -1, sizeof(::CSteamNotification_PreferencesUpdated_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SteamNotificationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamNotification_NotificationsReceived_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SteamNotificationPreference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteamNotification_PreferencesUpdated_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fnotifications_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-steammessages_notifications.steamclien"
  "t.proto\032 google/protobuf/descriptor.prot"
  "o\032\030steammessages_base.proto\032,steammessag"
  "es_unified_base.steamclient.proto\"\206\002\n\025St"
  "eamNotificationData\022\027\n\017notification_id\030\001"
  " \001(\004\022\034\n\024notification_targets\030\002 \001(\r\022R\n\021no"
  "tification_type\030\003 \001(\0162\027.ESteamNotificati"
  "onType:\036ESteamNotificationType_Invalid\022\021"
  "\n\tbody_data\030\004 \001(\t\022\014\n\004read\030\007 \001(\010\022\021\n\ttimes"
  "tamp\030\010 \001(\r\022\016\n\006hidden\030\t \001(\010\022\016\n\006expiry\030\n \001"
  "(\r\022\016\n\006viewed\030\013 \001(\r\"\305\001\n5CSteamNotificatio"
  "n_NotificationsReceived_Notification\022-\n\r"
  "notifications\030\001 \003(\0132\026.SteamNotificationD"
  "ata\022\032\n\022pending_gift_count\030\002 \001(\r\022\034\n\024pendi"
  "ng_friend_count\030\003 \001(\r\022#\n\033pending_family_"
  "invite_count\030\004 \001(\r\"\217\001\n\033SteamNotification"
  "Preference\022R\n\021notification_type\030\001 \001(\0162\027."
  "ESteamNotificationType:\036ESteamNotificati"
  "onType_Invalid\022\034\n\024notification_targets\030\002"
  " \001(\r\"g\n2CSteamNotification_PreferencesUp"
  "dated_Notification\0221\n\013preferences\030\001 \003(\0132"
  "\034.SteamNotificationPreference*\273\t\n\026ESteam"
  "NotificationType\022\"\n\036ESteamNotificationTy"
  "pe_Invalid\020\000\022\037\n\033ESteamNotificationType_T"
  "est\020\001\022\037\n\033ESteamNotificationType_Gift\020\002\022\""
  "\n\036ESteamNotificationType_Comment\020\003\022\037\n\033ES"
  "teamNotificationType_Item\020\004\022\'\n#ESteamNot"
  "ificationType_FriendInvite\020\005\022$\n ESteamNo"
  "tificationType_MajorSale\020\006\022+\n\'ESteamNoti"
  "ficationType_PreloadAvailable\020\007\022#\n\037EStea"
  "mNotificationType_Wishlist\020\010\022%\n!ESteamNo"
  "tificationType_TradeOffer\020\t\022\"\n\036ESteamNot"
  "ificationType_General\020\n\022&\n\"ESteamNotific"
  "ationType_HelpRequest\020\013\022$\n ESteamNotific"
  "ationType_AsyncGame\020\014\022\"\n\036ESteamNotificat"
  "ionType_ChatMsg\020\r\022\'\n#ESteamNotificationT"
  "ype_ModeratorMsg\020\016\0227\n3ESteamNotification"
  "Type_ParentalFeatureAccessRequest\020\017\022\'\n#E"
  "SteamNotificationType_FamilyInvite\020\020\0220\n,"
  "ESteamNotificationType_FamilyPurchaseReq"
  "uest\020\021\0222\n.ESteamNotificationType_Parenta"
  "lPlaytimeRequest\020\022\0228\n4ESteamNotification"
  "Type_FamilyPurchaseRequestResponse\020\023\0228\n4"
  "ESteamNotificationType_ParentalFeatureAc"
  "cessResponse\020\024\0223\n/ESteamNotificationType"
  "_ParentalPlaytimeResponse\020\025\022-\n)ESteamNot"
  "ificationType_RequestedGameAdded\020\026\022&\n\"ES"
  "teamNotificationType_SendToPhone\020\027\022)\n%ES"
  "teamNotificationType_ClipDownloaded\020\030\022$\n"
  " ESteamNotificationType_2FAPrompt\020\031\022-\n)E"
  "SteamNotificationType_MobileConfirmation"
  "\020\032\022\'\n#ESteamNotificationType_PartnerEven"
  "t\020\0332\325\001\n\027SteamNotificationClient\022\\\n\025Notif"
  "icationsReceived\0226.CSteamNotification_No"
  "tificationsReceived_Notification\032\013.NoRes"
  "ponse\022V\n\022PreferencesUpdated\0223.CSteamNoti"
  "fication_PreferencesUpdated_Notification"
  "\032\013.NoResponse\032\004\300\265\030\002B\035\200\001\001\252\002\027OpenSteamwork"
  "s.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto = {
  false, false, 2330, descriptor_table_protodef_steammessages_5fnotifications_2esteamclient_2eproto, "steammessages_notifications.steamclient.proto", 
  &descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_once, descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_steammessages_5fnotifications_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fnotifications_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fnotifications_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fnotifications_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fnotifications_2esteamclient_2eproto(&descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fnotifications_2esteamclient_2eproto[0];
}
bool ESteamNotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SteamNotificationData::_Internal {
 public:
  using HasBits = decltype(std::declval<SteamNotificationData>()._has_bits_);
  static void set_has_notification_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notification_targets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_body_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_viewed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SteamNotificationData::SteamNotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SteamNotificationData)
}
SteamNotificationData::SteamNotificationData(const SteamNotificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body_data()) {
    body_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body_data(), 
      GetArena());
  }
  ::memcpy(&notification_id_, &from.notification_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewed_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(viewed_));
  // @@protoc_insertion_point(copy_constructor:SteamNotificationData)
}

void SteamNotificationData::SharedCtor() {
body_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&viewed_) -
    reinterpret_cast<char*>(&notification_id_)) + sizeof(viewed_));
}

SteamNotificationData::~SteamNotificationData() {
  // @@protoc_insertion_point(destructor:SteamNotificationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SteamNotificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  body_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SteamNotificationData::ArenaDtor(void* object) {
  SteamNotificationData* _this = reinterpret_cast< SteamNotificationData* >(object);
  (void)_this;
}
void SteamNotificationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SteamNotificationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteamNotificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:SteamNotificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    body_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&notification_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiry_) -
        reinterpret_cast<char*>(&notification_id_)) + sizeof(expiry_));
  }
  viewed_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteamNotificationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 notification_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_notification_id(&has_bits);
          notification_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 notification_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_notification_targets(&has_bits);
          notification_targets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ESteamNotificationType notification_type = 3 [default = ESteamNotificationType_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamNotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::ESteamNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string body_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_body_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SteamNotificationData.body_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool read = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_read(&has_bits);
          read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hidden = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expiry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_expiry(&has_bits);
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 viewed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_viewed(&has_bits);
          viewed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SteamNotificationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SteamNotificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 notification_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_notification_id(), target);
  }

  // optional uint32 notification_targets = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_notification_targets(), target);
  }

  // optional .ESteamNotificationType notification_type = 3 [default = ESteamNotificationType_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notification_type(), target);
  }

  // optional string body_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body_data().data(), static_cast<int>(this->_internal_body_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SteamNotificationData.body_data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body_data(), target);
  }

  // optional bool read = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_read(), target);
  }

  // optional uint32 timestamp = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timestamp(), target);
  }

  // optional bool hidden = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_hidden(), target);
  }

  // optional uint32 expiry = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_expiry(), target);
  }

  // optional uint32 viewed = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_viewed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SteamNotificationData)
  return target;
}

size_t SteamNotificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SteamNotificationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string body_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body_data());
    }

    // optional uint64 notification_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_notification_id());
    }

    // optional uint32 notification_targets = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_notification_targets());
    }

    // optional .ESteamNotificationType notification_type = 3 [default = ESteamNotificationType_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

    // optional uint32 timestamp = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional bool read = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool hidden = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 expiry = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expiry());
    }

  }
  // optional uint32 viewed = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_viewed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SteamNotificationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SteamNotificationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SteamNotificationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SteamNotificationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SteamNotificationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SteamNotificationData)
    MergeFrom(*source);
  }
}

void SteamNotificationData::MergeFrom(const SteamNotificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SteamNotificationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_body_data(from._internal_body_data());
    }
    if (cached_has_bits & 0x00000002u) {
      notification_id_ = from.notification_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      notification_targets_ = from.notification_targets_;
    }
    if (cached_has_bits & 0x00000008u) {
      notification_type_ = from.notification_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      read_ = from.read_;
    }
    if (cached_has_bits & 0x00000040u) {
      hidden_ = from.hidden_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiry_ = from.expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_viewed(from._internal_viewed());
  }
}

void SteamNotificationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SteamNotificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamNotificationData::CopyFrom(const SteamNotificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SteamNotificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamNotificationData::IsInitialized() const {
  return true;
}

void SteamNotificationData::InternalSwap(SteamNotificationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_data_.Swap(&other->body_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteamNotificationData, viewed_)
      + sizeof(SteamNotificationData::viewed_)
      - PROTOBUF_FIELD_OFFSET(SteamNotificationData, notification_id_)>(
          reinterpret_cast<char*>(&notification_id_),
          reinterpret_cast<char*>(&other->notification_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteamNotificationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamNotification_NotificationsReceived_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteamNotification_NotificationsReceived_Notification>()._has_bits_);
  static void set_has_pending_gift_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pending_friend_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pending_family_invite_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSteamNotification_NotificationsReceived_Notification::CSteamNotification_NotificationsReceived_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notifications_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamNotification_NotificationsReceived_Notification)
}
CSteamNotification_NotificationsReceived_Notification::CSteamNotification_NotificationsReceived_Notification(const CSteamNotification_NotificationsReceived_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pending_gift_count_, &from.pending_gift_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_family_invite_count_) -
    reinterpret_cast<char*>(&pending_gift_count_)) + sizeof(pending_family_invite_count_));
  // @@protoc_insertion_point(copy_constructor:CSteamNotification_NotificationsReceived_Notification)
}

void CSteamNotification_NotificationsReceived_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pending_gift_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pending_family_invite_count_) -
    reinterpret_cast<char*>(&pending_gift_count_)) + sizeof(pending_family_invite_count_));
}

CSteamNotification_NotificationsReceived_Notification::~CSteamNotification_NotificationsReceived_Notification() {
  // @@protoc_insertion_point(destructor:CSteamNotification_NotificationsReceived_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamNotification_NotificationsReceived_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamNotification_NotificationsReceived_Notification::ArenaDtor(void* object) {
  CSteamNotification_NotificationsReceived_Notification* _this = reinterpret_cast< CSteamNotification_NotificationsReceived_Notification* >(object);
  (void)_this;
}
void CSteamNotification_NotificationsReceived_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamNotification_NotificationsReceived_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamNotification_NotificationsReceived_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamNotification_NotificationsReceived_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pending_gift_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_family_invite_count_) -
        reinterpret_cast<char*>(&pending_gift_count_)) + sizeof(pending_family_invite_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamNotification_NotificationsReceived_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SteamNotificationData notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 pending_gift_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pending_gift_count(&has_bits);
          pending_gift_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pending_friend_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pending_friend_count(&has_bits);
          pending_friend_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pending_family_invite_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pending_family_invite_count(&has_bits);
          pending_family_invite_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamNotification_NotificationsReceived_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamNotification_NotificationsReceived_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SteamNotificationData notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 pending_gift_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pending_gift_count(), target);
  }

  // optional uint32 pending_friend_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pending_friend_count(), target);
  }

  // optional uint32 pending_family_invite_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pending_family_invite_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamNotification_NotificationsReceived_Notification)
  return target;
}

size_t CSteamNotification_NotificationsReceived_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamNotification_NotificationsReceived_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SteamNotificationData notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pending_gift_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pending_gift_count());
    }

    // optional uint32 pending_friend_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pending_friend_count());
    }

    // optional uint32 pending_family_invite_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pending_family_invite_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamNotification_NotificationsReceived_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamNotification_NotificationsReceived_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamNotification_NotificationsReceived_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamNotification_NotificationsReceived_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamNotification_NotificationsReceived_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamNotification_NotificationsReceived_Notification)
    MergeFrom(*source);
  }
}

void CSteamNotification_NotificationsReceived_Notification::MergeFrom(const CSteamNotification_NotificationsReceived_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamNotification_NotificationsReceived_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pending_gift_count_ = from.pending_gift_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      pending_friend_count_ = from.pending_friend_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      pending_family_invite_count_ = from.pending_family_invite_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSteamNotification_NotificationsReceived_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamNotification_NotificationsReceived_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamNotification_NotificationsReceived_Notification::CopyFrom(const CSteamNotification_NotificationsReceived_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamNotification_NotificationsReceived_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamNotification_NotificationsReceived_Notification::IsInitialized() const {
  return true;
}

void CSteamNotification_NotificationsReceived_Notification::InternalSwap(CSteamNotification_NotificationsReceived_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notifications_.InternalSwap(&other->notifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSteamNotification_NotificationsReceived_Notification, pending_family_invite_count_)
      + sizeof(CSteamNotification_NotificationsReceived_Notification::pending_family_invite_count_)
      - PROTOBUF_FIELD_OFFSET(CSteamNotification_NotificationsReceived_Notification, pending_gift_count_)>(
          reinterpret_cast<char*>(&pending_gift_count_),
          reinterpret_cast<char*>(&other->pending_gift_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamNotification_NotificationsReceived_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SteamNotificationPreference::_Internal {
 public:
  using HasBits = decltype(std::declval<SteamNotificationPreference>()._has_bits_);
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notification_targets(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SteamNotificationPreference::SteamNotificationPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SteamNotificationPreference)
}
SteamNotificationPreference::SteamNotificationPreference(const SteamNotificationPreference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&notification_type_, &from.notification_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_targets_) -
    reinterpret_cast<char*>(&notification_type_)) + sizeof(notification_targets_));
  // @@protoc_insertion_point(copy_constructor:SteamNotificationPreference)
}

void SteamNotificationPreference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notification_targets_) -
    reinterpret_cast<char*>(&notification_type_)) + sizeof(notification_targets_));
}

SteamNotificationPreference::~SteamNotificationPreference() {
  // @@protoc_insertion_point(destructor:SteamNotificationPreference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SteamNotificationPreference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SteamNotificationPreference::ArenaDtor(void* object) {
  SteamNotificationPreference* _this = reinterpret_cast< SteamNotificationPreference* >(object);
  (void)_this;
}
void SteamNotificationPreference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SteamNotificationPreference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteamNotificationPreference::Clear() {
// @@protoc_insertion_point(message_clear_start:SteamNotificationPreference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&notification_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notification_targets_) -
        reinterpret_cast<char*>(&notification_type_)) + sizeof(notification_targets_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteamNotificationPreference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ESteamNotificationType notification_type = 1 [default = ESteamNotificationType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamNotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::ESteamNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 notification_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_notification_targets(&has_bits);
          notification_targets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SteamNotificationPreference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SteamNotificationPreference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESteamNotificationType notification_type = 1 [default = ESteamNotificationType_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_notification_type(), target);
  }

  // optional uint32 notification_targets = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_notification_targets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SteamNotificationPreference)
  return target;
}

size_t SteamNotificationPreference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SteamNotificationPreference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ESteamNotificationType notification_type = 1 [default = ESteamNotificationType_Invalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

    // optional uint32 notification_targets = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_notification_targets());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SteamNotificationPreference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SteamNotificationPreference)
  GOOGLE_DCHECK_NE(&from, this);
  const SteamNotificationPreference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SteamNotificationPreference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SteamNotificationPreference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SteamNotificationPreference)
    MergeFrom(*source);
  }
}

void SteamNotificationPreference::MergeFrom(const SteamNotificationPreference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SteamNotificationPreference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      notification_type_ = from.notification_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      notification_targets_ = from.notification_targets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SteamNotificationPreference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SteamNotificationPreference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamNotificationPreference::CopyFrom(const SteamNotificationPreference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SteamNotificationPreference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamNotificationPreference::IsInitialized() const {
  return true;
}

void SteamNotificationPreference::InternalSwap(SteamNotificationPreference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteamNotificationPreference, notification_targets_)
      + sizeof(SteamNotificationPreference::notification_targets_)
      - PROTOBUF_FIELD_OFFSET(SteamNotificationPreference, notification_type_)>(
          reinterpret_cast<char*>(&notification_type_),
          reinterpret_cast<char*>(&other->notification_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteamNotificationPreference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteamNotification_PreferencesUpdated_Notification::_Internal {
 public:
};

CSteamNotification_PreferencesUpdated_Notification::CSteamNotification_PreferencesUpdated_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preferences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteamNotification_PreferencesUpdated_Notification)
}
CSteamNotification_PreferencesUpdated_Notification::CSteamNotification_PreferencesUpdated_Notification(const CSteamNotification_PreferencesUpdated_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preferences_(from.preferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSteamNotification_PreferencesUpdated_Notification)
}

void CSteamNotification_PreferencesUpdated_Notification::SharedCtor() {
}

CSteamNotification_PreferencesUpdated_Notification::~CSteamNotification_PreferencesUpdated_Notification() {
  // @@protoc_insertion_point(destructor:CSteamNotification_PreferencesUpdated_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteamNotification_PreferencesUpdated_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSteamNotification_PreferencesUpdated_Notification::ArenaDtor(void* object) {
  CSteamNotification_PreferencesUpdated_Notification* _this = reinterpret_cast< CSteamNotification_PreferencesUpdated_Notification* >(object);
  (void)_this;
}
void CSteamNotification_PreferencesUpdated_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteamNotification_PreferencesUpdated_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteamNotification_PreferencesUpdated_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteamNotification_PreferencesUpdated_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteamNotification_PreferencesUpdated_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SteamNotificationPreference preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteamNotification_PreferencesUpdated_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteamNotification_PreferencesUpdated_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SteamNotificationPreference preferences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_preferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteamNotification_PreferencesUpdated_Notification)
  return target;
}

size_t CSteamNotification_PreferencesUpdated_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteamNotification_PreferencesUpdated_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SteamNotificationPreference preferences = 1;
  total_size += 1UL * this->_internal_preferences_size();
  for (const auto& msg : this->preferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteamNotification_PreferencesUpdated_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteamNotification_PreferencesUpdated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteamNotification_PreferencesUpdated_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteamNotification_PreferencesUpdated_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteamNotification_PreferencesUpdated_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteamNotification_PreferencesUpdated_Notification)
    MergeFrom(*source);
  }
}

void CSteamNotification_PreferencesUpdated_Notification::MergeFrom(const CSteamNotification_PreferencesUpdated_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteamNotification_PreferencesUpdated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferences_.MergeFrom(from.preferences_);
}

void CSteamNotification_PreferencesUpdated_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteamNotification_PreferencesUpdated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteamNotification_PreferencesUpdated_Notification::CopyFrom(const CSteamNotification_PreferencesUpdated_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteamNotification_PreferencesUpdated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteamNotification_PreferencesUpdated_Notification::IsInitialized() const {
  return true;
}

void CSteamNotification_PreferencesUpdated_Notification::InternalSwap(CSteamNotification_PreferencesUpdated_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  preferences_.InternalSwap(&other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteamNotification_PreferencesUpdated_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SteamNotificationClient::~SteamNotificationClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamNotificationClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fnotifications_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SteamNotificationClient::GetDescriptor() {
  return descriptor();
}

void SteamNotificationClient::NotificationsReceived(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamNotification_NotificationsReceived_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotificationsReceived() not implemented.");
  done->Run();
}

void SteamNotificationClient::PreferencesUpdated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSteamNotification_PreferencesUpdated_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PreferencesUpdated() not implemented.");
  done->Run();
}

void SteamNotificationClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fnotifications_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      NotificationsReceived(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamNotification_NotificationsReceived_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      PreferencesUpdated(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSteamNotification_PreferencesUpdated_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamNotificationClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSteamNotification_NotificationsReceived_Notification::default_instance();
    case 1:
      return ::CSteamNotification_PreferencesUpdated_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SteamNotificationClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SteamNotificationClient_Stub::SteamNotificationClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SteamNotificationClient_Stub::SteamNotificationClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SteamNotificationClient_Stub::~SteamNotificationClient_Stub() {
  if (owns_channel_) delete channel_;
}

void SteamNotificationClient_Stub::NotificationsReceived(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamNotification_NotificationsReceived_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SteamNotificationClient_Stub::PreferencesUpdated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSteamNotification_PreferencesUpdated_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SteamNotificationData* Arena::CreateMaybeMessage< ::SteamNotificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SteamNotificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamNotification_NotificationsReceived_Notification* Arena::CreateMaybeMessage< ::CSteamNotification_NotificationsReceived_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamNotification_NotificationsReceived_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::SteamNotificationPreference* Arena::CreateMaybeMessage< ::SteamNotificationPreference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SteamNotificationPreference >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteamNotification_PreferencesUpdated_Notification* Arena::CreateMaybeMessage< ::CSteamNotification_PreferencesUpdated_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteamNotification_PreferencesUpdated_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
