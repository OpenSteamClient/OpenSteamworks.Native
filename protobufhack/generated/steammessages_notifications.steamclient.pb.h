// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_notifications.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fnotifications_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fnotifications_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fnotifications_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fnotifications_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_metadata_getter(int index);
class CSteamNotification_NotificationsReceived_Notification;
struct CSteamNotification_NotificationsReceived_NotificationDefaultTypeInternal;
extern CSteamNotification_NotificationsReceived_NotificationDefaultTypeInternal _CSteamNotification_NotificationsReceived_Notification_default_instance_;
class CSteamNotification_PreferencesUpdated_Notification;
struct CSteamNotification_PreferencesUpdated_NotificationDefaultTypeInternal;
extern CSteamNotification_PreferencesUpdated_NotificationDefaultTypeInternal _CSteamNotification_PreferencesUpdated_Notification_default_instance_;
class SteamNotificationData;
struct SteamNotificationDataDefaultTypeInternal;
extern SteamNotificationDataDefaultTypeInternal _SteamNotificationData_default_instance_;
class SteamNotificationPreference;
struct SteamNotificationPreferenceDefaultTypeInternal;
extern SteamNotificationPreferenceDefaultTypeInternal _SteamNotificationPreference_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSteamNotification_NotificationsReceived_Notification* Arena::CreateMaybeMessage<::CSteamNotification_NotificationsReceived_Notification>(Arena*);
template<> ::CSteamNotification_PreferencesUpdated_Notification* Arena::CreateMaybeMessage<::CSteamNotification_PreferencesUpdated_Notification>(Arena*);
template<> ::SteamNotificationData* Arena::CreateMaybeMessage<::SteamNotificationData>(Arena*);
template<> ::SteamNotificationPreference* Arena::CreateMaybeMessage<::SteamNotificationPreference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ESteamNotificationType : int {
  ESteamNotificationType_Invalid = 0,
  ESteamNotificationType_Test = 1,
  ESteamNotificationType_Gift = 2,
  ESteamNotificationType_Comment = 3,
  ESteamNotificationType_Item = 4,
  ESteamNotificationType_FriendInvite = 5,
  ESteamNotificationType_MajorSale = 6,
  ESteamNotificationType_PreloadAvailable = 7,
  ESteamNotificationType_Wishlist = 8,
  ESteamNotificationType_TradeOffer = 9,
  ESteamNotificationType_General = 10,
  ESteamNotificationType_HelpRequest = 11,
  ESteamNotificationType_AsyncGame = 12,
  ESteamNotificationType_ChatMsg = 13,
  ESteamNotificationType_ModeratorMsg = 14,
  ESteamNotificationType_ParentalFeatureAccessRequest = 15,
  ESteamNotificationType_FamilyInvite = 16,
  ESteamNotificationType_FamilyPurchaseRequest = 17,
  ESteamNotificationType_ParentalPlaytimeRequest = 18,
  ESteamNotificationType_FamilyPurchaseRequestResponse = 19,
  ESteamNotificationType_ParentalFeatureAccessResponse = 20,
  ESteamNotificationType_ParentalPlaytimeResponse = 21,
  ESteamNotificationType_RequestedGameAdded = 22,
  ESteamNotificationType_SendToPhone = 23,
  ESteamNotificationType_ClipDownloaded = 24,
  ESteamNotificationType_2FAPrompt = 25,
  ESteamNotificationType_MobileConfirmation = 26,
  ESteamNotificationType_PartnerEvent = 27
};
bool ESteamNotificationType_IsValid(int value);
constexpr ESteamNotificationType ESteamNotificationType_MIN = ESteamNotificationType_Invalid;
constexpr ESteamNotificationType ESteamNotificationType_MAX = ESteamNotificationType_PartnerEvent;
constexpr int ESteamNotificationType_ARRAYSIZE = ESteamNotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamNotificationType_descriptor();
template<typename T>
inline const std::string& ESteamNotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamNotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamNotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamNotificationType_descriptor(), enum_t_value);
}
inline bool ESteamNotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamNotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamNotificationType>(
    ESteamNotificationType_descriptor(), name, value);
}
// ===================================================================

class SteamNotificationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SteamNotificationData) */ {
 public:
  inline SteamNotificationData() : SteamNotificationData(nullptr) {}
  virtual ~SteamNotificationData();
  explicit constexpr SteamNotificationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SteamNotificationData(const SteamNotificationData& from);
  SteamNotificationData(SteamNotificationData&& from) noexcept
    : SteamNotificationData() {
    *this = ::std::move(from);
  }

  inline SteamNotificationData& operator=(const SteamNotificationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteamNotificationData& operator=(SteamNotificationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SteamNotificationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SteamNotificationData* internal_default_instance() {
    return reinterpret_cast<const SteamNotificationData*>(
               &_SteamNotificationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SteamNotificationData& a, SteamNotificationData& b) {
    a.Swap(&b);
  }
  inline void Swap(SteamNotificationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SteamNotificationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SteamNotificationData* New() const final {
    return CreateMaybeMessage<SteamNotificationData>(nullptr);
  }

  SteamNotificationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SteamNotificationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SteamNotificationData& from);
  void MergeFrom(const SteamNotificationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteamNotificationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SteamNotificationData";
  }
  protected:
  explicit SteamNotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyDataFieldNumber = 4,
    kNotificationIdFieldNumber = 1,
    kNotificationTargetsFieldNumber = 2,
    kNotificationTypeFieldNumber = 3,
    kTimestampFieldNumber = 8,
    kReadFieldNumber = 7,
    kHiddenFieldNumber = 9,
    kExpiryFieldNumber = 10,
    kViewedFieldNumber = 11,
  };
  // optional string body_data = 4;
  bool has_body_data() const;
  private:
  bool _internal_has_body_data() const;
  public:
  void clear_body_data();
  const std::string& body_data() const;
  void set_body_data(const std::string& value);
  void set_body_data(std::string&& value);
  void set_body_data(const char* value);
  void set_body_data(const char* value, size_t size);
  std::string* mutable_body_data();
  std::string* release_body_data();
  void set_allocated_body_data(std::string* body_data);
  private:
  const std::string& _internal_body_data() const;
  void _internal_set_body_data(const std::string& value);
  std::string* _internal_mutable_body_data();
  public:

  // optional uint64 notification_id = 1;
  bool has_notification_id() const;
  private:
  bool _internal_has_notification_id() const;
  public:
  void clear_notification_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_id() const;
  void set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_notification_id() const;
  void _internal_set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 notification_targets = 2;
  bool has_notification_targets() const;
  private:
  bool _internal_has_notification_targets() const;
  public:
  void clear_notification_targets();
  ::PROTOBUF_NAMESPACE_ID::uint32 notification_targets() const;
  void set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notification_targets() const;
  void _internal_set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ESteamNotificationType notification_type = 3 [default = ESteamNotificationType_Invalid];
  bool has_notification_type() const;
  private:
  bool _internal_has_notification_type() const;
  public:
  void clear_notification_type();
  ::ESteamNotificationType notification_type() const;
  void set_notification_type(::ESteamNotificationType value);
  private:
  ::ESteamNotificationType _internal_notification_type() const;
  void _internal_set_notification_type(::ESteamNotificationType value);
  public:

  // optional uint32 timestamp = 8;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool read = 7;
  bool has_read() const;
  private:
  bool _internal_has_read() const;
  public:
  void clear_read();
  bool read() const;
  void set_read(bool value);
  private:
  bool _internal_read() const;
  void _internal_set_read(bool value);
  public:

  // optional bool hidden = 9;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional uint32 expiry = 10;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 viewed = 11;
  bool has_viewed() const;
  private:
  bool _internal_has_viewed() const;
  public:
  void clear_viewed();
  ::PROTOBUF_NAMESPACE_ID::uint32 viewed() const;
  void set_viewed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viewed() const;
  void _internal_set_viewed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SteamNotificationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notification_targets_;
  int notification_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  bool read_;
  bool hidden_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viewed_;
  friend struct ::TableStruct_steammessages_5fnotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSteamNotification_NotificationsReceived_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamNotification_NotificationsReceived_Notification) */ {
 public:
  inline CSteamNotification_NotificationsReceived_Notification() : CSteamNotification_NotificationsReceived_Notification(nullptr) {}
  virtual ~CSteamNotification_NotificationsReceived_Notification();
  explicit constexpr CSteamNotification_NotificationsReceived_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamNotification_NotificationsReceived_Notification(const CSteamNotification_NotificationsReceived_Notification& from);
  CSteamNotification_NotificationsReceived_Notification(CSteamNotification_NotificationsReceived_Notification&& from) noexcept
    : CSteamNotification_NotificationsReceived_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamNotification_NotificationsReceived_Notification& operator=(const CSteamNotification_NotificationsReceived_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamNotification_NotificationsReceived_Notification& operator=(CSteamNotification_NotificationsReceived_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamNotification_NotificationsReceived_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamNotification_NotificationsReceived_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamNotification_NotificationsReceived_Notification*>(
               &_CSteamNotification_NotificationsReceived_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSteamNotification_NotificationsReceived_Notification& a, CSteamNotification_NotificationsReceived_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamNotification_NotificationsReceived_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamNotification_NotificationsReceived_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamNotification_NotificationsReceived_Notification* New() const final {
    return CreateMaybeMessage<CSteamNotification_NotificationsReceived_Notification>(nullptr);
  }

  CSteamNotification_NotificationsReceived_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamNotification_NotificationsReceived_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamNotification_NotificationsReceived_Notification& from);
  void MergeFrom(const CSteamNotification_NotificationsReceived_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamNotification_NotificationsReceived_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamNotification_NotificationsReceived_Notification";
  }
  protected:
  explicit CSteamNotification_NotificationsReceived_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
    kPendingGiftCountFieldNumber = 2,
    kPendingFriendCountFieldNumber = 3,
    kPendingFamilyInviteCountFieldNumber = 4,
  };
  // repeated .SteamNotificationData notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::SteamNotificationData* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationData >*
      mutable_notifications();
  private:
  const ::SteamNotificationData& _internal_notifications(int index) const;
  ::SteamNotificationData* _internal_add_notifications();
  public:
  const ::SteamNotificationData& notifications(int index) const;
  ::SteamNotificationData* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationData >&
      notifications() const;

  // optional uint32 pending_gift_count = 2;
  bool has_pending_gift_count() const;
  private:
  bool _internal_has_pending_gift_count() const;
  public:
  void clear_pending_gift_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_gift_count() const;
  void set_pending_gift_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_gift_count() const;
  void _internal_set_pending_gift_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pending_friend_count = 3;
  bool has_pending_friend_count() const;
  private:
  bool _internal_has_pending_friend_count() const;
  public:
  void clear_pending_friend_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_friend_count() const;
  void set_pending_friend_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_friend_count() const;
  void _internal_set_pending_friend_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pending_family_invite_count = 4;
  bool has_pending_family_invite_count() const;
  private:
  bool _internal_has_pending_family_invite_count() const;
  public:
  void clear_pending_family_invite_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_family_invite_count() const;
  void set_pending_family_invite_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_family_invite_count() const;
  void _internal_set_pending_family_invite_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamNotification_NotificationsReceived_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationData > notifications_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_gift_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_friend_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_family_invite_count_;
  friend struct ::TableStruct_steammessages_5fnotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class SteamNotificationPreference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SteamNotificationPreference) */ {
 public:
  inline SteamNotificationPreference() : SteamNotificationPreference(nullptr) {}
  virtual ~SteamNotificationPreference();
  explicit constexpr SteamNotificationPreference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SteamNotificationPreference(const SteamNotificationPreference& from);
  SteamNotificationPreference(SteamNotificationPreference&& from) noexcept
    : SteamNotificationPreference() {
    *this = ::std::move(from);
  }

  inline SteamNotificationPreference& operator=(const SteamNotificationPreference& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteamNotificationPreference& operator=(SteamNotificationPreference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SteamNotificationPreference& default_instance() {
    return *internal_default_instance();
  }
  static inline const SteamNotificationPreference* internal_default_instance() {
    return reinterpret_cast<const SteamNotificationPreference*>(
               &_SteamNotificationPreference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SteamNotificationPreference& a, SteamNotificationPreference& b) {
    a.Swap(&b);
  }
  inline void Swap(SteamNotificationPreference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SteamNotificationPreference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SteamNotificationPreference* New() const final {
    return CreateMaybeMessage<SteamNotificationPreference>(nullptr);
  }

  SteamNotificationPreference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SteamNotificationPreference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SteamNotificationPreference& from);
  void MergeFrom(const SteamNotificationPreference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteamNotificationPreference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SteamNotificationPreference";
  }
  protected:
  explicit SteamNotificationPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationTypeFieldNumber = 1,
    kNotificationTargetsFieldNumber = 2,
  };
  // optional .ESteamNotificationType notification_type = 1 [default = ESteamNotificationType_Invalid];
  bool has_notification_type() const;
  private:
  bool _internal_has_notification_type() const;
  public:
  void clear_notification_type();
  ::ESteamNotificationType notification_type() const;
  void set_notification_type(::ESteamNotificationType value);
  private:
  ::ESteamNotificationType _internal_notification_type() const;
  void _internal_set_notification_type(::ESteamNotificationType value);
  public:

  // optional uint32 notification_targets = 2;
  bool has_notification_targets() const;
  private:
  bool _internal_has_notification_targets() const;
  public:
  void clear_notification_targets();
  ::PROTOBUF_NAMESPACE_ID::uint32 notification_targets() const;
  void set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notification_targets() const;
  void _internal_set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SteamNotificationPreference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int notification_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notification_targets_;
  friend struct ::TableStruct_steammessages_5fnotifications_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSteamNotification_PreferencesUpdated_Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamNotification_PreferencesUpdated_Notification) */ {
 public:
  inline CSteamNotification_PreferencesUpdated_Notification() : CSteamNotification_PreferencesUpdated_Notification(nullptr) {}
  virtual ~CSteamNotification_PreferencesUpdated_Notification();
  explicit constexpr CSteamNotification_PreferencesUpdated_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamNotification_PreferencesUpdated_Notification(const CSteamNotification_PreferencesUpdated_Notification& from);
  CSteamNotification_PreferencesUpdated_Notification(CSteamNotification_PreferencesUpdated_Notification&& from) noexcept
    : CSteamNotification_PreferencesUpdated_Notification() {
    *this = ::std::move(from);
  }

  inline CSteamNotification_PreferencesUpdated_Notification& operator=(const CSteamNotification_PreferencesUpdated_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamNotification_PreferencesUpdated_Notification& operator=(CSteamNotification_PreferencesUpdated_Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteamNotification_PreferencesUpdated_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamNotification_PreferencesUpdated_Notification* internal_default_instance() {
    return reinterpret_cast<const CSteamNotification_PreferencesUpdated_Notification*>(
               &_CSteamNotification_PreferencesUpdated_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSteamNotification_PreferencesUpdated_Notification& a, CSteamNotification_PreferencesUpdated_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamNotification_PreferencesUpdated_Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamNotification_PreferencesUpdated_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteamNotification_PreferencesUpdated_Notification* New() const final {
    return CreateMaybeMessage<CSteamNotification_PreferencesUpdated_Notification>(nullptr);
  }

  CSteamNotification_PreferencesUpdated_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteamNotification_PreferencesUpdated_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteamNotification_PreferencesUpdated_Notification& from);
  void MergeFrom(const CSteamNotification_PreferencesUpdated_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamNotification_PreferencesUpdated_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamNotification_PreferencesUpdated_Notification";
  }
  protected:
  explicit CSteamNotification_PreferencesUpdated_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fnotifications_2esteamclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
  };
  // repeated .SteamNotificationPreference preferences = 1;
  int preferences_size() const;
  private:
  int _internal_preferences_size() const;
  public:
  void clear_preferences();
  ::SteamNotificationPreference* mutable_preferences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationPreference >*
      mutable_preferences();
  private:
  const ::SteamNotificationPreference& _internal_preferences(int index) const;
  ::SteamNotificationPreference* _internal_add_preferences();
  public:
  const ::SteamNotificationPreference& preferences(int index) const;
  ::SteamNotificationPreference* add_preferences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationPreference >&
      preferences() const;

  // @@protoc_insertion_point(class_scope:CSteamNotification_PreferencesUpdated_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationPreference > preferences_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fnotifications_2esteamclient_2eproto;
};
// ===================================================================

class SteamNotificationClient_Stub;

class SteamNotificationClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SteamNotificationClient() {};
 public:
  virtual ~SteamNotificationClient();

  typedef SteamNotificationClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotificationsReceived(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamNotification_NotificationsReceived_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PreferencesUpdated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamNotification_PreferencesUpdated_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamNotificationClient);
};

class SteamNotificationClient_Stub : public SteamNotificationClient {
 public:
  SteamNotificationClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SteamNotificationClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SteamNotificationClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SteamNotificationClient ------------------------------------------

  void NotificationsReceived(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamNotification_NotificationsReceived_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void PreferencesUpdated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamNotification_PreferencesUpdated_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SteamNotificationClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SteamNotificationData

// optional uint64 notification_id = 1;
inline bool SteamNotificationData::_internal_has_notification_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SteamNotificationData::has_notification_id() const {
  return _internal_has_notification_id();
}
inline void SteamNotificationData::clear_notification_id() {
  notification_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SteamNotificationData::_internal_notification_id() const {
  return notification_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SteamNotificationData::notification_id() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.notification_id)
  return _internal_notification_id();
}
inline void SteamNotificationData::_internal_set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  notification_id_ = value;
}
inline void SteamNotificationData::set_notification_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_notification_id(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.notification_id)
}

// optional uint32 notification_targets = 2;
inline bool SteamNotificationData::_internal_has_notification_targets() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SteamNotificationData::has_notification_targets() const {
  return _internal_has_notification_targets();
}
inline void SteamNotificationData::clear_notification_targets() {
  notification_targets_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::_internal_notification_targets() const {
  return notification_targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::notification_targets() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.notification_targets)
  return _internal_notification_targets();
}
inline void SteamNotificationData::_internal_set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  notification_targets_ = value;
}
inline void SteamNotificationData::set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notification_targets(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.notification_targets)
}

// optional .ESteamNotificationType notification_type = 3 [default = ESteamNotificationType_Invalid];
inline bool SteamNotificationData::_internal_has_notification_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SteamNotificationData::has_notification_type() const {
  return _internal_has_notification_type();
}
inline void SteamNotificationData::clear_notification_type() {
  notification_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ESteamNotificationType SteamNotificationData::_internal_notification_type() const {
  return static_cast< ::ESteamNotificationType >(notification_type_);
}
inline ::ESteamNotificationType SteamNotificationData::notification_type() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.notification_type)
  return _internal_notification_type();
}
inline void SteamNotificationData::_internal_set_notification_type(::ESteamNotificationType value) {
  assert(::ESteamNotificationType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  notification_type_ = value;
}
inline void SteamNotificationData::set_notification_type(::ESteamNotificationType value) {
  _internal_set_notification_type(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.notification_type)
}

// optional string body_data = 4;
inline bool SteamNotificationData::_internal_has_body_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SteamNotificationData::has_body_data() const {
  return _internal_has_body_data();
}
inline void SteamNotificationData::clear_body_data() {
  body_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SteamNotificationData::body_data() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.body_data)
  return _internal_body_data();
}
inline void SteamNotificationData::set_body_data(const std::string& value) {
  _internal_set_body_data(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.body_data)
}
inline std::string* SteamNotificationData::mutable_body_data() {
  // @@protoc_insertion_point(field_mutable:SteamNotificationData.body_data)
  return _internal_mutable_body_data();
}
inline const std::string& SteamNotificationData::_internal_body_data() const {
  return body_data_.Get();
}
inline void SteamNotificationData::_internal_set_body_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SteamNotificationData::set_body_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SteamNotificationData.body_data)
}
inline void SteamNotificationData::set_body_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SteamNotificationData.body_data)
}
inline void SteamNotificationData::set_body_data(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SteamNotificationData.body_data)
}
inline std::string* SteamNotificationData::_internal_mutable_body_data() {
  _has_bits_[0] |= 0x00000001u;
  return body_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SteamNotificationData::release_body_data() {
  // @@protoc_insertion_point(field_release:SteamNotificationData.body_data)
  if (!_internal_has_body_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SteamNotificationData::set_allocated_body_data(std::string* body_data) {
  if (body_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SteamNotificationData.body_data)
}

// optional bool read = 7;
inline bool SteamNotificationData::_internal_has_read() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SteamNotificationData::has_read() const {
  return _internal_has_read();
}
inline void SteamNotificationData::clear_read() {
  read_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SteamNotificationData::_internal_read() const {
  return read_;
}
inline bool SteamNotificationData::read() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.read)
  return _internal_read();
}
inline void SteamNotificationData::_internal_set_read(bool value) {
  _has_bits_[0] |= 0x00000020u;
  read_ = value;
}
inline void SteamNotificationData::set_read(bool value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.read)
}

// optional uint32 timestamp = 8;
inline bool SteamNotificationData::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SteamNotificationData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void SteamNotificationData::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::timestamp() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.timestamp)
  return _internal_timestamp();
}
inline void SteamNotificationData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void SteamNotificationData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.timestamp)
}

// optional bool hidden = 9;
inline bool SteamNotificationData::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SteamNotificationData::has_hidden() const {
  return _internal_has_hidden();
}
inline void SteamNotificationData::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SteamNotificationData::_internal_hidden() const {
  return hidden_;
}
inline bool SteamNotificationData::hidden() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.hidden)
  return _internal_hidden();
}
inline void SteamNotificationData::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hidden_ = value;
}
inline void SteamNotificationData::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.hidden)
}

// optional uint32 expiry = 10;
inline bool SteamNotificationData::_internal_has_expiry() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SteamNotificationData::has_expiry() const {
  return _internal_has_expiry();
}
inline void SteamNotificationData::clear_expiry() {
  expiry_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::expiry() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.expiry)
  return _internal_expiry();
}
inline void SteamNotificationData::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  expiry_ = value;
}
inline void SteamNotificationData::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.expiry)
}

// optional uint32 viewed = 11;
inline bool SteamNotificationData::_internal_has_viewed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SteamNotificationData::has_viewed() const {
  return _internal_has_viewed();
}
inline void SteamNotificationData::clear_viewed() {
  viewed_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::_internal_viewed() const {
  return viewed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationData::viewed() const {
  // @@protoc_insertion_point(field_get:SteamNotificationData.viewed)
  return _internal_viewed();
}
inline void SteamNotificationData::_internal_set_viewed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  viewed_ = value;
}
inline void SteamNotificationData::set_viewed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viewed(value);
  // @@protoc_insertion_point(field_set:SteamNotificationData.viewed)
}

// -------------------------------------------------------------------

// CSteamNotification_NotificationsReceived_Notification

// repeated .SteamNotificationData notifications = 1;
inline int CSteamNotification_NotificationsReceived_Notification::_internal_notifications_size() const {
  return notifications_.size();
}
inline int CSteamNotification_NotificationsReceived_Notification::notifications_size() const {
  return _internal_notifications_size();
}
inline void CSteamNotification_NotificationsReceived_Notification::clear_notifications() {
  notifications_.Clear();
}
inline ::SteamNotificationData* CSteamNotification_NotificationsReceived_Notification::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:CSteamNotification_NotificationsReceived_Notification.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationData >*
CSteamNotification_NotificationsReceived_Notification::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:CSteamNotification_NotificationsReceived_Notification.notifications)
  return &notifications_;
}
inline const ::SteamNotificationData& CSteamNotification_NotificationsReceived_Notification::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::SteamNotificationData& CSteamNotification_NotificationsReceived_Notification::notifications(int index) const {
  // @@protoc_insertion_point(field_get:CSteamNotification_NotificationsReceived_Notification.notifications)
  return _internal_notifications(index);
}
inline ::SteamNotificationData* CSteamNotification_NotificationsReceived_Notification::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::SteamNotificationData* CSteamNotification_NotificationsReceived_Notification::add_notifications() {
  // @@protoc_insertion_point(field_add:CSteamNotification_NotificationsReceived_Notification.notifications)
  return _internal_add_notifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationData >&
CSteamNotification_NotificationsReceived_Notification::notifications() const {
  // @@protoc_insertion_point(field_list:CSteamNotification_NotificationsReceived_Notification.notifications)
  return notifications_;
}

// optional uint32 pending_gift_count = 2;
inline bool CSteamNotification_NotificationsReceived_Notification::_internal_has_pending_gift_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamNotification_NotificationsReceived_Notification::has_pending_gift_count() const {
  return _internal_has_pending_gift_count();
}
inline void CSteamNotification_NotificationsReceived_Notification::clear_pending_gift_count() {
  pending_gift_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamNotification_NotificationsReceived_Notification::_internal_pending_gift_count() const {
  return pending_gift_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamNotification_NotificationsReceived_Notification::pending_gift_count() const {
  // @@protoc_insertion_point(field_get:CSteamNotification_NotificationsReceived_Notification.pending_gift_count)
  return _internal_pending_gift_count();
}
inline void CSteamNotification_NotificationsReceived_Notification::_internal_set_pending_gift_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pending_gift_count_ = value;
}
inline void CSteamNotification_NotificationsReceived_Notification::set_pending_gift_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_gift_count(value);
  // @@protoc_insertion_point(field_set:CSteamNotification_NotificationsReceived_Notification.pending_gift_count)
}

// optional uint32 pending_friend_count = 3;
inline bool CSteamNotification_NotificationsReceived_Notification::_internal_has_pending_friend_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamNotification_NotificationsReceived_Notification::has_pending_friend_count() const {
  return _internal_has_pending_friend_count();
}
inline void CSteamNotification_NotificationsReceived_Notification::clear_pending_friend_count() {
  pending_friend_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamNotification_NotificationsReceived_Notification::_internal_pending_friend_count() const {
  return pending_friend_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamNotification_NotificationsReceived_Notification::pending_friend_count() const {
  // @@protoc_insertion_point(field_get:CSteamNotification_NotificationsReceived_Notification.pending_friend_count)
  return _internal_pending_friend_count();
}
inline void CSteamNotification_NotificationsReceived_Notification::_internal_set_pending_friend_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pending_friend_count_ = value;
}
inline void CSteamNotification_NotificationsReceived_Notification::set_pending_friend_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_friend_count(value);
  // @@protoc_insertion_point(field_set:CSteamNotification_NotificationsReceived_Notification.pending_friend_count)
}

// optional uint32 pending_family_invite_count = 4;
inline bool CSteamNotification_NotificationsReceived_Notification::_internal_has_pending_family_invite_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamNotification_NotificationsReceived_Notification::has_pending_family_invite_count() const {
  return _internal_has_pending_family_invite_count();
}
inline void CSteamNotification_NotificationsReceived_Notification::clear_pending_family_invite_count() {
  pending_family_invite_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamNotification_NotificationsReceived_Notification::_internal_pending_family_invite_count() const {
  return pending_family_invite_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSteamNotification_NotificationsReceived_Notification::pending_family_invite_count() const {
  // @@protoc_insertion_point(field_get:CSteamNotification_NotificationsReceived_Notification.pending_family_invite_count)
  return _internal_pending_family_invite_count();
}
inline void CSteamNotification_NotificationsReceived_Notification::_internal_set_pending_family_invite_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pending_family_invite_count_ = value;
}
inline void CSteamNotification_NotificationsReceived_Notification::set_pending_family_invite_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_family_invite_count(value);
  // @@protoc_insertion_point(field_set:CSteamNotification_NotificationsReceived_Notification.pending_family_invite_count)
}

// -------------------------------------------------------------------

// SteamNotificationPreference

// optional .ESteamNotificationType notification_type = 1 [default = ESteamNotificationType_Invalid];
inline bool SteamNotificationPreference::_internal_has_notification_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SteamNotificationPreference::has_notification_type() const {
  return _internal_has_notification_type();
}
inline void SteamNotificationPreference::clear_notification_type() {
  notification_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESteamNotificationType SteamNotificationPreference::_internal_notification_type() const {
  return static_cast< ::ESteamNotificationType >(notification_type_);
}
inline ::ESteamNotificationType SteamNotificationPreference::notification_type() const {
  // @@protoc_insertion_point(field_get:SteamNotificationPreference.notification_type)
  return _internal_notification_type();
}
inline void SteamNotificationPreference::_internal_set_notification_type(::ESteamNotificationType value) {
  assert(::ESteamNotificationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  notification_type_ = value;
}
inline void SteamNotificationPreference::set_notification_type(::ESteamNotificationType value) {
  _internal_set_notification_type(value);
  // @@protoc_insertion_point(field_set:SteamNotificationPreference.notification_type)
}

// optional uint32 notification_targets = 2;
inline bool SteamNotificationPreference::_internal_has_notification_targets() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SteamNotificationPreference::has_notification_targets() const {
  return _internal_has_notification_targets();
}
inline void SteamNotificationPreference::clear_notification_targets() {
  notification_targets_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationPreference::_internal_notification_targets() const {
  return notification_targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SteamNotificationPreference::notification_targets() const {
  // @@protoc_insertion_point(field_get:SteamNotificationPreference.notification_targets)
  return _internal_notification_targets();
}
inline void SteamNotificationPreference::_internal_set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  notification_targets_ = value;
}
inline void SteamNotificationPreference::set_notification_targets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notification_targets(value);
  // @@protoc_insertion_point(field_set:SteamNotificationPreference.notification_targets)
}

// -------------------------------------------------------------------

// CSteamNotification_PreferencesUpdated_Notification

// repeated .SteamNotificationPreference preferences = 1;
inline int CSteamNotification_PreferencesUpdated_Notification::_internal_preferences_size() const {
  return preferences_.size();
}
inline int CSteamNotification_PreferencesUpdated_Notification::preferences_size() const {
  return _internal_preferences_size();
}
inline void CSteamNotification_PreferencesUpdated_Notification::clear_preferences() {
  preferences_.Clear();
}
inline ::SteamNotificationPreference* CSteamNotification_PreferencesUpdated_Notification::mutable_preferences(int index) {
  // @@protoc_insertion_point(field_mutable:CSteamNotification_PreferencesUpdated_Notification.preferences)
  return preferences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationPreference >*
CSteamNotification_PreferencesUpdated_Notification::mutable_preferences() {
  // @@protoc_insertion_point(field_mutable_list:CSteamNotification_PreferencesUpdated_Notification.preferences)
  return &preferences_;
}
inline const ::SteamNotificationPreference& CSteamNotification_PreferencesUpdated_Notification::_internal_preferences(int index) const {
  return preferences_.Get(index);
}
inline const ::SteamNotificationPreference& CSteamNotification_PreferencesUpdated_Notification::preferences(int index) const {
  // @@protoc_insertion_point(field_get:CSteamNotification_PreferencesUpdated_Notification.preferences)
  return _internal_preferences(index);
}
inline ::SteamNotificationPreference* CSteamNotification_PreferencesUpdated_Notification::_internal_add_preferences() {
  return preferences_.Add();
}
inline ::SteamNotificationPreference* CSteamNotification_PreferencesUpdated_Notification::add_preferences() {
  // @@protoc_insertion_point(field_add:CSteamNotification_PreferencesUpdated_Notification.preferences)
  return _internal_add_preferences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SteamNotificationPreference >&
CSteamNotification_PreferencesUpdated_Notification::preferences() const {
  // @@protoc_insertion_point(field_list:CSteamNotification_PreferencesUpdated_Notification.preferences)
  return preferences_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ESteamNotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamNotificationType>() {
  return ::ESteamNotificationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fnotifications_2esteamclient_2eproto
