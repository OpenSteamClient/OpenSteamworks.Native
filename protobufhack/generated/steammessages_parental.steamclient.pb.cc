// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_parental.steamclient.proto

#include "steammessages_parental.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ParentalApp::ParentalApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , is_allowed_(false){}
struct ParentalAppDefaultTypeInternal {
  constexpr ParentalAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalAppDefaultTypeInternal() {}
  union {
    ParentalApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalAppDefaultTypeInternal _ParentalApp_default_instance_;
constexpr ParentalPlaytimeDay::ParentalPlaytimeDay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allowed_time_windows_(PROTOBUF_ULONGLONG(0))
  , allowed_daily_minutes_(0u){}
struct ParentalPlaytimeDayDefaultTypeInternal {
  constexpr ParentalPlaytimeDayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalPlaytimeDayDefaultTypeInternal() {}
  union {
    ParentalPlaytimeDay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalPlaytimeDayDefaultTypeInternal _ParentalPlaytimeDay_default_instance_;
constexpr ParentalPlaytimeRestrictions::ParentalPlaytimeRestrictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playtime_days_()
  , apply_playtime_restrictions_(false){}
struct ParentalPlaytimeRestrictionsDefaultTypeInternal {
  constexpr ParentalPlaytimeRestrictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalPlaytimeRestrictionsDefaultTypeInternal() {}
  union {
    ParentalPlaytimeRestrictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalPlaytimeRestrictionsDefaultTypeInternal _ParentalPlaytimeRestrictions_default_instance_;
constexpr ParentalTemporaryPlaytimeRestrictions::ParentalTemporaryPlaytimeRestrictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : restrictions_(nullptr)
  , rtime_expires_(0u){}
struct ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal {
  constexpr ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal() {}
  union {
    ParentalTemporaryPlaytimeRestrictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal _ParentalTemporaryPlaytimeRestrictions_default_instance_;
constexpr ParentalSettings::ParentalSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applist_base_()
  , applist_custom_()
  , applist_base_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , salt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , passwordhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recovery_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playtime_restrictions_(nullptr)
  , temporary_playtime_restrictions_(nullptr)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , applist_base_id_(0u)
  , passwordhashtype_(0u)
  , enabled_features_(0u)
  , is_enabled_(false)
  , is_site_license_lock_(false)
  , temporary_enabled_features_(0u)
  , rtime_temporary_feature_expiration_(0u){}
struct ParentalSettingsDefaultTypeInternal {
  constexpr ParentalSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalSettingsDefaultTypeInternal() {}
  union {
    ParentalSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalSettingsDefaultTypeInternal _ParentalSettings_default_instance_;
constexpr CParental_EnableParentalSettings_Request::CParental_EnableParentalSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr)
  , enablecode_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_EnableParentalSettings_RequestDefaultTypeInternal {
  constexpr CParental_EnableParentalSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_EnableParentalSettings_RequestDefaultTypeInternal() {}
  union {
    CParental_EnableParentalSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_EnableParentalSettings_RequestDefaultTypeInternal _CParental_EnableParentalSettings_Request_default_instance_;
constexpr CParental_EnableParentalSettings_Response::CParental_EnableParentalSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_EnableParentalSettings_ResponseDefaultTypeInternal {
  constexpr CParental_EnableParentalSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_EnableParentalSettings_ResponseDefaultTypeInternal() {}
  union {
    CParental_EnableParentalSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_EnableParentalSettings_ResponseDefaultTypeInternal _CParental_EnableParentalSettings_Response_default_instance_;
constexpr CParental_DisableParentalSettings_Request::CParental_DisableParentalSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_DisableParentalSettings_RequestDefaultTypeInternal {
  constexpr CParental_DisableParentalSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_DisableParentalSettings_RequestDefaultTypeInternal() {}
  union {
    CParental_DisableParentalSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_DisableParentalSettings_RequestDefaultTypeInternal _CParental_DisableParentalSettings_Request_default_instance_;
constexpr CParental_DisableParentalSettings_Response::CParental_DisableParentalSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_DisableParentalSettings_ResponseDefaultTypeInternal {
  constexpr CParental_DisableParentalSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_DisableParentalSettings_ResponseDefaultTypeInternal() {}
  union {
    CParental_DisableParentalSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_DisableParentalSettings_ResponseDefaultTypeInternal _CParental_DisableParentalSettings_Response_default_instance_;
constexpr CParental_GetParentalSettings_Request::CParental_GetParentalSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_GetParentalSettings_RequestDefaultTypeInternal {
  constexpr CParental_GetParentalSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_GetParentalSettings_RequestDefaultTypeInternal() {}
  union {
    CParental_GetParentalSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_GetParentalSettings_RequestDefaultTypeInternal _CParental_GetParentalSettings_Request_default_instance_;
constexpr CParental_GetParentalSettings_Response::CParental_GetParentalSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(nullptr){}
struct CParental_GetParentalSettings_ResponseDefaultTypeInternal {
  constexpr CParental_GetParentalSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_GetParentalSettings_ResponseDefaultTypeInternal() {}
  union {
    CParental_GetParentalSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_GetParentalSettings_ResponseDefaultTypeInternal _CParental_GetParentalSettings_Response_default_instance_;
constexpr CParental_GetSignedParentalSettings_Request::CParental_GetSignedParentalSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : priority_(0u){}
struct CParental_GetSignedParentalSettings_RequestDefaultTypeInternal {
  constexpr CParental_GetSignedParentalSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_GetSignedParentalSettings_RequestDefaultTypeInternal() {}
  union {
    CParental_GetSignedParentalSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_GetSignedParentalSettings_RequestDefaultTypeInternal _CParental_GetSignedParentalSettings_Request_default_instance_;
constexpr CParental_GetSignedParentalSettings_Response::CParental_GetSignedParentalSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_settings_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_GetSignedParentalSettings_ResponseDefaultTypeInternal {
  constexpr CParental_GetSignedParentalSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_GetSignedParentalSettings_ResponseDefaultTypeInternal() {}
  union {
    CParental_GetSignedParentalSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_GetSignedParentalSettings_ResponseDefaultTypeInternal _CParental_GetSignedParentalSettings_Response_default_instance_;
constexpr CParental_SetParentalSettings_Request::CParental_SetParentalSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_SetParentalSettings_RequestDefaultTypeInternal {
  constexpr CParental_SetParentalSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_SetParentalSettings_RequestDefaultTypeInternal() {}
  union {
    CParental_SetParentalSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_SetParentalSettings_RequestDefaultTypeInternal _CParental_SetParentalSettings_Request_default_instance_;
constexpr CParental_SetParentalSettings_Response::CParental_SetParentalSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_SetParentalSettings_ResponseDefaultTypeInternal {
  constexpr CParental_SetParentalSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_SetParentalSettings_ResponseDefaultTypeInternal() {}
  union {
    CParental_SetParentalSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_SetParentalSettings_ResponseDefaultTypeInternal _CParental_SetParentalSettings_Response_default_instance_;
constexpr CParental_ValidateToken_Request::CParental_ValidateToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unloctoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_ValidateToken_RequestDefaultTypeInternal {
  constexpr CParental_ValidateToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ValidateToken_RequestDefaultTypeInternal() {}
  union {
    CParental_ValidateToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ValidateToken_RequestDefaultTypeInternal _CParental_ValidateToken_Request_default_instance_;
constexpr CParental_ValidateToken_Response::CParental_ValidateToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_ValidateToken_ResponseDefaultTypeInternal {
  constexpr CParental_ValidateToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ValidateToken_ResponseDefaultTypeInternal() {}
  union {
    CParental_ValidateToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ValidateToken_ResponseDefaultTypeInternal _CParental_ValidateToken_Response_default_instance_;
constexpr CParental_ValidatePassword_Request::CParental_ValidatePassword_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_unlocon_success_(false){}
struct CParental_ValidatePassword_RequestDefaultTypeInternal {
  constexpr CParental_ValidatePassword_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ValidatePassword_RequestDefaultTypeInternal() {}
  union {
    CParental_ValidatePassword_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ValidatePassword_RequestDefaultTypeInternal _CParental_ValidatePassword_Request_default_instance_;
constexpr CParental_ValidatePassword_Response::CParental_ValidatePassword_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_ValidatePassword_ResponseDefaultTypeInternal {
  constexpr CParental_ValidatePassword_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ValidatePassword_ResponseDefaultTypeInternal() {}
  union {
    CParental_ValidatePassword_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ValidatePassword_ResponseDefaultTypeInternal _CParental_ValidatePassword_Response_default_instance_;
constexpr CParental_LockClient_Request::CParental_LockClient_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_LockClient_RequestDefaultTypeInternal {
  constexpr CParental_LockClient_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_LockClient_RequestDefaultTypeInternal() {}
  union {
    CParental_LockClient_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_LockClient_RequestDefaultTypeInternal _CParental_LockClient_Request_default_instance_;
constexpr CParental_LockClient_Response::CParental_LockClient_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_LockClient_ResponseDefaultTypeInternal {
  constexpr CParental_LockClient_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_LockClient_ResponseDefaultTypeInternal() {}
  union {
    CParental_LockClient_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_LockClient_ResponseDefaultTypeInternal _CParental_LockClient_Response_default_instance_;
constexpr CParental_RequestRecoveryCode_Request::CParental_RequestRecoveryCode_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_RequestRecoveryCode_RequestDefaultTypeInternal {
  constexpr CParental_RequestRecoveryCode_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_RequestRecoveryCode_RequestDefaultTypeInternal() {}
  union {
    CParental_RequestRecoveryCode_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_RequestRecoveryCode_RequestDefaultTypeInternal _CParental_RequestRecoveryCode_Request_default_instance_;
constexpr CParental_RequestRecoveryCode_Response::CParental_RequestRecoveryCode_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_RequestRecoveryCode_ResponseDefaultTypeInternal {
  constexpr CParental_RequestRecoveryCode_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_RequestRecoveryCode_ResponseDefaultTypeInternal() {}
  union {
    CParental_RequestRecoveryCode_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_RequestRecoveryCode_ResponseDefaultTypeInternal _CParental_RequestRecoveryCode_Response_default_instance_;
constexpr CParental_DisableWithRecoveryCode_Request::CParental_DisableWithRecoveryCode_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recovery_code_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_DisableWithRecoveryCode_RequestDefaultTypeInternal {
  constexpr CParental_DisableWithRecoveryCode_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_DisableWithRecoveryCode_RequestDefaultTypeInternal() {}
  union {
    CParental_DisableWithRecoveryCode_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_DisableWithRecoveryCode_RequestDefaultTypeInternal _CParental_DisableWithRecoveryCode_Request_default_instance_;
constexpr CParental_DisableWithRecoveryCode_Response::CParental_DisableWithRecoveryCode_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_DisableWithRecoveryCode_ResponseDefaultTypeInternal {
  constexpr CParental_DisableWithRecoveryCode_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_DisableWithRecoveryCode_ResponseDefaultTypeInternal() {}
  union {
    CParental_DisableWithRecoveryCode_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_DisableWithRecoveryCode_ResponseDefaultTypeInternal _CParental_DisableWithRecoveryCode_Response_default_instance_;
constexpr CParental_RequestFeatureAccess_Request::CParental_RequestFeatureAccess_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : features_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_RequestFeatureAccess_RequestDefaultTypeInternal {
  constexpr CParental_RequestFeatureAccess_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_RequestFeatureAccess_RequestDefaultTypeInternal() {}
  union {
    CParental_RequestFeatureAccess_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_RequestFeatureAccess_RequestDefaultTypeInternal _CParental_RequestFeatureAccess_Request_default_instance_;
constexpr CParental_RequestFeatureAccess_Response::CParental_RequestFeatureAccess_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_RequestFeatureAccess_ResponseDefaultTypeInternal {
  constexpr CParental_RequestFeatureAccess_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_RequestFeatureAccess_ResponseDefaultTypeInternal() {}
  union {
    CParental_RequestFeatureAccess_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_RequestFeatureAccess_ResponseDefaultTypeInternal _CParental_RequestFeatureAccess_Response_default_instance_;
constexpr CParental_ApproveFeatureAccess_Request::CParental_ApproveFeatureAccess_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0))
  , approve_(false)
  , features_(0u)
  , duration_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_ApproveFeatureAccess_RequestDefaultTypeInternal {
  constexpr CParental_ApproveFeatureAccess_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ApproveFeatureAccess_RequestDefaultTypeInternal() {}
  union {
    CParental_ApproveFeatureAccess_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ApproveFeatureAccess_RequestDefaultTypeInternal _CParental_ApproveFeatureAccess_Request_default_instance_;
constexpr CParental_ApproveFeatureAccess_Response::CParental_ApproveFeatureAccess_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_ApproveFeatureAccess_ResponseDefaultTypeInternal {
  constexpr CParental_ApproveFeatureAccess_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ApproveFeatureAccess_ResponseDefaultTypeInternal() {}
  union {
    CParental_ApproveFeatureAccess_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ApproveFeatureAccess_ResponseDefaultTypeInternal _CParental_ApproveFeatureAccess_Response_default_instance_;
constexpr CParental_RequestPlaytime_Request::CParental_RequestPlaytime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_playtime_restrictions_(nullptr)
  , time_expires_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_RequestPlaytime_RequestDefaultTypeInternal {
  constexpr CParental_RequestPlaytime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_RequestPlaytime_RequestDefaultTypeInternal() {}
  union {
    CParental_RequestPlaytime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_RequestPlaytime_RequestDefaultTypeInternal _CParental_RequestPlaytime_Request_default_instance_;
constexpr CParental_RequestPlaytime_Response::CParental_RequestPlaytime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_RequestPlaytime_ResponseDefaultTypeInternal {
  constexpr CParental_RequestPlaytime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_RequestPlaytime_ResponseDefaultTypeInternal() {}
  union {
    CParental_RequestPlaytime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_RequestPlaytime_ResponseDefaultTypeInternal _CParental_RequestPlaytime_Response_default_instance_;
constexpr CParental_ApprovePlaytime_Request::CParental_ApprovePlaytime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : restrictions_approved_(nullptr)
  , requestid_(PROTOBUF_ULONGLONG(0))
  , approve_(false)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_ApprovePlaytime_RequestDefaultTypeInternal {
  constexpr CParental_ApprovePlaytime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ApprovePlaytime_RequestDefaultTypeInternal() {}
  union {
    CParental_ApprovePlaytime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ApprovePlaytime_RequestDefaultTypeInternal _CParental_ApprovePlaytime_Request_default_instance_;
constexpr CParental_ApprovePlaytime_Response::CParental_ApprovePlaytime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_ApprovePlaytime_ResponseDefaultTypeInternal {
  constexpr CParental_ApprovePlaytime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ApprovePlaytime_ResponseDefaultTypeInternal() {}
  union {
    CParental_ApprovePlaytime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ApprovePlaytime_ResponseDefaultTypeInternal _CParental_ApprovePlaytime_Response_default_instance_;
constexpr CParental_GetRequests_Request::CParental_GetRequests_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rt_include_completed_since_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_GetRequests_RequestDefaultTypeInternal {
  constexpr CParental_GetRequests_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_GetRequests_RequestDefaultTypeInternal() {}
  union {
    CParental_GetRequests_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_GetRequests_RequestDefaultTypeInternal _CParental_GetRequests_Request_default_instance_;
constexpr ParentalFeatureRequest::ParentalFeatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0))
  , family_groupid_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , features_(0u)
  , time_requested_(0u)
  , steamid_responder_(PROTOBUF_ULONGLONG(0))
  , approved_(false)
  , time_responded_(0u){}
struct ParentalFeatureRequestDefaultTypeInternal {
  constexpr ParentalFeatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalFeatureRequestDefaultTypeInternal() {}
  union {
    ParentalFeatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalFeatureRequestDefaultTypeInternal _ParentalFeatureRequest_default_instance_;
constexpr ParentalPlaytimeRequest::ParentalPlaytimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_playtime_restrictions_(nullptr)
  , restrictions_approved_(nullptr)
  , requestid_(PROTOBUF_ULONGLONG(0))
  , family_groupid_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , time_expires_(0u)
  , time_requested_(0u)
  , steamid_responder_(PROTOBUF_ULONGLONG(0))
  , approved_(false)
  , time_responded_(0u){}
struct ParentalPlaytimeRequestDefaultTypeInternal {
  constexpr ParentalPlaytimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalPlaytimeRequestDefaultTypeInternal() {}
  union {
    ParentalPlaytimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalPlaytimeRequestDefaultTypeInternal _ParentalPlaytimeRequest_default_instance_;
constexpr CParental_GetRequests_Response::CParental_GetRequests_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_requests_()
  , playtime_requests_(){}
struct CParental_GetRequests_ResponseDefaultTypeInternal {
  constexpr CParental_GetRequests_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_GetRequests_ResponseDefaultTypeInternal() {}
  union {
    CParental_GetRequests_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_GetRequests_ResponseDefaultTypeInternal _CParental_GetRequests_Response_default_instance_;
constexpr CParental_ReportPlaytimeAndNotify_Request::CParental_ReportPlaytimeAndNotify_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : day_of_week_(0u)
  , minutes_used_(0u)
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParental_ReportPlaytimeAndNotify_RequestDefaultTypeInternal {
  constexpr CParental_ReportPlaytimeAndNotify_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ReportPlaytimeAndNotify_RequestDefaultTypeInternal() {}
  union {
    CParental_ReportPlaytimeAndNotify_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ReportPlaytimeAndNotify_RequestDefaultTypeInternal _CParental_ReportPlaytimeAndNotify_Request_default_instance_;
constexpr CParental_ReportPlaytimeAndNotify_Response::CParental_ReportPlaytimeAndNotify_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CParental_ReportPlaytimeAndNotify_ResponseDefaultTypeInternal {
  constexpr CParental_ReportPlaytimeAndNotify_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ReportPlaytimeAndNotify_ResponseDefaultTypeInternal() {}
  union {
    CParental_ReportPlaytimeAndNotify_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ReportPlaytimeAndNotify_ResponseDefaultTypeInternal _CParental_ReportPlaytimeAndNotify_Response_default_instance_;
constexpr CParental_ParentalSettingsChange_Notification::CParental_ParentalSettingsChange_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_settings_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_ParentalSettingsChange_NotificationDefaultTypeInternal {
  constexpr CParental_ParentalSettingsChange_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ParentalSettingsChange_NotificationDefaultTypeInternal() {}
  union {
    CParental_ParentalSettingsChange_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ParentalSettingsChange_NotificationDefaultTypeInternal _CParental_ParentalSettingsChange_Notification_default_instance_;
constexpr CParental_ParentalUnlocNotification::CParental_ParentalUnlocNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_ParentalUnlocNotificationDefaultTypeInternal {
  constexpr CParental_ParentalUnlocNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ParentalUnlocNotificationDefaultTypeInternal() {}
  union {
    CParental_ParentalUnlocNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ParentalUnlocNotificationDefaultTypeInternal _CParental_ParentalUnlocNotification_default_instance_;
constexpr CParental_ParentalLocNotification::CParental_ParentalLocNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CParental_ParentalLocNotificationDefaultTypeInternal {
  constexpr CParental_ParentalLocNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_ParentalLocNotificationDefaultTypeInternal() {}
  union {
    CParental_ParentalLocNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_ParentalLocNotificationDefaultTypeInternal _CParental_ParentalLocNotification_default_instance_;
constexpr CParental_PlaytimeUsed_Notification::CParental_PlaytimeUsed_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : day_of_week_(0u)
  , minutes_used_(0u){}
struct CParental_PlaytimeUsed_NotificationDefaultTypeInternal {
  constexpr CParental_PlaytimeUsed_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParental_PlaytimeUsed_NotificationDefaultTypeInternal() {}
  union {
    CParental_PlaytimeUsed_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParental_PlaytimeUsed_NotificationDefaultTypeInternal _CParental_PlaytimeUsed_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fparental_2esteamclient_2eproto[43];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fparental_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fparental_2esteamclient_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fparental_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ParentalApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalApp, appid_),
  PROTOBUF_FIELD_OFFSET(::ParentalApp, is_allowed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, allowed_time_windows_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, allowed_daily_minutes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, apply_playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, playtime_days_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, rtime_expires_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, steamid_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_base_id_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_base_description_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_base_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_custom_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, passwordhashtype_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, salt_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, passwordhash_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, enabled_features_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, recovery_email_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, is_site_license_lock_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, temporary_enabled_features_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, rtime_temporary_feature_expiration_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, temporary_playtime_restrictions_),
  6,
  7,
  0,
  ~0u,
  ~0u,
  8,
  1,
  2,
  10,
  9,
  3,
  11,
  12,
  13,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, password_),
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, settings_),
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, enablecode_),
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Request, steamid_),
  0,
  2,
  1,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_EnableParentalSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_DisableParentalSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_DisableParentalSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_DisableParentalSettings_Request, password_),
  PROTOBUF_FIELD_OFFSET(::CParental_DisableParentalSettings_Request, steamid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_DisableParentalSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetParentalSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetParentalSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetParentalSettings_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_GetParentalSettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetParentalSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetParentalSettings_Response, settings_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Request, priority_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Response, serialized_settings_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetSignedParentalSettings_Response, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, password_),
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, settings_),
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, new_password_),
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Request, steamid_),
  0,
  3,
  1,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_SetParentalSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ValidateToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ValidateToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ValidateToken_Request, unloctoken_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_ValidateToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Request, password_),
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Request, session_),
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Request, send_unlocon_success_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ValidatePassword_Response, token_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_LockClient_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_LockClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_LockClient_Request, session_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_LockClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestRecoveryCode_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestRecoveryCode_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_DisableWithRecoveryCode_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_DisableWithRecoveryCode_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_DisableWithRecoveryCode_Request, recovery_code_),
  PROTOBUF_FIELD_OFFSET(::CParental_DisableWithRecoveryCode_Request, steamid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_DisableWithRecoveryCode_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Request, features_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Request, steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestFeatureAccess_Response, requestid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, approve_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, requestid_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, features_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, duration_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Request, steamid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_ApproveFeatureAccess_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Request, time_expires_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Request, current_playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Request, steamid_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_RequestPlaytime_Response, requestid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Request, approve_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Request, requestid_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Request, restrictions_approved_),
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Request, steamid_),
  2,
  1,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_ApprovePlaytime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Request, rt_include_completed_since_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Request, steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, family_groupid_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, steamid_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, features_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, time_requested_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, approved_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, steamid_responder_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, time_responded_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, family_groupid_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, steamid_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, current_playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, time_expires_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, time_requested_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, approved_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, steamid_responder_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, time_responded_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, restrictions_approved_),
  2,
  3,
  4,
  0,
  5,
  6,
  8,
  7,
  9,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Response, feature_requests_),
  PROTOBUF_FIELD_OFFSET(::CParental_GetRequests_Response, playtime_requests_),
  PROTOBUF_FIELD_OFFSET(::CParental_ReportPlaytimeAndNotify_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ReportPlaytimeAndNotify_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ReportPlaytimeAndNotify_Request, day_of_week_),
  PROTOBUF_FIELD_OFFSET(::CParental_ReportPlaytimeAndNotify_Request, minutes_used_),
  PROTOBUF_FIELD_OFFSET(::CParental_ReportPlaytimeAndNotify_Request, steamid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CParental_ReportPlaytimeAndNotify_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalSettingsChange_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalSettingsChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalSettingsChange_Notification, serialized_settings_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalSettingsChange_Notification, signature_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalSettingsChange_Notification, password_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalSettingsChange_Notification, sessionid_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalUnlocNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalUnlocNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalUnlocNotification, password_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalUnlocNotification, sessionid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalLocNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalLocNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_ParentalLocNotification, sessionid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParental_PlaytimeUsed_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParental_PlaytimeUsed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParental_PlaytimeUsed_Notification, day_of_week_),
  PROTOBUF_FIELD_OFFSET(::CParental_PlaytimeUsed_Notification, minutes_used_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ParentalApp)},
  { 9, 16, sizeof(::ParentalPlaytimeDay)},
  { 18, 25, sizeof(::ParentalPlaytimeRestrictions)},
  { 27, 34, sizeof(::ParentalTemporaryPlaytimeRestrictions)},
  { 36, 57, sizeof(::ParentalSettings)},
  { 73, 83, sizeof(::CParental_EnableParentalSettings_Request)},
  { 88, -1, sizeof(::CParental_EnableParentalSettings_Response)},
  { 93, 100, sizeof(::CParental_DisableParentalSettings_Request)},
  { 102, -1, sizeof(::CParental_DisableParentalSettings_Response)},
  { 107, 113, sizeof(::CParental_GetParentalSettings_Request)},
  { 114, 120, sizeof(::CParental_GetParentalSettings_Response)},
  { 121, 127, sizeof(::CParental_GetSignedParentalSettings_Request)},
  { 128, 135, sizeof(::CParental_GetSignedParentalSettings_Response)},
  { 137, 147, sizeof(::CParental_SetParentalSettings_Request)},
  { 152, -1, sizeof(::CParental_SetParentalSettings_Response)},
  { 157, 163, sizeof(::CParental_ValidateToken_Request)},
  { 164, -1, sizeof(::CParental_ValidateToken_Response)},
  { 169, 177, sizeof(::CParental_ValidatePassword_Request)},
  { 180, 186, sizeof(::CParental_ValidatePassword_Response)},
  { 187, 193, sizeof(::CParental_LockClient_Request)},
  { 194, -1, sizeof(::CParental_LockClient_Response)},
  { 199, -1, sizeof(::CParental_RequestRecoveryCode_Request)},
  { 204, -1, sizeof(::CParental_RequestRecoveryCode_Response)},
  { 209, 216, sizeof(::CParental_DisableWithRecoveryCode_Request)},
  { 218, -1, sizeof(::CParental_DisableWithRecoveryCode_Response)},
  { 223, 230, sizeof(::CParental_RequestFeatureAccess_Request)},
  { 232, 238, sizeof(::CParental_RequestFeatureAccess_Response)},
  { 239, 249, sizeof(::CParental_ApproveFeatureAccess_Request)},
  { 254, -1, sizeof(::CParental_ApproveFeatureAccess_Response)},
  { 259, 267, sizeof(::CParental_RequestPlaytime_Request)},
  { 270, 276, sizeof(::CParental_RequestPlaytime_Response)},
  { 277, 286, sizeof(::CParental_ApprovePlaytime_Request)},
  { 290, -1, sizeof(::CParental_ApprovePlaytime_Response)},
  { 295, 302, sizeof(::CParental_GetRequests_Request)},
  { 304, 317, sizeof(::ParentalFeatureRequest)},
  { 325, 340, sizeof(::ParentalPlaytimeRequest)},
  { 350, -1, sizeof(::CParental_GetRequests_Response)},
  { 357, 365, sizeof(::CParental_ReportPlaytimeAndNotify_Request)},
  { 368, -1, sizeof(::CParental_ReportPlaytimeAndNotify_Response)},
  { 373, 382, sizeof(::CParental_ParentalSettingsChange_Notification)},
  { 386, 393, sizeof(::CParental_ParentalUnlocNotification)},
  { 395, 401, sizeof(::CParental_ParentalLocNotification)},
  { 402, 409, sizeof(::CParental_PlaytimeUsed_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalPlaytimeDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalPlaytimeRestrictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalTemporaryPlaytimeRestrictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_EnableParentalSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_EnableParentalSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_DisableParentalSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_DisableParentalSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_GetParentalSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_GetParentalSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_GetSignedParentalSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_GetSignedParentalSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_SetParentalSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_SetParentalSettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ValidateToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ValidateToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ValidatePassword_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ValidatePassword_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_LockClient_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_LockClient_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_RequestRecoveryCode_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_RequestRecoveryCode_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_DisableWithRecoveryCode_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_DisableWithRecoveryCode_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_RequestFeatureAccess_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_RequestFeatureAccess_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ApproveFeatureAccess_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ApproveFeatureAccess_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_RequestPlaytime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_RequestPlaytime_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ApprovePlaytime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ApprovePlaytime_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_GetRequests_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalFeatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalPlaytimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_GetRequests_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ReportPlaytimeAndNotify_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ReportPlaytimeAndNotify_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ParentalSettingsChange_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ParentalUnlocNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_ParentalLocNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParental_PlaytimeUsed_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fparental_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(steammessages_parental.steamclient.pro"
  "to\032 google/protobuf/descriptor.proto\032\030st"
  "eammessages_base.proto\032,steammessages_un"
  "ified_base.steamclient.proto\"0\n\013Parental"
  "App\022\r\n\005appid\030\001 \001(\r\022\022\n\nis_allowed\030\002 \001(\010\"R"
  "\n\023ParentalPlaytimeDay\022\034\n\024allowed_time_wi"
  "ndows\030\001 \001(\004\022\035\n\025allowed_daily_minutes\030\002 \001"
  "(\r\"p\n\034ParentalPlaytimeRestrictions\022#\n\033ap"
  "ply_playtime_restrictions\030\002 \001(\010\022+\n\rplayt"
  "ime_days\030\017 \003(\0132\024.ParentalPlaytimeDay\"j\n%"
  "ParentalTemporaryPlaytimeRestrictions\022*\n"
  "\014restrictions\030\001 \001(\0132\024.ParentalPlaytimeDa"
  "y\022\025\n\rrtime_expires\030\002 \001(\r\"\251\004\n\020ParentalSet"
  "tings\022\017\n\007steamid\030\001 \001(\006\022\027\n\017applist_base_i"
  "d\030\002 \001(\r\022 \n\030applist_base_description\030\003 \001("
  "\t\022\"\n\014applist_base\030\004 \003(\0132\014.ParentalApp\022$\n"
  "\016applist_custom\030\005 \003(\0132\014.ParentalApp\022\030\n\020p"
  "asswordhashtype\030\006 \001(\r\022\014\n\004salt\030\007 \001(\014\022\024\n\014p"
  "asswordhash\030\010 \001(\014\022\022\n\nis_enabled\030\t \001(\010\022\030\n"
  "\020enabled_features\030\n \001(\r\022\026\n\016recovery_emai"
  "l\030\013 \001(\t\022\034\n\024is_site_license_lock\030\014 \001(\010\022\"\n"
  "\032temporary_enabled_features\030\r \001(\r\022*\n\"rti"
  "me_temporary_feature_expiration\030\016 \001(\r\022<\n"
  "\025playtime_restrictions\030\017 \001(\0132\035.ParentalP"
  "laytimeRestrictions\022O\n\037temporary_playtim"
  "e_restrictions\030\020 \001(\0132&.ParentalTemporary"
  "PlaytimeRestrictions\"\231\001\n(CParental_Enabl"
  "eParentalSettings_Request\022\020\n\010password\030\001 "
  "\001(\t\022#\n\010settings\030\002 \001(\0132\021.ParentalSettings"
  "\022\021\n\tsessionid\030\003 \001(\t\022\022\n\nenablecode\030\004 \001(\r\022"
  "\017\n\007steamid\030\n \001(\006\"+\n)CParental_EnablePare"
  "ntalSettings_Response\"N\n)CParental_Disab"
  "leParentalSettings_Request\022\020\n\010password\030\001"
  " \001(\t\022\017\n\007steamid\030\n \001(\006\",\n*CParental_Disab"
  "leParentalSettings_Response\"8\n%CParental"
  "_GetParentalSettings_Request\022\017\n\007steamid\030"
  "\n \001(\006\"M\n&CParental_GetParentalSettings_R"
  "esponse\022#\n\010settings\030\001 \001(\0132\021.ParentalSett"
  "ings\"\?\n+CParental_GetSignedParentalSetti"
  "ngs_Request\022\020\n\010priority\030\001 \001(\r\"^\n,CParent"
  "al_GetSignedParentalSettings_Response\022\033\n"
  "\023serialized_settings\030\001 \001(\014\022\021\n\tsignature\030"
  "\002 \001(\014\"\230\001\n%CParental_SetParentalSettings_"
  "Request\022\020\n\010password\030\001 \001(\t\022#\n\010settings\030\002 "
  "\001(\0132\021.ParentalSettings\022\024\n\014new_password\030\003"
  " \001(\t\022\021\n\tsessionid\030\004 \001(\t\022\017\n\007steamid\030\n \001(\006"
  "\"(\n&CParental_SetParentalSettings_Respon"
  "se\"5\n\037CParental_ValidateToken_Request\022\022\n"
  "\nunloctoken\030\001 \001(\t\"\"\n CParental_ValidateT"
  "oken_Response\"e\n\"CParental_ValidatePassw"
  "ord_Request\022\020\n\010password\030\001 \001(\t\022\017\n\007session"
  "\030\002 \001(\t\022\034\n\024send_unlocon_success\030\003 \001(\010\"4\n#"
  "CParental_ValidatePassword_Response\022\r\n\005t"
  "oken\030\001 \001(\t\"/\n\034CParental_LockClient_Reque"
  "st\022\017\n\007session\030\001 \001(\t\"\037\n\035CParental_LockCli"
  "ent_Response\"\'\n%CParental_RequestRecover"
  "yCode_Request\"(\n&CParental_RequestRecove"
  "ryCode_Response\"S\n)CParental_DisableWith"
  "RecoveryCode_Request\022\025\n\rrecovery_code\030\001 "
  "\001(\r\022\017\n\007steamid\030\n \001(\006\",\n*CParental_Disabl"
  "eWithRecoveryCode_Response\"K\n&CParental_"
  "RequestFeatureAccess_Request\022\020\n\010features"
  "\030\001 \001(\r\022\017\n\007steamid\030\n \001(\006\"<\n\'CParental_Req"
  "uestFeatureAccess_Response\022\021\n\trequestid\030"
  "\001 \001(\006\"\201\001\n&CParental_ApproveFeatureAccess"
  "_Request\022\017\n\007approve\030\001 \001(\010\022\021\n\trequestid\030\002"
  " \001(\006\022\020\n\010features\030\003 \001(\r\022\020\n\010duration\030\004 \001(\r"
  "\022\017\n\007steamid\030\n \001(\006\")\n\'CParental_ApproveFe"
  "atureAccess_Response\"\207\001\n!CParental_Reque"
  "stPlaytime_Request\022\024\n\014time_expires\030\001 \001(\r"
  "\022;\n\035current_playtime_restrictions\030\002 \001(\0132"
  "\024.ParentalPlaytimeDay\022\017\n\007steamid\030\n \001(\006\"7"
  "\n\"CParental_RequestPlaytime_Response\022\021\n\t"
  "requestid\030\001 \001(\006\"\237\001\n!CParental_ApprovePla"
  "ytime_Request\022\017\n\007approve\030\001 \001(\010\022\021\n\treques"
  "tid\030\002 \001(\006\022E\n\025restrictions_approved\030\003 \001(\013"
  "2&.ParentalTemporaryPlaytimeRestrictions"
  "\022\017\n\007steamid\030\n \001(\006\"$\n\"CParental_ApprovePl"
  "aytime_Response\"T\n\035CParental_GetRequests"
  "_Request\022\"\n\032rt_include_completed_since\030\001"
  " \001(\r\022\017\n\007steamid\030\n \001(\006\"\303\001\n\026ParentalFeatur"
  "eRequest\022\021\n\trequestid\030\001 \001(\006\022\026\n\016family_gr"
  "oupid\030\002 \001(\006\022\017\n\007steamid\030\003 \001(\006\022\020\n\010features"
  "\030\004 \001(\r\022\026\n\016time_requested\030\005 \001(\r\022\020\n\010approv"
  "ed\030\006 \001(\010\022\031\n\021steamid_responder\030\007 \001(\006\022\026\n\016t"
  "ime_responded\030\010 \001(\r\"\314\002\n\027ParentalPlaytime"
  "Request\022\021\n\trequestid\030\001 \001(\006\022\026\n\016family_gro"
  "upid\030\002 \001(\006\022\017\n\007steamid\030\003 \001(\006\022;\n\035current_p"
  "laytime_restrictions\030\004 \001(\0132\024.ParentalPla"
  "ytimeDay\022\024\n\014time_expires\030\005 \001(\r\022\026\n\016time_r"
  "equested\030\006 \001(\r\022\020\n\010approved\030\007 \001(\010\022\031\n\021stea"
  "mid_responder\030\010 \001(\006\022\026\n\016time_responded\030\t "
  "\001(\r\022E\n\025restrictions_approved\030\n \001(\0132&.Par"
  "entalTemporaryPlaytimeRestrictions\"\210\001\n\036C"
  "Parental_GetRequests_Response\0221\n\020feature"
  "_requests\030\001 \003(\0132\027.ParentalFeatureRequest"
  "\0223\n\021playtime_requests\030\002 \003(\0132\030.ParentalPl"
  "aytimeRequest\"g\n)CParental_ReportPlaytim"
  "eAndNotify_Request\022\023\n\013day_of_week\030\001 \001(\r\022"
  "\024\n\014minutes_used\030\002 \001(\r\022\017\n\007steamid\030\n \001(\006\","
  "\n*CParental_ReportPlaytimeAndNotify_Resp"
  "onse\"\204\001\n-CParental_ParentalSettingsChang"
  "e_Notification\022\033\n\023serialized_settings\030\001 "
  "\001(\014\022\021\n\tsignature\030\002 \001(\014\022\020\n\010password\030\003 \001(\t"
  "\022\021\n\tsessionid\030\004 \001(\t\"J\n#CParental_Parenta"
  "lUnlocNotification\022\020\n\010password\030\001 \001(\t\022\021\n\t"
  "sessionid\030\002 \001(\t\"6\n!CParental_ParentalLoc"
  "Notification\022\021\n\tsessionid\030\001 \001(\t\"P\n#CPare"
  "ntal_PlaytimeUsed_Notification\022\023\n\013day_of"
  "_week\030\001 \001(\r\022\024\n\014minutes_used\030\002 \001(\r2\351\014\n\010Pa"
  "rental\022o\n\026EnableParentalSettings\022).CPare"
  "ntal_EnableParentalSettings_Request\032*.CP"
  "arental_EnableParentalSettings_Response\022"
  "r\n\027DisableParentalSettings\022*.CParental_D"
  "isableParentalSettings_Request\032+.CParent"
  "al_DisableParentalSettings_Response\022f\n\023G"
  "etParentalSettings\022&.CParental_GetParent"
  "alSettings_Request\032\'.CParental_GetParent"
  "alSettings_Response\022x\n\031GetSignedParental"
  "Settings\022,.CParental_GetSignedParentalSe"
  "ttings_Request\032-.CParental_GetSignedPare"
  "ntalSettings_Response\022f\n\023SetParentalSett"
  "ings\022&.CParental_SetParentalSettings_Req"
  "uest\032\'.CParental_SetParentalSettings_Res"
  "ponse\022T\n\rValidateToken\022 .CParental_Valid"
  "ateToken_Request\032!.CParental_ValidateTok"
  "en_Response\022]\n\020ValidatePassword\022#.CParen"
  "tal_ValidatePassword_Request\032$.CParental"
  "_ValidatePassword_Response\022K\n\nLockClient"
  "\022\035.CParental_LockClient_Request\032\036.CParen"
  "tal_LockClient_Response\022f\n\023RequestRecove"
  "ryCode\022&.CParental_RequestRecoveryCode_R"
  "equest\032\'.CParental_RequestRecoveryCode_R"
  "esponse\022r\n\027DisableWithRecoveryCode\022*.CPa"
  "rental_DisableWithRecoveryCode_Request\032+"
  ".CParental_DisableWithRecoveryCode_Respo"
  "nse\022i\n\024RequestFeatureAccess\022\'.CParental_"
  "RequestFeatureAccess_Request\032(.CParental"
  "_RequestFeatureAccess_Response\022i\n\024Approv"
  "eFeatureAccess\022\'.CParental_ApproveFeatur"
  "eAccess_Request\032(.CParental_ApproveFeatu"
  "reAccess_Response\022Z\n\017RequestPlaytime\022\".C"
  "Parental_RequestPlaytime_Request\032#.CPare"
  "ntal_RequestPlaytime_Response\022Z\n\017Approve"
  "Playtime\022\".CParental_ApprovePlaytime_Req"
  "uest\032#.CParental_ApprovePlaytime_Respons"
  "e\022N\n\013GetRequests\022\036.CParental_GetRequests"
  "_Request\032\037.CParental_GetRequests_Respons"
  "e\022r\n\027ReportPlaytimeAndNotify\022*.CParental"
  "_ReportPlaytimeAndNotify_Request\032+.CPare"
  "ntal_ReportPlaytimeAndNotify_Response2\266\002"
  "\n\016ParentalClient\022S\n\024NotifySettingsChange"
  "\022..CParental_ParentalSettingsChange_Noti"
  "fication\032\013.NoResponse\022A\n\014NotifyUnlock\022$."
  "CParental_ParentalUnlocNotification\032\013.No"
  "Response\022=\n\nNotifyLock\022\".CParental_Paren"
  "talLocNotification\032\013.NoResponse\022G\n\022Notif"
  "yPlaytimeUsed\022$.CParental_PlaytimeUsed_N"
  "otification\032\013.NoResponse\032\004\300\265\030\002B\035\200\001\001\252\002\027Op"
  "enSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fparental_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fparental_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fparental_2esteamclient_2eproto = {
  false, false, 6381, descriptor_table_protodef_steammessages_5fparental_2esteamclient_2eproto, "steammessages_parental.steamclient.proto", 
  &descriptor_table_steammessages_5fparental_2esteamclient_2eproto_once, descriptor_table_steammessages_5fparental_2esteamclient_2eproto_deps, 3, 43,
  schemas, file_default_instances, TableStruct_steammessages_5fparental_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fparental_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fparental_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fparental_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fparental_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fparental_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fparental_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fparental_2esteamclient_2eproto(&descriptor_table_steammessages_5fparental_2esteamclient_2eproto);

// ===================================================================

class ParentalApp::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalApp>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ParentalApp::ParentalApp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalApp)
}
ParentalApp::ParentalApp(const ParentalApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_allowed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_allowed_));
  // @@protoc_insertion_point(copy_constructor:ParentalApp)
}

void ParentalApp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_allowed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_allowed_));
}

ParentalApp::~ParentalApp() {
  // @@protoc_insertion_point(destructor:ParentalApp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalApp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalApp::ArenaDtor(void* object) {
  ParentalApp* _this = reinterpret_cast< ParentalApp* >(object);
  (void)_this;
}
void ParentalApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalApp::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_allowed_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_allowed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_allowed(&has_bits);
          is_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalApp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool is_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalApp)
  return target;
}

size_t ParentalApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalApp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool is_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalApp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalApp)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalApp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalApp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalApp)
    MergeFrom(*source);
  }
}

void ParentalApp::MergeFrom(const ParentalApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_allowed_ = from.is_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalApp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalApp::CopyFrom(const ParentalApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalApp::IsInitialized() const {
  return true;
}

void ParentalApp::InternalSwap(ParentalApp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalApp, is_allowed_)
      + sizeof(ParentalApp::is_allowed_)
      - PROTOBUF_FIELD_OFFSET(ParentalApp, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalApp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalPlaytimeDay::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalPlaytimeDay>()._has_bits_);
  static void set_has_allowed_time_windows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowed_daily_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ParentalPlaytimeDay::ParentalPlaytimeDay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalPlaytimeDay)
}
ParentalPlaytimeDay::ParentalPlaytimeDay(const ParentalPlaytimeDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&allowed_time_windows_, &from.allowed_time_windows_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowed_daily_minutes_) -
    reinterpret_cast<char*>(&allowed_time_windows_)) + sizeof(allowed_daily_minutes_));
  // @@protoc_insertion_point(copy_constructor:ParentalPlaytimeDay)
}

void ParentalPlaytimeDay::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allowed_time_windows_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allowed_daily_minutes_) -
    reinterpret_cast<char*>(&allowed_time_windows_)) + sizeof(allowed_daily_minutes_));
}

ParentalPlaytimeDay::~ParentalPlaytimeDay() {
  // @@protoc_insertion_point(destructor:ParentalPlaytimeDay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalPlaytimeDay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalPlaytimeDay::ArenaDtor(void* object) {
  ParentalPlaytimeDay* _this = reinterpret_cast< ParentalPlaytimeDay* >(object);
  (void)_this;
}
void ParentalPlaytimeDay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalPlaytimeDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalPlaytimeDay::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalPlaytimeDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&allowed_time_windows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowed_daily_minutes_) -
        reinterpret_cast<char*>(&allowed_time_windows_)) + sizeof(allowed_daily_minutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalPlaytimeDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 allowed_time_windows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allowed_time_windows(&has_bits);
          allowed_time_windows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 allowed_daily_minutes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allowed_daily_minutes(&has_bits);
          allowed_daily_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalPlaytimeDay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalPlaytimeDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 allowed_time_windows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_allowed_time_windows(), target);
  }

  // optional uint32 allowed_daily_minutes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allowed_daily_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalPlaytimeDay)
  return target;
}

size_t ParentalPlaytimeDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalPlaytimeDay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 allowed_time_windows = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_allowed_time_windows());
    }

    // optional uint32 allowed_daily_minutes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allowed_daily_minutes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalPlaytimeDay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalPlaytimeDay)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalPlaytimeDay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalPlaytimeDay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalPlaytimeDay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalPlaytimeDay)
    MergeFrom(*source);
  }
}

void ParentalPlaytimeDay::MergeFrom(const ParentalPlaytimeDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalPlaytimeDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      allowed_time_windows_ = from.allowed_time_windows_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowed_daily_minutes_ = from.allowed_daily_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalPlaytimeDay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalPlaytimeDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalPlaytimeDay::CopyFrom(const ParentalPlaytimeDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalPlaytimeDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalPlaytimeDay::IsInitialized() const {
  return true;
}

void ParentalPlaytimeDay::InternalSwap(ParentalPlaytimeDay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalPlaytimeDay, allowed_daily_minutes_)
      + sizeof(ParentalPlaytimeDay::allowed_daily_minutes_)
      - PROTOBUF_FIELD_OFFSET(ParentalPlaytimeDay, allowed_time_windows_)>(
          reinterpret_cast<char*>(&allowed_time_windows_),
          reinterpret_cast<char*>(&other->allowed_time_windows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalPlaytimeDay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalPlaytimeRestrictions::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalPlaytimeRestrictions>()._has_bits_);
  static void set_has_apply_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ParentalPlaytimeRestrictions::ParentalPlaytimeRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playtime_days_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalPlaytimeRestrictions)
}
ParentalPlaytimeRestrictions::ParentalPlaytimeRestrictions(const ParentalPlaytimeRestrictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      playtime_days_(from.playtime_days_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  apply_playtime_restrictions_ = from.apply_playtime_restrictions_;
  // @@protoc_insertion_point(copy_constructor:ParentalPlaytimeRestrictions)
}

void ParentalPlaytimeRestrictions::SharedCtor() {
apply_playtime_restrictions_ = false;
}

ParentalPlaytimeRestrictions::~ParentalPlaytimeRestrictions() {
  // @@protoc_insertion_point(destructor:ParentalPlaytimeRestrictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalPlaytimeRestrictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalPlaytimeRestrictions::ArenaDtor(void* object) {
  ParentalPlaytimeRestrictions* _this = reinterpret_cast< ParentalPlaytimeRestrictions* >(object);
  (void)_this;
}
void ParentalPlaytimeRestrictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalPlaytimeRestrictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalPlaytimeRestrictions::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playtime_days_.Clear();
  apply_playtime_restrictions_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalPlaytimeRestrictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool apply_playtime_restrictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_apply_playtime_restrictions(&has_bits);
          apply_playtime_restrictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ParentalPlaytimeDay playtime_days = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playtime_days(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalPlaytimeRestrictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool apply_playtime_restrictions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_apply_playtime_restrictions(), target);
  }

  // repeated .ParentalPlaytimeDay playtime_days = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playtime_days_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_playtime_days(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalPlaytimeRestrictions)
  return target;
}

size_t ParentalPlaytimeRestrictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalPlaytimeRestrictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParentalPlaytimeDay playtime_days = 15;
  total_size += 1UL * this->_internal_playtime_days_size();
  for (const auto& msg : this->playtime_days_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool apply_playtime_restrictions = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalPlaytimeRestrictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalPlaytimeRestrictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalPlaytimeRestrictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalPlaytimeRestrictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalPlaytimeRestrictions)
    MergeFrom(*source);
  }
}

void ParentalPlaytimeRestrictions::MergeFrom(const ParentalPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playtime_days_.MergeFrom(from.playtime_days_);
  if (from._internal_has_apply_playtime_restrictions()) {
    _internal_set_apply_playtime_restrictions(from._internal_apply_playtime_restrictions());
  }
}

void ParentalPlaytimeRestrictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalPlaytimeRestrictions::CopyFrom(const ParentalPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalPlaytimeRestrictions::IsInitialized() const {
  return true;
}

void ParentalPlaytimeRestrictions::InternalSwap(ParentalPlaytimeRestrictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playtime_days_.InternalSwap(&other->playtime_days_);
  swap(apply_playtime_restrictions_, other->apply_playtime_restrictions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalPlaytimeRestrictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalTemporaryPlaytimeRestrictions::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalTemporaryPlaytimeRestrictions>()._has_bits_);
  static const ::ParentalPlaytimeDay& restrictions(const ParentalTemporaryPlaytimeRestrictions* msg);
  static void set_has_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ParentalPlaytimeDay&
ParentalTemporaryPlaytimeRestrictions::_Internal::restrictions(const ParentalTemporaryPlaytimeRestrictions* msg) {
  return *msg->restrictions_;
}
ParentalTemporaryPlaytimeRestrictions::ParentalTemporaryPlaytimeRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalTemporaryPlaytimeRestrictions)
}
ParentalTemporaryPlaytimeRestrictions::ParentalTemporaryPlaytimeRestrictions(const ParentalTemporaryPlaytimeRestrictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_restrictions()) {
    restrictions_ = new ::ParentalPlaytimeDay(*from.restrictions_);
  } else {
    restrictions_ = nullptr;
  }
  rtime_expires_ = from.rtime_expires_;
  // @@protoc_insertion_point(copy_constructor:ParentalTemporaryPlaytimeRestrictions)
}

void ParentalTemporaryPlaytimeRestrictions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_expires_) -
    reinterpret_cast<char*>(&restrictions_)) + sizeof(rtime_expires_));
}

ParentalTemporaryPlaytimeRestrictions::~ParentalTemporaryPlaytimeRestrictions() {
  // @@protoc_insertion_point(destructor:ParentalTemporaryPlaytimeRestrictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalTemporaryPlaytimeRestrictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete restrictions_;
}

void ParentalTemporaryPlaytimeRestrictions::ArenaDtor(void* object) {
  ParentalTemporaryPlaytimeRestrictions* _this = reinterpret_cast< ParentalTemporaryPlaytimeRestrictions* >(object);
  (void)_this;
}
void ParentalTemporaryPlaytimeRestrictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalTemporaryPlaytimeRestrictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalTemporaryPlaytimeRestrictions::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalTemporaryPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(restrictions_ != nullptr);
    restrictions_->Clear();
  }
  rtime_expires_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalTemporaryPlaytimeRestrictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ParentalPlaytimeDay restrictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_expires = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rtime_expires(&has_bits);
          rtime_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalTemporaryPlaytimeRestrictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalTemporaryPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ParentalPlaytimeDay restrictions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::restrictions(this), target, stream);
  }

  // optional uint32 rtime_expires = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtime_expires(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalTemporaryPlaytimeRestrictions)
  return target;
}

size_t ParentalTemporaryPlaytimeRestrictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalTemporaryPlaytimeRestrictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ParentalPlaytimeDay restrictions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictions_);
    }

    // optional uint32 rtime_expires = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_expires());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalTemporaryPlaytimeRestrictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalTemporaryPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalTemporaryPlaytimeRestrictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalTemporaryPlaytimeRestrictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalTemporaryPlaytimeRestrictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalTemporaryPlaytimeRestrictions)
    MergeFrom(*source);
  }
}

void ParentalTemporaryPlaytimeRestrictions::MergeFrom(const ParentalTemporaryPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalTemporaryPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_restrictions()->::ParentalPlaytimeDay::MergeFrom(from._internal_restrictions());
    }
    if (cached_has_bits & 0x00000002u) {
      rtime_expires_ = from.rtime_expires_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalTemporaryPlaytimeRestrictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalTemporaryPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalTemporaryPlaytimeRestrictions::CopyFrom(const ParentalTemporaryPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalTemporaryPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalTemporaryPlaytimeRestrictions::IsInitialized() const {
  return true;
}

void ParentalTemporaryPlaytimeRestrictions::InternalSwap(ParentalTemporaryPlaytimeRestrictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalTemporaryPlaytimeRestrictions, rtime_expires_)
      + sizeof(ParentalTemporaryPlaytimeRestrictions::rtime_expires_)
      - PROTOBUF_FIELD_OFFSET(ParentalTemporaryPlaytimeRestrictions, restrictions_)>(
          reinterpret_cast<char*>(&restrictions_),
          reinterpret_cast<char*>(&other->restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalTemporaryPlaytimeRestrictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalSettings>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_applist_base_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_applist_base_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_passwordhashtype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passwordhash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enabled_features(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_recovery_email(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_site_license_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_temporary_enabled_features(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rtime_temporary_feature_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::ParentalPlaytimeRestrictions& playtime_restrictions(const ParentalSettings* msg);
  static void set_has_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ParentalTemporaryPlaytimeRestrictions& temporary_playtime_restrictions(const ParentalSettings* msg);
  static void set_has_temporary_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ParentalPlaytimeRestrictions&
ParentalSettings::_Internal::playtime_restrictions(const ParentalSettings* msg) {
  return *msg->playtime_restrictions_;
}
const ::ParentalTemporaryPlaytimeRestrictions&
ParentalSettings::_Internal::temporary_playtime_restrictions(const ParentalSettings* msg) {
  return *msg->temporary_playtime_restrictions_;
}
ParentalSettings::ParentalSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  applist_base_(arena),
  applist_custom_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalSettings)
}
ParentalSettings::ParentalSettings(const ParentalSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      applist_base_(from.applist_base_),
      applist_custom_(from.applist_custom_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applist_base_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applist_base_description()) {
    applist_base_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_applist_base_description(), 
      GetArena());
  }
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt()) {
    salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_salt(), 
      GetArena());
  }
  passwordhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passwordhash()) {
    passwordhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passwordhash(), 
      GetArena());
  }
  recovery_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recovery_email()) {
    recovery_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recovery_email(), 
      GetArena());
  }
  if (from._internal_has_playtime_restrictions()) {
    playtime_restrictions_ = new ::ParentalPlaytimeRestrictions(*from.playtime_restrictions_);
  } else {
    playtime_restrictions_ = nullptr;
  }
  if (from._internal_has_temporary_playtime_restrictions()) {
    temporary_playtime_restrictions_ = new ::ParentalTemporaryPlaytimeRestrictions(*from.temporary_playtime_restrictions_);
  } else {
    temporary_playtime_restrictions_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_temporary_feature_expiration_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(rtime_temporary_feature_expiration_));
  // @@protoc_insertion_point(copy_constructor:ParentalSettings)
}

void ParentalSettings::SharedCtor() {
applist_base_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
passwordhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recovery_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playtime_restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_temporary_feature_expiration_) -
    reinterpret_cast<char*>(&playtime_restrictions_)) + sizeof(rtime_temporary_feature_expiration_));
}

ParentalSettings::~ParentalSettings() {
  // @@protoc_insertion_point(destructor:ParentalSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applist_base_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwordhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recovery_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete playtime_restrictions_;
  if (this != internal_default_instance()) delete temporary_playtime_restrictions_;
}

void ParentalSettings::ArenaDtor(void* object) {
  ParentalSettings* _this = reinterpret_cast< ParentalSettings* >(object);
  (void)_this;
}
void ParentalSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applist_base_.Clear();
  applist_custom_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      applist_base_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      salt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      passwordhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      recovery_email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(playtime_restrictions_ != nullptr);
      playtime_restrictions_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(temporary_playtime_restrictions_ != nullptr);
      temporary_playtime_restrictions_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&applist_base_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(applist_base_id_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&passwordhashtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_temporary_feature_expiration_) -
        reinterpret_cast<char*>(&passwordhashtype_)) + sizeof(rtime_temporary_feature_expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 applist_base_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_applist_base_id(&has_bits);
          applist_base_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string applist_base_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_applist_base_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParentalSettings.applist_base_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ParentalApp applist_base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applist_base(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ParentalApp applist_custom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applist_custom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 passwordhashtype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_passwordhashtype(&has_bits);
          passwordhashtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes salt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes passwordhash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_passwordhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enabled_features = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_enabled_features(&has_bits);
          enabled_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string recovery_email = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_recovery_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParentalSettings.recovery_email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_site_license_lock = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_site_license_lock(&has_bits);
          is_site_license_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 temporary_enabled_features = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_temporary_enabled_features(&has_bits);
          temporary_enabled_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_temporary_feature_expiration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rtime_temporary_feature_expiration(&has_bits);
          rtime_temporary_feature_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_temporary_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 applist_base_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_applist_base_id(), target);
  }

  // optional string applist_base_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applist_base_description().data(), static_cast<int>(this->_internal_applist_base_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ParentalSettings.applist_base_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_applist_base_description(), target);
  }

  // repeated .ParentalApp applist_base = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applist_base_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_applist_base(i), target, stream);
  }

  // repeated .ParentalApp applist_custom = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applist_custom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_applist_custom(i), target, stream);
  }

  // optional uint32 passwordhashtype = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_passwordhashtype(), target);
  }

  // optional bytes salt = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_salt(), target);
  }

  // optional bytes passwordhash = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_passwordhash(), target);
  }

  // optional bool is_enabled = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_enabled(), target);
  }

  // optional uint32 enabled_features = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_enabled_features(), target);
  }

  // optional string recovery_email = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recovery_email().data(), static_cast<int>(this->_internal_recovery_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ParentalSettings.recovery_email");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_recovery_email(), target);
  }

  // optional bool is_site_license_lock = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_site_license_lock(), target);
  }

  // optional uint32 temporary_enabled_features = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_temporary_enabled_features(), target);
  }

  // optional uint32 rtime_temporary_feature_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rtime_temporary_feature_expiration(), target);
  }

  // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::playtime_restrictions(this), target, stream);
  }

  // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::temporary_playtime_restrictions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalSettings)
  return target;
}

size_t ParentalSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParentalApp applist_base = 4;
  total_size += 1UL * this->_internal_applist_base_size();
  for (const auto& msg : this->applist_base_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ParentalApp applist_custom = 5;
  total_size += 1UL * this->_internal_applist_custom_size();
  for (const auto& msg : this->applist_custom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string applist_base_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_applist_base_description());
    }

    // optional bytes salt = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt());
    }

    // optional bytes passwordhash = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_passwordhash());
    }

    // optional string recovery_email = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recovery_email());
    }

    // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playtime_restrictions_);
    }

    // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporary_playtime_restrictions_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 applist_base_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_applist_base_id());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 passwordhashtype = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_passwordhashtype());
    }

    // optional uint32 enabled_features = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enabled_features());
    }

    // optional bool is_enabled = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_site_license_lock = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 temporary_enabled_features = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_temporary_enabled_features());
    }

    // optional uint32 rtime_temporary_feature_expiration = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_temporary_feature_expiration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalSettings)
    MergeFrom(*source);
  }
}

void ParentalSettings::MergeFrom(const ParentalSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applist_base_.MergeFrom(from.applist_base_);
  applist_custom_.MergeFrom(from.applist_custom_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applist_base_description(from._internal_applist_base_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_salt(from._internal_salt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_passwordhash(from._internal_passwordhash());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_recovery_email(from._internal_recovery_email());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_playtime_restrictions()->::ParentalPlaytimeRestrictions::MergeFrom(from._internal_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_temporary_playtime_restrictions()->::ParentalTemporaryPlaytimeRestrictions::MergeFrom(from._internal_temporary_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      applist_base_id_ = from.applist_base_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      passwordhashtype_ = from.passwordhashtype_;
    }
    if (cached_has_bits & 0x00000200u) {
      enabled_features_ = from.enabled_features_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_site_license_lock_ = from.is_site_license_lock_;
    }
    if (cached_has_bits & 0x00001000u) {
      temporary_enabled_features_ = from.temporary_enabled_features_;
    }
    if (cached_has_bits & 0x00002000u) {
      rtime_temporary_feature_expiration_ = from.rtime_temporary_feature_expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalSettings::CopyFrom(const ParentalSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalSettings::IsInitialized() const {
  return true;
}

void ParentalSettings::InternalSwap(ParentalSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applist_base_.InternalSwap(&other->applist_base_);
  applist_custom_.InternalSwap(&other->applist_custom_);
  applist_base_description_.Swap(&other->applist_base_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passwordhash_.Swap(&other->passwordhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recovery_email_.Swap(&other->recovery_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalSettings, rtime_temporary_feature_expiration_)
      + sizeof(ParentalSettings::rtime_temporary_feature_expiration_)
      - PROTOBUF_FIELD_OFFSET(ParentalSettings, playtime_restrictions_)>(
          reinterpret_cast<char*>(&playtime_restrictions_),
          reinterpret_cast<char*>(&other->playtime_restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_EnableParentalSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_EnableParentalSettings_Request>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ParentalSettings& settings(const CParental_EnableParentalSettings_Request* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enablecode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ParentalSettings&
CParental_EnableParentalSettings_Request::_Internal::settings(const CParental_EnableParentalSettings_Request* msg) {
  return *msg->settings_;
}
CParental_EnableParentalSettings_Request::CParental_EnableParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_EnableParentalSettings_Request)
}
CParental_EnableParentalSettings_Request::CParental_EnableParentalSettings_Request(const CParental_EnableParentalSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sessionid()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::ParentalSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  ::memcpy(&enablecode_, &from.enablecode_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&enablecode_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_EnableParentalSettings_Request)
}

void CParental_EnableParentalSettings_Request::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(steamid_));
}

CParental_EnableParentalSettings_Request::~CParental_EnableParentalSettings_Request() {
  // @@protoc_insertion_point(destructor:CParental_EnableParentalSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_EnableParentalSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void CParental_EnableParentalSettings_Request::ArenaDtor(void* object) {
  CParental_EnableParentalSettings_Request* _this = reinterpret_cast< CParental_EnableParentalSettings_Request* >(object);
  (void)_this;
}
void CParental_EnableParentalSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_EnableParentalSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_EnableParentalSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_EnableParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&enablecode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&enablecode_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_EnableParentalSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_EnableParentalSettings_Request.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalSettings settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sessionid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_EnableParentalSettings_Request.sessionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enablecode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enablecode(&has_bits);
          enablecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_EnableParentalSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_EnableParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_EnableParentalSettings_Request.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional .ParentalSettings settings = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  // optional string sessionid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_EnableParentalSettings_Request.sessionid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sessionid(), target);
  }

  // optional uint32 enablecode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enablecode(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_EnableParentalSettings_Request)
  return target;
}

size_t CParental_EnableParentalSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_EnableParentalSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string sessionid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sessionid());
    }

    // optional .ParentalSettings settings = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional uint32 enablecode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enablecode());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_EnableParentalSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_EnableParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_EnableParentalSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_EnableParentalSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_EnableParentalSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_EnableParentalSettings_Request)
    MergeFrom(*source);
  }
}

void CParental_EnableParentalSettings_Request::MergeFrom(const CParental_EnableParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_EnableParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sessionid(from._internal_sessionid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_settings()->::ParentalSettings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      enablecode_ = from.enablecode_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_EnableParentalSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_EnableParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_EnableParentalSettings_Request::CopyFrom(const CParental_EnableParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_EnableParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_EnableParentalSettings_Request::IsInitialized() const {
  return true;
}

void CParental_EnableParentalSettings_Request::InternalSwap(CParental_EnableParentalSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_EnableParentalSettings_Request, steamid_)
      + sizeof(CParental_EnableParentalSettings_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_EnableParentalSettings_Request, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_EnableParentalSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_EnableParentalSettings_Response::_Internal {
 public:
};

CParental_EnableParentalSettings_Response::CParental_EnableParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_EnableParentalSettings_Response)
}
CParental_EnableParentalSettings_Response::CParental_EnableParentalSettings_Response(const CParental_EnableParentalSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_EnableParentalSettings_Response)
}

void CParental_EnableParentalSettings_Response::SharedCtor() {
}

CParental_EnableParentalSettings_Response::~CParental_EnableParentalSettings_Response() {
  // @@protoc_insertion_point(destructor:CParental_EnableParentalSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_EnableParentalSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_EnableParentalSettings_Response::ArenaDtor(void* object) {
  CParental_EnableParentalSettings_Response* _this = reinterpret_cast< CParental_EnableParentalSettings_Response* >(object);
  (void)_this;
}
void CParental_EnableParentalSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_EnableParentalSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_EnableParentalSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_EnableParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_EnableParentalSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_EnableParentalSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_EnableParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_EnableParentalSettings_Response)
  return target;
}

size_t CParental_EnableParentalSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_EnableParentalSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_EnableParentalSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_EnableParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_EnableParentalSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_EnableParentalSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_EnableParentalSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_EnableParentalSettings_Response)
    MergeFrom(*source);
  }
}

void CParental_EnableParentalSettings_Response::MergeFrom(const CParental_EnableParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_EnableParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_EnableParentalSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_EnableParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_EnableParentalSettings_Response::CopyFrom(const CParental_EnableParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_EnableParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_EnableParentalSettings_Response::IsInitialized() const {
  return true;
}

void CParental_EnableParentalSettings_Response::InternalSwap(CParental_EnableParentalSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_EnableParentalSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_DisableParentalSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_DisableParentalSettings_Request>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_DisableParentalSettings_Request::CParental_DisableParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_DisableParentalSettings_Request)
}
CParental_DisableParentalSettings_Request::CParental_DisableParentalSettings_Request(const CParental_DisableParentalSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CParental_DisableParentalSettings_Request)
}

void CParental_DisableParentalSettings_Request::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamid_ = PROTOBUF_ULONGLONG(0);
}

CParental_DisableParentalSettings_Request::~CParental_DisableParentalSettings_Request() {
  // @@protoc_insertion_point(destructor:CParental_DisableParentalSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_DisableParentalSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_DisableParentalSettings_Request::ArenaDtor(void* object) {
  CParental_DisableParentalSettings_Request* _this = reinterpret_cast< CParental_DisableParentalSettings_Request* >(object);
  (void)_this;
}
void CParental_DisableParentalSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_DisableParentalSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_DisableParentalSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_DisableParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmpty();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_DisableParentalSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_DisableParentalSettings_Request.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_DisableParentalSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_DisableParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_DisableParentalSettings_Request.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_DisableParentalSettings_Request)
  return target;
}

size_t CParental_DisableParentalSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_DisableParentalSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_DisableParentalSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_DisableParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_DisableParentalSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_DisableParentalSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_DisableParentalSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_DisableParentalSettings_Request)
    MergeFrom(*source);
  }
}

void CParental_DisableParentalSettings_Request::MergeFrom(const CParental_DisableParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_DisableParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_DisableParentalSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_DisableParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_DisableParentalSettings_Request::CopyFrom(const CParental_DisableParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_DisableParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_DisableParentalSettings_Request::IsInitialized() const {
  return true;
}

void CParental_DisableParentalSettings_Request::InternalSwap(CParental_DisableParentalSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_DisableParentalSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_DisableParentalSettings_Response::_Internal {
 public:
};

CParental_DisableParentalSettings_Response::CParental_DisableParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_DisableParentalSettings_Response)
}
CParental_DisableParentalSettings_Response::CParental_DisableParentalSettings_Response(const CParental_DisableParentalSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_DisableParentalSettings_Response)
}

void CParental_DisableParentalSettings_Response::SharedCtor() {
}

CParental_DisableParentalSettings_Response::~CParental_DisableParentalSettings_Response() {
  // @@protoc_insertion_point(destructor:CParental_DisableParentalSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_DisableParentalSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_DisableParentalSettings_Response::ArenaDtor(void* object) {
  CParental_DisableParentalSettings_Response* _this = reinterpret_cast< CParental_DisableParentalSettings_Response* >(object);
  (void)_this;
}
void CParental_DisableParentalSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_DisableParentalSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_DisableParentalSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_DisableParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_DisableParentalSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_DisableParentalSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_DisableParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_DisableParentalSettings_Response)
  return target;
}

size_t CParental_DisableParentalSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_DisableParentalSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_DisableParentalSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_DisableParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_DisableParentalSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_DisableParentalSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_DisableParentalSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_DisableParentalSettings_Response)
    MergeFrom(*source);
  }
}

void CParental_DisableParentalSettings_Response::MergeFrom(const CParental_DisableParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_DisableParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_DisableParentalSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_DisableParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_DisableParentalSettings_Response::CopyFrom(const CParental_DisableParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_DisableParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_DisableParentalSettings_Response::IsInitialized() const {
  return true;
}

void CParental_DisableParentalSettings_Response::InternalSwap(CParental_DisableParentalSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_DisableParentalSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_GetParentalSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_GetParentalSettings_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_GetParentalSettings_Request::CParental_GetParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_GetParentalSettings_Request)
}
CParental_GetParentalSettings_Request::CParental_GetParentalSettings_Request(const CParental_GetParentalSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CParental_GetParentalSettings_Request)
}

void CParental_GetParentalSettings_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CParental_GetParentalSettings_Request::~CParental_GetParentalSettings_Request() {
  // @@protoc_insertion_point(destructor:CParental_GetParentalSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_GetParentalSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_GetParentalSettings_Request::ArenaDtor(void* object) {
  CParental_GetParentalSettings_Request* _this = reinterpret_cast< CParental_GetParentalSettings_Request* >(object);
  (void)_this;
}
void CParental_GetParentalSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_GetParentalSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_GetParentalSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_GetParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_GetParentalSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_GetParentalSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_GetParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_GetParentalSettings_Request)
  return target;
}

size_t CParental_GetParentalSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_GetParentalSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_GetParentalSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_GetParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_GetParentalSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_GetParentalSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_GetParentalSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_GetParentalSettings_Request)
    MergeFrom(*source);
  }
}

void CParental_GetParentalSettings_Request::MergeFrom(const CParental_GetParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_GetParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CParental_GetParentalSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_GetParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_GetParentalSettings_Request::CopyFrom(const CParental_GetParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_GetParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_GetParentalSettings_Request::IsInitialized() const {
  return true;
}

void CParental_GetParentalSettings_Request::InternalSwap(CParental_GetParentalSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_GetParentalSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_GetParentalSettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_GetParentalSettings_Response>()._has_bits_);
  static const ::ParentalSettings& settings(const CParental_GetParentalSettings_Response* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ParentalSettings&
CParental_GetParentalSettings_Response::_Internal::settings(const CParental_GetParentalSettings_Response* msg) {
  return *msg->settings_;
}
CParental_GetParentalSettings_Response::CParental_GetParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_GetParentalSettings_Response)
}
CParental_GetParentalSettings_Response::CParental_GetParentalSettings_Response(const CParental_GetParentalSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::ParentalSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CParental_GetParentalSettings_Response)
}

void CParental_GetParentalSettings_Response::SharedCtor() {
settings_ = nullptr;
}

CParental_GetParentalSettings_Response::~CParental_GetParentalSettings_Response() {
  // @@protoc_insertion_point(destructor:CParental_GetParentalSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_GetParentalSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void CParental_GetParentalSettings_Response::ArenaDtor(void* object) {
  CParental_GetParentalSettings_Response* _this = reinterpret_cast< CParental_GetParentalSettings_Response* >(object);
  (void)_this;
}
void CParental_GetParentalSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_GetParentalSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_GetParentalSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_GetParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(settings_ != nullptr);
    settings_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_GetParentalSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ParentalSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_GetParentalSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_GetParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ParentalSettings settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_GetParentalSettings_Response)
  return target;
}

size_t CParental_GetParentalSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_GetParentalSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ParentalSettings settings = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_GetParentalSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_GetParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_GetParentalSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_GetParentalSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_GetParentalSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_GetParentalSettings_Response)
    MergeFrom(*source);
  }
}

void CParental_GetParentalSettings_Response::MergeFrom(const CParental_GetParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_GetParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::ParentalSettings::MergeFrom(from._internal_settings());
  }
}

void CParental_GetParentalSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_GetParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_GetParentalSettings_Response::CopyFrom(const CParental_GetParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_GetParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_GetParentalSettings_Response::IsInitialized() const {
  return true;
}

void CParental_GetParentalSettings_Response::InternalSwap(CParental_GetParentalSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_GetParentalSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_GetSignedParentalSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_GetSignedParentalSettings_Request>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_GetSignedParentalSettings_Request::CParental_GetSignedParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_GetSignedParentalSettings_Request)
}
CParental_GetSignedParentalSettings_Request::CParental_GetSignedParentalSettings_Request(const CParental_GetSignedParentalSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:CParental_GetSignedParentalSettings_Request)
}

void CParental_GetSignedParentalSettings_Request::SharedCtor() {
priority_ = 0u;
}

CParental_GetSignedParentalSettings_Request::~CParental_GetSignedParentalSettings_Request() {
  // @@protoc_insertion_point(destructor:CParental_GetSignedParentalSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_GetSignedParentalSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_GetSignedParentalSettings_Request::ArenaDtor(void* object) {
  CParental_GetSignedParentalSettings_Request* _this = reinterpret_cast< CParental_GetSignedParentalSettings_Request* >(object);
  (void)_this;
}
void CParental_GetSignedParentalSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_GetSignedParentalSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_GetSignedParentalSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_GetSignedParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_GetSignedParentalSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_GetSignedParentalSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_GetSignedParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_GetSignedParentalSettings_Request)
  return target;
}

size_t CParental_GetSignedParentalSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_GetSignedParentalSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 priority = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_GetSignedParentalSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_GetSignedParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_GetSignedParentalSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_GetSignedParentalSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_GetSignedParentalSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_GetSignedParentalSettings_Request)
    MergeFrom(*source);
  }
}

void CParental_GetSignedParentalSettings_Request::MergeFrom(const CParental_GetSignedParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_GetSignedParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_priority()) {
    _internal_set_priority(from._internal_priority());
  }
}

void CParental_GetSignedParentalSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_GetSignedParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_GetSignedParentalSettings_Request::CopyFrom(const CParental_GetSignedParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_GetSignedParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_GetSignedParentalSettings_Request::IsInitialized() const {
  return true;
}

void CParental_GetSignedParentalSettings_Request::InternalSwap(CParental_GetSignedParentalSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_GetSignedParentalSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_GetSignedParentalSettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_GetSignedParentalSettings_Response>()._has_bits_);
  static void set_has_serialized_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_GetSignedParentalSettings_Response::CParental_GetSignedParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_GetSignedParentalSettings_Response)
}
CParental_GetSignedParentalSettings_Response::CParental_GetSignedParentalSettings_Response(const CParental_GetSignedParentalSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_settings()) {
    serialized_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_settings(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_GetSignedParentalSettings_Response)
}

void CParental_GetSignedParentalSettings_Response::SharedCtor() {
serialized_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_GetSignedParentalSettings_Response::~CParental_GetSignedParentalSettings_Response() {
  // @@protoc_insertion_point(destructor:CParental_GetSignedParentalSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_GetSignedParentalSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_GetSignedParentalSettings_Response::ArenaDtor(void* object) {
  CParental_GetSignedParentalSettings_Response* _this = reinterpret_cast< CParental_GetSignedParentalSettings_Response* >(object);
  (void)_this;
}
void CParental_GetSignedParentalSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_GetSignedParentalSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_GetSignedParentalSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_GetSignedParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_settings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_GetSignedParentalSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serialized_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_GetSignedParentalSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_GetSignedParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_settings(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_GetSignedParentalSettings_Response)
  return target;
}

size_t CParental_GetSignedParentalSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_GetSignedParentalSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_settings = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_settings());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_GetSignedParentalSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_GetSignedParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_GetSignedParentalSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_GetSignedParentalSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_GetSignedParentalSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_GetSignedParentalSettings_Response)
    MergeFrom(*source);
  }
}

void CParental_GetSignedParentalSettings_Response::MergeFrom(const CParental_GetSignedParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_GetSignedParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_settings(from._internal_serialized_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
  }
}

void CParental_GetSignedParentalSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_GetSignedParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_GetSignedParentalSettings_Response::CopyFrom(const CParental_GetSignedParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_GetSignedParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_GetSignedParentalSettings_Response::IsInitialized() const {
  return true;
}

void CParental_GetSignedParentalSettings_Response::InternalSwap(CParental_GetSignedParentalSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_settings_.Swap(&other->serialized_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_GetSignedParentalSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_SetParentalSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_SetParentalSettings_Request>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ParentalSettings& settings(const CParental_SetParentalSettings_Request* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ParentalSettings&
CParental_SetParentalSettings_Request::_Internal::settings(const CParental_SetParentalSettings_Request* msg) {
  return *msg->settings_;
}
CParental_SetParentalSettings_Request::CParental_SetParentalSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_SetParentalSettings_Request)
}
CParental_SetParentalSettings_Request::CParental_SetParentalSettings_Request(const CParental_SetParentalSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_new_password()) {
    new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_password(), 
      GetArena());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sessionid()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::ParentalSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CParental_SetParentalSettings_Request)
}

void CParental_SetParentalSettings_Request::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(steamid_));
}

CParental_SetParentalSettings_Request::~CParental_SetParentalSettings_Request() {
  // @@protoc_insertion_point(destructor:CParental_SetParentalSettings_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_SetParentalSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void CParental_SetParentalSettings_Request::ArenaDtor(void* object) {
  CParental_SetParentalSettings_Request* _this = reinterpret_cast< CParental_SetParentalSettings_Request* >(object);
  (void)_this;
}
void CParental_SetParentalSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_SetParentalSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_SetParentalSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_SetParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      new_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_SetParentalSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_SetParentalSettings_Request.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalSettings settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string new_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_SetParentalSettings_Request.new_password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sessionid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_SetParentalSettings_Request.sessionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_SetParentalSettings_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_SetParentalSettings_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_SetParentalSettings_Request.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional .ParentalSettings settings = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  // optional string new_password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_SetParentalSettings_Request.new_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_new_password(), target);
  }

  // optional string sessionid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_SetParentalSettings_Request.sessionid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sessionid(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_SetParentalSettings_Request)
  return target;
}

size_t CParental_SetParentalSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_SetParentalSettings_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string new_password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_password());
    }

    // optional string sessionid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sessionid());
    }

    // optional .ParentalSettings settings = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_SetParentalSettings_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_SetParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_SetParentalSettings_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_SetParentalSettings_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_SetParentalSettings_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_SetParentalSettings_Request)
    MergeFrom(*source);
  }
}

void CParental_SetParentalSettings_Request::MergeFrom(const CParental_SetParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_SetParentalSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_new_password(from._internal_new_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sessionid(from._internal_sessionid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_settings()->::ParentalSettings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_SetParentalSettings_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_SetParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_SetParentalSettings_Request::CopyFrom(const CParental_SetParentalSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_SetParentalSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_SetParentalSettings_Request::IsInitialized() const {
  return true;
}

void CParental_SetParentalSettings_Request::InternalSwap(CParental_SetParentalSettings_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_password_.Swap(&other->new_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_SetParentalSettings_Request, steamid_)
      + sizeof(CParental_SetParentalSettings_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_SetParentalSettings_Request, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_SetParentalSettings_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_SetParentalSettings_Response::_Internal {
 public:
};

CParental_SetParentalSettings_Response::CParental_SetParentalSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_SetParentalSettings_Response)
}
CParental_SetParentalSettings_Response::CParental_SetParentalSettings_Response(const CParental_SetParentalSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_SetParentalSettings_Response)
}

void CParental_SetParentalSettings_Response::SharedCtor() {
}

CParental_SetParentalSettings_Response::~CParental_SetParentalSettings_Response() {
  // @@protoc_insertion_point(destructor:CParental_SetParentalSettings_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_SetParentalSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_SetParentalSettings_Response::ArenaDtor(void* object) {
  CParental_SetParentalSettings_Response* _this = reinterpret_cast< CParental_SetParentalSettings_Response* >(object);
  (void)_this;
}
void CParental_SetParentalSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_SetParentalSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_SetParentalSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_SetParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_SetParentalSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_SetParentalSettings_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_SetParentalSettings_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_SetParentalSettings_Response)
  return target;
}

size_t CParental_SetParentalSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_SetParentalSettings_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_SetParentalSettings_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_SetParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_SetParentalSettings_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_SetParentalSettings_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_SetParentalSettings_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_SetParentalSettings_Response)
    MergeFrom(*source);
  }
}

void CParental_SetParentalSettings_Response::MergeFrom(const CParental_SetParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_SetParentalSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_SetParentalSettings_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_SetParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_SetParentalSettings_Response::CopyFrom(const CParental_SetParentalSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_SetParentalSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_SetParentalSettings_Response::IsInitialized() const {
  return true;
}

void CParental_SetParentalSettings_Response::InternalSwap(CParental_SetParentalSettings_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_SetParentalSettings_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ValidateToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ValidateToken_Request>()._has_bits_);
  static void set_has_unloctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_ValidateToken_Request::CParental_ValidateToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ValidateToken_Request)
}
CParental_ValidateToken_Request::CParental_ValidateToken_Request(const CParental_ValidateToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unloctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unloctoken()) {
    unloctoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unloctoken(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_ValidateToken_Request)
}

void CParental_ValidateToken_Request::SharedCtor() {
unloctoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_ValidateToken_Request::~CParental_ValidateToken_Request() {
  // @@protoc_insertion_point(destructor:CParental_ValidateToken_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ValidateToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unloctoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_ValidateToken_Request::ArenaDtor(void* object) {
  CParental_ValidateToken_Request* _this = reinterpret_cast< CParental_ValidateToken_Request* >(object);
  (void)_this;
}
void CParental_ValidateToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ValidateToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ValidateToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ValidateToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unloctoken_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ValidateToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unloctoken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unloctoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ValidateToken_Request.unloctoken");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ValidateToken_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ValidateToken_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unloctoken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unloctoken().data(), static_cast<int>(this->_internal_unloctoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ValidateToken_Request.unloctoken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unloctoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ValidateToken_Request)
  return target;
}

size_t CParental_ValidateToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ValidateToken_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string unloctoken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unloctoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ValidateToken_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ValidateToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ValidateToken_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ValidateToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ValidateToken_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ValidateToken_Request)
    MergeFrom(*source);
  }
}

void CParental_ValidateToken_Request::MergeFrom(const CParental_ValidateToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ValidateToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unloctoken()) {
    _internal_set_unloctoken(from._internal_unloctoken());
  }
}

void CParental_ValidateToken_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ValidateToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ValidateToken_Request::CopyFrom(const CParental_ValidateToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ValidateToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ValidateToken_Request::IsInitialized() const {
  return true;
}

void CParental_ValidateToken_Request::InternalSwap(CParental_ValidateToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unloctoken_.Swap(&other->unloctoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ValidateToken_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ValidateToken_Response::_Internal {
 public:
};

CParental_ValidateToken_Response::CParental_ValidateToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ValidateToken_Response)
}
CParental_ValidateToken_Response::CParental_ValidateToken_Response(const CParental_ValidateToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_ValidateToken_Response)
}

void CParental_ValidateToken_Response::SharedCtor() {
}

CParental_ValidateToken_Response::~CParental_ValidateToken_Response() {
  // @@protoc_insertion_point(destructor:CParental_ValidateToken_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ValidateToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_ValidateToken_Response::ArenaDtor(void* object) {
  CParental_ValidateToken_Response* _this = reinterpret_cast< CParental_ValidateToken_Response* >(object);
  (void)_this;
}
void CParental_ValidateToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ValidateToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ValidateToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ValidateToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ValidateToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ValidateToken_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ValidateToken_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ValidateToken_Response)
  return target;
}

size_t CParental_ValidateToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ValidateToken_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ValidateToken_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ValidateToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ValidateToken_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ValidateToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ValidateToken_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ValidateToken_Response)
    MergeFrom(*source);
  }
}

void CParental_ValidateToken_Response::MergeFrom(const CParental_ValidateToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ValidateToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_ValidateToken_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ValidateToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ValidateToken_Response::CopyFrom(const CParental_ValidateToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ValidateToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ValidateToken_Response::IsInitialized() const {
  return true;
}

void CParental_ValidateToken_Response::InternalSwap(CParental_ValidateToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ValidateToken_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ValidatePassword_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ValidatePassword_Request>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_send_unlocon_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CParental_ValidatePassword_Request::CParental_ValidatePassword_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ValidatePassword_Request)
}
CParental_ValidatePassword_Request::CParental_ValidatePassword_Request(const CParental_ValidatePassword_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArena());
  }
  send_unlocon_success_ = from.send_unlocon_success_;
  // @@protoc_insertion_point(copy_constructor:CParental_ValidatePassword_Request)
}

void CParental_ValidatePassword_Request::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
send_unlocon_success_ = false;
}

CParental_ValidatePassword_Request::~CParental_ValidatePassword_Request() {
  // @@protoc_insertion_point(destructor:CParental_ValidatePassword_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ValidatePassword_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_ValidatePassword_Request::ArenaDtor(void* object) {
  CParental_ValidatePassword_Request* _this = reinterpret_cast< CParental_ValidatePassword_Request* >(object);
  (void)_this;
}
void CParental_ValidatePassword_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ValidatePassword_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ValidatePassword_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ValidatePassword_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_.ClearNonDefaultToEmpty();
    }
  }
  send_unlocon_success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ValidatePassword_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ValidatePassword_Request.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ValidatePassword_Request.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_unlocon_success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_send_unlocon_success(&has_bits);
          send_unlocon_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ValidatePassword_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ValidatePassword_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ValidatePassword_Request.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional string session = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ValidatePassword_Request.session");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session(), target);
  }

  // optional bool send_unlocon_success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_send_unlocon_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ValidatePassword_Request)
  return target;
}

size_t CParental_ValidatePassword_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ValidatePassword_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string session = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional bool send_unlocon_success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ValidatePassword_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ValidatePassword_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ValidatePassword_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ValidatePassword_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ValidatePassword_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ValidatePassword_Request)
    MergeFrom(*source);
  }
}

void CParental_ValidatePassword_Request::MergeFrom(const CParental_ValidatePassword_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ValidatePassword_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000004u) {
      send_unlocon_success_ = from.send_unlocon_success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_ValidatePassword_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ValidatePassword_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ValidatePassword_Request::CopyFrom(const CParental_ValidatePassword_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ValidatePassword_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ValidatePassword_Request::IsInitialized() const {
  return true;
}

void CParental_ValidatePassword_Request::InternalSwap(CParental_ValidatePassword_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(send_unlocon_success_, other->send_unlocon_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ValidatePassword_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ValidatePassword_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ValidatePassword_Response>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_ValidatePassword_Response::CParental_ValidatePassword_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ValidatePassword_Response)
}
CParental_ValidatePassword_Response::CParental_ValidatePassword_Response(const CParental_ValidatePassword_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_ValidatePassword_Response)
}

void CParental_ValidatePassword_Response::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_ValidatePassword_Response::~CParental_ValidatePassword_Response() {
  // @@protoc_insertion_point(destructor:CParental_ValidatePassword_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ValidatePassword_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_ValidatePassword_Response::ArenaDtor(void* object) {
  CParental_ValidatePassword_Response* _this = reinterpret_cast< CParental_ValidatePassword_Response* >(object);
  (void)_this;
}
void CParental_ValidatePassword_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ValidatePassword_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ValidatePassword_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ValidatePassword_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ValidatePassword_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ValidatePassword_Response.token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ValidatePassword_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ValidatePassword_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ValidatePassword_Response.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ValidatePassword_Response)
  return target;
}

size_t CParental_ValidatePassword_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ValidatePassword_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ValidatePassword_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ValidatePassword_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ValidatePassword_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ValidatePassword_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ValidatePassword_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ValidatePassword_Response)
    MergeFrom(*source);
  }
}

void CParental_ValidatePassword_Response::MergeFrom(const CParental_ValidatePassword_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ValidatePassword_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _internal_set_token(from._internal_token());
  }
}

void CParental_ValidatePassword_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ValidatePassword_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ValidatePassword_Response::CopyFrom(const CParental_ValidatePassword_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ValidatePassword_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ValidatePassword_Response::IsInitialized() const {
  return true;
}

void CParental_ValidatePassword_Response::InternalSwap(CParental_ValidatePassword_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ValidatePassword_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_LockClient_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_LockClient_Request>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_LockClient_Request::CParental_LockClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_LockClient_Request)
}
CParental_LockClient_Request::CParental_LockClient_Request(const CParental_LockClient_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_LockClient_Request)
}

void CParental_LockClient_Request::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_LockClient_Request::~CParental_LockClient_Request() {
  // @@protoc_insertion_point(destructor:CParental_LockClient_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_LockClient_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_LockClient_Request::ArenaDtor(void* object) {
  CParental_LockClient_Request* _this = reinterpret_cast< CParental_LockClient_Request* >(object);
  (void)_this;
}
void CParental_LockClient_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_LockClient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_LockClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_LockClient_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_LockClient_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_LockClient_Request.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_LockClient_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_LockClient_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_LockClient_Request.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_LockClient_Request)
  return target;
}

size_t CParental_LockClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_LockClient_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string session = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_LockClient_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_LockClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_LockClient_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_LockClient_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_LockClient_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_LockClient_Request)
    MergeFrom(*source);
  }
}

void CParental_LockClient_Request::MergeFrom(const CParental_LockClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_LockClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session()) {
    _internal_set_session(from._internal_session());
  }
}

void CParental_LockClient_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_LockClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_LockClient_Request::CopyFrom(const CParental_LockClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_LockClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_LockClient_Request::IsInitialized() const {
  return true;
}

void CParental_LockClient_Request::InternalSwap(CParental_LockClient_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_LockClient_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_LockClient_Response::_Internal {
 public:
};

CParental_LockClient_Response::CParental_LockClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_LockClient_Response)
}
CParental_LockClient_Response::CParental_LockClient_Response(const CParental_LockClient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_LockClient_Response)
}

void CParental_LockClient_Response::SharedCtor() {
}

CParental_LockClient_Response::~CParental_LockClient_Response() {
  // @@protoc_insertion_point(destructor:CParental_LockClient_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_LockClient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_LockClient_Response::ArenaDtor(void* object) {
  CParental_LockClient_Response* _this = reinterpret_cast< CParental_LockClient_Response* >(object);
  (void)_this;
}
void CParental_LockClient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_LockClient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_LockClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_LockClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_LockClient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_LockClient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_LockClient_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_LockClient_Response)
  return target;
}

size_t CParental_LockClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_LockClient_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_LockClient_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_LockClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_LockClient_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_LockClient_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_LockClient_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_LockClient_Response)
    MergeFrom(*source);
  }
}

void CParental_LockClient_Response::MergeFrom(const CParental_LockClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_LockClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_LockClient_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_LockClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_LockClient_Response::CopyFrom(const CParental_LockClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_LockClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_LockClient_Response::IsInitialized() const {
  return true;
}

void CParental_LockClient_Response::InternalSwap(CParental_LockClient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_LockClient_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_RequestRecoveryCode_Request::_Internal {
 public:
};

CParental_RequestRecoveryCode_Request::CParental_RequestRecoveryCode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_RequestRecoveryCode_Request)
}
CParental_RequestRecoveryCode_Request::CParental_RequestRecoveryCode_Request(const CParental_RequestRecoveryCode_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_RequestRecoveryCode_Request)
}

void CParental_RequestRecoveryCode_Request::SharedCtor() {
}

CParental_RequestRecoveryCode_Request::~CParental_RequestRecoveryCode_Request() {
  // @@protoc_insertion_point(destructor:CParental_RequestRecoveryCode_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_RequestRecoveryCode_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_RequestRecoveryCode_Request::ArenaDtor(void* object) {
  CParental_RequestRecoveryCode_Request* _this = reinterpret_cast< CParental_RequestRecoveryCode_Request* >(object);
  (void)_this;
}
void CParental_RequestRecoveryCode_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_RequestRecoveryCode_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_RequestRecoveryCode_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_RequestRecoveryCode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_RequestRecoveryCode_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_RequestRecoveryCode_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_RequestRecoveryCode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_RequestRecoveryCode_Request)
  return target;
}

size_t CParental_RequestRecoveryCode_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_RequestRecoveryCode_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_RequestRecoveryCode_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_RequestRecoveryCode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_RequestRecoveryCode_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_RequestRecoveryCode_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_RequestRecoveryCode_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_RequestRecoveryCode_Request)
    MergeFrom(*source);
  }
}

void CParental_RequestRecoveryCode_Request::MergeFrom(const CParental_RequestRecoveryCode_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_RequestRecoveryCode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_RequestRecoveryCode_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_RequestRecoveryCode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_RequestRecoveryCode_Request::CopyFrom(const CParental_RequestRecoveryCode_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_RequestRecoveryCode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_RequestRecoveryCode_Request::IsInitialized() const {
  return true;
}

void CParental_RequestRecoveryCode_Request::InternalSwap(CParental_RequestRecoveryCode_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_RequestRecoveryCode_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_RequestRecoveryCode_Response::_Internal {
 public:
};

CParental_RequestRecoveryCode_Response::CParental_RequestRecoveryCode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_RequestRecoveryCode_Response)
}
CParental_RequestRecoveryCode_Response::CParental_RequestRecoveryCode_Response(const CParental_RequestRecoveryCode_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_RequestRecoveryCode_Response)
}

void CParental_RequestRecoveryCode_Response::SharedCtor() {
}

CParental_RequestRecoveryCode_Response::~CParental_RequestRecoveryCode_Response() {
  // @@protoc_insertion_point(destructor:CParental_RequestRecoveryCode_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_RequestRecoveryCode_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_RequestRecoveryCode_Response::ArenaDtor(void* object) {
  CParental_RequestRecoveryCode_Response* _this = reinterpret_cast< CParental_RequestRecoveryCode_Response* >(object);
  (void)_this;
}
void CParental_RequestRecoveryCode_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_RequestRecoveryCode_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_RequestRecoveryCode_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_RequestRecoveryCode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_RequestRecoveryCode_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_RequestRecoveryCode_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_RequestRecoveryCode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_RequestRecoveryCode_Response)
  return target;
}

size_t CParental_RequestRecoveryCode_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_RequestRecoveryCode_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_RequestRecoveryCode_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_RequestRecoveryCode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_RequestRecoveryCode_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_RequestRecoveryCode_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_RequestRecoveryCode_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_RequestRecoveryCode_Response)
    MergeFrom(*source);
  }
}

void CParental_RequestRecoveryCode_Response::MergeFrom(const CParental_RequestRecoveryCode_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_RequestRecoveryCode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_RequestRecoveryCode_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_RequestRecoveryCode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_RequestRecoveryCode_Response::CopyFrom(const CParental_RequestRecoveryCode_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_RequestRecoveryCode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_RequestRecoveryCode_Response::IsInitialized() const {
  return true;
}

void CParental_RequestRecoveryCode_Response::InternalSwap(CParental_RequestRecoveryCode_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_RequestRecoveryCode_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_DisableWithRecoveryCode_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_DisableWithRecoveryCode_Request>()._has_bits_);
  static void set_has_recovery_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_DisableWithRecoveryCode_Request::CParental_DisableWithRecoveryCode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_DisableWithRecoveryCode_Request)
}
CParental_DisableWithRecoveryCode_Request::CParental_DisableWithRecoveryCode_Request(const CParental_DisableWithRecoveryCode_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&recovery_code_, &from.recovery_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&recovery_code_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_DisableWithRecoveryCode_Request)
}

void CParental_DisableWithRecoveryCode_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recovery_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&recovery_code_)) + sizeof(steamid_));
}

CParental_DisableWithRecoveryCode_Request::~CParental_DisableWithRecoveryCode_Request() {
  // @@protoc_insertion_point(destructor:CParental_DisableWithRecoveryCode_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_DisableWithRecoveryCode_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_DisableWithRecoveryCode_Request::ArenaDtor(void* object) {
  CParental_DisableWithRecoveryCode_Request* _this = reinterpret_cast< CParental_DisableWithRecoveryCode_Request* >(object);
  (void)_this;
}
void CParental_DisableWithRecoveryCode_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_DisableWithRecoveryCode_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_DisableWithRecoveryCode_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_DisableWithRecoveryCode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&recovery_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&recovery_code_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_DisableWithRecoveryCode_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 recovery_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recovery_code(&has_bits);
          recovery_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_DisableWithRecoveryCode_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_DisableWithRecoveryCode_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recovery_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recovery_code(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_DisableWithRecoveryCode_Request)
  return target;
}

size_t CParental_DisableWithRecoveryCode_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_DisableWithRecoveryCode_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 recovery_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recovery_code());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_DisableWithRecoveryCode_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_DisableWithRecoveryCode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_DisableWithRecoveryCode_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_DisableWithRecoveryCode_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_DisableWithRecoveryCode_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_DisableWithRecoveryCode_Request)
    MergeFrom(*source);
  }
}

void CParental_DisableWithRecoveryCode_Request::MergeFrom(const CParental_DisableWithRecoveryCode_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_DisableWithRecoveryCode_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      recovery_code_ = from.recovery_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_DisableWithRecoveryCode_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_DisableWithRecoveryCode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_DisableWithRecoveryCode_Request::CopyFrom(const CParental_DisableWithRecoveryCode_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_DisableWithRecoveryCode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_DisableWithRecoveryCode_Request::IsInitialized() const {
  return true;
}

void CParental_DisableWithRecoveryCode_Request::InternalSwap(CParental_DisableWithRecoveryCode_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_DisableWithRecoveryCode_Request, steamid_)
      + sizeof(CParental_DisableWithRecoveryCode_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_DisableWithRecoveryCode_Request, recovery_code_)>(
          reinterpret_cast<char*>(&recovery_code_),
          reinterpret_cast<char*>(&other->recovery_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_DisableWithRecoveryCode_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_DisableWithRecoveryCode_Response::_Internal {
 public:
};

CParental_DisableWithRecoveryCode_Response::CParental_DisableWithRecoveryCode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_DisableWithRecoveryCode_Response)
}
CParental_DisableWithRecoveryCode_Response::CParental_DisableWithRecoveryCode_Response(const CParental_DisableWithRecoveryCode_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_DisableWithRecoveryCode_Response)
}

void CParental_DisableWithRecoveryCode_Response::SharedCtor() {
}

CParental_DisableWithRecoveryCode_Response::~CParental_DisableWithRecoveryCode_Response() {
  // @@protoc_insertion_point(destructor:CParental_DisableWithRecoveryCode_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_DisableWithRecoveryCode_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_DisableWithRecoveryCode_Response::ArenaDtor(void* object) {
  CParental_DisableWithRecoveryCode_Response* _this = reinterpret_cast< CParental_DisableWithRecoveryCode_Response* >(object);
  (void)_this;
}
void CParental_DisableWithRecoveryCode_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_DisableWithRecoveryCode_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_DisableWithRecoveryCode_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_DisableWithRecoveryCode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_DisableWithRecoveryCode_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_DisableWithRecoveryCode_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_DisableWithRecoveryCode_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_DisableWithRecoveryCode_Response)
  return target;
}

size_t CParental_DisableWithRecoveryCode_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_DisableWithRecoveryCode_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_DisableWithRecoveryCode_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_DisableWithRecoveryCode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_DisableWithRecoveryCode_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_DisableWithRecoveryCode_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_DisableWithRecoveryCode_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_DisableWithRecoveryCode_Response)
    MergeFrom(*source);
  }
}

void CParental_DisableWithRecoveryCode_Response::MergeFrom(const CParental_DisableWithRecoveryCode_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_DisableWithRecoveryCode_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_DisableWithRecoveryCode_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_DisableWithRecoveryCode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_DisableWithRecoveryCode_Response::CopyFrom(const CParental_DisableWithRecoveryCode_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_DisableWithRecoveryCode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_DisableWithRecoveryCode_Response::IsInitialized() const {
  return true;
}

void CParental_DisableWithRecoveryCode_Response::InternalSwap(CParental_DisableWithRecoveryCode_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_DisableWithRecoveryCode_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_RequestFeatureAccess_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_RequestFeatureAccess_Request>()._has_bits_);
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_RequestFeatureAccess_Request::CParental_RequestFeatureAccess_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_RequestFeatureAccess_Request)
}
CParental_RequestFeatureAccess_Request::CParental_RequestFeatureAccess_Request(const CParental_RequestFeatureAccess_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&features_, &from.features_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&features_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_RequestFeatureAccess_Request)
}

void CParental_RequestFeatureAccess_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&features_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&features_)) + sizeof(steamid_));
}

CParental_RequestFeatureAccess_Request::~CParental_RequestFeatureAccess_Request() {
  // @@protoc_insertion_point(destructor:CParental_RequestFeatureAccess_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_RequestFeatureAccess_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_RequestFeatureAccess_Request::ArenaDtor(void* object) {
  CParental_RequestFeatureAccess_Request* _this = reinterpret_cast< CParental_RequestFeatureAccess_Request* >(object);
  (void)_this;
}
void CParental_RequestFeatureAccess_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_RequestFeatureAccess_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_RequestFeatureAccess_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_RequestFeatureAccess_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&features_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&features_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_RequestFeatureAccess_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_features(&has_bits);
          features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_RequestFeatureAccess_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_RequestFeatureAccess_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 features = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_features(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_RequestFeatureAccess_Request)
  return target;
}

size_t CParental_RequestFeatureAccess_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_RequestFeatureAccess_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 features = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_features());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_RequestFeatureAccess_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_RequestFeatureAccess_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_RequestFeatureAccess_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_RequestFeatureAccess_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_RequestFeatureAccess_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_RequestFeatureAccess_Request)
    MergeFrom(*source);
  }
}

void CParental_RequestFeatureAccess_Request::MergeFrom(const CParental_RequestFeatureAccess_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_RequestFeatureAccess_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      features_ = from.features_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_RequestFeatureAccess_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_RequestFeatureAccess_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_RequestFeatureAccess_Request::CopyFrom(const CParental_RequestFeatureAccess_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_RequestFeatureAccess_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_RequestFeatureAccess_Request::IsInitialized() const {
  return true;
}

void CParental_RequestFeatureAccess_Request::InternalSwap(CParental_RequestFeatureAccess_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_RequestFeatureAccess_Request, steamid_)
      + sizeof(CParental_RequestFeatureAccess_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_RequestFeatureAccess_Request, features_)>(
          reinterpret_cast<char*>(&features_),
          reinterpret_cast<char*>(&other->features_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_RequestFeatureAccess_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_RequestFeatureAccess_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_RequestFeatureAccess_Response>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_RequestFeatureAccess_Response::CParental_RequestFeatureAccess_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_RequestFeatureAccess_Response)
}
CParental_RequestFeatureAccess_Response::CParental_RequestFeatureAccess_Response(const CParental_RequestFeatureAccess_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:CParental_RequestFeatureAccess_Response)
}

void CParental_RequestFeatureAccess_Response::SharedCtor() {
requestid_ = PROTOBUF_ULONGLONG(0);
}

CParental_RequestFeatureAccess_Response::~CParental_RequestFeatureAccess_Response() {
  // @@protoc_insertion_point(destructor:CParental_RequestFeatureAccess_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_RequestFeatureAccess_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_RequestFeatureAccess_Response::ArenaDtor(void* object) {
  CParental_RequestFeatureAccess_Response* _this = reinterpret_cast< CParental_RequestFeatureAccess_Response* >(object);
  (void)_this;
}
void CParental_RequestFeatureAccess_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_RequestFeatureAccess_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_RequestFeatureAccess_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_RequestFeatureAccess_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_RequestFeatureAccess_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_RequestFeatureAccess_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_RequestFeatureAccess_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 requestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_RequestFeatureAccess_Response)
  return target;
}

size_t CParental_RequestFeatureAccess_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_RequestFeatureAccess_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 requestid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_RequestFeatureAccess_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_RequestFeatureAccess_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_RequestFeatureAccess_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_RequestFeatureAccess_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_RequestFeatureAccess_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_RequestFeatureAccess_Response)
    MergeFrom(*source);
  }
}

void CParental_RequestFeatureAccess_Response::MergeFrom(const CParental_RequestFeatureAccess_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_RequestFeatureAccess_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _internal_set_requestid(from._internal_requestid());
  }
}

void CParental_RequestFeatureAccess_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_RequestFeatureAccess_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_RequestFeatureAccess_Response::CopyFrom(const CParental_RequestFeatureAccess_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_RequestFeatureAccess_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_RequestFeatureAccess_Response::IsInitialized() const {
  return true;
}

void CParental_RequestFeatureAccess_Response::InternalSwap(CParental_RequestFeatureAccess_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_RequestFeatureAccess_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ApproveFeatureAccess_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ApproveFeatureAccess_Request>()._has_bits_);
  static void set_has_approve(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CParental_ApproveFeatureAccess_Request::CParental_ApproveFeatureAccess_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ApproveFeatureAccess_Request)
}
CParental_ApproveFeatureAccess_Request::CParental_ApproveFeatureAccess_Request(const CParental_ApproveFeatureAccess_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_ApproveFeatureAccess_Request)
}

void CParental_ApproveFeatureAccess_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_));
}

CParental_ApproveFeatureAccess_Request::~CParental_ApproveFeatureAccess_Request() {
  // @@protoc_insertion_point(destructor:CParental_ApproveFeatureAccess_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ApproveFeatureAccess_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_ApproveFeatureAccess_Request::ArenaDtor(void* object) {
  CParental_ApproveFeatureAccess_Request* _this = reinterpret_cast< CParental_ApproveFeatureAccess_Request* >(object);
  (void)_this;
}
void CParental_ApproveFeatureAccess_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ApproveFeatureAccess_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ApproveFeatureAccess_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ApproveFeatureAccess_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ApproveFeatureAccess_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool approve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_approve(&has_bits);
          approve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 requestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_features(&has_bits);
          features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ApproveFeatureAccess_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ApproveFeatureAccess_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool approve = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_approve(), target);
  }

  // optional fixed64 requestid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_requestid(), target);
  }

  // optional uint32 features = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_features(), target);
  }

  // optional uint32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duration(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ApproveFeatureAccess_Request)
  return target;
}

size_t CParental_ApproveFeatureAccess_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ApproveFeatureAccess_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 requestid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool approve = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 features = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_features());
    }

    // optional uint32 duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ApproveFeatureAccess_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ApproveFeatureAccess_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ApproveFeatureAccess_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ApproveFeatureAccess_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ApproveFeatureAccess_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ApproveFeatureAccess_Request)
    MergeFrom(*source);
  }
}

void CParental_ApproveFeatureAccess_Request::MergeFrom(const CParental_ApproveFeatureAccess_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ApproveFeatureAccess_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      approve_ = from.approve_;
    }
    if (cached_has_bits & 0x00000004u) {
      features_ = from.features_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_ApproveFeatureAccess_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ApproveFeatureAccess_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ApproveFeatureAccess_Request::CopyFrom(const CParental_ApproveFeatureAccess_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ApproveFeatureAccess_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ApproveFeatureAccess_Request::IsInitialized() const {
  return true;
}

void CParental_ApproveFeatureAccess_Request::InternalSwap(CParental_ApproveFeatureAccess_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_ApproveFeatureAccess_Request, steamid_)
      + sizeof(CParental_ApproveFeatureAccess_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_ApproveFeatureAccess_Request, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ApproveFeatureAccess_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ApproveFeatureAccess_Response::_Internal {
 public:
};

CParental_ApproveFeatureAccess_Response::CParental_ApproveFeatureAccess_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ApproveFeatureAccess_Response)
}
CParental_ApproveFeatureAccess_Response::CParental_ApproveFeatureAccess_Response(const CParental_ApproveFeatureAccess_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_ApproveFeatureAccess_Response)
}

void CParental_ApproveFeatureAccess_Response::SharedCtor() {
}

CParental_ApproveFeatureAccess_Response::~CParental_ApproveFeatureAccess_Response() {
  // @@protoc_insertion_point(destructor:CParental_ApproveFeatureAccess_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ApproveFeatureAccess_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_ApproveFeatureAccess_Response::ArenaDtor(void* object) {
  CParental_ApproveFeatureAccess_Response* _this = reinterpret_cast< CParental_ApproveFeatureAccess_Response* >(object);
  (void)_this;
}
void CParental_ApproveFeatureAccess_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ApproveFeatureAccess_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ApproveFeatureAccess_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ApproveFeatureAccess_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ApproveFeatureAccess_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ApproveFeatureAccess_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ApproveFeatureAccess_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ApproveFeatureAccess_Response)
  return target;
}

size_t CParental_ApproveFeatureAccess_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ApproveFeatureAccess_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ApproveFeatureAccess_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ApproveFeatureAccess_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ApproveFeatureAccess_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ApproveFeatureAccess_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ApproveFeatureAccess_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ApproveFeatureAccess_Response)
    MergeFrom(*source);
  }
}

void CParental_ApproveFeatureAccess_Response::MergeFrom(const CParental_ApproveFeatureAccess_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ApproveFeatureAccess_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_ApproveFeatureAccess_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ApproveFeatureAccess_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ApproveFeatureAccess_Response::CopyFrom(const CParental_ApproveFeatureAccess_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ApproveFeatureAccess_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ApproveFeatureAccess_Response::IsInitialized() const {
  return true;
}

void CParental_ApproveFeatureAccess_Response::InternalSwap(CParental_ApproveFeatureAccess_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ApproveFeatureAccess_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_RequestPlaytime_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_RequestPlaytime_Request>()._has_bits_);
  static void set_has_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ParentalPlaytimeDay& current_playtime_restrictions(const CParental_RequestPlaytime_Request* msg);
  static void set_has_current_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ParentalPlaytimeDay&
CParental_RequestPlaytime_Request::_Internal::current_playtime_restrictions(const CParental_RequestPlaytime_Request* msg) {
  return *msg->current_playtime_restrictions_;
}
CParental_RequestPlaytime_Request::CParental_RequestPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_RequestPlaytime_Request)
}
CParental_RequestPlaytime_Request::CParental_RequestPlaytime_Request(const CParental_RequestPlaytime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_playtime_restrictions()) {
    current_playtime_restrictions_ = new ::ParentalPlaytimeDay(*from.current_playtime_restrictions_);
  } else {
    current_playtime_restrictions_ = nullptr;
  }
  ::memcpy(&time_expires_, &from.time_expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&time_expires_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_RequestPlaytime_Request)
}

void CParental_RequestPlaytime_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_playtime_restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&current_playtime_restrictions_)) + sizeof(steamid_));
}

CParental_RequestPlaytime_Request::~CParental_RequestPlaytime_Request() {
  // @@protoc_insertion_point(destructor:CParental_RequestPlaytime_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_RequestPlaytime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_playtime_restrictions_;
}

void CParental_RequestPlaytime_Request::ArenaDtor(void* object) {
  CParental_RequestPlaytime_Request* _this = reinterpret_cast< CParental_RequestPlaytime_Request* >(object);
  (void)_this;
}
void CParental_RequestPlaytime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_RequestPlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_RequestPlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_RequestPlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_playtime_restrictions_ != nullptr);
    current_playtime_restrictions_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&time_expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&time_expires_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_RequestPlaytime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 time_expires = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_expires(&has_bits);
          time_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalPlaytimeDay current_playtime_restrictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_RequestPlaytime_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_RequestPlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_expires = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_expires(), target);
  }

  // optional .ParentalPlaytimeDay current_playtime_restrictions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::current_playtime_restrictions(this), target, stream);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_RequestPlaytime_Request)
  return target;
}

size_t CParental_RequestPlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_RequestPlaytime_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ParentalPlaytimeDay current_playtime_restrictions = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_playtime_restrictions_);
    }

    // optional uint32 time_expires = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_expires());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_RequestPlaytime_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_RequestPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_RequestPlaytime_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_RequestPlaytime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_RequestPlaytime_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_RequestPlaytime_Request)
    MergeFrom(*source);
  }
}

void CParental_RequestPlaytime_Request::MergeFrom(const CParental_RequestPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_RequestPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_playtime_restrictions()->::ParentalPlaytimeDay::MergeFrom(from._internal_current_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000002u) {
      time_expires_ = from.time_expires_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_RequestPlaytime_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_RequestPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_RequestPlaytime_Request::CopyFrom(const CParental_RequestPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_RequestPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_RequestPlaytime_Request::IsInitialized() const {
  return true;
}

void CParental_RequestPlaytime_Request::InternalSwap(CParental_RequestPlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_RequestPlaytime_Request, steamid_)
      + sizeof(CParental_RequestPlaytime_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_RequestPlaytime_Request, current_playtime_restrictions_)>(
          reinterpret_cast<char*>(&current_playtime_restrictions_),
          reinterpret_cast<char*>(&other->current_playtime_restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_RequestPlaytime_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_RequestPlaytime_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_RequestPlaytime_Response>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_RequestPlaytime_Response::CParental_RequestPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_RequestPlaytime_Response)
}
CParental_RequestPlaytime_Response::CParental_RequestPlaytime_Response(const CParental_RequestPlaytime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:CParental_RequestPlaytime_Response)
}

void CParental_RequestPlaytime_Response::SharedCtor() {
requestid_ = PROTOBUF_ULONGLONG(0);
}

CParental_RequestPlaytime_Response::~CParental_RequestPlaytime_Response() {
  // @@protoc_insertion_point(destructor:CParental_RequestPlaytime_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_RequestPlaytime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_RequestPlaytime_Response::ArenaDtor(void* object) {
  CParental_RequestPlaytime_Response* _this = reinterpret_cast< CParental_RequestPlaytime_Response* >(object);
  (void)_this;
}
void CParental_RequestPlaytime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_RequestPlaytime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_RequestPlaytime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_RequestPlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_RequestPlaytime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_RequestPlaytime_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_RequestPlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 requestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_requestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_RequestPlaytime_Response)
  return target;
}

size_t CParental_RequestPlaytime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_RequestPlaytime_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 requestid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_RequestPlaytime_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_RequestPlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_RequestPlaytime_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_RequestPlaytime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_RequestPlaytime_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_RequestPlaytime_Response)
    MergeFrom(*source);
  }
}

void CParental_RequestPlaytime_Response::MergeFrom(const CParental_RequestPlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_RequestPlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_requestid()) {
    _internal_set_requestid(from._internal_requestid());
  }
}

void CParental_RequestPlaytime_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_RequestPlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_RequestPlaytime_Response::CopyFrom(const CParental_RequestPlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_RequestPlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_RequestPlaytime_Response::IsInitialized() const {
  return true;
}

void CParental_RequestPlaytime_Response::InternalSwap(CParental_RequestPlaytime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_RequestPlaytime_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ApprovePlaytime_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ApprovePlaytime_Request>()._has_bits_);
  static void set_has_approve(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ParentalTemporaryPlaytimeRestrictions& restrictions_approved(const CParental_ApprovePlaytime_Request* msg);
  static void set_has_restrictions_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ParentalTemporaryPlaytimeRestrictions&
CParental_ApprovePlaytime_Request::_Internal::restrictions_approved(const CParental_ApprovePlaytime_Request* msg) {
  return *msg->restrictions_approved_;
}
CParental_ApprovePlaytime_Request::CParental_ApprovePlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ApprovePlaytime_Request)
}
CParental_ApprovePlaytime_Request::CParental_ApprovePlaytime_Request(const CParental_ApprovePlaytime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_restrictions_approved()) {
    restrictions_approved_ = new ::ParentalTemporaryPlaytimeRestrictions(*from.restrictions_approved_);
  } else {
    restrictions_approved_ = nullptr;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_ApprovePlaytime_Request)
}

void CParental_ApprovePlaytime_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&restrictions_approved_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&restrictions_approved_)) + sizeof(steamid_));
}

CParental_ApprovePlaytime_Request::~CParental_ApprovePlaytime_Request() {
  // @@protoc_insertion_point(destructor:CParental_ApprovePlaytime_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ApprovePlaytime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete restrictions_approved_;
}

void CParental_ApprovePlaytime_Request::ArenaDtor(void* object) {
  CParental_ApprovePlaytime_Request* _this = reinterpret_cast< CParental_ApprovePlaytime_Request* >(object);
  (void)_this;
}
void CParental_ApprovePlaytime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ApprovePlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ApprovePlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ApprovePlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(restrictions_approved_ != nullptr);
    restrictions_approved_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ApprovePlaytime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool approve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_approve(&has_bits);
          approve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 requestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictions_approved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ApprovePlaytime_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ApprovePlaytime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool approve = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_approve(), target);
  }

  // optional fixed64 requestid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_requestid(), target);
  }

  // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::restrictions_approved(this), target, stream);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ApprovePlaytime_Request)
  return target;
}

size_t CParental_ApprovePlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ApprovePlaytime_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictions_approved_);
    }

    // optional fixed64 requestid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool approve = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ApprovePlaytime_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ApprovePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ApprovePlaytime_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ApprovePlaytime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ApprovePlaytime_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ApprovePlaytime_Request)
    MergeFrom(*source);
  }
}

void CParental_ApprovePlaytime_Request::MergeFrom(const CParental_ApprovePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ApprovePlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_restrictions_approved()->::ParentalTemporaryPlaytimeRestrictions::MergeFrom(from._internal_restrictions_approved());
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      approve_ = from.approve_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_ApprovePlaytime_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ApprovePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ApprovePlaytime_Request::CopyFrom(const CParental_ApprovePlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ApprovePlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ApprovePlaytime_Request::IsInitialized() const {
  return true;
}

void CParental_ApprovePlaytime_Request::InternalSwap(CParental_ApprovePlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_ApprovePlaytime_Request, steamid_)
      + sizeof(CParental_ApprovePlaytime_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_ApprovePlaytime_Request, restrictions_approved_)>(
          reinterpret_cast<char*>(&restrictions_approved_),
          reinterpret_cast<char*>(&other->restrictions_approved_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ApprovePlaytime_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ApprovePlaytime_Response::_Internal {
 public:
};

CParental_ApprovePlaytime_Response::CParental_ApprovePlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ApprovePlaytime_Response)
}
CParental_ApprovePlaytime_Response::CParental_ApprovePlaytime_Response(const CParental_ApprovePlaytime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_ApprovePlaytime_Response)
}

void CParental_ApprovePlaytime_Response::SharedCtor() {
}

CParental_ApprovePlaytime_Response::~CParental_ApprovePlaytime_Response() {
  // @@protoc_insertion_point(destructor:CParental_ApprovePlaytime_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ApprovePlaytime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_ApprovePlaytime_Response::ArenaDtor(void* object) {
  CParental_ApprovePlaytime_Response* _this = reinterpret_cast< CParental_ApprovePlaytime_Response* >(object);
  (void)_this;
}
void CParental_ApprovePlaytime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ApprovePlaytime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ApprovePlaytime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ApprovePlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ApprovePlaytime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ApprovePlaytime_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ApprovePlaytime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ApprovePlaytime_Response)
  return target;
}

size_t CParental_ApprovePlaytime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ApprovePlaytime_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ApprovePlaytime_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ApprovePlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ApprovePlaytime_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ApprovePlaytime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ApprovePlaytime_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ApprovePlaytime_Response)
    MergeFrom(*source);
  }
}

void CParental_ApprovePlaytime_Response::MergeFrom(const CParental_ApprovePlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ApprovePlaytime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_ApprovePlaytime_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ApprovePlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ApprovePlaytime_Response::CopyFrom(const CParental_ApprovePlaytime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ApprovePlaytime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ApprovePlaytime_Response::IsInitialized() const {
  return true;
}

void CParental_ApprovePlaytime_Response::InternalSwap(CParental_ApprovePlaytime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ApprovePlaytime_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_GetRequests_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_GetRequests_Request>()._has_bits_);
  static void set_has_rt_include_completed_since(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_GetRequests_Request::CParental_GetRequests_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_GetRequests_Request)
}
CParental_GetRequests_Request::CParental_GetRequests_Request(const CParental_GetRequests_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rt_include_completed_since_, &from.rt_include_completed_since_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&rt_include_completed_since_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_GetRequests_Request)
}

void CParental_GetRequests_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rt_include_completed_since_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&rt_include_completed_since_)) + sizeof(steamid_));
}

CParental_GetRequests_Request::~CParental_GetRequests_Request() {
  // @@protoc_insertion_point(destructor:CParental_GetRequests_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_GetRequests_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_GetRequests_Request::ArenaDtor(void* object) {
  CParental_GetRequests_Request* _this = reinterpret_cast< CParental_GetRequests_Request* >(object);
  (void)_this;
}
void CParental_GetRequests_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_GetRequests_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_GetRequests_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_GetRequests_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&rt_include_completed_since_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&rt_include_completed_since_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_GetRequests_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rt_include_completed_since = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rt_include_completed_since(&has_bits);
          rt_include_completed_since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_GetRequests_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_GetRequests_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rt_include_completed_since = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rt_include_completed_since(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_GetRequests_Request)
  return target;
}

size_t CParental_GetRequests_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_GetRequests_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 rt_include_completed_since = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_include_completed_since());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_GetRequests_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_GetRequests_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_GetRequests_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_GetRequests_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_GetRequests_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_GetRequests_Request)
    MergeFrom(*source);
  }
}

void CParental_GetRequests_Request::MergeFrom(const CParental_GetRequests_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_GetRequests_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rt_include_completed_since_ = from.rt_include_completed_since_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_GetRequests_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_GetRequests_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_GetRequests_Request::CopyFrom(const CParental_GetRequests_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_GetRequests_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_GetRequests_Request::IsInitialized() const {
  return true;
}

void CParental_GetRequests_Request::InternalSwap(CParental_GetRequests_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_GetRequests_Request, steamid_)
      + sizeof(CParental_GetRequests_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_GetRequests_Request, rt_include_completed_since_)>(
          reinterpret_cast<char*>(&rt_include_completed_since_),
          reinterpret_cast<char*>(&other->rt_include_completed_since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_GetRequests_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalFeatureRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalFeatureRequest>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_family_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid_responder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_responded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ParentalFeatureRequest::ParentalFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalFeatureRequest)
}
ParentalFeatureRequest::ParentalFeatureRequest(const ParentalFeatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
  // @@protoc_insertion_point(copy_constructor:ParentalFeatureRequest)
}

void ParentalFeatureRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
}

ParentalFeatureRequest::~ParentalFeatureRequest() {
  // @@protoc_insertion_point(destructor:ParentalFeatureRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalFeatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalFeatureRequest::ArenaDtor(void* object) {
  ParentalFeatureRequest* _this = reinterpret_cast< ParentalFeatureRequest* >(object);
  (void)_this;
}
void ParentalFeatureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalFeatureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalFeatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalFeatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_responded_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalFeatureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 family_groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_family_groupid(&has_bits);
          family_groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_features(&has_bits);
          features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_requested = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_requested(&has_bits);
          time_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool approved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_approved(&has_bits);
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_responder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_steamid_responder(&has_bits);
          steamid_responder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_responded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_responded(&has_bits);
          time_responded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalFeatureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalFeatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 requestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_requestid(), target);
  }

  // optional fixed64 family_groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_family_groupid(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  // optional uint32 features = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_features(), target);
  }

  // optional uint32 time_requested = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_requested(), target);
  }

  // optional bool approved = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_approved(), target);
  }

  // optional fixed64 steamid_responder = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steamid_responder(), target);
  }

  // optional uint32 time_responded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_time_responded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalFeatureRequest)
  return target;
}

size_t ParentalFeatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalFeatureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 requestid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 family_groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 features = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_features());
    }

    // optional uint32 time_requested = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_requested());
    }

    // optional fixed64 steamid_responder = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool approved = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_responded = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_responded());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalFeatureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalFeatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalFeatureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalFeatureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalFeatureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalFeatureRequest)
    MergeFrom(*source);
  }
}

void ParentalFeatureRequest::MergeFrom(const ParentalFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalFeatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      family_groupid_ = from.family_groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      features_ = from.features_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_requested_ = from.time_requested_;
    }
    if (cached_has_bits & 0x00000020u) {
      steamid_responder_ = from.steamid_responder_;
    }
    if (cached_has_bits & 0x00000040u) {
      approved_ = from.approved_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_responded_ = from.time_responded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalFeatureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalFeatureRequest::CopyFrom(const ParentalFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalFeatureRequest::IsInitialized() const {
  return true;
}

void ParentalFeatureRequest::InternalSwap(ParentalFeatureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalFeatureRequest, time_responded_)
      + sizeof(ParentalFeatureRequest::time_responded_)
      - PROTOBUF_FIELD_OFFSET(ParentalFeatureRequest, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalFeatureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalPlaytimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalPlaytimeRequest>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_family_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ParentalPlaytimeDay& current_playtime_restrictions(const ParentalPlaytimeRequest* msg);
  static void set_has_current_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steamid_responder(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_responded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ParentalTemporaryPlaytimeRestrictions& restrictions_approved(const ParentalPlaytimeRequest* msg);
  static void set_has_restrictions_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ParentalPlaytimeDay&
ParentalPlaytimeRequest::_Internal::current_playtime_restrictions(const ParentalPlaytimeRequest* msg) {
  return *msg->current_playtime_restrictions_;
}
const ::ParentalTemporaryPlaytimeRestrictions&
ParentalPlaytimeRequest::_Internal::restrictions_approved(const ParentalPlaytimeRequest* msg) {
  return *msg->restrictions_approved_;
}
ParentalPlaytimeRequest::ParentalPlaytimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalPlaytimeRequest)
}
ParentalPlaytimeRequest::ParentalPlaytimeRequest(const ParentalPlaytimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_playtime_restrictions()) {
    current_playtime_restrictions_ = new ::ParentalPlaytimeDay(*from.current_playtime_restrictions_);
  } else {
    current_playtime_restrictions_ = nullptr;
  }
  if (from._internal_has_restrictions_approved()) {
    restrictions_approved_ = new ::ParentalTemporaryPlaytimeRestrictions(*from.restrictions_approved_);
  } else {
    restrictions_approved_ = nullptr;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
  // @@protoc_insertion_point(copy_constructor:ParentalPlaytimeRequest)
}

void ParentalPlaytimeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_playtime_restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&current_playtime_restrictions_)) + sizeof(time_responded_));
}

ParentalPlaytimeRequest::~ParentalPlaytimeRequest() {
  // @@protoc_insertion_point(destructor:ParentalPlaytimeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalPlaytimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_playtime_restrictions_;
  if (this != internal_default_instance()) delete restrictions_approved_;
}

void ParentalPlaytimeRequest::ArenaDtor(void* object) {
  ParentalPlaytimeRequest* _this = reinterpret_cast< ParentalPlaytimeRequest* >(object);
  (void)_this;
}
void ParentalPlaytimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalPlaytimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalPlaytimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalPlaytimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_playtime_restrictions_ != nullptr);
      current_playtime_restrictions_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(restrictions_approved_ != nullptr);
      restrictions_approved_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_responder_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_responder_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&approved_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_responded_) -
        reinterpret_cast<char*>(&approved_)) + sizeof(time_responded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalPlaytimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 family_groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_family_groupid(&has_bits);
          family_groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_expires = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_expires(&has_bits);
          time_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_requested = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_requested(&has_bits);
          time_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool approved = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_approved(&has_bits);
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_responder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steamid_responder(&has_bits);
          steamid_responder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_responded = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_time_responded(&has_bits);
          time_responded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictions_approved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalPlaytimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalPlaytimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 requestid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_requestid(), target);
  }

  // optional fixed64 family_groupid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_family_groupid(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::current_playtime_restrictions(this), target, stream);
  }

  // optional uint32 time_expires = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_expires(), target);
  }

  // optional uint32 time_requested = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_requested(), target);
  }

  // optional bool approved = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_approved(), target);
  }

  // optional fixed64 steamid_responder = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_steamid_responder(), target);
  }

  // optional uint32 time_responded = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_time_responded(), target);
  }

  // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::restrictions_approved(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalPlaytimeRequest)
  return target;
}

size_t ParentalPlaytimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalPlaytimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_playtime_restrictions_);
    }

    // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictions_approved_);
    }

    // optional fixed64 requestid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 family_groupid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_expires = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_expires());
    }

    // optional uint32 time_requested = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_requested());
    }

    // optional fixed64 steamid_responder = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool approved = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_responded = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_responded());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalPlaytimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalPlaytimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalPlaytimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalPlaytimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalPlaytimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalPlaytimeRequest)
    MergeFrom(*source);
  }
}

void ParentalPlaytimeRequest::MergeFrom(const ParentalPlaytimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalPlaytimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_playtime_restrictions()->::ParentalPlaytimeDay::MergeFrom(from._internal_current_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_restrictions_approved()->::ParentalTemporaryPlaytimeRestrictions::MergeFrom(from._internal_restrictions_approved());
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      family_groupid_ = from.family_groupid_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_expires_ = from.time_expires_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_requested_ = from.time_requested_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamid_responder_ = from.steamid_responder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      approved_ = from.approved_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_responded_ = from.time_responded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalPlaytimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalPlaytimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalPlaytimeRequest::CopyFrom(const ParentalPlaytimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalPlaytimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalPlaytimeRequest::IsInitialized() const {
  return true;
}

void ParentalPlaytimeRequest::InternalSwap(ParentalPlaytimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalPlaytimeRequest, time_responded_)
      + sizeof(ParentalPlaytimeRequest::time_responded_)
      - PROTOBUF_FIELD_OFFSET(ParentalPlaytimeRequest, current_playtime_restrictions_)>(
          reinterpret_cast<char*>(&current_playtime_restrictions_),
          reinterpret_cast<char*>(&other->current_playtime_restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalPlaytimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_GetRequests_Response::_Internal {
 public:
};

CParental_GetRequests_Response::CParental_GetRequests_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_requests_(arena),
  playtime_requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_GetRequests_Response)
}
CParental_GetRequests_Response::CParental_GetRequests_Response(const CParental_GetRequests_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_requests_(from.feature_requests_),
      playtime_requests_(from.playtime_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_GetRequests_Response)
}

void CParental_GetRequests_Response::SharedCtor() {
}

CParental_GetRequests_Response::~CParental_GetRequests_Response() {
  // @@protoc_insertion_point(destructor:CParental_GetRequests_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_GetRequests_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_GetRequests_Response::ArenaDtor(void* object) {
  CParental_GetRequests_Response* _this = reinterpret_cast< CParental_GetRequests_Response* >(object);
  (void)_this;
}
void CParental_GetRequests_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_GetRequests_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_GetRequests_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_GetRequests_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_requests_.Clear();
  playtime_requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_GetRequests_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ParentalFeatureRequest feature_requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ParentalPlaytimeRequest playtime_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playtime_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_GetRequests_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_GetRequests_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ParentalFeatureRequest feature_requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_feature_requests(i), target, stream);
  }

  // repeated .ParentalPlaytimeRequest playtime_requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playtime_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playtime_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_GetRequests_Response)
  return target;
}

size_t CParental_GetRequests_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_GetRequests_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParentalFeatureRequest feature_requests = 1;
  total_size += 1UL * this->_internal_feature_requests_size();
  for (const auto& msg : this->feature_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ParentalPlaytimeRequest playtime_requests = 2;
  total_size += 1UL * this->_internal_playtime_requests_size();
  for (const auto& msg : this->playtime_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_GetRequests_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_GetRequests_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_GetRequests_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_GetRequests_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_GetRequests_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_GetRequests_Response)
    MergeFrom(*source);
  }
}

void CParental_GetRequests_Response::MergeFrom(const CParental_GetRequests_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_GetRequests_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_requests_.MergeFrom(from.feature_requests_);
  playtime_requests_.MergeFrom(from.playtime_requests_);
}

void CParental_GetRequests_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_GetRequests_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_GetRequests_Response::CopyFrom(const CParental_GetRequests_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_GetRequests_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_GetRequests_Response::IsInitialized() const {
  return true;
}

void CParental_GetRequests_Response::InternalSwap(CParental_GetRequests_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_requests_.InternalSwap(&other->feature_requests_);
  playtime_requests_.InternalSwap(&other->playtime_requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_GetRequests_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ReportPlaytimeAndNotify_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ReportPlaytimeAndNotify_Request>()._has_bits_);
  static void set_has_day_of_week(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CParental_ReportPlaytimeAndNotify_Request::CParental_ReportPlaytimeAndNotify_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ReportPlaytimeAndNotify_Request)
}
CParental_ReportPlaytimeAndNotify_Request::CParental_ReportPlaytimeAndNotify_Request(const CParental_ReportPlaytimeAndNotify_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&day_of_week_, &from.day_of_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CParental_ReportPlaytimeAndNotify_Request)
}

void CParental_ReportPlaytimeAndNotify_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&day_of_week_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(steamid_));
}

CParental_ReportPlaytimeAndNotify_Request::~CParental_ReportPlaytimeAndNotify_Request() {
  // @@protoc_insertion_point(destructor:CParental_ReportPlaytimeAndNotify_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ReportPlaytimeAndNotify_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_ReportPlaytimeAndNotify_Request::ArenaDtor(void* object) {
  CParental_ReportPlaytimeAndNotify_Request* _this = reinterpret_cast< CParental_ReportPlaytimeAndNotify_Request* >(object);
  (void)_this;
}
void CParental_ReportPlaytimeAndNotify_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ReportPlaytimeAndNotify_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ReportPlaytimeAndNotify_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ReportPlaytimeAndNotify_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&day_of_week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&day_of_week_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ReportPlaytimeAndNotify_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 day_of_week = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_day_of_week(&has_bits);
          day_of_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minutes_used(&has_bits);
          minutes_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ReportPlaytimeAndNotify_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ReportPlaytimeAndNotify_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 day_of_week = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_day_of_week(), target);
  }

  // optional uint32 minutes_used = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_used(), target);
  }

  // optional fixed64 steamid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ReportPlaytimeAndNotify_Request)
  return target;
}

size_t CParental_ReportPlaytimeAndNotify_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ReportPlaytimeAndNotify_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 day_of_week = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_day_of_week());
    }

    // optional uint32 minutes_used = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_used());
    }

    // optional fixed64 steamid = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ReportPlaytimeAndNotify_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ReportPlaytimeAndNotify_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ReportPlaytimeAndNotify_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ReportPlaytimeAndNotify_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ReportPlaytimeAndNotify_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ReportPlaytimeAndNotify_Request)
    MergeFrom(*source);
  }
}

void CParental_ReportPlaytimeAndNotify_Request::MergeFrom(const CParental_ReportPlaytimeAndNotify_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ReportPlaytimeAndNotify_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      day_of_week_ = from.day_of_week_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_used_ = from.minutes_used_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_ReportPlaytimeAndNotify_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ReportPlaytimeAndNotify_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ReportPlaytimeAndNotify_Request::CopyFrom(const CParental_ReportPlaytimeAndNotify_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ReportPlaytimeAndNotify_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ReportPlaytimeAndNotify_Request::IsInitialized() const {
  return true;
}

void CParental_ReportPlaytimeAndNotify_Request::InternalSwap(CParental_ReportPlaytimeAndNotify_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_ReportPlaytimeAndNotify_Request, steamid_)
      + sizeof(CParental_ReportPlaytimeAndNotify_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CParental_ReportPlaytimeAndNotify_Request, day_of_week_)>(
          reinterpret_cast<char*>(&day_of_week_),
          reinterpret_cast<char*>(&other->day_of_week_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ReportPlaytimeAndNotify_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ReportPlaytimeAndNotify_Response::_Internal {
 public:
};

CParental_ReportPlaytimeAndNotify_Response::CParental_ReportPlaytimeAndNotify_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ReportPlaytimeAndNotify_Response)
}
CParental_ReportPlaytimeAndNotify_Response::CParental_ReportPlaytimeAndNotify_Response(const CParental_ReportPlaytimeAndNotify_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CParental_ReportPlaytimeAndNotify_Response)
}

void CParental_ReportPlaytimeAndNotify_Response::SharedCtor() {
}

CParental_ReportPlaytimeAndNotify_Response::~CParental_ReportPlaytimeAndNotify_Response() {
  // @@protoc_insertion_point(destructor:CParental_ReportPlaytimeAndNotify_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ReportPlaytimeAndNotify_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_ReportPlaytimeAndNotify_Response::ArenaDtor(void* object) {
  CParental_ReportPlaytimeAndNotify_Response* _this = reinterpret_cast< CParental_ReportPlaytimeAndNotify_Response* >(object);
  (void)_this;
}
void CParental_ReportPlaytimeAndNotify_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ReportPlaytimeAndNotify_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ReportPlaytimeAndNotify_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ReportPlaytimeAndNotify_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ReportPlaytimeAndNotify_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ReportPlaytimeAndNotify_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ReportPlaytimeAndNotify_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ReportPlaytimeAndNotify_Response)
  return target;
}

size_t CParental_ReportPlaytimeAndNotify_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ReportPlaytimeAndNotify_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ReportPlaytimeAndNotify_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ReportPlaytimeAndNotify_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ReportPlaytimeAndNotify_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ReportPlaytimeAndNotify_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ReportPlaytimeAndNotify_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ReportPlaytimeAndNotify_Response)
    MergeFrom(*source);
  }
}

void CParental_ReportPlaytimeAndNotify_Response::MergeFrom(const CParental_ReportPlaytimeAndNotify_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ReportPlaytimeAndNotify_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CParental_ReportPlaytimeAndNotify_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ReportPlaytimeAndNotify_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ReportPlaytimeAndNotify_Response::CopyFrom(const CParental_ReportPlaytimeAndNotify_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ReportPlaytimeAndNotify_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ReportPlaytimeAndNotify_Response::IsInitialized() const {
  return true;
}

void CParental_ReportPlaytimeAndNotify_Response::InternalSwap(CParental_ReportPlaytimeAndNotify_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ReportPlaytimeAndNotify_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ParentalSettingsChange_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ParentalSettingsChange_Notification>()._has_bits_);
  static void set_has_serialized_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CParental_ParentalSettingsChange_Notification::CParental_ParentalSettingsChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ParentalSettingsChange_Notification)
}
CParental_ParentalSettingsChange_Notification::CParental_ParentalSettingsChange_Notification(const CParental_ParentalSettingsChange_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_settings()) {
    serialized_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_settings(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sessionid()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_ParentalSettingsChange_Notification)
}

void CParental_ParentalSettingsChange_Notification::SharedCtor() {
serialized_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_ParentalSettingsChange_Notification::~CParental_ParentalSettingsChange_Notification() {
  // @@protoc_insertion_point(destructor:CParental_ParentalSettingsChange_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ParentalSettingsChange_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_ParentalSettingsChange_Notification::ArenaDtor(void* object) {
  CParental_ParentalSettingsChange_Notification* _this = reinterpret_cast< CParental_ParentalSettingsChange_Notification* >(object);
  (void)_this;
}
void CParental_ParentalSettingsChange_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ParentalSettingsChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ParentalSettingsChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ParentalSettingsChange_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      serialized_settings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sessionid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ParentalSettingsChange_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serialized_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ParentalSettingsChange_Notification.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sessionid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ParentalSettingsChange_Notification.sessionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ParentalSettingsChange_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ParentalSettingsChange_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_settings(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ParentalSettingsChange_Notification.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional string sessionid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ParentalSettingsChange_Notification.sessionid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ParentalSettingsChange_Notification)
  return target;
}

size_t CParental_ParentalSettingsChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ParentalSettingsChange_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes serialized_settings = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_settings());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string sessionid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sessionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ParentalSettingsChange_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ParentalSettingsChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ParentalSettingsChange_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ParentalSettingsChange_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ParentalSettingsChange_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ParentalSettingsChange_Notification)
    MergeFrom(*source);
  }
}

void CParental_ParentalSettingsChange_Notification::MergeFrom(const CParental_ParentalSettingsChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ParentalSettingsChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_settings(from._internal_serialized_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_sessionid(from._internal_sessionid());
    }
  }
}

void CParental_ParentalSettingsChange_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ParentalSettingsChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ParentalSettingsChange_Notification::CopyFrom(const CParental_ParentalSettingsChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ParentalSettingsChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ParentalSettingsChange_Notification::IsInitialized() const {
  return true;
}

void CParental_ParentalSettingsChange_Notification::InternalSwap(CParental_ParentalSettingsChange_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_settings_.Swap(&other->serialized_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ParentalSettingsChange_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ParentalUnlocNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ParentalUnlocNotification>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_ParentalUnlocNotification::CParental_ParentalUnlocNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ParentalUnlocNotification)
}
CParental_ParentalUnlocNotification::CParental_ParentalUnlocNotification(const CParental_ParentalUnlocNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sessionid()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_ParentalUnlocNotification)
}

void CParental_ParentalUnlocNotification::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_ParentalUnlocNotification::~CParental_ParentalUnlocNotification() {
  // @@protoc_insertion_point(destructor:CParental_ParentalUnlocNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ParentalUnlocNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_ParentalUnlocNotification::ArenaDtor(void* object) {
  CParental_ParentalUnlocNotification* _this = reinterpret_cast< CParental_ParentalUnlocNotification* >(object);
  (void)_this;
}
void CParental_ParentalUnlocNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ParentalUnlocNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ParentalUnlocNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ParentalUnlocNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ParentalUnlocNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ParentalUnlocNotification.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sessionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ParentalUnlocNotification.sessionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ParentalUnlocNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ParentalUnlocNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ParentalUnlocNotification.password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_password(), target);
  }

  // optional string sessionid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ParentalUnlocNotification.sessionid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ParentalUnlocNotification)
  return target;
}

size_t CParental_ParentalUnlocNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ParentalUnlocNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string sessionid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sessionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ParentalUnlocNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ParentalUnlocNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ParentalUnlocNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ParentalUnlocNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ParentalUnlocNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ParentalUnlocNotification)
    MergeFrom(*source);
  }
}

void CParental_ParentalUnlocNotification::MergeFrom(const CParental_ParentalUnlocNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ParentalUnlocNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sessionid(from._internal_sessionid());
    }
  }
}

void CParental_ParentalUnlocNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ParentalUnlocNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ParentalUnlocNotification::CopyFrom(const CParental_ParentalUnlocNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ParentalUnlocNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ParentalUnlocNotification::IsInitialized() const {
  return true;
}

void CParental_ParentalUnlocNotification::InternalSwap(CParental_ParentalUnlocNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ParentalUnlocNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_ParentalLocNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_ParentalLocNotification>()._has_bits_);
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParental_ParentalLocNotification::CParental_ParentalLocNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_ParentalLocNotification)
}
CParental_ParentalLocNotification::CParental_ParentalLocNotification(const CParental_ParentalLocNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sessionid()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CParental_ParentalLocNotification)
}

void CParental_ParentalLocNotification::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CParental_ParentalLocNotification::~CParental_ParentalLocNotification() {
  // @@protoc_insertion_point(destructor:CParental_ParentalLocNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_ParentalLocNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParental_ParentalLocNotification::ArenaDtor(void* object) {
  CParental_ParentalLocNotification* _this = reinterpret_cast< CParental_ParentalLocNotification* >(object);
  (void)_this;
}
void CParental_ParentalLocNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_ParentalLocNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_ParentalLocNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_ParentalLocNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sessionid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_ParentalLocNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sessionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParental_ParentalLocNotification.sessionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_ParentalLocNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_ParentalLocNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sessionid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParental_ParentalLocNotification.sessionid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_ParentalLocNotification)
  return target;
}

size_t CParental_ParentalLocNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_ParentalLocNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sessionid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_ParentalLocNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_ParentalLocNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_ParentalLocNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_ParentalLocNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_ParentalLocNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_ParentalLocNotification)
    MergeFrom(*source);
  }
}

void CParental_ParentalLocNotification::MergeFrom(const CParental_ParentalLocNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_ParentalLocNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sessionid()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
}

void CParental_ParentalLocNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_ParentalLocNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_ParentalLocNotification::CopyFrom(const CParental_ParentalLocNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_ParentalLocNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_ParentalLocNotification::IsInitialized() const {
  return true;
}

void CParental_ParentalLocNotification::InternalSwap(CParental_ParentalLocNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_ParentalLocNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParental_PlaytimeUsed_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CParental_PlaytimeUsed_Notification>()._has_bits_);
  static void set_has_day_of_week(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParental_PlaytimeUsed_Notification::CParental_PlaytimeUsed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParental_PlaytimeUsed_Notification)
}
CParental_PlaytimeUsed_Notification::CParental_PlaytimeUsed_Notification(const CParental_PlaytimeUsed_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&day_of_week_, &from.day_of_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_used_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(minutes_used_));
  // @@protoc_insertion_point(copy_constructor:CParental_PlaytimeUsed_Notification)
}

void CParental_PlaytimeUsed_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&day_of_week_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minutes_used_) -
    reinterpret_cast<char*>(&day_of_week_)) + sizeof(minutes_used_));
}

CParental_PlaytimeUsed_Notification::~CParental_PlaytimeUsed_Notification() {
  // @@protoc_insertion_point(destructor:CParental_PlaytimeUsed_Notification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParental_PlaytimeUsed_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParental_PlaytimeUsed_Notification::ArenaDtor(void* object) {
  CParental_PlaytimeUsed_Notification* _this = reinterpret_cast< CParental_PlaytimeUsed_Notification* >(object);
  (void)_this;
}
void CParental_PlaytimeUsed_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParental_PlaytimeUsed_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParental_PlaytimeUsed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CParental_PlaytimeUsed_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&day_of_week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minutes_used_) -
        reinterpret_cast<char*>(&day_of_week_)) + sizeof(minutes_used_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParental_PlaytimeUsed_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 day_of_week = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_day_of_week(&has_bits);
          day_of_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minutes_used(&has_bits);
          minutes_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParental_PlaytimeUsed_Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParental_PlaytimeUsed_Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 day_of_week = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_day_of_week(), target);
  }

  // optional uint32 minutes_used = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParental_PlaytimeUsed_Notification)
  return target;
}

size_t CParental_PlaytimeUsed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParental_PlaytimeUsed_Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 day_of_week = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_day_of_week());
    }

    // optional uint32 minutes_used = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_used());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParental_PlaytimeUsed_Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParental_PlaytimeUsed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CParental_PlaytimeUsed_Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParental_PlaytimeUsed_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParental_PlaytimeUsed_Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParental_PlaytimeUsed_Notification)
    MergeFrom(*source);
  }
}

void CParental_PlaytimeUsed_Notification::MergeFrom(const CParental_PlaytimeUsed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParental_PlaytimeUsed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      day_of_week_ = from.day_of_week_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_used_ = from.minutes_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParental_PlaytimeUsed_Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParental_PlaytimeUsed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParental_PlaytimeUsed_Notification::CopyFrom(const CParental_PlaytimeUsed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParental_PlaytimeUsed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParental_PlaytimeUsed_Notification::IsInitialized() const {
  return true;
}

void CParental_PlaytimeUsed_Notification::InternalSwap(CParental_PlaytimeUsed_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParental_PlaytimeUsed_Notification, minutes_used_)
      + sizeof(CParental_PlaytimeUsed_Notification::minutes_used_)
      - PROTOBUF_FIELD_OFFSET(CParental_PlaytimeUsed_Notification, day_of_week_)>(
          reinterpret_cast<char*>(&day_of_week_),
          reinterpret_cast<char*>(&other->day_of_week_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParental_PlaytimeUsed_Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Parental::~Parental() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Parental::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fparental_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fparental_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Parental::GetDescriptor() {
  return descriptor();
}

void Parental::EnableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_EnableParentalSettings_Request*,
                         ::CParental_EnableParentalSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnableParentalSettings() not implemented.");
  done->Run();
}

void Parental::DisableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_DisableParentalSettings_Request*,
                         ::CParental_DisableParentalSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DisableParentalSettings() not implemented.");
  done->Run();
}

void Parental::GetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_GetParentalSettings_Request*,
                         ::CParental_GetParentalSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetParentalSettings() not implemented.");
  done->Run();
}

void Parental::GetSignedParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_GetSignedParentalSettings_Request*,
                         ::CParental_GetSignedParentalSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSignedParentalSettings() not implemented.");
  done->Run();
}

void Parental::SetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_SetParentalSettings_Request*,
                         ::CParental_SetParentalSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetParentalSettings() not implemented.");
  done->Run();
}

void Parental::ValidateToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ValidateToken_Request*,
                         ::CParental_ValidateToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidateToken() not implemented.");
  done->Run();
}

void Parental::ValidatePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ValidatePassword_Request*,
                         ::CParental_ValidatePassword_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidatePassword() not implemented.");
  done->Run();
}

void Parental::LockClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_LockClient_Request*,
                         ::CParental_LockClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LockClient() not implemented.");
  done->Run();
}

void Parental::RequestRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_RequestRecoveryCode_Request*,
                         ::CParental_RequestRecoveryCode_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestRecoveryCode() not implemented.");
  done->Run();
}

void Parental::DisableWithRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_DisableWithRecoveryCode_Request*,
                         ::CParental_DisableWithRecoveryCode_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DisableWithRecoveryCode() not implemented.");
  done->Run();
}

void Parental::RequestFeatureAccess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_RequestFeatureAccess_Request*,
                         ::CParental_RequestFeatureAccess_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestFeatureAccess() not implemented.");
  done->Run();
}

void Parental::ApproveFeatureAccess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ApproveFeatureAccess_Request*,
                         ::CParental_ApproveFeatureAccess_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ApproveFeatureAccess() not implemented.");
  done->Run();
}

void Parental::RequestPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_RequestPlaytime_Request*,
                         ::CParental_RequestPlaytime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestPlaytime() not implemented.");
  done->Run();
}

void Parental::ApprovePlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ApprovePlaytime_Request*,
                         ::CParental_ApprovePlaytime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ApprovePlaytime() not implemented.");
  done->Run();
}

void Parental::GetRequests(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_GetRequests_Request*,
                         ::CParental_GetRequests_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRequests() not implemented.");
  done->Run();
}

void Parental::ReportPlaytimeAndNotify(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ReportPlaytimeAndNotify_Request*,
                         ::CParental_ReportPlaytimeAndNotify_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReportPlaytimeAndNotify() not implemented.");
  done->Run();
}

void Parental::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fparental_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      EnableParentalSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_EnableParentalSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_EnableParentalSettings_Response*>(
                 response),
             done);
      break;
    case 1:
      DisableParentalSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_DisableParentalSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_DisableParentalSettings_Response*>(
                 response),
             done);
      break;
    case 2:
      GetParentalSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_GetParentalSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_GetParentalSettings_Response*>(
                 response),
             done);
      break;
    case 3:
      GetSignedParentalSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_GetSignedParentalSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_GetSignedParentalSettings_Response*>(
                 response),
             done);
      break;
    case 4:
      SetParentalSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_SetParentalSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_SetParentalSettings_Response*>(
                 response),
             done);
      break;
    case 5:
      ValidateToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ValidateToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_ValidateToken_Response*>(
                 response),
             done);
      break;
    case 6:
      ValidatePassword(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ValidatePassword_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_ValidatePassword_Response*>(
                 response),
             done);
      break;
    case 7:
      LockClient(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_LockClient_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_LockClient_Response*>(
                 response),
             done);
      break;
    case 8:
      RequestRecoveryCode(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_RequestRecoveryCode_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_RequestRecoveryCode_Response*>(
                 response),
             done);
      break;
    case 9:
      DisableWithRecoveryCode(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_DisableWithRecoveryCode_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_DisableWithRecoveryCode_Response*>(
                 response),
             done);
      break;
    case 10:
      RequestFeatureAccess(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_RequestFeatureAccess_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_RequestFeatureAccess_Response*>(
                 response),
             done);
      break;
    case 11:
      ApproveFeatureAccess(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ApproveFeatureAccess_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_ApproveFeatureAccess_Response*>(
                 response),
             done);
      break;
    case 12:
      RequestPlaytime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_RequestPlaytime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_RequestPlaytime_Response*>(
                 response),
             done);
      break;
    case 13:
      ApprovePlaytime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ApprovePlaytime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_ApprovePlaytime_Response*>(
                 response),
             done);
      break;
    case 14:
      GetRequests(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_GetRequests_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_GetRequests_Response*>(
                 response),
             done);
      break;
    case 15:
      ReportPlaytimeAndNotify(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ReportPlaytimeAndNotify_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParental_ReportPlaytimeAndNotify_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Parental::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CParental_EnableParentalSettings_Request::default_instance();
    case 1:
      return ::CParental_DisableParentalSettings_Request::default_instance();
    case 2:
      return ::CParental_GetParentalSettings_Request::default_instance();
    case 3:
      return ::CParental_GetSignedParentalSettings_Request::default_instance();
    case 4:
      return ::CParental_SetParentalSettings_Request::default_instance();
    case 5:
      return ::CParental_ValidateToken_Request::default_instance();
    case 6:
      return ::CParental_ValidatePassword_Request::default_instance();
    case 7:
      return ::CParental_LockClient_Request::default_instance();
    case 8:
      return ::CParental_RequestRecoveryCode_Request::default_instance();
    case 9:
      return ::CParental_DisableWithRecoveryCode_Request::default_instance();
    case 10:
      return ::CParental_RequestFeatureAccess_Request::default_instance();
    case 11:
      return ::CParental_ApproveFeatureAccess_Request::default_instance();
    case 12:
      return ::CParental_RequestPlaytime_Request::default_instance();
    case 13:
      return ::CParental_ApprovePlaytime_Request::default_instance();
    case 14:
      return ::CParental_GetRequests_Request::default_instance();
    case 15:
      return ::CParental_ReportPlaytimeAndNotify_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Parental::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CParental_EnableParentalSettings_Response::default_instance();
    case 1:
      return ::CParental_DisableParentalSettings_Response::default_instance();
    case 2:
      return ::CParental_GetParentalSettings_Response::default_instance();
    case 3:
      return ::CParental_GetSignedParentalSettings_Response::default_instance();
    case 4:
      return ::CParental_SetParentalSettings_Response::default_instance();
    case 5:
      return ::CParental_ValidateToken_Response::default_instance();
    case 6:
      return ::CParental_ValidatePassword_Response::default_instance();
    case 7:
      return ::CParental_LockClient_Response::default_instance();
    case 8:
      return ::CParental_RequestRecoveryCode_Response::default_instance();
    case 9:
      return ::CParental_DisableWithRecoveryCode_Response::default_instance();
    case 10:
      return ::CParental_RequestFeatureAccess_Response::default_instance();
    case 11:
      return ::CParental_ApproveFeatureAccess_Response::default_instance();
    case 12:
      return ::CParental_RequestPlaytime_Response::default_instance();
    case 13:
      return ::CParental_ApprovePlaytime_Response::default_instance();
    case 14:
      return ::CParental_GetRequests_Response::default_instance();
    case 15:
      return ::CParental_ReportPlaytimeAndNotify_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Parental_Stub::Parental_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Parental_Stub::Parental_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Parental_Stub::~Parental_Stub() {
  if (owns_channel_) delete channel_;
}

void Parental_Stub::EnableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_EnableParentalSettings_Request* request,
                              ::CParental_EnableParentalSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Parental_Stub::DisableParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_DisableParentalSettings_Request* request,
                              ::CParental_DisableParentalSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Parental_Stub::GetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_GetParentalSettings_Request* request,
                              ::CParental_GetParentalSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Parental_Stub::GetSignedParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_GetSignedParentalSettings_Request* request,
                              ::CParental_GetSignedParentalSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Parental_Stub::SetParentalSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_SetParentalSettings_Request* request,
                              ::CParental_SetParentalSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Parental_Stub::ValidateToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ValidateToken_Request* request,
                              ::CParental_ValidateToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Parental_Stub::ValidatePassword(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ValidatePassword_Request* request,
                              ::CParental_ValidatePassword_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Parental_Stub::LockClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_LockClient_Request* request,
                              ::CParental_LockClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Parental_Stub::RequestRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_RequestRecoveryCode_Request* request,
                              ::CParental_RequestRecoveryCode_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Parental_Stub::DisableWithRecoveryCode(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_DisableWithRecoveryCode_Request* request,
                              ::CParental_DisableWithRecoveryCode_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Parental_Stub::RequestFeatureAccess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_RequestFeatureAccess_Request* request,
                              ::CParental_RequestFeatureAccess_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Parental_Stub::ApproveFeatureAccess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ApproveFeatureAccess_Request* request,
                              ::CParental_ApproveFeatureAccess_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Parental_Stub::RequestPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_RequestPlaytime_Request* request,
                              ::CParental_RequestPlaytime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Parental_Stub::ApprovePlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ApprovePlaytime_Request* request,
                              ::CParental_ApprovePlaytime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Parental_Stub::GetRequests(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_GetRequests_Request* request,
                              ::CParental_GetRequests_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Parental_Stub::ReportPlaytimeAndNotify(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ReportPlaytimeAndNotify_Request* request,
                              ::CParental_ReportPlaytimeAndNotify_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
// ===================================================================

ParentalClient::~ParentalClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ParentalClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fparental_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fparental_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ParentalClient::GetDescriptor() {
  return descriptor();
}

void ParentalClient::NotifySettingsChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ParentalSettingsChange_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySettingsChange() not implemented.");
  done->Run();
}

void ParentalClient::NotifyUnlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ParentalUnlocNotification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUnlock() not implemented.");
  done->Run();
}

void ParentalClient::NotifyLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_ParentalLocNotification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLock() not implemented.");
  done->Run();
}

void ParentalClient::NotifyPlaytimeUsed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParental_PlaytimeUsed_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPlaytimeUsed() not implemented.");
  done->Run();
}

void ParentalClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fparental_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifySettingsChange(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ParentalSettingsChange_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyUnlock(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ParentalUnlocNotification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      NotifyLock(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_ParentalLocNotification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 3:
      NotifyPlaytimeUsed(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParental_PlaytimeUsed_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ParentalClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CParental_ParentalSettingsChange_Notification::default_instance();
    case 1:
      return ::CParental_ParentalUnlocNotification::default_instance();
    case 2:
      return ::CParental_ParentalLocNotification::default_instance();
    case 3:
      return ::CParental_PlaytimeUsed_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ParentalClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ParentalClient_Stub::ParentalClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ParentalClient_Stub::ParentalClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ParentalClient_Stub::~ParentalClient_Stub() {
  if (owns_channel_) delete channel_;
}

void ParentalClient_Stub::NotifySettingsChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ParentalSettingsChange_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ParentalClient_Stub::NotifyUnlock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ParentalUnlocNotification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ParentalClient_Stub::NotifyLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_ParentalLocNotification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ParentalClient_Stub::NotifyPlaytimeUsed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParental_PlaytimeUsed_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ParentalApp* Arena::CreateMaybeMessage< ::ParentalApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalApp >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalPlaytimeDay* Arena::CreateMaybeMessage< ::ParentalPlaytimeDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalPlaytimeDay >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalPlaytimeRestrictions* Arena::CreateMaybeMessage< ::ParentalPlaytimeRestrictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalPlaytimeRestrictions >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalTemporaryPlaytimeRestrictions* Arena::CreateMaybeMessage< ::ParentalTemporaryPlaytimeRestrictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalTemporaryPlaytimeRestrictions >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalSettings* Arena::CreateMaybeMessage< ::ParentalSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_EnableParentalSettings_Request* Arena::CreateMaybeMessage< ::CParental_EnableParentalSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_EnableParentalSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_EnableParentalSettings_Response* Arena::CreateMaybeMessage< ::CParental_EnableParentalSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_EnableParentalSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_DisableParentalSettings_Request* Arena::CreateMaybeMessage< ::CParental_DisableParentalSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_DisableParentalSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_DisableParentalSettings_Response* Arena::CreateMaybeMessage< ::CParental_DisableParentalSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_DisableParentalSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_GetParentalSettings_Request* Arena::CreateMaybeMessage< ::CParental_GetParentalSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_GetParentalSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_GetParentalSettings_Response* Arena::CreateMaybeMessage< ::CParental_GetParentalSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_GetParentalSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_GetSignedParentalSettings_Request* Arena::CreateMaybeMessage< ::CParental_GetSignedParentalSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_GetSignedParentalSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_GetSignedParentalSettings_Response* Arena::CreateMaybeMessage< ::CParental_GetSignedParentalSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_GetSignedParentalSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_SetParentalSettings_Request* Arena::CreateMaybeMessage< ::CParental_SetParentalSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_SetParentalSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_SetParentalSettings_Response* Arena::CreateMaybeMessage< ::CParental_SetParentalSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_SetParentalSettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ValidateToken_Request* Arena::CreateMaybeMessage< ::CParental_ValidateToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ValidateToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ValidateToken_Response* Arena::CreateMaybeMessage< ::CParental_ValidateToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ValidateToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ValidatePassword_Request* Arena::CreateMaybeMessage< ::CParental_ValidatePassword_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ValidatePassword_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ValidatePassword_Response* Arena::CreateMaybeMessage< ::CParental_ValidatePassword_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ValidatePassword_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_LockClient_Request* Arena::CreateMaybeMessage< ::CParental_LockClient_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_LockClient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_LockClient_Response* Arena::CreateMaybeMessage< ::CParental_LockClient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_LockClient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_RequestRecoveryCode_Request* Arena::CreateMaybeMessage< ::CParental_RequestRecoveryCode_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_RequestRecoveryCode_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_RequestRecoveryCode_Response* Arena::CreateMaybeMessage< ::CParental_RequestRecoveryCode_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_RequestRecoveryCode_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_DisableWithRecoveryCode_Request* Arena::CreateMaybeMessage< ::CParental_DisableWithRecoveryCode_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_DisableWithRecoveryCode_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_DisableWithRecoveryCode_Response* Arena::CreateMaybeMessage< ::CParental_DisableWithRecoveryCode_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_DisableWithRecoveryCode_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_RequestFeatureAccess_Request* Arena::CreateMaybeMessage< ::CParental_RequestFeatureAccess_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_RequestFeatureAccess_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_RequestFeatureAccess_Response* Arena::CreateMaybeMessage< ::CParental_RequestFeatureAccess_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_RequestFeatureAccess_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ApproveFeatureAccess_Request* Arena::CreateMaybeMessage< ::CParental_ApproveFeatureAccess_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ApproveFeatureAccess_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ApproveFeatureAccess_Response* Arena::CreateMaybeMessage< ::CParental_ApproveFeatureAccess_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ApproveFeatureAccess_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_RequestPlaytime_Request* Arena::CreateMaybeMessage< ::CParental_RequestPlaytime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_RequestPlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_RequestPlaytime_Response* Arena::CreateMaybeMessage< ::CParental_RequestPlaytime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_RequestPlaytime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ApprovePlaytime_Request* Arena::CreateMaybeMessage< ::CParental_ApprovePlaytime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ApprovePlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ApprovePlaytime_Response* Arena::CreateMaybeMessage< ::CParental_ApprovePlaytime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ApprovePlaytime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_GetRequests_Request* Arena::CreateMaybeMessage< ::CParental_GetRequests_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_GetRequests_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalFeatureRequest* Arena::CreateMaybeMessage< ::ParentalFeatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalFeatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalPlaytimeRequest* Arena::CreateMaybeMessage< ::ParentalPlaytimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalPlaytimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_GetRequests_Response* Arena::CreateMaybeMessage< ::CParental_GetRequests_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_GetRequests_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ReportPlaytimeAndNotify_Request* Arena::CreateMaybeMessage< ::CParental_ReportPlaytimeAndNotify_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ReportPlaytimeAndNotify_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ReportPlaytimeAndNotify_Response* Arena::CreateMaybeMessage< ::CParental_ReportPlaytimeAndNotify_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ReportPlaytimeAndNotify_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ParentalSettingsChange_Notification* Arena::CreateMaybeMessage< ::CParental_ParentalSettingsChange_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ParentalSettingsChange_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ParentalUnlocNotification* Arena::CreateMaybeMessage< ::CParental_ParentalUnlocNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ParentalUnlocNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_ParentalLocNotification* Arena::CreateMaybeMessage< ::CParental_ParentalLocNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_ParentalLocNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CParental_PlaytimeUsed_Notification* Arena::CreateMaybeMessage< ::CParental_PlaytimeUsed_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParental_PlaytimeUsed_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
