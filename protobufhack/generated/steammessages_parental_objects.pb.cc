// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_parental_objects.proto

#include "steammessages_parental_objects.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ParentalApp::ParentalApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , is_allowed_(false){}
struct ParentalAppDefaultTypeInternal {
  constexpr ParentalAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalAppDefaultTypeInternal() {}
  union {
    ParentalApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalAppDefaultTypeInternal _ParentalApp_default_instance_;
constexpr ParentalPlaytimeDay::ParentalPlaytimeDay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allowed_time_windows_(PROTOBUF_ULONGLONG(0))
  , allowed_daily_minutes_(0u){}
struct ParentalPlaytimeDayDefaultTypeInternal {
  constexpr ParentalPlaytimeDayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalPlaytimeDayDefaultTypeInternal() {}
  union {
    ParentalPlaytimeDay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalPlaytimeDayDefaultTypeInternal _ParentalPlaytimeDay_default_instance_;
constexpr ParentalPlaytimeRestrictions::ParentalPlaytimeRestrictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playtime_days_()
  , apply_playtime_restrictions_(false){}
struct ParentalPlaytimeRestrictionsDefaultTypeInternal {
  constexpr ParentalPlaytimeRestrictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalPlaytimeRestrictionsDefaultTypeInternal() {}
  union {
    ParentalPlaytimeRestrictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalPlaytimeRestrictionsDefaultTypeInternal _ParentalPlaytimeRestrictions_default_instance_;
constexpr ParentalTemporaryPlaytimeRestrictions::ParentalTemporaryPlaytimeRestrictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : restrictions_(nullptr)
  , rtime_expires_(0u){}
struct ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal {
  constexpr ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal() {}
  union {
    ParentalTemporaryPlaytimeRestrictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalTemporaryPlaytimeRestrictionsDefaultTypeInternal _ParentalTemporaryPlaytimeRestrictions_default_instance_;
constexpr ParentalSettings::ParentalSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applist_base_()
  , applist_custom_()
  , excluded_store_content_descriptors_()
  , excluded_community_content_descriptors_()
  , utility_appids_()
  , applist_base_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , salt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , passwordhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recovery_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playtime_restrictions_(nullptr)
  , temporary_playtime_restrictions_(nullptr)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , applist_base_id_(0u)
  , passwordhashtype_(0u)
  , enabled_features_(0u)
  , is_enabled_(false)
  , is_site_license_lock_(false)
  , temporary_enabled_features_(0u)
  , rtime_temporary_feature_expiration_(0u){}
struct ParentalSettingsDefaultTypeInternal {
  constexpr ParentalSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalSettingsDefaultTypeInternal() {}
  union {
    ParentalSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalSettingsDefaultTypeInternal _ParentalSettings_default_instance_;
constexpr ParentalFeatureRequest::ParentalFeatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(PROTOBUF_ULONGLONG(0))
  , family_groupid_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , features_(0u)
  , time_requested_(0u)
  , steamid_responder_(PROTOBUF_ULONGLONG(0))
  , approved_(false)
  , time_responded_(0u){}
struct ParentalFeatureRequestDefaultTypeInternal {
  constexpr ParentalFeatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalFeatureRequestDefaultTypeInternal() {}
  union {
    ParentalFeatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalFeatureRequestDefaultTypeInternal _ParentalFeatureRequest_default_instance_;
constexpr ParentalPlaytimeRequest::ParentalPlaytimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_playtime_restrictions_(nullptr)
  , restrictions_approved_(nullptr)
  , requestid_(PROTOBUF_ULONGLONG(0))
  , family_groupid_(PROTOBUF_ULONGLONG(0))
  , steamid_(PROTOBUF_ULONGLONG(0))
  , time_expires_(0u)
  , time_requested_(0u)
  , steamid_responder_(PROTOBUF_ULONGLONG(0))
  , approved_(false)
  , time_responded_(0u){}
struct ParentalPlaytimeRequestDefaultTypeInternal {
  constexpr ParentalPlaytimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentalPlaytimeRequestDefaultTypeInternal() {}
  union {
    ParentalPlaytimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentalPlaytimeRequestDefaultTypeInternal _ParentalPlaytimeRequest_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fparental_5fobjects_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fparental_5fobjects_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fparental_5fobjects_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fparental_5fobjects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ParentalApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalApp, appid_),
  PROTOBUF_FIELD_OFFSET(::ParentalApp, is_allowed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, allowed_time_windows_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeDay, allowed_daily_minutes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, apply_playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRestrictions, playtime_days_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalTemporaryPlaytimeRestrictions, rtime_expires_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, steamid_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_base_id_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_base_description_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_base_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, applist_custom_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, passwordhashtype_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, salt_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, passwordhash_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, enabled_features_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, recovery_email_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, is_site_license_lock_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, temporary_enabled_features_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, rtime_temporary_feature_expiration_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, temporary_playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, excluded_store_content_descriptors_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, excluded_community_content_descriptors_),
  PROTOBUF_FIELD_OFFSET(::ParentalSettings, utility_appids_),
  6,
  7,
  0,
  ~0u,
  ~0u,
  8,
  1,
  2,
  10,
  9,
  3,
  11,
  12,
  13,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, family_groupid_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, steamid_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, features_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, time_requested_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, approved_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, steamid_responder_),
  PROTOBUF_FIELD_OFFSET(::ParentalFeatureRequest, time_responded_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, requestid_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, family_groupid_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, steamid_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, current_playtime_restrictions_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, time_expires_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, time_requested_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, approved_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, steamid_responder_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, time_responded_),
  PROTOBUF_FIELD_OFFSET(::ParentalPlaytimeRequest, restrictions_approved_),
  2,
  3,
  4,
  0,
  5,
  6,
  8,
  7,
  9,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ParentalApp)},
  { 9, 16, sizeof(::ParentalPlaytimeDay)},
  { 18, 25, sizeof(::ParentalPlaytimeRestrictions)},
  { 27, 34, sizeof(::ParentalTemporaryPlaytimeRestrictions)},
  { 36, 60, sizeof(::ParentalSettings)},
  { 79, 92, sizeof(::ParentalFeatureRequest)},
  { 100, 115, sizeof(::ParentalPlaytimeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalPlaytimeDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalPlaytimeRestrictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalTemporaryPlaytimeRestrictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalFeatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ParentalPlaytimeRequest_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fparental_5fobjects_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_parental_objects.proto\032 "
  "google/protobuf/descriptor.proto\032\030steamm"
  "essages_base.proto\032\013enums.proto\"0\n\013Paren"
  "talApp\022\r\n\005appid\030\001 \001(\r\022\022\n\nis_allowed\030\002 \001("
  "\010\"R\n\023ParentalPlaytimeDay\022\034\n\024allowed_time"
  "_windows\030\001 \001(\004\022\035\n\025allowed_daily_minutes\030"
  "\002 \001(\r\"p\n\034ParentalPlaytimeRestrictions\022#\n"
  "\033apply_playtime_restrictions\030\002 \001(\010\022+\n\rpl"
  "aytime_days\030\017 \003(\0132\024.ParentalPlaytimeDay\""
  "j\n%ParentalTemporaryPlaytimeRestrictions"
  "\022*\n\014restrictions\030\001 \001(\0132\024.ParentalPlaytim"
  "eDay\022\025\n\rrtime_expires\030\002 \001(\r\"\235\005\n\020Parental"
  "Settings\022\017\n\007steamid\030\001 \001(\006\022\027\n\017applist_bas"
  "e_id\030\002 \001(\r\022 \n\030applist_base_description\030\003"
  " \001(\t\022\"\n\014applist_base\030\004 \003(\0132\014.ParentalApp"
  "\022$\n\016applist_custom\030\005 \003(\0132\014.ParentalApp\022\030"
  "\n\020passwordhashtype\030\006 \001(\r\022\014\n\004salt\030\007 \001(\014\022\024"
  "\n\014passwordhash\030\010 \001(\014\022\022\n\nis_enabled\030\t \001(\010"
  "\022\030\n\020enabled_features\030\n \001(\r\022\026\n\016recovery_e"
  "mail\030\013 \001(\t\022\034\n\024is_site_license_lock\030\014 \001(\010"
  "\022\"\n\032temporary_enabled_features\030\r \001(\r\022*\n\""
  "rtime_temporary_feature_expiration\030\016 \001(\r"
  "\022<\n\025playtime_restrictions\030\017 \001(\0132\035.Parent"
  "alPlaytimeRestrictions\022O\n\037temporary_play"
  "time_restrictions\030\020 \001(\0132&.ParentalTempor"
  "aryPlaytimeRestrictions\022*\n\"excluded_stor"
  "e_content_descriptors\030\021 \003(\r\022.\n&excluded_"
  "community_content_descriptors\030\022 \003(\r\022\026\n\016u"
  "tility_appids\030\023 \003(\r\"\303\001\n\026ParentalFeatureR"
  "equest\022\021\n\trequestid\030\001 \001(\006\022\026\n\016family_grou"
  "pid\030\002 \001(\006\022\017\n\007steamid\030\003 \001(\006\022\020\n\010features\030\004"
  " \001(\r\022\026\n\016time_requested\030\005 \001(\r\022\020\n\010approved"
  "\030\006 \001(\010\022\031\n\021steamid_responder\030\007 \001(\006\022\026\n\016tim"
  "e_responded\030\010 \001(\r\"\314\002\n\027ParentalPlaytimeRe"
  "quest\022\021\n\trequestid\030\001 \001(\006\022\026\n\016family_group"
  "id\030\002 \001(\006\022\017\n\007steamid\030\003 \001(\006\022;\n\035current_pla"
  "ytime_restrictions\030\004 \001(\0132\024.ParentalPlayt"
  "imeDay\022\024\n\014time_expires\030\005 \001(\r\022\026\n\016time_req"
  "uested\030\006 \001(\r\022\020\n\010approved\030\007 \001(\010\022\031\n\021steami"
  "d_responder\030\010 \001(\006\022\026\n\016time_responded\030\t \001("
  "\r\022E\n\025restrictions_approved\030\n \001(\0132&.Paren"
  "talTemporaryPlaytimeRestrictionsB#H\001\200\001\001\252"
  "\002\027OpenSteamworks.Protobuf\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fparental_5fobjects_2eproto_deps[3] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fparental_5fobjects_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fparental_5fobjects_2eproto = {
  false, false, 1709, descriptor_table_protodef_steammessages_5fparental_5fobjects_2eproto, "steammessages_parental_objects.proto", 
  &descriptor_table_steammessages_5fparental_5fobjects_2eproto_once, descriptor_table_steammessages_5fparental_5fobjects_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_steammessages_5fparental_5fobjects_2eproto::offsets,
  file_level_metadata_steammessages_5fparental_5fobjects_2eproto, file_level_enum_descriptors_steammessages_5fparental_5fobjects_2eproto, file_level_service_descriptors_steammessages_5fparental_5fobjects_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fparental_5fobjects_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fparental_5fobjects_2eproto);
  return descriptor_table_steammessages_5fparental_5fobjects_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fparental_5fobjects_2eproto(&descriptor_table_steammessages_5fparental_5fobjects_2eproto);

// ===================================================================

class ParentalApp::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalApp>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ParentalApp::ParentalApp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalApp)
}
ParentalApp::ParentalApp(const ParentalApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_allowed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_allowed_));
  // @@protoc_insertion_point(copy_constructor:ParentalApp)
}

void ParentalApp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_allowed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_allowed_));
}

ParentalApp::~ParentalApp() {
  // @@protoc_insertion_point(destructor:ParentalApp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalApp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalApp::ArenaDtor(void* object) {
  ParentalApp* _this = reinterpret_cast< ParentalApp* >(object);
  (void)_this;
}
void ParentalApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalApp::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_allowed_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_allowed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_allowed(&has_bits);
          is_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalApp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool is_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalApp)
  return target;
}

size_t ParentalApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalApp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool is_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalApp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalApp)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalApp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalApp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalApp)
    MergeFrom(*source);
  }
}

void ParentalApp::MergeFrom(const ParentalApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_allowed_ = from.is_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalApp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalApp::CopyFrom(const ParentalApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalApp::IsInitialized() const {
  return true;
}

void ParentalApp::InternalSwap(ParentalApp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalApp, is_allowed_)
      + sizeof(ParentalApp::is_allowed_)
      - PROTOBUF_FIELD_OFFSET(ParentalApp, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalApp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalPlaytimeDay::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalPlaytimeDay>()._has_bits_);
  static void set_has_allowed_time_windows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowed_daily_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ParentalPlaytimeDay::ParentalPlaytimeDay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalPlaytimeDay)
}
ParentalPlaytimeDay::ParentalPlaytimeDay(const ParentalPlaytimeDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&allowed_time_windows_, &from.allowed_time_windows_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowed_daily_minutes_) -
    reinterpret_cast<char*>(&allowed_time_windows_)) + sizeof(allowed_daily_minutes_));
  // @@protoc_insertion_point(copy_constructor:ParentalPlaytimeDay)
}

void ParentalPlaytimeDay::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allowed_time_windows_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allowed_daily_minutes_) -
    reinterpret_cast<char*>(&allowed_time_windows_)) + sizeof(allowed_daily_minutes_));
}

ParentalPlaytimeDay::~ParentalPlaytimeDay() {
  // @@protoc_insertion_point(destructor:ParentalPlaytimeDay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalPlaytimeDay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalPlaytimeDay::ArenaDtor(void* object) {
  ParentalPlaytimeDay* _this = reinterpret_cast< ParentalPlaytimeDay* >(object);
  (void)_this;
}
void ParentalPlaytimeDay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalPlaytimeDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalPlaytimeDay::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalPlaytimeDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&allowed_time_windows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowed_daily_minutes_) -
        reinterpret_cast<char*>(&allowed_time_windows_)) + sizeof(allowed_daily_minutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalPlaytimeDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 allowed_time_windows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allowed_time_windows(&has_bits);
          allowed_time_windows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 allowed_daily_minutes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allowed_daily_minutes(&has_bits);
          allowed_daily_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalPlaytimeDay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalPlaytimeDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 allowed_time_windows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_allowed_time_windows(), target);
  }

  // optional uint32 allowed_daily_minutes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allowed_daily_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalPlaytimeDay)
  return target;
}

size_t ParentalPlaytimeDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalPlaytimeDay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 allowed_time_windows = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_allowed_time_windows());
    }

    // optional uint32 allowed_daily_minutes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allowed_daily_minutes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalPlaytimeDay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalPlaytimeDay)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalPlaytimeDay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalPlaytimeDay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalPlaytimeDay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalPlaytimeDay)
    MergeFrom(*source);
  }
}

void ParentalPlaytimeDay::MergeFrom(const ParentalPlaytimeDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalPlaytimeDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      allowed_time_windows_ = from.allowed_time_windows_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowed_daily_minutes_ = from.allowed_daily_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalPlaytimeDay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalPlaytimeDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalPlaytimeDay::CopyFrom(const ParentalPlaytimeDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalPlaytimeDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalPlaytimeDay::IsInitialized() const {
  return true;
}

void ParentalPlaytimeDay::InternalSwap(ParentalPlaytimeDay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalPlaytimeDay, allowed_daily_minutes_)
      + sizeof(ParentalPlaytimeDay::allowed_daily_minutes_)
      - PROTOBUF_FIELD_OFFSET(ParentalPlaytimeDay, allowed_time_windows_)>(
          reinterpret_cast<char*>(&allowed_time_windows_),
          reinterpret_cast<char*>(&other->allowed_time_windows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalPlaytimeDay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalPlaytimeRestrictions::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalPlaytimeRestrictions>()._has_bits_);
  static void set_has_apply_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ParentalPlaytimeRestrictions::ParentalPlaytimeRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  playtime_days_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalPlaytimeRestrictions)
}
ParentalPlaytimeRestrictions::ParentalPlaytimeRestrictions(const ParentalPlaytimeRestrictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      playtime_days_(from.playtime_days_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  apply_playtime_restrictions_ = from.apply_playtime_restrictions_;
  // @@protoc_insertion_point(copy_constructor:ParentalPlaytimeRestrictions)
}

void ParentalPlaytimeRestrictions::SharedCtor() {
apply_playtime_restrictions_ = false;
}

ParentalPlaytimeRestrictions::~ParentalPlaytimeRestrictions() {
  // @@protoc_insertion_point(destructor:ParentalPlaytimeRestrictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalPlaytimeRestrictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalPlaytimeRestrictions::ArenaDtor(void* object) {
  ParentalPlaytimeRestrictions* _this = reinterpret_cast< ParentalPlaytimeRestrictions* >(object);
  (void)_this;
}
void ParentalPlaytimeRestrictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalPlaytimeRestrictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalPlaytimeRestrictions::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playtime_days_.Clear();
  apply_playtime_restrictions_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalPlaytimeRestrictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool apply_playtime_restrictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_apply_playtime_restrictions(&has_bits);
          apply_playtime_restrictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ParentalPlaytimeDay playtime_days = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playtime_days(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalPlaytimeRestrictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool apply_playtime_restrictions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_apply_playtime_restrictions(), target);
  }

  // repeated .ParentalPlaytimeDay playtime_days = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playtime_days_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_playtime_days(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalPlaytimeRestrictions)
  return target;
}

size_t ParentalPlaytimeRestrictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalPlaytimeRestrictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParentalPlaytimeDay playtime_days = 15;
  total_size += 1UL * this->_internal_playtime_days_size();
  for (const auto& msg : this->playtime_days_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool apply_playtime_restrictions = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalPlaytimeRestrictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalPlaytimeRestrictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalPlaytimeRestrictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalPlaytimeRestrictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalPlaytimeRestrictions)
    MergeFrom(*source);
  }
}

void ParentalPlaytimeRestrictions::MergeFrom(const ParentalPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playtime_days_.MergeFrom(from.playtime_days_);
  if (from._internal_has_apply_playtime_restrictions()) {
    _internal_set_apply_playtime_restrictions(from._internal_apply_playtime_restrictions());
  }
}

void ParentalPlaytimeRestrictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalPlaytimeRestrictions::CopyFrom(const ParentalPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalPlaytimeRestrictions::IsInitialized() const {
  return true;
}

void ParentalPlaytimeRestrictions::InternalSwap(ParentalPlaytimeRestrictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playtime_days_.InternalSwap(&other->playtime_days_);
  swap(apply_playtime_restrictions_, other->apply_playtime_restrictions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalPlaytimeRestrictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalTemporaryPlaytimeRestrictions::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalTemporaryPlaytimeRestrictions>()._has_bits_);
  static const ::ParentalPlaytimeDay& restrictions(const ParentalTemporaryPlaytimeRestrictions* msg);
  static void set_has_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ParentalPlaytimeDay&
ParentalTemporaryPlaytimeRestrictions::_Internal::restrictions(const ParentalTemporaryPlaytimeRestrictions* msg) {
  return *msg->restrictions_;
}
ParentalTemporaryPlaytimeRestrictions::ParentalTemporaryPlaytimeRestrictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalTemporaryPlaytimeRestrictions)
}
ParentalTemporaryPlaytimeRestrictions::ParentalTemporaryPlaytimeRestrictions(const ParentalTemporaryPlaytimeRestrictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_restrictions()) {
    restrictions_ = new ::ParentalPlaytimeDay(*from.restrictions_);
  } else {
    restrictions_ = nullptr;
  }
  rtime_expires_ = from.rtime_expires_;
  // @@protoc_insertion_point(copy_constructor:ParentalTemporaryPlaytimeRestrictions)
}

void ParentalTemporaryPlaytimeRestrictions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_expires_) -
    reinterpret_cast<char*>(&restrictions_)) + sizeof(rtime_expires_));
}

ParentalTemporaryPlaytimeRestrictions::~ParentalTemporaryPlaytimeRestrictions() {
  // @@protoc_insertion_point(destructor:ParentalTemporaryPlaytimeRestrictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalTemporaryPlaytimeRestrictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete restrictions_;
}

void ParentalTemporaryPlaytimeRestrictions::ArenaDtor(void* object) {
  ParentalTemporaryPlaytimeRestrictions* _this = reinterpret_cast< ParentalTemporaryPlaytimeRestrictions* >(object);
  (void)_this;
}
void ParentalTemporaryPlaytimeRestrictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalTemporaryPlaytimeRestrictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalTemporaryPlaytimeRestrictions::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalTemporaryPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(restrictions_ != nullptr);
    restrictions_->Clear();
  }
  rtime_expires_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalTemporaryPlaytimeRestrictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ParentalPlaytimeDay restrictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_expires = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rtime_expires(&has_bits);
          rtime_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalTemporaryPlaytimeRestrictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalTemporaryPlaytimeRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ParentalPlaytimeDay restrictions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::restrictions(this), target, stream);
  }

  // optional uint32 rtime_expires = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtime_expires(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalTemporaryPlaytimeRestrictions)
  return target;
}

size_t ParentalTemporaryPlaytimeRestrictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalTemporaryPlaytimeRestrictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ParentalPlaytimeDay restrictions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictions_);
    }

    // optional uint32 rtime_expires = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_expires());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalTemporaryPlaytimeRestrictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalTemporaryPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalTemporaryPlaytimeRestrictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalTemporaryPlaytimeRestrictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalTemporaryPlaytimeRestrictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalTemporaryPlaytimeRestrictions)
    MergeFrom(*source);
  }
}

void ParentalTemporaryPlaytimeRestrictions::MergeFrom(const ParentalTemporaryPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalTemporaryPlaytimeRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_restrictions()->::ParentalPlaytimeDay::MergeFrom(from._internal_restrictions());
    }
    if (cached_has_bits & 0x00000002u) {
      rtime_expires_ = from.rtime_expires_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalTemporaryPlaytimeRestrictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalTemporaryPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalTemporaryPlaytimeRestrictions::CopyFrom(const ParentalTemporaryPlaytimeRestrictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalTemporaryPlaytimeRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalTemporaryPlaytimeRestrictions::IsInitialized() const {
  return true;
}

void ParentalTemporaryPlaytimeRestrictions::InternalSwap(ParentalTemporaryPlaytimeRestrictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalTemporaryPlaytimeRestrictions, rtime_expires_)
      + sizeof(ParentalTemporaryPlaytimeRestrictions::rtime_expires_)
      - PROTOBUF_FIELD_OFFSET(ParentalTemporaryPlaytimeRestrictions, restrictions_)>(
          reinterpret_cast<char*>(&restrictions_),
          reinterpret_cast<char*>(&other->restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalTemporaryPlaytimeRestrictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalSettings>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_applist_base_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_applist_base_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_passwordhashtype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passwordhash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enabled_features(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_recovery_email(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_site_license_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_temporary_enabled_features(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rtime_temporary_feature_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::ParentalPlaytimeRestrictions& playtime_restrictions(const ParentalSettings* msg);
  static void set_has_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ParentalTemporaryPlaytimeRestrictions& temporary_playtime_restrictions(const ParentalSettings* msg);
  static void set_has_temporary_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ParentalPlaytimeRestrictions&
ParentalSettings::_Internal::playtime_restrictions(const ParentalSettings* msg) {
  return *msg->playtime_restrictions_;
}
const ::ParentalTemporaryPlaytimeRestrictions&
ParentalSettings::_Internal::temporary_playtime_restrictions(const ParentalSettings* msg) {
  return *msg->temporary_playtime_restrictions_;
}
ParentalSettings::ParentalSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  applist_base_(arena),
  applist_custom_(arena),
  excluded_store_content_descriptors_(arena),
  excluded_community_content_descriptors_(arena),
  utility_appids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalSettings)
}
ParentalSettings::ParentalSettings(const ParentalSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      applist_base_(from.applist_base_),
      applist_custom_(from.applist_custom_),
      excluded_store_content_descriptors_(from.excluded_store_content_descriptors_),
      excluded_community_content_descriptors_(from.excluded_community_content_descriptors_),
      utility_appids_(from.utility_appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  applist_base_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applist_base_description()) {
    applist_base_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_applist_base_description(), 
      GetArena());
  }
  salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_salt()) {
    salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_salt(), 
      GetArena());
  }
  passwordhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passwordhash()) {
    passwordhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passwordhash(), 
      GetArena());
  }
  recovery_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recovery_email()) {
    recovery_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recovery_email(), 
      GetArena());
  }
  if (from._internal_has_playtime_restrictions()) {
    playtime_restrictions_ = new ::ParentalPlaytimeRestrictions(*from.playtime_restrictions_);
  } else {
    playtime_restrictions_ = nullptr;
  }
  if (from._internal_has_temporary_playtime_restrictions()) {
    temporary_playtime_restrictions_ = new ::ParentalTemporaryPlaytimeRestrictions(*from.temporary_playtime_restrictions_);
  } else {
    temporary_playtime_restrictions_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_temporary_feature_expiration_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(rtime_temporary_feature_expiration_));
  // @@protoc_insertion_point(copy_constructor:ParentalSettings)
}

void ParentalSettings::SharedCtor() {
applist_base_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
passwordhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recovery_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playtime_restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_temporary_feature_expiration_) -
    reinterpret_cast<char*>(&playtime_restrictions_)) + sizeof(rtime_temporary_feature_expiration_));
}

ParentalSettings::~ParentalSettings() {
  // @@protoc_insertion_point(destructor:ParentalSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  applist_base_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwordhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recovery_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete playtime_restrictions_;
  if (this != internal_default_instance()) delete temporary_playtime_restrictions_;
}

void ParentalSettings::ArenaDtor(void* object) {
  ParentalSettings* _this = reinterpret_cast< ParentalSettings* >(object);
  (void)_this;
}
void ParentalSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applist_base_.Clear();
  applist_custom_.Clear();
  excluded_store_content_descriptors_.Clear();
  excluded_community_content_descriptors_.Clear();
  utility_appids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      applist_base_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      salt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      passwordhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      recovery_email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(playtime_restrictions_ != nullptr);
      playtime_restrictions_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(temporary_playtime_restrictions_ != nullptr);
      temporary_playtime_restrictions_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&applist_base_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(applist_base_id_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&passwordhashtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_temporary_feature_expiration_) -
        reinterpret_cast<char*>(&passwordhashtype_)) + sizeof(rtime_temporary_feature_expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 applist_base_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_applist_base_id(&has_bits);
          applist_base_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string applist_base_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_applist_base_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParentalSettings.applist_base_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ParentalApp applist_base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applist_base(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ParentalApp applist_custom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applist_custom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 passwordhashtype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_passwordhashtype(&has_bits);
          passwordhashtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes salt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes passwordhash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_passwordhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enabled_features = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_enabled_features(&has_bits);
          enabled_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string recovery_email = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_recovery_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParentalSettings.recovery_email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_site_license_lock = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_site_license_lock(&has_bits);
          is_site_license_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 temporary_enabled_features = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_temporary_enabled_features(&has_bits);
          temporary_enabled_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_temporary_feature_expiration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rtime_temporary_feature_expiration(&has_bits);
          rtime_temporary_feature_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_temporary_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 excluded_store_content_descriptors = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_excluded_store_content_descriptors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excluded_store_content_descriptors(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 excluded_community_content_descriptors = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_excluded_community_content_descriptors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_excluded_community_content_descriptors(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 utility_appids = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_utility_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_utility_appids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 applist_base_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_applist_base_id(), target);
  }

  // optional string applist_base_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applist_base_description().data(), static_cast<int>(this->_internal_applist_base_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ParentalSettings.applist_base_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_applist_base_description(), target);
  }

  // repeated .ParentalApp applist_base = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applist_base_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_applist_base(i), target, stream);
  }

  // repeated .ParentalApp applist_custom = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applist_custom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_applist_custom(i), target, stream);
  }

  // optional uint32 passwordhashtype = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_passwordhashtype(), target);
  }

  // optional bytes salt = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_salt(), target);
  }

  // optional bytes passwordhash = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_passwordhash(), target);
  }

  // optional bool is_enabled = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_enabled(), target);
  }

  // optional uint32 enabled_features = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_enabled_features(), target);
  }

  // optional string recovery_email = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recovery_email().data(), static_cast<int>(this->_internal_recovery_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ParentalSettings.recovery_email");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_recovery_email(), target);
  }

  // optional bool is_site_license_lock = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_site_license_lock(), target);
  }

  // optional uint32 temporary_enabled_features = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_temporary_enabled_features(), target);
  }

  // optional uint32 rtime_temporary_feature_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rtime_temporary_feature_expiration(), target);
  }

  // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::playtime_restrictions(this), target, stream);
  }

  // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::temporary_playtime_restrictions(this), target, stream);
  }

  // repeated uint32 excluded_store_content_descriptors = 17;
  for (int i = 0, n = this->_internal_excluded_store_content_descriptors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_excluded_store_content_descriptors(i), target);
  }

  // repeated uint32 excluded_community_content_descriptors = 18;
  for (int i = 0, n = this->_internal_excluded_community_content_descriptors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_excluded_community_content_descriptors(i), target);
  }

  // repeated uint32 utility_appids = 19;
  for (int i = 0, n = this->_internal_utility_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_utility_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalSettings)
  return target;
}

size_t ParentalSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParentalApp applist_base = 4;
  total_size += 1UL * this->_internal_applist_base_size();
  for (const auto& msg : this->applist_base_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ParentalApp applist_custom = 5;
  total_size += 1UL * this->_internal_applist_custom_size();
  for (const auto& msg : this->applist_custom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 excluded_store_content_descriptors = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excluded_store_content_descriptors_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_excluded_store_content_descriptors_size());
    total_size += data_size;
  }

  // repeated uint32 excluded_community_content_descriptors = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->excluded_community_content_descriptors_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_excluded_community_content_descriptors_size());
    total_size += data_size;
  }

  // repeated uint32 utility_appids = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->utility_appids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_utility_appids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string applist_base_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_applist_base_description());
    }

    // optional bytes salt = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_salt());
    }

    // optional bytes passwordhash = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_passwordhash());
    }

    // optional string recovery_email = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recovery_email());
    }

    // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playtime_restrictions_);
    }

    // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temporary_playtime_restrictions_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 applist_base_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_applist_base_id());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 passwordhashtype = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_passwordhashtype());
    }

    // optional uint32 enabled_features = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enabled_features());
    }

    // optional bool is_enabled = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_site_license_lock = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 temporary_enabled_features = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_temporary_enabled_features());
    }

    // optional uint32 rtime_temporary_feature_expiration = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_temporary_feature_expiration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalSettings)
    MergeFrom(*source);
  }
}

void ParentalSettings::MergeFrom(const ParentalSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applist_base_.MergeFrom(from.applist_base_);
  applist_custom_.MergeFrom(from.applist_custom_);
  excluded_store_content_descriptors_.MergeFrom(from.excluded_store_content_descriptors_);
  excluded_community_content_descriptors_.MergeFrom(from.excluded_community_content_descriptors_);
  utility_appids_.MergeFrom(from.utility_appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_applist_base_description(from._internal_applist_base_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_salt(from._internal_salt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_passwordhash(from._internal_passwordhash());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_recovery_email(from._internal_recovery_email());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_playtime_restrictions()->::ParentalPlaytimeRestrictions::MergeFrom(from._internal_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_temporary_playtime_restrictions()->::ParentalTemporaryPlaytimeRestrictions::MergeFrom(from._internal_temporary_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      applist_base_id_ = from.applist_base_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      passwordhashtype_ = from.passwordhashtype_;
    }
    if (cached_has_bits & 0x00000200u) {
      enabled_features_ = from.enabled_features_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_site_license_lock_ = from.is_site_license_lock_;
    }
    if (cached_has_bits & 0x00001000u) {
      temporary_enabled_features_ = from.temporary_enabled_features_;
    }
    if (cached_has_bits & 0x00002000u) {
      rtime_temporary_feature_expiration_ = from.rtime_temporary_feature_expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalSettings::CopyFrom(const ParentalSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalSettings::IsInitialized() const {
  return true;
}

void ParentalSettings::InternalSwap(ParentalSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applist_base_.InternalSwap(&other->applist_base_);
  applist_custom_.InternalSwap(&other->applist_custom_);
  excluded_store_content_descriptors_.InternalSwap(&other->excluded_store_content_descriptors_);
  excluded_community_content_descriptors_.InternalSwap(&other->excluded_community_content_descriptors_);
  utility_appids_.InternalSwap(&other->utility_appids_);
  applist_base_description_.Swap(&other->applist_base_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passwordhash_.Swap(&other->passwordhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recovery_email_.Swap(&other->recovery_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalSettings, rtime_temporary_feature_expiration_)
      + sizeof(ParentalSettings::rtime_temporary_feature_expiration_)
      - PROTOBUF_FIELD_OFFSET(ParentalSettings, playtime_restrictions_)>(
          reinterpret_cast<char*>(&playtime_restrictions_),
          reinterpret_cast<char*>(&other->playtime_restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalFeatureRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalFeatureRequest>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_family_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid_responder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_responded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ParentalFeatureRequest::ParentalFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalFeatureRequest)
}
ParentalFeatureRequest::ParentalFeatureRequest(const ParentalFeatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
  // @@protoc_insertion_point(copy_constructor:ParentalFeatureRequest)
}

void ParentalFeatureRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
}

ParentalFeatureRequest::~ParentalFeatureRequest() {
  // @@protoc_insertion_point(destructor:ParentalFeatureRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalFeatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParentalFeatureRequest::ArenaDtor(void* object) {
  ParentalFeatureRequest* _this = reinterpret_cast< ParentalFeatureRequest* >(object);
  (void)_this;
}
void ParentalFeatureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalFeatureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalFeatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalFeatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_responded_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalFeatureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 family_groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_family_groupid(&has_bits);
          family_groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_features(&has_bits);
          features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_requested = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_requested(&has_bits);
          time_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool approved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_approved(&has_bits);
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_responder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_steamid_responder(&has_bits);
          steamid_responder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_responded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_responded(&has_bits);
          time_responded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalFeatureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalFeatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 requestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_requestid(), target);
  }

  // optional fixed64 family_groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_family_groupid(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  // optional uint32 features = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_features(), target);
  }

  // optional uint32 time_requested = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_requested(), target);
  }

  // optional bool approved = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_approved(), target);
  }

  // optional fixed64 steamid_responder = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steamid_responder(), target);
  }

  // optional uint32 time_responded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_time_responded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalFeatureRequest)
  return target;
}

size_t ParentalFeatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalFeatureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 requestid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 family_groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 features = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_features());
    }

    // optional uint32 time_requested = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_requested());
    }

    // optional fixed64 steamid_responder = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool approved = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_responded = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_responded());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalFeatureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalFeatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalFeatureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalFeatureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalFeatureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalFeatureRequest)
    MergeFrom(*source);
  }
}

void ParentalFeatureRequest::MergeFrom(const ParentalFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalFeatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      family_groupid_ = from.family_groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      features_ = from.features_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_requested_ = from.time_requested_;
    }
    if (cached_has_bits & 0x00000020u) {
      steamid_responder_ = from.steamid_responder_;
    }
    if (cached_has_bits & 0x00000040u) {
      approved_ = from.approved_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_responded_ = from.time_responded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalFeatureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalFeatureRequest::CopyFrom(const ParentalFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalFeatureRequest::IsInitialized() const {
  return true;
}

void ParentalFeatureRequest::InternalSwap(ParentalFeatureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalFeatureRequest, time_responded_)
      + sizeof(ParentalFeatureRequest::time_responded_)
      - PROTOBUF_FIELD_OFFSET(ParentalFeatureRequest, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalFeatureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParentalPlaytimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalPlaytimeRequest>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_family_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ParentalPlaytimeDay& current_playtime_restrictions(const ParentalPlaytimeRequest* msg);
  static void set_has_current_playtime_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steamid_responder(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_responded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ParentalTemporaryPlaytimeRestrictions& restrictions_approved(const ParentalPlaytimeRequest* msg);
  static void set_has_restrictions_approved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ParentalPlaytimeDay&
ParentalPlaytimeRequest::_Internal::current_playtime_restrictions(const ParentalPlaytimeRequest* msg) {
  return *msg->current_playtime_restrictions_;
}
const ::ParentalTemporaryPlaytimeRestrictions&
ParentalPlaytimeRequest::_Internal::restrictions_approved(const ParentalPlaytimeRequest* msg) {
  return *msg->restrictions_approved_;
}
ParentalPlaytimeRequest::ParentalPlaytimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParentalPlaytimeRequest)
}
ParentalPlaytimeRequest::ParentalPlaytimeRequest(const ParentalPlaytimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_playtime_restrictions()) {
    current_playtime_restrictions_ = new ::ParentalPlaytimeDay(*from.current_playtime_restrictions_);
  } else {
    current_playtime_restrictions_ = nullptr;
  }
  if (from._internal_has_restrictions_approved()) {
    restrictions_approved_ = new ::ParentalTemporaryPlaytimeRestrictions(*from.restrictions_approved_);
  } else {
    restrictions_approved_ = nullptr;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(time_responded_));
  // @@protoc_insertion_point(copy_constructor:ParentalPlaytimeRequest)
}

void ParentalPlaytimeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_playtime_restrictions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_responded_) -
    reinterpret_cast<char*>(&current_playtime_restrictions_)) + sizeof(time_responded_));
}

ParentalPlaytimeRequest::~ParentalPlaytimeRequest() {
  // @@protoc_insertion_point(destructor:ParentalPlaytimeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalPlaytimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_playtime_restrictions_;
  if (this != internal_default_instance()) delete restrictions_approved_;
}

void ParentalPlaytimeRequest::ArenaDtor(void* object) {
  ParentalPlaytimeRequest* _this = reinterpret_cast< ParentalPlaytimeRequest* >(object);
  (void)_this;
}
void ParentalPlaytimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalPlaytimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentalPlaytimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ParentalPlaytimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_playtime_restrictions_ != nullptr);
      current_playtime_restrictions_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(restrictions_approved_ != nullptr);
      restrictions_approved_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_responder_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(steamid_responder_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&approved_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_responded_) -
        reinterpret_cast<char*>(&approved_)) + sizeof(time_responded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalPlaytimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 requestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 family_groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_family_groupid(&has_bits);
          family_groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_playtime_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_expires = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_expires(&has_bits);
          time_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_requested = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_requested(&has_bits);
          time_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool approved = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_approved(&has_bits);
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_responder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steamid_responder(&has_bits);
          steamid_responder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_responded = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_time_responded(&has_bits);
          time_responded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictions_approved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalPlaytimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParentalPlaytimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 requestid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_requestid(), target);
  }

  // optional fixed64 family_groupid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_family_groupid(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::current_playtime_restrictions(this), target, stream);
  }

  // optional uint32 time_expires = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_expires(), target);
  }

  // optional uint32 time_requested = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_requested(), target);
  }

  // optional bool approved = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_approved(), target);
  }

  // optional fixed64 steamid_responder = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_steamid_responder(), target);
  }

  // optional uint32 time_responded = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_time_responded(), target);
  }

  // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::restrictions_approved(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParentalPlaytimeRequest)
  return target;
}

size_t ParentalPlaytimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParentalPlaytimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_playtime_restrictions_);
    }

    // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictions_approved_);
    }

    // optional fixed64 requestid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 family_groupid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_expires = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_expires());
    }

    // optional uint32 time_requested = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_requested());
    }

    // optional fixed64 steamid_responder = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool approved = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_responded = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_responded());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalPlaytimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParentalPlaytimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalPlaytimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalPlaytimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParentalPlaytimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParentalPlaytimeRequest)
    MergeFrom(*source);
  }
}

void ParentalPlaytimeRequest::MergeFrom(const ParentalPlaytimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParentalPlaytimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_playtime_restrictions()->::ParentalPlaytimeDay::MergeFrom(from._internal_current_playtime_restrictions());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_restrictions_approved()->::ParentalTemporaryPlaytimeRestrictions::MergeFrom(from._internal_restrictions_approved());
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      family_groupid_ = from.family_groupid_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_expires_ = from.time_expires_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_requested_ = from.time_requested_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamid_responder_ = from.steamid_responder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      approved_ = from.approved_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_responded_ = from.time_responded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalPlaytimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParentalPlaytimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalPlaytimeRequest::CopyFrom(const ParentalPlaytimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParentalPlaytimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalPlaytimeRequest::IsInitialized() const {
  return true;
}

void ParentalPlaytimeRequest::InternalSwap(ParentalPlaytimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalPlaytimeRequest, time_responded_)
      + sizeof(ParentalPlaytimeRequest::time_responded_)
      - PROTOBUF_FIELD_OFFSET(ParentalPlaytimeRequest, current_playtime_restrictions_)>(
          reinterpret_cast<char*>(&current_playtime_restrictions_),
          reinterpret_cast<char*>(&other->current_playtime_restrictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalPlaytimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ParentalApp* Arena::CreateMaybeMessage< ::ParentalApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalApp >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalPlaytimeDay* Arena::CreateMaybeMessage< ::ParentalPlaytimeDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalPlaytimeDay >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalPlaytimeRestrictions* Arena::CreateMaybeMessage< ::ParentalPlaytimeRestrictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalPlaytimeRestrictions >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalTemporaryPlaytimeRestrictions* Arena::CreateMaybeMessage< ::ParentalTemporaryPlaytimeRestrictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalTemporaryPlaytimeRestrictions >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalSettings* Arena::CreateMaybeMessage< ::ParentalSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalFeatureRequest* Arena::CreateMaybeMessage< ::ParentalFeatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalFeatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ParentalPlaytimeRequest* Arena::CreateMaybeMessage< ::ParentalPlaytimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParentalPlaytimeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
