// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_parties.steamclient.proto

#include "steammessages_parties.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CParties_JoinParty_Request::CParties_JoinParty_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_JoinParty_RequestDefaultTypeInternal {
  constexpr CParties_JoinParty_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_JoinParty_RequestDefaultTypeInternal() {}
  union {
    CParties_JoinParty_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_JoinParty_RequestDefaultTypeInternal _CParties_JoinParty_Request_default_instance_;
constexpr CParties_JoinParty_Response::CParties_JoinParty_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connect_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_JoinParty_ResponseDefaultTypeInternal {
  constexpr CParties_JoinParty_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_JoinParty_ResponseDefaultTypeInternal() {}
  union {
    CParties_JoinParty_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_JoinParty_ResponseDefaultTypeInternal _CParties_JoinParty_Response_default_instance_;
constexpr CParties_BeaconLocation::CParties_BeaconLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_id_(PROTOBUF_ULONGLONG(0))
  , location_type_(0u){}
struct CParties_BeaconLocationDefaultTypeInternal {
  constexpr CParties_BeaconLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_BeaconLocationDefaultTypeInternal() {}
  union {
    CParties_BeaconLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_BeaconLocationDefaultTypeInternal _CParties_BeaconLocation_default_instance_;
constexpr CParties_CreateBeacon_Request::CParties_CreateBeacon_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locations_()
  , connect_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , num_open_slots_(0u){}
struct CParties_CreateBeacon_RequestDefaultTypeInternal {
  constexpr CParties_CreateBeacon_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_CreateBeacon_RequestDefaultTypeInternal() {}
  union {
    CParties_CreateBeacon_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_CreateBeacon_RequestDefaultTypeInternal _CParties_CreateBeacon_Request_default_instance_;
constexpr CParties_CreateBeacon_Response::CParties_CreateBeacon_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_CreateBeacon_ResponseDefaultTypeInternal {
  constexpr CParties_CreateBeacon_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_CreateBeacon_ResponseDefaultTypeInternal() {}
  union {
    CParties_CreateBeacon_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_CreateBeacon_ResponseDefaultTypeInternal _CParties_CreateBeacon_Response_default_instance_;
constexpr CParties_OnReservationCompleted_Request::CParties_OnReservationCompleted_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0))
  , user_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParties_OnReservationCompleted_RequestDefaultTypeInternal {
  constexpr CParties_OnReservationCompleted_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_OnReservationCompleted_RequestDefaultTypeInternal() {}
  union {
    CParties_OnReservationCompleted_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_OnReservationCompleted_RequestDefaultTypeInternal _CParties_OnReservationCompleted_Request_default_instance_;
constexpr CParties_OnReservationCompleted_Response::CParties_OnReservationCompleted_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_OnReservationCompleted_ResponseDefaultTypeInternal {
  constexpr CParties_OnReservationCompleted_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_OnReservationCompleted_ResponseDefaultTypeInternal() {}
  union {
    CParties_OnReservationCompleted_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_OnReservationCompleted_ResponseDefaultTypeInternal _CParties_OnReservationCompleted_Response_default_instance_;
constexpr CParties_CancelReservation_Request::CParties_CancelReservation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0))
  , user_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CParties_CancelReservation_RequestDefaultTypeInternal {
  constexpr CParties_CancelReservation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_CancelReservation_RequestDefaultTypeInternal() {}
  union {
    CParties_CancelReservation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_CancelReservation_RequestDefaultTypeInternal _CParties_CancelReservation_Request_default_instance_;
constexpr CParties_CancelReservation_Response::CParties_CancelReservation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_CancelReservation_ResponseDefaultTypeInternal {
  constexpr CParties_CancelReservation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_CancelReservation_ResponseDefaultTypeInternal() {}
  union {
    CParties_CancelReservation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_CancelReservation_ResponseDefaultTypeInternal _CParties_CancelReservation_Response_default_instance_;
constexpr CParties_ChangeNumOpenSlots_Request::CParties_ChangeNumOpenSlots_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0))
  , num_open_slots_(0u){}
struct CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal {
  constexpr CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal() {}
  union {
    CParties_ChangeNumOpenSlots_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal _CParties_ChangeNumOpenSlots_Request_default_instance_;
constexpr CParties_ChangeNumOpenSlots_Response::CParties_ChangeNumOpenSlots_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal {
  constexpr CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal() {}
  union {
    CParties_ChangeNumOpenSlots_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal _CParties_ChangeNumOpenSlots_Response_default_instance_;
constexpr CParties_DestroyBeacon_Request::CParties_DestroyBeacon_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_DestroyBeacon_RequestDefaultTypeInternal {
  constexpr CParties_DestroyBeacon_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_DestroyBeacon_RequestDefaultTypeInternal() {}
  union {
    CParties_DestroyBeacon_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_DestroyBeacon_RequestDefaultTypeInternal _CParties_DestroyBeacon_Request_default_instance_;
constexpr CParties_DestroyBeacon_Response::CParties_DestroyBeacon_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_id_(PROTOBUF_ULONGLONG(0)){}
struct CParties_DestroyBeacon_ResponseDefaultTypeInternal {
  constexpr CParties_DestroyBeacon_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CParties_DestroyBeacon_ResponseDefaultTypeInternal() {}
  union {
    CParties_DestroyBeacon_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CParties_DestroyBeacon_ResponseDefaultTypeInternal _CParties_DestroyBeacon_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fparties_2esteamclient_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fparties_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fparties_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Request, beacon_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Response, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::CParties_JoinParty_Response, connect_string_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_BeaconLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_BeaconLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_BeaconLocation, location_type_),
  PROTOBUF_FIELD_OFFSET(::CParties_BeaconLocation, location_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, num_open_slots_),
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, locations_),
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, connect_string_),
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Request, metadata_),
  2,
  3,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_CreateBeacon_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Request, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Request, user_steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_OnReservationCompleted_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Request, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Request, user_steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_CancelReservation_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Request, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Request, num_open_slots_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_ChangeNumOpenSlots_Response, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_DestroyBeacon_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_DestroyBeacon_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_DestroyBeacon_Request, beacon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CParties_DestroyBeacon_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CParties_DestroyBeacon_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CParties_DestroyBeacon_Response, beacon_id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CParties_JoinParty_Request)},
  { 9, 16, sizeof(::CParties_JoinParty_Response)},
  { 18, 25, sizeof(::CParties_BeaconLocation)},
  { 27, 37, sizeof(::CParties_CreateBeacon_Request)},
  { 42, 48, sizeof(::CParties_CreateBeacon_Response)},
  { 49, 56, sizeof(::CParties_OnReservationCompleted_Request)},
  { 58, 64, sizeof(::CParties_OnReservationCompleted_Response)},
  { 65, 72, sizeof(::CParties_CancelReservation_Request)},
  { 74, 80, sizeof(::CParties_CancelReservation_Response)},
  { 81, 88, sizeof(::CParties_ChangeNumOpenSlots_Request)},
  { 90, 96, sizeof(::CParties_ChangeNumOpenSlots_Response)},
  { 97, 103, sizeof(::CParties_DestroyBeacon_Request)},
  { 104, 110, sizeof(::CParties_DestroyBeacon_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_JoinParty_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_JoinParty_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_BeaconLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_CreateBeacon_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_CreateBeacon_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_OnReservationCompleted_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_OnReservationCompleted_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_CancelReservation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_CancelReservation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_ChangeNumOpenSlots_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_ChangeNumOpenSlots_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_DestroyBeacon_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CParties_DestroyBeacon_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fparties_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'steammessages_parties.steamclient.prot"
  "o\032 google/protobuf/descriptor.proto\032\030ste"
  "ammessages_base.proto\032,steammessages_uni"
  "fied_base.steamclient.proto\"@\n\032CParties_"
  "JoinParty_Request\022\017\n\007steamid\030\001 \001(\006\022\021\n\tbe"
  "acon_id\030\002 \001(\004\"H\n\033CParties_JoinParty_Resp"
  "onse\022\021\n\tbeacon_id\030\001 \001(\004\022\026\n\016connect_strin"
  "g\030\002 \001(\t\"E\n\027CParties_BeaconLocation\022\025\n\rlo"
  "cation_type\030\001 \001(\r\022\023\n\013location_id\030\002 \001(\004\"\235"
  "\001\n\035CParties_CreateBeacon_Request\022\r\n\005appi"
  "d\030\001 \001(\r\022\026\n\016num_open_slots\030\002 \001(\r\022+\n\tlocat"
  "ions\030\003 \003(\0132\030.CParties_BeaconLocation\022\026\n\016"
  "connect_string\030\004 \001(\t\022\020\n\010metadata\030\005 \001(\t\"3"
  "\n\036CParties_CreateBeacon_Response\022\021\n\tbeac"
  "on_id\030\001 \001(\004\"R\n\'CParties_OnReservationCom"
  "pleted_Request\022\021\n\tbeacon_id\030\001 \001(\004\022\024\n\014use"
  "r_steamid\030\002 \001(\006\"=\n(CParties_OnReservatio"
  "nCompleted_Response\022\021\n\tbeacon_id\030\001 \001(\004\"M"
  "\n\"CParties_CancelReservation_Request\022\021\n\t"
  "beacon_id\030\001 \001(\004\022\024\n\014user_steamid\030\002 \001(\006\"8\n"
  "#CParties_CancelReservation_Response\022\021\n\t"
  "beacon_id\030\001 \001(\004\"P\n#CParties_ChangeNumOpe"
  "nSlots_Request\022\021\n\tbeacon_id\030\001 \001(\004\022\026\n\016num"
  "_open_slots\030\002 \001(\r\"9\n$CParties_ChangeNumO"
  "penSlots_Response\022\021\n\tbeacon_id\030\001 \001(\004\"3\n\036"
  "CParties_DestroyBeacon_Request\022\021\n\tbeacon"
  "_id\030\001 \001(\004\"4\n\037CParties_DestroyBeacon_Resp"
  "onse\022\021\n\tbeacon_id\030\001 \001(\0042\250\004\n\007Parties\022F\n\tJ"
  "oinParty\022\033.CParties_JoinParty_Request\032\034."
  "CParties_JoinParty_Response\022O\n\014CreateBea"
  "con\022\036.CParties_CreateBeacon_Request\032\037.CP"
  "arties_CreateBeacon_Response\022m\n\026OnReserv"
  "ationCompleted\022(.CParties_OnReservationC"
  "ompleted_Request\032).CParties_OnReservatio"
  "nCompleted_Response\022^\n\021CancelReservation"
  "\022#.CParties_CancelReservation_Request\032$."
  "CParties_CancelReservation_Response\022a\n\022C"
  "hangeNumOpenSlots\022$.CParties_ChangeNumOp"
  "enSlots_Request\032%.CParties_ChangeNumOpen"
  "Slots_Response\022R\n\rDestroyBeacon\022\037.CParti"
  "es_DestroyBeacon_Request\032 .CParties_Dest"
  "royBeacon_ResponseB\035\200\001\001\252\002\027OpenSteamworks"
  ".Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fparties_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fparties_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fparties_2esteamclient_2eproto = {
  false, false, 1689, descriptor_table_protodef_steammessages_5fparties_2esteamclient_2eproto, "steammessages_parties.steamclient.proto", 
  &descriptor_table_steammessages_5fparties_2esteamclient_2eproto_once, descriptor_table_steammessages_5fparties_2esteamclient_2eproto_deps, 3, 13,
  schemas, file_default_instances, TableStruct_steammessages_5fparties_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fparties_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fparties_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fparties_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fparties_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fparties_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fparties_2esteamclient_2eproto(&descriptor_table_steammessages_5fparties_2esteamclient_2eproto);

// ===================================================================

class CParties_JoinParty_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_JoinParty_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParties_JoinParty_Request::CParties_JoinParty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_JoinParty_Request)
}
CParties_JoinParty_Request::CParties_JoinParty_Request(const CParties_JoinParty_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&beacon_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(beacon_id_));
  // @@protoc_insertion_point(copy_constructor:CParties_JoinParty_Request)
}

void CParties_JoinParty_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&beacon_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(beacon_id_));
}

CParties_JoinParty_Request::~CParties_JoinParty_Request() {
  // @@protoc_insertion_point(destructor:CParties_JoinParty_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_JoinParty_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_JoinParty_Request::ArenaDtor(void* object) {
  CParties_JoinParty_Request* _this = reinterpret_cast< CParties_JoinParty_Request* >(object);
  (void)_this;
}
void CParties_JoinParty_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_JoinParty_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_JoinParty_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_JoinParty_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&beacon_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(beacon_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_JoinParty_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 beacon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_JoinParty_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_JoinParty_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 beacon_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_JoinParty_Request)
  return target;
}

size_t CParties_JoinParty_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_JoinParty_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 beacon_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_beacon_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_JoinParty_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_JoinParty_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_JoinParty_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_JoinParty_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_JoinParty_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_JoinParty_Request)
    MergeFrom(*source);
  }
}

void CParties_JoinParty_Request::MergeFrom(const CParties_JoinParty_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_JoinParty_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      beacon_id_ = from.beacon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_JoinParty_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_JoinParty_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_JoinParty_Request::CopyFrom(const CParties_JoinParty_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_JoinParty_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_JoinParty_Request::IsInitialized() const {
  return true;
}

void CParties_JoinParty_Request::InternalSwap(CParties_JoinParty_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParties_JoinParty_Request, beacon_id_)
      + sizeof(CParties_JoinParty_Request::beacon_id_)
      - PROTOBUF_FIELD_OFFSET(CParties_JoinParty_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_JoinParty_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_JoinParty_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_JoinParty_Response>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connect_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_JoinParty_Response::CParties_JoinParty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_JoinParty_Response)
}
CParties_JoinParty_Response::CParties_JoinParty_Response(const CParties_JoinParty_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connect_string()) {
    connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connect_string(), 
      GetArena());
  }
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_JoinParty_Response)
}

void CParties_JoinParty_Response::SharedCtor() {
connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_JoinParty_Response::~CParties_JoinParty_Response() {
  // @@protoc_insertion_point(destructor:CParties_JoinParty_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_JoinParty_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connect_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParties_JoinParty_Response::ArenaDtor(void* object) {
  CParties_JoinParty_Response* _this = reinterpret_cast< CParties_JoinParty_Response* >(object);
  (void)_this;
}
void CParties_JoinParty_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_JoinParty_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_JoinParty_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_JoinParty_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connect_string_.ClearNonDefaultToEmpty();
  }
  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_JoinParty_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connect_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_connect_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParties_JoinParty_Response.connect_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_JoinParty_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_JoinParty_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  // optional string connect_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect_string().data(), static_cast<int>(this->_internal_connect_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParties_JoinParty_Response.connect_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connect_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_JoinParty_Response)
  return target;
}

size_t CParties_JoinParty_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_JoinParty_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string connect_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect_string());
    }

    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_beacon_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_JoinParty_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_JoinParty_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_JoinParty_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_JoinParty_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_JoinParty_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_JoinParty_Response)
    MergeFrom(*source);
  }
}

void CParties_JoinParty_Response::MergeFrom(const CParties_JoinParty_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_JoinParty_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connect_string(from._internal_connect_string());
    }
    if (cached_has_bits & 0x00000002u) {
      beacon_id_ = from.beacon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_JoinParty_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_JoinParty_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_JoinParty_Response::CopyFrom(const CParties_JoinParty_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_JoinParty_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_JoinParty_Response::IsInitialized() const {
  return true;
}

void CParties_JoinParty_Response::InternalSwap(CParties_JoinParty_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connect_string_.Swap(&other->connect_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_JoinParty_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_BeaconLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_BeaconLocation>()._has_bits_);
  static void set_has_location_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_BeaconLocation::CParties_BeaconLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_BeaconLocation)
}
CParties_BeaconLocation::CParties_BeaconLocation(const CParties_BeaconLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&location_id_, &from.location_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_type_) -
    reinterpret_cast<char*>(&location_id_)) + sizeof(location_type_));
  // @@protoc_insertion_point(copy_constructor:CParties_BeaconLocation)
}

void CParties_BeaconLocation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&location_type_) -
    reinterpret_cast<char*>(&location_id_)) + sizeof(location_type_));
}

CParties_BeaconLocation::~CParties_BeaconLocation() {
  // @@protoc_insertion_point(destructor:CParties_BeaconLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_BeaconLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_BeaconLocation::ArenaDtor(void* object) {
  CParties_BeaconLocation* _this = reinterpret_cast< CParties_BeaconLocation* >(object);
  (void)_this;
}
void CParties_BeaconLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_BeaconLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_BeaconLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_BeaconLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&location_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&location_type_) -
        reinterpret_cast<char*>(&location_id_)) + sizeof(location_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_BeaconLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 location_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_location_type(&has_bits);
          location_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 location_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_location_id(&has_bits);
          location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_BeaconLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_BeaconLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 location_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_location_type(), target);
  }

  // optional uint64 location_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_location_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_BeaconLocation)
  return target;
}

size_t CParties_BeaconLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_BeaconLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 location_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_location_id());
    }

    // optional uint32 location_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_location_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_BeaconLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_BeaconLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_BeaconLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_BeaconLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_BeaconLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_BeaconLocation)
    MergeFrom(*source);
  }
}

void CParties_BeaconLocation::MergeFrom(const CParties_BeaconLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_BeaconLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      location_id_ = from.location_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_type_ = from.location_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_BeaconLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_BeaconLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_BeaconLocation::CopyFrom(const CParties_BeaconLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_BeaconLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_BeaconLocation::IsInitialized() const {
  return true;
}

void CParties_BeaconLocation::InternalSwap(CParties_BeaconLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParties_BeaconLocation, location_type_)
      + sizeof(CParties_BeaconLocation::location_type_)
      - PROTOBUF_FIELD_OFFSET(CParties_BeaconLocation, location_id_)>(
          reinterpret_cast<char*>(&location_id_),
          reinterpret_cast<char*>(&other->location_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_BeaconLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_CreateBeacon_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_CreateBeacon_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_open_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_connect_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParties_CreateBeacon_Request::CParties_CreateBeacon_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  locations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_CreateBeacon_Request)
}
CParties_CreateBeacon_Request::CParties_CreateBeacon_Request(const CParties_CreateBeacon_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connect_string()) {
    connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connect_string(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_open_slots_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(num_open_slots_));
  // @@protoc_insertion_point(copy_constructor:CParties_CreateBeacon_Request)
}

void CParties_CreateBeacon_Request::SharedCtor() {
connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_open_slots_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(num_open_slots_));
}

CParties_CreateBeacon_Request::~CParties_CreateBeacon_Request() {
  // @@protoc_insertion_point(destructor:CParties_CreateBeacon_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_CreateBeacon_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connect_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CParties_CreateBeacon_Request::ArenaDtor(void* object) {
  CParties_CreateBeacon_Request* _this = reinterpret_cast< CParties_CreateBeacon_Request* >(object);
  (void)_this;
}
void CParties_CreateBeacon_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_CreateBeacon_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_CreateBeacon_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_CreateBeacon_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connect_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      metadata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_open_slots_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(num_open_slots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_CreateBeacon_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_open_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_open_slots(&has_bits);
          num_open_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CParties_BeaconLocation locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string connect_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_connect_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParties_CreateBeacon_Request.connect_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CParties_CreateBeacon_Request.metadata");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_CreateBeacon_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_CreateBeacon_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 num_open_slots = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_open_slots(), target);
  }

  // repeated .CParties_BeaconLocation locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_locations(i), target, stream);
  }

  // optional string connect_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect_string().data(), static_cast<int>(this->_internal_connect_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParties_CreateBeacon_Request.connect_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_connect_string(), target);
  }

  // optional string metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CParties_CreateBeacon_Request.metadata");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_CreateBeacon_Request)
  return target;
}

size_t CParties_CreateBeacon_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_CreateBeacon_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CParties_BeaconLocation locations = 3;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string connect_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect_string());
    }

    // optional string metadata = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metadata());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 num_open_slots = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_open_slots());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CreateBeacon_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_CreateBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CreateBeacon_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_CreateBeacon_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_CreateBeacon_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_CreateBeacon_Request)
    MergeFrom(*source);
  }
}

void CParties_CreateBeacon_Request::MergeFrom(const CParties_CreateBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_CreateBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connect_string(from._internal_connect_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_open_slots_ = from.num_open_slots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_CreateBeacon_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_CreateBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CreateBeacon_Request::CopyFrom(const CParties_CreateBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_CreateBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CreateBeacon_Request::IsInitialized() const {
  return true;
}

void CParties_CreateBeacon_Request::InternalSwap(CParties_CreateBeacon_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  locations_.InternalSwap(&other->locations_);
  connect_string_.Swap(&other->connect_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParties_CreateBeacon_Request, num_open_slots_)
      + sizeof(CParties_CreateBeacon_Request::num_open_slots_)
      - PROTOBUF_FIELD_OFFSET(CParties_CreateBeacon_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_CreateBeacon_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_CreateBeacon_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_CreateBeacon_Response>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_CreateBeacon_Response::CParties_CreateBeacon_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_CreateBeacon_Response)
}
CParties_CreateBeacon_Response::CParties_CreateBeacon_Response(const CParties_CreateBeacon_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_CreateBeacon_Response)
}

void CParties_CreateBeacon_Response::SharedCtor() {
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_CreateBeacon_Response::~CParties_CreateBeacon_Response() {
  // @@protoc_insertion_point(destructor:CParties_CreateBeacon_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_CreateBeacon_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_CreateBeacon_Response::ArenaDtor(void* object) {
  CParties_CreateBeacon_Response* _this = reinterpret_cast< CParties_CreateBeacon_Response* >(object);
  (void)_this;
}
void CParties_CreateBeacon_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_CreateBeacon_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_CreateBeacon_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_CreateBeacon_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_CreateBeacon_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_CreateBeacon_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_CreateBeacon_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_CreateBeacon_Response)
  return target;
}

size_t CParties_CreateBeacon_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_CreateBeacon_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beacon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CreateBeacon_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_CreateBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CreateBeacon_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_CreateBeacon_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_CreateBeacon_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_CreateBeacon_Response)
    MergeFrom(*source);
  }
}

void CParties_CreateBeacon_Response::MergeFrom(const CParties_CreateBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_CreateBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_beacon_id()) {
    _internal_set_beacon_id(from._internal_beacon_id());
  }
}

void CParties_CreateBeacon_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_CreateBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CreateBeacon_Response::CopyFrom(const CParties_CreateBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_CreateBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CreateBeacon_Response::IsInitialized() const {
  return true;
}

void CParties_CreateBeacon_Response::InternalSwap(CParties_CreateBeacon_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_CreateBeacon_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_OnReservationCompleted_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_OnReservationCompleted_Request>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParties_OnReservationCompleted_Request::CParties_OnReservationCompleted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_OnReservationCompleted_Request)
}
CParties_OnReservationCompleted_Request::CParties_OnReservationCompleted_Request(const CParties_OnReservationCompleted_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beacon_id_, &from.beacon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:CParties_OnReservationCompleted_Request)
}

void CParties_OnReservationCompleted_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beacon_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
}

CParties_OnReservationCompleted_Request::~CParties_OnReservationCompleted_Request() {
  // @@protoc_insertion_point(destructor:CParties_OnReservationCompleted_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_OnReservationCompleted_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_OnReservationCompleted_Request::ArenaDtor(void* object) {
  CParties_OnReservationCompleted_Request* _this = reinterpret_cast< CParties_OnReservationCompleted_Request* >(object);
  (void)_this;
}
void CParties_OnReservationCompleted_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_OnReservationCompleted_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_OnReservationCompleted_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_OnReservationCompleted_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&beacon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_OnReservationCompleted_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 user_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_user_steamid(&has_bits);
          user_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_OnReservationCompleted_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_OnReservationCompleted_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_OnReservationCompleted_Request)
  return target;
}

size_t CParties_OnReservationCompleted_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_OnReservationCompleted_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_beacon_id());
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_OnReservationCompleted_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_OnReservationCompleted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_OnReservationCompleted_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_OnReservationCompleted_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_OnReservationCompleted_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_OnReservationCompleted_Request)
    MergeFrom(*source);
  }
}

void CParties_OnReservationCompleted_Request::MergeFrom(const CParties_OnReservationCompleted_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_OnReservationCompleted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_OnReservationCompleted_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_OnReservationCompleted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_OnReservationCompleted_Request::CopyFrom(const CParties_OnReservationCompleted_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_OnReservationCompleted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_OnReservationCompleted_Request::IsInitialized() const {
  return true;
}

void CParties_OnReservationCompleted_Request::InternalSwap(CParties_OnReservationCompleted_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParties_OnReservationCompleted_Request, user_steamid_)
      + sizeof(CParties_OnReservationCompleted_Request::user_steamid_)
      - PROTOBUF_FIELD_OFFSET(CParties_OnReservationCompleted_Request, beacon_id_)>(
          reinterpret_cast<char*>(&beacon_id_),
          reinterpret_cast<char*>(&other->beacon_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_OnReservationCompleted_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_OnReservationCompleted_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_OnReservationCompleted_Response>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_OnReservationCompleted_Response::CParties_OnReservationCompleted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_OnReservationCompleted_Response)
}
CParties_OnReservationCompleted_Response::CParties_OnReservationCompleted_Response(const CParties_OnReservationCompleted_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_OnReservationCompleted_Response)
}

void CParties_OnReservationCompleted_Response::SharedCtor() {
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_OnReservationCompleted_Response::~CParties_OnReservationCompleted_Response() {
  // @@protoc_insertion_point(destructor:CParties_OnReservationCompleted_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_OnReservationCompleted_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_OnReservationCompleted_Response::ArenaDtor(void* object) {
  CParties_OnReservationCompleted_Response* _this = reinterpret_cast< CParties_OnReservationCompleted_Response* >(object);
  (void)_this;
}
void CParties_OnReservationCompleted_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_OnReservationCompleted_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_OnReservationCompleted_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_OnReservationCompleted_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_OnReservationCompleted_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_OnReservationCompleted_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_OnReservationCompleted_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_OnReservationCompleted_Response)
  return target;
}

size_t CParties_OnReservationCompleted_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_OnReservationCompleted_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beacon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_OnReservationCompleted_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_OnReservationCompleted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_OnReservationCompleted_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_OnReservationCompleted_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_OnReservationCompleted_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_OnReservationCompleted_Response)
    MergeFrom(*source);
  }
}

void CParties_OnReservationCompleted_Response::MergeFrom(const CParties_OnReservationCompleted_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_OnReservationCompleted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_beacon_id()) {
    _internal_set_beacon_id(from._internal_beacon_id());
  }
}

void CParties_OnReservationCompleted_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_OnReservationCompleted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_OnReservationCompleted_Response::CopyFrom(const CParties_OnReservationCompleted_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_OnReservationCompleted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_OnReservationCompleted_Response::IsInitialized() const {
  return true;
}

void CParties_OnReservationCompleted_Response::InternalSwap(CParties_OnReservationCompleted_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_OnReservationCompleted_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_CancelReservation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_CancelReservation_Request>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParties_CancelReservation_Request::CParties_CancelReservation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_CancelReservation_Request)
}
CParties_CancelReservation_Request::CParties_CancelReservation_Request(const CParties_CancelReservation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beacon_id_, &from.beacon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:CParties_CancelReservation_Request)
}

void CParties_CancelReservation_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beacon_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
}

CParties_CancelReservation_Request::~CParties_CancelReservation_Request() {
  // @@protoc_insertion_point(destructor:CParties_CancelReservation_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_CancelReservation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_CancelReservation_Request::ArenaDtor(void* object) {
  CParties_CancelReservation_Request* _this = reinterpret_cast< CParties_CancelReservation_Request* >(object);
  (void)_this;
}
void CParties_CancelReservation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_CancelReservation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_CancelReservation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_CancelReservation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&beacon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&beacon_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_CancelReservation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 user_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_user_steamid(&has_bits);
          user_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_CancelReservation_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_CancelReservation_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_CancelReservation_Request)
  return target;
}

size_t CParties_CancelReservation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_CancelReservation_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_beacon_id());
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CancelReservation_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_CancelReservation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CancelReservation_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_CancelReservation_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_CancelReservation_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_CancelReservation_Request)
    MergeFrom(*source);
  }
}

void CParties_CancelReservation_Request::MergeFrom(const CParties_CancelReservation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_CancelReservation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_CancelReservation_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_CancelReservation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CancelReservation_Request::CopyFrom(const CParties_CancelReservation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_CancelReservation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CancelReservation_Request::IsInitialized() const {
  return true;
}

void CParties_CancelReservation_Request::InternalSwap(CParties_CancelReservation_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParties_CancelReservation_Request, user_steamid_)
      + sizeof(CParties_CancelReservation_Request::user_steamid_)
      - PROTOBUF_FIELD_OFFSET(CParties_CancelReservation_Request, beacon_id_)>(
          reinterpret_cast<char*>(&beacon_id_),
          reinterpret_cast<char*>(&other->beacon_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_CancelReservation_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_CancelReservation_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_CancelReservation_Response>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_CancelReservation_Response::CParties_CancelReservation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_CancelReservation_Response)
}
CParties_CancelReservation_Response::CParties_CancelReservation_Response(const CParties_CancelReservation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_CancelReservation_Response)
}

void CParties_CancelReservation_Response::SharedCtor() {
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_CancelReservation_Response::~CParties_CancelReservation_Response() {
  // @@protoc_insertion_point(destructor:CParties_CancelReservation_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_CancelReservation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_CancelReservation_Response::ArenaDtor(void* object) {
  CParties_CancelReservation_Response* _this = reinterpret_cast< CParties_CancelReservation_Response* >(object);
  (void)_this;
}
void CParties_CancelReservation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_CancelReservation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_CancelReservation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_CancelReservation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_CancelReservation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_CancelReservation_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_CancelReservation_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_CancelReservation_Response)
  return target;
}

size_t CParties_CancelReservation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_CancelReservation_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beacon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_CancelReservation_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_CancelReservation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_CancelReservation_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_CancelReservation_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_CancelReservation_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_CancelReservation_Response)
    MergeFrom(*source);
  }
}

void CParties_CancelReservation_Response::MergeFrom(const CParties_CancelReservation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_CancelReservation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_beacon_id()) {
    _internal_set_beacon_id(from._internal_beacon_id());
  }
}

void CParties_CancelReservation_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_CancelReservation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_CancelReservation_Response::CopyFrom(const CParties_CancelReservation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_CancelReservation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_CancelReservation_Response::IsInitialized() const {
  return true;
}

void CParties_CancelReservation_Response::InternalSwap(CParties_CancelReservation_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_CancelReservation_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_ChangeNumOpenSlots_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_ChangeNumOpenSlots_Request>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_open_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CParties_ChangeNumOpenSlots_Request::CParties_ChangeNumOpenSlots_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_ChangeNumOpenSlots_Request)
}
CParties_ChangeNumOpenSlots_Request::CParties_ChangeNumOpenSlots_Request(const CParties_ChangeNumOpenSlots_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beacon_id_, &from.beacon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_open_slots_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(num_open_slots_));
  // @@protoc_insertion_point(copy_constructor:CParties_ChangeNumOpenSlots_Request)
}

void CParties_ChangeNumOpenSlots_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beacon_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_open_slots_) -
    reinterpret_cast<char*>(&beacon_id_)) + sizeof(num_open_slots_));
}

CParties_ChangeNumOpenSlots_Request::~CParties_ChangeNumOpenSlots_Request() {
  // @@protoc_insertion_point(destructor:CParties_ChangeNumOpenSlots_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_ChangeNumOpenSlots_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_ChangeNumOpenSlots_Request::ArenaDtor(void* object) {
  CParties_ChangeNumOpenSlots_Request* _this = reinterpret_cast< CParties_ChangeNumOpenSlots_Request* >(object);
  (void)_this;
}
void CParties_ChangeNumOpenSlots_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_ChangeNumOpenSlots_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_ChangeNumOpenSlots_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_ChangeNumOpenSlots_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&beacon_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_open_slots_) -
        reinterpret_cast<char*>(&beacon_id_)) + sizeof(num_open_slots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_ChangeNumOpenSlots_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_open_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_open_slots(&has_bits);
          num_open_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_ChangeNumOpenSlots_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_ChangeNumOpenSlots_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  // optional uint32 num_open_slots = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_open_slots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_ChangeNumOpenSlots_Request)
  return target;
}

size_t CParties_ChangeNumOpenSlots_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_ChangeNumOpenSlots_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 beacon_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_beacon_id());
    }

    // optional uint32 num_open_slots = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_open_slots());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_ChangeNumOpenSlots_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_ChangeNumOpenSlots_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_ChangeNumOpenSlots_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_ChangeNumOpenSlots_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_ChangeNumOpenSlots_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_ChangeNumOpenSlots_Request)
    MergeFrom(*source);
  }
}

void CParties_ChangeNumOpenSlots_Request::MergeFrom(const CParties_ChangeNumOpenSlots_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_ChangeNumOpenSlots_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_open_slots_ = from.num_open_slots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CParties_ChangeNumOpenSlots_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_ChangeNumOpenSlots_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_ChangeNumOpenSlots_Request::CopyFrom(const CParties_ChangeNumOpenSlots_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_ChangeNumOpenSlots_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_ChangeNumOpenSlots_Request::IsInitialized() const {
  return true;
}

void CParties_ChangeNumOpenSlots_Request::InternalSwap(CParties_ChangeNumOpenSlots_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CParties_ChangeNumOpenSlots_Request, num_open_slots_)
      + sizeof(CParties_ChangeNumOpenSlots_Request::num_open_slots_)
      - PROTOBUF_FIELD_OFFSET(CParties_ChangeNumOpenSlots_Request, beacon_id_)>(
          reinterpret_cast<char*>(&beacon_id_),
          reinterpret_cast<char*>(&other->beacon_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_ChangeNumOpenSlots_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_ChangeNumOpenSlots_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_ChangeNumOpenSlots_Response>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_ChangeNumOpenSlots_Response::CParties_ChangeNumOpenSlots_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_ChangeNumOpenSlots_Response)
}
CParties_ChangeNumOpenSlots_Response::CParties_ChangeNumOpenSlots_Response(const CParties_ChangeNumOpenSlots_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_ChangeNumOpenSlots_Response)
}

void CParties_ChangeNumOpenSlots_Response::SharedCtor() {
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_ChangeNumOpenSlots_Response::~CParties_ChangeNumOpenSlots_Response() {
  // @@protoc_insertion_point(destructor:CParties_ChangeNumOpenSlots_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_ChangeNumOpenSlots_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_ChangeNumOpenSlots_Response::ArenaDtor(void* object) {
  CParties_ChangeNumOpenSlots_Response* _this = reinterpret_cast< CParties_ChangeNumOpenSlots_Response* >(object);
  (void)_this;
}
void CParties_ChangeNumOpenSlots_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_ChangeNumOpenSlots_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_ChangeNumOpenSlots_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_ChangeNumOpenSlots_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_ChangeNumOpenSlots_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_ChangeNumOpenSlots_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_ChangeNumOpenSlots_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_ChangeNumOpenSlots_Response)
  return target;
}

size_t CParties_ChangeNumOpenSlots_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_ChangeNumOpenSlots_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beacon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_ChangeNumOpenSlots_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_ChangeNumOpenSlots_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_ChangeNumOpenSlots_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_ChangeNumOpenSlots_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_ChangeNumOpenSlots_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_ChangeNumOpenSlots_Response)
    MergeFrom(*source);
  }
}

void CParties_ChangeNumOpenSlots_Response::MergeFrom(const CParties_ChangeNumOpenSlots_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_ChangeNumOpenSlots_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_beacon_id()) {
    _internal_set_beacon_id(from._internal_beacon_id());
  }
}

void CParties_ChangeNumOpenSlots_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_ChangeNumOpenSlots_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_ChangeNumOpenSlots_Response::CopyFrom(const CParties_ChangeNumOpenSlots_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_ChangeNumOpenSlots_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_ChangeNumOpenSlots_Response::IsInitialized() const {
  return true;
}

void CParties_ChangeNumOpenSlots_Response::InternalSwap(CParties_ChangeNumOpenSlots_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_ChangeNumOpenSlots_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_DestroyBeacon_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_DestroyBeacon_Request>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_DestroyBeacon_Request::CParties_DestroyBeacon_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_DestroyBeacon_Request)
}
CParties_DestroyBeacon_Request::CParties_DestroyBeacon_Request(const CParties_DestroyBeacon_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_DestroyBeacon_Request)
}

void CParties_DestroyBeacon_Request::SharedCtor() {
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_DestroyBeacon_Request::~CParties_DestroyBeacon_Request() {
  // @@protoc_insertion_point(destructor:CParties_DestroyBeacon_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_DestroyBeacon_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_DestroyBeacon_Request::ArenaDtor(void* object) {
  CParties_DestroyBeacon_Request* _this = reinterpret_cast< CParties_DestroyBeacon_Request* >(object);
  (void)_this;
}
void CParties_DestroyBeacon_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_DestroyBeacon_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_DestroyBeacon_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_DestroyBeacon_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_DestroyBeacon_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_DestroyBeacon_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_DestroyBeacon_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_DestroyBeacon_Request)
  return target;
}

size_t CParties_DestroyBeacon_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_DestroyBeacon_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beacon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_DestroyBeacon_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_DestroyBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_DestroyBeacon_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_DestroyBeacon_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_DestroyBeacon_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_DestroyBeacon_Request)
    MergeFrom(*source);
  }
}

void CParties_DestroyBeacon_Request::MergeFrom(const CParties_DestroyBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_DestroyBeacon_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_beacon_id()) {
    _internal_set_beacon_id(from._internal_beacon_id());
  }
}

void CParties_DestroyBeacon_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_DestroyBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_DestroyBeacon_Request::CopyFrom(const CParties_DestroyBeacon_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_DestroyBeacon_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_DestroyBeacon_Request::IsInitialized() const {
  return true;
}

void CParties_DestroyBeacon_Request::InternalSwap(CParties_DestroyBeacon_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_DestroyBeacon_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CParties_DestroyBeacon_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CParties_DestroyBeacon_Response>()._has_bits_);
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CParties_DestroyBeacon_Response::CParties_DestroyBeacon_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CParties_DestroyBeacon_Response)
}
CParties_DestroyBeacon_Response::CParties_DestroyBeacon_Response(const CParties_DestroyBeacon_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beacon_id_ = from.beacon_id_;
  // @@protoc_insertion_point(copy_constructor:CParties_DestroyBeacon_Response)
}

void CParties_DestroyBeacon_Response::SharedCtor() {
beacon_id_ = PROTOBUF_ULONGLONG(0);
}

CParties_DestroyBeacon_Response::~CParties_DestroyBeacon_Response() {
  // @@protoc_insertion_point(destructor:CParties_DestroyBeacon_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CParties_DestroyBeacon_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CParties_DestroyBeacon_Response::ArenaDtor(void* object) {
  CParties_DestroyBeacon_Response* _this = reinterpret_cast< CParties_DestroyBeacon_Response* >(object);
  (void)_this;
}
void CParties_DestroyBeacon_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CParties_DestroyBeacon_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CParties_DestroyBeacon_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CParties_DestroyBeacon_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beacon_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CParties_DestroyBeacon_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 beacon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CParties_DestroyBeacon_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CParties_DestroyBeacon_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 beacon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_beacon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CParties_DestroyBeacon_Response)
  return target;
}

size_t CParties_DestroyBeacon_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CParties_DestroyBeacon_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 beacon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beacon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CParties_DestroyBeacon_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CParties_DestroyBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CParties_DestroyBeacon_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CParties_DestroyBeacon_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CParties_DestroyBeacon_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CParties_DestroyBeacon_Response)
    MergeFrom(*source);
  }
}

void CParties_DestroyBeacon_Response::MergeFrom(const CParties_DestroyBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CParties_DestroyBeacon_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_beacon_id()) {
    _internal_set_beacon_id(from._internal_beacon_id());
  }
}

void CParties_DestroyBeacon_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CParties_DestroyBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CParties_DestroyBeacon_Response::CopyFrom(const CParties_DestroyBeacon_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CParties_DestroyBeacon_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CParties_DestroyBeacon_Response::IsInitialized() const {
  return true;
}

void CParties_DestroyBeacon_Response::InternalSwap(CParties_DestroyBeacon_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(beacon_id_, other->beacon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CParties_DestroyBeacon_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Parties::~Parties() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Parties::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fparties_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Parties::GetDescriptor() {
  return descriptor();
}

void Parties::JoinParty(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParties_JoinParty_Request*,
                         ::CParties_JoinParty_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinParty() not implemented.");
  done->Run();
}

void Parties::CreateBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParties_CreateBeacon_Request*,
                         ::CParties_CreateBeacon_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateBeacon() not implemented.");
  done->Run();
}

void Parties::OnReservationCompleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParties_OnReservationCompleted_Request*,
                         ::CParties_OnReservationCompleted_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnReservationCompleted() not implemented.");
  done->Run();
}

void Parties::CancelReservation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParties_CancelReservation_Request*,
                         ::CParties_CancelReservation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CancelReservation() not implemented.");
  done->Run();
}

void Parties::ChangeNumOpenSlots(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParties_ChangeNumOpenSlots_Request*,
                         ::CParties_ChangeNumOpenSlots_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChangeNumOpenSlots() not implemented.");
  done->Run();
}

void Parties::DestroyBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CParties_DestroyBeacon_Request*,
                         ::CParties_DestroyBeacon_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DestroyBeacon() not implemented.");
  done->Run();
}

void Parties::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fparties_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      JoinParty(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParties_JoinParty_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParties_JoinParty_Response*>(
                 response),
             done);
      break;
    case 1:
      CreateBeacon(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParties_CreateBeacon_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParties_CreateBeacon_Response*>(
                 response),
             done);
      break;
    case 2:
      OnReservationCompleted(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParties_OnReservationCompleted_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParties_OnReservationCompleted_Response*>(
                 response),
             done);
      break;
    case 3:
      CancelReservation(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParties_CancelReservation_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParties_CancelReservation_Response*>(
                 response),
             done);
      break;
    case 4:
      ChangeNumOpenSlots(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParties_ChangeNumOpenSlots_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParties_ChangeNumOpenSlots_Response*>(
                 response),
             done);
      break;
    case 5:
      DestroyBeacon(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CParties_DestroyBeacon_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CParties_DestroyBeacon_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Parties::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CParties_JoinParty_Request::default_instance();
    case 1:
      return ::CParties_CreateBeacon_Request::default_instance();
    case 2:
      return ::CParties_OnReservationCompleted_Request::default_instance();
    case 3:
      return ::CParties_CancelReservation_Request::default_instance();
    case 4:
      return ::CParties_ChangeNumOpenSlots_Request::default_instance();
    case 5:
      return ::CParties_DestroyBeacon_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Parties::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CParties_JoinParty_Response::default_instance();
    case 1:
      return ::CParties_CreateBeacon_Response::default_instance();
    case 2:
      return ::CParties_OnReservationCompleted_Response::default_instance();
    case 3:
      return ::CParties_CancelReservation_Response::default_instance();
    case 4:
      return ::CParties_ChangeNumOpenSlots_Response::default_instance();
    case 5:
      return ::CParties_DestroyBeacon_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Parties_Stub::Parties_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Parties_Stub::Parties_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Parties_Stub::~Parties_Stub() {
  if (owns_channel_) delete channel_;
}

void Parties_Stub::JoinParty(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParties_JoinParty_Request* request,
                              ::CParties_JoinParty_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Parties_Stub::CreateBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParties_CreateBeacon_Request* request,
                              ::CParties_CreateBeacon_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Parties_Stub::OnReservationCompleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParties_OnReservationCompleted_Request* request,
                              ::CParties_OnReservationCompleted_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Parties_Stub::CancelReservation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParties_CancelReservation_Request* request,
                              ::CParties_CancelReservation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Parties_Stub::ChangeNumOpenSlots(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParties_ChangeNumOpenSlots_Request* request,
                              ::CParties_ChangeNumOpenSlots_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Parties_Stub::DestroyBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CParties_DestroyBeacon_Request* request,
                              ::CParties_DestroyBeacon_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CParties_JoinParty_Request* Arena::CreateMaybeMessage< ::CParties_JoinParty_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_JoinParty_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_JoinParty_Response* Arena::CreateMaybeMessage< ::CParties_JoinParty_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_JoinParty_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_BeaconLocation* Arena::CreateMaybeMessage< ::CParties_BeaconLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_BeaconLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_CreateBeacon_Request* Arena::CreateMaybeMessage< ::CParties_CreateBeacon_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_CreateBeacon_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_CreateBeacon_Response* Arena::CreateMaybeMessage< ::CParties_CreateBeacon_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_CreateBeacon_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_OnReservationCompleted_Request* Arena::CreateMaybeMessage< ::CParties_OnReservationCompleted_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_OnReservationCompleted_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_OnReservationCompleted_Response* Arena::CreateMaybeMessage< ::CParties_OnReservationCompleted_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_OnReservationCompleted_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_CancelReservation_Request* Arena::CreateMaybeMessage< ::CParties_CancelReservation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_CancelReservation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_CancelReservation_Response* Arena::CreateMaybeMessage< ::CParties_CancelReservation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_CancelReservation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_ChangeNumOpenSlots_Request* Arena::CreateMaybeMessage< ::CParties_ChangeNumOpenSlots_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_ChangeNumOpenSlots_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_ChangeNumOpenSlots_Response* Arena::CreateMaybeMessage< ::CParties_ChangeNumOpenSlots_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_ChangeNumOpenSlots_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_DestroyBeacon_Request* Arena::CreateMaybeMessage< ::CParties_DestroyBeacon_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_DestroyBeacon_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CParties_DestroyBeacon_Response* Arena::CreateMaybeMessage< ::CParties_DestroyBeacon_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CParties_DestroyBeacon_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
