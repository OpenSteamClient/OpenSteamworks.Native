// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_qms.steamclient.proto

#include "steammessages_qms.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr GameSearchParam::GameSearchParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , key_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameSearchParamDefaultTypeInternal {
  constexpr GameSearchParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameSearchParamDefaultTypeInternal() {}
  union {
    GameSearchParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameSearchParamDefaultTypeInternal _GameSearchParam_default_instance_;
constexpr CQueuedMatchmaking_SearchForGame_Request::CQueuedMatchmaking_SearchForGame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , appid_(0u)
  , action_(0)

  , player_min_(0u)
  , player_max_(0u)
  , steamidlobby_(PROTOBUF_ULONGLONG(0))
  , searchid_(PROTOBUF_ULONGLONG(0)){}
struct CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal {
  constexpr CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal() {}
  union {
    CQueuedMatchmaking_SearchForGame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal _CQueuedMatchmaking_SearchForGame_Request_default_instance_;
constexpr CQueuedMatchmaking_SearchForGame_Response::CQueuedMatchmaking_SearchForGame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connect_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , searchid_(PROTOBUF_ULONGLONG(0))
  , gamesearchresult_(0)

  , seconds_time_estimate_(0u)
  , poll_frequency_(0u)
  , count_searching_(0u)
  , players_in_match_(0u)
  , players_accepted_(0u)
  , steamidhost_(PROTOBUF_ULONGLONG(0))
  , rtime_match_made_(0u)
  , rtime_now_(0u)
  , steamid_canceled_search_(PROTOBUF_ULONGLONG(0)){}
struct CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal {
  constexpr CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal() {}
  union {
    CQueuedMatchmaking_SearchForGame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal _CQueuedMatchmaking_SearchForGame_Response_default_instance_;
constexpr CQueuedMatchmakingGameHost_SearchForPlayers_Request::CQueuedMatchmakingGameHost_SearchForPlayers_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , connection_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , action_(0)

  , player_min_(0u)
  , player_max_(0u)
  , searchid_(PROTOBUF_ULONGLONG(0))
  , player_max_team_size_(0u){}
struct CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal {
  constexpr CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal() {}
  union {
    CQueuedMatchmakingGameHost_SearchForPlayers_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal _CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_;
constexpr PlayerFound::PlayerFound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , steamid_(PROTOBUF_ULONGLONG(0))
  , action_(0)

  , team_number_(0u){}
struct PlayerFoundDefaultTypeInternal {
  constexpr PlayerFoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerFoundDefaultTypeInternal() {}
  union {
    PlayerFound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerFoundDefaultTypeInternal _PlayerFound_default_instance_;
constexpr CQueuedMatchmakingGameHost_SearchForPlayers_Response::CQueuedMatchmakingGameHost_SearchForPlayers_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , searchid_(PROTOBUF_ULONGLONG(0))
  , gamesearchresult_(0)

  , poll_frequency_(0u)
  , matchid_(PROTOBUF_ULONGLONG(0))
  , rtime_match_made_(0u)
  , rtime_now_(0u){}
struct CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal {
  constexpr CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal() {}
  union {
    CQueuedMatchmakingGameHost_SearchForPlayers_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal _CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_;
constexpr PlayerResult::PlayerResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , value_(0u){}
struct PlayerResultDefaultTypeInternal {
  constexpr PlayerResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerResultDefaultTypeInternal() {}
  union {
    PlayerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;
constexpr CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_results_()
  , matchid_(PROTOBUF_ULONGLONG(0))
  , appid_(0u){}
struct CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal {
  constexpr CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal() {}
  union {
    CQueuedMatchmakingGameHost_SubmitPlayerResult_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal _CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_;
constexpr CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal {
  constexpr CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal() {}
  union {
    CQueuedMatchmakingGameHost_SubmitPlayerResult_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal _CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_;
constexpr CQueuedMatchmakingGameHost_EndGame_Request::CQueuedMatchmakingGameHost_EndGame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matchid_(PROTOBUF_ULONGLONG(0))
  , appid_(0u){}
struct CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal {
  constexpr CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal() {}
  union {
    CQueuedMatchmakingGameHost_EndGame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal _CQueuedMatchmakingGameHost_EndGame_Request_default_instance_;
constexpr CQueuedMatchmakingGameHost_EndGame_Response::CQueuedMatchmakingGameHost_EndGame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal {
  constexpr CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal() {}
  union {
    CQueuedMatchmakingGameHost_EndGame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal _CQueuedMatchmakingGameHost_EndGame_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fqms_2esteamclient_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fqms_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameSearchParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameSearchParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameSearchParam, key_name_),
  PROTOBUF_FIELD_OFFSET(::GameSearchParam, value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, action_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, params_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, player_min_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, player_max_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, steamidlobby_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Request, searchid_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, gamesearchresult_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, searchid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, seconds_time_estimate_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, poll_frequency_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, count_searching_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, players_in_match_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, players_accepted_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, connect_string_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, steamidhost_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, rtime_match_made_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, rtime_now_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmaking_SearchForGame_Response, steamid_canceled_search_),
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, action_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, params_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_min_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_max_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_max_team_size_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, connection_string_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Request, searchid_),
  1,
  2,
  ~0u,
  3,
  4,
  6,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::PlayerFound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerFound, steamid_),
  PROTOBUF_FIELD_OFFSET(::PlayerFound, action_),
  PROTOBUF_FIELD_OFFSET(::PlayerFound, params_),
  PROTOBUF_FIELD_OFFSET(::PlayerFound, team_number_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, gamesearchresult_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, searchid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, poll_frequency_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, matchid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, players_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, rtime_match_made_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SearchForPlayers_Response, rtime_now_),
  1,
  0,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerResult, steamid_),
  PROTOBUF_FIELD_OFFSET(::PlayerResult, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, matchid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, player_results_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_EndGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_EndGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_EndGame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_EndGame_Request, matchid_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CQueuedMatchmakingGameHost_EndGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GameSearchParam)},
  { 9, 21, sizeof(::CQueuedMatchmaking_SearchForGame_Request)},
  { 28, 45, sizeof(::CQueuedMatchmaking_SearchForGame_Response)},
  { 57, 70, sizeof(::CQueuedMatchmakingGameHost_SearchForPlayers_Request)},
  { 78, 87, sizeof(::PlayerFound)},
  { 91, 103, sizeof(::CQueuedMatchmakingGameHost_SearchForPlayers_Response)},
  { 110, 117, sizeof(::PlayerResult)},
  { 119, 127, sizeof(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)},
  { 130, -1, sizeof(::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)},
  { 135, 142, sizeof(::CQueuedMatchmakingGameHost_EndGame_Request)},
  { 144, -1, sizeof(::CQueuedMatchmakingGameHost_EndGame_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameSearchParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmaking_SearchForGame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmaking_SearchForGame_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmakingGameHost_EndGame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQueuedMatchmakingGameHost_EndGame_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fqms_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#steammessages_qms.steamclient.proto\032 g"
  "oogle/protobuf/descriptor.proto\032\030steamme"
  "ssages_base.proto\032,steammessages_unified"
  "_base.steamclient.proto\"2\n\017GameSearchPar"
  "am\022\020\n\010key_name\030\001 \001(\t\022\r\n\005value\030\002 \003(\t\"\347\001\n("
  "CQueuedMatchmaking_SearchForGame_Request"
  "\022\r\n\005appid\030\001 \001(\r\022:\n\006action\030\002 \001(\0162\022.EGameS"
  "earchAction:\026EGameSearchAction_None\022 \n\006p"
  "arams\030\003 \003(\0132\020.GameSearchParam\022\022\n\nplayer_"
  "min\030\004 \001(\r\022\022\n\nplayer_max\030\005 \001(\r\022\024\n\014steamid"
  "lobby\030\006 \001(\006\022\020\n\010searchid\030\007 \001(\004\"\205\003\n)CQueue"
  "dMatchmaking_SearchForGame_Response\022G\n\020g"
  "amesearchresult\030\001 \001(\0162\022.EGameSearchResul"
  "t:\031EGameSearchResult_Invalid\022\020\n\010searchid"
  "\030\002 \001(\004\022\035\n\025seconds_time_estimate\030\003 \001(\r\022\026\n"
  "\016poll_frequency\030\004 \001(\r\022\027\n\017count_searching"
  "\030\005 \001(\r\022\030\n\020players_in_match\030\006 \001(\r\022\030\n\020play"
  "ers_accepted\030\007 \001(\r\022\026\n\016connect_string\030\t \001"
  "(\t\022\023\n\013steamidhost\030\n \001(\006\022\030\n\020rtime_match_m"
  "ade\030\013 \001(\r\022\021\n\trtime_now\030\014 \001(\r\022\037\n\027steamid_"
  "canceled_search\030\r \001(\006\"\225\002\n3CQueuedMatchma"
  "kingGameHost_SearchForPlayers_Request\022\r\n"
  "\005appid\030\001 \001(\r\022:\n\006action\030\002 \001(\0162\022.EGameSear"
  "chAction:\026EGameSearchAction_None\022 \n\006para"
  "ms\030\003 \003(\0132\020.GameSearchParam\022\022\n\nplayer_min"
  "\030\004 \001(\r\022\022\n\nplayer_max\030\005 \001(\r\022\034\n\024player_max"
  "_team_size\030\006 \001(\r\022\031\n\021connection_string\030\007 "
  "\001(\t\022\020\n\010searchid\030\010 \001(\004\"\221\001\n\013PlayerFound\022\017\n"
  "\007steamid\030\001 \001(\006\022:\n\006action\030\002 \001(\0162\022.EGameSe"
  "archAction:\026EGameSearchAction_None\022 \n\006pa"
  "rams\030\003 \003(\0132\020.GameSearchParam\022\023\n\013team_num"
  "ber\030\004 \001(\r\"\206\002\n4CQueuedMatchmakingGameHost"
  "_SearchForPlayers_Response\022G\n\020gamesearch"
  "result\030\001 \001(\0162\022.EGameSearchResult:\031EGameS"
  "earchResult_Invalid\022\020\n\010searchid\030\002 \001(\004\022\026\n"
  "\016poll_frequency\030\003 \001(\r\022\017\n\007matchid\030\004 \001(\004\022\035"
  "\n\007players\030\005 \003(\0132\014.PlayerFound\022\030\n\020rtime_m"
  "atch_made\030\006 \001(\r\022\021\n\trtime_now\030\007 \001(\r\".\n\014Pl"
  "ayerResult\022\017\n\007steamid\030\001 \001(\006\022\r\n\005value\030\002 \001"
  "(\r\"~\n5CQueuedMatchmakingGameHost_SubmitP"
  "layerResult_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007ma"
  "tchid\030\002 \001(\004\022%\n\016player_results\030\003 \003(\0132\r.Pl"
  "ayerResult\"8\n6CQueuedMatchmakingGameHost"
  "_SubmitPlayerResult_Response\"L\n*CQueuedM"
  "atchmakingGameHost_EndGame_Request\022\r\n\005ap"
  "pid\030\001 \001(\r\022\017\n\007matchid\030\002 \001(\004\"-\n+CQueuedMat"
  "chmakingGameHost_EndGame_Response*\212\001\n\021EG"
  "ameSearchAction\022\032\n\026EGameSearchAction_Non"
  "e\020\000\022\034\n\030EGameSearchAction_Accept\020\001\022\035\n\031EGa"
  "meSearchAction_Decline\020\002\022\034\n\030EGameSearchA"
  "ction_Cancel\020\003*\256\002\n\021EGameSearchResult\022\035\n\031"
  "EGameSearchResult_Invalid\020\000\022&\n\"EGameSear"
  "chResult_SearchInProgress\020\001\022)\n%EGameSear"
  "chResult_SearchFailedNoHosts\020\002\022%\n!EGameS"
  "earchResult_SearchGameFound\020\003\022,\n(EGameSe"
  "archResult_SearchCompleteAccepted\020\004\022,\n(E"
  "GameSearchResult_SearchCompleteDeclined\020"
  "\005\022$\n EGameSearchResult_SearchCanceled\020\0062"
  "{\n\021QueuedMatchmaking\022f\n\rSearchForGame\022)."
  "CQueuedMatchmaking_SearchForGame_Request"
  "\032*.CQueuedMatchmaking_SearchForGame_Resp"
  "onse2\212\003\n\031QueuedMatchmakingGameHost\022\177\n\020Se"
  "archForPlayers\0224.CQueuedMatchmakingGameH"
  "ost_SearchForPlayers_Request\0325.CQueuedMa"
  "tchmakingGameHost_SearchForPlayers_Respo"
  "nse\022\205\001\n\022SubmitPlayerResult\0226.CQueuedMatc"
  "hmakingGameHost_SubmitPlayerResult_Reque"
  "st\0327.CQueuedMatchmakingGameHost_SubmitPl"
  "ayerResult_Response\022d\n\007EndGame\022+.CQueued"
  "MatchmakingGameHost_EndGame_Request\032,.CQ"
  "ueuedMatchmakingGameHost_EndGame_Respons"
  "eB\035\200\001\001\252\002\027OpenSteamworks.Protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fqms_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fqms_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fqms_2esteamclient_2eproto = {
  false, false, 2872, descriptor_table_protodef_steammessages_5fqms_2esteamclient_2eproto, "steammessages_qms.steamclient.proto", 
  &descriptor_table_steammessages_5fqms_2esteamclient_2eproto_once, descriptor_table_steammessages_5fqms_2esteamclient_2eproto_deps, 3, 11,
  schemas, file_default_instances, TableStruct_steammessages_5fqms_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fqms_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fqms_2esteamclient_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto);
  return descriptor_table_steammessages_5fqms_2esteamclient_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fqms_2esteamclient_2eproto(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameSearchAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto[0];
}
bool EGameSearchAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameSearchResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fqms_2esteamclient_2eproto[1];
}
bool EGameSearchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GameSearchParam::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSearchParam>()._has_bits_);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameSearchParam::GameSearchParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameSearchParam)
}
GameSearchParam::GameSearchParam(const GameSearchParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:GameSearchParam)
}

void GameSearchParam::SharedCtor() {
key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameSearchParam::~GameSearchParam() {
  // @@protoc_insertion_point(destructor:GameSearchParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameSearchParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSearchParam::ArenaDtor(void* object) {
  GameSearchParam* _this = reinterpret_cast< GameSearchParam* >(object);
  (void)_this;
}
void GameSearchParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameSearchParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameSearchParam::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSearchParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSearchParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameSearchParam.key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameSearchParam.value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSearchParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameSearchParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameSearchParam.key_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_name(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameSearchParam.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSearchParam)
  return target;
}

size_t GameSearchParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSearchParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // optional string key_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSearchParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSearchParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSearchParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSearchParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSearchParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSearchParam)
    MergeFrom(*source);
  }
}

void GameSearchParam::MergeFrom(const GameSearchParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSearchParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from._internal_has_key_name()) {
    _internal_set_key_name(from._internal_key_name());
  }
}

void GameSearchParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSearchParam::CopyFrom(const GameSearchParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSearchParam::IsInitialized() const {
  return true;
}

void GameSearchParam::InternalSwap(GameSearchParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSearchParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmaking_SearchForGame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQueuedMatchmaking_SearchForGame_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamidlobby(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_searchid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CQueuedMatchmaking_SearchForGame_Request::CQueuedMatchmaking_SearchForGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmaking_SearchForGame_Request)
}
CQueuedMatchmaking_SearchForGame_Request::CQueuedMatchmaking_SearchForGame_Request(const CQueuedMatchmaking_SearchForGame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&searchid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(searchid_));
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmaking_SearchForGame_Request)
}

void CQueuedMatchmaking_SearchForGame_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&searchid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(searchid_));
}

CQueuedMatchmaking_SearchForGame_Request::~CQueuedMatchmaking_SearchForGame_Request() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmaking_SearchForGame_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmaking_SearchForGame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CQueuedMatchmaking_SearchForGame_Request::ArenaDtor(void* object) {
  CQueuedMatchmaking_SearchForGame_Request* _this = reinterpret_cast< CQueuedMatchmaking_SearchForGame_Request* >(object);
  (void)_this;
}
void CQueuedMatchmaking_SearchForGame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmaking_SearchForGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmaking_SearchForGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmaking_SearchForGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&searchid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(searchid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmaking_SearchForGame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameSearchAction_IsValid(val))) {
            _internal_set_action(static_cast<::EGameSearchAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .GameSearchParam params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 player_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_min(&has_bits);
          player_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_player_max(&has_bits);
          player_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamidlobby = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_steamidlobby(&has_bits);
          steamidlobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 searchid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_searchid(&has_bits);
          searchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmaking_SearchForGame_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmaking_SearchForGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // repeated .GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_params(i), target, stream);
  }

  // optional uint32 player_min = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_min(), target);
  }

  // optional uint32 player_max = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_player_max(), target);
  }

  // optional fixed64 steamidlobby = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_steamidlobby(), target);
  }

  // optional uint64 searchid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_searchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmaking_SearchForGame_Request)
  return target;
}

size_t CQueuedMatchmaking_SearchForGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmaking_SearchForGame_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameSearchParam params = 3;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional uint32 player_min = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_min());
    }

    // optional uint32 player_max = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_max());
    }

    // optional fixed64 steamidlobby = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 searchid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_searchid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmaking_SearchForGame_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmaking_SearchForGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmaking_SearchForGame_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmaking_SearchForGame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmaking_SearchForGame_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmaking_SearchForGame_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmaking_SearchForGame_Request::MergeFrom(const CQueuedMatchmaking_SearchForGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmaking_SearchForGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_min_ = from.player_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_max_ = from.player_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamidlobby_ = from.steamidlobby_;
    }
    if (cached_has_bits & 0x00000020u) {
      searchid_ = from.searchid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmaking_SearchForGame_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmaking_SearchForGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmaking_SearchForGame_Request::CopyFrom(const CQueuedMatchmaking_SearchForGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmaking_SearchForGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmaking_SearchForGame_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmaking_SearchForGame_Request::InternalSwap(CQueuedMatchmaking_SearchForGame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQueuedMatchmaking_SearchForGame_Request, searchid_)
      + sizeof(CQueuedMatchmaking_SearchForGame_Request::searchid_)
      - PROTOBUF_FIELD_OFFSET(CQueuedMatchmaking_SearchForGame_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmaking_SearchForGame_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmaking_SearchForGame_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CQueuedMatchmaking_SearchForGame_Response>()._has_bits_);
  static void set_has_gamesearchresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_searchid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_time_estimate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_poll_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_players_in_match(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_players_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_connect_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamidhost(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rtime_match_made(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rtime_now(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steamid_canceled_search(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CQueuedMatchmaking_SearchForGame_Response::CQueuedMatchmaking_SearchForGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmaking_SearchForGame_Response)
}
CQueuedMatchmaking_SearchForGame_Response::CQueuedMatchmaking_SearchForGame_Response(const CQueuedMatchmaking_SearchForGame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connect_string()) {
    connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connect_string(), 
      GetArena());
  }
  ::memcpy(&searchid_, &from.searchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_canceled_search_) -
    reinterpret_cast<char*>(&searchid_)) + sizeof(steamid_canceled_search_));
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmaking_SearchForGame_Response)
}

void CQueuedMatchmaking_SearchForGame_Response::SharedCtor() {
connect_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&searchid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_canceled_search_) -
    reinterpret_cast<char*>(&searchid_)) + sizeof(steamid_canceled_search_));
}

CQueuedMatchmaking_SearchForGame_Response::~CQueuedMatchmaking_SearchForGame_Response() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmaking_SearchForGame_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmaking_SearchForGame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connect_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CQueuedMatchmaking_SearchForGame_Response::ArenaDtor(void* object) {
  CQueuedMatchmaking_SearchForGame_Response* _this = reinterpret_cast< CQueuedMatchmaking_SearchForGame_Response* >(object);
  (void)_this;
}
void CQueuedMatchmaking_SearchForGame_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmaking_SearchForGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmaking_SearchForGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmaking_SearchForGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connect_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&searchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_accepted_) -
        reinterpret_cast<char*>(&searchid_)) + sizeof(players_accepted_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&steamidhost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_canceled_search_) -
        reinterpret_cast<char*>(&steamidhost_)) + sizeof(steamid_canceled_search_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmaking_SearchForGame_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGameSearchResult gamesearchresult = 1 [default = EGameSearchResult_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameSearchResult_IsValid(val))) {
            _internal_set_gamesearchresult(static_cast<::EGameSearchResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 searchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_searchid(&has_bits);
          searchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_time_estimate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds_time_estimate(&has_bits);
          seconds_time_estimate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poll_frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_poll_frequency(&has_bits);
          poll_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count_searching = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count_searching(&has_bits);
          count_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_in_match = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_players_in_match(&has_bits);
          players_in_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_accepted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_players_accepted(&has_bits);
          players_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connect_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_connect_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CQueuedMatchmaking_SearchForGame_Response.connect_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamidhost = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steamidhost(&has_bits);
          steamidhost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_match_made = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_rtime_match_made(&has_bits);
          rtime_match_made_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_now = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rtime_now(&has_bits);
          rtime_now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid_canceled_search = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steamid_canceled_search(&has_bits);
          steamid_canceled_search_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmaking_SearchForGame_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmaking_SearchForGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGameSearchResult gamesearchresult = 1 [default = EGameSearchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gamesearchresult(), target);
  }

  // optional uint64 searchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_searchid(), target);
  }

  // optional uint32 seconds_time_estimate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds_time_estimate(), target);
  }

  // optional uint32 poll_frequency = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_poll_frequency(), target);
  }

  // optional uint32 count_searching = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_count_searching(), target);
  }

  // optional uint32 players_in_match = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_players_in_match(), target);
  }

  // optional uint32 players_accepted = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_players_accepted(), target);
  }

  // optional string connect_string = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect_string().data(), static_cast<int>(this->_internal_connect_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CQueuedMatchmaking_SearchForGame_Response.connect_string");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_connect_string(), target);
  }

  // optional fixed64 steamidhost = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_steamidhost(), target);
  }

  // optional uint32 rtime_match_made = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rtime_match_made(), target);
  }

  // optional uint32 rtime_now = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rtime_now(), target);
  }

  // optional fixed64 steamid_canceled_search = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(13, this->_internal_steamid_canceled_search(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmaking_SearchForGame_Response)
  return target;
}

size_t CQueuedMatchmaking_SearchForGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmaking_SearchForGame_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connect_string = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect_string());
    }

    // optional uint64 searchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_searchid());
    }

    // optional .EGameSearchResult gamesearchresult = 1 [default = EGameSearchResult_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamesearchresult());
    }

    // optional uint32 seconds_time_estimate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_time_estimate());
    }

    // optional uint32 poll_frequency = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poll_frequency());
    }

    // optional uint32 count_searching = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count_searching());
    }

    // optional uint32 players_in_match = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_in_match());
    }

    // optional uint32 players_accepted = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_accepted());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed64 steamidhost = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 rtime_match_made = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_match_made());
    }

    // optional uint32 rtime_now = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_now());
    }

    // optional fixed64 steamid_canceled_search = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmaking_SearchForGame_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmaking_SearchForGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmaking_SearchForGame_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmaking_SearchForGame_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmaking_SearchForGame_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmaking_SearchForGame_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmaking_SearchForGame_Response::MergeFrom(const CQueuedMatchmaking_SearchForGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmaking_SearchForGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connect_string(from._internal_connect_string());
    }
    if (cached_has_bits & 0x00000002u) {
      searchid_ = from.searchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamesearchresult_ = from.gamesearchresult_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_time_estimate_ = from.seconds_time_estimate_;
    }
    if (cached_has_bits & 0x00000010u) {
      poll_frequency_ = from.poll_frequency_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_searching_ = from.count_searching_;
    }
    if (cached_has_bits & 0x00000040u) {
      players_in_match_ = from.players_in_match_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_accepted_ = from.players_accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      steamidhost_ = from.steamidhost_;
    }
    if (cached_has_bits & 0x00000200u) {
      rtime_match_made_ = from.rtime_match_made_;
    }
    if (cached_has_bits & 0x00000400u) {
      rtime_now_ = from.rtime_now_;
    }
    if (cached_has_bits & 0x00000800u) {
      steamid_canceled_search_ = from.steamid_canceled_search_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmaking_SearchForGame_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmaking_SearchForGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmaking_SearchForGame_Response::CopyFrom(const CQueuedMatchmaking_SearchForGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmaking_SearchForGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmaking_SearchForGame_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmaking_SearchForGame_Response::InternalSwap(CQueuedMatchmaking_SearchForGame_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connect_string_.Swap(&other->connect_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQueuedMatchmaking_SearchForGame_Response, steamid_canceled_search_)
      + sizeof(CQueuedMatchmaking_SearchForGame_Response::steamid_canceled_search_)
      - PROTOBUF_FIELD_OFFSET(CQueuedMatchmaking_SearchForGame_Response, searchid_)>(
          reinterpret_cast<char*>(&searchid_),
          reinterpret_cast<char*>(&other->searchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmaking_SearchForGame_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmakingGameHost_SearchForPlayers_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQueuedMatchmakingGameHost_SearchForPlayers_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_min(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_max_team_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_connection_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_searchid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CQueuedMatchmakingGameHost_SearchForPlayers_Request::CQueuedMatchmakingGameHost_SearchForPlayers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
}
CQueuedMatchmakingGameHost_SearchForPlayers_Request::CQueuedMatchmakingGameHost_SearchForPlayers_Request(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connection_string()) {
    connection_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_string(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_max_team_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(player_max_team_size_));
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SharedCtor() {
connection_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_max_team_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(player_max_team_size_));
}

CQueuedMatchmakingGameHost_SearchForPlayers_Request::~CQueuedMatchmakingGameHost_SearchForPlayers_Request() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connection_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::ArenaDtor(void* object) {
  CQueuedMatchmakingGameHost_SearchForPlayers_Request* _this = reinterpret_cast< CQueuedMatchmakingGameHost_SearchForPlayers_Request* >(object);
  (void)_this;
}
void CQueuedMatchmakingGameHost_SearchForPlayers_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmakingGameHost_SearchForPlayers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_max_team_size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(player_max_team_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmakingGameHost_SearchForPlayers_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameSearchAction_IsValid(val))) {
            _internal_set_action(static_cast<::EGameSearchAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .GameSearchParam params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 player_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_min(&has_bits);
          player_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_player_max(&has_bits);
          player_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_max_team_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_player_max_team_size(&has_bits);
          player_max_team_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string connection_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_connection_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 searchid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_searchid(&has_bits);
          searchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmakingGameHost_SearchForPlayers_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // repeated .GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_params(i), target, stream);
  }

  // optional uint32 player_min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_min(), target);
  }

  // optional uint32 player_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_player_max(), target);
  }

  // optional uint32 player_max_team_size = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_player_max_team_size(), target);
  }

  // optional string connection_string = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_string().data(), static_cast<int>(this->_internal_connection_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_connection_string(), target);
  }

  // optional uint64 searchid = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_searchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  return target;
}

size_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameSearchParam params = 3;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string connection_string = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_string());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional uint32 player_min = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_min());
    }

    // optional uint32 player_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_max());
    }

    // optional uint64 searchid = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_searchid());
    }

    // optional uint32 player_max_team_size = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_max_team_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SearchForPlayers_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SearchForPlayers_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::MergeFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_string(from._internal_connection_string());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_min_ = from.player_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_max_ = from.player_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      searchid_ = from.searchid_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_max_team_size_ = from.player_max_team_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::CopyFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Request::InternalSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  connection_string_.Swap(&other->connection_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_SearchForPlayers_Request, player_max_team_size_)
      + sizeof(CQueuedMatchmakingGameHost_SearchForPlayers_Request::player_max_team_size_)
      - PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_SearchForPlayers_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmakingGameHost_SearchForPlayers_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerFound::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerFound>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerFound::PlayerFound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerFound)
}
PlayerFound::PlayerFound(const PlayerFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_number_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(team_number_));
  // @@protoc_insertion_point(copy_constructor:PlayerFound)
}

void PlayerFound::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_number_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(team_number_));
}

PlayerFound::~PlayerFound() {
  // @@protoc_insertion_point(destructor:PlayerFound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerFound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerFound::ArenaDtor(void* object) {
  PlayerFound* _this = reinterpret_cast< PlayerFound* >(object);
  (void)_this;
}
void PlayerFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerFound::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_number_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(team_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameSearchAction_IsValid(val))) {
            _internal_set_action(static_cast<::EGameSearchAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .GameSearchParam params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 team_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // repeated .GameSearchParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_params(i), target, stream);
  }

  // optional uint32 team_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerFound)
  return target;
}

size_t PlayerFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameSearchParam params = 3;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .EGameSearchAction action = 2 [default = EGameSearchAction_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional uint32 team_number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerFound)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerFound)
    MergeFrom(*source);
  }
}

void PlayerFound::MergeFrom(const PlayerFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_number_ = from.team_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFound::CopyFrom(const PlayerFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFound::IsInitialized() const {
  return true;
}

void PlayerFound::InternalSwap(PlayerFound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerFound, team_number_)
      + sizeof(PlayerFound::team_number_)
      - PROTOBUF_FIELD_OFFSET(PlayerFound, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmakingGameHost_SearchForPlayers_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CQueuedMatchmakingGameHost_SearchForPlayers_Response>()._has_bits_);
  static void set_has_gamesearchresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_searchid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_poll_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtime_match_made(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime_now(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CQueuedMatchmakingGameHost_SearchForPlayers_Response::CQueuedMatchmakingGameHost_SearchForPlayers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
}
CQueuedMatchmakingGameHost_SearchForPlayers_Response::CQueuedMatchmakingGameHost_SearchForPlayers_Response(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&searchid_, &from.searchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_now_) -
    reinterpret_cast<char*>(&searchid_)) + sizeof(rtime_now_));
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&searchid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_now_) -
    reinterpret_cast<char*>(&searchid_)) + sizeof(rtime_now_));
}

CQueuedMatchmakingGameHost_SearchForPlayers_Response::~CQueuedMatchmakingGameHost_SearchForPlayers_Response() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::ArenaDtor(void* object) {
  CQueuedMatchmakingGameHost_SearchForPlayers_Response* _this = reinterpret_cast< CQueuedMatchmakingGameHost_SearchForPlayers_Response* >(object);
  (void)_this;
}
void CQueuedMatchmakingGameHost_SearchForPlayers_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmakingGameHost_SearchForPlayers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&searchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_now_) -
        reinterpret_cast<char*>(&searchid_)) + sizeof(rtime_now_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmakingGameHost_SearchForPlayers_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGameSearchResult gamesearchresult = 1 [default = EGameSearchResult_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGameSearchResult_IsValid(val))) {
            _internal_set_gamesearchresult(static_cast<::EGameSearchResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 searchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_searchid(&has_bits);
          searchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poll_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_poll_frequency(&has_bits);
          poll_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerFound players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_match_made = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rtime_match_made(&has_bits);
          rtime_match_made_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_now = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rtime_now(&has_bits);
          rtime_now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmakingGameHost_SearchForPlayers_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGameSearchResult gamesearchresult = 1 [default = EGameSearchResult_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gamesearchresult(), target);
  }

  // optional uint64 searchid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_searchid(), target);
  }

  // optional uint32 poll_frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_poll_frequency(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_matchid(), target);
  }

  // repeated .PlayerFound players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_players(i), target, stream);
  }

  // optional uint32 rtime_match_made = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rtime_match_made(), target);
  }

  // optional uint32 rtime_now = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rtime_now(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  return target;
}

size_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerFound players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 searchid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_searchid());
    }

    // optional .EGameSearchResult gamesearchresult = 1 [default = EGameSearchResult_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamesearchresult());
    }

    // optional uint32 poll_frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poll_frequency());
    }

    // optional uint64 matchid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 rtime_match_made = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_match_made());
    }

    // optional uint32 rtime_now = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_now());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SearchForPlayers_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SearchForPlayers_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::MergeFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      searchid_ = from.searchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamesearchresult_ = from.gamesearchresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_frequency_ = from.poll_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime_match_made_ = from.rtime_match_made_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtime_now_ = from.rtime_now_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::CopyFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SearchForPlayers_Response::InternalSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_SearchForPlayers_Response, rtime_now_)
      + sizeof(CQueuedMatchmakingGameHost_SearchForPlayers_Response::rtime_now_)
      - PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_SearchForPlayers_Response, searchid_)>(
          reinterpret_cast<char*>(&searchid_),
          reinterpret_cast<char*>(&other->searchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmakingGameHost_SearchForPlayers_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerResult>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayerResult::PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:PlayerResult)
}

void PlayerResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(value_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:PlayerResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerResult::ArenaDtor(void* object) {
  PlayerResult* _this = reinterpret_cast< PlayerResult* >(object);
  (void)_this;
}
void PlayerResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerResult)
  return target;
}

size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerResult)
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  return true;
}

void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerResult, value_)
      + sizeof(PlayerResult::value_)
      - PROTOBUF_FIELD_OFFSET(PlayerResult, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
}
CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_results_(from.player_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matchid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
}

CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::~CQueuedMatchmakingGameHost_SubmitPlayerResult_Request() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::ArenaDtor(void* object) {
  CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* _this = reinterpret_cast< CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* >(object);
  (void)_this;
}
void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PlayerResult player_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_matchid(), target);
  }

  // repeated .PlayerResult player_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_player_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  return target;
}

size_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerResult player_results = 3;
  total_size += 1UL * this->_internal_player_results_size();
  for (const auto& msg : this->player_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::MergeFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_results_.MergeFrom(from.player_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::CopyFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::InternalSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_results_.InternalSwap(&other->player_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, appid_)
      + sizeof(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request, matchid_)>(
          reinterpret_cast<char*>(&matchid_),
          reinterpret_cast<char*>(&other->matchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::_Internal {
 public:
};

CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
}
CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SharedCtor() {
}

CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::~CQueuedMatchmakingGameHost_SubmitPlayerResult_Response() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::ArenaDtor(void* object) {
  CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* _this = reinterpret_cast< CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* >(object);
  (void)_this;
}
void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  return target;
}

size_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmakingGameHost_SubmitPlayerResult_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::MergeFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::CopyFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::InternalSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmakingGameHost_EndGame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQueuedMatchmakingGameHost_EndGame_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CQueuedMatchmakingGameHost_EndGame_Request::CQueuedMatchmakingGameHost_EndGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmakingGameHost_EndGame_Request)
}
CQueuedMatchmakingGameHost_EndGame_Request::CQueuedMatchmakingGameHost_EndGame_Request(const CQueuedMatchmakingGameHost_EndGame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmakingGameHost_EndGame_Request)
}

void CQueuedMatchmakingGameHost_EndGame_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matchid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
}

CQueuedMatchmakingGameHost_EndGame_Request::~CQueuedMatchmakingGameHost_EndGame_Request() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmakingGameHost_EndGame_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmakingGameHost_EndGame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CQueuedMatchmakingGameHost_EndGame_Request::ArenaDtor(void* object) {
  CQueuedMatchmakingGameHost_EndGame_Request* _this = reinterpret_cast< CQueuedMatchmakingGameHost_EndGame_Request* >(object);
  (void)_this;
}
void CQueuedMatchmakingGameHost_EndGame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmakingGameHost_EndGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmakingGameHost_EndGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmakingGameHost_EndGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&matchid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmakingGameHost_EndGame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmakingGameHost_EndGame_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmakingGameHost_EndGame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_matchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmakingGameHost_EndGame_Request)
  return target;
}

size_t CQueuedMatchmakingGameHost_EndGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmakingGameHost_EndGame_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_EndGame_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmakingGameHost_EndGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_EndGame_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmakingGameHost_EndGame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmakingGameHost_EndGame_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmakingGameHost_EndGame_Request)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_EndGame_Request::MergeFrom(const CQueuedMatchmakingGameHost_EndGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmakingGameHost_EndGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CQueuedMatchmakingGameHost_EndGame_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmakingGameHost_EndGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_EndGame_Request::CopyFrom(const CQueuedMatchmakingGameHost_EndGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmakingGameHost_EndGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_EndGame_Request::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_EndGame_Request::InternalSwap(CQueuedMatchmakingGameHost_EndGame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_EndGame_Request, appid_)
      + sizeof(CQueuedMatchmakingGameHost_EndGame_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CQueuedMatchmakingGameHost_EndGame_Request, matchid_)>(
          reinterpret_cast<char*>(&matchid_),
          reinterpret_cast<char*>(&other->matchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmakingGameHost_EndGame_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CQueuedMatchmakingGameHost_EndGame_Response::_Internal {
 public:
};

CQueuedMatchmakingGameHost_EndGame_Response::CQueuedMatchmakingGameHost_EndGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CQueuedMatchmakingGameHost_EndGame_Response)
}
CQueuedMatchmakingGameHost_EndGame_Response::CQueuedMatchmakingGameHost_EndGame_Response(const CQueuedMatchmakingGameHost_EndGame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CQueuedMatchmakingGameHost_EndGame_Response)
}

void CQueuedMatchmakingGameHost_EndGame_Response::SharedCtor() {
}

CQueuedMatchmakingGameHost_EndGame_Response::~CQueuedMatchmakingGameHost_EndGame_Response() {
  // @@protoc_insertion_point(destructor:CQueuedMatchmakingGameHost_EndGame_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CQueuedMatchmakingGameHost_EndGame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CQueuedMatchmakingGameHost_EndGame_Response::ArenaDtor(void* object) {
  CQueuedMatchmakingGameHost_EndGame_Response* _this = reinterpret_cast< CQueuedMatchmakingGameHost_EndGame_Response* >(object);
  (void)_this;
}
void CQueuedMatchmakingGameHost_EndGame_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQueuedMatchmakingGameHost_EndGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQueuedMatchmakingGameHost_EndGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQueuedMatchmakingGameHost_EndGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQueuedMatchmakingGameHost_EndGame_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQueuedMatchmakingGameHost_EndGame_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQueuedMatchmakingGameHost_EndGame_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQueuedMatchmakingGameHost_EndGame_Response)
  return target;
}

size_t CQueuedMatchmakingGameHost_EndGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQueuedMatchmakingGameHost_EndGame_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CQueuedMatchmakingGameHost_EndGame_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQueuedMatchmakingGameHost_EndGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQueuedMatchmakingGameHost_EndGame_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CQueuedMatchmakingGameHost_EndGame_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQueuedMatchmakingGameHost_EndGame_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQueuedMatchmakingGameHost_EndGame_Response)
    MergeFrom(*source);
  }
}

void CQueuedMatchmakingGameHost_EndGame_Response::MergeFrom(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQueuedMatchmakingGameHost_EndGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CQueuedMatchmakingGameHost_EndGame_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQueuedMatchmakingGameHost_EndGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQueuedMatchmakingGameHost_EndGame_Response::CopyFrom(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQueuedMatchmakingGameHost_EndGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQueuedMatchmakingGameHost_EndGame_Response::IsInitialized() const {
  return true;
}

void CQueuedMatchmakingGameHost_EndGame_Response::InternalSwap(CQueuedMatchmakingGameHost_EndGame_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CQueuedMatchmakingGameHost_EndGame_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QueuedMatchmaking::~QueuedMatchmaking() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* QueuedMatchmaking::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* QueuedMatchmaking::GetDescriptor() {
  return descriptor();
}

void QueuedMatchmaking::SearchForGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CQueuedMatchmaking_SearchForGame_Request*,
                         ::CQueuedMatchmaking_SearchForGame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SearchForGame() not implemented.");
  done->Run();
}

void QueuedMatchmaking::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      SearchForGame(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CQueuedMatchmaking_SearchForGame_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CQueuedMatchmaking_SearchForGame_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& QueuedMatchmaking::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CQueuedMatchmaking_SearchForGame_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& QueuedMatchmaking::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CQueuedMatchmaking_SearchForGame_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

QueuedMatchmaking_Stub::QueuedMatchmaking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
QueuedMatchmaking_Stub::QueuedMatchmaking_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
QueuedMatchmaking_Stub::~QueuedMatchmaking_Stub() {
  if (owns_channel_) delete channel_;
}

void QueuedMatchmaking_Stub::SearchForGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CQueuedMatchmaking_SearchForGame_Request* request,
                              ::CQueuedMatchmaking_SearchForGame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

QueuedMatchmakingGameHost::~QueuedMatchmakingGameHost() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* QueuedMatchmakingGameHost::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fqms_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* QueuedMatchmakingGameHost::GetDescriptor() {
  return descriptor();
}

void QueuedMatchmakingGameHost::SearchForPlayers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CQueuedMatchmakingGameHost_SearchForPlayers_Request*,
                         ::CQueuedMatchmakingGameHost_SearchForPlayers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SearchForPlayers() not implemented.");
  done->Run();
}

void QueuedMatchmakingGameHost::SubmitPlayerResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request*,
                         ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SubmitPlayerResult() not implemented.");
  done->Run();
}

void QueuedMatchmakingGameHost::EndGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CQueuedMatchmakingGameHost_EndGame_Request*,
                         ::CQueuedMatchmakingGameHost_EndGame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndGame() not implemented.");
  done->Run();
}

void QueuedMatchmakingGameHost::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fqms_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      SearchForPlayers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CQueuedMatchmakingGameHost_SearchForPlayers_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CQueuedMatchmakingGameHost_SearchForPlayers_Response*>(
                 response),
             done);
      break;
    case 1:
      SubmitPlayerResult(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response*>(
                 response),
             done);
      break;
    case 2:
      EndGame(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CQueuedMatchmakingGameHost_EndGame_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CQueuedMatchmakingGameHost_EndGame_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& QueuedMatchmakingGameHost::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CQueuedMatchmakingGameHost_SearchForPlayers_Request::default_instance();
    case 1:
      return ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::default_instance();
    case 2:
      return ::CQueuedMatchmakingGameHost_EndGame_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& QueuedMatchmakingGameHost::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CQueuedMatchmakingGameHost_SearchForPlayers_Response::default_instance();
    case 1:
      return ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response::default_instance();
    case 2:
      return ::CQueuedMatchmakingGameHost_EndGame_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

QueuedMatchmakingGameHost_Stub::QueuedMatchmakingGameHost_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
QueuedMatchmakingGameHost_Stub::QueuedMatchmakingGameHost_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
QueuedMatchmakingGameHost_Stub::~QueuedMatchmakingGameHost_Stub() {
  if (owns_channel_) delete channel_;
}

void QueuedMatchmakingGameHost_Stub::SearchForPlayers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CQueuedMatchmakingGameHost_SearchForPlayers_Request* request,
                              ::CQueuedMatchmakingGameHost_SearchForPlayers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void QueuedMatchmakingGameHost_Stub::SubmitPlayerResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* request,
                              ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void QueuedMatchmakingGameHost_Stub::EndGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CQueuedMatchmakingGameHost_EndGame_Request* request,
                              ::CQueuedMatchmakingGameHost_EndGame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameSearchParam* Arena::CreateMaybeMessage< ::GameSearchParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameSearchParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmaking_SearchForGame_Request* Arena::CreateMaybeMessage< ::CQueuedMatchmaking_SearchForGame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmaking_SearchForGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmaking_SearchForGame_Response* Arena::CreateMaybeMessage< ::CQueuedMatchmaking_SearchForGame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmaking_SearchForGame_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmakingGameHost_SearchForPlayers_Request* Arena::CreateMaybeMessage< ::CQueuedMatchmakingGameHost_SearchForPlayers_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmakingGameHost_SearchForPlayers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerFound* Arena::CreateMaybeMessage< ::PlayerFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerFound >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmakingGameHost_SearchForPlayers_Response* Arena::CreateMaybeMessage< ::CQueuedMatchmakingGameHost_SearchForPlayers_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmakingGameHost_SearchForPlayers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerResult* Arena::CreateMaybeMessage< ::PlayerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* Arena::CreateMaybeMessage< ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* Arena::CreateMaybeMessage< ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmakingGameHost_EndGame_Request* Arena::CreateMaybeMessage< ::CQueuedMatchmakingGameHost_EndGame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmakingGameHost_EndGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CQueuedMatchmakingGameHost_EndGame_Response* Arena::CreateMaybeMessage< ::CQueuedMatchmakingGameHost_EndGame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQueuedMatchmakingGameHost_EndGame_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
