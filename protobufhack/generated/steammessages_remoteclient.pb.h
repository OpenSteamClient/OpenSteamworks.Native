// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "steammessages_base.pb.h"
#include "steammessages_remoteclient_discovery.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fremoteclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(int index);
class CMsgRemoteClientAcceptEULA;
struct CMsgRemoteClientAcceptEULADefaultTypeInternal;
extern CMsgRemoteClientAcceptEULADefaultTypeInternal _CMsgRemoteClientAcceptEULA_default_instance_;
class CMsgRemoteClientAppStatus;
struct CMsgRemoteClientAppStatusDefaultTypeInternal;
extern CMsgRemoteClientAppStatusDefaultTypeInternal _CMsgRemoteClientAppStatus_default_instance_;
class CMsgRemoteClientAppStatus_AppStatus;
struct CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal;
extern CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal _CMsgRemoteClientAppStatus_AppStatus_default_instance_;
class CMsgRemoteClientAppStatus_AppUpdateInfo;
struct CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal;
extern CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal _CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_;
class CMsgRemoteClientAppStatus_ShortcutInfo;
struct CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal;
extern CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal _CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_;
class CMsgRemoteClientGetControllerConfig;
struct CMsgRemoteClientGetControllerConfigDefaultTypeInternal;
extern CMsgRemoteClientGetControllerConfigDefaultTypeInternal _CMsgRemoteClientGetControllerConfig_default_instance_;
class CMsgRemoteClientGetControllerConfigResponse;
struct CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal;
extern CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal _CMsgRemoteClientGetControllerConfigResponse_default_instance_;
class CMsgRemoteClientPing;
struct CMsgRemoteClientPingDefaultTypeInternal;
extern CMsgRemoteClientPingDefaultTypeInternal _CMsgRemoteClientPing_default_instance_;
class CMsgRemoteClientPingResponse;
struct CMsgRemoteClientPingResponseDefaultTypeInternal;
extern CMsgRemoteClientPingResponseDefaultTypeInternal _CMsgRemoteClientPingResponse_default_instance_;
class CMsgRemoteClientStartStream;
struct CMsgRemoteClientStartStreamDefaultTypeInternal;
extern CMsgRemoteClientStartStreamDefaultTypeInternal _CMsgRemoteClientStartStream_default_instance_;
class CMsgRemoteClientStartStreamResponse;
struct CMsgRemoteClientStartStreamResponseDefaultTypeInternal;
extern CMsgRemoteClientStartStreamResponseDefaultTypeInternal _CMsgRemoteClientStartStreamResponse_default_instance_;
class CMsgRemoteClientStartStream_ReservedGamepad;
struct CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal;
extern CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal _CMsgRemoteClientStartStream_ReservedGamepad_default_instance_;
class CMsgRemoteClientStatus;
struct CMsgRemoteClientStatusDefaultTypeInternal;
extern CMsgRemoteClientStatusDefaultTypeInternal _CMsgRemoteClientStatus_default_instance_;
class CMsgRemoteClientStreamingEnabled;
struct CMsgRemoteClientStreamingEnabledDefaultTypeInternal;
extern CMsgRemoteClientStreamingEnabledDefaultTypeInternal _CMsgRemoteClientStreamingEnabled_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgRemoteClientAcceptEULA* Arena::CreateMaybeMessage<::CMsgRemoteClientAcceptEULA>(Arena*);
template<> ::CMsgRemoteClientAppStatus* Arena::CreateMaybeMessage<::CMsgRemoteClientAppStatus>(Arena*);
template<> ::CMsgRemoteClientAppStatus_AppStatus* Arena::CreateMaybeMessage<::CMsgRemoteClientAppStatus_AppStatus>(Arena*);
template<> ::CMsgRemoteClientAppStatus_AppUpdateInfo* Arena::CreateMaybeMessage<::CMsgRemoteClientAppStatus_AppUpdateInfo>(Arena*);
template<> ::CMsgRemoteClientAppStatus_ShortcutInfo* Arena::CreateMaybeMessage<::CMsgRemoteClientAppStatus_ShortcutInfo>(Arena*);
template<> ::CMsgRemoteClientGetControllerConfig* Arena::CreateMaybeMessage<::CMsgRemoteClientGetControllerConfig>(Arena*);
template<> ::CMsgRemoteClientGetControllerConfigResponse* Arena::CreateMaybeMessage<::CMsgRemoteClientGetControllerConfigResponse>(Arena*);
template<> ::CMsgRemoteClientPing* Arena::CreateMaybeMessage<::CMsgRemoteClientPing>(Arena*);
template<> ::CMsgRemoteClientPingResponse* Arena::CreateMaybeMessage<::CMsgRemoteClientPingResponse>(Arena*);
template<> ::CMsgRemoteClientStartStream* Arena::CreateMaybeMessage<::CMsgRemoteClientStartStream>(Arena*);
template<> ::CMsgRemoteClientStartStreamResponse* Arena::CreateMaybeMessage<::CMsgRemoteClientStartStreamResponse>(Arena*);
template<> ::CMsgRemoteClientStartStream_ReservedGamepad* Arena::CreateMaybeMessage<::CMsgRemoteClientStartStream_ReservedGamepad>(Arena*);
template<> ::CMsgRemoteClientStatus* Arena::CreateMaybeMessage<::CMsgRemoteClientStatus>(Arena*);
template<> ::CMsgRemoteClientStreamingEnabled* Arena::CreateMaybeMessage<::CMsgRemoteClientStreamingEnabled>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgRemoteClientStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientStatus) */ {
 public:
  inline CMsgRemoteClientStatus() : CMsgRemoteClientStatus(nullptr) {}
  virtual ~CMsgRemoteClientStatus();
  explicit constexpr CMsgRemoteClientStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientStatus(const CMsgRemoteClientStatus& from);
  CMsgRemoteClientStatus(CMsgRemoteClientStatus&& from) noexcept
    : CMsgRemoteClientStatus() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientStatus& operator=(const CMsgRemoteClientStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientStatus& operator=(CMsgRemoteClientStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientStatus*>(
               &_CMsgRemoteClientStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgRemoteClientStatus& a, CMsgRemoteClientStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientStatus* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientStatus>(nullptr);
  }

  CMsgRemoteClientStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientStatus& from);
  void MergeFrom(const CMsgRemoteClientStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientStatus";
  }
  protected:
  explicit CMsgRemoteClientStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kInstanceIdFieldNumber = 2,
  };
  // optional .CMsgRemoteClientBroadcastStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::CMsgRemoteClientBroadcastStatus& status() const;
  ::CMsgRemoteClientBroadcastStatus* release_status();
  ::CMsgRemoteClientBroadcastStatus* mutable_status();
  void set_allocated_status(::CMsgRemoteClientBroadcastStatus* status);
  private:
  const ::CMsgRemoteClientBroadcastStatus& _internal_status() const;
  ::CMsgRemoteClientBroadcastStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::CMsgRemoteClientBroadcastStatus* status);
  ::CMsgRemoteClientBroadcastStatus* unsafe_arena_release_status();

  // optional uint64 client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 instance_id = 2;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instance_id() const;
  void _internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgRemoteClientBroadcastStatus* status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instance_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientAppStatus_AppUpdateInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientAppStatus.AppUpdateInfo) */ {
 public:
  inline CMsgRemoteClientAppStatus_AppUpdateInfo() : CMsgRemoteClientAppStatus_AppUpdateInfo(nullptr) {}
  virtual ~CMsgRemoteClientAppStatus_AppUpdateInfo();
  explicit constexpr CMsgRemoteClientAppStatus_AppUpdateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientAppStatus_AppUpdateInfo(const CMsgRemoteClientAppStatus_AppUpdateInfo& from);
  CMsgRemoteClientAppStatus_AppUpdateInfo(CMsgRemoteClientAppStatus_AppUpdateInfo&& from) noexcept
    : CMsgRemoteClientAppStatus_AppUpdateInfo() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientAppStatus_AppUpdateInfo& operator=(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientAppStatus_AppUpdateInfo& operator=(CMsgRemoteClientAppStatus_AppUpdateInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientAppStatus_AppUpdateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientAppStatus_AppUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientAppStatus_AppUpdateInfo*>(
               &_CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgRemoteClientAppStatus_AppUpdateInfo& a, CMsgRemoteClientAppStatus_AppUpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientAppStatus_AppUpdateInfo* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus_AppUpdateInfo>(nullptr);
  }

  CMsgRemoteClientAppStatus_AppUpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus_AppUpdateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from);
  void MergeFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientAppStatus_AppUpdateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientAppStatus.AppUpdateInfo";
  }
  protected:
  explicit CMsgRemoteClientAppStatus_AppUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesToDownloadFieldNumber = 2,
    kBytesDownloadedFieldNumber = 3,
    kBytesToProcessFieldNumber = 4,
    kTimeUpdateStartFieldNumber = 1,
    kUpdateResultFieldNumber = 7,
    kBytesProcessedFieldNumber = 5,
    kUpdateStateFieldNumber = 8,
    kEstimatedSecondsRemainingFieldNumber = 6,
  };
  // optional uint64 bytes_to_download = 2;
  bool has_bytes_to_download() const;
  private:
  bool _internal_has_bytes_to_download() const;
  public:
  void clear_bytes_to_download();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_to_download() const;
  void set_bytes_to_download(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes_to_download() const;
  void _internal_set_bytes_to_download(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 bytes_downloaded = 3;
  bool has_bytes_downloaded() const;
  private:
  bool _internal_has_bytes_downloaded() const;
  public:
  void clear_bytes_downloaded();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_downloaded() const;
  void set_bytes_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes_downloaded() const;
  void _internal_set_bytes_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 bytes_to_process = 4;
  bool has_bytes_to_process() const;
  private:
  bool _internal_has_bytes_to_process() const;
  public:
  void clear_bytes_to_process();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_to_process() const;
  void set_bytes_to_process(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes_to_process() const;
  void _internal_set_bytes_to_process(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 time_update_start = 1;
  bool has_time_update_start() const;
  private:
  bool _internal_has_time_update_start() const;
  public:
  void clear_time_update_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_update_start() const;
  void set_time_update_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_update_start() const;
  void _internal_set_time_update_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 update_result = 7;
  bool has_update_result() const;
  private:
  bool _internal_has_update_result() const;
  public:
  void clear_update_result();
  ::PROTOBUF_NAMESPACE_ID::int32 update_result() const;
  void set_update_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_update_result() const;
  void _internal_set_update_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 bytes_processed = 5;
  bool has_bytes_processed() const;
  private:
  bool _internal_has_bytes_processed() const;
  public:
  void clear_bytes_processed();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_processed() const;
  void set_bytes_processed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes_processed() const;
  void _internal_set_bytes_processed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 update_state = 8;
  bool has_update_state() const;
  private:
  bool _internal_has_update_state() const;
  public:
  void clear_update_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_state() const;
  void set_update_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_state() const;
  void _internal_set_update_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 estimated_seconds_remaining = 6 [default = -1];
  bool has_estimated_seconds_remaining() const;
  private:
  bool _internal_has_estimated_seconds_remaining() const;
  public:
  void clear_estimated_seconds_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 estimated_seconds_remaining() const;
  void set_estimated_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_estimated_seconds_remaining() const;
  void _internal_set_estimated_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientAppStatus.AppUpdateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_to_download_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_downloaded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_to_process_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_update_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 update_result_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_processed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 estimated_seconds_remaining_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientAppStatus_ShortcutInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientAppStatus.ShortcutInfo) */ {
 public:
  inline CMsgRemoteClientAppStatus_ShortcutInfo() : CMsgRemoteClientAppStatus_ShortcutInfo(nullptr) {}
  virtual ~CMsgRemoteClientAppStatus_ShortcutInfo();
  explicit constexpr CMsgRemoteClientAppStatus_ShortcutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientAppStatus_ShortcutInfo(const CMsgRemoteClientAppStatus_ShortcutInfo& from);
  CMsgRemoteClientAppStatus_ShortcutInfo(CMsgRemoteClientAppStatus_ShortcutInfo&& from) noexcept
    : CMsgRemoteClientAppStatus_ShortcutInfo() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientAppStatus_ShortcutInfo& operator=(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientAppStatus_ShortcutInfo& operator=(CMsgRemoteClientAppStatus_ShortcutInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientAppStatus_ShortcutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientAppStatus_ShortcutInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientAppStatus_ShortcutInfo*>(
               &_CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgRemoteClientAppStatus_ShortcutInfo& a, CMsgRemoteClientAppStatus_ShortcutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientAppStatus_ShortcutInfo* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus_ShortcutInfo>(nullptr);
  }

  CMsgRemoteClientAppStatus_ShortcutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus_ShortcutInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from);
  void MergeFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientAppStatus_ShortcutInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientAppStatus.ShortcutInfo";
  }
  protected:
  explicit CMsgRemoteClientAppStatus_ShortcutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 3,
    kNameFieldNumber = 1,
    kIconFieldNumber = 2,
    kExepathFieldNumber = 4,
  };
  // repeated string categories = 3;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 2;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string exepath = 4;
  bool has_exepath() const;
  private:
  bool _internal_has_exepath() const;
  public:
  void clear_exepath();
  const std::string& exepath() const;
  void set_exepath(const std::string& value);
  void set_exepath(std::string&& value);
  void set_exepath(const char* value);
  void set_exepath(const char* value, size_t size);
  std::string* mutable_exepath();
  std::string* release_exepath();
  void set_allocated_exepath(std::string* exepath);
  private:
  const std::string& _internal_exepath() const;
  void _internal_set_exepath(const std::string& value);
  std::string* _internal_mutable_exepath();
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientAppStatus.ShortcutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exepath_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientAppStatus_AppStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientAppStatus.AppStatus) */ {
 public:
  inline CMsgRemoteClientAppStatus_AppStatus() : CMsgRemoteClientAppStatus_AppStatus(nullptr) {}
  virtual ~CMsgRemoteClientAppStatus_AppStatus();
  explicit constexpr CMsgRemoteClientAppStatus_AppStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientAppStatus_AppStatus(const CMsgRemoteClientAppStatus_AppStatus& from);
  CMsgRemoteClientAppStatus_AppStatus(CMsgRemoteClientAppStatus_AppStatus&& from) noexcept
    : CMsgRemoteClientAppStatus_AppStatus() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientAppStatus_AppStatus& operator=(const CMsgRemoteClientAppStatus_AppStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientAppStatus_AppStatus& operator=(CMsgRemoteClientAppStatus_AppStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientAppStatus_AppStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientAppStatus_AppStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientAppStatus_AppStatus*>(
               &_CMsgRemoteClientAppStatus_AppStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgRemoteClientAppStatus_AppStatus& a, CMsgRemoteClientAppStatus_AppStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientAppStatus_AppStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientAppStatus_AppStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientAppStatus_AppStatus* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus_AppStatus>(nullptr);
  }

  CMsgRemoteClientAppStatus_AppStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus_AppStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientAppStatus_AppStatus& from);
  void MergeFrom(const CMsgRemoteClientAppStatus_AppStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientAppStatus_AppStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientAppStatus.AppStatus";
  }
  protected:
  explicit CMsgRemoteClientAppStatus_AppStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateInfoFieldNumber = 3,
    kShortcutInfoFieldNumber = 4,
    kAppIdFieldNumber = 1,
    kAppStateFieldNumber = 2,
    kLaunchAvailableFieldNumber = 5,
  };
  // optional .CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
  bool has_update_info() const;
  private:
  bool _internal_has_update_info() const;
  public:
  void clear_update_info();
  const ::CMsgRemoteClientAppStatus_AppUpdateInfo& update_info() const;
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* release_update_info();
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* mutable_update_info();
  void set_allocated_update_info(::CMsgRemoteClientAppStatus_AppUpdateInfo* update_info);
  private:
  const ::CMsgRemoteClientAppStatus_AppUpdateInfo& _internal_update_info() const;
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* _internal_mutable_update_info();
  public:
  void unsafe_arena_set_allocated_update_info(
      ::CMsgRemoteClientAppStatus_AppUpdateInfo* update_info);
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* unsafe_arena_release_update_info();

  // optional .CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
  bool has_shortcut_info() const;
  private:
  bool _internal_has_shortcut_info() const;
  public:
  void clear_shortcut_info();
  const ::CMsgRemoteClientAppStatus_ShortcutInfo& shortcut_info() const;
  ::CMsgRemoteClientAppStatus_ShortcutInfo* release_shortcut_info();
  ::CMsgRemoteClientAppStatus_ShortcutInfo* mutable_shortcut_info();
  void set_allocated_shortcut_info(::CMsgRemoteClientAppStatus_ShortcutInfo* shortcut_info);
  private:
  const ::CMsgRemoteClientAppStatus_ShortcutInfo& _internal_shortcut_info() const;
  ::CMsgRemoteClientAppStatus_ShortcutInfo* _internal_mutable_shortcut_info();
  public:
  void unsafe_arena_set_allocated_shortcut_info(
      ::CMsgRemoteClientAppStatus_ShortcutInfo* shortcut_info);
  ::CMsgRemoteClientAppStatus_ShortcutInfo* unsafe_arena_release_shortcut_info();

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 app_state = 2;
  bool has_app_state() const;
  private:
  bool _internal_has_app_state() const;
  public:
  void clear_app_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_state() const;
  void set_app_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_state() const;
  void _internal_set_app_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool launch_available = 5 [default = true];
  bool has_launch_available() const;
  private:
  bool _internal_has_launch_available() const;
  public:
  void clear_launch_available();
  bool launch_available() const;
  void set_launch_available(bool value);
  private:
  bool _internal_launch_available() const;
  void _internal_set_launch_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientAppStatus.AppStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* update_info_;
  ::CMsgRemoteClientAppStatus_ShortcutInfo* shortcut_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_state_;
  bool launch_available_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientAppStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientAppStatus) */ {
 public:
  inline CMsgRemoteClientAppStatus() : CMsgRemoteClientAppStatus(nullptr) {}
  virtual ~CMsgRemoteClientAppStatus();
  explicit constexpr CMsgRemoteClientAppStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientAppStatus(const CMsgRemoteClientAppStatus& from);
  CMsgRemoteClientAppStatus(CMsgRemoteClientAppStatus&& from) noexcept
    : CMsgRemoteClientAppStatus() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientAppStatus& operator=(const CMsgRemoteClientAppStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientAppStatus& operator=(CMsgRemoteClientAppStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientAppStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientAppStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientAppStatus*>(
               &_CMsgRemoteClientAppStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgRemoteClientAppStatus& a, CMsgRemoteClientAppStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientAppStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientAppStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientAppStatus* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus>(nullptr);
  }

  CMsgRemoteClientAppStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientAppStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientAppStatus& from);
  void MergeFrom(const CMsgRemoteClientAppStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientAppStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientAppStatus";
  }
  protected:
  explicit CMsgRemoteClientAppStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgRemoteClientAppStatus_AppUpdateInfo AppUpdateInfo;
  typedef CMsgRemoteClientAppStatus_ShortcutInfo ShortcutInfo;
  typedef CMsgRemoteClientAppStatus_AppStatus AppStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusUpdatesFieldNumber = 1,
  };
  // repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  int status_updates_size() const;
  private:
  int _internal_status_updates_size() const;
  public:
  void clear_status_updates();
  ::CMsgRemoteClientAppStatus_AppStatus* mutable_status_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientAppStatus_AppStatus >*
      mutable_status_updates();
  private:
  const ::CMsgRemoteClientAppStatus_AppStatus& _internal_status_updates(int index) const;
  ::CMsgRemoteClientAppStatus_AppStatus* _internal_add_status_updates();
  public:
  const ::CMsgRemoteClientAppStatus_AppStatus& status_updates(int index) const;
  ::CMsgRemoteClientAppStatus_AppStatus* add_status_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientAppStatus_AppStatus >&
      status_updates() const;

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientAppStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientAppStatus_AppStatus > status_updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientStartStream_ReservedGamepad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientStartStream.ReservedGamepad) */ {
 public:
  inline CMsgRemoteClientStartStream_ReservedGamepad() : CMsgRemoteClientStartStream_ReservedGamepad(nullptr) {}
  virtual ~CMsgRemoteClientStartStream_ReservedGamepad();
  explicit constexpr CMsgRemoteClientStartStream_ReservedGamepad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientStartStream_ReservedGamepad(const CMsgRemoteClientStartStream_ReservedGamepad& from);
  CMsgRemoteClientStartStream_ReservedGamepad(CMsgRemoteClientStartStream_ReservedGamepad&& from) noexcept
    : CMsgRemoteClientStartStream_ReservedGamepad() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientStartStream_ReservedGamepad& operator=(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientStartStream_ReservedGamepad& operator=(CMsgRemoteClientStartStream_ReservedGamepad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientStartStream_ReservedGamepad& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientStartStream_ReservedGamepad* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientStartStream_ReservedGamepad*>(
               &_CMsgRemoteClientStartStream_ReservedGamepad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgRemoteClientStartStream_ReservedGamepad& a, CMsgRemoteClientStartStream_ReservedGamepad& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientStartStream_ReservedGamepad* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientStartStream_ReservedGamepad>(nullptr);
  }

  CMsgRemoteClientStartStream_ReservedGamepad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientStartStream_ReservedGamepad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from);
  void MergeFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientStartStream_ReservedGamepad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientStartStream.ReservedGamepad";
  }
  protected:
  explicit CMsgRemoteClientStartStream_ReservedGamepad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerTypeFieldNumber = 1,
    kControllerSubtypeFieldNumber = 2,
  };
  // optional uint32 controller_type = 1;
  bool has_controller_type() const;
  private:
  bool _internal_has_controller_type() const;
  public:
  void clear_controller_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_type() const;
  void set_controller_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_type() const;
  void _internal_set_controller_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 controller_subtype = 2;
  bool has_controller_subtype() const;
  private:
  bool _internal_has_controller_subtype() const;
  public:
  void clear_controller_subtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_subtype() const;
  void set_controller_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_subtype() const;
  void _internal_set_controller_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientStartStream.ReservedGamepad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_subtype_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientStartStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientStartStream) */ {
 public:
  inline CMsgRemoteClientStartStream() : CMsgRemoteClientStartStream(nullptr) {}
  virtual ~CMsgRemoteClientStartStream();
  explicit constexpr CMsgRemoteClientStartStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientStartStream(const CMsgRemoteClientStartStream& from);
  CMsgRemoteClientStartStream(CMsgRemoteClientStartStream&& from) noexcept
    : CMsgRemoteClientStartStream() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientStartStream& operator=(const CMsgRemoteClientStartStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientStartStream& operator=(CMsgRemoteClientStartStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientStartStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientStartStream* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientStartStream*>(
               &_CMsgRemoteClientStartStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgRemoteClientStartStream& a, CMsgRemoteClientStartStream& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientStartStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientStartStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientStartStream* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientStartStream>(nullptr);
  }

  CMsgRemoteClientStartStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientStartStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientStartStream& from);
  void MergeFrom(const CMsgRemoteClientStartStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientStartStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientStartStream";
  }
  protected:
  explicit CMsgRemoteClientStartStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgRemoteClientStartStream_ReservedGamepad ReservedGamepad;

  // accessors -------------------------------------------------------

  enum : int {
    kGamepadsFieldNumber = 9,
    kSupportedTransportFieldNumber = 11,
    kUnlocparentalLockFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kEnvironmentFieldNumber = 2,
    kGamepadCountFieldNumber = 3,
    kLocparentalLockFieldNumber = 5,
    kMaximumResolutionXFieldNumber = 7,
    kMaximumResolutionYFieldNumber = 8,
    kLaunchOptionFieldNumber = 4,
    kAudioChannelCountFieldNumber = 10,
  };
  // repeated .CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  int gamepads_size() const;
  private:
  int _internal_gamepads_size() const;
  public:
  void clear_gamepads();
  ::CMsgRemoteClientStartStream_ReservedGamepad* mutable_gamepads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientStartStream_ReservedGamepad >*
      mutable_gamepads();
  private:
  const ::CMsgRemoteClientStartStream_ReservedGamepad& _internal_gamepads(int index) const;
  ::CMsgRemoteClientStartStream_ReservedGamepad* _internal_add_gamepads();
  public:
  const ::CMsgRemoteClientStartStream_ReservedGamepad& gamepads(int index) const;
  ::CMsgRemoteClientStartStream_ReservedGamepad* add_gamepads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientStartStream_ReservedGamepad >&
      gamepads() const;

  // repeated .EStreamTransport supported_transport = 11;
  int supported_transport_size() const;
  private:
  int _internal_supported_transport_size() const;
  public:
  void clear_supported_transport();
  private:
  ::EStreamTransport _internal_supported_transport(int index) const;
  void _internal_add_supported_transport(::EStreamTransport value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_transport();
  public:
  ::EStreamTransport supported_transport(int index) const;
  void set_supported_transport(int index, ::EStreamTransport value);
  void add_supported_transport(::EStreamTransport value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_transport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_transport();

  // optional string unlocparental_lock = 6;
  bool has_unlocparental_lock() const;
  private:
  bool _internal_has_unlocparental_lock() const;
  public:
  void clear_unlocparental_lock();
  const std::string& unlocparental_lock() const;
  void set_unlocparental_lock(const std::string& value);
  void set_unlocparental_lock(std::string&& value);
  void set_unlocparental_lock(const char* value);
  void set_unlocparental_lock(const char* value, size_t size);
  std::string* mutable_unlocparental_lock();
  std::string* release_unlocparental_lock();
  void set_allocated_unlocparental_lock(std::string* unlocparental_lock);
  private:
  const std::string& _internal_unlocparental_lock() const;
  void _internal_set_unlocparental_lock(const std::string& value);
  std::string* _internal_mutable_unlocparental_lock();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 environment = 2;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  ::PROTOBUF_NAMESPACE_ID::int32 environment() const;
  void set_environment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_environment() const;
  void _internal_set_environment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 gamepad_count = 3;
  bool has_gamepad_count() const;
  private:
  bool _internal_has_gamepad_count() const;
  public:
  void clear_gamepad_count();
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_count() const;
  void set_gamepad_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamepad_count() const;
  void _internal_set_gamepad_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool locparental_lock = 5 [default = false];
  bool has_locparental_lock() const;
  private:
  bool _internal_has_locparental_lock() const;
  public:
  void clear_locparental_lock();
  bool locparental_lock() const;
  void set_locparental_lock(bool value);
  private:
  bool _internal_locparental_lock() const;
  void _internal_set_locparental_lock(bool value);
  public:

  // optional int32 maximum_resolution_x = 7;
  bool has_maximum_resolution_x() const;
  private:
  bool _internal_has_maximum_resolution_x() const;
  public:
  void clear_maximum_resolution_x();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_resolution_x() const;
  void set_maximum_resolution_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_resolution_x() const;
  void _internal_set_maximum_resolution_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 maximum_resolution_y = 8;
  bool has_maximum_resolution_y() const;
  private:
  bool _internal_has_maximum_resolution_y() const;
  public:
  void clear_maximum_resolution_y();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_resolution_y() const;
  void set_maximum_resolution_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_resolution_y() const;
  void _internal_set_maximum_resolution_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 launch_option = 4 [default = -1];
  bool has_launch_option() const;
  private:
  bool _internal_has_launch_option() const;
  public:
  void clear_launch_option();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_option() const;
  void set_launch_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_launch_option() const;
  void _internal_set_launch_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 audio_channel_count = 10 [default = 2];
  bool has_audio_channel_count() const;
  private:
  bool _internal_has_audio_channel_count() const;
  public:
  void clear_audio_channel_count();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_channel_count() const;
  void set_audio_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_audio_channel_count() const;
  void _internal_set_audio_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientStartStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientStartStream_ReservedGamepad > gamepads_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_transport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unlocparental_lock_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 environment_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_count_;
  bool locparental_lock_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_resolution_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_resolution_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_option_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_channel_count_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientStartStreamResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientStartStreamResponse) */ {
 public:
  inline CMsgRemoteClientStartStreamResponse() : CMsgRemoteClientStartStreamResponse(nullptr) {}
  virtual ~CMsgRemoteClientStartStreamResponse();
  explicit constexpr CMsgRemoteClientStartStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientStartStreamResponse(const CMsgRemoteClientStartStreamResponse& from);
  CMsgRemoteClientStartStreamResponse(CMsgRemoteClientStartStreamResponse&& from) noexcept
    : CMsgRemoteClientStartStreamResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientStartStreamResponse& operator=(const CMsgRemoteClientStartStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientStartStreamResponse& operator=(CMsgRemoteClientStartStreamResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientStartStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientStartStreamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientStartStreamResponse*>(
               &_CMsgRemoteClientStartStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgRemoteClientStartStreamResponse& a, CMsgRemoteClientStartStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientStartStreamResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientStartStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientStartStreamResponse* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientStartStreamResponse>(nullptr);
  }

  CMsgRemoteClientStartStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientStartStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientStartStreamResponse& from);
  void MergeFrom(const CMsgRemoteClientStartStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientStartStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientStartStreamResponse";
  }
  protected:
  explicit CMsgRemoteClientStartStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchOptionsFieldNumber = 3,
    kAuthTokenFieldNumber = 4,
    kRelayServerFieldNumber = 6,
    kLaunchTaskFieldNumber = 7,
    kLaunchTasdetailFieldNumber = 8,
    kStreamPortFieldNumber = 2,
    kLaunchTasksDoneFieldNumber = 9,
    kLaunchTasksTotalFieldNumber = 10,
    kELaunchResultFieldNumber = 1,
    kTransportFieldNumber = 5,
  };
  // repeated int32 launch_options = 3;
  int launch_options_size() const;
  private:
  int _internal_launch_options_size() const;
  public:
  void clear_launch_options();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_launch_options(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_launch_options() const;
  void _internal_add_launch_options(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_launch_options();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 launch_options(int index) const;
  void set_launch_options(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_launch_options(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      launch_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_launch_options();

  // optional bytes auth_token = 4;
  bool has_auth_token() const;
  private:
  bool _internal_has_auth_token() const;
  public:
  void clear_auth_token();
  const std::string& auth_token() const;
  void set_auth_token(const std::string& value);
  void set_auth_token(std::string&& value);
  void set_auth_token(const char* value);
  void set_auth_token(const void* value, size_t size);
  std::string* mutable_auth_token();
  std::string* release_auth_token();
  void set_allocated_auth_token(std::string* auth_token);
  private:
  const std::string& _internal_auth_token() const;
  void _internal_set_auth_token(const std::string& value);
  std::string* _internal_mutable_auth_token();
  public:

  // optional string relay_server = 6;
  bool has_relay_server() const;
  private:
  bool _internal_has_relay_server() const;
  public:
  void clear_relay_server();
  const std::string& relay_server() const;
  void set_relay_server(const std::string& value);
  void set_relay_server(std::string&& value);
  void set_relay_server(const char* value);
  void set_relay_server(const char* value, size_t size);
  std::string* mutable_relay_server();
  std::string* release_relay_server();
  void set_allocated_relay_server(std::string* relay_server);
  private:
  const std::string& _internal_relay_server() const;
  void _internal_set_relay_server(const std::string& value);
  std::string* _internal_mutable_relay_server();
  public:

  // optional string launch_task = 7;
  bool has_launch_task() const;
  private:
  bool _internal_has_launch_task() const;
  public:
  void clear_launch_task();
  const std::string& launch_task() const;
  void set_launch_task(const std::string& value);
  void set_launch_task(std::string&& value);
  void set_launch_task(const char* value);
  void set_launch_task(const char* value, size_t size);
  std::string* mutable_launch_task();
  std::string* release_launch_task();
  void set_allocated_launch_task(std::string* launch_task);
  private:
  const std::string& _internal_launch_task() const;
  void _internal_set_launch_task(const std::string& value);
  std::string* _internal_mutable_launch_task();
  public:

  // optional string launch_tasdetail = 8;
  bool has_launch_tasdetail() const;
  private:
  bool _internal_has_launch_tasdetail() const;
  public:
  void clear_launch_tasdetail();
  const std::string& launch_tasdetail() const;
  void set_launch_tasdetail(const std::string& value);
  void set_launch_tasdetail(std::string&& value);
  void set_launch_tasdetail(const char* value);
  void set_launch_tasdetail(const char* value, size_t size);
  std::string* mutable_launch_tasdetail();
  std::string* release_launch_tasdetail();
  void set_allocated_launch_tasdetail(std::string* launch_tasdetail);
  private:
  const std::string& _internal_launch_tasdetail() const;
  void _internal_set_launch_tasdetail(const std::string& value);
  std::string* _internal_mutable_launch_tasdetail();
  public:

  // optional uint32 stream_port = 2;
  bool has_stream_port() const;
  private:
  bool _internal_has_stream_port() const;
  public:
  void clear_stream_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_port() const;
  void set_stream_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_port() const;
  void _internal_set_stream_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 launch_tasks_done = 9;
  bool has_launch_tasks_done() const;
  private:
  bool _internal_has_launch_tasks_done() const;
  public:
  void clear_launch_tasks_done();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_tasks_done() const;
  void set_launch_tasks_done(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_launch_tasks_done() const;
  void _internal_set_launch_tasks_done(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 launch_tasks_total = 10;
  bool has_launch_tasks_total() const;
  private:
  bool _internal_has_launch_tasks_total() const;
  public:
  void clear_launch_tasks_total();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_tasks_total() const;
  void set_launch_tasks_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_launch_tasks_total() const;
  void _internal_set_launch_tasks_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 e_launch_result = 1 [default = 2];
  bool has_e_launch_result() const;
  private:
  bool _internal_has_e_launch_result() const;
  public:
  void clear_e_launch_result();
  ::PROTOBUF_NAMESPACE_ID::int32 e_launch_result() const;
  void set_e_launch_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_e_launch_result() const;
  void _internal_set_e_launch_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .EStreamTransport transport = 5 [default = EStreamTransportUDP];
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  ::EStreamTransport transport() const;
  void set_transport(::EStreamTransport value);
  private:
  ::EStreamTransport _internal_transport() const;
  void _internal_set_transport(::EStreamTransport value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientStartStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > launch_options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relay_server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_task_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_tasdetail_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_tasks_done_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_tasks_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 e_launch_result_;
  int transport_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientPing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientPing) */ {
 public:
  inline CMsgRemoteClientPing() : CMsgRemoteClientPing(nullptr) {}
  virtual ~CMsgRemoteClientPing();
  explicit constexpr CMsgRemoteClientPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientPing(const CMsgRemoteClientPing& from);
  CMsgRemoteClientPing(CMsgRemoteClientPing&& from) noexcept
    : CMsgRemoteClientPing() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientPing& operator=(const CMsgRemoteClientPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientPing& operator=(CMsgRemoteClientPing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientPing* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientPing*>(
               &_CMsgRemoteClientPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgRemoteClientPing& a, CMsgRemoteClientPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientPing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientPing* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientPing>(nullptr);
  }

  CMsgRemoteClientPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientPing& from);
  void MergeFrom(const CMsgRemoteClientPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientPing";
  }
  protected:
  explicit CMsgRemoteClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientPingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientPingResponse) */ {
 public:
  inline CMsgRemoteClientPingResponse() : CMsgRemoteClientPingResponse(nullptr) {}
  virtual ~CMsgRemoteClientPingResponse();
  explicit constexpr CMsgRemoteClientPingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientPingResponse(const CMsgRemoteClientPingResponse& from);
  CMsgRemoteClientPingResponse(CMsgRemoteClientPingResponse&& from) noexcept
    : CMsgRemoteClientPingResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientPingResponse& operator=(const CMsgRemoteClientPingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientPingResponse& operator=(CMsgRemoteClientPingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientPingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientPingResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientPingResponse*>(
               &_CMsgRemoteClientPingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgRemoteClientPingResponse& a, CMsgRemoteClientPingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientPingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientPingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientPingResponse* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientPingResponse>(nullptr);
  }

  CMsgRemoteClientPingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientPingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientPingResponse& from);
  void MergeFrom(const CMsgRemoteClientPingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientPingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientPingResponse";
  }
  protected:
  explicit CMsgRemoteClientPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientPingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientAcceptEULA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientAcceptEULA) */ {
 public:
  inline CMsgRemoteClientAcceptEULA() : CMsgRemoteClientAcceptEULA(nullptr) {}
  virtual ~CMsgRemoteClientAcceptEULA();
  explicit constexpr CMsgRemoteClientAcceptEULA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientAcceptEULA(const CMsgRemoteClientAcceptEULA& from);
  CMsgRemoteClientAcceptEULA(CMsgRemoteClientAcceptEULA&& from) noexcept
    : CMsgRemoteClientAcceptEULA() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientAcceptEULA& operator=(const CMsgRemoteClientAcceptEULA& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientAcceptEULA& operator=(CMsgRemoteClientAcceptEULA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientAcceptEULA& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientAcceptEULA* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientAcceptEULA*>(
               &_CMsgRemoteClientAcceptEULA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgRemoteClientAcceptEULA& a, CMsgRemoteClientAcceptEULA& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientAcceptEULA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientAcceptEULA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientAcceptEULA* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientAcceptEULA>(nullptr);
  }

  CMsgRemoteClientAcceptEULA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientAcceptEULA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientAcceptEULA& from);
  void MergeFrom(const CMsgRemoteClientAcceptEULA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientAcceptEULA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientAcceptEULA";
  }
  protected:
  explicit CMsgRemoteClientAcceptEULA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kEulaIdFieldNumber = 2,
    kEulaVersionFieldNumber = 3,
  };
  // repeated uint32 app_id = 1;
  int app_id_size() const;
  private:
  int _internal_app_id_size() const;
  public:
  void clear_app_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_app_id() const;
  void _internal_add_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_app_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id(int index) const;
  void set_app_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      app_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_app_id();

  // repeated string eula_id = 2;
  int eula_id_size() const;
  private:
  int _internal_eula_id_size() const;
  public:
  void clear_eula_id();
  const std::string& eula_id(int index) const;
  std::string* mutable_eula_id(int index);
  void set_eula_id(int index, const std::string& value);
  void set_eula_id(int index, std::string&& value);
  void set_eula_id(int index, const char* value);
  void set_eula_id(int index, const char* value, size_t size);
  std::string* add_eula_id();
  void add_eula_id(const std::string& value);
  void add_eula_id(std::string&& value);
  void add_eula_id(const char* value);
  void add_eula_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& eula_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_eula_id();
  private:
  const std::string& _internal_eula_id(int index) const;
  std::string* _internal_add_eula_id();
  public:

  // repeated uint32 eula_version = 3;
  int eula_version_size() const;
  private:
  int _internal_eula_version_size() const;
  public:
  void clear_eula_version();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eula_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_eula_version() const;
  void _internal_add_eula_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_eula_version();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 eula_version(int index) const;
  void set_eula_version(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_eula_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      eula_version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_eula_version();

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientAcceptEULA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > app_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> eula_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > eula_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientGetControllerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientGetControllerConfig) */ {
 public:
  inline CMsgRemoteClientGetControllerConfig() : CMsgRemoteClientGetControllerConfig(nullptr) {}
  virtual ~CMsgRemoteClientGetControllerConfig();
  explicit constexpr CMsgRemoteClientGetControllerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientGetControllerConfig(const CMsgRemoteClientGetControllerConfig& from);
  CMsgRemoteClientGetControllerConfig(CMsgRemoteClientGetControllerConfig&& from) noexcept
    : CMsgRemoteClientGetControllerConfig() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientGetControllerConfig& operator=(const CMsgRemoteClientGetControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientGetControllerConfig& operator=(CMsgRemoteClientGetControllerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientGetControllerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientGetControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientGetControllerConfig*>(
               &_CMsgRemoteClientGetControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgRemoteClientGetControllerConfig& a, CMsgRemoteClientGetControllerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientGetControllerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientGetControllerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientGetControllerConfig* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientGetControllerConfig>(nullptr);
  }

  CMsgRemoteClientGetControllerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientGetControllerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientGetControllerConfig& from);
  void MergeFrom(const CMsgRemoteClientGetControllerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientGetControllerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientGetControllerConfig";
  }
  protected:
  explicit CMsgRemoteClientGetControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kControllerIndexFieldNumber = 3,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 controller_index = 3;
  bool has_controller_index() const;
  private:
  bool _internal_has_controller_index() const;
  public:
  void clear_controller_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index() const;
  void set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controller_index() const;
  void _internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientGetControllerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controller_index_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientGetControllerConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientGetControllerConfigResponse) */ {
 public:
  inline CMsgRemoteClientGetControllerConfigResponse() : CMsgRemoteClientGetControllerConfigResponse(nullptr) {}
  virtual ~CMsgRemoteClientGetControllerConfigResponse();
  explicit constexpr CMsgRemoteClientGetControllerConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientGetControllerConfigResponse(const CMsgRemoteClientGetControllerConfigResponse& from);
  CMsgRemoteClientGetControllerConfigResponse(CMsgRemoteClientGetControllerConfigResponse&& from) noexcept
    : CMsgRemoteClientGetControllerConfigResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientGetControllerConfigResponse& operator=(const CMsgRemoteClientGetControllerConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientGetControllerConfigResponse& operator=(CMsgRemoteClientGetControllerConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientGetControllerConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientGetControllerConfigResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientGetControllerConfigResponse*>(
               &_CMsgRemoteClientGetControllerConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgRemoteClientGetControllerConfigResponse& a, CMsgRemoteClientGetControllerConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientGetControllerConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientGetControllerConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientGetControllerConfigResponse* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientGetControllerConfigResponse>(nullptr);
  }

  CMsgRemoteClientGetControllerConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientGetControllerConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientGetControllerConfigResponse& from);
  void MergeFrom(const CMsgRemoteClientGetControllerConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientGetControllerConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientGetControllerConfigResponse";
  }
  protected:
  explicit CMsgRemoteClientGetControllerConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigVdfFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional bytes config_vdf = 2;
  bool has_config_vdf() const;
  private:
  bool _internal_has_config_vdf() const;
  public:
  void clear_config_vdf();
  const std::string& config_vdf() const;
  void set_config_vdf(const std::string& value);
  void set_config_vdf(std::string&& value);
  void set_config_vdf(const char* value);
  void set_config_vdf(const void* value, size_t size);
  std::string* mutable_config_vdf();
  std::string* release_config_vdf();
  void set_allocated_config_vdf(std::string* config_vdf);
  private:
  const std::string& _internal_config_vdf() const;
  void _internal_set_config_vdf(const std::string& value);
  std::string* _internal_mutable_config_vdf();
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientGetControllerConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_vdf_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientStreamingEnabled PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRemoteClientStreamingEnabled) */ {
 public:
  inline CMsgRemoteClientStreamingEnabled() : CMsgRemoteClientStreamingEnabled(nullptr) {}
  virtual ~CMsgRemoteClientStreamingEnabled();
  explicit constexpr CMsgRemoteClientStreamingEnabled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRemoteClientStreamingEnabled(const CMsgRemoteClientStreamingEnabled& from);
  CMsgRemoteClientStreamingEnabled(CMsgRemoteClientStreamingEnabled&& from) noexcept
    : CMsgRemoteClientStreamingEnabled() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientStreamingEnabled& operator=(const CMsgRemoteClientStreamingEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRemoteClientStreamingEnabled& operator=(CMsgRemoteClientStreamingEnabled&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRemoteClientStreamingEnabled& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRemoteClientStreamingEnabled* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientStreamingEnabled*>(
               &_CMsgRemoteClientStreamingEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgRemoteClientStreamingEnabled& a, CMsgRemoteClientStreamingEnabled& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRemoteClientStreamingEnabled* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRemoteClientStreamingEnabled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientStreamingEnabled* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientStreamingEnabled>(nullptr);
  }

  CMsgRemoteClientStreamingEnabled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientStreamingEnabled>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRemoteClientStreamingEnabled& from);
  void MergeFrom(const CMsgRemoteClientStreamingEnabled& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientStreamingEnabled* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRemoteClientStreamingEnabled";
  }
  protected:
  explicit CMsgRemoteClientStreamingEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fremoteclient_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // required bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRemoteClientStreamingEnabled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_steammessages_5fremoteclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgRemoteClientStatus

// optional uint64 client_id = 1;
inline bool CMsgRemoteClientStatus::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientStatus::has_client_id() const {
  return _internal_has_client_id();
}
inline void CMsgRemoteClientStatus::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientStatus::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientStatus::client_id() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStatus.client_id)
  return _internal_client_id();
}
inline void CMsgRemoteClientStatus::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_ = value;
}
inline void CMsgRemoteClientStatus::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStatus.client_id)
}

// optional uint64 instance_id = 2;
inline bool CMsgRemoteClientStatus::_internal_has_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRemoteClientStatus::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void CMsgRemoteClientStatus::clear_instance_id() {
  instance_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientStatus::_internal_instance_id() const {
  return instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientStatus::instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStatus.instance_id)
  return _internal_instance_id();
}
inline void CMsgRemoteClientStatus::_internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  instance_id_ = value;
}
inline void CMsgRemoteClientStatus::set_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStatus.instance_id)
}

// optional .CMsgRemoteClientBroadcastStatus status = 3;
inline bool CMsgRemoteClientStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool CMsgRemoteClientStatus::has_status() const {
  return _internal_has_status();
}
inline const ::CMsgRemoteClientBroadcastStatus& CMsgRemoteClientStatus::_internal_status() const {
  const ::CMsgRemoteClientBroadcastStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgRemoteClientBroadcastStatus&>(
      ::_CMsgRemoteClientBroadcastStatus_default_instance_);
}
inline const ::CMsgRemoteClientBroadcastStatus& CMsgRemoteClientStatus::status() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStatus.status)
  return _internal_status();
}
inline void CMsgRemoteClientStatus::unsafe_arena_set_allocated_status(
    ::CMsgRemoteClientBroadcastStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgRemoteClientStatus.status)
}
inline ::CMsgRemoteClientBroadcastStatus* CMsgRemoteClientStatus::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgRemoteClientBroadcastStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgRemoteClientBroadcastStatus* CMsgRemoteClientStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientStatus.status)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgRemoteClientBroadcastStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::CMsgRemoteClientBroadcastStatus* CMsgRemoteClientStatus::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgRemoteClientBroadcastStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::CMsgRemoteClientBroadcastStatus* CMsgRemoteClientStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStatus.status)
  return _internal_mutable_status();
}
inline void CMsgRemoteClientStatus::set_allocated_status(::CMsgRemoteClientBroadcastStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientStatus.status)
}

// -------------------------------------------------------------------

// CMsgRemoteClientAppStatus_AppUpdateInfo

// optional fixed32 time_update_start = 1;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_time_update_start() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_time_update_start() const {
  return _internal_has_time_update_start();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_time_update_start() {
  time_update_start_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_time_update_start() const {
  return time_update_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppUpdateInfo::time_update_start() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.time_update_start)
  return _internal_time_update_start();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_time_update_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_update_start_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_time_update_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_update_start(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.time_update_start)
}

// optional uint64 bytes_to_download = 2;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_bytes_to_download() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_to_download() const {
  return _internal_has_bytes_to_download();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_to_download() {
  bytes_to_download_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_bytes_to_download() const {
  return bytes_to_download_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_to_download() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_download)
  return _internal_bytes_to_download();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_bytes_to_download(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_to_download_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_to_download(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes_to_download(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_download)
}

// optional uint64 bytes_downloaded = 3;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_bytes_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_downloaded() const {
  return _internal_has_bytes_downloaded();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_downloaded() {
  bytes_downloaded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_bytes_downloaded() const {
  return bytes_downloaded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_downloaded)
  return _internal_bytes_downloaded();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_bytes_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_downloaded_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes_downloaded(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_downloaded)
}

// optional uint64 bytes_to_process = 4;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_bytes_to_process() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_to_process() const {
  return _internal_has_bytes_to_process();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_to_process() {
  bytes_to_process_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_bytes_to_process() const {
  return bytes_to_process_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_to_process() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_process)
  return _internal_bytes_to_process();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_bytes_to_process(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bytes_to_process_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_to_process(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes_to_process(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_process)
}

// optional uint64 bytes_processed = 5;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_bytes_processed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_processed() const {
  return _internal_has_bytes_processed();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_processed() {
  bytes_processed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_bytes_processed() const {
  return bytes_processed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_processed() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_processed)
  return _internal_bytes_processed();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_bytes_processed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  bytes_processed_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_processed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes_processed(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_processed)
}

// optional int32 estimated_seconds_remaining = 6 [default = -1];
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_estimated_seconds_remaining() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_estimated_seconds_remaining() const {
  return _internal_has_estimated_seconds_remaining();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_estimated_seconds_remaining() {
  estimated_seconds_remaining_ = -1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_estimated_seconds_remaining() const {
  return estimated_seconds_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientAppStatus_AppUpdateInfo::estimated_seconds_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.estimated_seconds_remaining)
  return _internal_estimated_seconds_remaining();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_estimated_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  estimated_seconds_remaining_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_estimated_seconds_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_estimated_seconds_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.estimated_seconds_remaining)
}

// optional int32 update_result = 7;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_update_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_update_result() const {
  return _internal_has_update_result();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_update_result() {
  update_result_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_update_result() const {
  return update_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientAppStatus_AppUpdateInfo::update_result() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.update_result)
  return _internal_update_result();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_update_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  update_result_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_update_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_update_result(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.update_result)
}

// optional uint32 update_state = 8;
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_has_update_state() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_update_state() const {
  return _internal_has_update_state();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_update_state() {
  update_state_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_update_state() const {
  return update_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppUpdateInfo::update_state() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppUpdateInfo.update_state)
  return _internal_update_state();
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::_internal_set_update_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  update_state_ = value;
}
inline void CMsgRemoteClientAppStatus_AppUpdateInfo::set_update_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_state(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppUpdateInfo.update_state)
}

// -------------------------------------------------------------------

// CMsgRemoteClientAppStatus_ShortcutInfo

// optional string name = 1;
inline bool CMsgRemoteClientAppStatus_ShortcutInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_ShortcutInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.ShortcutInfo.name)
  return _internal_name();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.ShortcutInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::_internal_name() const {
  return name_.Get();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientAppStatus.ShortcutInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientAppStatus.ShortcutInfo.name)
}

// optional string icon = 2;
inline bool CMsgRemoteClientAppStatus_ShortcutInfo::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_ShortcutInfo::has_icon() const {
  return _internal_has_icon();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::icon() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
  return _internal_icon();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::_internal_icon() const {
  return icon_.Get();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::release_icon() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}

// repeated string categories = 3;
inline int CMsgRemoteClientAppStatus_ShortcutInfo::_internal_categories_size() const {
  return categories_.size();
}
inline int CMsgRemoteClientAppStatus_ShortcutInfo::categories_size() const {
  return _internal_categories_size();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::clear_categories() {
  categories_.Clear();
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return _internal_add_categories();
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return _internal_categories(index);
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return categories_.Mutable(index);
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  categories_.Mutable(index)->assign(value);
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::_internal_add_categories() {
  return categories_.Add();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(const std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgRemoteClientAppStatus_ShortcutInfo::categories() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgRemoteClientAppStatus_ShortcutInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return &categories_;
}

// optional string exepath = 4;
inline bool CMsgRemoteClientAppStatus_ShortcutInfo::_internal_has_exepath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_ShortcutInfo::has_exepath() const {
  return _internal_has_exepath();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::clear_exepath() {
  exepath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::exepath() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
  return _internal_exepath();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_exepath(const std::string& value) {
  _internal_set_exepath(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_exepath() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
  return _internal_mutable_exepath();
}
inline const std::string& CMsgRemoteClientAppStatus_ShortcutInfo::_internal_exepath() const {
  return exepath_.Get();
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::_internal_set_exepath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  exepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_exepath(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  exepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_exepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  exepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_exepath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  exepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::_internal_mutable_exepath() {
  _has_bits_[0] |= 0x00000004u;
  return exepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientAppStatus_ShortcutInfo::release_exepath() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
  if (!_internal_has_exepath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return exepath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientAppStatus_ShortcutInfo::set_allocated_exepath(std::string* exepath) {
  if (exepath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  exepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientAppStatus.ShortcutInfo.exepath)
}

// -------------------------------------------------------------------

// CMsgRemoteClientAppStatus_AppStatus

// optional uint32 app_id = 1;
inline bool CMsgRemoteClientAppStatus_AppStatus::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgRemoteClientAppStatus_AppStatus::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppStatus::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppStatus::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppStatus.app_id)
  return _internal_app_id();
}
inline void CMsgRemoteClientAppStatus_AppStatus::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgRemoteClientAppStatus_AppStatus::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppStatus.app_id)
}

// optional uint32 app_state = 2;
inline bool CMsgRemoteClientAppStatus_AppStatus::_internal_has_app_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::has_app_state() const {
  return _internal_has_app_state();
}
inline void CMsgRemoteClientAppStatus_AppStatus::clear_app_state() {
  app_state_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppStatus::_internal_app_state() const {
  return app_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAppStatus_AppStatus::app_state() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppStatus.app_state)
  return _internal_app_state();
}
inline void CMsgRemoteClientAppStatus_AppStatus::_internal_set_app_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  app_state_ = value;
}
inline void CMsgRemoteClientAppStatus_AppStatus::set_app_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_state(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppStatus.app_state)
}

// optional .CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
inline bool CMsgRemoteClientAppStatus_AppStatus::_internal_has_update_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || update_info_ != nullptr);
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::has_update_info() const {
  return _internal_has_update_info();
}
inline void CMsgRemoteClientAppStatus_AppStatus::clear_update_info() {
  if (update_info_ != nullptr) update_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgRemoteClientAppStatus_AppUpdateInfo& CMsgRemoteClientAppStatus_AppStatus::_internal_update_info() const {
  const ::CMsgRemoteClientAppStatus_AppUpdateInfo* p = update_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgRemoteClientAppStatus_AppUpdateInfo&>(
      ::_CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_);
}
inline const ::CMsgRemoteClientAppStatus_AppUpdateInfo& CMsgRemoteClientAppStatus_AppStatus::update_info() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppStatus.update_info)
  return _internal_update_info();
}
inline void CMsgRemoteClientAppStatus_AppStatus::unsafe_arena_set_allocated_update_info(
    ::CMsgRemoteClientAppStatus_AppUpdateInfo* update_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_info_);
  }
  update_info_ = update_info;
  if (update_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgRemoteClientAppStatus.AppStatus.update_info)
}
inline ::CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppStatus::release_update_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* temp = update_info_;
  update_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppStatus::unsafe_arena_release_update_info() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientAppStatus.AppStatus.update_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgRemoteClientAppStatus_AppUpdateInfo* temp = update_info_;
  update_info_ = nullptr;
  return temp;
}
inline ::CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppStatus::_internal_mutable_update_info() {
  _has_bits_[0] |= 0x00000001u;
  if (update_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgRemoteClientAppStatus_AppUpdateInfo>(GetArena());
    update_info_ = p;
  }
  return update_info_;
}
inline ::CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppStatus::mutable_update_info() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.AppStatus.update_info)
  return _internal_mutable_update_info();
}
inline void CMsgRemoteClientAppStatus_AppStatus::set_allocated_update_info(::CMsgRemoteClientAppStatus_AppUpdateInfo* update_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete update_info_;
  }
  if (update_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_info);
    if (message_arena != submessage_arena) {
      update_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_info_ = update_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientAppStatus.AppStatus.update_info)
}

// optional .CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
inline bool CMsgRemoteClientAppStatus_AppStatus::_internal_has_shortcut_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || shortcut_info_ != nullptr);
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::has_shortcut_info() const {
  return _internal_has_shortcut_info();
}
inline void CMsgRemoteClientAppStatus_AppStatus::clear_shortcut_info() {
  if (shortcut_info_ != nullptr) shortcut_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgRemoteClientAppStatus_ShortcutInfo& CMsgRemoteClientAppStatus_AppStatus::_internal_shortcut_info() const {
  const ::CMsgRemoteClientAppStatus_ShortcutInfo* p = shortcut_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgRemoteClientAppStatus_ShortcutInfo&>(
      ::_CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_);
}
inline const ::CMsgRemoteClientAppStatus_ShortcutInfo& CMsgRemoteClientAppStatus_AppStatus::shortcut_info() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
  return _internal_shortcut_info();
}
inline void CMsgRemoteClientAppStatus_AppStatus::unsafe_arena_set_allocated_shortcut_info(
    ::CMsgRemoteClientAppStatus_ShortcutInfo* shortcut_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_info_);
  }
  shortcut_info_ = shortcut_info;
  if (shortcut_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
}
inline ::CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_AppStatus::release_shortcut_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgRemoteClientAppStatus_ShortcutInfo* temp = shortcut_info_;
  shortcut_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_AppStatus::unsafe_arena_release_shortcut_info() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgRemoteClientAppStatus_ShortcutInfo* temp = shortcut_info_;
  shortcut_info_ = nullptr;
  return temp;
}
inline ::CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_AppStatus::_internal_mutable_shortcut_info() {
  _has_bits_[0] |= 0x00000002u;
  if (shortcut_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgRemoteClientAppStatus_ShortcutInfo>(GetArena());
    shortcut_info_ = p;
  }
  return shortcut_info_;
}
inline ::CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_AppStatus::mutable_shortcut_info() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
  return _internal_mutable_shortcut_info();
}
inline void CMsgRemoteClientAppStatus_AppStatus::set_allocated_shortcut_info(::CMsgRemoteClientAppStatus_ShortcutInfo* shortcut_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shortcut_info_;
  }
  if (shortcut_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shortcut_info);
    if (message_arena != submessage_arena) {
      shortcut_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shortcut_info_ = shortcut_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
}

// optional bool launch_available = 5 [default = true];
inline bool CMsgRemoteClientAppStatus_AppStatus::_internal_has_launch_available() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::has_launch_available() const {
  return _internal_has_launch_available();
}
inline void CMsgRemoteClientAppStatus_AppStatus::clear_launch_available() {
  launch_available_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::_internal_launch_available() const {
  return launch_available_;
}
inline bool CMsgRemoteClientAppStatus_AppStatus::launch_available() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.AppStatus.launch_available)
  return _internal_launch_available();
}
inline void CMsgRemoteClientAppStatus_AppStatus::_internal_set_launch_available(bool value) {
  _has_bits_[0] |= 0x00000010u;
  launch_available_ = value;
}
inline void CMsgRemoteClientAppStatus_AppStatus::set_launch_available(bool value) {
  _internal_set_launch_available(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAppStatus.AppStatus.launch_available)
}

// -------------------------------------------------------------------

// CMsgRemoteClientAppStatus

// repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
inline int CMsgRemoteClientAppStatus::_internal_status_updates_size() const {
  return status_updates_.size();
}
inline int CMsgRemoteClientAppStatus::status_updates_size() const {
  return _internal_status_updates_size();
}
inline void CMsgRemoteClientAppStatus::clear_status_updates() {
  status_updates_.Clear();
}
inline ::CMsgRemoteClientAppStatus_AppStatus* CMsgRemoteClientAppStatus::mutable_status_updates(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAppStatus.status_updates)
  return status_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientAppStatus_AppStatus >*
CMsgRemoteClientAppStatus::mutable_status_updates() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientAppStatus.status_updates)
  return &status_updates_;
}
inline const ::CMsgRemoteClientAppStatus_AppStatus& CMsgRemoteClientAppStatus::_internal_status_updates(int index) const {
  return status_updates_.Get(index);
}
inline const ::CMsgRemoteClientAppStatus_AppStatus& CMsgRemoteClientAppStatus::status_updates(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAppStatus.status_updates)
  return _internal_status_updates(index);
}
inline ::CMsgRemoteClientAppStatus_AppStatus* CMsgRemoteClientAppStatus::_internal_add_status_updates() {
  return status_updates_.Add();
}
inline ::CMsgRemoteClientAppStatus_AppStatus* CMsgRemoteClientAppStatus::add_status_updates() {
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAppStatus.status_updates)
  return _internal_add_status_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientAppStatus_AppStatus >&
CMsgRemoteClientAppStatus::status_updates() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientAppStatus.status_updates)
  return status_updates_;
}

// -------------------------------------------------------------------

// CMsgRemoteClientStartStream_ReservedGamepad

// optional uint32 controller_type = 1;
inline bool CMsgRemoteClientStartStream_ReservedGamepad::_internal_has_controller_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream_ReservedGamepad::has_controller_type() const {
  return _internal_has_controller_type();
}
inline void CMsgRemoteClientStartStream_ReservedGamepad::clear_controller_type() {
  controller_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStream_ReservedGamepad::_internal_controller_type() const {
  return controller_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStream_ReservedGamepad::controller_type() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.ReservedGamepad.controller_type)
  return _internal_controller_type();
}
inline void CMsgRemoteClientStartStream_ReservedGamepad::_internal_set_controller_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  controller_type_ = value;
}
inline void CMsgRemoteClientStartStream_ReservedGamepad::set_controller_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_type(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.ReservedGamepad.controller_type)
}

// optional uint32 controller_subtype = 2;
inline bool CMsgRemoteClientStartStream_ReservedGamepad::_internal_has_controller_subtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream_ReservedGamepad::has_controller_subtype() const {
  return _internal_has_controller_subtype();
}
inline void CMsgRemoteClientStartStream_ReservedGamepad::clear_controller_subtype() {
  controller_subtype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStream_ReservedGamepad::_internal_controller_subtype() const {
  return controller_subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStream_ReservedGamepad::controller_subtype() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.ReservedGamepad.controller_subtype)
  return _internal_controller_subtype();
}
inline void CMsgRemoteClientStartStream_ReservedGamepad::_internal_set_controller_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  controller_subtype_ = value;
}
inline void CMsgRemoteClientStartStream_ReservedGamepad::set_controller_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_subtype(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.ReservedGamepad.controller_subtype)
}

// -------------------------------------------------------------------

// CMsgRemoteClientStartStream

// optional uint32 app_id = 1;
inline bool CMsgRemoteClientStartStream::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgRemoteClientStartStream::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStream::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStream::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.app_id)
  return _internal_app_id();
}
inline void CMsgRemoteClientStartStream::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgRemoteClientStartStream::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.app_id)
}

// optional int32 environment = 2;
inline bool CMsgRemoteClientStartStream::_internal_has_environment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_environment() const {
  return _internal_has_environment();
}
inline void CMsgRemoteClientStartStream::clear_environment() {
  environment_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::_internal_environment() const {
  return environment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::environment() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.environment)
  return _internal_environment();
}
inline void CMsgRemoteClientStartStream::_internal_set_environment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  environment_ = value;
}
inline void CMsgRemoteClientStartStream::set_environment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.environment)
}

// optional int32 gamepad_count = 3;
inline bool CMsgRemoteClientStartStream::_internal_has_gamepad_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_gamepad_count() const {
  return _internal_has_gamepad_count();
}
inline void CMsgRemoteClientStartStream::clear_gamepad_count() {
  gamepad_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::_internal_gamepad_count() const {
  return gamepad_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::gamepad_count() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.gamepad_count)
  return _internal_gamepad_count();
}
inline void CMsgRemoteClientStartStream::_internal_set_gamepad_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gamepad_count_ = value;
}
inline void CMsgRemoteClientStartStream::set_gamepad_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamepad_count(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.gamepad_count)
}

// optional int32 launch_option = 4 [default = -1];
inline bool CMsgRemoteClientStartStream::_internal_has_launch_option() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_launch_option() const {
  return _internal_has_launch_option();
}
inline void CMsgRemoteClientStartStream::clear_launch_option() {
  launch_option_ = -1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::_internal_launch_option() const {
  return launch_option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::launch_option() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.launch_option)
  return _internal_launch_option();
}
inline void CMsgRemoteClientStartStream::_internal_set_launch_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  launch_option_ = value;
}
inline void CMsgRemoteClientStartStream::set_launch_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_launch_option(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.launch_option)
}

// optional bool locparental_lock = 5 [default = false];
inline bool CMsgRemoteClientStartStream::_internal_has_locparental_lock() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_locparental_lock() const {
  return _internal_has_locparental_lock();
}
inline void CMsgRemoteClientStartStream::clear_locparental_lock() {
  locparental_lock_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgRemoteClientStartStream::_internal_locparental_lock() const {
  return locparental_lock_;
}
inline bool CMsgRemoteClientStartStream::locparental_lock() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.locparental_lock)
  return _internal_locparental_lock();
}
inline void CMsgRemoteClientStartStream::_internal_set_locparental_lock(bool value) {
  _has_bits_[0] |= 0x00000010u;
  locparental_lock_ = value;
}
inline void CMsgRemoteClientStartStream::set_locparental_lock(bool value) {
  _internal_set_locparental_lock(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.locparental_lock)
}

// optional string unlocparental_lock = 6;
inline bool CMsgRemoteClientStartStream::_internal_has_unlocparental_lock() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_unlocparental_lock() const {
  return _internal_has_unlocparental_lock();
}
inline void CMsgRemoteClientStartStream::clear_unlocparental_lock() {
  unlocparental_lock_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgRemoteClientStartStream::unlocparental_lock() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.unlocparental_lock)
  return _internal_unlocparental_lock();
}
inline void CMsgRemoteClientStartStream::set_unlocparental_lock(const std::string& value) {
  _internal_set_unlocparental_lock(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.unlocparental_lock)
}
inline std::string* CMsgRemoteClientStartStream::mutable_unlocparental_lock() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStartStream.unlocparental_lock)
  return _internal_mutable_unlocparental_lock();
}
inline const std::string& CMsgRemoteClientStartStream::_internal_unlocparental_lock() const {
  return unlocparental_lock_.Get();
}
inline void CMsgRemoteClientStartStream::_internal_set_unlocparental_lock(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unlocparental_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientStartStream::set_unlocparental_lock(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unlocparental_lock_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientStartStream.unlocparental_lock)
}
inline void CMsgRemoteClientStartStream::set_unlocparental_lock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unlocparental_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientStartStream.unlocparental_lock)
}
inline void CMsgRemoteClientStartStream::set_unlocparental_lock(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unlocparental_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientStartStream.unlocparental_lock)
}
inline std::string* CMsgRemoteClientStartStream::_internal_mutable_unlocparental_lock() {
  _has_bits_[0] |= 0x00000001u;
  return unlocparental_lock_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientStartStream::release_unlocparental_lock() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientStartStream.unlocparental_lock)
  if (!_internal_has_unlocparental_lock()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unlocparental_lock_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientStartStream::set_allocated_unlocparental_lock(std::string* unlocparental_lock) {
  if (unlocparental_lock != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unlocparental_lock_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unlocparental_lock,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientStartStream.unlocparental_lock)
}

// optional int32 maximum_resolution_x = 7;
inline bool CMsgRemoteClientStartStream::_internal_has_maximum_resolution_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_maximum_resolution_x() const {
  return _internal_has_maximum_resolution_x();
}
inline void CMsgRemoteClientStartStream::clear_maximum_resolution_x() {
  maximum_resolution_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::_internal_maximum_resolution_x() const {
  return maximum_resolution_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::maximum_resolution_x() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.maximum_resolution_x)
  return _internal_maximum_resolution_x();
}
inline void CMsgRemoteClientStartStream::_internal_set_maximum_resolution_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  maximum_resolution_x_ = value;
}
inline void CMsgRemoteClientStartStream::set_maximum_resolution_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_resolution_x(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.maximum_resolution_x)
}

// optional int32 maximum_resolution_y = 8;
inline bool CMsgRemoteClientStartStream::_internal_has_maximum_resolution_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_maximum_resolution_y() const {
  return _internal_has_maximum_resolution_y();
}
inline void CMsgRemoteClientStartStream::clear_maximum_resolution_y() {
  maximum_resolution_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::_internal_maximum_resolution_y() const {
  return maximum_resolution_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::maximum_resolution_y() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.maximum_resolution_y)
  return _internal_maximum_resolution_y();
}
inline void CMsgRemoteClientStartStream::_internal_set_maximum_resolution_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  maximum_resolution_y_ = value;
}
inline void CMsgRemoteClientStartStream::set_maximum_resolution_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_resolution_y(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.maximum_resolution_y)
}

// repeated .CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
inline int CMsgRemoteClientStartStream::_internal_gamepads_size() const {
  return gamepads_.size();
}
inline int CMsgRemoteClientStartStream::gamepads_size() const {
  return _internal_gamepads_size();
}
inline void CMsgRemoteClientStartStream::clear_gamepads() {
  gamepads_.Clear();
}
inline ::CMsgRemoteClientStartStream_ReservedGamepad* CMsgRemoteClientStartStream::mutable_gamepads(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStartStream.gamepads)
  return gamepads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientStartStream_ReservedGamepad >*
CMsgRemoteClientStartStream::mutable_gamepads() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientStartStream.gamepads)
  return &gamepads_;
}
inline const ::CMsgRemoteClientStartStream_ReservedGamepad& CMsgRemoteClientStartStream::_internal_gamepads(int index) const {
  return gamepads_.Get(index);
}
inline const ::CMsgRemoteClientStartStream_ReservedGamepad& CMsgRemoteClientStartStream::gamepads(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.gamepads)
  return _internal_gamepads(index);
}
inline ::CMsgRemoteClientStartStream_ReservedGamepad* CMsgRemoteClientStartStream::_internal_add_gamepads() {
  return gamepads_.Add();
}
inline ::CMsgRemoteClientStartStream_ReservedGamepad* CMsgRemoteClientStartStream::add_gamepads() {
  // @@protoc_insertion_point(field_add:CMsgRemoteClientStartStream.gamepads)
  return _internal_add_gamepads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgRemoteClientStartStream_ReservedGamepad >&
CMsgRemoteClientStartStream::gamepads() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientStartStream.gamepads)
  return gamepads_;
}

// optional int32 audio_channel_count = 10 [default = 2];
inline bool CMsgRemoteClientStartStream::_internal_has_audio_channel_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStream::has_audio_channel_count() const {
  return _internal_has_audio_channel_count();
}
inline void CMsgRemoteClientStartStream::clear_audio_channel_count() {
  audio_channel_count_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::_internal_audio_channel_count() const {
  return audio_channel_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStream::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.audio_channel_count)
  return _internal_audio_channel_count();
}
inline void CMsgRemoteClientStartStream::_internal_set_audio_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  audio_channel_count_ = value;
}
inline void CMsgRemoteClientStartStream::set_audio_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_audio_channel_count(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.audio_channel_count)
}

// repeated .EStreamTransport supported_transport = 11;
inline int CMsgRemoteClientStartStream::_internal_supported_transport_size() const {
  return supported_transport_.size();
}
inline int CMsgRemoteClientStartStream::supported_transport_size() const {
  return _internal_supported_transport_size();
}
inline void CMsgRemoteClientStartStream::clear_supported_transport() {
  supported_transport_.Clear();
}
inline ::EStreamTransport CMsgRemoteClientStartStream::_internal_supported_transport(int index) const {
  return static_cast< ::EStreamTransport >(supported_transport_.Get(index));
}
inline ::EStreamTransport CMsgRemoteClientStartStream::supported_transport(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStream.supported_transport)
  return _internal_supported_transport(index);
}
inline void CMsgRemoteClientStartStream::set_supported_transport(int index, ::EStreamTransport value) {
  assert(::EStreamTransport_IsValid(value));
  supported_transport_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStream.supported_transport)
}
inline void CMsgRemoteClientStartStream::_internal_add_supported_transport(::EStreamTransport value) {
  assert(::EStreamTransport_IsValid(value));
  supported_transport_.Add(value);
}
inline void CMsgRemoteClientStartStream::add_supported_transport(::EStreamTransport value) {
  // @@protoc_insertion_point(field_add:CMsgRemoteClientStartStream.supported_transport)
  _internal_add_supported_transport(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgRemoteClientStartStream::supported_transport() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientStartStream.supported_transport)
  return supported_transport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgRemoteClientStartStream::_internal_mutable_supported_transport() {
  return &supported_transport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgRemoteClientStartStream::mutable_supported_transport() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientStartStream.supported_transport)
  return _internal_mutable_supported_transport();
}

// -------------------------------------------------------------------

// CMsgRemoteClientStartStreamResponse

// optional int32 e_launch_result = 1 [default = 2];
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_e_launch_result() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_e_launch_result() const {
  return _internal_has_e_launch_result();
}
inline void CMsgRemoteClientStartStreamResponse::clear_e_launch_result() {
  e_launch_result_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::_internal_e_launch_result() const {
  return e_launch_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::e_launch_result() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.e_launch_result)
  return _internal_e_launch_result();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_e_launch_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  e_launch_result_ = value;
}
inline void CMsgRemoteClientStartStreamResponse::set_e_launch_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_e_launch_result(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.e_launch_result)
}

// optional uint32 stream_port = 2;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_stream_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_stream_port() const {
  return _internal_has_stream_port();
}
inline void CMsgRemoteClientStartStreamResponse::clear_stream_port() {
  stream_port_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStreamResponse::_internal_stream_port() const {
  return stream_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientStartStreamResponse::stream_port() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.stream_port)
  return _internal_stream_port();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_stream_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  stream_port_ = value;
}
inline void CMsgRemoteClientStartStreamResponse::set_stream_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_port(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.stream_port)
}

// repeated int32 launch_options = 3;
inline int CMsgRemoteClientStartStreamResponse::_internal_launch_options_size() const {
  return launch_options_.size();
}
inline int CMsgRemoteClientStartStreamResponse::launch_options_size() const {
  return _internal_launch_options_size();
}
inline void CMsgRemoteClientStartStreamResponse::clear_launch_options() {
  launch_options_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::_internal_launch_options(int index) const {
  return launch_options_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::launch_options(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.launch_options)
  return _internal_launch_options(index);
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_options(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  launch_options_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.launch_options)
}
inline void CMsgRemoteClientStartStreamResponse::_internal_add_launch_options(::PROTOBUF_NAMESPACE_ID::int32 value) {
  launch_options_.Add(value);
}
inline void CMsgRemoteClientStartStreamResponse::add_launch_options(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_launch_options(value);
  // @@protoc_insertion_point(field_add:CMsgRemoteClientStartStreamResponse.launch_options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgRemoteClientStartStreamResponse::_internal_launch_options() const {
  return launch_options_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgRemoteClientStartStreamResponse::launch_options() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientStartStreamResponse.launch_options)
  return _internal_launch_options();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgRemoteClientStartStreamResponse::_internal_mutable_launch_options() {
  return &launch_options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgRemoteClientStartStreamResponse::mutable_launch_options() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientStartStreamResponse.launch_options)
  return _internal_mutable_launch_options();
}

// optional bytes auth_token = 4;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_auth_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_auth_token() const {
  return _internal_has_auth_token();
}
inline void CMsgRemoteClientStartStreamResponse::clear_auth_token() {
  auth_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgRemoteClientStartStreamResponse::auth_token() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.auth_token)
  return _internal_auth_token();
}
inline void CMsgRemoteClientStartStreamResponse::set_auth_token(const std::string& value) {
  _internal_set_auth_token(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.auth_token)
}
inline std::string* CMsgRemoteClientStartStreamResponse::mutable_auth_token() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStartStreamResponse.auth_token)
  return _internal_mutable_auth_token();
}
inline const std::string& CMsgRemoteClientStartStreamResponse::_internal_auth_token() const {
  return auth_token_.Get();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_auth_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_auth_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientStartStreamResponse.auth_token)
}
inline void CMsgRemoteClientStartStreamResponse::set_auth_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientStartStreamResponse.auth_token)
}
inline void CMsgRemoteClientStartStreamResponse::set_auth_token(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientStartStreamResponse.auth_token)
}
inline std::string* CMsgRemoteClientStartStreamResponse::_internal_mutable_auth_token() {
  _has_bits_[0] |= 0x00000001u;
  return auth_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientStartStreamResponse::release_auth_token() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientStartStreamResponse.auth_token)
  if (!_internal_has_auth_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return auth_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_allocated_auth_token(std::string* auth_token) {
  if (auth_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientStartStreamResponse.auth_token)
}

// optional .EStreamTransport transport = 5 [default = EStreamTransportUDP];
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_transport() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_transport() const {
  return _internal_has_transport();
}
inline void CMsgRemoteClientStartStreamResponse::clear_transport() {
  transport_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::EStreamTransport CMsgRemoteClientStartStreamResponse::_internal_transport() const {
  return static_cast< ::EStreamTransport >(transport_);
}
inline ::EStreamTransport CMsgRemoteClientStartStreamResponse::transport() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.transport)
  return _internal_transport();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_transport(::EStreamTransport value) {
  assert(::EStreamTransport_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  transport_ = value;
}
inline void CMsgRemoteClientStartStreamResponse::set_transport(::EStreamTransport value) {
  _internal_set_transport(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.transport)
}

// optional string relay_server = 6;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_relay_server() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_relay_server() const {
  return _internal_has_relay_server();
}
inline void CMsgRemoteClientStartStreamResponse::clear_relay_server() {
  relay_server_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgRemoteClientStartStreamResponse::relay_server() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.relay_server)
  return _internal_relay_server();
}
inline void CMsgRemoteClientStartStreamResponse::set_relay_server(const std::string& value) {
  _internal_set_relay_server(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.relay_server)
}
inline std::string* CMsgRemoteClientStartStreamResponse::mutable_relay_server() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStartStreamResponse.relay_server)
  return _internal_mutable_relay_server();
}
inline const std::string& CMsgRemoteClientStartStreamResponse::_internal_relay_server() const {
  return relay_server_.Get();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_relay_server(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_relay_server(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  relay_server_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientStartStreamResponse.relay_server)
}
inline void CMsgRemoteClientStartStreamResponse::set_relay_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientStartStreamResponse.relay_server)
}
inline void CMsgRemoteClientStartStreamResponse::set_relay_server(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientStartStreamResponse.relay_server)
}
inline std::string* CMsgRemoteClientStartStreamResponse::_internal_mutable_relay_server() {
  _has_bits_[0] |= 0x00000002u;
  return relay_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientStartStreamResponse::release_relay_server() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientStartStreamResponse.relay_server)
  if (!_internal_has_relay_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return relay_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_allocated_relay_server(std::string* relay_server) {
  if (relay_server != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  relay_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relay_server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientStartStreamResponse.relay_server)
}

// optional string launch_task = 7;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_launch_task() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_launch_task() const {
  return _internal_has_launch_task();
}
inline void CMsgRemoteClientStartStreamResponse::clear_launch_task() {
  launch_task_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgRemoteClientStartStreamResponse::launch_task() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.launch_task)
  return _internal_launch_task();
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_task(const std::string& value) {
  _internal_set_launch_task(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.launch_task)
}
inline std::string* CMsgRemoteClientStartStreamResponse::mutable_launch_task() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStartStreamResponse.launch_task)
  return _internal_mutable_launch_task();
}
inline const std::string& CMsgRemoteClientStartStreamResponse::_internal_launch_task() const {
  return launch_task_.Get();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_launch_task(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  launch_task_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_task(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  launch_task_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientStartStreamResponse.launch_task)
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_task(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  launch_task_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientStartStreamResponse.launch_task)
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_task(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  launch_task_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientStartStreamResponse.launch_task)
}
inline std::string* CMsgRemoteClientStartStreamResponse::_internal_mutable_launch_task() {
  _has_bits_[0] |= 0x00000004u;
  return launch_task_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientStartStreamResponse::release_launch_task() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientStartStreamResponse.launch_task)
  if (!_internal_has_launch_task()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return launch_task_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_allocated_launch_task(std::string* launch_task) {
  if (launch_task != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  launch_task_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_task,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientStartStreamResponse.launch_task)
}

// optional string launch_tasdetail = 8;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_launch_tasdetail() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_launch_tasdetail() const {
  return _internal_has_launch_tasdetail();
}
inline void CMsgRemoteClientStartStreamResponse::clear_launch_tasdetail() {
  launch_tasdetail_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgRemoteClientStartStreamResponse::launch_tasdetail() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
  return _internal_launch_tasdetail();
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_tasdetail(const std::string& value) {
  _internal_set_launch_tasdetail(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
}
inline std::string* CMsgRemoteClientStartStreamResponse::mutable_launch_tasdetail() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
  return _internal_mutable_launch_tasdetail();
}
inline const std::string& CMsgRemoteClientStartStreamResponse::_internal_launch_tasdetail() const {
  return launch_tasdetail_.Get();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_launch_tasdetail(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  launch_tasdetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_tasdetail(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  launch_tasdetail_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_tasdetail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  launch_tasdetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_tasdetail(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  launch_tasdetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
}
inline std::string* CMsgRemoteClientStartStreamResponse::_internal_mutable_launch_tasdetail() {
  _has_bits_[0] |= 0x00000008u;
  return launch_tasdetail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientStartStreamResponse::release_launch_tasdetail() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
  if (!_internal_has_launch_tasdetail()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return launch_tasdetail_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientStartStreamResponse::set_allocated_launch_tasdetail(std::string* launch_tasdetail) {
  if (launch_tasdetail != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  launch_tasdetail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_tasdetail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientStartStreamResponse.launch_tasdetail)
}

// optional int32 launch_tasks_done = 9;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_launch_tasks_done() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_launch_tasks_done() const {
  return _internal_has_launch_tasks_done();
}
inline void CMsgRemoteClientStartStreamResponse::clear_launch_tasks_done() {
  launch_tasks_done_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::_internal_launch_tasks_done() const {
  return launch_tasks_done_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::launch_tasks_done() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.launch_tasks_done)
  return _internal_launch_tasks_done();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_launch_tasks_done(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  launch_tasks_done_ = value;
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_tasks_done(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_launch_tasks_done(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.launch_tasks_done)
}

// optional int32 launch_tasks_total = 10;
inline bool CMsgRemoteClientStartStreamResponse::_internal_has_launch_tasks_total() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgRemoteClientStartStreamResponse::has_launch_tasks_total() const {
  return _internal_has_launch_tasks_total();
}
inline void CMsgRemoteClientStartStreamResponse::clear_launch_tasks_total() {
  launch_tasks_total_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::_internal_launch_tasks_total() const {
  return launch_tasks_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientStartStreamResponse::launch_tasks_total() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStartStreamResponse.launch_tasks_total)
  return _internal_launch_tasks_total();
}
inline void CMsgRemoteClientStartStreamResponse::_internal_set_launch_tasks_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  launch_tasks_total_ = value;
}
inline void CMsgRemoteClientStartStreamResponse::set_launch_tasks_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_launch_tasks_total(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStartStreamResponse.launch_tasks_total)
}

// -------------------------------------------------------------------

// CMsgRemoteClientPing

// -------------------------------------------------------------------

// CMsgRemoteClientPingResponse

// -------------------------------------------------------------------

// CMsgRemoteClientAcceptEULA

// repeated uint32 app_id = 1;
inline int CMsgRemoteClientAcceptEULA::_internal_app_id_size() const {
  return app_id_.size();
}
inline int CMsgRemoteClientAcceptEULA::app_id_size() const {
  return _internal_app_id_size();
}
inline void CMsgRemoteClientAcceptEULA::clear_app_id() {
  app_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAcceptEULA::_internal_app_id(int index) const {
  return app_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAcceptEULA::app_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAcceptEULA.app_id)
  return _internal_app_id(index);
}
inline void CMsgRemoteClientAcceptEULA::set_app_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  app_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAcceptEULA.app_id)
}
inline void CMsgRemoteClientAcceptEULA::_internal_add_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  app_id_.Add(value);
}
inline void CMsgRemoteClientAcceptEULA::add_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_app_id(value);
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAcceptEULA.app_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgRemoteClientAcceptEULA::_internal_app_id() const {
  return app_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgRemoteClientAcceptEULA::app_id() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientAcceptEULA.app_id)
  return _internal_app_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgRemoteClientAcceptEULA::_internal_mutable_app_id() {
  return &app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgRemoteClientAcceptEULA::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientAcceptEULA.app_id)
  return _internal_mutable_app_id();
}

// repeated string eula_id = 2;
inline int CMsgRemoteClientAcceptEULA::_internal_eula_id_size() const {
  return eula_id_.size();
}
inline int CMsgRemoteClientAcceptEULA::eula_id_size() const {
  return _internal_eula_id_size();
}
inline void CMsgRemoteClientAcceptEULA::clear_eula_id() {
  eula_id_.Clear();
}
inline std::string* CMsgRemoteClientAcceptEULA::add_eula_id() {
  // @@protoc_insertion_point(field_add_mutable:CMsgRemoteClientAcceptEULA.eula_id)
  return _internal_add_eula_id();
}
inline const std::string& CMsgRemoteClientAcceptEULA::_internal_eula_id(int index) const {
  return eula_id_.Get(index);
}
inline const std::string& CMsgRemoteClientAcceptEULA::eula_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAcceptEULA.eula_id)
  return _internal_eula_id(index);
}
inline std::string* CMsgRemoteClientAcceptEULA::mutable_eula_id(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientAcceptEULA.eula_id)
  return eula_id_.Mutable(index);
}
inline void CMsgRemoteClientAcceptEULA::set_eula_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAcceptEULA.eula_id)
  eula_id_.Mutable(index)->assign(value);
}
inline void CMsgRemoteClientAcceptEULA::set_eula_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAcceptEULA.eula_id)
  eula_id_.Mutable(index)->assign(std::move(value));
}
inline void CMsgRemoteClientAcceptEULA::set_eula_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  eula_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientAcceptEULA.eula_id)
}
inline void CMsgRemoteClientAcceptEULA::set_eula_id(int index, const char* value, size_t size) {
  eula_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientAcceptEULA.eula_id)
}
inline std::string* CMsgRemoteClientAcceptEULA::_internal_add_eula_id() {
  return eula_id_.Add();
}
inline void CMsgRemoteClientAcceptEULA::add_eula_id(const std::string& value) {
  eula_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAcceptEULA.eula_id)
}
inline void CMsgRemoteClientAcceptEULA::add_eula_id(std::string&& value) {
  eula_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAcceptEULA.eula_id)
}
inline void CMsgRemoteClientAcceptEULA::add_eula_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  eula_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgRemoteClientAcceptEULA.eula_id)
}
inline void CMsgRemoteClientAcceptEULA::add_eula_id(const char* value, size_t size) {
  eula_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgRemoteClientAcceptEULA.eula_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgRemoteClientAcceptEULA::eula_id() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientAcceptEULA.eula_id)
  return eula_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgRemoteClientAcceptEULA::mutable_eula_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientAcceptEULA.eula_id)
  return &eula_id_;
}

// repeated uint32 eula_version = 3;
inline int CMsgRemoteClientAcceptEULA::_internal_eula_version_size() const {
  return eula_version_.size();
}
inline int CMsgRemoteClientAcceptEULA::eula_version_size() const {
  return _internal_eula_version_size();
}
inline void CMsgRemoteClientAcceptEULA::clear_eula_version() {
  eula_version_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAcceptEULA::_internal_eula_version(int index) const {
  return eula_version_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientAcceptEULA::eula_version(int index) const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientAcceptEULA.eula_version)
  return _internal_eula_version(index);
}
inline void CMsgRemoteClientAcceptEULA::set_eula_version(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  eula_version_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientAcceptEULA.eula_version)
}
inline void CMsgRemoteClientAcceptEULA::_internal_add_eula_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  eula_version_.Add(value);
}
inline void CMsgRemoteClientAcceptEULA::add_eula_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_eula_version(value);
  // @@protoc_insertion_point(field_add:CMsgRemoteClientAcceptEULA.eula_version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgRemoteClientAcceptEULA::_internal_eula_version() const {
  return eula_version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgRemoteClientAcceptEULA::eula_version() const {
  // @@protoc_insertion_point(field_list:CMsgRemoteClientAcceptEULA.eula_version)
  return _internal_eula_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgRemoteClientAcceptEULA::_internal_mutable_eula_version() {
  return &eula_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgRemoteClientAcceptEULA::mutable_eula_version() {
  // @@protoc_insertion_point(field_mutable_list:CMsgRemoteClientAcceptEULA.eula_version)
  return _internal_mutable_eula_version();
}

// -------------------------------------------------------------------

// CMsgRemoteClientGetControllerConfig

// optional uint32 app_id = 1;
inline bool CMsgRemoteClientGetControllerConfig::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientGetControllerConfig::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgRemoteClientGetControllerConfig::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientGetControllerConfig::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientGetControllerConfig::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientGetControllerConfig.app_id)
  return _internal_app_id();
}
inline void CMsgRemoteClientGetControllerConfig::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CMsgRemoteClientGetControllerConfig::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientGetControllerConfig.app_id)
}

// optional uint32 controller_index = 3;
inline bool CMsgRemoteClientGetControllerConfig::_internal_has_controller_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientGetControllerConfig::has_controller_index() const {
  return _internal_has_controller_index();
}
inline void CMsgRemoteClientGetControllerConfig::clear_controller_index() {
  controller_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientGetControllerConfig::_internal_controller_index() const {
  return controller_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgRemoteClientGetControllerConfig::controller_index() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientGetControllerConfig.controller_index)
  return _internal_controller_index();
}
inline void CMsgRemoteClientGetControllerConfig::_internal_set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  controller_index_ = value;
}
inline void CMsgRemoteClientGetControllerConfig::set_controller_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controller_index(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientGetControllerConfig.controller_index)
}

// -------------------------------------------------------------------

// CMsgRemoteClientGetControllerConfigResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgRemoteClientGetControllerConfigResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRemoteClientGetControllerConfigResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgRemoteClientGetControllerConfigResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientGetControllerConfigResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRemoteClientGetControllerConfigResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientGetControllerConfigResponse.eresult)
  return _internal_eresult();
}
inline void CMsgRemoteClientGetControllerConfigResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgRemoteClientGetControllerConfigResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientGetControllerConfigResponse.eresult)
}

// optional bytes config_vdf = 2;
inline bool CMsgRemoteClientGetControllerConfigResponse::_internal_has_config_vdf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientGetControllerConfigResponse::has_config_vdf() const {
  return _internal_has_config_vdf();
}
inline void CMsgRemoteClientGetControllerConfigResponse::clear_config_vdf() {
  config_vdf_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgRemoteClientGetControllerConfigResponse::config_vdf() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
  return _internal_config_vdf();
}
inline void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(const std::string& value) {
  _internal_set_config_vdf(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
inline std::string* CMsgRemoteClientGetControllerConfigResponse::mutable_config_vdf() {
  // @@protoc_insertion_point(field_mutable:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
  return _internal_mutable_config_vdf();
}
inline const std::string& CMsgRemoteClientGetControllerConfigResponse::_internal_config_vdf() const {
  return config_vdf_.Get();
}
inline void CMsgRemoteClientGetControllerConfigResponse::_internal_set_config_vdf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  config_vdf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  config_vdf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
inline void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  config_vdf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
inline void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  config_vdf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
inline std::string* CMsgRemoteClientGetControllerConfigResponse::_internal_mutable_config_vdf() {
  _has_bits_[0] |= 0x00000001u;
  return config_vdf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgRemoteClientGetControllerConfigResponse::release_config_vdf() {
  // @@protoc_insertion_point(field_release:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
  if (!_internal_has_config_vdf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return config_vdf_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgRemoteClientGetControllerConfigResponse::set_allocated_config_vdf(std::string* config_vdf) {
  if (config_vdf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_vdf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_vdf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}

// -------------------------------------------------------------------

// CMsgRemoteClientStreamingEnabled

// required bool enabled = 1;
inline bool CMsgRemoteClientStreamingEnabled::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRemoteClientStreamingEnabled::has_enabled() const {
  return _internal_has_enabled();
}
inline void CMsgRemoteClientStreamingEnabled::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgRemoteClientStreamingEnabled::_internal_enabled() const {
  return enabled_;
}
inline bool CMsgRemoteClientStreamingEnabled::enabled() const {
  // @@protoc_insertion_point(field_get:CMsgRemoteClientStreamingEnabled.enabled)
  return _internal_enabled();
}
inline void CMsgRemoteClientStreamingEnabled::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
}
inline void CMsgRemoteClientStreamingEnabled::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgRemoteClientStreamingEnabled.enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_2eproto
